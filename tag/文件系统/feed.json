{
    "version": "https://jsonfeed.org/version/1",
    "title": "Or0kit • All posts by \"文件系统\" tag",
    "description": "临渊羡鱼，不如退而结网",
    "home_page_url": "https://Or0kit.github.io",
    "items": [
        {
            "id": "https://or0kit.github.io/Bin/Core/Drive-Development/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E7%9A%84%E8%BF%87%E6%BB%A4%E4%B8%8E%E7%9B%91%E6%8E%A7/",
            "url": "https://or0kit.github.io/Bin/Core/Drive-Development/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E7%9A%84%E8%BF%87%E6%BB%A4%E4%B8%8E%E7%9B%91%E6%8E%A7/",
            "title": "文件系统的过滤与监控",
            "date_published": "2022-08-04T08:12:26.000Z",
            "content_html": "<h1 id=\"文件系统的过滤与监控简介\"><a class=\"anchor\" href=\"#文件系统的过滤与监控简介\">#</a> 文件系统的过滤与监控简介</h1>\n<p>接下来学习<strong>最复杂的文件系统过滤</strong>。</p>\n<p>文件系统过滤的目标，是捕获 Windows 系统对文件的种种操作行为，比如文件的创建、打开、读 / 写、改名，目录的创建、打开、枚举、改名、删除等。捕获对文件的操作，并对其进行过滤，能实现许多强大的功能，比如检查病毒、数据加密、数据备份、安全监控等。</p>\n<p>文件系统过滤比串口、键盘、硬盘都更加复杂，这主要源于文件系统的复杂性。串口基本上只需要发送和接收数据就可以了，键盘只需要等待按键即可，硬盘最重要的操作也只有两种：读数据和写数据；而文件系统则不同。</p>\n<p>请不要把文件系统驱动和存储驱动混淆。<em>硬盘是典型的存储设备，只负责数据的读与写</em>；而文件系统则不管数据是如何读 / 写到硬盘（或者其他设备）上的，<em>它只负责将数据在硬盘的平坦空间内组织成文件和目录</em>。</p>\n<p><strong>文件和目录都是很复杂的信息集合。一个文件至少要有文件名、内容、大小、各种属性等，这些信息在硬盘实际空间中的保存结构和组织方式极其复杂。此外还有目录，目录是可以嵌套的。一个目录的删除、移动都涉及其下所有的子目录和文件的删除、移动。因此，文件系统本身是极为复杂的系统，文件系统的过滤也尤为复杂。</strong></p>\n<p><em>一般地说，如果一个功能能在存储设备的层次上完成，那么就让它在存储设备的层次上完成，这比在文件系统上完成要简单得多。有些人为了加密硬盘或者为了实现硬盘还原而研究文件系统过滤。实际上没有必要，因为存储设备过滤就足以解决这样的问题了。</em></p>\n<p>但是一旦要求区分目录（比如要求指定某个目录下的文件可以加密）或者有其他的牵涉到文件系统的要求，存储设备驱动过滤就很难解决问题了，此时只能进行文件系统过滤。</p>\n<p>将文件系统过滤应用于实时监控的防毒软件最为典型。防毒软件一般都带有文件系统过滤驱动，当 Windows 上任何软件试图写一个文件的时候，防毒软件都会过滤其写入的内容，检查其中是否有病毒的特征码。</p>\n<p>此外，还有一些其他的应用，如文件或者目录的还原、隐藏、转向、文件系统透明加密等。</p>\n<h1 id=\"文件系统的设备对象\"><a class=\"anchor\" href=\"#文件系统的设备对象\">#</a> 文件系统的设备对象</h1>\n<h2 id=\"控制设备与卷设备\"><a class=\"anchor\" href=\"#控制设备与卷设备\">#</a> 控制设备与卷设备</h2>\n<p>在 Windows 上，大家熟知的两种文件系统是 FAT32 和 NTFS。FAT32 的驱动在 Windows 下叫作 fastfat.sys，NTFS 的驱动在 Windows 下叫作 ntfs.sys。这两个文件都在 Windows 系统目录中的 drivers 目录下。</p>\n<p>文件系统过滤虽然复杂，但是基本方法还是一样的，就是生成过滤设备对象来绑定真实的设备对象。为此，先介绍一下文件系统驱动会生成哪些设备对象。</p>\n<p>像 FAT32、NTFS 这样的文件系统（File System，FS），主要生成两类设备。首先文件系统驱动本身往往生成一个控制设备（CDO），这个设备的主要任务是修改整个驱动的内部配置。因此，一个文件系统只对应一个 CDO。</p>\n",
            "tags": [
                "文件系统"
            ]
        }
    ]
}