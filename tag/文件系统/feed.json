{
    "version": "https://jsonfeed.org/version/1",
    "title": "Or0kit • All posts by \"文件系统\" tag",
    "description": "临渊羡鱼，不如退而结网",
    "home_page_url": "https://Or0kit.github.io",
    "items": [
        {
            "id": "https://or0kit.github.io/Bin/Core/Drive-Development/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E7%9A%84%E8%BF%87%E6%BB%A4%E4%B8%8E%E7%9B%91%E6%8E%A7/",
            "url": "https://or0kit.github.io/Bin/Core/Drive-Development/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E7%9A%84%E8%BF%87%E6%BB%A4%E4%B8%8E%E7%9B%91%E6%8E%A7/",
            "title": "文件系统的过滤与监控",
            "date_published": "2022-08-04T08:12:26.000Z",
            "content_html": "<h1 id=\"文件系统的过滤与监控简介\"><a class=\"anchor\" href=\"#文件系统的过滤与监控简介\">#</a> 文件系统的过滤与监控简介</h1>\n<p>开始学习<strong>复杂的文件系统过滤</strong>。</p>\n<p>文件系统过滤的目标，<strong>是捕获 Windows 系统对文件的种种操作行为</strong>，比如文件的<em>创建、打开、读 / 写、改名，目录的创建、打开、枚举、改名、删除等</em>。捕获对文件的操作，并对其进行过滤，能实现许多强大的功能，比如检查病毒、数据加密、数据备份、安全监控等。</p>\n<p>文件系统过滤比串口、键盘、硬盘都更加复杂，这主要源于文件系统的复杂性。串口基本上只需要发送和接收数据就可以了，键盘只需要等待按键即可，硬盘最重要的操作也只有两种：读数据和写数据；而文件系统则不同。</p>\n<p>请不要把文件系统驱动和存储驱动混淆。<em>硬盘是典型的存储设备，只负责数据的读与写</em>；而文件系统则不管数据是如何读 / 写到硬盘（或者其他设备）上的，<em>它只负责将数据在硬盘的平坦空间内组织成文件和目录</em>。</p>\n<p><strong>文件和目录都是很复杂的信息集合。一个文件至少要有文件名、内容、大小、各种属性等，这些信息在硬盘实际空间中的保存结构和组织方式极其复杂。此外还有目录，目录是可以嵌套的。一个目录的删除、移动都涉及其下所有的子目录和文件的删除、移动。因此，文件系统本身是极为复杂的系统，文件系统的过滤也尤为复杂。</strong></p>\n<p><em>一般地说，如果一个功能能在存储设备的层次上完成，那么就让它在存储设备的层次上完成，这比在文件系统上完成要简单得多。有些人为了加密硬盘或者为了实现硬盘还原而研究文件系统过滤。实际上没有必要，因为存储设备过滤就足以解决这样的问题了。</em></p>\n<p>但是一旦要求区分目录（比如要求指定某个目录下的文件可以加密）或者有其他的牵涉到文件系统的要求，存储设备驱动过滤就很难解决问题了，此时只能进行文件系统过滤。</p>\n<p>将文件系统过滤应用于实时监控的防毒软件最为典型。防毒软件一般都带有文件系统过滤驱动，当 Windows 上任何软件试图写一个文件的时候，防毒软件都会过滤其写入的内容，检查其中是否有病毒的特征码。</p>\n<p>此外，还有一些其他的应用，如<em>文件或者目录的还原、隐藏、转向、文件系统透明加密</em>等。</p>\n<h1 id=\"文件系统的设备对象\"><a class=\"anchor\" href=\"#文件系统的设备对象\">#</a> 文件系统的设备对象</h1>\n<p>在 Windows 上，大家熟知的两种文件系统是 FAT32 和 NTFS。<br />\nFAT32 的驱动在 Windows 下叫作 <code>fastfat.sys</code> ，NTFS 的驱动在 Windows 下叫作 <code>ntfs.sys</code> 。这两个文件都在 Windows 系统目录中的 drivers 目录下。</p>\n<p>文件系统过滤虽然复杂，但是基本方法还是一样的，<em>就是生成过滤设备对象来绑定真实的设备对象</em>。</p>\n<p>为此，<strong>先了解一下文件系统驱动会生成哪些设备对象</strong>。</p>\n<h2 id=\"控制设备与卷设备\"><a class=\"anchor\" href=\"#控制设备与卷设备\">#</a> 控制设备与卷设备</h2>\n<p>首先了解什么是<em>控制设备</em>和<em>卷设备</em>。</p>\n<p>像 FAT32、NTFS 这样的文件系统（File System，FS），主要生成两类设备。<br />\n首先文件系统驱动本身往往生成一个 <code>控制设备（CDO）</code> ，这个设备的主要任务是<em>修改整个驱动的内部配置</em>。因此，<strong>一个文件系统只对应一个 CDO</strong>。</p>\n<p>另一种设备是这个文件系统的 <code>卷设备</code> 。 一般 <code>一个卷对应一个逻辑盘</code> 。</p>\n<p>一个 FS 可能有多个加载的卷， 也可能一个都没有。 例如， 如果计算机上有 C:、 D:、E:、 F: 4 个逻辑盘， 则有 4 个卷设备。 实际上， “C:” 是设备的符号链接（Symbolic Link）名， 而不是真正的设备名。 如果读者安装有专门查看符号链接的工具 Symbolic LinksViewer， 则可以看到： “C:” 这个符号链接名对应的设备名是 <code>“\\Device\\HarddiskVolume1”</code> ，因此该设备的设备真名为 <code>“\\Device\\HarddiskVolume1”</code> 。</p>\n<p>请注意这个卷设备本身并不是文件系统驱动生成的， 而是卷管理器生成的。 但是当有一个卷使用了某种文件系统时， 该文件系统会对应地为该设备生成一个没有名字的设备对象， 本章将其称为文件系统的卷设备。</p>\n<p>本章中所说的 “卷设备” 都是特指文件系统的卷设备， 并常常用真正的卷设备的符号链接或者名字来称呼它们。</p>\n<p>比如：如果 <code>C:</code> 、  <code>D:</code>  为 NTFS；  <code>E:</code> 、  <code>F:</code>  为 FAT32， 那么 <code>E:</code> 、  <code>F:</code>  则是 FAT32 的两个卷设备对象； 而 <code>C:</code> 、  <code>D:</code>  为 NTFS 的两个卷设备对象。</p>\n<p>但是这只是一种称呼。 实际上， 如果按照前面的方法去打开设备 <code>“\\Device\\HarddiskVolume1”</code> ， 然后绑定是不对的， 因为这样并没有绑定文件系统生成的卷设备， 而是绑定了一个真正的卷设备。  <code>所以绑定文件系统的卷设备， 并不是用名字来解决的（那些设备是没有名字的）</code> 。</p>\n<p>同时， 从这里也可以看出来， 文件系统驱动是针对每个卷来生成一个设备对象， 而不是针对每个文件的。 实际上，对文件读 / 写的 IRP，都发到卷设备对象上了， 并不会生成一个 “文件设备对象”。</p>\n<p>需要关心的就是以上两类设备（控制设备和卷设备）。</p>\n<p>发送给<strong>控制设备的请求（IRP）一般是文件系统控制 IRP</strong>（主功能号为 <code>IRP_MJ_FILE_SYSTEM_CONTROL</code> ）；而发送给<strong>卷设备的 IRP 则一般是文件操作 IRP</strong>。</p>\n<hr />\n<p><em>过滤最终是为了得到文件操作 IRP， 但是控制设备的 IRP 一般用来捕获卷设备的生成信息</em>。 换句话说，<strong>最终目标是绑定文件系统的卷设备， 但前提是先绑定文件系统控制设备</strong>。</p>\n<p>这里的代码都以 WDK 中的 sfilter 为例， WDK 目录下的 <code>\\src\\filesys\\filter\\sfilter</code>  中有完整的代码。</p>\n<p>看雪一个大佬的在十年前就发了一个中文注释的版本，这里附上链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYnMucGVkaXkuY29tL3RocmVhZC0xNTIzMzguaHRt\">https://bbs.pediy.com/thread-152338.htm</span>，其文章最后的评论中有代码的下载链接。</p>\n<p>书中的代码是以一个点进行切入学习的，刚开始的时候并不全。</p>\n<h2 id=\"生成自己的一个控制设备\"><a class=\"anchor\" href=\"#生成自己的一个控制设备\">#</a> 生成自己的一个控制设备</h2>\n<p>首先是 DriverEntry。 进入的第一步是生成这个驱动自己使用的 CDO， 这一步非常重要， 因为<em>文件过滤驱动往往必须和外界的应用程序通信</em>（比如杀毒软件的过滤驱动必须把发现的信息告诉有界面的应用程序部分） ， 通信的主要接口就是这个<em>控制设备</em>。</p>\n<p><em>在文件过滤中， 唯一不同的是， 控制设备按照惯例应该生成在 “\\FileSystem\\Filters\\” 下， 但是这个路径是后来才出现的， 在一些早期版本的 Windows 系统中， 这个路径可能不存在。 此时， 改为生成在 “\\FileSystem\\” 目录下即可。</em></p>\n<p>先以此代码为基础进行学习。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>NTSTATUS </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">DriverEntry</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tPDRIVER_OBJECT pDriverObject<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tPUNICODE_STRING pRegPath</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tUNICODE_STRING nameString<span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\">// 定义名字串结构变量</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tNTSTATUS status<span class=\"token punctuation\">;</span>\t\t\t\t\t<span class=\"token comment\">// 状态码</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token function\">RtlInitUnicodeString</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>nameString<span class=\"token punctuation\">,</span> L<span class=\"token string\">\"\\\\FileSystem\\\\Filters\\\\SFilter\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token comment\">// 生成控制设备</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tstatus <span class=\"token operator\">=</span> <span class=\"token function\">IoCreateDevice</span><span class=\"token punctuation\">(</span>pDriverObject<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t<span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"token comment\">// 没有 设备扩展 </span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t<span class=\"token operator\">&amp;</span>nameString<span class=\"token punctuation\">,</span>\t\t\t\t\t\t\t\t\t<span class=\"token comment\">// 设备名:   FileSystem\\\\Filters\\\\SFilter</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\tFILE_DEVICE_DISK_FILE_SYSTEM<span class=\"token punctuation\">,</span>\t\t\t\t\t<span class=\"token comment\">// 设备类型：磁盘文件系统</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\tFILE_DEVICE_SECURE_OPEN<span class=\"token punctuation\">,</span>\t\t\t\t\t\t<span class=\"token comment\">// 设备特征：对发送到 CDO 的打开请求进行安全检查</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\tFALSE<span class=\"token punctuation\">,</span>\t\t\t\t\t\t\t\t\t\t\t<span class=\"token comment\">// 生成一个在用户模式下使用的设备</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t<span class=\"token operator\">&amp;</span>gSFilterControlDeviceObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t\t<span class=\"token comment\">// 接收生成的 \"控制设备对象\"</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>status <span class=\"token operator\">==</span> STATUS_OBJECT_PATH_NOT_FOUND<span class=\"token punctuation\">)</span>\t\t\t\t\t\t\t\t<span class=\"token comment\">// 判断是否 未找到路径</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t<span class=\"token function\">RtlInitUnicodeString</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>nameString<span class=\"token punctuation\">,</span> L<span class=\"token string\">\"\\\\FileSystem\\\\SFilterCDO\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 重新创建 控制设备名称 </span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\tstatus <span class=\"token operator\">=</span> <span class=\"token function\">IoCreateDevice</span><span class=\"token punctuation\">(</span>pDriverObject<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t\t<span class=\"token operator\">&amp;</span>nameString<span class=\"token punctuation\">,</span>\t\t\t\t\t\t\t\t\t\t\t<span class=\"token comment\">// 设备名: FileSystem\\\\SFilterCDO</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t\tFILE_DEVICE_DISK_FILE_SYSTEM<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t\tFILE_DEVICE_SECURE_OPEN<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t\tFALSE<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t\t<span class=\"token operator\">&amp;</span>gSFilterControlDeviceObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t<span class=\"token comment\">// 接收生成的 控制设备对象 </span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">NT_SUCCESS</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"token comment\">// 判断 IoCreateDevice 调用是否成功</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\t\t<span class=\"token function\">KdPrint</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SFilter!DriverEntry: Error creating control device object \\\"%wZ\\\", status=%08x\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>nameString<span class=\"token punctuation\">,</span> status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> status<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 错误返回 (创建 CDO 失败)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">NT_SUCCESS</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\t<span class=\"token comment\">// 如果路径正确但生成控制设备失败，也打印一个 log，并直接返回错误</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\t<span class=\"token function\">KdPrint</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SFilter!DriverEntry:Error creating control device object \\\"%wZ\\\",status=%08x\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>nameString<span class=\"token punctuation\">,</span> status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> status<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t<span class=\"token keyword\">return</span> STATUS_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这段代码只能生成一个控制设备， 还没有对文件系统已有的设备对象进行绑定。</p>\n<p>接下来继续学习文件系统过滤所需要注意的分发函数。</p>\n<h1 id=\"文件系统的分发函数\"><a class=\"anchor\" href=\"#文件系统的分发函数\">#</a> 文件系统的分发函数</h1>\n<p>在学习分发函数之前先看两个后面会用到的宏：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 宏定义: IS_MY_DEVICE_OBJECT (指向设备对象的指针); 意义: (指针≠NULL) 且 (设备对象的 DriverObject 是 gSFilterDriverObject) 且 (设备对象的 DeviceExtension≠NULL)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">IS_MY_DEVICE_OBJECT</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>_devObj<span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_devObj<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_devObj<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>DriverObject <span class=\"token operator\">==</span> gSFilterDriverObject<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_devObj<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>DeviceExtension <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 宏定义：测试是不是我的 \"控制设备对象\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">IS_MY_CONTROL_DEVICE_OBJECT</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>_devObj<span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_devObj<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> gSFilterControlDeviceObject<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span><span class=\"token function\">ASSERT</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_devObj<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>DriverObject <span class=\"token operator\">==</span> gSFilterDriverObject<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_devObj<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>DeviceExtension <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> TRUE<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> FALSE<span class=\"token punctuation\">)</span></span></span></pre></td></tr></table></figure><p>这两个宏都借助了我们的全局 CDO 变量 <code>gSFilterControlDeviceObject</code> 。</p>\n<h2 id=\"普通的分发函数\"><a class=\"anchor\" href=\"#普通的分发函数\">#</a> 普通的分发函数</h2>\n<p>上一节仅仅生成了控制设备对象， 开发文件过滤驱动的主要工作还是撰写分发函数。在上面的代码中，  <code>DriverObject</code>  是从 <code>DriverEntry</code>  中传入的驱动对象指针， 现在来指定几个分发函数。  <code>SfPassThrough</code>  负责所有不需要处理、 直接下发到下层驱动的 IRP。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 注册默认派遣函数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> IRP_MJ_MAXIMUM_FUNCTION<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\tDriverObject<span class=\"token operator\">-></span>MajorFunction<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> SfPassThrough<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>作为过滤驱动， 一些特殊的分发函数必须受到特殊的处理。</p>\n<p>其中主要包括：</p>\n<ol>\n<li>\n<p>打开请求（主功能号为 <code>IRP_MJ_CREATE</code> ， 但本章中还包括另外两种主功能号：  <code>IRP_MJ_CREATE_NAMED_PIPE</code>  和 <code>IRP_MJ_CREATE_MAILSLOT</code> ）。</p>\n</li>\n<li>\n<p>文件系统控制请求（这种请求仅在文件系统过滤中出现， 主功能号为 <code>IRP_MJ_FILE_SYSTEM_ CONTROL</code> ） 、 清理请求（ <code>IRP_MJ_CLEANUP</code> ） 和关闭请求（ <code>IRP_MJ_CLOSE</code> ） 。</p>\n</li>\n</ol>\n<p>这些 IRP 对文件系统来说都很关键。 为此， 给予它们单独的分发函数，</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 注册具体派遣函数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>DriverObject<span class=\"token operator\">-></span>MajorFunction<span class=\"token punctuation\">[</span>IRP_MJ_CREATE<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> SfCreate<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>DriverObject<span class=\"token operator\">-></span>MajorFunction<span class=\"token punctuation\">[</span>IRP_MJ_CREATE_NAMED_PIPE<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> SfCreate<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>DriverObject<span class=\"token operator\">-></span>MajorFunction<span class=\"token punctuation\">[</span>IRP_MJ_CREATE_MAILSLOT<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> SfCreate<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>DriverObject<span class=\"token operator\">-></span>MajorFunction<span class=\"token punctuation\">[</span>IRP_MJ_FILE_SYSTEM_CONTROL<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> SfFsControl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>DriverObject<span class=\"token operator\">-></span>MajorFunction<span class=\"token punctuation\">[</span>IRP_MJ_CLEANUP<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> SfCleanupClose<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>DriverObject<span class=\"token operator\">-></span>MajorFunction<span class=\"token punctuation\">[</span>IRP_MJ_CLOSE<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> SfCleanupClose<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>至于过滤中最简单的处理， 当然就是不做任何处理， 直接下发了。</p>\n<p>下面是 <code>SfPassThrough</code>  函数：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>NTSTATUS  <span class=\"token function\">SfPassThrough</span><span class=\"token punctuation\">(</span>IN PDEVICE_OBJECT DeviceObject<span class=\"token punctuation\">,</span> IN PIRP Irp<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token comment\">// ASSERT 宏只在调试版本中编译才有意义，在发行版本中编译时不起任何作用。</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token comment\">// 测试是不是是我的 \"控制设备对象\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token function\">ASSERT</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">IS_MY_CONTROL_DEVICE_OBJECT</span><span class=\"token punctuation\">(</span>DeviceObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token comment\">// IS_MY_DEVICE_OBJECT (指向设备对象的指针); 意义: (指针≠NULL) 且 (设备对象的 DriverObject 是 gSFilterDriverObject) 且 (设备对象的 DeviceExtension≠NULL)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token function\">ASSERT</span><span class=\"token punctuation\">(</span><span class=\"token function\">IS_MY_DEVICE_OBJECT</span><span class=\"token punctuation\">(</span>DeviceObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token comment\">// 直接下发 IRP</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token function\">IoSkipCurrentIrpStackLocation</span><span class=\"token punctuation\">(</span>Irp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token function\">IoCallDriver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>PSFILTER_DEVICE_EXTENSION<span class=\"token punctuation\">)</span>DeviceObject<span class=\"token operator\">-></span>DeviceExtension<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>AttachedToDeviceObject<span class=\"token punctuation\">,</span> Irp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这两个 ASSERT 是来确认两个事实：</p>\n<p>（1） 进入 <code>SfPassThrough</code>  例程的 IRP 不是发送给本驱动的控制设备的。 因为这个驱动的控制设备是自己生成用来通信的， 所以它没有下层真实设备， 它所有的 IRP 都必须由本驱动自己处理。 因此发送给自己控制设备的 IRP 如果进入了 <code>SfPassThrough</code>  例程， 将产生一个致命的错误。</p>\n<p>（2） 这个 <code>DeviceObject</code>  是本驱动生成的过滤设备。 如果这个 <code>DeviceObject</code>  不是本驱动生成的过滤设备， 那么也不会有一个类型为 <code>SFILTER_DEVICE_EXTENSION</code>  的设备扩展， 且下面 <code>将AttachedToDeviceObject</code>  作为真实设备也是错误的。</p>\n<p>到这里为止都还没有讨论如何生成过滤设备（只生成了一个简单的控制设备） ，也没有谈及过滤设备的设备扩展。 在后面会看到相关信息， 在这里不需要深究。</p>\n<p><em>在内核编程中， 虽然极力仔细地编程， 但各种未能预料的结果依然是随时可能发生的。 如果认为一个现象不应该发生， 那么加上一个 ASSERT 来确认是个好习惯。 因为一旦不该发生的事情发生了， ASSERT 马上就会报错。 错误报得越早， 查找问题的根源就越容易， 这样就能在调试版本阶段， 把很多潜在的错误挖掘出来。</em></p>\n<h2 id=\"文件过滤的快速io分发函数\"><a class=\"anchor\" href=\"#文件过滤的快速io分发函数\">#</a> 文件过滤的快速 IO 分发函数</h2>\n<p>由于这个驱动将要绑定到文件系统驱动的上边，文件系统出来正常的 IRP 之外，还要处理<strong>快速 IO</strong>（Fast I/O）；除了普通的分发函数之外，还得为驱动对象撰写另一组快速 IO 分发函数。 这组函数的指针在 driver-&gt;FastIoDispatch 中， 而且这里本来是没有空间的， 所以为了保存这一组指针， 必须自己分配空间。</p>\n<p>下面的代码使用 <code>ExAllocatePoolWithTag</code>  分配内存空间。</p>\n<p><code>ExAllocatePoolWithTag</code>  是 Windows 内核动态分配内存的常用函数（相当于标准 C 的 malloc）。<br />\n第一个参数是要分配的内存类型。 <strong>快速 IO 分发函数表必须在非分页内存空间中， 所以这里使用 <code>NonPagedPool</code> </strong>。<br />\n第二个参数表示要分配的缓冲区的长度。<br />\n第三个参数是任意填写的一个长整数， 作为这次分配的标记。 标记往往用于查找内存泄漏的错误。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 处理 Fast I/O</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tPFAST_IO_DISPATCH fastIoDispatch<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 定义 FAST_IO_DISPATCH 结构变量</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tfastIoDispatch <span class=\"token operator\">=</span> <span class=\"token function\">ExAllocatePoolWithTag</span><span class=\"token punctuation\">(</span>NonPagedPool<span class=\"token punctuation\">,</span>\t<span class=\"token comment\">// 从非分页池中分配</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>FAST_IO_DISPATCH<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\t\t\t\t\t\t\t<span class=\"token comment\">// 要分配的字节数</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\tSFLT_POOL_TAG<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t\t\t\t<span class=\"token comment\">// 指定一个 4 字节的标签 (前面已宏定义:'tlFS')</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>fastIoDispatch<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token function\">IoDeleteDevice</span><span class=\"token punctuation\">(</span>gSFilterControlDeviceObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 删除上面创建的的 CDO</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> STATUS_INSUFFICIENT_NVRAM_RESOURCES<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 返回一个错误的 status 码（资源不足）</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token function\">RtlZeroMemory</span><span class=\"token punctuation\">(</span>fastIoDispatch<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>FAST_IO_DISPATCH<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tfastIoDispatch<span class=\"token operator\">-></span>SizeOfFastIoDispatch <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>FAST_IO_DISPATCH<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 设置 FastIo 分配表的长度域</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\tfastIoDispatch<span class=\"token operator\">-></span>FastIoCheckIfPossible <span class=\"token operator\">=</span> SfFastIoCheckIfPossible<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 设置 FastIo 分派函数，共 21 个</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\tfastIoDispatch<span class=\"token operator\">-></span>FastIoRead <span class=\"token operator\">=</span> SfFastIoRead<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\tfastIoDispatch<span class=\"token operator\">-></span>FastIoWrite <span class=\"token operator\">=</span> SfFastIoWrite<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\tfastIoDispatch<span class=\"token operator\">-></span>FastIoQueryBasicInfo <span class=\"token operator\">=</span> SfFastIoQueryBasicInfo<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\tfastIoDispatch<span class=\"token operator\">-></span>FastIoQueryStandardInfo <span class=\"token operator\">=</span> SfFastIoQueryStandardInfo<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\tfastIoDispatch<span class=\"token operator\">-></span>FastIoLock <span class=\"token operator\">=</span> SfFastIoLock<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\tfastIoDispatch<span class=\"token operator\">-></span>FastIoUnlockSingle <span class=\"token operator\">=</span> SfFastIoUnlockSingle<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\tfastIoDispatch<span class=\"token operator\">-></span>FastIoUnlockAll <span class=\"token operator\">=</span> SfFastIoUnlockAll<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\tfastIoDispatch<span class=\"token operator\">-></span>FastIoUnlockAllByKey <span class=\"token operator\">=</span> SfFastIoUnlockAllByKey<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\tfastIoDispatch<span class=\"token operator\">-></span>FastIoDeviceControl <span class=\"token operator\">=</span> SfFastIoDeviceControl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\tfastIoDispatch<span class=\"token operator\">-></span>FastIoDetachDevice <span class=\"token operator\">=</span> SfFastIoDetachDevice<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\tfastIoDispatch<span class=\"token operator\">-></span>FastIoQueryNetworkOpenInfo <span class=\"token operator\">=</span> SfFastIoQueryNetworkOpenInfo<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\tfastIoDispatch<span class=\"token operator\">-></span>MdlRead <span class=\"token operator\">=</span> SfFastIoMdlRead<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\tfastIoDispatch<span class=\"token operator\">-></span>MdlReadComplete <span class=\"token operator\">=</span> SfFastIoMdlReadComplete<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\tfastIoDispatch<span class=\"token operator\">-></span>PrepareMdlWrite <span class=\"token operator\">=</span> SfFastIoPrepareMdlWrite<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\tfastIoDispatch<span class=\"token operator\">-></span>MdlWriteComplete <span class=\"token operator\">=</span> SfFastIoMdlWriteComplete<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\tfastIoDispatch<span class=\"token operator\">-></span>FastIoReadCompressed <span class=\"token operator\">=</span> SfFastIoReadCompressed<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\tfastIoDispatch<span class=\"token operator\">-></span>FastIoWriteCompressed <span class=\"token operator\">=</span> SfFastIoWriteCompressed<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\tfastIoDispatch<span class=\"token operator\">-></span>MdlReadCompleteCompressed <span class=\"token operator\">=</span> SfFastIoMdlReadCompleteCompressed<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\tfastIoDispatch<span class=\"token operator\">-></span>MdlWriteCompleteCompressed <span class=\"token operator\">=</span> SfFastIoMdlWriteCompleteCompressed<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\tfastIoDispatch<span class=\"token operator\">-></span>FastIoQueryOpen <span class=\"token operator\">=</span> SfFastIoQueryOpen<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\tpDriverObject<span class=\"token operator\">-></span>FastIoDispatch <span class=\"token operator\">=</span> fastIoDispatch<span class=\"token punctuation\">;</span>\t\t\t\t\t\t<span class=\"token comment\">// 将 FastIo 分派表保存到驱动对象的 FastIoDispatch 域</span></pre></td></tr></table></figure><p>在了解快速 IO 分发函数时，可能会疑问为什么在前面的串口、 键盘和硬盘这些过滤程序中， 都没见过填写如此复杂的接口？</p>\n<p>实际上， 驱动对象结构 <code>DRIVER_OBJECT</code>  中既然有快速 IO 分发函数的设置接口， 那么从理论上讲， 所有的驱动对象都可以有快速 IO 分发函数 —— 只是它们可能根本不被调用。</p>\n<p>显然串口、 键盘的快速 IO 分发函数都不会被调用 ———— 在驱动里它们根本就没有被设置。</p>\n<p>但是文件系统不行， 如果不设置， 上层依然会调用， 而且会导致蓝屏。</p>\n<p>快速 IO 分发函数是独立于普通的处理 IRP 的分发函数之外的另一组接口。<br />\n但是它们的作用是一样的， 就是由驱动处理外部给予的请求， 而且所处理的请求也基本相同， 只是根本没有 IRP， 本来应该写在 IRP 中的参数， 直接通过函数的参数被传递进来了。 这可以减少分配 IRP 的效率消耗。</p>\n<p>文件系统的普通分发函数和快速 IO 分发函数都随时有可能被调用， 好的过滤驱动显然应该同时过滤这两套接口。</p>\n<p>但是， 一般资料都只介绍 IRP 过滤的方法， 快速 IO 分发函数非常复杂， 但是与 IRP 过滤是基本一一对应的， 只要了解了前者， 后者就很容易能够学<br />\n会。</p>\n<p>在开发的初期学习阶段， 有一个折中的简单方案： 可以简单地设置所有的快速 IO 分发函数返回 FALSE 并不做任何事， 这样这些请求都会通过 IRP 重新发送而被普通分发函数捕获。</p>\n<p>有一定的效率损失， 但并不是很大， 有文档曾表示： 效率的损失在 10% 以下。</p>\n<p>有些读者反复地询问笔者： “所有快速 IO 分发函数都返回 FALSE， 和细心地全部实现它们， 真的只有效率上的区别吗？ 会导致系统中未期望的结果吗？”</p>\n<p>笔者的回答是： 是的， 真的只有效率上的差别， 但是这个差别并不总是在 10% 以下（虽然也许 99% 的情况都在 10% 以下） 。</p>\n<p>笔者见过这样一种金蝶的 ERP 系统， 在安装了一个快速 IO 分发函数全部返回 FALSE 的文件系统过滤驱动的计算机上， 需要 15 分钟才能启<br />\n动完毕； 而当笔者完整地实现了一个关键的快速 IO 分发函数（不直接返回 FALSE， 而是完成其功能） 之后， 启动只需要 5 秒钟。 笔者仅见过这一次， 实现和不实现之间， 有可以察觉的效率差别。</p>\n<hr />\n<p>书上说了这么多，无非就是想让我们知道，快速 IO 分发函数是可以直接返回 FALSE。下面学习如何编写快速 IO 分发函数。</p>\n<h2 id=\"快速io分发函数的一个实现\"><a class=\"anchor\" href=\"#快速io分发函数的一个实现\">#</a> 快速 IO 分发函数的一个实现</h2>\n<p>下面就以上面的第一个函数为例， 来介绍一个 FastIo 过滤函数的 passthrough 的例子。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>BOOLEAN <span class=\"token function\">SfFastIoCheckIfPossible</span><span class=\"token punctuation\">(</span>IN PFILE_OBJECT FileObject<span class=\"token punctuation\">,</span> IN PLARGE_INTEGER FileOffset<span class=\"token punctuation\">,</span> IN ULONG Length<span class=\"token punctuation\">,</span> IN BOOLEAN Wait<span class=\"token punctuation\">,</span> IN ULONG LockKey<span class=\"token punctuation\">,</span> IN BOOLEAN CheckForReadOperation<span class=\"token punctuation\">,</span> OUT PIO_STATUS_BLOCK IoStatus<span class=\"token punctuation\">,</span> IN PDEVICE_OBJECT DeviceObject<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tPDEVICE_OBJECT pNextDeviceObject<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tPFAST_IO_DISPATCH fastIoDispatch<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token function\">PAGED_CODE</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>DeviceObject<span class=\"token operator\">-></span>DeviceExtension<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token function\">ASSERT</span><span class=\"token punctuation\">(</span><span class=\"token function\">IS_MY_DEVICE_OBJECT</span><span class=\"token punctuation\">(</span>DeviceObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token comment\">// 得到本驱动绑定的设备</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\tnextDeviceObject <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>PSFILTER_DEVICE_EXTENSION<span class=\"token punctuation\">)</span>DeviceObject<span class=\"token operator\">-></span>DeviceExtension<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>AttachedToDeviceObject<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t<span class=\"token function\">ASSERT</span><span class=\"token punctuation\">(</span>nextDeviceObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t<span class=\"token comment\">// 得到目标设备的 FastIo 分发函数接口</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\tfastIoDispatch <span class=\"token operator\">=</span> nextDeviceObject<span class=\"token operator\">-></span>DriverObject<span class=\"token operator\">-></span>FastIoDispatch<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t<span class=\"token comment\">// 判断有效性</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">VALID_FAST_IO_DISPATCH_HANDLER</span><span class=\"token punctuation\">(</span>fastIoDispatch<span class=\"token punctuation\">,</span> FastIoCheckIfPossible<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t\t<span class=\"token comment\">// 直接调用</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>fastIoDispatch<span class=\"token operator\">-></span>FastIoCheckIfPossible<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t\t\tFileObject<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t\t\tFileOffset<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t\t\tLength<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t\t\tWait<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t\t\tLockKey<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t\t\tCheckForReadOperation<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t\t\tIoStatus<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t\t\tnextDeviceObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token keyword\">return</span> FALSE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>前面也说了，也可以使用最简单的方法直接返回 FALSE， 就不需要调用下层真实驱动的 FastIo 接口了。至于这个设备扩展的结构 <code>PSFILTER_DEVICE_EXTENSION</code>  下面会学习，结构和之前写得过滤驱动都差不多。</p>\n<h2 id=\"快速io分发函数逐个简介\"><a class=\"anchor\" href=\"#快速io分发函数逐个简介\">#</a> 快速 IO 分发函数逐个简介</h2>\n<p>在例子 sfilter 中， 快速 IO 分发函数一般都只做两种处理： 直接返回 FALSE， 或者直接调用下层驱动接口。我们可以仅作初步的了解， 不必深究。</p>\n<p>下面简要地了解一下快速 IO 分发函数的各接口。 这些简单的介绍来自网络上的一篇短文， 作者为陆麟。</p>\n<p>（1）  <code>FastIoCheckIfPossible</code>  ， 此调用并不是由 IO 管理器直接调用的， 而是被 FsRtlXXX 系列函数调用， 用于确认读 / 写操作是否可以用快速 IO 接口进行。<br />\n（2）  <code>FastIoRead</code> / <code>FastIoWrite</code>  ， 很明显是读 / 写处理的调用。<br />\n（3）  <code>FastIoQueryBasicInfo</code>  、  <code>FastIoQueryStandardInfo</code>  ， 用于获取各种文件信息， 例如创建时间、 修改时间等。<br />\n（4）  <code>FastIoLock</code>  、  <code>FastIoUnlockSingle</code>  、  <code>FastIoUnlockAll</code> / <code>FastIoUnlockAllByKey</code>  ， 用于对文件的锁定操作。<br />\n（5）  <code>FastIoDeviceControl</code>  ， 用于提供 <code>NtDeviceIoControlFile</code>  的支持。<br />\n（6）  <code>AcquireFileForNtCreateSection</code> / <code>ReleaseFileForNtCreateSection</code> ， 是 NTFS 在映射文件内容到内存页面前进行的操作。<br />\n（7）  <code>FastIoDetachDevice</code>  ， 当可移动介质被拿走后， 文件系统的设备对象会在任意时刻被销毁， 只有正确地处理这个调用， 才能使上层设备和将要销毁的设备解除绑定。 如果不解决这个函数， 系统会直接崩溃。<br />\n（8）  <code>FastIoQueryNetworkOpenInfo</code>  ， 当 CIFS（也就是网上邻居， 更准确地说是网络重定向驱动） 尝试获取文件信息时， 会使用这个调用。该调用是因为各种历史原因而产生的， 当时设计 CIFS 是为了避免多次在网上传输文件信息请求， 在 NT 4 时传输协议增加了一个 <code>FileNetworkOpenInformation</code>  网络文件请求， 而 FSD 则增加了这个接口， 用于在一次操作中获得所有的文件信息； 客户端发送 <code>FileNetworkOpenInformation</code> ， 服务器端的 FSD 用本接口完成信息填写。<br />\n（9）  <code>FastIoAcquireForModWrite</code>  ， Modified Page Writer 会调用这个接口来获取文件锁。 如果实现这个接口， 则能使文件锁定范围减小到调用指定的范围； 不实现此接口， 则会使整个文件被锁。<br />\n（10）  <code>FastIoPrepareMdlWrite</code>  ， FSD 提供 MDL， 以后向此 MDL 写入数据就代表向文件写入数据。 调用参数中有 FILE_OBJECT 用于描述要写的目标文件。<br />\n（11）  <code>FastIoMdlWriteComplete</code>  ， 写操作完成， FSD 回收 MDL。<br />\n（12）  <code>FastIoReadCompressed</code>  ， 当此调用被调用时， 读到的数据是压缩后的。 应该兼容于标准的 NT 提供的压缩库， 因为调用者负责解压缩。<br />\n（13）  <code>FastIoWriteCompressed</code>  ， 当此调用被调用时， 可以将数据压缩后存储。<br />\n（14）  <code>FastIoMdlReadCompressed</code> / <code>FastIoMdlReadCompleteCompressed</code>  ， MDL 版本的压缩读。 当后一个接口被调用时， MDL 必须被释放。<br />\n（15）  <code>FastIoMdlWriteCompressed</code> / <code>FastIoMdlWriteCompleteCompressed</code>  ， MDL 版本的压缩写。 当后一个接口被调用时， MDL 必须被释放。<br />\n（16）  <code>FastIoQueryOpen</code>  ， 这不是打开文件的操作， 但是却提供了一个 IRP_MJ_CREATE 的 IRP。 这个操作是打开文件、 获取文件基本信息、 关闭文件的操作。<br />\n（17）  <code>FastIoReleaseForModWrite</code>  ， 释放 <code>FastIoAcquireForModWrite</code>  调用所占有的锁。<br />\n（18）  <code>FastIoAcquireForCcFlush</code> / <code>FastIoReleaseForCcFlush</code>  ， FsRtl 会调用此接口， 在延迟写线程将要把修改后的文件数据写入前调用， 获取文件锁。</p>\n<h1 id=\"设备的绑定前期工作\"><a class=\"anchor\" href=\"#设备的绑定前期工作\">#</a> 设备的绑定前期工作</h1>\n<h2 id=\"动态地选择绑定函数\"><a class=\"anchor\" href=\"#动态地选择绑定函数\">#</a> 动态地选择绑定函数</h2>\n<p>sfilter 有一个有趣的地方是它用了动态加载的方法来使用内核函数。 我们知道只有在高版本的 Windows 系统上才有 <code>IoAttachDeviceToDeviceStackSafe</code>  函数。 如果我们在驱动中直接调用 <code>IoAttachDeviceToDeviceStackSafe</code> ， 则该驱动在不含这个函数的 Windows 系统上的表现是： 加载直接失败。</p>\n<p>动态加载此类函数的好处就是， 即使在低版本的 Windows 系统上， 这段程序依然可以加载成功。 当然， 动态加载这个函数肯定会失败， 结果就是加载的函数指针为 NULL， 此时代码中判断该函数指针为 NULL 时， 再换用函数 <code>IoAttachDeviceToDeviceStack</code>  来代替，这样该驱动就可以兼容不同版本的 Windows 了。</p>\n<p>使用 <code>MmGetSystemRoutineAddress</code>  可以动态地寻找一个内核函数的指针。 这个内核 API 函数原型如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>NTKERNELAPI</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>PVOID</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">MmGetSystemRoutineAddress</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    IN PUNICODE_STRING SystemRoutineName</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><code>SystemRoutineName</code>  是一个字符串， 是要动态寻找地址的内核函数的名字， 比如 <code>IoAttachDeviceToDeviceStackSafe</code>  的名字就是 <code>L&quot;IoAttachDeviceToDeviceStackSafe&quot;</code> 。<br />\n这个函数的使用非常容易， 我们要自己写一段代码， 把 <code>IoAttachDeviceToDeviceStackSafe</code>  函数的指针动态加载到全局变量 <code>gSfDynamicFunctions.AttachDeviceToDeviceStackSafe</code>  中。  <code>gSfDynamicFunctions</code>  是一个全局变量， 实际上是一个结构体， 里面有所有需要动态加载的函数。</p>\n<p>在头文件中声明动态加载函数：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\">WINVER <span class=\"token operator\">>=</span> <span class=\"token number\">0x0501</span>\t\t\t\t</span><span class=\"token comment\">// 如果编译时的 OS 是 WinXP 时，编译这两个函数，否则不编译</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>VOID  <span class=\"token function\">SfLoadDynamicFunctions</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr></table></figure><p>函数定义如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// SfLoadDynamicFunctions 函数 (仅在 WindowsXP 系统下编译该函数)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\">WINVER <span class=\"token operator\">>=</span> <span class=\"token number\">0x0501</span></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>VOID <span class=\"token function\">SfLoadDynamicFunctions</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t动态加载下面的这些内核函数。使用动态加载所谓理由是：在低版本的 Windows 操作系统上，这段程序依然可以加载成功。</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t*/</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tUNICODE_STRING functionName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token function\">RtlZeroMemory</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>gSfDynamicFunctions<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>gSfDynamicFunctions<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 将 gSfDynamicFunctions 结构变量清 0</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token function\">RtlInitUnicodeString</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>functionName<span class=\"token punctuation\">,</span> L<span class=\"token string\">\"IoAttachDeviceToDeviceStackSafe\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\tgSfDynamicFunctions<span class=\"token punctuation\">.</span>AttachDeviceToDeviceStackSafe <span class=\"token operator\">=</span> <span class=\"token function\">MmGetSystemRoutineAddress</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>functionName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr></table></figure><p>其中我们需要定义函数指针，并定义动态加载函数的结构变量：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//=================== 条件编译 (WinXP 及以上 OS 时编译下段代码) ====================</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\">WINVER <span class=\"token operator\">>=</span> <span class=\"token number\">0x0501</span></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 定义 IoAttachDeviceToDeviceStackSafe 的函数指针类型</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">typedef</span>  <span class=\"token function\">NTSTATUS</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>PSF_ATTACH_DEVICE_TO_DEVICE_STACK_SAFE<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>IN PDEVICE_OBJECT SourceDevice<span class=\"token punctuation\">,</span> IN PDEVICE_OBJECT TargetDevice<span class=\"token punctuation\">,</span> OUT PDEVICE_OBJECT<span class=\"token operator\">*</span> AttachedToDeviceObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 定义动态加载函数结构体</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_SF_DYNAMIC_FUNCTION_POINTERS</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token comment\">// 声明定义 IoAttachDeviceToDeviceStackSafe 的函数指针类型变量</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tPSF_ATTACH_DEVICE_TO_DEVICE_STACK_SAFE AttachDeviceToDeviceStackSafe<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span> SF_DYNAMIC_FUNCTION_POINTERS<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span> PSF_DYNAMIC_FUNCTION_POINTERS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>SF_DYNAMIC_FUNCTION_POINTERS gSfDynamicFunctions <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 定义该结构变量并初始化为 0</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr></table></figure><p>后面如果还有函数需要动态加载，就可以以此为基础添加了。</p>\n<p>代码中的 <code>“#if WINVER &gt;= 0x0501”</code> ， 这里是编译时判断指令， 当编译结果期望适用的 Windows 版本高于 <code>0x0501</code>  时， 使用动态加载函数的方式；当编译结果期望适用的 Windows 版本比这个低时， 没有必要尝试动态加载高级版本的函数， 直接使用低级版本的 <code>IoAttachDeviceToDeviceStack</code>  即可。</p>\n<p>下面的附加设备栈函数就用到了这种动态加载。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>NTSTATUS  <span class=\"token function\">SfAttachDeviceToDeviceStack</span><span class=\"token punctuation\">(</span>IN PDEVICE_OBJECT SourceDevice<span class=\"token punctuation\">,</span> IN PDEVICE_OBJECT TargetDevice<span class=\"token punctuation\">,</span> IN OUT PDEVICE_OBJECT<span class=\"token operator\">*</span> AttachedToDeviceObject<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t参数说明:</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tSourceDevice:\t\t\t   它是调用者创建的设备对象。比如调用者使用 IoCreateDevice 函数来创建设备对象。</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tTargetDevice:\t\t\t   它指向其它驱动程序的设备对象。</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tAttachedToDeviceObject:\t   它用来存储 IoAttachDeviceToDeviceStack 函数的返回值。</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t*/</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token function\">PAGED_CODE</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\">WINVER <span class=\"token operator\">>=</span> <span class=\"token number\">0x0501</span></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">IS_WINDOWSXP_OR_LATER</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t<span class=\"token function\">ASSERT</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span> <span class=\"token operator\">!=</span> gSfDynamicFunctions<span class=\"token punctuation\">.</span>AttachDeviceToDeviceStackSafe<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>gSfDynamicFunctions<span class=\"token punctuation\">.</span>AttachDeviceToDeviceStackSafe<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>SourceDevice<span class=\"token punctuation\">,</span> TargetDevice<span class=\"token punctuation\">,</span> AttachedToDeviceObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t<span class=\"token function\">ASSERT</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span> <span class=\"token operator\">==</span> gSfDynamicFunctions<span class=\"token punctuation\">.</span>AttachDeviceToDeviceStackSafe<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t<span class=\"token operator\">*</span> AttachedToDeviceObject <span class=\"token operator\">=</span> TargetDevice<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t<span class=\"token operator\">*</span>AttachedToDeviceObject <span class=\"token operator\">=</span> <span class=\"token function\">IoAttachDeviceToDeviceStack</span><span class=\"token punctuation\">(</span>SourceDevice<span class=\"token punctuation\">,</span> TargetDevice<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>AttachedToDeviceObject <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> STATUS_NO_SUCH_DEVICE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> STATUS_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\">WINVER <span class=\"token operator\">>=</span> <span class=\"token number\">0x0501</span></span></span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>上面的区分版本编译在 WDK 下意义不大。 即使以 Windows 2003 以上系统为目标编译， sfilter 在 Windows 2000 上也依然可以正常运行。 正是因为 <code>MmGetSystemRoutineAddress</code>  的使用， 所以可以忽略上面的 <code>“#if WINVER &gt;= 0x0501”</code> ， 删除也不会有错。</p>\n<h2 id=\"注册文件系统变动回调\"><a class=\"anchor\" href=\"#注册文件系统变动回调\">#</a> 注册文件系统变动回调</h2>\n<p>感觉书上写的云里雾里，那就带着问题来学习吧。</p>\n<ol>\n<li>为什么要注册文件系统变动回调呢？</li>\n</ol>\n<p>为了动态处理文件系统卷。</p>\n<ol start=\"2\">\n<li>什么是动态处理文件系统卷？</li>\n</ol>\n<p>如果一个 U 盘插入 USB 口， 会有一个 <code>“J:”</code>  之类的卷动态生成， 那么 <code>sfilter</code>  就可以捕获这个事件， 并生成一个过滤设备来绑定它。</p>\n<p>这里要了解两个新名词：挂载和解挂载。</p>\n<p>一个新的存储媒介被系统发现并在文件系统中生成一个卷的过程称为挂载（Mount） ， 与之相反的过程称为解挂载（Dismount）。</p>\n<p>其过程开始时， FS 的 CDO 将得到一个 IRP， 其主功能号为 <code>IRP_MJ_FILE_SYSTEM_CONTROL</code> ， 次功能号为 <code>IRP_MN_MOUNT</code> 。</p>\n<p>知道以上知识后我们就可以知道：<em>如果我们的过滤驱动已经生成了一个设备并绑定了文件系统的 CDO</em>，那么程序中就可以得到这样的一个 IRP，以此就可以知道是否有新的卷挂载了。</p>\n<hr />\n<p><strong>接下来就引出了标题。</strong></p>\n<ol start=\"3\">\n<li>那么我们该如何知道系统中有哪些文件系统， 以及应该在什么时候绑定它们的控制设备呢？</li>\n</ol>\n<p><strong>我们需要用到一个非常有用的系统调用 <code>IoRegisterFsRegistrationChange</code> ， 这个调用会注册一个回调函数。 当系统中有任何文件系统被激活或者被注销时， 注册过的回调函数就会被调用。 这种回调函数被称为文件系统变动回调。</strong></p>\n<ol start=\"4\">\n<li>什么是文件系统的激活和注销？</li>\n</ol>\n<p>需要注意文件系统的激活和卷的挂载是两码事。所谓文件系统的激活， 是指当系统中没有任何卷采用了 NTFS 文件系统时， Windows 没有加载 NTFS 文件系统驱动， 此时可以称为 NTFS 未激活； 当一个新的使用了 NTFS 的卷被加载到系统中时， NTFS 就被加载了， 此时可以说 NTFS 被激活。 第二次再加载新的 NTFS 的卷时， 就和文件系统的激活没什么关系了， 因为对应的文件系统已经在系统中被激活。 与文件系统的激活相反的过程则称为文件系统的卸载。</p>\n<p><code>IoRegisterFsRegistrationChange</code>  注册的回调函数， 只有在文件系统被激活或者注销时才会回调， 和新增加卷或者拔出卷没有直接关系。</p>\n<hr />\n<p>总结：</p>\n<p>当一个新的卷挂载时，如果我们的过滤驱动已经生成了一个设备并绑定了文件系统的 CDO，那么程序中就获得一个 IRP，以此就可以知道是否有新的卷挂载了；如果我们的过滤驱动设备并没有绑定了文件系统的 CDO，那么就要用到 <code>IoRegisterFsRegistrationChange</code>  去注册一个回调函数来绑定这个文件系统的 CDO。</p>\n<hr />\n<p>下面看 sfilter 的 <code>DriverEntry</code>  对 <code>IoRegisterFsRegistrationChange</code>  函数的调用， 代码如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// SfFsNotification 是我们的回调函数，注意它的格式</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tstatus <span class=\"token operator\">=</span> <span class=\"token function\">IoRegisterFsRegistrationChange</span><span class=\"token punctuation\">(</span>pDriverObject<span class=\"token punctuation\">,</span> SfFsNotification<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">NT_SUCCESS</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token comment\">// 如果失败了，前面分配的 FastIo 分发函数就没用了，直接释放掉</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t<span class=\"token function\">KdPrint</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SFilter!DriverEntry:Error registering FS change notification，status=%08x\\n\"</span><span class=\"token punctuation\">,</span> status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\tpDriverObject<span class=\"token operator\">-></span>FastIoDispatch <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\t\t\t\t\t<span class=\"token comment\">// 注销指向 fastIo 函数组的指针为 NULL</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token function\">ExFreePoolWithTag</span><span class=\"token punctuation\">(</span>fastIoDispatch<span class=\"token punctuation\">,</span> SFLT_POOL_TAG<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 释放分配给 fastIo 函数组的内存</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token function\">IoDeleteDevice</span><span class=\"token punctuation\">(</span>gSFilterControlDeviceObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\">// 删除上面创建的 CDO</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> status<span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t\t\t\t\t<span class=\"token comment\">// 错误返回</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"文件系统变动回调的一个实现\"><a class=\"anchor\" href=\"#文件系统变动回调的一个实现\">#</a> 文件系统变动回调的一个实现</h2>\n<p>有必要为此写一个回调函数 <code>SfFsNotification</code> 。 请注意这个回调函数的原型必须符合条件。这是在 vs2019 中 <code>ntifs.h</code>  中的定义：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>VOID</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">DRIVER_FS_NOTIFICATION</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    _In_ <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_DEVICE_OBJECT</span> <span class=\"token operator\">*</span>DeviceObject<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    _In_ BOOLEAN FsActive</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">typedef</span> DRIVER_FS_NOTIFICATION <span class=\"token operator\">*</span>PDRIVER_FS_NOTIFICATION<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>第一个参数是一个设备对象指针。 这个设备对象就是文件系统的控制设备（注意文件系统的控制设备可能已经被其他文件的过滤驱动绑定， 此时， 这个设备对象指针总是当前设备栈顶的那个设备）。<br />\n第二个参数是一个 BOOLEAN 值， 如果为 TRUE 则表示文件系统的激活； 如果为 FALSE 则表示文件系统的卸载。</p>\n<p>下面是 <code>sfilter</code>  中的回调函数 <code>SfFsNotification</code> ：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>VOID  <span class=\"token function\">SfFsNotification</span><span class=\"token punctuation\">(</span>IN PDEVICE_OBJECT DeviceObject<span class=\"token punctuation\">,</span> IN BOOLEAN FsActive<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t  SfFsNotification 函数：</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t  它创建一个设备对象，并将它附加到指定的文件系统控制设备对象 (File System CDO) 的对象栈上。这就允许这个设备对象过滤所有发送给文件系统的请求。</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t  这样，我们就能够获得一个挂载卷的请求，就可以附加到这个新的卷设备对象的设备对象栈上。</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t  当 SfFsNotification 函数调用完毕以后，我们的过滤驱动设备对象就能够接收到发送到文件系统 CDO 的请求，即接收到 IRP_MJ_FILE_SYSTEM_CONTROL，或者说，</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t  文件系统控制设备已经被绑定，可以动态监控卷的挂载了。那么以后的工作就是要完成对卷的监控绑定了。</pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t  参数说明:</pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t  DeviceObject:   它指向文件系统的控制设备对象 (CDO)。即 被激活或则撤消的 File System CDO</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t  FsActive:       值为 TRUE，表示文件系统的激活。值为 FALSE，表示文件系统的卸载。</pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t */</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\tUNICODE_STRING name<span class=\"token punctuation\">;</span>\t\t\t\t\t<span class=\"token comment\">// 定义结构变量</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\tWCHAR nameBuffer<span class=\"token punctuation\">[</span>MAX_DEVNAME_LENGTH<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 定义宽字符缓冲区，长度 64</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token function\">PAGED_CODE</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token comment\">// 下面获取设备名和 SF_LOG_PRINT 没有什么实际意义，主要是为了获得一些 log，让我们知道绑定了那些设备</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token function\">RtlInitEmptyUnicodeString</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>name<span class=\"token punctuation\">,</span> nameBuffer<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>nameBuffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 初始化 name (成员 Buffer->nameBuffer,Length=0,MaximumLength=64)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token function\">SfGetObjectName</span><span class=\"token punctuation\">(</span>DeviceObject<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token function\">SF_LOG_PRINT</span><span class=\"token punctuation\">(</span>SFDEBUG_DISPLAY_ATTACHMENT_NAMES<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t<span class=\"token punctuation\">(</span><span class=\"token string\">\"SFilter!SfFsNotification:                    %s   %p \\\"%wZ\\\" (%s)\\n\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t\t<span class=\"token punctuation\">(</span>FsActive<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token string\">\"Activating file system  \"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"Deactivating file system\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t\tDeviceObject<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\t\t<span class=\"token operator\">&amp;</span>name<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\t\t<span class=\"token function\">GET_DEVICE_TYPE_NAME</span><span class=\"token punctuation\">(</span>DeviceObject<span class=\"token operator\">-></span>DeviceType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t<span class=\"token comment\">// 到这里才是最重要的。</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token comment\">// 如果是文件系统激活，那么就绑定文件系统的控制设备。</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t<span class=\"token comment\">// 如果是注销，则解除绑定。</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t<span class=\"token comment\">// 这些绑定过程都是需要自己写的函数实现的。</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>FsActive<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\t<span class=\"token function\">SfAttachToFileSystemDevice</span><span class=\"token punctuation\">(</span>DeviceObject<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 用于完成对文件系统控制设备的绑定</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t\t<span class=\"token function\">SfDetachFromFileSystemDevice</span><span class=\"token punctuation\">(</span>DeviceObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这里涉及一些关于驱动加载方式的问题。 驱动的动态加载是指我们常用的加载驱动的方法， 在 Windows 启动之后， 我们用工具或者输入命令行命令手工启动驱动。驱动的静态加载则一般用 inf 文件安装驱动， 并设置启动模式为 Windows 启动时自动启动。</p>\n<p><code>IoRegisterFsRegistrationChange</code>  可以注册对激活文件系统的回调， 但是对于调用这个函数时早就已经激活的文件系统来说， 回调是否会被调用呢？ 早期的 Windows 版本如 Windows 2000 是不会调用的； 而 Windows 2000 SP4 和 Windows XP 则会被调用，<strong>让注册变动回调的人以为所有的已存在文件系统都会被重新 “激活” 一次</strong>。</p>\n<p>所以在 Windows 2000 下进行动态加载有一定的困难， 因为 Windows 启动早就结束了，某些文件系统可能早已被激活， 这样就必须自己枚举所有已经激活的文件系统。 同时在 Windows 2000 下枚举文件系统又有一个困难， 就是必须使用未公开的调用。 所以在 Windows 2000 下， sfilter 一般都做成静态加载、 早期启动的方式（在所有的文件系统启动之前就启动起来）。</p>\n<p>因为文件系统过滤比较复杂， 所以现在再回顾一下在 DriverEntry 中应该做的工作。</p>\n<p>第一步： 生成一个控制设备。 当然此前必须给控制设备指定名称。<br />\n第二步： 设置普通分发函数。<br />\n第三步： 设置快速 IO 分发函数。<br />\n第四步： 编写一个文件系统变动回调函数， 在其中绑定刚激活的文件系统控制设备。<br />\n第五步： 使用 <code>IoRegisterFsRegistrationChange</code>  调用注册这个回调函数。</p>\n<p>现在还没有解决的问题是：该如何绑定一个文件系统的控制设备， 即如何实现函数 <code>SfAttachToFileSystemDevice</code>  呢？ 下面就开始实现这个函数。</p>\n<h2 id=\"文件系统识别器\"><a class=\"anchor\" href=\"#文件系统识别器\">#</a> 文件系统识别器</h2>\n<p>上一节讲到的最后一个问题是要绑定一个刚刚被激活的文件系统控制设备。 前面实现过用 <code>sfAttachDeviceToStack</code>  来绑定这个设备， 但是并不是每次文件系统变动回调发现有新的文件系统激活都直接绑定它。</p>\n<p>首先判断是否是需要关心的文件系统类型。 过滤驱动可能只对文件系统的 CDO 设备类型中的某些感兴趣。 假设只关心磁盘文件系统、 光盘（CD-ROM） 和网络文件系统， 那么就只需要注意这三种类型就可以了。 下面的代码定义了一个宏来判断一个设备的类型是否是本驱动需要关心的。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 宏定义：测试是不是所需要的 \"设备类型\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">IS_DESIRED_DEVICE_TYPE</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>_type<span class=\"token punctuation\">)</span> </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>         <span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_type<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> FILE_DEVICE_DISK_FILE_SYSTEM<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t <span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_type<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> FILE_DEVICE_CD_ROM_FILE_SYSTEM<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t <span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_type<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> FILE_DEVICE_NETWORK_FILE_SYSTEM<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span></span></pre></td></tr></table></figure><hr />\n<p>首先了解一下什么是文件系统识别器。</p>\n<p><em>文件系统识别器是文件系统驱动的一个很小的替身</em>。 为了避免没有使用到的文件系统驱动占据内核内存， Windows 系统不加载这些大驱动， 而以该文件系统驱动对应的文件系统识别器来代替。当新的物理存储媒介进入系统后， IO 管理器会依次尝试用各种文件系统对它进行 “识别”， 若识别成功， 则立刻加载真正的文件系统驱动， 对应的文件系统识别器则被卸载掉。</p>\n<p><em>文件系统识别器的控制设备看起来就像一个文件系统控制设备， 绑定它可能会带来问题， 也可能不会。 有时跳过是最简单的办法， 有时或许又有特别的需求需要绑定， 但无论如何都必须有判断的方法。</em></p>\n<p>这里详细介绍了文件系统识别器：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N0b25lNTU1NS9hcnRpY2xlL2RldGFpbHMvODE5NTMyMjA=\">https://blog.csdn.net/stone5555/article/details/81953220</span></p>\n<p><strong> <code>sfilter</code>  是跳过了文件系统识别器</strong>。 那么如何跳过文件它呢？</p>\n<p>通过驱动的名字可以分辨出部分 Windows 的标准文件系统识别器。 Windows 的标准文件系统识别器一般都是由驱动 <code>“\\FileSystem\\Fs_Rec”</code>  生成的， 所以直接判断驱动的名字可以解决一部分问题。</p>\n<p>我在查看了我主机 win10 和 xp 虚拟机中的注册表，发现 <code>Fs_Rec</code>  所在的位置为 <code>&quot;HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\Fs_Rec&quot;</code> ，并没有 <code>FileSytem</code>  这个路径，可能驱动的名字是 <code>“\\FileSystem\\Fs_Rec”</code>  吧。</p>\n<p>下面的代码可以完成这个判断， 如果是肯定的， 则直接返回成功， 即放弃绑定。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>UNICODE_STRING fsrecName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>UNICODE_STRING fsName<span class=\"token punctuation\">;</span>\t\t\t\t\t<span class=\"token comment\">// 文件系统名</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>WCHAR tempNameBuffer<span class=\"token punctuation\">[</span>MAX_DEVNAME_LENGTH<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 临时缓冲区 (存放名字串)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>* Windows 的标准文件系统识别器基本上都是由驱动 \\FileSystem\\Fs_Rec 生成的。所以直接判断驱动的名字可以解决一部分问题。</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>* 也不一定非得要把文件系统识别器生成在驱动 \\FileSystem\\Fs_Rec 下面。只是说，一般情况下是在 \\FileSystem\\Fs_Rec 下面。</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">RtlInitEmptyUnicodeString</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>fsName<span class=\"token punctuation\">,</span> tempNameBuffer<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>tempNameBuffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token function\">RtlInitUnicodeString</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>fsrecName<span class=\"token punctuation\">,</span> L<span class=\"token string\">\"\\\\FileSystem\\\\Fs_Rec\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token function\">SfGetObjectName</span><span class=\"token punctuation\">(</span>DeviceObject<span class=\"token operator\">-></span>DriverObject<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>fsName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">RtlCompareUnicodeString</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>fsName<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>fsrecName<span class=\"token punctuation\">,</span> TRUE<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token comment\">// 通过驱动的名字来分辨出部分 Windows 的标准文件系统识别器。如果是，那么返回成功，也就是放弃绑定了。</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token comment\">// 如果，有错过的文件系统识别器没有被判断到，文件系统控制请求的过滤驱动中有对应的处理。</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token keyword\">return</span> STATUS_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>上面这段代码可以放在文件系统变动回调函数 <code>SfFsNotification</code>  中， 也可以放在绑定文件系统控制设备的函数 <code>SfAttachToFileSystemDevice</code>  中。 后面有使用这些代码的例子。</p>\n<p>要注意没有人规定文件系统识别器一定在驱动 <code>“\\FileSystem\\Fs_Rec”</code>  下生成， 所以这个方法只跳过了部分 “微软的规矩的” 文件系统识别器。 对于这里所错过的内容， 在文件系统控制请求的过滤中有对应的处理。</p>\n<h1 id=\"绑定文件系统的控制设备\"><a class=\"anchor\" href=\"#绑定文件系统的控制设备\">#</a> 绑定文件系统的控制设备</h1>\n<h2 id=\"生成文件系统控制设备的过滤设备\"><a class=\"anchor\" href=\"#生成文件系统控制设备的过滤设备\">#</a> 生成文件系统控制设备的过滤设备</h2>\n<p>接下来将要生成过滤设备。 这里要再次提到设备扩展的概念。 设备扩展是一个数据结构， 为了表示不同的设备， 里面将有一片自定义的空间， 用来记录这个设备的特有信息。在 sfilter 中生成的过滤设备的设备扩展如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_SFILTER_DEVICE_EXTENSION</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tPDEVICE_OBJECT AttachedToDeviceObject<span class=\"token punctuation\">;</span>\t\t\t\t\t<span class=\"token comment\">// 绑定的文件系统设备</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tPDEVICE_OBJECT StorageStackDeviceObject<span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">// 与文件系统设备相关的真实设备 (磁盘) </span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tUNICODE_STRING DeviceName<span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t\t<span class=\"token comment\">// 如果绑定了一个卷，这是物理磁盘卷名；否则，为绑定的控制设备名。</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tWCHAR DeviceNameBuffer<span class=\"token punctuation\">[</span>MAX_DEVNAME_LENGTH<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">// 用来保存名字串的缓冲区</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span> SFILTER_DEVICE_EXTENSION<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span> PSFILTER_DEVICE_EXTENSION<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>如何定义结构完全依赖于用户的需求。 在 sfilter 中对结构的定义比较简单， 主要是记得自己绑定在哪个设备上即可。 如果需要更多的信息， 则可以在这里增加新的域。 扩展空间的大小是在生成这个设备（调用 IoCreateDevice 生成设备） 时指定的。代码如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 是我们关心的文件系统，且不是微软的文件系统识别器的设备，创建一个设备绑定这个设备对象。</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tstatus <span class=\"token operator\">=</span> <span class=\"token function\">IoCreateDevice</span><span class=\"token punctuation\">(</span>gSFilterDriverObject<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t<span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>SFILTER_DEVICE_EXTENSION<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\tDeviceObject<span class=\"token operator\">-></span>DeviceType<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t<span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\tFALSE<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token operator\">&amp;</span>newDeviceObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">NT_SUCCESS</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> status<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>得到设备对象指针后， 使用下面的代码即可获取这个设备所绑定的原始设备。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>nextDeviceObject <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>PSFILTER_DEVICE_EXTENSION<span class=\"token punctuation\">)</span>DeviceObject<span class=\"token operator\">-></span>DeviceExtension<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>AttachedToDeviceObject<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这些知识在写前面的过滤时都已经了解了。</p>\n<p>生成设备后， 为了让系统过滤设备看起来和原来的设备没什么区别， 必须将该设备的一些标志位与所绑定的设备设置相同。</p>\n<p>这和前面所学的各种过滤都是类似的， 只是关心的标志位有所不同。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">FlagOn</span><span class=\"token punctuation\">(</span>DeviceObject<span class=\"token operator\">-></span>Flags<span class=\"token punctuation\">,</span> DO_BUFFERED_IO<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token function\">SetFlag</span><span class=\"token punctuation\">(</span>newDeviceObject<span class=\"token operator\">-></span>Flags<span class=\"token punctuation\">,</span> DO_BUFFERED_IO<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">FlagOn</span><span class=\"token punctuation\">(</span>DeviceObject<span class=\"token operator\">-></span>Flags<span class=\"token punctuation\">,</span> DO_DIRECT_IO<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token function\">SetFlag</span><span class=\"token punctuation\">(</span>newDeviceObject<span class=\"token operator\">-></span>Flags<span class=\"token punctuation\">,</span> DO_DIRECT_IO<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">FlagOn</span><span class=\"token punctuation\">(</span>DeviceObject<span class=\"token operator\">-></span>Characteristics<span class=\"token punctuation\">,</span> FILE_DEVICE_SECURE_OPEN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token function\">SetFlag</span><span class=\"token punctuation\">(</span>newDeviceObject<span class=\"token operator\">-></span>Characteristics<span class=\"token punctuation\">,</span> FILE_DEVICE_SECURE_OPEN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这里的标志 <code>DO_BUFFERED_IO</code>  和 <code>DO_DIRECT_IO</code> ， 也就是之前学过的缓冲 IO 和直接 IO 两种方式。<br />\n这两种方式的不同之处在于， 外部向这些设备发送读 / 写请求时， 所用的缓冲地址不同。 在过滤文件读 / 写时会再复习到这一点。</p>\n<h2 id=\"绑定文件系统控制设备\"><a class=\"anchor\" href=\"#绑定文件系统控制设备\">#</a> 绑定文件系统控制设备</h2>\n<p>就是实现整个 <code>SfAttachToFileSystemDevice</code>  函数。</p>\n<p><code>SfAttachToFileSystemDevice</code>  函数是用来完成绑定文件系统控制设备的过程。只要在文件系统变动回调函数中调用这个函数， 就完成了对文件系统控制设备的绑定。</p>\n<p><em>这里需要注意的是这个函数仅能用来绑定文件系统控制设备， 不能用来绑定文件系统卷。所以我们的下一步目标就是如何绑定文件系统的卷设备了</em>。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>NTSTATUS  <span class=\"token function\">SfAttachToFileSystemDevice</span><span class=\"token punctuation\">(</span>IN PDEVICE_OBJECT DeviceObject<span class=\"token punctuation\">,</span> IN PUNICODE_STRING DeviceName<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t SfAttachToFileSystemDevice 函数用来完成对文件系统控制设备的绑定。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t 参数说明:</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t DeviceObject:   它指向文件系统的控制设备对象 (CDO)。即 被激活或则撤消的 File System CDO</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t*/</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tPDEVICE_OBJECT newDeviceObject<span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\">// 新设备对象</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tPSFILTER_DEVICE_EXTENSION devExt<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 文件系统过滤驱动定义的设备扩展</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\tNTSTATUS status<span class=\"token punctuation\">;</span>\t\t\t\t\t\t<span class=\"token comment\">// 状态码</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tUNICODE_STRING fsrecName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tUNICODE_STRING fsName<span class=\"token punctuation\">;</span>\t\t\t\t\t<span class=\"token comment\">// 文件系统名</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tWCHAR tempNameBuffer<span class=\"token punctuation\">[</span>MAX_DEVNAME_LENGTH<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 临时缓冲区 (存放名字串)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token function\">PAGED_CODE</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">IS_DESIRED_DEVICE_TYPE</span><span class=\"token punctuation\">(</span>DeviceObject<span class=\"token operator\">-></span>DeviceType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\t<span class=\"token comment\">// 测试给定设备是不是所需要关心的设备</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> STATUS_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t * Windows 的标准文件系统识别器基本上都是由驱动 \\FileSystem\\Fs_Rec 生成的。所以直接判断驱动的名字可以解决一部分问题。</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t * 也不一定非得要把文件系统识别器生成在驱动 \\FileSystem\\Fs_Rec 下面。只是说，一般情况下是在 \\FileSystem\\Fs_Rec 下面。</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t */</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token function\">RtlInitEmptyUnicodeString</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>fsName<span class=\"token punctuation\">,</span> tempNameBuffer<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>tempNameBuffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token comment\">// 根据我们是否要绑定识别器，来决定是否跳过文件系统识别器</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">FlagOn</span><span class=\"token punctuation\">(</span>SfDebug<span class=\"token punctuation\">,</span> SFDEBUG_ATTACH_TO_FSRECOGNIZER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\t<span class=\"token function\">RtlInitUnicodeString</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>fsrecName<span class=\"token punctuation\">,</span> L<span class=\"token string\">\"\\\\FileSystem\\\\Fs_Rec\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\t<span class=\"token function\">SfGetObjectName</span><span class=\"token punctuation\">(</span>DeviceObject<span class=\"token operator\">-></span>DriverObject<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>fsName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">RtlCompareUnicodeString</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>fsName<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>fsrecName<span class=\"token punctuation\">,</span> TRUE<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\t\t<span class=\"token comment\">// 通过驱动的名字来分辨出部分 Windows 的标准文件系统识别器。如果是，那么返回成功，也就是放弃绑定了。</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\t\t<span class=\"token comment\">// 如果，有错过的文件系统识别器没有被判断到，文件系统控制请求的过滤驱动中有对应的处理。</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> STATUS_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t<span class=\"token comment\">// 是我们关心的文件系统，且不是微软的文件系统识别器的设备，创建一个设备绑定这个设备对象。</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\tstatus <span class=\"token operator\">=</span> <span class=\"token function\">IoCreateDevice</span><span class=\"token punctuation\">(</span>gSFilterDriverObject<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t\t<span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>SFILTER_DEVICE_EXTENSION<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t\t<span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t\tDeviceObject<span class=\"token operator\">-></span>DeviceType<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t\t<span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t\tFALSE<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t\t<span class=\"token operator\">&amp;</span>newDeviceObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">NT_SUCCESS</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> status<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t<span class=\"token comment\">// 将过滤设备的一些标志位与所绑定的设备设置相同</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">FlagOn</span><span class=\"token punctuation\">(</span>DeviceObject<span class=\"token operator\">-></span>Flags<span class=\"token punctuation\">,</span> DO_BUFFERED_IO<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t\t<span class=\"token function\">SetFlag</span><span class=\"token punctuation\">(</span>newDeviceObject<span class=\"token operator\">-></span>Flags<span class=\"token punctuation\">,</span> DO_BUFFERED_IO<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">FlagOn</span><span class=\"token punctuation\">(</span>DeviceObject<span class=\"token operator\">-></span>Flags<span class=\"token punctuation\">,</span> DO_DIRECT_IO<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\t\t<span class=\"token function\">SetFlag</span><span class=\"token punctuation\">(</span>newDeviceObject<span class=\"token operator\">-></span>Flags<span class=\"token punctuation\">,</span> DO_DIRECT_IO<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">FlagOn</span><span class=\"token punctuation\">(</span>DeviceObject<span class=\"token operator\">-></span>Characteristics<span class=\"token punctuation\">,</span> FILE_DEVICE_SECURE_OPEN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\t\t<span class=\"token function\">SetFlag</span><span class=\"token punctuation\">(</span>newDeviceObject<span class=\"token operator\">-></span>Characteristics<span class=\"token punctuation\">,</span> FILE_DEVICE_SECURE_OPEN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>\tdevExt <span class=\"token operator\">=</span> newDeviceObject<span class=\"token operator\">-></span>DeviceExtension<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre></pre></td></tr><tr><td data-num=\"80\"></td><td><pre></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>\t<span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"82\"></td><td><pre>\t  调用 SfAttachDeviceToDeviceStack 函数将过滤设备对象绑定到 File System CDO 的设备栈上面。</pre></td></tr><tr><td data-num=\"83\"></td><td><pre>\t  这样，我们的 newDeviceObject 就可以接收到发送到 File System CDO 的 IRP_MJ_FILE_SYSTEM_CONTROL 请求了。</pre></td></tr><tr><td data-num=\"84\"></td><td><pre>\t  以后，程序就可以去绑定卷了。</pre></td></tr><tr><td data-num=\"85\"></td><td><pre>\t  使用 SfAttachDeviceToDeviceStack 函数来进行绑定。参数 1 绑定到参数 2，绑定函数返回的设备存储在参数 3 中。</pre></td></tr><tr><td data-num=\"86\"></td><td><pre>\t */</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>\tstatus <span class=\"token operator\">=</span> <span class=\"token function\">SfAttachDeviceToDeviceStack</span><span class=\"token punctuation\">(</span>newDeviceObject<span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"88\"></td><td><pre>\t\tDeviceObject<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>\t\t<span class=\"token operator\">&amp;</span>devExt<span class=\"token operator\">-></span>AttachedToDeviceObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">NT_SUCCESS</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>\t\t<span class=\"token keyword\">goto</span> ErrorCleanupDevice<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>\t<span class=\"token comment\">// 将设备名字记录到设备扩展中</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>\t<span class=\"token function\">RtlInitEmptyUnicodeString</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>devExt<span class=\"token operator\">-></span>DeviceName<span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"96\"></td><td><pre>\t\tdevExt<span class=\"token operator\">-></span>DeviceNameBuffer<span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"97\"></td><td><pre>\t\t<span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>devExt<span class=\"token operator\">-></span>DeviceNameBuffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>\t<span class=\"token function\">RtlCopyUnicodeString</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>devExt<span class=\"token operator\">-></span>DeviceName<span class=\"token punctuation\">,</span> DeviceName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">//Save Name</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>\t<span class=\"token function\">ClearFlag</span><span class=\"token punctuation\">(</span>newDeviceObject<span class=\"token operator\">-></span>Flags<span class=\"token punctuation\">,</span> DO_DEVICE_INITIALIZING<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>\t<span class=\"token function\">SF_LOG_PRINT</span><span class=\"token punctuation\">(</span>SFDEBUG_DISPLAY_ATTACHMENT_NAMES<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>\t\t<span class=\"token punctuation\">(</span><span class=\"token string\">\"SFilter!SfAttachToFileSystemDevice:          Attaching to file system   %p \\\"%wZ\\\" (%s)\\n\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>\t\t\tDeviceObject<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>\t\t\t<span class=\"token operator\">&amp;</span>devExt<span class=\"token operator\">-></span>DeviceName<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>\t\t\t<span class=\"token function\">GET_DEVICE_TYPE_NAME</span><span class=\"token punctuation\">(</span>newDeviceObject<span class=\"token operator\">-></span>DeviceType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre></pre></td></tr><tr><td data-num=\"107\"></td><td><pre></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>\t<span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"109\"></td><td><pre>\t下面是不同版本的兼容性设计。当期望目标操作系统的版本大于 0x501 时</pre></td></tr><tr><td data-num=\"110\"></td><td><pre>\t Windwows 内核一定有 EnumerateDeviceObjectList 等函数。这时可以枚举所有的卷并逐个绑定。</pre></td></tr><tr><td data-num=\"111\"></td><td><pre>\t 如果期望的目标操作系统比这个小，那么这些函数根本不存在，我们无法绑定已经加载的卷</pre></td></tr><tr><td data-num=\"112\"></td><td><pre>\t */</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\">WINVER <span class=\"token operator\">>=</span> <span class=\"token number\">0x0501</span></span></span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">IS_WINDOWSXP_OR_LATER</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>\t\t<span class=\"token comment\">// 断言 动态加载函数是否被加载</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>\t\t<span class=\"token function\">ASSERT</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span> <span class=\"token operator\">!=</span> gSfDynamicFunctions<span class=\"token punctuation\">.</span>EnumerateDeviceObjectList <span class=\"token operator\">&amp;&amp;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>\t\t\t<span class=\"token constant\">NULL</span> <span class=\"token operator\">!=</span> gSfDynamicFunctions<span class=\"token punctuation\">.</span>GetDiskDeviceObject <span class=\"token operator\">&amp;&amp;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>\t\t\t<span class=\"token constant\">NULL</span> <span class=\"token operator\">!=</span> gSfDynamicFunctions<span class=\"token punctuation\">.</span>GetDeviceAttachmentBaseRef <span class=\"token operator\">&amp;&amp;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>\t\t\t<span class=\"token constant\">NULL</span> <span class=\"token operator\">!=</span> gSfDynamicFunctions<span class=\"token punctuation\">.</span>GetLowerDeviceObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre></pre></td></tr><tr><td data-num=\"123\"></td><td><pre></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>\t\t<span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"125\"></td><td><pre>\t\t函数 SpyEnumerateFileSystemVolumes 枚举给定的文件系统下的当前存在的所有挂载了的设备，并且绑定他们。</pre></td></tr><tr><td data-num=\"126\"></td><td><pre>\t\t这样做的目的，是因为过滤驱动可能随时被加载，但是加载过滤驱动的时候，文件系统已经挂载了卷设备。</pre></td></tr><tr><td data-num=\"127\"></td><td><pre>\t\t既是：让过滤驱动加载后，随时都能绑定已经存在或刚刚挂载上来的文件系统卷设备。</pre></td></tr><tr><td data-num=\"128\"></td><td><pre>\t\t*/</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>\t\tstatus <span class=\"token operator\">=</span> <span class=\"token function\">SfEnumerateFileSystemVolumes</span><span class=\"token punctuation\">(</span>DeviceObject<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>fsName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">NT_SUCCESS</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>\t\t\t<span class=\"token function\">IoDetachDevice</span><span class=\"token punctuation\">(</span>devExt<span class=\"token operator\">-></span>AttachedToDeviceObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>\t\t\t<span class=\"token keyword\">goto</span> ErrorCleanupDevice<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre></pre></td></tr><tr><td data-num=\"137\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>\t<span class=\"token keyword\">return</span> STATUS_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>\t<span class=\"token comment\">// 错误处理</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>ErrorCleanupDevice<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>\t<span class=\"token function\">SfCleanupMountedDevice</span><span class=\"token punctuation\">(</span>newDeviceObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>\t<span class=\"token function\">IoDeleteDevice</span><span class=\"token punctuation\">(</span>newDeviceObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>\t<span class=\"token keyword\">return</span> status<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"利用文件系统控制请求\"><a class=\"anchor\" href=\"#利用文件系统控制请求\">#</a> 利用文件系统控制请求</h2>\n<p>文件系统控制设备已经被绑定， 绑定的目的是为了获得发送给文件系统控制设备的文件系统控制请求。 这些 IRP 的主功能号是 <code>IRP_MJ_FILE_SYSTEM_CONTROL</code> ， 一般每个主功能号下都有次功能号。</p>\n<p>从这些控制 IRP 中能得到足够的信息， 确定一个卷被挂载， 这样才有可能去绑定文件系统的卷设备。 最早在设置分发函数时， SfFsControl 函数就已经被设置了。 请回顾第 11.2.1 节 “普通的分发函数” 中对分发函数的设置。当有卷被挂载或者解挂载时， SfFsControl 就会被系统回调。 现在的任务是在这个函数中获得卷设备的相关信息并对它实行绑定， 才能捕获各种针对文件的 IRP， 从而获得监控各种文件操作的能力。</p>\n<p>主功能号为 IRP_MJ_FILE_SYSTEM_CONTROL 时， 有以下几个不同次功能号的 IRP 要处理：</p>\n<p>（1） 次功能号为 <code>IRP_MN_MOUNT_VOLUME</code> 。 说明一个卷被挂载， 应该调用 <code>SfFsControlMountVolume</code>  来绑定一个卷。在下一节中将会阐明 <code>SfFsControlMountVolume</code>  的实现方法。<br />\n（2） 次功能号为 <code>IRP_MN_LOAD_FILE_SYSTEM</code> 。 这个请求比较特殊， 它一般在文件系统识别器要求加载真正的文件系统时出现， 此时说明前面绑定了一个文件系统识别器， 现在应该从这里开始绑定真正的文件系统控制设备了。</p>\n<p>（3） 次功能号为 <code>IRP_MN_USER_FS_REQUEST</code> 。 可以从 <code>irpSp→Parameters.FileSystemControl.FsControlCode</code>  得到一个控制码， 当控制码为 <code>FSCTL_DISMOUNT_VOLUME</code>  时， 说明这是一个磁盘在解挂载。 （ 注： 手动拔出 U 盘并不会导致这个请求。 如果要捕获 U 盘的拔出， 需要更复杂的代码。 幸运的是， 读者会发现磁盘在解挂载后， 就算 sfilter 不删除过滤设备， 程序也不会出问题， 除了极少发生的内存泄漏。 所以本书将这个问题忽略。 ）</p>\n<p>相关代码如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>NTSTATUS  <span class=\"token function\">SfFsControl</span><span class=\"token punctuation\">(</span>IN PDEVICE_OBJECT DeviceObject<span class=\"token punctuation\">,</span> IN PIRP Irp<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t参数说明:</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tDeviceObject:    我们创建的设备对象。它是被绑定到文件系统控制设备对象栈上。</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t*/</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tPIO_STACK_LOCATION irpSp <span class=\"token operator\">=</span> <span class=\"token function\">IoGetCurrentIrpStackLocation</span><span class=\"token punctuation\">(</span>Irp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token function\">PAGED_CODE</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token function\">ASSERT</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">IS_MY_CONTROL_DEVICE_OBJECT</span><span class=\"token punctuation\">(</span>DeviceObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token function\">ASSERT</span><span class=\"token punctuation\">(</span><span class=\"token function\">IS_MY_DEVICE_OBJECT</span><span class=\"token punctuation\">(</span>DeviceObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token comment\">// 分别处理次功能号</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>irpSp<span class=\"token operator\">-></span>MinorFunction<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token keyword\">case</span> IRP_MN_MOUNT_VOLUME<span class=\"token operator\">:</span>\t\t\t\t\t\t\t\t\t<span class=\"token comment\">// 当一个卷被挂载</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">SfFsControlMountVolume</span><span class=\"token punctuation\">(</span>DeviceObject<span class=\"token punctuation\">,</span> Irp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 调用函数去绑定这个卷</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token keyword\">case</span> IRP_MN_LOAD_FILE_SYSTEM<span class=\"token operator\">:</span>\t\t\t\t\t\t\t\t<span class=\"token comment\">// 当文件系统识别器要加载真正的文件系统时</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">SfFsControlLoadFileSystem</span><span class=\"token punctuation\">(</span>DeviceObject<span class=\"token punctuation\">,</span> Irp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 调用函数去绑定真正的文件系统</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token keyword\">case</span> IRP_MN_USER_FS_REQUEST<span class=\"token operator\">:</span>\t\t\t\t\t\t\t\t</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t<span class=\"token comment\">// 判断磁盘是否在解挂载</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>irpSp<span class=\"token operator\">-></span>Parameters<span class=\"token punctuation\">.</span>FileSystemControl<span class=\"token punctuation\">.</span>FsControlCode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\t</pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t<span class=\"token keyword\">case</span> FSCTL_DISMOUNT_VOLUME<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t\t<span class=\"token comment\">// 可以什么都不做，仅仅打印一下 log</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t\tPSFILTER_DEVICE_EXTENSION devExt <span class=\"token operator\">=</span> DeviceObject<span class=\"token operator\">-></span>DeviceExtension<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\t\t<span class=\"token function\">SF_LOG_PRINT</span><span class=\"token punctuation\">(</span>SFDEBUG_DISPLAY_ATTACHMENT_NAMES<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">(</span><span class=\"token string\">\"SFilter!SfFsControl:                         Dismounting volume         %p \\\"%wZ\\\"\\n\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\t\t\t\tdevExt<span class=\"token operator\">-></span>AttachedToDeviceObject<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\t\t\t\t<span class=\"token operator\">&amp;</span>devExt<span class=\"token operator\">-></span>DeviceName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t<span class=\"token comment\">// 不是我们关心的 IRP 直接下发</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t<span class=\"token function\">IoSkipCurrentIrpStackLocation</span><span class=\"token punctuation\">(</span>Irp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token function\">IoCallDriver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>PSFILTER_DEVICE_EXTENSION<span class=\"token punctuation\">)</span>DeviceObject<span class=\"token operator\">-></span>DeviceExtension<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>AttachedToDeviceObject<span class=\"token punctuation\">,</span> Irp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>看了上面的代码，我们还要知道 <code>SfFsControlMountVolume()</code>  是如何去绑定卷设备，以此监控所有的卷。</p>\n<p>另外在这个 <code>FSCTL_DISMOUNT_VOLUME</code>  中并没有做解除绑定和销毁设备的处理。 实际上， 这个请求的出现是理论性的。 在进行过的测试中， 这个请求似乎根本不会出现。 其他一些请求会出现， 但是往往不是一一对应的关系， 所以要真正准确地捕获解挂载操作是很困难的。</p>\n<p><code>sfilter</code>  采用了通融的办法， 并不解除绑定也不销毁设备。 可能是因为设备拔除对多余的设备并没有影响。 此外， 拔出与插入这样的情况并不会太频繁， 所以内存泄漏也不明显。</p>\n<p>这是书的作者个人的猜测， 作者并没有确认过是否有其他的机制能销毁设备。虽然有点不靠谱，但这些大佬都不知道，网上更别提什么资料了，大佬怎么做我们就怎么做吧。</p>\n<p>这里另外还有一个 <code>SfFsControlLoadFileSystem</code>  函数， 发生在 <code>IRP_MN_LOAD_FILESYS</code>  中。 这个功能码的意义是当一个文件识别器（见上文） 决定加载真正的文件系统时， 如果已经绑定了文件系统识别器， <strong>那么现在就应该解除绑定并销毁设备， 同时生成新的设备去绑定真的文件系统</strong>。</p>\n<p>直接看 <code>SfFsControlLoadFileSystem</code>  实现的代码：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>NTSTATUS  <span class=\"token function\">SfFsControlLoadFileSystem</span><span class=\"token punctuation\">(</span>IN PDEVICE_OBJECT DeviceObject<span class=\"token punctuation\">,</span> IN PIRP Irp<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tPSFILTER_DEVICE_EXTENSION devExt <span class=\"token operator\">=</span> DeviceObject<span class=\"token operator\">-></span>DeviceExtension<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tNTSTATUS status<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tPFSCTRL_COMPLETION_CONTEXT completionContext<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token function\">PAGED_CODE</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token function\">SF_LOG_PRINT</span><span class=\"token punctuation\">(</span>SFDEBUG_DISPLAY_ATTACHMENT_NAMES<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t\t<span class=\"token punctuation\">(</span><span class=\"token string\">\"SFilter!SfFscontrolLoadFileSystem:           Loading File System, Detaching from \\\"%wZ\\\"\\n\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t\t\t<span class=\"token operator\">&amp;</span>devExt<span class=\"token operator\">-></span>DeviceName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\">WINVER <span class=\"token operator\">>=</span> <span class=\"token number\">0x0501</span></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">IS_WINDOWSXP_OR_LATER</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\tKEVENT waitEvent<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t<span class=\"token function\">KeInitializeEvent</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>waitEvent<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t\tNotificationEvent<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t\tFALSE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t<span class=\"token function\">IoCopyCurrentIrpStackLocationToNext</span><span class=\"token punctuation\">(</span>Irp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t<span class=\"token function\">IoSetCompletionRoutine</span><span class=\"token punctuation\">(</span>Irp<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t\tSfFsControlCompletion<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t\t<span class=\"token operator\">&amp;</span>waitEvent<span class=\"token punctuation\">,</span>     <span class=\"token comment\">//context parameter</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t\tTRUE<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t\tTRUE<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t\tTRUE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\tstatus <span class=\"token operator\">=</span> <span class=\"token function\">IoCallDriver</span><span class=\"token punctuation\">(</span>devExt<span class=\"token operator\">-></span>AttachedToDeviceObject<span class=\"token punctuation\">,</span> Irp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>STATUS_PENDING <span class=\"token operator\">==</span> status<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\t\tstatus <span class=\"token operator\">=</span> <span class=\"token function\">KeWaitForSingleObject</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>waitEvent<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\t\t\tExecutive<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\t\t\tKernelMode<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\t\t\tFALSE<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\t\t\t<span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\t\t<span class=\"token function\">ASSERT</span><span class=\"token punctuation\">(</span>STATUS_SUCCESS <span class=\"token operator\">==</span> status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\t<span class=\"token function\">ASSERT</span><span class=\"token punctuation\">(</span><span class=\"token function\">KeReadStateEvent</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>waitEvent<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t\t\t<span class=\"token operator\">!</span><span class=\"token function\">NT_SUCCESS</span><span class=\"token punctuation\">(</span>Irp<span class=\"token operator\">-></span>IoStatus<span class=\"token punctuation\">.</span>Status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t\tstatus <span class=\"token operator\">=</span> <span class=\"token function\">SfFsControlLoadFileSystemComplete</span><span class=\"token punctuation\">(</span>DeviceObject<span class=\"token punctuation\">,</span> Irp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t<span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span>    </span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t\tcompletionContext <span class=\"token operator\">=</span> <span class=\"token function\">ExAllocatePoolWithTag</span><span class=\"token punctuation\">(</span>NonPagedPool<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t\t\t<span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>FSCTRL_COMPLETION_CONTEXT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t\t\tSFLT_POOL_TAG<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>completionContext <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t\t\t<span class=\"token function\">IoSkipCurrentIrpStackLocation</span><span class=\"token punctuation\">(</span>Irp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t\t\tstatus <span class=\"token operator\">=</span> <span class=\"token function\">IoCallDriver</span><span class=\"token punctuation\">(</span>devExt<span class=\"token operator\">-></span>AttachedToDeviceObject<span class=\"token punctuation\">,</span> Irp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t\t<span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t\t\t<span class=\"token function\">ExInitializeWorkItem</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>completionContext<span class=\"token operator\">-></span>WorkItem<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\t\t\t\tSfFsControlLoadFileSystemCompleteWorker<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>\t\t\t\tcompletionContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\t\t\tcompletionContext<span class=\"token operator\">-></span>DeviceObject <span class=\"token operator\">=</span> DeviceObject<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\t\t\tcompletionContext<span class=\"token operator\">-></span>Irp <span class=\"token operator\">=</span> Irp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\t\t\tcompletionContext<span class=\"token operator\">-></span>NewDeviceObject <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>\t\t\t<span class=\"token function\">IoCopyCurrentIrpStackLocationToNext</span><span class=\"token punctuation\">(</span>Irp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\t\t\t<span class=\"token function\">IoSetCompletionRoutine</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>\t\t\t\tIrp<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>\t\t\t\tSfFsControlCompletion<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>\t\t\t\tcompletionContext<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>\t\t\t\tTRUE<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>\t\t\t\tTRUE<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>\t\t\t\tTRUE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>\t\t\t<span class=\"token function\">IoDetachDevice</span><span class=\"token punctuation\">(</span>devExt<span class=\"token operator\">-></span>AttachedToDeviceObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>\t\t\tstatus <span class=\"token operator\">=</span> <span class=\"token function\">IoCallDriver</span><span class=\"token punctuation\">(</span>devExt<span class=\"token operator\">-></span>AttachedToDeviceObject<span class=\"token punctuation\">,</span> Irp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\">WINVER <span class=\"token operator\">>=</span> <span class=\"token number\">0x0501</span></span></span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>\t<span class=\"token keyword\">return</span> status<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>SfFsControlLoadFileSystem</code>  函数主要是设置了一个 IRP 完成回调函数，通过等待事件得知 IRP 请求事是否完成，最后调用 <code>SfFsControlLoadFileSystemComplete</code>  函数去绑定文件系统。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>NTSTATUS  <span class=\"token function\">SfFsControlLoadFileSystemComplete</span><span class=\"token punctuation\">(</span>IN PDEVICE_OBJECT DeviceObject<span class=\"token punctuation\">,</span> IN PIRP Irp<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tPSFILTER_DEVICE_EXTENSION devExt<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tNTSTATUS status<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token function\">PAGED_CODE</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tdevExt <span class=\"token operator\">=</span> DeviceObject<span class=\"token operator\">-></span>DeviceExtension<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token function\">SF_LOG_PRINT</span><span class=\"token punctuation\">(</span>SFDEBUG_DISPLAY_ATTACHMENT_NAMES<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token punctuation\">(</span><span class=\"token string\">\"SFilter!SfFsControlLoadFileSystem:           Detaching from recognizer  %p \\\"%wZ\\\", status=%08x\\n\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t\tDeviceObject<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t\t<span class=\"token operator\">&amp;</span>devExt<span class=\"token operator\">-></span>DeviceName<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t\tIrp<span class=\"token operator\">-></span>IoStatus<span class=\"token punctuation\">.</span>Status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">NT_SUCCESS</span><span class=\"token punctuation\">(</span>Irp<span class=\"token operator\">-></span>IoStatus<span class=\"token punctuation\">.</span>Status<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>Irp<span class=\"token operator\">-></span>IoStatus<span class=\"token punctuation\">.</span>Status <span class=\"token operator\">!=</span> STATUS_IMAGE_ALREADY_LOADED<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t<span class=\"token function\">SfAttachDeviceToDeviceStack</span><span class=\"token punctuation\">(</span>DeviceObject<span class=\"token punctuation\">,</span> devExt<span class=\"token operator\">-></span>AttachedToDeviceObject<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>devExt<span class=\"token operator\">-></span>AttachedToDeviceObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t<span class=\"token function\">ASSERT</span><span class=\"token punctuation\">(</span>devExt<span class=\"token operator\">-></span>AttachedToDeviceObject <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t<span class=\"token function\">SfCleanupMountedDevice</span><span class=\"token punctuation\">(</span>DeviceObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t<span class=\"token function\">IoDeleteDevice</span><span class=\"token punctuation\">(</span>DeviceObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\tstatus <span class=\"token operator\">=</span> Irp<span class=\"token operator\">-></span>IoStatus<span class=\"token punctuation\">.</span>Status<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token function\">IoCompleteRequest</span><span class=\"token punctuation\">(</span>Irp<span class=\"token punctuation\">,</span> IO_NO_INCREMENT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token keyword\">return</span> status<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>再次总结如下：<br />\n第一步： 生成一个控制设备。 当然， 此前必须给控制设备指定名称。<br />\n第二步： 设置分发函数和快速 IO 分发函数。<br />\n第三步： 编写一个文件系统变动回调函数， 在其中绑定刚激活的文件系统的控制设备， 并注册这个回调函数。<br />\n第四步： 编写默认的分发函数。<br />\n第五步： 处理文件系统控制请求（IRP 的主功能号为 IRP_MJ_FILE_SYSTEM_CONTROL） ， 在其中监控卷设备的挂载和解挂载。</p>\n<h1 id=\"绑定文件系统卷设备\"><a class=\"anchor\" href=\"#绑定文件系统卷设备\">#</a> 绑定文件系统卷设备</h1>\n<h2 id=\"从irp中获得vpb指针\"><a class=\"anchor\" href=\"#从irp中获得vpb指针\">#</a> 从 IRP 中获得 VPB 指针</h2>\n<p>前面我们实现了  <code>SfFsControlLoadFileSystem</code>  函数，接下来实现 <code>SfFsControlMountVolume</code>  函数的代码， 实现绑定文件系统卷的功能。</p>\n<p>如何从这个 IRP 的信息中得到文件系统的卷设备呢？</p>\n<p>实际上， 卷设备就在 <code>irpSp→Parameters.MountVolume.Vpb→DeviceObject</code>  中（irpSp 是这个 IRP 的当前栈空间指针）。</p>\n<p>指针 <code>irpSp→Parameters.MountVolume.Vpb</code>  是一个 VPB。<strong>VPB 是卷参数块（VolumeParameter Block），一个重要的数据结构，它在这里的主要作用是把实际的存储媒介设备对象和文件系统上的卷设备对象联系起来</strong>。</p>\n<p>用 VPB 来对下面的代码做一下倒手工作。 首先从 <code>irpSp</code>  中获得文件系统卷设备的 VPB， 然后从 VPB 中获得一个存储设备对象。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 从 VPB 中获得一个存储设备对象</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>storageStackDeviceObject <span class=\"token operator\">=</span> irpSp<span class=\"token operator\">-></span>Parameters<span class=\"token punctuation\">.</span>MountVolume<span class=\"token punctuation\">.</span>Vpb<span class=\"token operator\">-></span>RealDevice<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>以后可以从这个存储设备对象再得到原来的 VPB。 这里记下存储设备， 实际上是为了从存储设备对象找回 VPB， 再找回文件系统的卷设备。 为什么需要这个倒手过程呢？</p>\n<p>这里的 IRP 是一个挂载请求， 而文件系统的卷设备对象实际上在请求完成之后才可用。因此，在请求还没有完成之前 <code>irpSp→Parameters.MountVolume.Vpb→DeviceObject</code>  是没有意义的，必须等这个 IRP 完成后 <code>irpSp→Parameters.MountVolume.Vpb→DeviceObject</code>  才是需要绑定的设备对象。</p>\n<p>但是在这个 IRP 传递的过程中， <code>irpSp→Parameters.MountVolume.Vpb</code>  可能会被修改。</p>\n<p>换句话说，在 IRP 完成之后，这个指针就可能已经不是原来的那个了。 对这种情况的处理， WDK 的文档中有一段特殊的说明，引用如下（请注意这段话经过翻译）。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>irpSp<span class=\"token operator\">-></span>Parameters<span class=\"token punctuation\">.</span>MountVolume<span class=\"token punctuation\">.</span>Vpb</pre></td></tr></table></figure><p>指向一个被挂载卷的卷参数块（VPB）指针。支持可移动介质的文件系统，可能替换掉预先传入的参数。 在这样的文件系统中， 卷被挂载后， 指针可能不再有效。</p>\n<p>过滤这种文件系统的过滤驱动必须按下面的方法使用这个参数： <strong>在把 IRP 发送到下层驱动之前， 保存 <code>irpSp→Parameters.MountVolume.Vpb→RealDevice</code>  的值。在这个卷被成功挂载之后， 过滤驱动可以通过这个存储设备的指针重新获得正确的 VPB 指针</strong>。</p>\n<p>为此，必须先获得 <code>irpSp→Parameters.MountVolume.Vpb→RealDevice</code>  的值并将其保存起来， 等待 IRP 完成之后， 再从 RealDevice 中获得的 VPB 才是正确的。</p>\n<h2 id=\"设置完成函数并等待irp完成\"><a class=\"anchor\" href=\"#设置完成函数并等待irp完成\">#</a> 设置完成函数并等待 IRP 完成</h2>\n<p>在本书前面的几个例子中， 都讲过等待 IRP 完成的方法。 读者可以回忆一下： 首先拷贝当前栈空间， 然后向下发送请求， 但在此之前， 要先给 IRP 分配一个完成函数。 一旦 IRP 完成， 完成函数将被调用。 这样， 就可以在完成函数中得到文件系统的卷设备， 并实施绑定过程。</p>\n<p>完成函数的一个特点是它处于 Dispatch 中断级， 这是一个比较高的级别。 总之， 任何代码执行时， 总是处在某个当前的中断级之中。 某些系统调用只能在低级别的中断级中执行。 请注意， 如果一个调用可以在高级别运行， 那么它就能在低级别运行； 反过来则不行。</p>\n<p>读者需要关心的只有 Passive 中断级和 Dispatch 中断级， 而且 Dispatch 中断级的级别较高。 一般 WDK 的函数在帮助中都会标明， 如果标明 “irq level=PASSIVE”， 那么就不能在 Dispatch 中断级的代码中调用它们了。</p>\n<p>那么如何判断当前的代码处于哪个中断级呢？ 之前我们使用 <code>KeGetCurrentIrql</code>  函数。</p>\n<p>这里有一个更加实际的判断方法： <em>在实际编码中， 一般都认为如果代码执行是由应用程序（或者说上层） 的调用引发的， 则应该在 Passive 中断级； 如果代码执行是由下层硬件引发的， 则有可能在 Dispatch 中断级</em>。</p>\n<p>以上只是极为粗略的便于记忆的理解方法， 而实际的应用是这样的： 由于所有的分发函数都是由上层发来的 IRP 而导致的调用， 所以应该都在 Passive 中断级， 在其中可以调用绝大多数系统调用。 而如网卡的 OnReceive、 硬盘读 / 写完毕返回而回调的完成函数， 都有可能在 Dispatch 中断级。 注意都是有可能，而不是绝对是。 但是一旦有了可能， 在调用其他函数时， 当然就应该按照最坏的情况考虑。</p>\n<p>下面是 <code>SfFsControlMountVolume</code>  的执行过程。 这里没有绑定卷设备， 而是把 IRP 发送下去， 等待完成之后， 再在完成函数中绑定。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>NTSTATUS  <span class=\"token function\">SfFsControlMountVolume</span><span class=\"token punctuation\">(</span>IN PDEVICE_OBJECT DeviceObject<span class=\"token punctuation\">,</span> IN PIRP Irp<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t参数说明:</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tDeviceObject:    它是我们创建的设备对象。它被绑定到文件系统 CDO 的设备栈上。</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tIrp:             它是发送给文件系统 CDO 的挂载请求。它是一个新卷的挂载请求。</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t*/</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tPSFILTER_DEVICE_EXTENSION devExt <span class=\"token operator\">=</span> DeviceObject<span class=\"token operator\">-></span>DeviceExtension<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tPIO_STACK_LOCATION irpSp <span class=\"token operator\">=</span> <span class=\"token function\">IoGetCurrentIrpStackLocation</span><span class=\"token punctuation\">(</span>Irp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tPDEVICE_OBJECT storageStackDeviceObject<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token comment\">//newDeviceObject 是将要绑定到文件系统的卷设备对象上。或者说，这个 newDeviceObject 要被绑定到新挂载卷的设备卷上。</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\tPDEVICE_OBJECT newDeviceObject<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\tPSFILTER_DEVICE_EXTENSION newDevExt<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\tNTSTATUS status<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\tBOOLEAN isShadowCopyVolume<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\tPFSCTRL_COMPLETION_CONTEXT completionContext<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token function\">PAGED_CODE</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token function\">ASSERT</span><span class=\"token punctuation\">(</span><span class=\"token function\">IS_MY_DEVICE_OBJECT</span><span class=\"token punctuation\">(</span>DeviceObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token function\">ASSERT</span><span class=\"token punctuation\">(</span><span class=\"token function\">IS_DESIRED_DEVICE_TYPE</span><span class=\"token punctuation\">(</span>DeviceObject<span class=\"token operator\">-></span>DeviceType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t 在把 IRP 发送到文件系统之前，当挂载请求到来时，Vpb->RealDevice 保存的是：将要被挂载的磁盘设备对象。</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t storageStackDeviceObject 事先保存了 VPB 的值，这是因为：当 IRP 下发给底层驱动后，可能会改变。</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t */</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\tstorageStackDeviceObject <span class=\"token operator\">=</span> irpSp<span class=\"token operator\">-></span>Parameters<span class=\"token punctuation\">.</span>MountVolume<span class=\"token punctuation\">.</span>Vpb<span class=\"token operator\">-></span>RealDevice<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token comment\">// 判断是否是卷影</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\tstatus <span class=\"token operator\">=</span> <span class=\"token function\">SfIsShadowCopyVolume</span><span class=\"token punctuation\">(</span>storageStackDeviceObject<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>isShadowCopyVolume<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">NT_SUCCESS</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\tisShadowCopyVolume <span class=\"token operator\">&amp;&amp;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\t<span class=\"token operator\">!</span><span class=\"token function\">FlagOn</span><span class=\"token punctuation\">(</span>SfDebug<span class=\"token punctuation\">,</span> SFDEBUG_ATTACH_TO_SHADOW_COPIES<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\t<span class=\"token comment\">// 打印 log</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t\tUNICODE_STRING shadowDeviceName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t\tWCHAR shadowNameBuffer<span class=\"token punctuation\">[</span>MAX_DEVNAME_LENGTH<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t\t<span class=\"token function\">RtlInitEmptyUnicodeString</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>shadowDeviceName<span class=\"token punctuation\">,</span> shadowNameBuffer<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>shadowNameBuffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t\t<span class=\"token function\">SfGetObjectName</span><span class=\"token punctuation\">(</span>storageStackDeviceObject<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>shadowDeviceName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t\t<span class=\"token function\">SF_LOG_PRINT</span><span class=\"token punctuation\">(</span>SFDEBUG_DISPLAY_ATTACHMENT_NAMES<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t\t\t<span class=\"token punctuation\">(</span><span class=\"token string\">\"SFilter!SfFsControlMountVolume               Not attaching to Volume    %p \\\"%wZ\\\", shadow copy volume\\n\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t\t\t\tstorageStackDeviceObject<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t\t\t\t<span class=\"token operator\">&amp;</span>shadowDeviceName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t\t<span class=\"token comment\">// 如果不打算绑定卷影则跳到下一层驱动</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t\t<span class=\"token function\">IoSkipCurrentIrpStackLocation</span><span class=\"token punctuation\">(</span>Irp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">IoCallDriver</span><span class=\"token punctuation\">(</span>devExt<span class=\"token operator\">-></span>AttachedToDeviceObject<span class=\"token punctuation\">,</span> Irp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t<span class=\"token comment\">// 生成过滤设备</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\tstatus <span class=\"token operator\">=</span> <span class=\"token function\">IoCreateDevice</span><span class=\"token punctuation\">(</span>gSFilterDriverObject<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t\t<span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>SFILTER_DEVICE_EXTENSION<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t\t<span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t\tDeviceObject<span class=\"token operator\">-></span>DeviceType<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t\t<span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\t\tFALSE<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>\t\t<span class=\"token operator\">&amp;</span>newDeviceObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre></pre></td></tr><tr><td data-num=\"70\"></td><td><pre></pre></td></tr><tr><td data-num=\"71\"></td><td><pre></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\t<span class=\"token comment\">/* 如果不把 IRP 发送到文件系统中，那么文件系统就不会收到这个卷的挂载请求。*/</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">NT_SUCCESS</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\t\t<span class=\"token function\">KdPrint</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SFilter!SfFsControlMountVolume: Error creating volume device object, status=%08x\\n\"</span><span class=\"token punctuation\">,</span> status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>\t\tIrp<span class=\"token operator\">-></span>IoStatus<span class=\"token punctuation\">.</span>Information <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>\t\tIrp<span class=\"token operator\">-></span>IoStatus<span class=\"token punctuation\">.</span>Status <span class=\"token operator\">=</span> status<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>\t\t<span class=\"token function\">IoCompleteRequest</span><span class=\"token punctuation\">(</span>Irp<span class=\"token punctuation\">,</span> IO_NO_INCREMENT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> status<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre></pre></td></tr><tr><td data-num=\"84\"></td><td><pre></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>\t<span class=\"token comment\">// 填写设备扩展，这样目的是：可以让完成函数更容易到 storageStackDeviceObject</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>\tnewDevExt <span class=\"token operator\">=</span> newDeviceObject<span class=\"token operator\">-></span>DeviceExtension<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>\tnewDevExt<span class=\"token operator\">-></span>StorageStackDeviceObject <span class=\"token operator\">=</span> storageStackDeviceObject<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>\t<span class=\"token function\">RtlInitEmptyUnicodeString</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>newDevExt<span class=\"token operator\">-></span>DeviceName<span class=\"token punctuation\">,</span> newDevExt<span class=\"token operator\">-></span>DeviceNameBuffer<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>newDevExt<span class=\"token operator\">-></span>DeviceNameBuffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>\t<span class=\"token function\">SfGetObjectName</span><span class=\"token punctuation\">(</span>storageStackDeviceObject<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>newDevExt<span class=\"token operator\">-></span>DeviceName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre></pre></td></tr><tr><td data-num=\"91\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\">WINVER <span class=\"token operator\">>=</span> <span class=\"token number\">0x0501</span></span></span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">IS_WINDOWSXP_OR_LATER</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>\t\t<span class=\"token comment\">// 在这里设置了事件对象，把它用在完成例程中。这样做的目的是：通知当前例程，文件系统已经完成了当前卷的挂载。</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>\t\tKEVENT waitEvent<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>\t\t<span class=\"token function\">KeInitializeEvent</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>waitEvent<span class=\"token punctuation\">,</span> NotificationEvent<span class=\"token punctuation\">,</span> FALSE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>\t\t<span class=\"token function\">IoCopyCurrentIrpStackLocationToNext</span><span class=\"token punctuation\">(</span>Irp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>\t\t<span class=\"token function\">IoSetCompletionRoutine</span><span class=\"token punctuation\">(</span>Irp<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>\t\t\tSfFsControlCompletion<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>\t\t\t<span class=\"token operator\">&amp;</span>waitEvent<span class=\"token punctuation\">,</span>     <span class=\"token comment\">//context parameter</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>\t\t\tTRUE<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>\t\t\tTRUE<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>\t\t\tTRUE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>\t\tstatus <span class=\"token operator\">=</span> <span class=\"token function\">IoCallDriver</span><span class=\"token punctuation\">(</span>devExt<span class=\"token operator\">-></span>AttachedToDeviceObject<span class=\"token punctuation\">,</span> Irp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>STATUS_PENDING <span class=\"token operator\">==</span> status<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>\t\t\t<span class=\"token comment\">// 等待更底层的驱动完成，然后就会调用完成例程。</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>\t\t\tstatus <span class=\"token operator\">=</span> <span class=\"token function\">KeWaitForSingleObject</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>waitEvent<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>\t\t\t\tExecutive<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>\t\t\t\tKernelMode<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>\t\t\t\tFALSE<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>\t\t\t\t<span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>\t\t\t<span class=\"token function\">ASSERT</span><span class=\"token punctuation\">(</span>STATUS_SUCCESS <span class=\"token operator\">==</span> status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>\t\t<span class=\"token function\">ASSERT</span><span class=\"token punctuation\">(</span><span class=\"token function\">KeReadStateEvent</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>waitEvent<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>\t\t\t<span class=\"token operator\">!</span><span class=\"token function\">NT_SUCCESS</span><span class=\"token punctuation\">(</span>Irp<span class=\"token operator\">-></span>IoStatus<span class=\"token punctuation\">.</span>Status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre></pre></td></tr><tr><td data-num=\"121\"></td><td><pre></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>\t\t<span class=\"token comment\">// 执行到了这里，说明卷的挂载已经完成，要开始绑定卷了。等到完成函数设置了事件之后，再来绑定卷。</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>\t\tstatus <span class=\"token operator\">=</span> <span class=\"token function\">SfFsControlMountVolumeComplete</span><span class=\"token punctuation\">(</span>DeviceObject<span class=\"token punctuation\">,</span> Irp<span class=\"token punctuation\">,</span> newDeviceObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>\t\tcompletionContext <span class=\"token operator\">=</span> <span class=\"token function\">ExAllocatePoolWithTag</span><span class=\"token punctuation\">(</span>NonPagedPool<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>FSCTRL_COMPLETION_CONTEXT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> SFLT_POOL_TAG<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>completionContext <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>\t\t\t<span class=\"token function\">IoSkipCurrentIrpStackLocation</span><span class=\"token punctuation\">(</span>Irp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>\t\t\tstatus <span class=\"token operator\">=</span> <span class=\"token function\">IoCallDriver</span><span class=\"token punctuation\">(</span>devExt<span class=\"token operator\">-></span>AttachedToDeviceObject<span class=\"token punctuation\">,</span> Irp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>\t\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>\t\t\t<span class=\"token comment\">// 初始化一个工作任务。指定一个有待执行的函数 SfFsControlMountVolumeCompleteWorker，把这个函数插入到某个线程中去执行。</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>\t\t\t<span class=\"token function\">ExInitializeWorkItem</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>completionContext<span class=\"token operator\">-></span>WorkItem<span class=\"token punctuation\">,</span> SfFsControlMountVolumeCompleteWorker<span class=\"token punctuation\">,</span> completionContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>\t\t\tcompletionContext<span class=\"token operator\">-></span>DeviceObject <span class=\"token operator\">=</span> DeviceObject<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>\t\t\tcompletionContext<span class=\"token operator\">-></span>Irp <span class=\"token operator\">=</span> Irp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>\t\t\tcompletionContext<span class=\"token operator\">-></span>NewDeviceObject <span class=\"token operator\">=</span> newDeviceObject<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>\t\t\t<span class=\"token function\">IoCopyCurrentIrpStackLocationToNext</span><span class=\"token punctuation\">(</span>Irp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>\t\t\t<span class=\"token function\">IoSetCompletionRoutine</span><span class=\"token punctuation\">(</span>Irp<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>\t\t\t\tSfFsControlCompletion<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>\t\t\t\t<span class=\"token operator\">&amp;</span>completionContext<span class=\"token operator\">-></span>WorkItem<span class=\"token punctuation\">,</span> <span class=\"token comment\">//context parameter</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre>\t\t\t\tTRUE<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>\t\t\t\tTRUE<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>\t\t\t\tTRUE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre>\t\t\tstatus <span class=\"token operator\">=</span> <span class=\"token function\">IoCallDriver</span><span class=\"token punctuation\">(</span>devExt<span class=\"token operator\">-></span>AttachedToDeviceObject<span class=\"token punctuation\">,</span> Irp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"151\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\">WINVER <span class=\"token operator\">>=</span> <span class=\"token number\">0x0501</span>        </span></span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"153\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"154\"></td><td><pre></pre></td></tr><tr><td data-num=\"155\"></td><td><pre>\t<span class=\"token keyword\">return</span> status<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"156\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>上面的代码中提到了卷影，卷影是 Windows 系统自带的一种用于磁盘数据恢复的特殊设备， 在本例中不打算对卷影进行过滤。 如何判断是否是卷影并不是重要的问题， 略， 有兴趣可以自行参考 <code>sfilter</code>  的代码。</p>\n<hr />\n<p>当完成函数被调用时， 请求就结束了。 可以向完成函数传递一个上下文指针来保存我们的信息， 以确定哪一次调用与哪一次完成对应。</p>\n<p>有一种经典的同步方法： <strong>初始化一个事件（KEVENT） ， 并通过上下文传递到完成函数中。 在完成函数中设置该事件， 而本函数则等待这个事件， 在等待结束时， 请求就完成了</strong>。</p>\n<p><code>SfFsControlMountVolume</code>  后面的代码中， 有几处是目标操作系统的编译时和运行时判断，具体的处理下面有相关解释。</p>\n<p>请注意 <code>IoSetCompletionRoutine</code>  的第三个参数， 就是完成函数中的 Context 指针。 这是为了将信息传递到完成函数的接口。 上面填写的信息是那个事件的指针， 因为在这里发送 IRP 之后， 下面就要等待完成函数的发生， 所以把事件指针传递给完成函数。 完成函数只要一被调用， 就设置这个事件， 这样， 只要等待那个事件， 就知道这个请求什么时候完成了。 在完成函数中， 应该取得 Context 并把它当作一个事件指针直接设置。</p>\n<p>所以我们在完成函数 <code>SfFsControlCompletion</code>  中的核心就是一句代码：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 设置了等待事件</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">KeSetEvent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>PKEVENT<span class=\"token punctuation\">)</span>Context<span class=\"token punctuation\">,</span> IO_NO_INCREMENT<span class=\"token punctuation\">,</span> FALSE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>因为是这个事件是 <code>NotificationEvevt</code>  类型的，在完成函数中一设置，那么另一边 <code>SfFsControlMountVolume</code>  中，代码就不会继续卡在 <code>KeWaitForSingleObject</code>  了，这样， 只要执行过 <code>KeWaitForSingleObject</code> ，IRP 请求就已经完成了， 之后执行绑定卷的操作即可。</p>\n<h2 id=\"完整的卷挂载irp完成函数\"><a class=\"anchor\" href=\"#完整的卷挂载irp完成函数\">#</a> 完整的卷挂载 IRP 完成函数</h2>\n<p>前面的代码很容易让人产生疑问： 为何不在完成函数中直接绑定设备， 而非要等完成函数设置了事件之后， 再回来做呢？ 这是<em>因为完成函数的中断级别过高</em>。 虽然 Dispatch 中断级应该可以执行 <code>IoAttachDeviceToDeviceStack</code> ， 但是在绑定卷的过程中，  <code>sfilter</code>  使用了 <code>ExAcquireFastMutex</code>  来等待这些不适宜在 Dispatch 级别使用的函数。</p>\n<h3 id=\"低版本windows的兼容处理\"><a class=\"anchor\" href=\"#低版本windows的兼容处理\">#</a> 低版本 Windows 的兼容处理</h3>\n<p><code>SfFsControlMountVolume</code>  后面的代码中， 有几处是目标操作系统的编译时和运行时判断，这是因为用事件等待完成函数的发生虽然是一个通用的方法， 但是在 Windows 2000 上， 如果采用这样的方法， 则在绑定卷设备时可能发生死锁。 这是 Windows 早期的固有缺陷， 这里忽略该问题的原因， 直接应用 <code>sfilter</code>  中的解决方法， 对 Windows 2000 的情况进行特殊处理。</p>\n<p>解决方法是<strong>在完成函数中把任务放到一个预先生成的系统线程中处理。系统线程执行的中断级别为 Passive 中断级， 在这个线程中完成绑定是没有问题的</strong>。</p>\n<p>Windows 本身有一个系统线程负责处理一些日常工作， 也可以把自己的工作任务插入其中， 以免除需要多生成一个线程的开销。</p>\n<p>剩下的是运行时用 <code>IS_WINDOWSXP_OR_LATER</code>  来判断驱动是运行在 Windows XP 或者更高级的版本上， 还是运行在 Windows XP 以下的版本（主要是指 Windows 2000） 上。</p>\n<p>其区别是， 在 Windows XP 或者以上的操作系统中， <em>都使用生成事件、 传递给完成函数、等待完成函数通知完成之后直接绑定的方法</em>。</p>\n<p>在 Windows 2000 中， 比较特殊地采用了<em>生成工作任务、 传递给完成函数、 完成函数将任务插入系统工作线程中的方法</em>。 显然 Windows 2000 下的处理比较麻烦， 在一般的开发中（包括 Windows XP、 Windows 2003、 Windows Vista） 都应该使用简单的方案。</p>\n<p>在 Windows 中， <strong>所谓的工作任务（Work Item） 的本质是用户可以自由指定的一个有待执行的函数</strong>。</p>\n<p>这个函数可以插入到某个线程中去执行。 使用内核 API 函数 <code>ExInitializeWorkItem</code>  可以初始化一个工作任务。</p>\n<p>这个内核 API 的函数原型如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>VOID</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">ExInitializeWorkItem</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    _Out_    PWORK_QUEUE_ITEM Item<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    _In_opt_ PWORKER_THREAD_ROUTINE Routine<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    _In_opt_ PVOID Context</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    Item<span class=\"token operator\">-></span>WorkerRoutine <span class=\"token operator\">=</span> Routine<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    Item<span class=\"token operator\">-></span>Parameter <span class=\"token operator\">=</span> Context<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    Item<span class=\"token operator\">-></span>List<span class=\"token punctuation\">.</span>Flink <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>第一个参数是要初始化的工作任务；<br />\n第二个参数就是我们的待执行函数；<br />\n第三个参数是一个上下文指针， 其内部结构完全由用户自定义。工作任务机制确保这个指针作为一个参数原封不动地传入到我们指定执行的函数（也就是第二个参数 Routine） 中， 用来传递设置与执行之间的信息。</p>\n<p>使用内核 API 函数 <code>ExQueueWorkItem</code>  可以将这个工作任务插入到某个队列中。Windows 内核会依次执行这些队列中的工作任务， 而且执行时会确保中断级别是 Passive 级。 函数 <code>ExQueueWorkItem</code>  会在下一小节的开头做详细介绍。</p>\n<h2 id=\"完成函数的相应实现\"><a class=\"anchor\" href=\"#完成函数的相应实现\">#</a> 完成函数的相应实现</h2>\n<p>完成函数也必须相应地修改一下， 在其中区分 Windows 2000 和 Windows XP 及以上操作系统的不同情况， 即一种情况是设置一个事件， 而另一种情况则是要插入工作任务。 插入工作任务使用内核 API 函数 <code>ExQueueWorkItem</code> ， 该函数的原型如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>VOID</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">ExQueueWorkItem</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    IN PWORK_QUEUE_ITEM WorkItem<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    IN WORK_QUEUE_TYPE QueueType</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>第一个参数是工作任务的指针。<br />\n第二个参数是枚举型常数， 用户可以选择 <code>CriticalWorkQueue</code>  或者 <code>DelayedWorkQueue</code> 。 二者的区别在于执行的优先级， <code>CriticalWorkQueue</code>  的执行优先级比较高， 而 <code>DelayedWorkQueue</code>  的执行优先级根据系统当前状态的变化而变化。 一般地说， 如果只是为了在 Passive 中断级执行某些代码， 指定 <code>DelayedWorkQueue</code>  即可。</p>\n<p>下面是比较完整的完成函数的实现， 请注意工作任务是在 IRP 的分发函数里初始化的， 但是通过上下文指针传递到了完成函数中。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>NTSTATUS  <span class=\"token function\">SfFsControlCompletion</span><span class=\"token punctuation\">(</span>IN PDEVICE_OBJECT DeviceObject<span class=\"token punctuation\">,</span> IN PIRP Irp<span class=\"token punctuation\">,</span> IN PVOID Context<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token function\">UNREFERENCED_PARAMETER</span><span class=\"token punctuation\">(</span>DeviceObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token function\">UNREFERENCED_PARAMETER</span><span class=\"token punctuation\">(</span>Irp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token function\">ASSERT</span><span class=\"token punctuation\">(</span><span class=\"token function\">IS_MY_DEVICE_OBJECT</span><span class=\"token punctuation\">(</span>DeviceObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token function\">ASSERT</span><span class=\"token punctuation\">(</span>Context <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\">WINVER <span class=\"token operator\">>=</span> <span class=\"token number\">0x0501</span></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">IS_WINDOWSXP_OR_LATER</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token function\">KeSetEvent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>PKEVENT<span class=\"token punctuation\">)</span>Context<span class=\"token punctuation\">,</span> IO_NO_INCREMENT<span class=\"token punctuation\">,</span> FALSE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t<span class=\"token comment\">// 如果中断等级过高时，工作任务放到 DelayeWorkQueue 队列中执行</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">KeGetCurrentIrql</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> PASSIVE_LEVEL<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t\t<span class=\"token function\">ExQueueWorkItem</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>PWORK_QUEUE_ITEM<span class=\"token punctuation\">)</span>Context<span class=\"token punctuation\">,</span> DelayedWorkQueue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t\t<span class=\"token comment\">// 否则直接执行 SfFsControlMountVolumeCompleteWorker 函数</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t\tPWORK_QUEUE_ITEM workItem <span class=\"token operator\">=</span> Context<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t\t<span class=\"token punctuation\">(</span>workItem<span class=\"token operator\">-></span>WorkerRoutine<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>workItem<span class=\"token operator\">-></span>Parameter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\">WINVER <span class=\"token operator\">>=</span> <span class=\"token number\">0x0501</span></span></span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token keyword\">return</span> STATUS_MORE_PROCESSING_REQUIRED<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>UNREFERENCED_PARAMETER</code>  的意义在于可以去掉 C 编译器对于没有使用的参数所产生的一个警告。 一般地说， 内核代码会打开所有的警告以避免比较隐晦的错误。如果已经确定了这个警告不是错误， 则使用类似的宏来手动删除它。</p>\n<p>以上就在不同版本的 Windows 上实现了相同的功能。这样，IRP 请求就已经完成了， 之后执行绑定卷的操作即可</p>\n<h2 id=\"绑定卷的实现\"><a class=\"anchor\" href=\"#绑定卷的实现\">#</a> 绑定卷的实现</h2>\n<p><code>SfFsControlMountVolumeCompleteWorker</code>  函数的任务很简单， 就是调用 <code>SfFsControlMountVolumeComplete</code> ， 因为这个函数最终绑定卷设备， 所以这里我们只要看 <code>SfFsControlMount VolumeComplete</code>  的实现就可以了。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>VOID  <span class=\"token function\">SfFsControlMountVolumeCompleteWorker</span><span class=\"token punctuation\">(</span>IN PFSCTRL_COMPLETION_CONTEXT Context<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token function\">ASSERT</span><span class=\"token punctuation\">(</span>Context <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token function\">SfFsControlMountVolumeComplete</span><span class=\"token punctuation\">(</span>Context<span class=\"token operator\">-></span>DeviceObject<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\tContext<span class=\"token operator\">-></span>Irp<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\tContext<span class=\"token operator\">-></span>NewDeviceObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token function\">ExFreePoolWithTag</span><span class=\"token punctuation\">(</span>Context<span class=\"token punctuation\">,</span> SFCO_POOL_TAG<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>下面是函数 <code>SfFsControlMountVolumeComplete</code>  的实现代码。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>NTSTATUS  <span class=\"token function\">SfFsControlMountVolumeComplete</span><span class=\"token punctuation\">(</span>IN PDEVICE_OBJECT DeviceObject<span class=\"token punctuation\">,</span> IN PIRP Irp<span class=\"token punctuation\">,</span> IN PDEVICE_OBJECT NewDeviceObject<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t参数说明:</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tDeviceObject:        它是绑定到文件系统控制设备对象的设备栈上，它是一个过滤设备对象。</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tIrp:                 它是发送给文件系统 CDO 的挂载请求。它是一个新卷的挂载请求。</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tNewDeviceObject:     它是新创建的过滤设备对象，用于绑定到文件系统的卷设备对象的设备栈上。</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t*/</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tPVPB vpb<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\tPSFILTER_DEVICE_EXTENSION newDevExt<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tPIO_STACK_LOCATION irpSp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tPDEVICE_OBJECT attachedDeviceObject<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tNTSTATUS status<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token function\">PAGED_CODE</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\tnewDevExt <span class=\"token operator\">=</span> NewDeviceObject<span class=\"token operator\">-></span>DeviceExtension<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\tirpSp <span class=\"token operator\">=</span> <span class=\"token function\">IoGetCurrentIrpStackLocation</span><span class=\"token punctuation\">(</span>Irp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t * 获取我们保存的 VPB，这个时候就可以通过该设备对象得到 VPB</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t * VPB->DeviceObject 是  文件系统创建的卷设备对象</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t * VPB->RealDevice 是    磁盘驱动创建的物理设备对象</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t */</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\tvpb <span class=\"token operator\">=</span> newDevExt<span class=\"token operator\">-></span>StorageStackDeviceObject<span class=\"token operator\">-></span>Vpb<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>vpb <span class=\"token operator\">!=</span> irpSp<span class=\"token operator\">-></span>Parameters<span class=\"token punctuation\">.</span>MountVolume<span class=\"token punctuation\">.</span>Vpb<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t<span class=\"token function\">SF_LOG_PRINT</span><span class=\"token punctuation\">(</span>SFDEBUG_DISPLAY_ATTACHMENT_NAMES<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t\t<span class=\"token punctuation\">(</span><span class=\"token string\">\"SFilter!SfFsControlMountVolume:              VPB in IRP stack changed   %p IRPVPB=%p VPB=%p\\n\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\t\t\tvpb<span class=\"token operator\">-></span>DeviceObject<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\t\t\tirpSp<span class=\"token operator\">-></span>Parameters<span class=\"token punctuation\">.</span>MountVolume<span class=\"token punctuation\">.</span>Vpb<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\t\t\tvpb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">NT_SUCCESS</span><span class=\"token punctuation\">(</span>Irp<span class=\"token operator\">-></span>IoStatus<span class=\"token punctuation\">.</span>Status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\t<span class=\"token comment\">// 获得一个互斥体的内核对象，以便下面的代码可以以 “原子方式” 判断是否绑定过改卷设备，防止对同一个卷设备判定两次</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\t<span class=\"token function\">ExAcquireFastMutex</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>gSfilterAttachLock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\t<span class=\"token comment\">// 判断是否绑定过了</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">SfIsAttachedToDevice</span><span class=\"token punctuation\">(</span>vpb<span class=\"token operator\">-></span>DeviceObject<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>attachedDeviceObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t\t\t<span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t\t\t * SfAttachToMountedDevice 的意义：将我们创建的过滤设备对象 NewDeviceObject 绑定到文件系统创建的 VPB->DeviceObject 的设备对象栈上。</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t\t\t */</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t\t\tstatus <span class=\"token operator\">=</span> <span class=\"token function\">SfAttachToMountedDevice</span><span class=\"token punctuation\">(</span>vpb<span class=\"token operator\">-></span>DeviceObject<span class=\"token punctuation\">,</span> NewDeviceObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">NT_SUCCESS</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t\t\t\t<span class=\"token function\">SfCleanupMountedDevice</span><span class=\"token punctuation\">(</span>NewDeviceObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t\t\t\t<span class=\"token function\">IoDeleteDevice</span><span class=\"token punctuation\">(</span>NewDeviceObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t\t\t<span class=\"token function\">ASSERT</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span> <span class=\"token operator\">==</span> attachedDeviceObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t\t\t</pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t\t\t<span class=\"token function\">SF_LOG_PRINT</span><span class=\"token punctuation\">(</span>SFDEBUG_DISPLAY_ATTACHMENT_NAMES<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">(</span><span class=\"token string\">\"SFilter!SfFsControlMountVolume               Mount volume failure for   %p \\\"%wZ\\\", already attached\\n\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t\t\t\t\t<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>PSFILTER_DEVICE_EXTENSION<span class=\"token punctuation\">)</span>attachedDeviceObject<span class=\"token operator\">-></span>DeviceExtension<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>AttachedToDeviceObject<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t\t\t\t\t<span class=\"token operator\">&amp;</span>newDevExt<span class=\"token operator\">-></span>DeviceName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t\t\t<span class=\"token comment\">// 到这里说明是已经绑定过的，直接放弃即可</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\t\t\t<span class=\"token function\">SfCleanupMountedDevice</span><span class=\"token punctuation\">(</span>NewDeviceObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>\t\t\t<span class=\"token function\">IoDeleteDevice</span><span class=\"token punctuation\">(</span>NewDeviceObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\t\t\t<span class=\"token function\">ObDereferenceObject</span><span class=\"token punctuation\">(</span>attachedDeviceObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\t\t<span class=\"token function\">ExReleaseFastMutex</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>gSfilterAttachLock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>\t\t<span class=\"token function\">SF_LOG_PRINT</span><span class=\"token punctuation\">(</span>SFDEBUG_DISPLAY_ATTACHMENT_NAMES<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>\t\t\t<span class=\"token punctuation\">(</span><span class=\"token string\">\"SFilter!SfFsControlMountVolume:              Mount volume failure for   %p \\\"%wZ\\\", status=%08x\\n\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>\t\t\t\tDeviceObject<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>\t\t\t\t<span class=\"token operator\">&amp;</span>newDevExt<span class=\"token operator\">-></span>DeviceName<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>\t\t\t\tIrp<span class=\"token operator\">-></span>IoStatus<span class=\"token punctuation\">.</span>Status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>\t\t<span class=\"token function\">SfCleanupMountedDevice</span><span class=\"token punctuation\">(</span>NewDeviceObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>\t\t<span class=\"token function\">IoDeleteDevice</span><span class=\"token punctuation\">(</span>NewDeviceObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>\t<span class=\"token comment\">// 完成请求</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>\tstatus <span class=\"token operator\">=</span> Irp<span class=\"token operator\">-></span>IoStatus<span class=\"token punctuation\">.</span>Status<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>\t<span class=\"token function\">IoCompleteRequest</span><span class=\"token punctuation\">(</span>Irp<span class=\"token punctuation\">,</span> IO_NO_INCREMENT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>\t<span class=\"token keyword\">return</span> status<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这个过程确实比较复杂， 可以使读者意识到： 在文件系统这种 Windows 核心组件上进行的修改， 与对串口、 键盘这样简单设备的修改不同。 即使是简单地调用一个内核调用去绑定一个设备， 也要充分考虑到对整个执行环境的影响。</p>\n<p>下面介绍了 <code>SfAttachToMountedDevice</code>  的实现。 这个函数是调用 <code>SfAttachDeviceToDeviceStack</code>  来实现最终绑定的。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>NTSTATUS  <span class=\"token function\">SfAttachToMountedDevice</span><span class=\"token punctuation\">(</span>IN PDEVICE_OBJECT DeviceObject<span class=\"token punctuation\">,</span> IN PDEVICE_OBJECT SFilterDeviceObject<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tSfAttachToMountedDevice 函数的功能：完成绑定一个文件系统卷设备的操作。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t参数说明:</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tSFilterDeviceObject:  它是我们使用 IoCreateDevice 函数来创建的设备对象。</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t*/</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tPSFILTER_DEVICE_EXTENSION newDevExt <span class=\"token operator\">=</span> SFilterDeviceObject<span class=\"token operator\">-></span>DeviceExtension<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tNTSTATUS status<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\tULONG i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token function\">PAGED_CODE</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token function\">ASSERT</span><span class=\"token punctuation\">(</span><span class=\"token function\">IS_MY_DEVICE_OBJECT</span><span class=\"token punctuation\">(</span>SFilterDeviceObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\">WINVER <span class=\"token operator\">>=</span> <span class=\"token number\">0x0501</span></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token function\">ASSERT</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">SfIsAttachedToDevice</span><span class=\"token punctuation\">(</span>DeviceObject<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token comment\">// 设备标志的复制</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">FlagOn</span><span class=\"token punctuation\">(</span>DeviceObject<span class=\"token operator\">-></span>Flags<span class=\"token punctuation\">,</span> DO_BUFFERED_IO<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t<span class=\"token function\">SetFlag</span><span class=\"token punctuation\">(</span>SFilterDeviceObject<span class=\"token operator\">-></span>Flags<span class=\"token punctuation\">,</span> DO_BUFFERED_IO<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">FlagOn</span><span class=\"token punctuation\">(</span>DeviceObject<span class=\"token operator\">-></span>Flags<span class=\"token punctuation\">,</span> DO_DIRECT_IO<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t<span class=\"token function\">SetFlag</span><span class=\"token punctuation\">(</span>SFilterDeviceObject<span class=\"token operator\">-></span>Flags<span class=\"token punctuation\">,</span> DO_DIRECT_IO<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token comment\">// 循环尝试绑定，绑定有可能失败，这可能和其他用户恰好试图对这个磁盘做特殊的操作比如解挂载有关。</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token comment\">// 反复进行 8 次尝试，以尽可能低避开这些巧合。</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\tLARGE_INTEGER interval<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\t<span class=\"token comment\">// 调用 SfAttachDeviceToDeviceStack 函数进行  卷的绑定</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\tstatus <span class=\"token operator\">=</span> <span class=\"token function\">SfAttachDeviceToDeviceStack</span><span class=\"token punctuation\">(</span>SFilterDeviceObject<span class=\"token punctuation\">,</span> DeviceObject<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>newDevExt<span class=\"token operator\">-></span>AttachedToDeviceObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">NT_SUCCESS</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\t\t<span class=\"token function\">ClearFlag</span><span class=\"token punctuation\">(</span>SFilterDeviceObject<span class=\"token operator\">-></span>Flags<span class=\"token punctuation\">,</span> DO_DEVICE_INITIALIZING<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\t\t<span class=\"token function\">SF_LOG_PRINT</span><span class=\"token punctuation\">(</span>SFDEBUG_DISPLAY_ATTACHMENT_NAMES<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">(</span><span class=\"token string\">\"SFilter!SfAttachToMountedDevice:             Attaching to volume        %p \\\"%wZ\\\"\\n\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\t\t\t\tnewDevExt<span class=\"token operator\">-></span>AttachedToDeviceObject<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\t\t\t\t<span class=\"token operator\">&amp;</span>newDevExt<span class=\"token operator\">-></span>DeviceName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> STATUS_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t\t<span class=\"token comment\">// 把这个线程延迟 500ms 后再继续</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t\tinterval<span class=\"token punctuation\">.</span>QuadPart <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">500</span> <span class=\"token operator\">*</span> DELAY_ONE_MILLISECOND<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">//delay 1/2 second</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t\t<span class=\"token function\">KeDelayExecutionThread</span><span class=\"token punctuation\">(</span>KernelMode<span class=\"token punctuation\">,</span> FALSE<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>interval<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t<span class=\"token keyword\">return</span> status<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这里的结果表示绑定已完成， 下面开始讲解各种操作的过滤。</p>\n<h1 id=\"读写操作的过滤\"><a class=\"anchor\" href=\"#读写操作的过滤\">#</a> 读 / 写操作的过滤</h1>\n<h2 id=\"设置一个读处理函数\"><a class=\"anchor\" href=\"#设置一个读处理函数\">#</a> 设置一个读处理函数</h2>\n<p>文件系统有许多种操作， 但是读 / 写操作依然是最重要的。 对于杀毒软件的动态监控而言， 新建目录、 新建文件、 文件改名等操作都只能得到文件名信息， 对查找病毒的意义不大。 只有文件内容的读和写， 才是扫描病毒的合适时机。</p>\n<p>在 Windows 系统中， 如果在任何文件被读取时都检查读出的内容中是否含有病毒特征码， 就可以防止病毒从硬盘（或者其他介质） 中被加载到内存中执行； 如果在任何文件被写入时都检查写入的内容中是否含有病毒特征码， 就可以防止病毒被写入硬盘， 也就可以防止已经存在于硬盘上的文件被病毒感染。</p>\n<p>由于前面的代码已经绑定了文件系统卷， 而所有的文件都是保存在卷上的， 所以处理截获到的主功能号为 <code>IRP_MJ_READ</code>  和 <code>IRP_MJ_WRITE</code>  的 IRP， 就可以实现扫描病毒特征码的功能。 当然， 一个必要的条件是， 必须从这两种 IRP 中解析出读取到和要写入的文件内容。</p>\n<p>回忆一下在驱动的入口函数 <code>DriverEntry</code>  中对分发函数的设置。 下面来编写两个函数分别处理读和写的 IRP， 其中处理读的函数称为 <code>SfRead</code> ， 而处理写的函数称为 <code>SfWrite</code> 。 这两个函数的处理过程非常类似， 但是有一点需要注意 — 如果要获得操作的文件内容， 对于读请求来说， 必须将其完成才能得到内容； 写请求则可以直接得到。</p>\n<p>因为写请求的数据是由发请求的上层程序填写的， 在请求完成之前就已经存在于输入缓冲区里了； 而读请求的数据则是必须从硬盘上获得的， 必须要在请求完成之后才能在输出缓冲区里存在。 因此， 读请求的处理会比写请求复杂一点。 下面的例子都是讲述 <code>SfRead</code>  的； 而 <code>SfWrite</code>  则请读者举一反三， 自己动手试试。</p>\n<p>在 <code>DriverEntry</code>  中没有设置读请求分发函数， 因此在后面加上一条：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>pDriverObject<span class=\"token operator\">-></span>MajorFunction<span class=\"token punctuation\">[</span>IRP_MJ_READ<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> SfRead<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"设备对象的区分处理\"><a class=\"anchor\" href=\"#设备对象的区分处理\">#</a> 设备对象的区分处理</h2>\n<p>对 SfRead 的处理， 要注意一些什么呢？</p>\n<p>首先， <strong>判断设备对象是不是一个绑定在文件系统卷设备上的过滤设备</strong>， 如果是， 那么就是一个读 / 写文件的操作。</p>\n<p>请注意， 绑定在文件系统的控制设备上的过滤设备也有可能发生读请求， 但是那就不是在读取文件了。</p>\n<p>那么如何判断呢？</p>\n<p><strong>记得绑定 Volume 的代码已经在设备扩展中设置了域 StorageDev。如果不是（比如控制设备的绑定就没设置过） ， 那么判断 StorageDev 中是否为空， 就可以知道这是否是一个文件系统的卷设备</strong>。</p>\n<p>由此可见，过滤设备上的设备扩展是非常有用的。 实际上，它就是用来在绑定时保存任意信息， 以便将来能在过滤时得到这些信息的一个上下文。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>PSFILTER_DEVICE_EXTENSION devExt <span class=\"token operator\">=</span> DeviceObject<span class=\"token operator\">-></span>DeviceExtension<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>devExt<span class=\"token operator\">-></span>StorageStackDeviceObject<span class=\"token operator\">!=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token comment\">// 到这里说明是卷设备，也就是说，这是一个文件的写操作</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t…………</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>其他的情况不需要捕获， 请直接传递到下层。</p>\n<p>读 / 写请求的 IRP 情况非常复杂， 请有足够的心理准备。 可以依赖 WDK 的帮助， 但是尽信帮助不如无帮助。 当然， 对本书也是尽信书不如无书， 最好的办法就是自己打印 IRP 的各细节， 自己查看文件读操作的完成过程。</p>\n<p>下面实现函数 SfRead， 这里的判断处理稍有不同。 如果是对本程序自己的控制设备的读操作， 则返回失败， 因为本程序的控制设备并没有提供读接口。 然后判断如果不是文件读操作， 就直接放过。 最后的省略处是要加入的读处理。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>NTSTATUS <span class=\"token function\">SfRead</span><span class=\"token punctuation\">(</span>IN PDEVICE_OBJECT DeviceObject<span class=\"token punctuation\">,</span> IN PIRP Irp<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tPIO_STACK_LOCATION irpsp <span class=\"token operator\">=</span> <span class=\"token function\">IoGetCurrentIrpStackLocation</span><span class=\"token punctuation\">(</span>Irp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tPFILE_OBJECT file_object <span class=\"token operator\">=</span> irpsp<span class=\"token operator\">-></span>FileObject<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tPSFILTER_DEVICE_EXTENSION devExt <span class=\"token operator\">=</span> DeviceObject<span class=\"token operator\">-></span>DeviceExtension<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token comment\">// 对于控制设备的操作，如果没有什么需求，那么直接返回失败就可以</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">IS_MY_DEVICE_OBJECT</span><span class=\"token punctuation\">(</span>DeviceObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\tIrp<span class=\"token operator\">-></span>IoStatus<span class=\"token punctuation\">.</span>Status <span class=\"token operator\">=</span> STATUS_INVALID_DEVICE_REQUEST<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\tIrp<span class=\"token operator\">-></span>IoStatus<span class=\"token punctuation\">.</span>Information <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token function\">IoCompleteRequest</span><span class=\"token punctuation\">(</span>Irp<span class=\"token punctuation\">,</span> IO_NO_INCREMENT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> STATUS_INVALID_DEVICE_REQUEST<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token comment\">// 对于文件系统其他设备的操作，直接下发到下层驱动即可。</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>devExt<span class=\"token operator\">-></span>StorageStackDeviceObject <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t<span class=\"token comment\">// 直接调用 SfPassThrough 来下发</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">SfPassThrough</span><span class=\"token punctuation\">(</span>DeviceObject<span class=\"token punctuation\">,</span> Irp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token comment\">// 到这里就是对卷的文件操作了</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t…………</pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"解析读请求中的文件信息\"><a class=\"anchor\" href=\"#解析读请求中的文件信息\">#</a> 解析读请求中的文件信息</h2>\n<p>接下来的工作是分析这个 IRP。<br />\n对于一个读操作， 程序员需要知道的是：</p>\n<ol>\n<li>这是对哪个文件的读操作？</li>\n</ol>\n<blockquote>\n<p>IRP 的当前栈空间下有一个文件对象指针， 指向一个文件对象， 从文件对象中可以得到文件对象的名字。在后面的 “路径过滤的实现” 中， 再详细讲解文件名和路径的获取。</p>\n</blockquote>\n<p>用以下代码来得到文件对象（从 irpsp 中）：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>PIO_STACK_LOCATION irpsp <span class=\"token operator\">=</span> <span class=\"token function\">IoGetCurrentIrpStackLocation</span><span class=\"token punctuation\">(</span>Irp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>PFILE_OBJECT file_object <span class=\"token operator\">=</span> irpsp<span class=\"token operator\">-></span>FileObject<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>读取的偏移量是多少？</li>\n</ol>\n<blockquote>\n<p>在 Windows 2000 下文件系统得到的偏移量都是从文件起始位置开始计算的。 偏移量是一个 <code>LARGE_INTEGER</code> ， 这是一个在 Windows 驱动开发中常用的 64 位整数数据的共用体。</p>\n</blockquote>\n<p>用以下代码来得到偏移量（从 irpsp 中）：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>PIO_STACK_LOCATION irpsp <span class=\"token operator\">=</span> <span class=\"token function\">IoGetCurrentIrpStackLocation</span><span class=\"token punctuation\">(</span>Irp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>LARGE_INTEGER offset<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>ULONG length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>offset<span class=\"token punctuation\">.</span>QuadPart <span class=\"token operator\">=</span> irpsp<span class=\"token operator\">-></span>Parameters<span class=\"token punctuation\">.</span>Read<span class=\"token punctuation\">.</span>ByteOffset<span class=\"token punctuation\">.</span>QuadPart<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>读取的长度是多少？</li>\n</ol>\n<p>用以下代码来得到读取的文件内容长度（从 irpsp 中）：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>length <span class=\"token operator\">=</span> irpsp<span class=\"token operator\">-></span>Parameters<span class=\"token punctuation\">.</span>Read<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>如果这是个写操作， 写的偏移量和长度则为:</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>offset<span class=\"token punctuation\">.</span>QuadPart <span class=\"token operator\">=</span> irpsp<span class=\"token operator\">-></span>Parameters<span class=\"token punctuation\">.</span>Write<span class=\"token punctuation\">.</span>ByteOffset<span class=\"token punctuation\">.</span>QuadPart<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>length <span class=\"token operator\">=</span> irpsp<span class=\"token operator\">-></span>Parameters<span class=\"token punctuation\">.</span>Write<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"4\">\n<li>读取成功了吗？ 如果读取成功了， 那么读到的内容放在哪里呢？</li>\n</ol>\n<p>这里需要了解一些知识：如果杀毒软件要扫描病毒， 此时当然<em>希望能得到所读到的数据内容</em>。 数据只能在完成之后获取， 所以下面要<strong>设置完成函数</strong>。</p>\n<p>完成 IRP 时是忽略还是拷贝当前栈空间（ <code>IO_STACK_LOCATION</code> ） ， 返回什么状态值， 以及在完成函数中如何结束 IRP， 是不那么容易弄清楚的事情。</p>\n<p>书中作者总结如下：</p>\n<p>(1) 如果对 IRP 完成之后的事情无兴趣， 则直接忽略当前 <code>IO_STACK_LOCATION</code> （从代码上说， 调用内核 API 函数 <code>IoSkipCurrentIrpStackLocation</code> ） ， 然后向下传递请求， 返回 <code>IoCallDriver</code>  所返回的状态。</p>\n<p>(2) 不但对 IRP 完成之后的事情无兴趣， 而且不打算继续传递， 打算立刻返回成功或失败， 那么不用忽略或者拷贝当前 <code>IO_STACK_LOCATION</code> ， 可以在填写 IRP 的状态参数后调用 <code>IoCompleteRequest</code> ， 并返回自己想返回的结果。</p>\n<p>(3) 如果对 IRP 完成之后的事情有兴趣， 并打算在完成函数中处理， 则应该首先拷贝当前 <code>IO_STACK_LOCATION</code> （  <code>IoCopyCurrentIrpStackLocationToNext</code> ） ， 然后指定完成函数， 并返回 <code>IoCallDriver</code>  所返回的状态。 在完成函数中， 不需要调用 <code>IoCompleteRequest</code> ， 直接返回 IRP 的当前状态即可。</p>\n<p>(4) 同第三种情况， 有时候， 会把任务塞入系统工作线程中或者希望在另外的线程中去完成 IRP， 那么在完成函数中应该返回 <code>STATUS_MORE_PROCESSING_REQUIRED</code> ，此时完成 IRP 时应该调用 <code>IoCompleteRequest</code> 。</p>\n<p>(5)<strong> 第五种情况是在分发函数中等待在完成函数中设置事件， 那么完成函数返回 <code>STATUS_MORE_PROCESSING_REQUIRED</code> ， 分发函数在等待结束后调用 <code>IoCompleteRequest</code> </strong>。</p>\n<hr />\n<p>下面的问题就是<em>如何获取读取到的内容</em>了。</p>\n<p>IRP 的缓冲区放在哪里取决于这个操作的 IO 方式。<br />\nIO 方式有三种： 缓冲方式、 直接方式和皆不是方式。皆不是方式听起来比较怪异， 因为英文资料上这三种方式分别为：  <code>Buffered IO</code> 、 <code>Direct IO</code>  和 <code>Neither IO</code> 。 既然 Neither 表示前两者皆不是， 那么中文就可以命名为皆不是 IO 了。</p>\n<p>对这三种不同方式的介绍如下：</p>\n<p>（1） 缓冲方式。 这种方式在文件读 / 写请求中没有出现过， 作者也认为不会出现。 但是在前面的串口过滤中出现过， 可以参考 “串口的过滤” 中的 IRP 处理。 请求的缓冲区本来是在应用程序的用户态空间里的（ 因为是应用程序发起的请求）。请求会被发送到内核中处理。 内核不一定会在当前进程上下文中处理它， 有可能处理的时候已经在其他进程里了。 但不同的进程中无法访问这个缓冲区（ 进程用户态内存空间是相互隔离的） 。而缓冲方式就会在内核内存中分配一个缓冲区， 将用户态的请求缓冲区拷贝到内核缓冲区中。 由于内核内存可以在任何进程中访问， 所以缓冲方式能够避免内核处理请求时， 用户态空间地址失效的问题。 但这种方式中间需要拷贝， 所以比较慢。</p>\n<p>（2） 直接方式。 直接方式是使用 MDL 来传递缓冲区的。 因为请求一般都是用户进程发起的， 原始的空间都在用户空间中， 这些空间指针如果传递到内核代码里， 虽然可以正常使用内核， 但是却必须保证其在当前进程空间范围内。 如果对内核做一些特殊的处理，比如把请求放入队列， 等待另一个进程中的线程去完成它， 那么问题就来了： 这些空间指针失效了。 缓冲方式虽然没这个问题， 但是需要拷贝。 为了避免拷贝， 出现了直接方式，<em>就是直接把用户空间的范围直接映射到内核空间</em>。 为此， 当然要做修改页表之类的种种事务， 但是我们不用关心， 只需要了解 MDL 会解决这个问题即可。 因此缓冲区在 <code>Irp→MdlAddress</code>  对应的空间内， 这个 MDL 指针可以用 <code>MmGetSystemAddressForMdlSafe</code>  转换得到实际缓冲区的指针。</p>\n<p>（3） 皆不是方式。 皆不是方式是最简单的， 可以直接把用户空间的指针传递进来，不做任何处理， 这个指针就是 <code>Irp→UserBuffer</code> 。</p>\n<p><em>这个空间在 <code>SfRead</code>  中当然可以直接用， 但是不可以放到其他线程中处理（ 比如放到完成函数中） 。 一般可以设置一个事件， 等待完成函数被调用后继续在 <code>SfRead</code>  中处理， 是不会有问题的</em>。</p>\n<p>在实际中， 简单地说，  <code>Irp→MdlAddress</code>  如果不为 NULL， 则使用 <code>Irp→MdlAddress</code> ， 缓冲区位置为 <code>MmGetSystemAddressForMdl(Irp→MdlAddress)</code> ； 否则直接使用 <code>Irp→UserBuffer</code> ，  <code>UseBuffer</code>  是一个只在当前线程上下文处才有效的地址。</p>\n<p>那么， 获得读取内容的主要方法示例如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>KEVENT waitEvent<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> buf<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>ULONG length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">KeInitializeEvent</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>waitEvent<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t\t\t\tNotificationEvent<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t\t\t\tFALSE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">IoCopyCurrentIrpStackLocationToNext</span><span class=\"token punctuation\">(</span>Irp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token function\">IoSetCompletionRoutine</span><span class=\"token punctuation\">(</span>Irp<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t\t\t\t\tSfReadCompletion<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t\t\t\t\t<span class=\"token operator\">&amp;</span>waitEvent<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t\t\t\t\tTRUE<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t\t\t\t\tTRUE<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t\t\t\t\tTRUE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>status <span class=\"token operator\">=</span> <span class=\"token function\">IoCallDriver</span><span class=\"token punctuation\">(</span>devExt<span class=\"token operator\">-></span>AttachedToDeviceObject<span class=\"token punctuation\">,</span> Irp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>STATUS_PENDING <span class=\"token operator\">==</span> status<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\tstatus <span class=\"token operator\">=</span> <span class=\"token function\">KeWaitForSingleObject</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>waitEvent<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\tExecutive<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\tKernelMode<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\tFALSE<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t<span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token function\">ASSERT</span><span class=\"token punctuation\">(</span>STATUS_SUCCESS <span class=\"token operator\">==</span> status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Irp<span class=\"token operator\">-></span>IoStatus<span class=\"token punctuation\">.</span>Status <span class=\"token operator\">==</span> STATUS_SUCCESS<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token comment\">// 如果成功地完成了，那么获取读到的内容在缓冲区 buf 中</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token comment\">// 至于内容的长度，可以从 Irp->IoStatus.Information 中获得</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Irp<span class=\"token operator\">-></span>MdlAddress <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\tbuf <span class=\"token operator\">=</span> <span class=\"token function\">MmGetSystemAddressForMdl</span><span class=\"token punctuation\">(</span>Irp<span class=\"token operator\">-></span>MdlAddress<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\tbuf <span class=\"token operator\">=</span> Irp<span class=\"token operator\">-></span>UserBuffer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\tlength <span class=\"token operator\">=</span> Irp<span class=\"token operator\">-></span>IoStatus<span class=\"token punctuation\">.</span>Information<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>如果是写操作的内容则直接从 <code>Irp→UserBuffer</code>  或 <code>Irp→MdlAddress</code>  中得到。</p>\n<h2 id=\"读请求的完成\"><a class=\"anchor\" href=\"#读请求的完成\">#</a> 读请求的完成</h2>\n<p>因为读请求在内核中被封装为 IRP， 往内核驱动中层层下发（每个驱动程序只占一层） 。 所以对一个驱动程序来说， 完成读请求就是收到一个 IRP， 处理完这个 IRP， 然后通知自己的上层驱动， 这个 IRP 已经完成的过程。</p>\n<p>常常有读者疑惑， 文件过滤驱动并不是真实的文件系统驱动， 更不直接牵涉到硬盘， 但只有硬盘才能真正完成读请求， 那么文件过滤又如何能完成一个读请求呢？</p>\n<p><em>实际上， 任何驱动都可以完成它收到的请求。 对于一个 IRP 而言， 只要填好它需要的信息（比如读取到的内容、 读完的状态， 以及读到了多少） ， 然后就可以向上层报告这个 IRP 完成了。 至于这些数据从哪里来， 真实硬件返回的是什么状态， 上层根本不关心。 即使这个驱动根本就没有把请求下发到下层驱动， 而是自己 “虚构” 地填写一些数据， 也不会有什么问题， 上层驱动是不会关心这些的。</em></p>\n<p>一般地说， 文件系统过滤驱动对 IRP 进行监控， 允许或禁止（禁止的话， 返回失败，这也是完成的一种， 只是不虚构数据） ， 或者对 IRP 进行一些修改。 比如在写之前， 先把缓冲区中要写的数据加密。 但是也有一些情况， 需要自己完成这个请求； 或者说， 有时自己完成请求也是种选择。</p>\n<hr />\n<p><em>考虑一下文件系统过滤在视频点播方面的应用。 视频点播的特点是文件一般很大， 而且有多个客户要对同一个文件进行从头到尾的连续读取。 这时候， 使用大量内存对这些文件进行专门的缓冲， 就非常有价值了。假设在这个设计中， 驱动针对特殊的流媒体文件， 采取预先读取到内存中的方式。 当一个读请求被这个文件过滤驱动捕获时， 假设这个读请求经过检查， 刚好被本驱动的缓冲命中， 那么就可以直接从内存中读出， 不用下传到下面的真实文件系统了。 此时， 自己完成请求显然是很有意义的</em>。</p>\n<hr />\n<p>这里要谈到 IRP 的次功能号。 前面已经讨论过， 如果 <code>irpsp→MajorFunction</code>  是 <code>IRP_MJ_READ</code> ， 则是读请求。 读请求也有几个不同的次功能号， 可以用如下的代码得到：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>PIO_STACK_LOCATION irpsp <span class=\"token operator\">=</span> <span class=\"token function\">IoGetCurrentIrpStackLocation</span><span class=\"token punctuation\">(</span>irp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>UCHAR minor_code <span class=\"token operator\">=</span> irpsp<span class=\"token operator\">-></span>MinorFunction<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>每个主功能号下面都有一些次功能号， 如果一个 IRP 的主功能号是 <code>IRP_MJ_READ</code> ，检查它的次功能号， 则应该有以下几种情况：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>IRP_MN_NORMAL</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>IRP_MN_MDL</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>IRP_MN_MDL_ COMPLETE</pre></td></tr></table></figure><p>还有其他几种情况， 资料上有解释， 但是书的作者没调试过，也就没有介绍，我们暂时也不用深究了，看这三种介绍即可。</p>\n<ol>\n<li>\n<p><code>IRP_MN_NORMAL</code>  既有可能在 <code>Irp→MdlAddress</code>  中返回数据， 也有可能在 <code>Irp→UserBuffer</code>  中返回数据。 如果要完成这样的请求， 直接判断 <code>Irp→MdlAddress</code>  是否为空即可。 如果为空， 则把数据填入 <code>Irp→UserBuffer</code>  中， 这些空间都是预先分配好的， 不需要编程者自己分配。</p>\n</li>\n<li>\n<p>次功能号为 <code>IRP_MN_MDL</code>  是比较罕见的。 这种 IRP 的 <code>Irp→MdlAddress和Irp→UserBuffer</code>  都为空， 那么过滤驱动应该把数据往哪里拷贝呢？</p>\n</li>\n<li>\n<p><code>IRP_MN_MDL</code>  的要求是请编程者分配一个 MDL， 然后令 MDL 指向数据所在的空间， 最后返回给上层。 MDL 自然是要释放的， 换句话说， 使用完毕要归还， 所以又有 <code>IRP_MN_MDL_ COMPLETE</code> ， 意思是一个 MDL 已经使用完毕， 可以释放了。可见这种 IRP 比较特殊。 需要两个 IRP 才能完全完成。 当编程者收到 <code>IRP_MN_MDL</code>  的 IRP 时， 要分配 MDL； 之后会再收到一个 <code>IRP_MN_MDL_COMPLETE</code>  的 IRP， 此时就可以释放上次分配的 MDL 了。</p>\n</li>\n</ol>\n<p>下面写一些函数来分配和释放 MDL， 并令 MDL 指向内存位置或者得到 MDL 所指向的内存。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// MDL 相关，注意是内联函数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">SFMD_POOL_TAG</span>  <span class=\"token string\">'dmFS'</span>  </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 函数分配 MDL，缓冲必须是用户预先分配好的</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>__inline PMDL <span class=\"token function\">MyMdlAllocate</span><span class=\"token punctuation\">(</span>PVOID buf<span class=\"token punctuation\">,</span> ULONG length<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tPMDL pmdl <span class=\"token operator\">=</span> <span class=\"token function\">IoAllocateMdl</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">,</span> length<span class=\"token punctuation\">,</span> FALSE<span class=\"token punctuation\">,</span> FALSE<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pmdl <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token function\">MmBuildMdlForNonPagedPool</span><span class=\"token punctuation\">(</span>pmdl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">return</span> pmdl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">// 函数分配一个 MDL，并且带有一块内存</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>__inline PMDL <span class=\"token function\">MyMdlMemoryAllocate</span><span class=\"token punctuation\">(</span>ULONG length<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\tPMDL pmdl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token keyword\">void</span><span class=\"token operator\">*</span> buffer <span class=\"token operator\">=</span> <span class=\"token function\">ExAllocatePoolWithTag</span><span class=\"token punctuation\">(</span>NonPagedPool<span class=\"token punctuation\">,</span> length<span class=\"token punctuation\">,</span> SFMD_POOL_TAG<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>buffer <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\tpmdl <span class=\"token operator\">=</span> <span class=\"token function\">MyMdlAllocate</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">,</span> length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pmdl <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t<span class=\"token function\">ExFreePoolWithTag</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">,</span> SFMD_POOL_TAG<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token keyword\">return</span> pmdl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token comment\">// 函数释放 MDL，释放 MDL 所带的内存</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>__inline PMDL <span class=\"token function\">MyMdlMemoryFree</span><span class=\"token punctuation\">(</span>PMDL pmdl<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t<span class=\"token keyword\">void</span><span class=\"token operator\">*</span> buffer <span class=\"token operator\">=</span> <span class=\"token function\">MmGetSystemAddressForMdlSafe</span><span class=\"token punctuation\">(</span>pmdl<span class=\"token punctuation\">,</span> NormalPagePriority<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t<span class=\"token function\">IoFreeMdl</span><span class=\"token punctuation\">(</span>pmdl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t<span class=\"token function\">ExFreePoolWithTag</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">,</span> SFMD_POOL_TAG<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>要完成请求还有一个问题， 就是 <code>irp→IoStatus.Information</code> 。 这里必须填上实际读取到的字节数， 不然上层不知道有多少数据返回。 这个数字不一定与请求的长度等同（一般只要成功， 就应该都是等同的， 唯一的例外是读取到文件结束的地方长度不够了， 只能返回一个不足的值） 。 必须设置这个数字：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>irp<span class=\"token operator\">-></span>IoStatus<span class=\"token punctuation\">.</span>Information <span class=\"token operator\">=</span> length<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>作为读文件的情况， <strong>如果是自己完成请求， 那么不能忘记移动文件指针</strong>； 否则操作系统由于不知道文件指针移动了而反复读同一个地方， 永远找不到文件尾， 书的作者就碰到过这样的情况。 一般应按以下方法处理， 如果文件读取失败， 则请保持原来的文件指针位置不变； 如果文件读取成功， 则请把文件指针指到 “读请求偏移量 + 成功读取长度” 的位置。这个所谓的指针是指 <code>irp→FileObject→CurrentByteOffset</code> 。 如果请求没有下发， 完全自己虚拟执行这个请求的话，  <code>irp→FileObject→CurrentByteOffset</code>  也必须同步地修改。</p>\n<p>下面是示例的代码。 现在看看怎么完成这些请求， 假设已经得到了要读取的数据。 这些当然都是在 <code>SfRead</code>  中或者是其他想完成这个 IRP 的地方做的， 假设其他必要的判断都已经做了， 下面直接根据次功能号来判断。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>irpsp<span class=\"token operator\">-></span>MinorFunction<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token comment\">// 先保留文件的偏移位置</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">case</span> IRP_MN_NORMAL<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">void</span><span class=\"token operator\">*</span> buffer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Irp<span class=\"token operator\">-></span>MdlAddress <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\tbuffer <span class=\"token operator\">=</span> <span class=\"token function\">MmGetSystemAddressForMdlSafe</span><span class=\"token punctuation\">(</span>Irp<span class=\"token operator\">-></span>MdlAddress<span class=\"token punctuation\">,</span> NormalPagePriority<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\tbuffer <span class=\"token operator\">=</span> Irp<span class=\"token operator\">-></span>UserBuffer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token comment\">//  这样我们就获得了读取的内容</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token function\">KdPrint</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Read IRP buffer : %p\\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token comment\">// 完成请求，返回成功</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\tIrp<span class=\"token operator\">-></span>IoStatus<span class=\"token punctuation\">.</span>Information <span class=\"token operator\">=</span> length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\tIrp<span class=\"token operator\">-></span>IoStatus<span class=\"token punctuation\">.</span>Status <span class=\"token operator\">=</span> STATUS_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\tirpsp<span class=\"token operator\">-></span>FileObject<span class=\"token operator\">-></span>CurrentByteOffset<span class=\"token punctuation\">.</span>QuadPart <span class=\"token operator\">=</span> offset<span class=\"token punctuation\">.</span>QuadPart <span class=\"token operator\">+</span> length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token function\">IoCompleteRequest</span><span class=\"token punctuation\">(</span>Irp<span class=\"token punctuation\">,</span> IO_NO_INCREMENT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token keyword\">return</span> STATUS_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token keyword\">case</span> IRP_MN_MDL<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token comment\">// 请先分配 MDL</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\tPMDL pmdl <span class=\"token operator\">=</span> <span class=\"token function\">MyMdlMemoryAllocate</span><span class=\"token punctuation\">(</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pmdl <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\t<span class=\"token comment\">// 返回资源不足</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> STATUS_INSUFFICIENT_RESOURCES<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\tIrp<span class=\"token operator\">-></span>MdlAddress <span class=\"token operator\">=</span> pmdl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t<span class=\"token comment\">// …… 如果有数据，就写入 MDL 的 buffer 中</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\tIrp<span class=\"token operator\">-></span>IoStatus<span class=\"token punctuation\">.</span>Information <span class=\"token operator\">=</span> length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\tIrp<span class=\"token operator\">-></span>IoStatus<span class=\"token punctuation\">.</span>Status <span class=\"token operator\">=</span> STATUS_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\tirpsp<span class=\"token operator\">-></span>FileObject<span class=\"token operator\">-></span>CurrentByteOffset<span class=\"token punctuation\">.</span>QuadPart <span class=\"token operator\">=</span> offset<span class=\"token punctuation\">.</span>QuadPart <span class=\"token operator\">+</span> length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t<span class=\"token function\">IoCompleteRequest</span><span class=\"token punctuation\">(</span>Irp<span class=\"token punctuation\">,</span> IO_NO_INCREMENT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t<span class=\"token keyword\">return</span> STATUS_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t书上写的是 IRP_MN_MDL_COMPLETE 但是在 VS2019 中看到的却是</pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t#define IRP_MN_COMPLETE_MDL      (IRP_MN_COMPLETE | IRP_MN_MDL)</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t查了一下资料，https://www.cnblogs.com/jasononline/archive/2008/06/28/1231774.html</pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\tIRP_MN_COMPLETE | IRP_MN_MDL   就是 IRP_MN_MDL_COMPLETE</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t这么多年过去了 或许变成了  IRP_MN_COMPLETE_MDL</pre></td></tr><tr><td data-num=\"60\"></td><td><pre></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre><span class=\"token keyword\">case</span> IRP_MN_COMPLETE_MDL<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t<span class=\"token comment\">// 没有其他任务，就是释放 MDL</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\tIrp<span class=\"token operator\">-></span>IoStatus<span class=\"token punctuation\">.</span>Information <span class=\"token operator\">=</span> length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\tIrp<span class=\"token operator\">-></span>IoStatus<span class=\"token punctuation\">.</span>Status <span class=\"token operator\">=</span> STATUS_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\tirpsp<span class=\"token operator\">-></span>FileObject<span class=\"token operator\">-></span>CurrentByteOffset<span class=\"token punctuation\">.</span>QuadPart <span class=\"token operator\">=</span> offset<span class=\"token punctuation\">.</span>QuadPart <span class=\"token operator\">+</span> length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>\t<span class=\"token function\">IoCompleteRequest</span><span class=\"token punctuation\">(</span>Irp<span class=\"token punctuation\">,</span> IO_NO_INCREMENT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\t<span class=\"token keyword\">return</span> STATUS_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre></pre></td></tr><tr><td data-num=\"72\"></td><td><pre><span class=\"token keyword\">default</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>\t<span class=\"token comment\">// 其他情况不过滤比较简单</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre></pre></td></tr><tr><td data-num=\"77\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>以上代码书上讲的并不怎么清楚，仍有许多疑问。</p>\n<p>对于 <code>IRP_MN_MDL</code>  的情况， 需要分配一个 MDL， 并且这个 MDL 所带有的内存是有一定长度的， 这个长度必须与后来的 <code>irp→IoStatus.Information</code>  相同。 似乎上层并不以 <code>irp→IoStatus.Information</code>  返回的长度为准， 比如明明只读了 50 个字节， 但是过滤驱动返回了一个指向内存长度为 60 个字节的 MDL， 则操作系统认为已经读了 60 个字节。 这非常糟糕。</p>\n<p><strong>那么还是如何判断读取到文件结尾的呢</strong>？</p>\n<p><em>如果到某一处返回成功， 但是实际读取到的数据没有请求的数据长， 则还是返回 <code>STATUS_SUCCESS</code> ， 此后操作系统会马上发 IRP 来读最后一个位置， 此时返回长度为 0， 返回状态 <code>STATUS_FILE_END</code>  即可。 上层操作系统就会明确知道文件到结尾了</em>。</p>\n<h1 id=\"其他操作的过滤\"><a class=\"anchor\" href=\"#其他操作的过滤\">#</a> 其他操作的过滤</h1>\n<p>更多种类的过滤操作在写文件系统透明加密时学习。这里主要了解文件的打开、关闭和删除。</p>\n<h2 id=\"文件对象的生存周期\"><a class=\"anchor\" href=\"#文件对象的生存周期\">#</a> 文件对象的生存周期</h2>\n<p>首先了解什么是一个文件对象的生存周期。</p>\n<p>在进行文件系统操作过滤时，被操作的对象始终是<strong>文件对象</strong>（结构为 <code>FILE_OBJECT</code> ）。</p>\n<p>熟悉 Windows 应用编程的都知道， 对文件的操作一般都是针对文件句柄的。首先用 <code>CreateFile</code>  获得一个文件句柄； 然后可以对这个文件进行读 / 写、 查询和设置属性的操作； 最后用 <code>CloseHandle</code>  来关闭这个文件句柄。</p>\n<p>在内核中的<strong>文件对象指针</strong>， 也可以视为和文件句柄类似的东西。实际上， 在应用层使用的句柄， 是直接对应于内核中的文件对象的， 二者可以互相转换。但是它们并不是一对一的关系， 一个文件对象可以获得多个句柄。</p>\n<p>在文件系统过滤驱动中， 读者设置的分发函数首先拿到的是 IRP， 然后通过 IRP 得到文件对象指针。</p>\n<p>使用下面的代码从 IRP 中获得文件对象指针：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>PIO_STACK_LOCATION irpsp <span class=\"token operator\">=</span> <span class=\"token function\">IoGetCurrentIrpStackLocation</span><span class=\"token punctuation\">(</span>irp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>PFILE_OBJECT file_obj <span class=\"token operator\">=</span> irpsp<span class=\"token operator\">-></span>FileObject<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>和句柄类似， 文件对象是在主功能号为 <code>IRP_MJ_CREATE</code>  的 IRP 完成之后诞生的（<strong>在获得这个 IRP，但是 IRP 还没有被完成时，文件对象指针已经可用。只是这时还没有真正打开文件，所以可以看作一个无效的文件对象</strong>）。</p>\n<p>同理， 文件对象是在主功能号为 <code>IRP_MJ_CLOSE</code>  的 IRP 完成之后被销毁的，之后就不能再去使用那个文件对象指针了，理论上相关内存应该已经被释放。</p>\n<p>得到文件对象之后， 在过滤某个操作时， 才能知道这个操作是在操作哪个文件。 因此， 获得文件对象非常重要。</p>\n<h2 id=\"文件的打开与关闭\"><a class=\"anchor\" href=\"#文件的打开与关闭\">#</a> 文件的打开与关闭</h2>\n<h3 id=\"如何判断是文件还是目录\"><a class=\"anchor\" href=\"#如何判断是文件还是目录\">#</a> 如何判断是文件还是目录</h3>\n<p>实际上，文件对象并不仅仅指文件。 在 Windows 文件系统中， 目录和文件都是用文件对象来抽象的。</p>\n<p><em>那么对于一个已经存在的文件对象， 如何判断它是目录还是文件呢</em>？</p>\n<p>对于一个已经存在的文件对象， 我们必须发送 IRP 向卷设备询问这个文件对象的信息。</p>\n<p>自己发送 IRP 虽然可行， 但是并不简单， 因为官方并没有标准的文档（只有 OSR 的一些资料中有介绍）。</p>\n<p><em>但是文件对象都是在打开文件时诞生的，在诞生的过程中，可以通过使用一些方法得知这个即将诞生（或者已经诞生）的文件对象是文件还是目录</em>。</p>\n<p>在文件系统过滤中常用到的做法是：<strong>在打开文件时获得文件的信息并保存起来， 然后在其他时候使用这些信息， 最后在文件被关闭时删除这些信息</strong>。</p>\n<p>之所以这样做，是因为文件系统过滤驱动代码往往在文件被操作时执行。此时再发出文件系统操作（比如查询是文件还是目录），如果不自行向下层发送 IRP 或者采取其他避免重入的手段， 则往往会导致这些操作再次被自己捕获到（这些操作也被自己过滤了），而带来很多重入处理的麻烦。 所以，往往会坚持以下原则。</p>\n<ol>\n<li>\n<p><strong>在一个文件被打开（IRP 的主功能号为 <code>IRP_MJ_CREATE</code> ） 时， 决定这个文件对象是 “要过滤” 的还是 “不要过滤” 的</strong>。 在决定之前， 默认是不要过滤的， 所以尽可以对它进行各种操作， 收集更多的信息， 都不会重入。 这些信息被存入一个哈希表中。</p>\n</li>\n<li>\n<p>在其他的文件操作（如读、 写、 查询、 设置等） 时， 只过滤哈希表中存在且标明为 “要过滤” 的文件对象的请求， 其他的操作一律放过。 此时需要的信息（如这是个文件还是目录、 全路径等） 直接从哈希表中获取， 不用尝试自己去获取了。</p>\n</li>\n<li>\n<p>在文件对象被关闭时释放哈希表中的内容。收到一个文件打开的 IRP 时， 先获得当前 <code>IO_STACK_LOCATION</code> ， 那么 <code>irpsp→Parameters.Create</code>  的结构如下：</p>\n</li>\n</ol>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// System service parameters for:  NtCreateFile</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tPIO_SECURITY_CONTEXT SecurityContext<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tULONG Options<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tUSHORT POINTER_ALIGNMENT FileAttributes<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tUSHORT ShareAccess<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tULONG POINTER_ALIGNMENT EaLength<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span> Create<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>在 <code>irpsp→Parameters.Create.Options</code>  中可以取得一个和目录相关的关键标记，相关代码如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ULONG options <span class=\"token operator\">=</span> irpsp<span class=\"token operator\">-></span>Parameters<span class=\"token punctuation\">.</span>Create<span class=\"token punctuation\">.</span>Options<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>options <span class=\"token operator\">&amp;</span> FILE_DIRECTORY_FILE<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t……</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>并不是 Options 里面有 <code>FILE_DIRECTORY_FILE</code>  标记就表示这是一个目录，因为生成或者打开是一种尝试性的动作，<strong>只有当生成或者打开文件成功时， 判断文件对象是文件还是目录才有意义</strong>， 否则是空谈。</p>\n<p>成功有两种可能：<br />\n一、是已经打开了原有的文件或者目录；<br />\n二、是新建立了文件或者目录。</p>\n<p><code>Options</code>  里面带有 <code>FILE_DIRECTORY_FILE</code>  标记， 表示打开或者生成的对象必须是一个目录才能成功。如果在这个打开请求的<em>完成函数</em>中， 证实生成或者打开是成功的， 那么返回得到的文件确实应该是一个目录。</p>\n<p>如果这个操作失败， 那么就没有必要关心那个存在或者不存在的文件对象到底是文件还是目录了。因为操作失败了， 以后也不会再过滤它的后继操作了。所以，<strong>一般的做法是在生成（或者打开） 成功时捕获这个信息， 并记录在一个哈希表中</strong>。</p>\n<p><em>这时我们得写一个用来表示哈希表的数据结构。为了简便， 也可以简单地使用链表甚至数组，要注意保证操作时的多线程安全性</em>。</p>\n<p>我们这里要实现的功能，只是判断一个文件对象是否是目录。</p>\n<p>简单的设计： <strong>把所有认为是目录的文件对象放到一个集合里。 那么在以后的过滤中， 要判断一个文件对象是否是目录， 只要判断它是否在这个集合里即可</strong>。</p>\n<p>下面需要改动一下生成请求的完成函数。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>NTSTATUS  <span class=\"token function\">SfCreateCompletion</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tIN PDEVICE_OBJECT DeviceObject<span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tIN PIRP Irp<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t IN PVOID Context<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tPKEVENT event <span class=\"token operator\">=</span> Context<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tPIO</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token function\">UNREFERENCED_PARAMETER</span><span class=\"token punctuation\">(</span>DeviceObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token function\">ASSERT</span><span class=\"token punctuation\">(</span><span class=\"token function\">IS_MY_DEVICE_OBJECT</span><span class=\"token punctuation\">(</span>DeviceObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token function\">KeSetEvent</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">,</span> IO_NO_INCREMENT<span class=\"token punctuation\">,</span> FALSE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token keyword\">return</span> STATUS_MORE_PROCESSING_REQUIRED<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>现在所有的目录都被记录了。 当得到一个文件对象指针 <code>FileObject</code>  时， 可以判断这个  <code>FileObject</code>  在不在集合里， 如果在， 就说明是目录， 反之是文件。</p>\n<p>当这个 <code>FileObject</code>  被关闭时， 应该把它从集合中删除。 可以捕获主功能号为 <code>IRP_MJ_CLOSE</code>  的 IRP 来做这个工作。</p>\n<p>上面的方法是否可以精确地判断一个文件对象是否是目录呢？</p>\n<p>可以肯定的是， 在 <code>irpsp→Parameters.Create.Options &amp; FILE_DIRECTORY_FILE != 0</code>  的条件下， 如果一个文件对象被成功打开了， 那么这个文件对象一定是目录对象。</p>\n<p>笔者不能肯定的是， 在 <code>irpsp→Parameters.Create.Options &amp; FILE_DIRECTORY_FILE和irpsp→Parameters.Create.Options &amp; FILE_NONDIRECTORY_FILE</code>  均为 0 的情况下，Windows 是否有打开一个文件对象的可能， 而且打开后发现这个文件对象是一个目录。</p>\n<p>这一点只能请读者自己来调试验证了。</p>\n<h2 id=\"文件的删除\"><a class=\"anchor\" href=\"#文件的删除\">#</a> 文件的删除</h2>\n<p>文件是如何被删除的呢？（书中的代码里文件删除的过滤操作并没有实现）</p>\n<p>Windows 删除文件的步骤：</p>\n<p>第一步是发送一个请求打开文件， 打开文件时必须设置为有删除的访问权限； 如果打开失败， 则直接导致无法删除文件。<br />\n第二步是发出一个设置请求（主功能号是 <code>IRP_MJ_SET_INFORMATION</code> ），表示这个文件将被删除。<br />\n第三步是关闭文件， 关闭时文件将被系统删除。</p>\n<p>但是也存在不需要第二步就可能删除一个文件的情况。 一个典型的例子是， 一些临时文件在被打开时就已经被设置了 “关闭时删除”， 所以这些文件不需要再出现设置请求， 在关闭后就会被删除。一个文件被设置了 “关闭时删除” 属性之后， 这个文件在关闭之前依然存在， 但是对这个文件的大部分操作（比如写、 读、 查询等） 都会返回一个 “文件在删除中” 的错误。</p>\n<p>注意， 这里的 “删除” 并非把文件删除到回收站。 如果要测试删除， 操作时要按住 Shift 键彻底删除文件。</p>\n<p>把文件删除到回收站只是一种改名操作。改名操作是另一种设置操作（主功能号也是 <code>IRP_MJ_SET_INFORMATION</code> ， 但是 <code>IrpSp→Parameters.SetFile.FileInformationClass</code>  不同）。</p>\n<p>接下来学习如何判断是文件删除操作。</p>\n<p>注意两个关键点：</p>\n<p>第一是打开文件。</p>\n<p>在文件被打开时，捕获到 irpsp 的参数， 查阅 <code>irpsp→Parameters.Create</code>  的数据结构中， 第一域是一个 <code>IO_SECURITY_CONTEXT</code>  的指针 <code>SecurityContext</code> 。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>PIO_SECURITY_CONTEXT SecurityContext<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>其结构如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_IO_SECURITY_CONTEXT</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    PSECURITY_QUALITY_OF_SERVICE SecurityQos<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    PACCESS_STATE AccessState<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    ACCESS_MASK DesiredAccess<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    ULONG FullCreateOptions<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span> IO_SECURITY_CONTEXT<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>PIO_SECURITY_CONTEXT<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>注意其中的 <code>DesiredAccess</code> ， 必须设置 <code>DELETE</code>  位， 才有可能删除文件。</p>\n<p>第二是设置 “关闭时删除”。</p>\n<p>因为这是通过发送一个 IRP（ <code>IRP_MJ_SET_INFORMATION</code> ）来设置的。所以我们捕获的主功能号 <code>IRP_MJ_SET_INFORMATION</code>  的 IRP 后：首先，  <code>irpsp→Parameters.SetFile.FileInformationClass</code>  应该为 <code>FileDispositionInformation</code> 。然后，  <code>irp→AssociatedIrp.SystemBuffer</code>  指向如下的一个结构：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_FILE_DISPOSITION_INFORMATION</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    BOOLEAN DeleteFile<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span> FILE_DISPOSITION_INFORMATION<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>PFILE_DISPOSITION_INFORMATION<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>如果域 <code>DeleteFile</code>  为 <code>TRUE</code> ，那么这是一个删除文件的操作，文件将在这个文件对象关闭时被真正删除。</p>\n<p>知道了这些后就可以判断是否是文件删除操作了，进而去实现过滤操作。</p>\n<h1 id=\"路径过滤\"><a class=\"anchor\" href=\"#路径过滤\">#</a> 路径过滤</h1>\n<p>路径过滤是指根据文件的路径来决定是否要过滤这个文件。</p>\n<p>在文件系统过滤中，路径过滤是极其常见的需求。比较典型的有， 如果进行文件加密， 有时候客户会要求不加密某个目录下的文件；或者要求只加密某个目录下的文件。同样，在视频点播时，也可以把所有的流媒体文件都放在某些特定的目录下，则在文件过滤处理时就不用关心其他的文件了。</p>\n<h2 id=\"取得路径的三种情况\"><a class=\"anchor\" href=\"#取得路径的三种情况\">#</a> 取得路径的三种情况</h2>\n<p>现在的问题就是， 如何从 IRP 中（或者说如何从文件对象中） 得到这个文件的路径？</p>\n<p>取得文件的路径有三种情况：</p>\n<p>第一， 在文件打开之前， 从打开文件的请求中提取路径。 换句话说，这个文件并不一定真实存在， 只是在 Windows 试图打开（或者生成） 某个文件时， 从 <code>FileObject-&gt;FileName</code>  中提取文件路径。 后面会讨论这种方法的困难之处。</p>\n<p>第二， 在文件打开 IRP 处理结束后获取路径。是最容易解决的。</p>\n<p>第三， 在文件过滤其他 IRP 时（如改名、 查询、 设置、 读、 写） ， 得到文件对象所对应的文件路径。</p>\n<p>以上三种情况中的第一种情况最麻烦； 第二种情况最简单； 第三种情况则一般都按照前面提到过的常用做法： 把要关心路径的文件对象指针及其路径（在第二种情况下获得）都保存在哈希表中， 然后在第三种情况下直接查哈希表。 所以只要第二种情况的问题得到了解决， 在第三种情况下就可以轻松获得文件路径， 不需要再另想办法了。</p>\n<h2 id=\"打开成功后获取路径\"><a class=\"anchor\" href=\"#打开成功后获取路径\">#</a> 打开成功后获取路径</h2>\n<p>在文件打开 IRP 完成后，文件对象已经生成完成，我们可以使用  <code>ObQueryNameString</code>  函数。函数的原型如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>NTSTATUS</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">ObQueryNameString</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    IN PVOID Object<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    OUT POBJECT_NAME_INFORMATION ObjectNameInfo<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    IN ULONG Length<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    OUT PULONG ReturnLength</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>此例程处理对象名称信息的查询</p>\n<p><strong>参数：</strong></p>\n<p><code>Object</code> : 提供要查询的对象。</p>\n<p><code>ObjectNameInfo</code> : 提供缓冲区以存储返回的名称字符串信息。</p>\n<p><code>Length</code> : 指定原始对象名称信息缓冲区的长度（以字节为单位）。</p>\n<p><code>ReturnLength</code> : 返还 <code>ObjectNameInfo</code>  中已使用的字节数。</p>\n<p>（ <code>Length</code>  减去 <code>ReturnLength</code> ）实际上是输出缓冲区中剩余的字节数。提供给此调用的缓冲区实际上可能在原始用户缓冲区内偏移</p>\n<p>其中的 <code>ObjectNameInfo</code>  的结构如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_OBJECT_NAME_INFORMATION</span> <span class=\"token punctuation\">&#123;</span>               </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    UNICODE_STRING Name<span class=\"token punctuation\">;</span>                                </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span> OBJECT_NAME_INFORMATION<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>POBJECT_NAME_INFORMATION<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这个结构必须自己分配好内存， 而且它需要的长度取决于实际要返回的名字的长度。</p>\n<p>注意， 这里的 <code>Name</code>  是一个 <code>UNICODE_STRING</code> 。 我们知道实际的字符串内容会写入 <code>Name.Buffer</code>  中。但是要注意的是， 我们不要自己去分配 <code>Name.Buffer</code> ， <code>ObQueryNameString</code>  会自动把 <code>Name.Buffer</code>  设置为 <code>Name</code>  域之后紧接着的地址。<br />\n<strong>如果要使用这个函数获得正确的结果， 就必须传入一个长度足够的 <code>POBJECT_NAME_INFORMATION</code>  指针</strong>。</p>\n<p>如何预知需要多长的缓冲区呢？</p>\n<p>可以在第一次调用时， 使用一个预测的缓冲区长度，然后设置 <code>Length</code>  参数为缓冲区的长度。 如果成功，后面的操作就是多余的； 如果不成功，这个函数就会返回 <code>STATUS_INFO_LENGTH_MISMATCH</code> ， 并且在 <code>ReturnLength</code>  中得到实际需要的长度。</p>\n<p>该函数的正确调用方法示例如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 先猜测行地假设只需要 64 个字节长度的数据</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tUCHAR buf<span class=\"token punctuation\">[</span><span class=\"token number\">64</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tPUCHAR new_buf <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tULONG length <span class=\"token operator\">=</span> <span class=\"token number\">64</span><span class=\"token punctuation\">,</span> ret_length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tPOBJECT_NAME_INFORMATION name_infor <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>POBJECT_NAME_INFORMATION<span class=\"token punctuation\">)</span>buf<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tNTSTATUS status <span class=\"token operator\">=</span> STATUS_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token comment\">// 第一次调用，使用默认的长度</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tstatus <span class=\"token operator\">=</span> <span class=\"token function\">ObQueryNameString</span><span class=\"token punctuation\">(</span>pFileObj<span class=\"token punctuation\">,</span> name_infor<span class=\"token punctuation\">,</span> length<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>ret_length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>status <span class=\"token operator\">==</span> STATUS_INFO_LENGTH_MISMATCH<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t<span class=\"token comment\">// 第二次调用，重新分配长度</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\tnew_buf <span class=\"token operator\">=</span> <span class=\"token function\">ExAllocatePoolWithTag</span><span class=\"token punctuation\">(</span>NonPagedPool<span class=\"token punctuation\">,</span> ret_length<span class=\"token punctuation\">,</span> SFLT_POOL_TAG<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>new_buf <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t\t<span class=\"token comment\">// 内存不足，错误处理</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\tname_infor <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>POBJECT_NAME_INFORMATION<span class=\"token punctuation\">)</span>new_buf<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\tstatus <span class=\"token operator\">=</span> <span class=\"token function\">ObQueryNameString</span><span class=\"token punctuation\">(</span>pFileObj<span class=\"token punctuation\">,</span> name_infor<span class=\"token punctuation\">,</span> ret_length<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>ret_length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t<span class=\"token comment\">// 如果 status 为 STATUS_SUCCESS，那么 name_infor->Name 就是要获得的名字了。</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t<span class=\"token comment\">// 这里可以加入自己的处理</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t<span class=\"token comment\">// ……</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>new_buf <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t<span class=\"token function\">ExFreePoolWithTag</span><span class=\"token punctuation\">(</span>new_buf<span class=\"token punctuation\">,</span> SFLT_POOL_TAG<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>若对一个叫作 <code>MyFile.Name</code>  的文件使用上面的方法， 则返回的路径可能是 <code>“\\Device\\HardDisk- Volume1\\MyDirectory\\MyFile.Name”</code> 。</p>\n<p>这里再次强调一下， 必须在文件打开 IRP 完成之后再进行调用。 如果直接在 <code>SfCreate</code>  函数的早期进行调用， 则只能得到一个路径：  <code>“\\Device\\HardDiskVolume1”</code> 。这个路径不完整， 只能看到卷设备路径。通过卷设备路径可以获得盘符， 可以确定文件在哪个逻辑盘上。 但无法得知文件的具体路径。</p>\n<p>可能有些读者会联想到， 既然通过  <code>QbQueryNameString</code>  就可以获得路径， 那么在其他请求的过滤中， 直接对文件对象调用  <code>QbQueryNameString</code>  就行了。但是需要注意的是，  <code>ObQueryNameString</code>  只能在打开（ <code>IRP_MJ_CREATE</code> ） IRP 和清理（ <code>IRP_MJ_CLEANUP</code> ） 或者关闭（ <code>IRP_MJ_CLOSE</code> ） IRP 的处理中使用； 否则很容易锁死， 原因不明。（有时间逆一下 QbQueryNameString 函数看一下）。</p>\n<h2 id=\"在其他时刻获得文件路径\"><a class=\"anchor\" href=\"#在其他时刻获得文件路径\">#</a> 在其他时刻获得文件路径</h2>\n<p>在文件过滤其他请求时（如改名、 查询、 设置、 读、 写） ， 如何获得文件对象所对应的文件路径呢？</p>\n<p>在文件读 / 写时往往没有好的办法可以直接得到文件路径。 对文件对象进行 ObQueryNameString 很容易导致死机， 这似乎是 Windows 本身的问题。 但是如果读者可以直接向下层设备发送 IRP 进行查询， 就不会死机。 发送一个主功能号为 IRP_MJ_QUERY_INFORMATION 的代码还算比较简单， 可以在网上找到例子。 但是， 这并非是有文档可查、 合理的方法， 因为微软并没有公开每个请求的 IRP 如何填写， 许多细节是一些开发者自己调试出来的， 所以未来难保在兼容性上不出现问题。</p>\n<p>有些读者会发现 <code>FileObject-&gt;FileName</code>  是存在的， 并且保存着这个文件在设备上的路径（不包括盘符） 。 但是遗憾的是， 微软的文档已经声明， 任何过滤层都可以修改 <code>FileObject-&gt;FileName</code> 。 在文件成功打开之后， 就不能再认为 <code>FileObject-&gt;FileName</code>  依然有效了（虽然实际在大多数情况下是有效的） 。 此外，  <code>FileObject-&gt;FileName</code>  还存在一些其他的问题， 将在下一节中进行少量说明。</p>\n<p>既然前面在文件对象的生成请求处理结束后已经得到了路径， 那么就可以把它存在一个表中， 当 FileObject 被关闭时清除这个表项以避免内存泄露。 然后无论是读、 写、 查询、 设置还是重命名（设置的一种） ， 我们都可以通过这个表来查询路径。</p>\n<p>应该用哈希表来提高效率。 哈希表是数据结构问题， 请读者自己实现。 这个表的使用方法简述如下：</p>\n<p>（1） 在 <code>SfCreate</code>  中， 获得 <code>FileObject</code>  的文件路径（用前面的方法） ， 并把 <code>FileObject</code>  指针和路径的对应关系保存在一个哈希表中。<br />\n（2） 在任何时候都可以在表中查询到一个 <code>FileObject</code>  对应的路径， 不必担心重入和中断级别等问题。<br />\n（3） 在 <code>SfCleanUp</code>  中删去该 <code>FileObject</code>  对应的节点。</p>\n<h2 id=\"在打开请求完成之前获得路径名\"><a class=\"anchor\" href=\"#在打开请求完成之前获得路径名\">#</a> 在打开请求完成之前获得路径名</h2>\n<p>最后一个问题是， 如何在打开 IRP（ <code>IRP_MJ_CREATE</code> ） 处理之前得到路径名？</p>\n<p>唯一的途径是使用 <code>FileObject-&gt;FileName</code> 。 要注意 <code>FileObject→ReleatedObject</code>  不为空的情况， 这时 <code>FileObject-&gt;FileName</code>  是 <code>RelatedObject</code>  的相对路径（ <code>RelatedObject</code>  一般是一个目录）。</p>\n<p>首先要调用内核 API 函数 <code>ObQueryNameString</code>  来查询这个对象的全路径，得到路径之后再和 <code>FileObject-&gt;FileName</code>  组合， 在组合时还要注意， 中间是否需要插入一个 <code>“\\”</code> （根据前后是否已经有 <code>“\\”</code>  存在来决定）。</p>\n<p>相关的代码如下。 请注意， 这个函数能获得的路径是从 <code>FileObject-&gt;FileName</code>  中获得的， 有一个问题就是其中可能含有短名。 如果一定要获得长名， 则需要按照下一节中的方法进行特殊处理。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MEM_TAG</span> <span class=\"token string\">'mymt'</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 在 Create 之前，获得完整的路径</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>ULONG <span class=\"token function\">MyFileFullPathPreCreate</span><span class=\"token punctuation\">(</span>IN PFILE_OBJECT pFileObj<span class=\"token punctuation\">,</span> OUT PUNICODE_STRING path<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tNTSTATUS status<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tPOBJECT_NAME_INFORMATION obj_name_info <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tWCHAR buf<span class=\"token punctuation\">[</span><span class=\"token number\">64</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">void</span><span class=\"token operator\">*</span> obj_ptr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tULONG length <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tBOOLEAN need_split <span class=\"token operator\">=</span> FALSE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token function\">ASSERT</span><span class=\"token punctuation\">(</span>pFileObj <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pFileObj <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pFileObj<span class=\"token operator\">-></span>FileName<span class=\"token punctuation\">.</span>Buffer <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\tobj_name_info <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>POBJECT_NAME_INFORMATION<span class=\"token punctuation\">)</span>buf<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t<span class=\"token comment\">// 获取 FileName 前面的部分（设备路径或者根目录路径）</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pFileObj<span class=\"token operator\">-></span>RelatedFileObject <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t\tobj_ptr <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>pFileObj<span class=\"token operator\">-></span>RelatedFileObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\t\tobj_ptr <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>pFileObj<span class=\"token operator\">-></span>DeviceObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\tstatus <span class=\"token operator\">=</span> <span class=\"token function\">ObQueryNameString</span><span class=\"token punctuation\">(</span>obj_ptr<span class=\"token punctuation\">,</span> obj_name_info<span class=\"token punctuation\">,</span> <span class=\"token number\">64</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>WCHAR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>status <span class=\"token operator\">==</span> STATUS_INFO_LENGTH_MISMATCH<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\t\tobj_name_info <span class=\"token operator\">=</span> <span class=\"token function\">ExAllocatePoolWithTag</span><span class=\"token punctuation\">(</span>NonPagedPool<span class=\"token punctuation\">,</span> length<span class=\"token punctuation\">,</span> MEM_TAG<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>obj_name_info <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">return</span> STATUS_INSUFFICIENT_RESOURCES<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\t\t<span class=\"token function\">RtlZeroMemory</span><span class=\"token punctuation\">(</span>obj_name_info<span class=\"token punctuation\">,</span> length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\t\tstatus <span class=\"token operator\">=</span> <span class=\"token function\">ObQueryNameString</span><span class=\"token punctuation\">(</span>obj_ptr<span class=\"token punctuation\">,</span> obj_name_info<span class=\"token punctuation\">,</span> length<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t\t<span class=\"token comment\">//  若失败直接跳出即可</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">NT_SUCCESS</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t\t<span class=\"token comment\">/* </pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t\t判断二者之间是否需要多加一个 \"\\\" </pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t\t若 FileName 的第一个字符不是 \"\\\" 且 obj_name_info 的最后一个字符不是 \"\\\" 则加入 \"\\\"</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t\t*/</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t\t\tpFileObj<span class=\"token operator\">-></span>FileName<span class=\"token punctuation\">.</span>Length <span class=\"token operator\">></span> <span class=\"token number\">2</span> <span class=\"token operator\">&amp;&amp;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t\t\tpFileObj<span class=\"token operator\">-></span>FileName<span class=\"token punctuation\">.</span>Buffer<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> L<span class=\"token string\">\"\\\\\"</span> <span class=\"token operator\">&amp;&amp;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t\t\tobj_name_info<span class=\"token operator\">-></span>Name<span class=\"token punctuation\">.</span>Buffer<span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t\t\t\tobj_name_info<span class=\"token operator\">-></span>Name<span class=\"token punctuation\">.</span>Length <span class=\"token operator\">/</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>WCHAR<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> L<span class=\"token string\">\"\\\\\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t\t\tneed_split <span class=\"token operator\">=</span> TRUE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"68\"></td><td><pre>\t\t<span class=\"token comment\">// 获取总体名字的长度。如果长度不足，直接返回</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\t\tlength <span class=\"token operator\">=</span> obj_name_info<span class=\"token operator\">-></span>Name<span class=\"token punctuation\">.</span>Length <span class=\"token operator\">+</span> pFileObj<span class=\"token operator\">-></span>FileName<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>need_split<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\t\t\tlength <span class=\"token operator\">+=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>WCHAR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>path<span class=\"token operator\">-></span>MaximumLength <span class=\"token operator\">&lt;</span> length<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"79\"></td><td><pre>\t\t<span class=\"token comment\">// 先把设备名拷贝进去</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>\t\t<span class=\"token function\">RtlCopyUnicodeString</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>obj_name_info<span class=\"token operator\">-></span>Name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>need_split<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>\t\t\t<span class=\"token comment\">// 追加一个 \"\\\"</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>\t\t\t<span class=\"token function\">RtlAppendUnicodeStringToString</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> L<span class=\"token string\">\"\\\\\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>\t\t<span class=\"token comment\">// 然后追加 FileName</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>\t\t<span class=\"token function\">RtlAppendUnicodeStringToString</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>pFileObj<span class=\"token operator\">-></span>FileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>\t<span class=\"token comment\">// 如果分配过空间就释放掉</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>obj_name_info <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>buf<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>\t\t<span class=\"token function\">ExFreePoolWithTag</span><span class=\"token punctuation\">(</span>obj_name_info<span class=\"token punctuation\">,</span> MEM_TAG<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>\t<span class=\"token keyword\">return</span> length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"把短名转换为长名\"><a class=\"anchor\" href=\"#把短名转换为长名\">#</a> 把短名转换为长名</h2>\n<p>在早期的 DOS 系统上， 文件名最长为 8 个字符， 扩展名最长为 3 个字符， 所以， 如果 Windows 上的文件名超过 8 个字符， Windows 就会为它分配一个短名， 例如文件名 <code>123456789.123</code>  会变成 <code>123456～1.123</code> 。当然， 也有保存为长名的。 在 <code>FileObject-&gt;FileName</code>  中保存的文件名不一定是长名， 也有可能是短名。 一旦碰到， 你想要获得完整的文件长名就比较麻烦了。 笔者没有找到将这些短名转换为长名的简易方法， 有人提供了一个非常麻烦但是确实有效的办法， 其思想是：</p>\n<p>首先假设得到一个路径 <code>\\aaaaaa~1\\bbbbbb~1\\cccccc~1\\dddddd~1.txt</code> ， 然后把它分解成 5 个对象：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>\\</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>aaaaaa~1</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>bbbbbb~1</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>cccccc~1</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>dddddd~1.txt</pre></td></tr></table></figure><p>先用 ZwCreateFile 打开第一个目录， 第一个目录总是 “\\”（不需要长短转换） ， 然后调用 <code>ZwQueryDirectoryFile</code>  枚举下面所有的文件和目录。 如果进行查询（令查询类别为 FileIdBoth- DirectoryInformation） ， 那么会得到一组 <code>FILE_ID_BOTH_DIR_INFORMATION</code> ， 代表下面的每个文件和目录。 得到的 <code>FILE_ID_BOTH_DIR_INFORMATION</code>  结构如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_FILE_ID_BOTH_DIR_INFORMATION</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    ULONG NextEntryOffset<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    ULONG FileIndex<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    LARGE_INTEGER CreationTime<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    LARGE_INTEGER LastAccessTime<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    LARGE_INTEGER LastWriteTime<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    LARGE_INTEGER ChangeTime<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    LARGE_INTEGER EndOfFile<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    LARGE_INTEGER AllocationSize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    ULONG FileAttributes<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    ULONG FileNameLength<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    ULONG EaSize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    CCHAR ShortNameLength<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    WCHAR ShortName<span class=\"token punctuation\">[</span><span class=\"token number\">12</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 这里有短名</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    LARGE_INTEGER FileId<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    WCHAR FileName<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 这里有长名</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span> FILE_ID_BOTH_DIR_INFORMATION<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>PFILE_ID_BOTH_DIR_INFORMATION<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>长、 短名都到手了， 那么编程者当然可以找到 “\\” 之下的第一个 “aaaaaa~1” 所对应的长名， 然后依此类推， 逐个查询。 这是个麻烦的办法， 但是确实有效。</p>\n<p>此代码书中并没有给需要我们自己完成它。</p>\n",
            "tags": [
                "文件系统"
            ]
        }
    ]
}