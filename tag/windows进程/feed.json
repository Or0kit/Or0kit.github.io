{
    "version": "https://jsonfeed.org/version/1",
    "title": "Or0kit • All posts by \"windows进程\" tag",
    "description": "临渊羡鱼，不如退而结网",
    "home_page_url": "https://Or0kit.github.io",
    "items": [
        {
            "id": "https://or0kit.github.io/Bin/Win32/Win%E8%BF%9B%E7%A8%8B%E3%80%81%E5%8F%A5%E6%9F%84%E8%A1%A8/",
            "url": "https://or0kit.github.io/Bin/Win32/Win%E8%BF%9B%E7%A8%8B%E3%80%81%E5%8F%A5%E6%9F%84%E8%A1%A8/",
            "title": "Win进程、句柄表",
            "date_published": "2021-05-20T15:14:28.000Z",
            "content_html": "<h1 id=\"进程\"><a class=\"anchor\" href=\"#进程\">#</a> 进程</h1>\n<h2 id=\"进程是什么\"><a class=\"anchor\" href=\"#进程是什么\">#</a> 进程是什么</h2>\n<p>进程提供程序所需的资源，如：数据、代码等等。</p>\n<h2 id=\"进程内存空间的地址划分\"><a class=\"anchor\" href=\"#进程内存空间的地址划分\">#</a> 进程内存空间的地址划分</h2>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<h2 id=\"进程的创建\"><a class=\"anchor\" href=\"#进程的创建\">#</a> 进程的创建</h2>\n<ol>\n<li>任何进程都是别的进程创建的: CreateProcess ()</li>\n<li>进程的创建过程\n<ol>\n<li>映射 EXE 文件</li>\n<li>创建内核对象 EPROCESS</li>\n<li>映射系统 DLL (ntdll.dIl)</li>\n<li>创建线程内核对象 ETHREAD</li>\n<li>系统启动线程\n<ul>\n<li>映射 DLL (ntll.Ldrlnitialize Thunk)</li>\n<li>线程开始执行</li>\n</ul>\n</li>\n</ol>\n</li>\n</ol>\n<p>在这个进程的创建过程中是可以动手脚的。</p>\n<h2 id=\"创建进程\"><a class=\"anchor\" href=\"#创建进程\">#</a> 创建进程</h2>\n<p>进程的创建：</p>\n<h3 id=\"createprocess函数\"><a class=\"anchor\" href=\"#createprocess函数\">#</a> CreateProcess 函数</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>BOOL <span class=\"token function\">CreateProcess</span><span class=\"token punctuation\">(</span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>　LPCTSTR lpApplicationName<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 应用程序名称  </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>　LPTSTR lpCommandLine<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 命令行字符串  </span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>　LPSECURITY_ATTRIBUTES lpProcessAttributes<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 进程的安全属性  </span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>　LPSECURITY_ATTRIBUTES lpThreadAttributes<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 线程的安全属性  </span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>　BOOL bInheritHandles<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 是否继承父进程的属性  </span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>　DWORD dwCreationFlags<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 创建标志  </span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>　LPVOID lpEnvironment<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 指向新的环境块的指针  </span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>　LPCTSTR lpCurrentDirectory<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 指向当前目录名的指针  </span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>　LPSTARTUPINFO lpStartupInfo<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 传递给新进程的信息  </span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>　LPPROCESS_INFORMATION lpProcessInformation <span class=\"token comment\">// 新进程返回的信息  </span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">// 在 processthreadsapi.h 中为</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>WINBASEAPI</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>BOOL</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>WINAPI</pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token function\">CreateProcessA</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    _In_opt_ LPCSTR lpApplicationName<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    _Inout_opt_ LPSTR lpCommandLine<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    _In_opt_ LPSECURITY_ATTRIBUTES lpProcessAttributes<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    _In_opt_ LPSECURITY_ATTRIBUTES lpThreadAttributes<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    _In_ BOOL bInheritHandles<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    _In_ DWORD dwCreationFlags<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    _In_opt_ LPVOID lpEnvironment<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    _In_opt_ LPCSTR lpCurrentDirectory<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    _In_ LPSTARTUPINFOA lpStartupInfo<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    _Out_ LPPROCESS_INFORMATION lpProcessInformation</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>WINBASEAPI</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>BOOL</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>WINAPI</pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token function\">CreateProcessW</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    _In_opt_ LPCWSTR lpApplicationName<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    _Inout_opt_ LPWSTR lpCommandLine<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    _In_opt_ LPSECURITY_ATTRIBUTES lpProcessAttributes<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    _In_opt_ LPSECURITY_ATTRIBUTES lpThreadAttributes<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    _In_ BOOL bInheritHandles<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    _In_ DWORD dwCreationFlags<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    _In_opt_ LPVOID lpEnvironment<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    _In_opt_ LPCWSTR lpCurrentDirectory<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    _In_ LPSTARTUPINFOW lpStartupInfo<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    _Out_ LPPROCESS_INFORMATION lpProcessInformation</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><code>CreateProcess</code>  函数详细参见百科<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS9DcmVhdGVQcm9jZXNzLzExMDUwNDE5\"> https://baike.baidu.com/item/CreateProcess/11050419</span></p>\n<h3 id=\"startupinfo结构体\"><a class=\"anchor\" href=\"#startupinfo结构体\">#</a> STARTUPINFO 结构体</h3>\n<p><code>LPSTARTUPINFO</code>  是一个结构体指针，指向 <code>STARTUPINFO</code> ， <code>STARTUPINFO</code>  结构体如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_STARTUPINFOW</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    DWORD   cb<span class=\"token punctuation\">;</span>                 <span class=\"token comment\">// 指定该结构大小 </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    LPWSTR  lpReserved<span class=\"token punctuation\">;</span>         <span class=\"token comment\">// 保留，置为 NULL</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    LPWSTR  lpDesktop<span class=\"token punctuation\">;</span>          <span class=\"token comment\">// 指定一个字符串，包括该进程的桌面或窗口位置名</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    LPWSTR  lpTitle<span class=\"token punctuation\">;</span>            <span class=\"token comment\">// 指定控制台进程创建的新控制台窗口标题</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    DWORD   dwX<span class=\"token punctuation\">;</span>                <span class=\"token comment\">// 指定新窗口左上角的 x 和 y 偏移量（以像素为单位）</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    DWORD   dwY<span class=\"token punctuation\">;</span>                <span class=\"token comment\">//……</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    DWORD   dwXSize<span class=\"token punctuation\">;</span>            <span class=\"token comment\">// 指定新窗口的宽度和高度</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    DWORD   dwYSize<span class=\"token punctuation\">;</span>            <span class=\"token comment\">//……</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    DWORD   dwXCountChars<span class=\"token punctuation\">;</span>      <span class=\"token comment\">// 指定新窗口的屏幕缓存区的宽度和高度</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    DWORD   dwYCountChars<span class=\"token punctuation\">;</span>      <span class=\"token comment\">//……</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    DWORD   dwFillAttribute<span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 指定新窗口的初始化文字和背景颜色</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    DWORD   dwFlags<span class=\"token punctuation\">;</span>            <span class=\"token comment\">// 创建窗口标志</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    WORD    wShowWindow<span class=\"token punctuation\">;</span>        <span class=\"token comment\">// 新窗口的显示状态</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    WORD    cbReserved2<span class=\"token punctuation\">;</span>        <span class=\"token comment\">// 保留，必须置为 0</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    LPBYTE  lpReserved2<span class=\"token punctuation\">;</span>        <span class=\"token comment\">// 保留，必须置为 NULL</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    HANDLE  hStdInput<span class=\"token punctuation\">;</span>          <span class=\"token comment\">// 指定一个句柄，该句柄用作进程的标准输入句柄</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    HANDLE  hStdOutput<span class=\"token punctuation\">;</span>         <span class=\"token comment\">// 指定一个句柄，该句柄用作进程的标准输出句柄</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    HANDLE  hStdError<span class=\"token punctuation\">;</span>          <span class=\"token comment\">// 指定一个句柄，该句柄用作进程的标准错误句柄</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span> STARTUPINFOW<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span> LPSTARTUPINFOW<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_STARTUPINFOA</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    DWORD   cb<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    LPSTR   lpReserved<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    LPSTR   lpDesktop<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    LPSTR   lpTitle<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    DWORD   dwX<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    DWORD   dwY<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    DWORD   dwXSize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    DWORD   dwYSize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    DWORD   dwXCountChars<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    DWORD   dwYCountChars<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    DWORD   dwFillAttribute<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    DWORD   dwFlags<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    WORD    wShowWindow<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    WORD    cbReserved2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    LPBYTE  lpReserved2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    HANDLE  hStdInput<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    HANDLE  hStdOutput<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    HANDLE  hStdError<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">&#125;</span> STARTUPINFOA<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span> LPSTARTUPINFOA<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"process_information结构体\"><a class=\"anchor\" href=\"#process_information结构体\">#</a> PROCESS_INFORMATION 结构体</h3>\n<p><code>LPPROCESS_INFORMATION</code>  也是一个结构体指针，指向 <code>PROCESS_INFORMATION</code> , <code>PROCESS_INFORMATION</code>  结构体如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_PROCESS_INFORMATION</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    HANDLE hProcess<span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 进程句柄</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    HANDLE hThread<span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 线程句柄</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    DWORD dwProcessId<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 进程 ID    </span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    DWORD dwThreadId<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 线程 ID    </span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span> PROCESS_INFORMATION<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span> PPROCESS_INFORMATION<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span> LPPROCESS_INFORMATION<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>打开 Chrome 浏览器，并打开指定网页</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;Windows.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">//*********************************//</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 父进程填充的信息</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">//***************** 可以用在调试与反调试对抗 *************</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 返回值：void</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">//*********************************//</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">AntiDebug</span><span class=\"token punctuation\">(</span>LPSTARTUPINFO si<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">//STARTUPINFO si;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">//GetStartupInfo(&amp;si);</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"结构大小：%#X\\n\"</span><span class=\"token punctuation\">,</span> si<span class=\"token operator\">-></span>cb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%#X\\n\"</span><span class=\"token punctuation\">,</span> si<span class=\"token operator\">-></span>dwFlags<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%#X\\n\"</span><span class=\"token punctuation\">,</span> si<span class=\"token operator\">-></span>lpDesktop<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%#X\\n\"</span><span class=\"token punctuation\">,</span> si<span class=\"token operator\">-></span>lpReserved<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%#X\\n\"</span><span class=\"token punctuation\">,</span> si<span class=\"token operator\">-></span>cbReserved2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%#X\\n\"</span><span class=\"token punctuation\">,</span> si<span class=\"token operator\">-></span>dwFillAttribute<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%#X\\n\"</span><span class=\"token punctuation\">,</span> si<span class=\"token operator\">-></span>dwX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%#X\\n\"</span><span class=\"token punctuation\">,</span> si<span class=\"token operator\">-></span>dwY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%#X\\n\"</span><span class=\"token punctuation\">,</span> si<span class=\"token operator\">-></span>wShowWindow<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"新控制台窗口标题：%p\\n\"</span><span class=\"token punctuation\">,</span> si<span class=\"token operator\">-></span>lpTitle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">//*********************************//</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">// 子进程返回的信息</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\">// 返回值：void</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">//*********************************//</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">ReturnInfo</span><span class=\"token punctuation\">(</span>PPROCESS_INFORMATION pi<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"进程句柄：%p\\n\"</span><span class=\"token punctuation\">,</span> pi<span class=\"token operator\">-></span>hProcess<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"线程句柄：%p\\n\"</span><span class=\"token punctuation\">,</span> pi<span class=\"token operator\">-></span>hThread<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"进程ID：%#X\\n\"</span><span class=\"token punctuation\">,</span> pi<span class=\"token operator\">-></span>dwProcessId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"线程ID：%#X\\n\"</span><span class=\"token punctuation\">,</span> pi<span class=\"token operator\">-></span>dwThreadId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token comment\">//*********************************//</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token comment\">// 创建子进程</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token comment\">// 返回值：BOOL 成功与失败</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token comment\">//*********************************//</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>BOOL <span class=\"token function\">CreateChildProcess</span><span class=\"token punctuation\">(</span>PTCHAR szChildProcessName<span class=\"token punctuation\">,</span> PTCHAR szCommandLine<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    STARTUPINFO si<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    PROCESS_INFORMATION pi<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token function\">ZeroMemory</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>si<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>si<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token function\">ZeroMemory</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>pi<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>pi<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    si<span class=\"token punctuation\">.</span>cb <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>si<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">CreateProcess</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        szChildProcessName<span class=\"token punctuation\">,</span>     <span class=\"token comment\">// 对象名称（全路径名）</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        szCommandLine<span class=\"token punctuation\">,</span>          <span class=\"token comment\">// 命令行</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span>                   <span class=\"token comment\">// 不继承进程句柄</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span>                   <span class=\"token comment\">// 不继承线程句柄</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        FALSE<span class=\"token punctuation\">,</span>                  <span class=\"token comment\">// 不继承句柄</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>                      <span class=\"token comment\">// 没有创建标志</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span>                   <span class=\"token comment\">// 使用父进程环境变量</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span>                   <span class=\"token comment\">// 使用父进程目录作为当前目录，可以自己设置目录</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        <span class=\"token operator\">&amp;</span>si<span class=\"token punctuation\">,</span>                    <span class=\"token comment\">//STARTUPINFO 结构体详细信息</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token operator\">&amp;</span>pi<span class=\"token punctuation\">)</span>                    <span class=\"token comment\">//PROCESS_INFORMATION 结构体详细信息</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span>   <span class=\"token comment\">// 返回最近的错误代码值</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"CreateChildProcess Error:%d \\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">GetLastError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token keyword\">return</span> FALSE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    <span class=\"token comment\">// 查看父进程填充的信息</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    <span class=\"token function\">AntiDebug</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>si<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token comment\">// 查看子进程返回的信息</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    <span class=\"token function\">ReturnInfo</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>pi<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    <span class=\"token comment\">// 释放句柄</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    <span class=\"token function\">CloseHandle</span><span class=\"token punctuation\">(</span>pi<span class=\"token punctuation\">.</span>hProcess<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    <span class=\"token function\">CloseHandle</span><span class=\"token punctuation\">(</span>pi<span class=\"token punctuation\">.</span>hThread<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    <span class=\"token keyword\">return</span> TRUE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre></pre></td></tr><tr><td data-num=\"75\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>    TCHAR szApplicationName<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">TEXT</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"C:\\\\Program Files (x86)\\\\Google\\\\Chrome\\\\Application\\\\chrome.exe\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>    TCHAR szCmdline<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">TEXT</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\\\ http://www.baidu.com\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 打开百度</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    <span class=\"token function\">CreateChildProcess</span><span class=\"token punctuation\">(</span>szApplicationName<span class=\"token punctuation\">,</span> szCmdline<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>学习 <code>CreateProcess</code>  里的 <code>PPROCESS_INFORMATION</code>  时里面有进程和线程句柄、ID，那这是什么呢？这就要学习句柄表了</p>\n<h1 id=\"句柄表\"><a class=\"anchor\" href=\"#句柄表\">#</a> 句柄表</h1>\n<h2 id=\"什么是内核对象\"><a class=\"anchor\" href=\"#什么是内核对象\">#</a> 什么是内核对象</h2>\n<p>像进程、线程、文件、互斥体、事件等在内核都有一个对应的结构体，这些结构体由内核负责管理。我们管这样的对象叫做内核对象。</p>\n<p><img data-src=\"image002.png\" alt=\"\" /></p>\n<h2 id=\"如何管理内核对象\"><a class=\"anchor\" href=\"#如何管理内核对象\">#</a> 如何管理内核对象</h2>\n<p><img data-src=\"image003.png\" alt=\"\" /></p>\n<p>不能和常规的结构体一样，把内核结构体的地址传给用户层使其操作。这样就会出现问题，若是用户把访问地址更改了，就会找不到内核结构体了，出现内存地址访问错误，一般内存地址访问错误会出现 0x0000 的报错，但内核地址访问错误就直接蓝屏了。</p>\n<h2 id=\"每一个进程都有一个句柄表\"><a class=\"anchor\" href=\"#每一个进程都有一个句柄表\">#</a> 每一个进程都有一个句柄表</h2>\n<p>不是每个内核对象都有表。</p>\n<p><img data-src=\"image004.png\" alt=\"\" /></p>\n<p>映射关系，不让用户直接访问。</p>\n<p>创建一个对象，想对它做任何事情必须通过句柄来实现。</p>\n<p><span class=\"label info\">句柄，句柄表概念</span></p>\n<p>任意进程，只要每打开一个对象，就会获得一个句柄，这个句柄用来标志对某个对象的一次打开，通过句柄，可以直接找到对应的内核对象。句柄本身是进程的句柄表中的一个结构体，用来描述一次打开操作。句柄值则可以简单看做句柄表中的索引，并不影响理解。HANDLE 的值可以简单的看做一个整形索引值。</p>\n<h2 id=\"多进程共享一个内核对象\"><a class=\"anchor\" href=\"#多进程共享一个内核对象\">#</a> 多进程共享一个内核对象</h2>\n<p><img data-src=\"image005.png\" alt=\"\" /></p>\n<p>当调用 <code>CloseHandle()</code>  函数成功后，相关的内核对象的引用计数被减 1。它并没有真正的关闭内核对象，只是将计数减 1，也就是说，这个时候，如果这个内核对象的引用计数不为 0 的话，内核对象依然存在，如果你有办法找到他，那么你依然可以操作他。</p>\n<p>以下两种情况，内核对象会被删除 -- 系统回收：</p>\n<ul>\n<li>当内核对象的引用计数为 0 的时候</li>\n<li>进程结束后</li>\n</ul>\n<h2 id=\"句柄是否可以被继承\"><a class=\"anchor\" href=\"#句柄是否可以被继承\">#</a> 句柄是否可以被继承</h2>\n<p><span id=\"006\">图</span></p>\n<p><img data-src=\"image006.png\" alt=\"\" /></p>\n<p>内核对象都有一个 <code>LPSECURITY_ATTRIBUTES</code>  这种类型的参数：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_SECURITY_ATTRIBUTES</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    DWORD nLength<span class=\"token punctuation\">;</span>                  <span class=\"token comment\">// 当前结构体的大小</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    LPVOID lpSecurityDescriptor<span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 指向一个对象的安全描述符 该安全描述符控制对象的共享 如果为ＮＵＬＬ　则该对象使用调用进程的默认安全描述符 </span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    BOOL bInheritHandle<span class=\"token punctuation\">;</span>            <span class=\"token comment\">// 是否被继承</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span> SECURITY_ATTRIBUTES<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>PSECURITY_ATTRIBUTES<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>LPSECURITY_ATTRIBUTES<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>若是不希望被继承，此参数填成 <code>NULL</code>  就行，若想让其继承则还需创建一个这样的结构体传递给此参数。</p>\n<p><span id=\"007\"></span></p>\n<p><img data-src=\"image007.png\" alt=\"\" /></p>\n<h2 id=\"共享内核\"><a class=\"anchor\" href=\"#共享内核\">#</a> 共享内核</h2>\n<p>学了上面内容我们就知道两种共享内核的解决方式了。</p>\n<ul>\n<li>平行进程间，<a href=\"#006\">如图</a>可以一个创建一个打开。</li>\n<li>父子进程间，可以使用<a href=\"#007\">继承</a></li>\n</ul>\n<h1 id=\"进程相关的\"><a class=\"anchor\" href=\"#进程相关的\">#</a> 进程相关的</h1>\n<h2 id=\"id与句柄\"><a class=\"anchor\" href=\"#id与句柄\">#</a> ID 与句柄</h2>\n<p>每个进程有自己的句柄表，而操作系统也有自己的句柄表，里面至少包含了所有正在运行的进程和线程，和进程的句柄表没有太大的区别。</p>\n<p>ID 也叫 PID，是全局变量中的值，所有进程都认识。</p>\n<p>全局句柄表</p>\n<p><img data-src=\"image008.png\" alt=\"\" /></p>\n<h2 id=\"以挂起的形式创建进程\"><a class=\"anchor\" href=\"#以挂起的形式创建进程\">#</a> 以挂起的形式创建进程</h2>\n<p>如果以 <code>CREATE_SUSPENDED</code>  以挂起的方式创建进程，系统只会分配 4G 空间，而不会执行拉伸等后续操作，此时可以就可以对这个空间做一些你懂的事情。</p>\n<p>那么其进程创建的过程为：</p>\n<ol>\n<li>任何进程都是别的进程创建的: CreateProcess ()</li>\n<li>进程的创建过程\n<ol>\n<li>映射 EXE 文件</li>\n<li>创建内核对象 EPROCESS</li>\n<li>映射系统 DLL (ntdll.dIl)</li>\n<li>创建线程内核对象 ETHREAD</li>\n<li>如果是挂起的方式创建的，恢复以后再继续执行。</li>\n<li>系统启动线程\n<ul>\n<li>映射 DLL (ntll.Ldrlnitialize Thunk)</li>\n<li>线程开始执行</li>\n</ul>\n</li>\n</ol>\n</li>\n</ol>\n<p>代码</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;Windows.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">//*********************************//</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 子进程返回的信息</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 返回值：void</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">//*********************************//</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">ReturnInfo</span><span class=\"token punctuation\">(</span>PPROCESS_INFORMATION pi<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"进程句柄：%p\\n\"</span><span class=\"token punctuation\">,</span> pi<span class=\"token operator\">-></span>hProcess<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"线程句柄：%p\\n\"</span><span class=\"token punctuation\">,</span> pi<span class=\"token operator\">-></span>hThread<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"进程ID：%#X\\n\"</span><span class=\"token punctuation\">,</span> pi<span class=\"token operator\">-></span>dwProcessId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"线程ID：%#X\\n\"</span><span class=\"token punctuation\">,</span> pi<span class=\"token operator\">-></span>dwThreadId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">//*********************************//</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">// 创建子进程</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">// 返回值：BOOL 成功与失败</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">//*********************************//</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>BOOL <span class=\"token function\">CreateChildProcess</span><span class=\"token punctuation\">(</span>PTCHAR szChildProcessName<span class=\"token punctuation\">,</span> PTCHAR szCommandLine<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    STARTUPINFO si<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    PROCESS_INFORMATION pi<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token function\">ZeroMemory</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>si<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>si<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token function\">ZeroMemory</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>pi<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>pi<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    si<span class=\"token punctuation\">.</span>cb <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>si<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    SECURITY_ATTRIBUTES sa<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token function\">ZeroMemory</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>sa<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>sa<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    sa<span class=\"token punctuation\">.</span>nLength <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>sa<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    sa<span class=\"token punctuation\">.</span>lpSecurityDescriptor <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    sa<span class=\"token punctuation\">.</span>bInheritHandle <span class=\"token operator\">=</span> TRUE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">CreateProcess</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        szChildProcessName<span class=\"token punctuation\">,</span>     <span class=\"token comment\">// 对象名称（全路径名）</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        szCommandLine<span class=\"token punctuation\">,</span>          <span class=\"token comment\">// 命令行</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span>                   <span class=\"token comment\">// 不继承进程句柄</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span>                   <span class=\"token comment\">// 不继承线程句柄</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        FALSE<span class=\"token punctuation\">,</span>                  <span class=\"token comment\">// 不继承句柄</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        CREATE_SUSPENDED<span class=\"token punctuation\">,</span>       <span class=\"token comment\">// 以挂起的形式创建进程</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span>                   <span class=\"token comment\">// 使用父进程环境变量</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span>                   <span class=\"token comment\">// 使用父进程目录作为当前目录，可以自己设置目录</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token operator\">&amp;</span>si<span class=\"token punctuation\">,</span>                    <span class=\"token comment\">//STARTUPINFO 结构体详细信息</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token operator\">&amp;</span>pi<span class=\"token punctuation\">)</span>                    <span class=\"token comment\">//PROCESS_INFORMATION 结构体详细信息</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span>   <span class=\"token comment\">// 返回最近的错误代码值</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"CreateChildProcess Error:%d \\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">GetLastError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token keyword\">return</span> FALSE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token comment\">// 查看子进程返回的信息</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token function\">ReturnInfo</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>pi<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token comment\">// 进程挂起后，恢复前做的事情</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"------------------\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    <span class=\"token comment\">// 线程恢复函数</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    <span class=\"token function\">ResumeThread</span><span class=\"token punctuation\">(</span>pi<span class=\"token punctuation\">.</span>hThread<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    <span class=\"token comment\">// 释放句柄</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>    <span class=\"token function\">CloseHandle</span><span class=\"token punctuation\">(</span>pi<span class=\"token punctuation\">.</span>hProcess<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    <span class=\"token function\">CloseHandle</span><span class=\"token punctuation\">(</span>pi<span class=\"token punctuation\">.</span>hThread<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    <span class=\"token keyword\">return</span> TRUE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre></pre></td></tr><tr><td data-num=\"78\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>    TCHAR szApplicationName<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">TEXT</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"C:\\\\WINDOWS\\\\system32\\\\notepad.exe\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>    <span class=\"token function\">CreateChildProcess</span><span class=\"token punctuation\">(</span>szApplicationName<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"模块目录和工作目录\"><a class=\"anchor\" href=\"#模块目录和工作目录\">#</a> 模块目录和工作目录</h2>\n<p><img data-src=\"image009.png\" alt=\"\" /></p>\n<h2 id=\"creeateprocess函数的其他参数\"><a class=\"anchor\" href=\"#creeateprocess函数的其他参数\">#</a> CreeateProcess 函数的其他参数</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS9DcmVhdGVQcm9jZXNzLzExMDUwNDE5\">https://baike.baidu.com/item/CreateProcess/11050419</span> 百度百科非常详细了</p>\n<h1 id=\"进程终止\"><a class=\"anchor\" href=\"#进程终止\">#</a> 进程终止</h1>\n<p>终止进程的三种方式：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1</span>、VOID　<span class=\"token function\">ExitProcess</span><span class=\"token punctuation\">(</span>UINT fuExitCode<span class=\"token punctuation\">)</span>                       <span class=\"token comment\">// 进程自己调用</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">2</span>、BOOL <span class=\"token function\">TerminateProcess</span><span class=\"token punctuation\">(</span>HANDLE hProcess<span class=\"token punctuation\">,</span> UINT fuExitCode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 终止其他进程</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                         </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">3</span>、ExitThread                                               <span class=\"token comment\">// 终止进程中的所有线程，进程也会终止</span></pre></td></tr></table></figure><p>获取进程的退出码：</p>\n<p><code>BOOL GetExitCodeProcess(HANDLE hProcess,PDWORD pdwExitCode);</code></p>\n<p>进程终止时相关操作：</p>\n<p>1、进程中剩余的所有线程全部终止运行</p>\n<p>2、进程指定的所有用户对象均被释放，所有内核对象均被关闭</p>\n<p>3、进程内核对象的状态变成收到通知的状态</p>\n<p>4、进程内核对象的使用计数递减 1</p>\n",
            "tags": [
                "Windows进程",
                "句柄表"
            ]
        }
    ]
}