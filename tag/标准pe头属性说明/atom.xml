<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://Or0kit.github.io</id>
    <title>Or0kit • Posts by &#34;标准pe头属性说明&#34; tag</title>
    <link href="https://Or0kit.github.io" />
    <updated>2020-11-26T08:59:49.000Z</updated>
    <category term="Drozer" />
    <category term="Algolia" />
    <category term="同义词替换" />
    <category term="xpath" />
    <category term="win32api" />
    <category term="WOW64" />
    <category term="windows消息机制" />
    <category term="虚拟内存" />
    <category term="jsDelivr" />
    <category term="First blog" />
    <category term="markdown 学习" />
    <category term="Android" />
    <category term="替换密钥" />
    <category term="数论基础" />
    <category term="ADB" />
    <category term="雷电模拟器" />
    <category term="Hadoop" />
    <category term="IDA" />
    <category term="Windows逆向" />
    <category term="SSH隧道" />
    <category term="url" />
    <category term="http" />
    <category term="Nginx" />
    <category term="Linux" />
    <category term="CentOS7配置vsftp" />
    <category term="Psad" />
    <category term="fwsnort" />
    <category term="应急响应" />
    <category term="x86汇编指令" />
    <category term="逆向" />
    <category term="IDA学习" />
    <category term="恶意代码分析实战入门" />
    <category term="静态分析基础" />
    <category term="动态分析技术基础" />
    <category term="加壳" />
    <category term="脱壳" />
    <category term="C++壳" />
    <category term="ESP寻址" />
    <category term="定位Win32窗口回调函数" />
    <category term="HOOK攻防" />
    <category term="瞬时HOOK过检测" />
    <category term="INLINE-HOOK" />
    <category term="IAT HOOK" />
    <category term="INLINE HOOK" />
    <category term="进程监控" />
    <category term="模块隐藏" />
    <category term="进程通信" />
    <category term="tlhelp32.h" />
    <category term="进程遍历" />
    <category term="模块遍历" />
    <category term="TEB" />
    <category term="PEB" />
    <category term="R3层断链" />
    <category term="外挂原理" />
    <category term="DLL注入之进程间通信" />
    <category term="Win临界区" />
    <category term="Win互斥体" />
    <category term="内存映射文件" />
    <category term="内存映射共享" />
    <category term="写拷贝" />
    <category term="Win事件" />
    <category term="线程同步" />
    <category term="Win子窗口控件" />
    <category term="win32文件函数" />
    <category term="代码注入" />
    <category term="窗口程序" />
    <category term="消息机制" />
    <category term="消息类型" />
    <category term="私有内存" />
    <category term="共享内存" />
    <category term="设备对象" />
    <category term="DC设备上下文" />
    <category term="图形对象" />
    <category term="创建线程" />
    <category term="线程控制" />
    <category term="线程相关API" />
    <category term="线程上下文" />
    <category term="CONTEXT结构体" />
    <category term="物理内存" />
    <category term="Windows进程" />
    <category term="句柄表" />
    <category term="远程线程函数" />
    <category term="远程线程" />
    <category term="DLL注入" />
    <category term="DLL注入相关函数" />
    <category term="WinMain函数" />
    <category term="调用约定" />
    <category term="我的GetProcAddress" />
    <category term="资源文件" />
    <category term="消息断点" />
    <category term="通用控件" />
    <category term="WM_NOTIFY消息类型" />
    <category term="MFC" />
    <category term="PE查看器" />
    <category term="PE课后作业" />
    <category term="RVA与FOA" />
    <category term="PE结构" />
    <category term="DOS头属性说明" />
    <category term="标准PE头属性说明" />
    <category term="扩展PE头属性说明" />
    <category term="节表属性说明" />
    <category term="空白区添加代码" />
    <category term="合并节" />
    <category term="导入表" />
    <category term="注入" />
    <category term="导入表注入" />
    <category term="导出表" />
    <category term="新增节" />
    <category term="移动NT头" />
    <category term="扩大节" />
    <category term="移动导出表" />
    <category term="移动重定位表" />
    <category term="重定位表" />
    <category term="静态链接库" />
    <category term="动态链接库" />
    <category term="句柄" />
    <category term="button" />
    <category term="单选框" />
    <category term="复选框件" />
    <category term="Edit" />
    <category term="Combo Box" />
    <category term="Tab" />
    <category term="ListCtrl" />
    <category term="MFC的本质" />
    <category term="MFC的层次结构图" />
    <category term="手动创建一个MFC程序" />
    <category term="MFC的初始化过程" />
    <category term="MFC运行时类型识别" />
    <category term="关键字static" />
    <category term="关键字const" />
    <category term="MFC动态创建" />
    <category term="MFC消息映射" />
    <category term="结构体AFX_MSGMAP_ENTRY" />
    <category term="结构体AFX_MSGM" />
    <category term="MFC的三大类消息" />
    <category term="数据传输" />
    <category term="ini文件的读写" />
    <category term="python" />
    <category term="SSH" />
    <category term="python文件读取" />
    <category term="数据分析" />
    <category term="socket" />
    <category term="数据库编程" />
    <category term="python内置属性" />
    <category term="multiprocessing" />
    <category term="threading" />
    <category term="scrapy" />
    <category term="测试" />
    <category term="BHP" />
    <category term="Python的import功能" />
    <category term="木马" />
    <category term="STL" />
    <category term="Vector容器" />
    <category term="Deque容器" />
    <category term="List容器" />
    <category term="Set容器" />
    <category term="Multiset容器" />
    <category term="Map容器" />
    <category term="Multimap容器" />
    <category term="Stack容器" />
    <category term="Queue容器" />
    <category term="STL算法" />
    <category term="STL迭代器" />
    <category term="CobaltStrike" />
    <category term="RedTeam" />
    <category term="Apeache" />
    <category term="Nmap" />
    <category term="php" />
    <category term="guestbook" />
    <category term="SQLmap" />
    <category term="apache" />
    <category term="log" />
    <category term="mysql主键" />
    <category term="CSRF" />
    <category term="SSRF" />
    <category term="业务逻辑漏洞" />
    <category term="xss" />
    <category term="webshell流量特征" />
    <category term="虚拟网卡" />
    <category term="0环与3环的通信（常规方法）" />
    <category term="内核空间" />
    <category term="内核模块" />
    <category term="遍历内核模块" />
    <category term="定位未导出函数PspTiminateProcess" />
    <category term="内核编程基础" />
    <category term="ANSI_STRING" />
    <category term="UNICODE_STRING" />
    <category term="内核内存" />
    <category term="上下文环境" />
    <category term="中断请求级别" />
    <category term="链表" />
    <category term="自旋锁" />
    <category term="注册表" />
    <category term="地址空间" />
    <category term="文件操作" />
    <category term="线程与事件" />
    <category term="内核重载" />
    <category term="驱动调试" />
    <category term="配置VS2019+WDK10" />
    <category term="第一个驱动程序" />
    <category term="调试驱动程序" />
    <category term="OpenSCManager" />
    <category term="CreateService" />
    <category term="APC的本质" />
    <category term="APC的备用队列" />
    <category term="消息队列" />
    <category term="PsConvertToGuiThread" />
    <category term="win32k.sys" />
    <category term="GUI线程" />
    <category term="窗口程序的创建" />
    <category term="消息循环" />
    <category term="线性地址的管理" />
    <category term="VAD树" />
    <category term="_MMVAD" />
    <category term="_MMVAD_FLAGS" />
    <category term="VirtualAlloc" />
    <category term="MEM_COMMIT与MEM_RESERVE" />
    <category term="malloc" />
    <category term="堆内存" />
    <category term="栈内存" />
    <category term="全局区内存" />
    <category term="共享物理页" />
    <category term="共享文件" />
    <category term="LoadLibrary的本质" />
    <category term="MmAddPhysicalMemoryEx" />
    <category term="缺页异常" />
    <category term="临界区" />
    <category term="KPCR结构体" />
    <category term="等待链表" />
    <category term="调度链表" />
    <category term="模拟线程切换" />
    <category term="模拟挂起与恢复函数" />
    <category term="进程的创建" />
    <category term="获取当前进程" />
    <category term="ETHREAD" />
    <category term="KTHREAD" />
    <category term="EPROCESS" />
    <category term="KPROCESS" />
    <category term="2-9-9-12分页" />
    <category term="PAE" />
    <category term="PDPTE" />
    <category term="PDE" />
    <category term="PTE" />
    <category term="XD标志位" />
    <category term="逆向分析MmIsAddressValid函数(2-9-9-12)" />
    <category term="PWT" />
    <category term="PDT" />
    <category term="TLB" />
    <category term="CPU缓存" />
    <category term="INVLPG指令" />
    <category term="全局页" />
    <category term="ShadowWalker" />
    <category term="中断" />
    <category term="异常" />
    <category term="CLI指令" />
    <category term="STI指令" />
    <category term="INT2" />
    <category term="INT8" />
    <category term="中断门描述符" />
    <category term="IDT" />
    <category term="提权" />
    <category term="TSS" />
    <category term="跨段跳转流程" />
    <category term="JMP FAR指令" />
    <category term="任务门" />
    <category term="LDT段描述符" />
    <category term="LDT" />
    <category term="CR0" />
    <category term="CR2" />
    <category term="CR4" />
    <category term="CRL" />
    <category term="DPL" />
    <category term="RPL" />
    <category term="段寄存器结构" />
    <category term="段描述符" />
    <category term="段选择子" />
    <category term="GDT表" />
    <category term="调用门" />
    <category term="调用门描述符" />
    <category term="逆向分析MmIsAddressValid函数" />
    <category term="error C2143" />
    <category term="error C2275" />
    <category term="CALL与CALL FAR" />
    <category term="陷阱门描述符" />
    <category term="页目录表基址" />
    <category term="页表的基址" />
    <category term="0地址执行ShellCode" />
    <category term="10-10-12分页" />
    <category term="PDE_PTE" />
    <category term="物理页" />
    <category term="SSDT HOOK" />
    <category term="OpenProcess" />
    <category term="系统服务表" />
    <category term="SSDT" />
    <category term="SSDT HOOK隐藏" />
    <category term="API进出内核" />
    <category term="系统调用阶段总结" />
    <category term="网络安全法" />
    <category term="ASCII" />
    <category term="GBK" />
    <category term="ANSI" />
    <category term="Unicode" />
    <category term="UTF-8" />
    <category term="URL 编码/解码" />
    <category term="十进制" />
    <category term="二进制" />
    <category term="十六进制" />
    <category term="内存" />
    <category term="编写ShellCode实现IAT HOOK" />
    <category term="ShellCode原则" />
    <category term="傀儡进程加密壳" />
    <category term="ZwUnmapViewOfSection函数" />
    <category term="加载图标" />
    <category term="提取图标" />
    <category term="资源表" />
    <category term="MFC命令传递" />
    <category term="远控界面编写" />
    <category term="HTML" />
    <category term="文件包含" />
    <category term="sql注入" />
    <category term="经典定长指令" />
    <category term="经典变长指令" />
    <category term="指令前缀" />
    <category term="进程句柄表" />
    <category term="全局句柄表" />
    <category term="KAPC" />
    <category term="QueueUserAPC" />
    <category term="NtQueueApcThread" />
    <category term="KeInitializeApc" />
    <category term="KeInsertQueueApc" />
    <category term="KiInsertQueueApc" />
    <category term="消息队列与线程" />
    <category term="Windows线程切换" />
    <category term="KiSwapContext" />
    <category term="SwapContext" />
    <category term="时钟中断" />
    <category term="时间片管理" />
    <category term="线程切换与TSS" />
    <category term="线程切换与FS" />
    <category term="线程切换与线程优先级" />
    <category term="快速调用" />
    <category term="中断调用" />
    <category term="分析ReadProcessMemory" />
    <category term="KiFastSystemCall" />
    <category term="KiIntSystemCall" />
    <category term="重写3环" />
    <category term="文件上传" />
    <category term="隐藏驱动" />
    <category term="IopLoadDriver" />
    <category term="延迟过程调用" />
    <category term="进程挂靠" />
    <category term="跨进程读写内存" />
    <category term="APC" />
    <category term="逆向分析NtReadVirtualMemory" />
    <category term="逆向分析NtWriteVIrtualMemory" />
    <category term="AD-Attack-Defense" />
    <category term="payload" />
    <category term="sysenter指令" />
    <category term="KiFastCallEntry函数" />
    <category term="KiSystemService函数" />
    <category term="Trap_Frame" />
    <category term="web安全" />
    <category term="Pentest" />
    <entry>
        <id>https://or0kit.github.io/Bin/WindowsPE/windowsPE%E7%BB%93%E6%9E%84/</id>
        <title>windowsPE结构</title>
        <link rel="alternate" href="https://or0kit.github.io/Bin/WindowsPE/windowsPE%E7%BB%93%E6%9E%84/"/>
        <content type="html">&lt;h1 id=&#34;win32下的pe文件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#win32下的pe文件&#34;&gt;#&lt;/a&gt; win32 下的 PE 文件:&lt;/h1&gt;
&lt;p&gt;PE 是 Portable Execute 的缩写，是可移植可执行的意思，只要文件的数据结构遵循 PE 结构，就属于 PE 文件，windows 中常见的 PE 文件有&lt;/p&gt;
&lt;p&gt;*.sys 驱动类文件&lt;/p&gt;
&lt;p&gt;*.dll 动态链接库文件&lt;/p&gt;
&lt;p&gt;*.exe 可执行文件&lt;/p&gt;
&lt;p&gt;*.ocx 对象类别扩充组建&lt;/p&gt;
&lt;p&gt;*.obj 目标文件等.&lt;/p&gt;
&lt;p&gt;同样，linux 中使用的是 ELF 格式，和 windows 的 PE 格式有一定的差别，如:&lt;/p&gt;
&lt;p&gt;可重定位文件 *.o&lt;/p&gt;
&lt;p&gt;可执行文件如 /bin/ls 等&lt;/p&gt;
&lt;p&gt;共享目标文件 *.so&lt;/p&gt;
&lt;p&gt;核心转储文件 core&lt;/p&gt;
&lt;p&gt;都遵循 ELF 数据结构. unix 从 system v4 开始也使用 ELF 了，而他们的始祖都是 unix system v3 的中 COFF. 如下图:&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image002.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h1 id=&#34;pe文件结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#pe文件结构&#34;&gt;#&lt;/a&gt; PE 文件结构&lt;/h1&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9iYnMucGVkaXkuY29tL3RocmVhZC0xNDU5MTIuaHRt&#34;&gt;源自看雪论坛&lt;/span&gt;&lt;/p&gt;
&lt;img data-src=&#34;/Bin/WindowsPE/windowsPE%E7%BB%93%E6%9E%84/pe.gif&#34; class=&#34;&#34; title=&#34;PE文件架构&#34;&gt;
&lt;p&gt;win32 中 PE 的逻辑图:&lt;/p&gt;
&lt;p&gt;一个标准的 PE 文件由 DOS 头，stub,NT 头 (包含 PE 标识，标准 PE 头和可选 PE 头三个成员), 节表，节的内容以及一些为了内存对齐而填充的 0.&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image001.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;dos头&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#dos头&#34;&gt;#&lt;/a&gt; DOS 头&lt;/h2&gt;
&lt;p&gt;DOS 头就是一堆数据，但它们是一个有序的有含义的组合在一起的结构体。&lt;br /&gt;
DOS 头是为了兼容 DOS 程序而设的，现在基本已经用不上了，仅有两个有意义的字段，所以还是很简单的。&lt;br /&gt;
DOS 头对应的结构体名称叫 IMAGE_DOS_HEADER&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;0x00&lt;/span&gt; WORD   e_magic                &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;                &lt;span class=&#34;token comment&#34;&gt;//&#34;MZ 标记&#34; 用于判断是否为可执行文件&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;0x3C&lt;/span&gt; DWORD  e_lfanew&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;              &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;                &lt;span class=&#34;token comment&#34;&gt;//PE 头相对于文件的偏移，用于定位 PE 文件&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;win32中pe的nt头&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#win32中pe的nt头&#34;&gt;#&lt;/a&gt; win32 中 PE 的 NT 头&lt;/h2&gt;
&lt;p&gt;NT 头是 PE 文件中标准 PE 头和可选 PE 头的总体称谓，还包含一个 PE 标识。下面是它在 Visual C++ 6.0 中 WINNT.h 中的定义:&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;_IMAGE_NT_HEADERS64&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    DWORD Signature&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    IMAGE_FILE_HEADER FileHeader&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    IMAGE_OPTIONAL_HEADER64 OptionalHeader&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; IMAGE_NT_HEADERS64&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;PIMAGE_NT_HEADERS64&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;_IMAGE_NT_HEADERS&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    DWORD Signature&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;                        &lt;span class=&#34;token comment&#34;&gt;//PE 标识&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    IMAGE_FILE_HEADER FileHeader&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;           &lt;span class=&#34;token comment&#34;&gt;// 标准 PE 头 (也称文件头)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    IMAGE_OPTIONAL_HEADER32 OptionalHeader&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 可选 PE 头&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; IMAGE_NT_HEADERS32&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;PIMAGE_NT_HEADERS32&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;第一个是 64bit 的 NT 头定义，第二个是 32bit 的。这里只探讨 32bit 的。标准 PE 头也叫文件头，这不重要，知道是那么个东西就行了，高端名词主要是为了严谨而取出来的，但是很多时候很晦涩，通俗易懂更易让人接受.&lt;/p&gt;
&lt;h3 id=&#34;标准pe头&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#标准pe头&#34;&gt;#&lt;/a&gt; 标准 PE 头&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;这些内容源自滴水的课件&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;span&gt;p&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;0x00&lt;/span&gt; WORD    Machine&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;              &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;				&lt;span class=&#34;token comment&#34;&gt;// 程序运行的 CPU 型号：0x0 任何处理器 / 0x14C 386 及后续处理器									&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;0x02&lt;/span&gt; WORD    NumberOfSections&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;     &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;				&lt;span class=&#34;token comment&#34;&gt;// 文件中存在的节的总数，如果要新增节或者合并节 就要修改这个值.									&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;0x04&lt;/span&gt; DWORD   TimeDateStamp&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;        &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;				&lt;span class=&#34;token comment&#34;&gt;// 时间戳：文件的创建时间 (和操作系统的创建时间无关)，编译器填写的.									&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;0x08&lt;/span&gt; DWORD   PointerToSymbolTable&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; 													&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;0x0C&lt;/span&gt; DWORD   NumberOfSymbols&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; 													&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;0x10&lt;/span&gt; WORD    SizeOfOptionalHeader&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;				&lt;span class=&#34;token comment&#34;&gt;// 可选 PE 头的大小，32 位 PE 文件默认 E0h 64 位 PE 文件默认为 F0h  大小可以自定义.									&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;0x12&lt;/span&gt; WORD    Characteristics&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;      &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;				&lt;span class=&#34;token comment&#34;&gt;// 每个位有不同的含义，可执行文件值为 10F 即 0 1 2 3 8 位置 1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;可选pe头&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#可选pe头&#34;&gt;#&lt;/a&gt; 可选 PE 头&lt;/h3&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;span&gt;p&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;WORD    Magic&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;        &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;			&lt;span class=&#34;token comment&#34;&gt;// 说明文件类型：10B 32 位下的 PE 文件     20B 64 位下的 PE 文件									&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;BYTE    MajorLinkerVersion&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;													&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;BYTE    MinorLinkerVersion&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;													&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;DWORD   SizeOfCode&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;				&lt;span class=&#34;token comment&#34;&gt;// 所有代码节的和，必须是 FileAlignment 的整数倍 编译器填的  没用									&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;DWORD   SizeOfInitializedData&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;				&lt;span class=&#34;token comment&#34;&gt;// 已初始化数据大小的和，必须是 FileAlignment 的整数倍 编译器填的  没用									&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;DWORD   SizeOfUninitializedData&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;				&lt;span class=&#34;token comment&#34;&gt;// 未初始化数据大小的和，必须是 FileAlignment 的整数倍 编译器填的  没用									&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;DWORD   AddressOfEntryPoint&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;				&lt;span class=&#34;token comment&#34;&gt;// 程序入口									&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;DWORD   BaseOfCode&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;				&lt;span class=&#34;token comment&#34;&gt;// 代码开始的基址，编译器填的   没用									&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;DWORD   BaseOfData&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;				&lt;span class=&#34;token comment&#34;&gt;// 数据开始的基址，编译器填的   没用									&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;DWORD   ImageBase&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;				&lt;span class=&#34;token comment&#34;&gt;// 内存镜像基址&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;DWORD   SectionAlignment&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;				&lt;span class=&#34;token comment&#34;&gt;// 内存对齐&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;DWORD   FileAlignment&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;				    &lt;span class=&#34;token comment&#34;&gt;// 文件对齐&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;WORD    MajorOperatingSystemVersion&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;WORD    MinorOperatingSystemVersion&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;WORD    MajorImageVersion&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;WORD    MinorImageVersion&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;WORD    MajorSubsystemVersion&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;WORD    MinorSubsystemVersion&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;DWORD   Win32VersionValue&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;DWORD   SizeOfImage&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;				&lt;span class=&#34;token comment&#34;&gt;// 内存中整个 PE 文件的映射的尺寸，可以比实际的值大，但必须是 SectionAlignment 的整数倍&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;DWORD   SizeOfHeaders&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;				&lt;span class=&#34;token comment&#34;&gt;// 所有头 + 节表按照文件对齐后的大小，否则加载会出错。一定是文件对齐的整数倍&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;DWORD   CheckSum&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;				&lt;span class=&#34;token comment&#34;&gt;// 校验和，一些系统文件有要求。用来判断文件是否被修改.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;WORD    Subsystem&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;WORD    DllCharacteristics&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;	&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;DWORD   SizeOfStackReserve&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;				&lt;span class=&#34;token comment&#34;&gt;// 初始化时保留的堆栈大小 &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;DWORD   SizeOfStackCommit&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;				&lt;span class=&#34;token comment&#34;&gt;// 初始化时实际提交的大小 &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;DWORD   SizeOfHeapReserve&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;				&lt;span class=&#34;token comment&#34;&gt;// 初始化时保留的堆大小 &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;DWORD   SizeOfHeapCommit&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;				&lt;span class=&#34;token comment&#34;&gt;// 初始化时实践提交的大小 &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;DWORD   LoaderFlags&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;DWORD   NumberOfRvaAndSizes&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;				&lt;span class=&#34;token comment&#34;&gt;// 目录项数目&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;节表区段节区节段等等&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#节表区段节区节段等等&#34;&gt;#&lt;/a&gt; 节表（区段，节区，节段等等）&lt;/h2&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;span&gt;p&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;define&lt;/span&gt; &lt;span class=&#34;token macro-name&#34;&gt;IMAGE_SIZEOF_SHORT_NAME&lt;/span&gt;              &lt;span class=&#34;token expression&#34;&gt;&lt;span class=&#34;token number&#34;&gt;8&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;_IMAGE_SECTION_HEADER&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;0x00&lt;/span&gt; BYTE Name&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;IMAGE_SIZEOF_SHORT_NAME&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;union&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;0x08&lt;/span&gt; DWORD PhysicalAddress&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;0x08&lt;/span&gt; DWORD VirtualSize&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; Misc&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;0x0c&lt;/span&gt; DWORD VirtualAddress&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;0x10&lt;/span&gt; DWORD SizeOfRawData&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;0x14&lt;/span&gt; DWORD PointerToRawData&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;0x18&lt;/span&gt; DWORD PointerToRelocations&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;0x1c&lt;/span&gt; DWORD PointerToLinenumbers&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;0x20&lt;/span&gt; WORD NumberOfRelocations&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;0x22&lt;/span&gt; WORD NumberOfLinenumbers&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;0x24&lt;/span&gt; DWORD Characteristics&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;1、  &lt;code&gt;Name&lt;/code&gt;  8 个字节 一般情况下是以 &amp;quot;\0&amp;quot; 结尾的 ASCII 吗字符串来标识的名称，内容可以自定义。&lt;/p&gt;
&lt;p&gt;注意：该名称并不遵守必须以 &amp;quot;\0&amp;quot; 结尾的规律，如果不是以 &amp;quot;\0&amp;quot; 结尾，系统会截取 8 个字节的长度进行处理。&lt;/p&gt;
&lt;p&gt;2、  &lt;code&gt;Misc&lt;/code&gt;  双字 是该节在没有对齐前的真实尺寸，该值可以不准确。&lt;/p&gt;
&lt;p&gt;3、  &lt;code&gt;VirtualAddress&lt;/code&gt;  节区在内存中的偏移地址。加上 ImageBase 才是在内存中的真正地址。&lt;/p&gt;
&lt;p&gt;4、  &lt;code&gt;SizeOfRawData&lt;/code&gt;   节在文件中对齐后的尺寸。&lt;/p&gt;
&lt;p&gt;5、  &lt;code&gt;PointerToRawData&lt;/code&gt;  节区在文件中的偏移。&lt;/p&gt;
&lt;p&gt;6、  &lt;code&gt;PointerToRelocations&lt;/code&gt;  在 obj 文件中使用。 对 exe 无意义。&lt;/p&gt;
&lt;p&gt;7、  &lt;code&gt;PointerToLinenumbers&lt;/code&gt;  行号表的位置 调试的时候使用。&lt;/p&gt;
&lt;p&gt;8、  &lt;code&gt;NumberOfRelocations&lt;/code&gt;  在 obj 文件中使用  对 exe 无意义。&lt;/p&gt;
&lt;p&gt;9、  &lt;code&gt;NumberOfLinenumbers&lt;/code&gt;  行号表中行号的数量 调试的时候使用。&lt;/p&gt;
&lt;p&gt;10、  &lt;code&gt;Characteristics&lt;/code&gt;  节的属性。&lt;/p&gt;
&lt;h1 id=&#34;个人笔记&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#个人笔记&#34;&gt;#&lt;/a&gt; 个人笔记&lt;/h1&gt;
&lt;p&gt;BYTE 是字节的意思，字节是计算机存储容量的基本单位，一个字节由 8 位二进制数组成。&lt;br /&gt;
bit 是位的意思，位是计算机中存储数据的最小单位，指二进制数中的一个位数，其值为 “0” 或 “1”&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;WORD = 2 * BYTE = 16 bit

DWORD = 2 * WORD = 4 * BYTE = 32 bit

QWORD = 2 * WDORD = 4 * WORD = 8 * BYTE = 64 bit
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;一个 BYTE 以十六进制显示，是一个 2 位十六进制数.&lt;br /&gt;
 一个 WORD 以十六进制显示，是一个 4 位十六进制数.&lt;br /&gt;
 一个 DWORD 以十六进制显示，是一个 8 位十六进制数.&lt;br /&gt;
 一个 QWORD 以十六进制显示，是一个 16 位十六进制数.&lt;/p&gt;
&lt;h2 id=&#34;看pe文件查找重要信息的位置&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#看pe文件查找重要信息的位置&#34;&gt;#&lt;/a&gt; 看 PE 文件，查找重要信息的位置&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;查找 PE 结构的各个位置
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;DOS 头 -&amp;gt;NT 头&lt;br /&gt;
直接看 0x3c 到 0x3f 的数据，这个值是 PE 标识符的位置，既_IMAGE_NT_HEADER（NT 头）结构中的 Signature，为 50 45 既 ASCII 码字符 PE&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;NT 头中的_IMAGE_FILE_HEADER FileHeader&lt;br /&gt;
NT 头往后查 0x06（0d06），0x06 与 0x07 记录着节区的个数，如果要新增节或者合并节 就要修改这个值。&lt;br /&gt;
NT 头往后查 0x14（0d20）, 0x14 与 0x15 记录着可选 PE 头的大小&lt;br /&gt;
 NT 头往后查 0x18（0d24），就是 _IMAGE_OPTIONAL_HEADER（可选 PE 头）的开始&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;NT 头中的_IMAGE_OPTIONAL_HEADER&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;+0x00	WORD    Magic;   说明文件类型：0x010B 32 位下的 PE 文件     0x20B 64 位下的 PE 文件&lt;/li&gt;
&lt;li&gt;+0x10	DWORD   AddressOfEntryPoint;	程序入口&lt;/li&gt;
&lt;li&gt;+0x1C	DWORD   ImageBase;		        内存镜像基址&lt;/li&gt;
&lt;li&gt;+0x20	DWORD   SectionAlignment;		内存对齐&lt;/li&gt;
&lt;li&gt;+0x24	DWORD   FileAlignment;			文件对齐&lt;/li&gt;
&lt;li&gt;+0x38	DWORD   SizeOfImage;			内存中整个 PE 文件的映射的尺寸，可以比实际的值大，但必须是 SectionAlignment 的整数倍&lt;/li&gt;
&lt;li&gt;+0x3C	DWORD   SizeOfHeaders;			所有头 + 节表按照文件对齐后的大小，否则加载会出错&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;节表&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;位置查找：直接找 NT 头，往后查找 0x14 个字节，记下这里的可选 PE 头的大小。&lt;br /&gt;
从 NT 头开头往后查找 0x18 + 记下的 PE 头的大小，这里就是第一个节表的位置。&lt;/li&gt;
&lt;li&gt;每一个节表的大小为 40 字节。&lt;/li&gt;
&lt;li&gt;+0x00        Name             节表的名字 8 个字节&lt;/li&gt;
&lt;li&gt;+0x0C DWORD  VirtualAddress   节区在内存中的偏移地址。加上 ImageBase 才是在内存中的真正地址&lt;/li&gt;
&lt;li&gt;+0x10 DWORD  SizeOfRawData    节在文件中对齐后的大小&lt;/li&gt;
&lt;li&gt;+0x14 DWORD  PointerToRawData 节区在文件中的偏移&lt;/li&gt;
&lt;li&gt;+0x24 DWORD  Characteristics  节的属性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2020 年 11 月 26 日 21:00:35&lt;/p&gt;
&lt;h2 id=&#34;真正的程序入口&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#真正的程序入口&#34;&gt;#&lt;/a&gt; 真正的程序入口&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;2021年5月2日17:16:32&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;0x10	DWORD   AddressOfEntryPoint;	程序入口
&lt;ul&gt;
&lt;li&gt;0x1C	DWORD   ImageBase;		        内存镜像基址&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;AddressOfEntryPoint 只是相对 ImageBase 的偏移。&lt;/p&gt;
&lt;p&gt;真正的程序开始的地方是 &lt;code&gt;ImageBase + AddressOfEntryPoint&lt;/code&gt; &lt;br /&gt;
 这也是 OD 开始断的地方。&lt;/p&gt;
</content>
        <category term="PE结构" />
        <category term="DOS头属性说明" />
        <category term="标准PE头属性说明" />
        <category term="扩展PE头属性说明" />
        <category term="节表属性说明" />
        <updated>2020-11-26T08:59:49.000Z</updated>
    </entry>
</feed>
