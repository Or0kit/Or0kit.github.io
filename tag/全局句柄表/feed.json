{
    "version": "https://jsonfeed.org/version/1",
    "title": "Or0kit • All posts by \"全局句柄表\" tag",
    "description": "临渊羡鱼，不如退而结网",
    "home_page_url": "https://Or0kit.github.io",
    "items": [
        {
            "id": "https://or0kit.github.io/Bin/Core/WindowsXp/HadleTable/%E5%8F%A5%E6%9F%84%E8%A1%A8/",
            "url": "https://or0kit.github.io/Bin/Core/WindowsXp/HadleTable/%E5%8F%A5%E6%9F%84%E8%A1%A8/",
            "title": "句柄表",
            "date_published": "2022-01-28T13:44:50.000Z",
            "content_html": "<h1 id=\"楔子\"><a class=\"anchor\" href=\"#楔子\">#</a> 楔子</h1>\n<p>句柄表份分为进程句柄表和全局句柄表两种。</p>\n<p>当一个线程使用 OpenProcess 函数去获得另一个进程的句柄时，首先会进入 R0，根据 PID 查找全局句柄表，找到这个进程的结构体对象后，插入到自己的进程句柄表中，然后把这个对象在自己的进程句柄表中的索引作为返回值返回。</p>\n<h2 id=\"句柄的由来\"><a class=\"anchor\" href=\"#句柄的由来\">#</a> 句柄的由来</h2>\n<p>出自《Windows 内核原理与实现》129 页。</p>\n<p>Windows 执行体实现了一套对象机制来管理各种资源或实体。每种对象都有一个类型对象，类型对象定义了该类对象的一些特性和方法。对象管理器也定义了一个全局名字空间，提供了根据名称来解析对象的同一机制。类型对象通过提供自定义的 Parse 方法可以扩展此名字空间。对象管理器中的对象是执行体对象，它位于系统空间，考虑到安全性，在进程空间不能直接通过地址来引用它们。</p>\n<p>在 Windows 系统中需要使用到句柄 (handle) 来管理进程中的对象引用。当一个进程利用名称来创建或打开一个对象时，将获得一个句柄，该句柄指向所创建或打开的对象。以后，该进程无须使用名称来引用对象，使用此句柄即可访问。这样即保证了安全性，也提高了引用对象的效率。当两个应用程序以共享方式打开了同一个文件，那么，它们将分别得到各种的句柄，且都可以通过句柄操作该文件。尽管两个应用程序得到的句柄的值并不相同，但是这两个句柄所指的文件却是同一个。因此，句柄只是一个对象引用，同一个对象在不同的环境下可能有不同的引用（句柄）值。</p>\n<p>在 Windows 系统中，句柄是进程范围内的对象引用，换句话说，句柄仅在一个进程范围内才有效。一个进程的句柄传递给另一个进程后，句柄值将不再有效。</p>\n<h2 id=\"进程句柄表\"><a class=\"anchor\" href=\"#进程句柄表\">#</a> 进程句柄表</h2>\n<h3 id=\"什么是句柄内核对象\"><a class=\"anchor\" href=\"#什么是句柄内核对象\">#</a> 什么是句柄（内核对象）</h3>\n<p>当一个进程创建或打开一个内核对象时，将获得一个而句柄，通过这个句柄可以访问内核对象。</p>\n<p>如：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>HANDLE g_hMutex <span class=\"token operator\">=</span> <span class=\"token operator\">::</span><span class=\"token function\">CreateMutex</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span>FALSE<span class=\"token punctuation\">,</span> <span class=\"token string\">\"XYZ\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>HANDLE g_hMutex <span class=\"token operator\">=</span> <span class=\"token operator\">::</span><span class=\"token function\">OpenMutex</span><span class=\"token punctuation\">(</span>MUTEX_ALL_ACCESS<span class=\"token punctuation\">,</span>FALSE<span class=\"token punctuation\">,</span> <span class=\"token string\">\"XYZ\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>HANDLE g_hEvent <span class=\"token operator\">=</span> <span class=\"token operator\">::</span><span class=\"token function\">CreateEvent</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> TRUE<span class=\"token punctuation\">,</span> FALSE<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>HANDLE g_hThread <span class=\"token operator\">=</span> <span class=\"token operator\">::</span><span class=\"token function\">CreateThread</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> Proc<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这些内核对象是指创建时需要指定  <code>LPSECURITY_ATTRIBUTES</code>  参数的对象。</p>\n<p><strong>注意：</strong></p>\n<ol>\n<li>窗口、字体、笔刷等，是用户句柄，并不是内核句柄，与本章所学句柄不一样。</li>\n<li>创建句柄不等同于打开句柄，当创建的时候，操作系统会在零环为内核对象分配一个结构体（例如 CreateEvent），如果自己或他人打开了这个内核对象（例如 OpenProcess），那么将不会再次为这个内核对象分配一个结构体，而是返回一个句柄的索引值。</li>\n<li>若同一个内核对象被引用了 100 次，那么在句柄表中就会存储 100 个内核对象的地址。</li>\n</ol>\n<h3 id=\"为什么要有句柄\"><a class=\"anchor\" href=\"#为什么要有句柄\">#</a> 为什么要有句柄</h3>\n<p>句柄存在的目的是为了避免在应用层直接修改内核对象。</p>\n<p>如果直接返回内核对象的地址，那么就意味着我们可以在应用层修改这个地址，在内核层面一旦出错就会蓝屏，很不安全，所以微软设计了句柄（HANDLE）给 3 环使用。</p>\n<p>Windows 的设计句柄表的理念：</p>\n<ol>\n<li>隐藏内核对象指针</li>\n<li>句柄就是索引</li>\n</ol>\n<h3 id=\"句柄表在哪\"><a class=\"anchor\" href=\"#句柄表在哪\">#</a> 句柄表在哪</h3>\n<p>在当前进程的 EPROCESS 结构体的 0xc4 的位置</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kd&gt; dt _EPROCESS\t\t\t\t\t\t</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   +0x0c4 ObjectTable      : _HANDLE_TABLE\t\t</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>...</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>kd&gt; dt _HANDLE_TABLE </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>nt!_HANDLE_TABLE\t\t\t\t</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   +0x000 TableCode  &#x2F;&#x2F;   句柄表</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   +0x004 QuotaProcess</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   +0x008 UniqueProcessId</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   +0x00c HandleTableLock</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   +0x01c HandleTableList\t\t</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   ...</pre></td></tr></table></figure><p>下面详细介绍句柄表的结构。</p>\n<h3 id=\"句柄表的结构\"><a class=\"anchor\" href=\"#句柄表的结构\">#</a> 句柄表的结构</h3>\n<p>句柄表是一个多层结构。<br />\n <code>EPROCESS</code>  数据结构的  <code>ObjectTable</code>  域指向进程的句柄表。一个进程的句柄表包含了所有已被该进程打开的那些对象的指针。</p>\n<p><code>ObjectTable</code>  的类型为  <code>_HANDLE_TABLE</code> ，每个句柄项的而结构为  <code>HANDLE_TABLE_ENTRY</code> 。<br />\n <code>HANDLE_TABLE_ENTRY</code>  的大小为 8B，而 Windows 执行体在分配句柄表内存时按页面（4KB 大小）来申请内存。因此，执行体每申请一个新的页面来存放句柄项，则句柄表的容量增加 512。</p>\n<p>下面看一下  <code>_HANDLE_TABLE</code>  结构体，这是《Windows 内核原理与实现》一书中的，也可以参见 WRK 源码的英文介绍。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_HANDLE_TABLE</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   ULONG_PTR TableCode<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 指向句柄表的存储结构</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_EPROCESS</span> <span class=\"token operator\">*</span>QuotaProcess<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 句柄表的内存资源记录在此进程中</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   HANDLE UniqueProcessId<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 创建进程的 ID，用于回调函数</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">HANDLE_TABLE_LOCKS</span> <span class=\"token expression\"><span class=\"token number\">4</span></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   EX_PUSH_LOCK HandleTableLock<span class=\"token punctuation\">[</span>HANDLE_TABLE_LOCKS<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 句柄表锁，仅在句柄表扩展时使用 </span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   LIST_ENTRY HandleTableList<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 所有的句柄表形成一个链表</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                               <span class=\"token comment\">// 链表头为全局变量 HandleTableListHead  </span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   EX_PUSH_LOCK HandleContentionEvent<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 若在反问句柄时发生竞争，则在此推锁上等待</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   PHANDLE_TRACE_DEBUG_INFO DebugInfo<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 调试信息，仅当调试句柄时才有意义</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>   LONG ExtraInfoPages<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 审计信息所</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>   ULONG FirstFree<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 空闲链表表头的句柄索引</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>   ULONG LastFree<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 最近被释放的句柄索引，用于 FIFO 类型空闲链表</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>   ULONG NextHandleNeedingPool<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 下一次句柄表扩展的起始句柄索引</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>   LONG HandleCount<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 正在使用的句柄表项的数量</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>   <span class=\"token keyword\">union</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>      ULONG Flags<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 标志域</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>      BOOLEAN StrictFIFO <span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 是否使用 FIFO 风格的重用，即先释放先重用</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token punctuation\">&#125;</span> HANDLE_TABLE<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>PHANDLE_TABLE<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>HADNLE_TEBLE 中的 TableCode 域是一个指针，指向句柄表的最高层表项页面，它的低 2 位的值代表了当前句柄表的层数。<br />\n句柄表只有一层，该进程句柄表组多只能容纳 512 个句柄；<br />\n句柄表有两层，该进程句柄表组多只能容纳 512*1024 个句柄；<br />\n句柄表有三层，该进程句柄表组多只能容纳 512*1024*1024 个句柄；<br />\n但 Windows 执行体限定每个进程的句柄数不得超过 2 的 24 次方 也就是 16777216 个。</p>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<p><code>TableCode</code>  指向句柄表，但每个<strong>句柄表项</strong>是有结构的，下面我们来看看它的结构：</p>\n<p><img data-src=\"image003.png\" alt=\"\" /></p>\n<p>①：这一块共计两个字节，高位字节是给 SetHandleInformation 这个函数用的，比如写成如下形式，那么这个位置将被写入 0x02：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">SetHandleInformation</span><span class=\"token punctuation\">(</span>Handle<span class=\"token punctuation\">,</span>HANDLE_FLAG_PROTECT_FROM_CLOSE<span class=\"token punctuation\">,</span>HANDLE_FLAG_PROTECT_FROM_CLOSE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><code>HANDLE_FLAG_PROTECT_FROM_CLOSE</code>  宏的值为  <code>0x00000002</code>  ，取最低字节，最终 ① 这块是  <code>0x0200</code>  。<br />\n②：这块是访问掩码，是给  <code>OpenProcess</code>  这个函数用的，具体的存的值就是这个函数的第一个参数的值。<br />\n③ 和 ④ 这两个块共计四个字节，其中  <code>bit0-bit2</code>  存的是这个句柄的属性，其中  <code>bit2</code>  和  <code>bit0</code>  默认为  <code>0</code>  和  <code>1</code> ;  <code>bit1</code>  表示的函数是该句柄是否可继承，  <code>OpenProcess</code>  的第二个参数与  <code>bit1</code>  有关，31-3 位加上第三位清零存储的是内核对象的地址。低 3 位是属性，2 位默认是 0；1 位表示该句柄是否可继承；0 位默认为 1。</p>\n<div class=\"note warning\">\n<p>上述句柄的结构没有官方公开化文档，是经过逆向分析得到，可以根据自己的需要进行逆向分析。</p>\n</div>\n<p>执行体在创建进程是，首先为新进程分配一个单层句柄表。句柄表的创建工作是通过调用  <code>ExCreateHandleTable</code>  函数来完成的，该函数调用  <code>ExpAllocateHanleTable</code>  来构造出事的句柄表。随着进程中句柄数量的增加，单层句柄表被扩展为二层句柄表，再进一步被扩展为三层句柄表。句柄表的扩展时由函数  <code>ExpAllocateHandleTableEntrySlow</code>  来实现的。</p>\n<div class=\"note info\">\n<p>在句柄表  <code>HANDLE_TABLE</code>  结构中，  <code>FirstFree</code>  域记录了当前句柄表中的空闲句柄链，这是一个单链表，但并非通过指针链接起来，而是用句柄索引值来链接。句柄索引值按  <code>HANDLE_VALUE_INC</code>  逐个递增，这还是一个宏定义，其值为 4。</p>\n<p><code>FirstFree</code>  域指示了链表头的索引值，  <code>HANDLE_TABLE_ENTRY</code>  结构中的  <code>NextFreeTableEntry</code>  成员等于下一个空闲句柄的句柄索引值。因此当进程在执行过程中需要创建新的句柄时，执行体可以直接从空闲句柄链表头得到一个句柄，新的链表头编程原来链表头的  <code>NextFreeTableEntry</code> ，参见  <code>ExpAllocateHandleTableEntry</code>  函数的代码；而当释放句柄时，将待释放的句柄索引赋给  <code>FristFree</code> ，且该句柄项的  <code>NextFreeTableEntry</code>  赋为原来的  <code>FirstFree</code>  参见  <code>ExpFreeHandleTableEntry</code>  函数的代码。</p>\n<p>另外，  <code>HANDLE_TABLE</code>  结构的  <code>NextHandleNeedingPool</code>  域记录了下一次句柄表扩展的其实句柄索引，相当于当前句柄表中所有已分配页面都满了以后下一个页面的起始句柄索引。</p>\n</div>\n<p>理解了 Windows 进程句柄表的结构以后，我们看一下句柄表项的内容和句柄本身。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_HANDLE_TABLE_ENTRY</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">//  The pointer to the object overloaded with three ob attributes bits in</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">//  the lower order and the high bit to denote locked or unlocked entries</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">union</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        PVOID Object<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 指向句柄所代表的的对象</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        ULONG ObAttributes<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 最低三位有特别含义</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        PHANDLE_TABLE_ENTRY_INFO InfoTable<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 各个句柄表页面的第一个表项，使用此成员指向一张表</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        ULONG_PTR Value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">//  This field either contains the granted access mask for the handle or an</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token comment\">//  ob variation that also stores the same information.  Or in the case of</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token comment\">//  a free entry the field stores the index for the next free entry in the</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token comment\">//  free list.  This is like a FAT chain, and is used instead of pointers</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token comment\">//  to make table duplication easier, because the entries can just be</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token comment\">//  copied without needing to modify pointers.</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">union</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">union</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            ACCESS_MASK GrantedAccess<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 访问掩码</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                USHORT GrantedAccessIndex<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                USHORT CreatorBackTraceIndex<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        LONG NextFreeTableEntry<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 空闲时表示下一个空闲句柄索引</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token punctuation\">&#125;</span> HANDLE_TABLE_ENTRY<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>PHANDLE_TABLE_ENTRY<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><div class=\"note info\">\n<p>Object 指针所指的就是句柄所代表的内核对象，它的最低 3 位有特殊的含义</p>\n<table>\n<thead>\n<tr>\n<th><strong>位数</strong></th>\n<th><strong>名称</strong></th>\n<th><strong>含义</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>第 0 位</td>\n<td>OBJ_PROTECT_CLOSE</td>\n<td>表示调用者是否允许关闭该句柄</td>\n</tr>\n<tr>\n<td>第 1 位</td>\n<td>OBJ_INHERIT</td>\n<td>指示该进程所创建的子进程是否可以继承该句柄</td>\n</tr>\n<tr>\n<td>第 2 位</td>\n<td>OBJ_AUDIT_OBJECT_CLOSE</td>\n<td>指示关闭该对象时是否产生一个审计事件</td>\n</tr>\n</tbody>\n</table>\n<p>因此，想要获得句柄对象的地址需要将 Object 的低 3 位清 0，但是此时所得到的对象地址指向的是对象头，偏移 0x18 的地址才是对象的真正地址。</p>\n<p>在第二个 union 中，如果句柄表项指向一个有效的对象，那么，  <code>GranteAccess</code>  成员记录了该句柄的访问掩码；如果是一个空闲的句柄表现，那么，  <code>NextFreeTableEntry</code>  成员将加入到句柄表的空闲单链表中。</p>\n</div>\n<h3 id=\"多层句柄表的解析方法\"><a class=\"anchor\" href=\"#多层句柄表的解析方法\">#</a> 多层句柄表的解析方法</h3>\n<p>第一层<br />\n ID /4 *8</p>\n<p>第二层<br />\n ID/4 /512 计算是那个目录<br />\n ID/4%512 *8</p>\n<p>第三层<br />\n ID/4/512/1024<br />\nID/4/512<br />\nID/4%512 *8</p>\n<p>具体要逆向内核函数  <code>ExpLookupHandleTableEntry</code>  。WRK 中有这个函数。</p>\n<h3 id=\"实验观察进程的句柄表\"><a class=\"anchor\" href=\"#实验观察进程的句柄表\">#</a> 实验：观察进程的句柄表</h3>\n<p>我们得到的句柄值是一个索引，它的值除以 4 是句柄表的下标，通过下标能找到存储在句柄表里的句柄表项，每个占 8 字节。应该是微软考虑兼容的问题。</p>\n<details class=\"info\"><summary>写个for循环，连续打开100和1000次某个内核对象（点击展开）</summary><div>\n<p>代码如下：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;Windows.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tDWORD dwPid <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tHANDLE hPro <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tHWND hWnd <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\thWnd <span class=\"token operator\">=</span> <span class=\"token function\">FindWindow</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"计算器\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token function\">GetWindowThreadProcessId</span><span class=\"token punctuation\">(</span>hWnd<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>dwPid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"PID:%d\\n\"</span><span class=\"token punctuation\">,</span> dwPid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\thPro <span class=\"token operator\">=</span> <span class=\"token function\">OpenProcess</span><span class=\"token punctuation\">(</span>PROCESS_ALL_ACCESS<span class=\"token punctuation\">,</span> TRUE<span class=\"token punctuation\">,</span> dwPid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"句柄：%#X\\t\\n\"</span><span class=\"token punctuation\">,</span> hPro<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token function\">Test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>执行结果如下：</p>\n<p><img data-src=\"image002.png\" alt=\"\" /></p>\n</div></details>\n<details class=\"info\"><summary>在Windbg中查看句柄表</summary><div>\n<ol>\n<li>打开一个进程，本次实验就选择计算器了（calc.exe）</li>\n<li>执行上面的代码</li>\n<li>在 WinDbg 中定位句柄表</li>\n</ol>\n<p>首先在 windbg 查看所有进程  <code>!process 0 0</code> ，找到执行上面代码的进程，查看进程的  <code>EPROCESS</code>  结构体的 0xc4 的位置</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kd&gt; dt _EPROCESS 89d2b020</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>nt!_EPROCESS</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   +0x000 Pcb              : _KPROCESS</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   +0x06c ProcessLock      : _EX_PUSH_LOCK</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   +0x070 CreateTime       : _LARGE_INTEGER 0x01d81906&#96;e28e540a</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   +0x078 ExitTime         : _LARGE_INTEGER 0x0</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   +0x080 RundownProtect   : _EX_RUNDOWN_REF</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   +0x084 UniqueProcessId  : 0x0000013c Void</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   +0x088 ActiveProcessLinks : _LIST_ENTRY [0x89e890a8 - 0x89d31ba8]</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   +0x090 QuotaUsage       : [3] 0x618</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   +0x09c QuotaPeak        : [3] 0x808</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   +0x0a8 CommitCharge     : 0x72</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   +0x0ac PeakVirtualSize  : 0xf8f000</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   +0x0b0 VirtualSize      : 0xdf7000</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   +0x0b4 SessionProcessLinks : _LIST_ENTRY [ 0x89e890d4 - 0x89d31bd4 ]</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   +0x0bc DebugPort        : 0x89e8ba88 Void</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   +0x0c0 ExceptionPort    : 0xe15d5aa0 Void</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   +0x0c4 ObjectTable      : 0xe31af420 _HANDLE_TABLE &#x2F;&#x2F; 这里</pre></td></tr></table></figure><p>查看进程的句柄表：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kd&gt; dt _HANDLE_TABLE 0xe31af420</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>ntdll!_HANDLE_TABLE</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    [+0x000] TableCode        : 0xe179b000 [Type: unsigned long] &#x2F;&#x2F; 这个地址便是表示句柄表在哪里</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    [+0x004] QuotaProcess     : 0x89d2b020 [Type: _EPROCESS *]</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    [+0x008] UniqueProcessId  : 0x13c [Type: void *]</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    [+0x00c] HandleTableLock  [Type: _EX_PUSH_LOCK [4]]</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    [+0x01c] HandleTableList  [Type: _LIST_ENTRY]</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    [+0x024] HandleContentionEvent [Type: _EX_PUSH_LOCK]</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    [+0x028] DebugInfo        : 0x0 [Type: _HANDLE_TRACE_DEBUG_INFO *]</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    [+0x02c] ExtraInfoPages   : 0 [Type: long]</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    [+0x030] FirstFree        : 0x638 [Type: unsigned long]</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    [+0x034] LastFree         : 0x0 [Type: unsigned long]</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    [+0x038] NextHandleNeedingPool : 0x800 [Type: unsigned long]</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    [+0x03c] HandleCount      : 121 [Type: long]</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    [+0x040] Flags            : 0x0 [Type: unsigned long]</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    [+0x040 ( 0: 0)] StrictFIFO       : 0x0 [Type: unsigned char]</pre></td></tr></table></figure><p>我们以 0x7CC 这个句柄值举例，来弄清楚这个句柄值所代表的的含义。</p>\n<p>首先让这个句柄值除以 4 得到句柄表的下标，再乘以 8（可以直接用句柄值乘以 2）得到相对于句柄表首地址的偏移，这个值加上  <code>TableCode</code>  的值就是这个句柄值在句柄表中所代表的句柄项，剩下的就是分析其结构了。</p>\n<p>我们由上可知  <code>TableCode</code>  的值为： <code>0xe179b000</code> 。</p>\n<p>在 windbg 中查看：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kd&gt; dq 0xe179b000 + 0x7CC * 2</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>e179bf98  001f0fff&#96;89d31b0b 000f01ff&#96;89d71981</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>e179bfa8  000f037f&#96;89f10899 021f0003&#96;89efdf79</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>e179bfb8  020f003f&#96;e3302691 000f037f&#96;89f10899</pre></td></tr></table></figure><p>那么这个  <code>001f0fff`89d31b0b</code>  就是句柄  <code>0x7cc</code>  在句柄表中所对应的句柄项。</p>\n<p>若要根据句柄查找对应的结构体地址，我们还要对  <code>89d31b0b</code>  处理一下，由上面句柄表项的结构，我们知道后三比特位是属性，所以我们把后三比特位清零， <code>b</code>  的二进制为  <code>1011</code>  , 清空后为  <code>1000</code>  既为  <code>8</code> 。</p>\n<p>所以  <code>89d31b0b</code>  处理后为  <code>89d31b08</code>  ，但是，这个地址指向的仍然不是  <code>EPROCESS</code>  ，而是  <code>_OBJECT_HEADER</code>  结构体，这个是每一个内核对象都有的，被称为对象头：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kd&gt; dt _OBJECT_HEADER</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>nt!_OBJECT_HEADER</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   +0x000 PointerCount     : Int4B</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   +0x004 HandleCount      : Int4B</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   +0x004 NextToFree       : Ptr32 Void</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   +0x008 Type             : Ptr32 _OBJECT_TYPE</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   +0x00c NameInfoOffset   : UChar</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   +0x00d HandleInfoOffset : UChar</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   +0x00e QuotaInfoOffset  : UChar</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   +0x00f Flags            : UChar</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   +0x010 ObjectCreateInfo : Ptr32 _OBJECT_CREATE_INFORMATION</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   +0x010 QuotaBlockCharged : Ptr32 Void</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   +0x014 SecurityDescriptor : Ptr32 Void</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   +0x018 Body             : _QUAD</pre></td></tr></table></figure><p>而  <code>89d31b08</code>  指向的是一个完整的内核结构，而一个完整的内核结构一定是以  <code>_OBJECT_HEADER</code>  开头的。不管是  <code>EPROCESS</code>  还是  <code>ETHREAD</code>  结构体，都是在  <code>_OBJECT_HEADER</code>  的  <code> +0x018 Body</code>  位置开始的。所以  <code>89d31b08</code>  加上 0x18 才是计算器的  <code>EPROCESS</code>  结构体。</p>\n<p>在 windbg 中查看：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kd&gt; dt _Eprocess 89d31b08 +0x18</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>nt!_EPROCESS</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   +0x000 Pcb              : _KPROCESS</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   +0x06c ProcessLock      : _EX_PUSH_LOCK</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   ……</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   ……</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   ……</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   ……</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   ……</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   +0x174 ImageFileName    : [16]  &quot;calc.exe&quot; &#x2F;&#x2F; 可以确定我们找到了</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   +0x184 JobLinks         : _LIST_ENTRY [ 0x0 - 0x0 ]</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   +0x18c LockedPagesList  : (null) </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   ……</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   ……</pre></td></tr></table></figure></div></details>\n<details class=\"info\"><summary>总结</summary><div>\n<ol>\n<li>一个进程可以创建、打开很多内核对象，这些内核对象的地址存储在当前进程的句柄表中。我们在应用层得到的句柄值，实际上就是当前进程句柄表的索引。</li>\n<li>同一个内核对象可以被不同的进程所引用，但句柄的值可能一样也可能不一样。</li>\n<li>如果有进程被其他进程打开（使用 OpenProcess）, 那么这个进程的句柄表中就会有痕迹。</li>\n</ol>\n</div></details>\n<h3 id=\"作业\"><a class=\"anchor\" href=\"#作业\">#</a> 作业</h3>\n<details class=\"info\"><summary>遍历（解析）某个进程的句柄表</summary><div>\n<p>代码如下：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;ntddk.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_HANDLE_TABLE_ENTRY_INFO</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token comment\">//  The following field contains the audit mask for the handle if one</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token comment\">//  exists.  The purpose of the audit mask is to record all of the accesses</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token comment\">//  that may have been audited when the handle was opened in order to</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token comment\">//  support \"per operation\" based auditing.  It is computed by walking the</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token comment\">//  SACL of the object being opened and keeping a record of all of the audit</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token comment\">//  ACEs that apply to the open operation going on.  Each set bit corresponds</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token comment\">//  to an access that would be audited.  As each operation takes place, its</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token comment\">//  corresponding access bit is removed from this mask.</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\tACCESS_MASK AuditMask<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span> HANDLE_TABLE_ENTRY_INFO<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span> PHANDLE_TABLE_ENTRY_INFO<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_HANDLE_TABLE_ENTRY</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token comment\">//  The pointer to the object overloaded with three ob attributes bits in</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token comment\">//  the lower order and the high bit to denote locked or unlocked entries</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token keyword\">union</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\tPVOID Object<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 指向句柄所代表的的对象</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\tULONG ObAttributes<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 最低三位有特别含义</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\tPHANDLE_TABLE_ENTRY_INFO InfoTable<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 各个句柄表页面的第一个表项，使用此成员指向一张表</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\tULONG_PTR Value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t<span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t<span class=\"token comment\">//  This field either contains the granted access mask for the handle or an</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t<span class=\"token comment\">//  ob variation that also stores the same information.  Or in the case of</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t<span class=\"token comment\">//  a free entry the field stores the index for the next free entry in the</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t<span class=\"token comment\">//  free list.  This is like a FAT chain, and is used instead of pointers</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t<span class=\"token comment\">//  to make table duplication easier, because the entries can just be</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t<span class=\"token comment\">//  copied without needing to modify pointers.</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t<span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t<span class=\"token keyword\">union</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t\t<span class=\"token keyword\">union</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t\t\tACCESS_MASK GrantedAccess<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 访问掩码</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t\t\t<span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t\t\t\tUSHORT GrantedAccessIndex<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t\t\t\tUSHORT CreatorBackTraceIndex<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t\tLONG NextFreeTableEntry<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 空闲时表示下一个空闲句柄索引</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre></pre></td></tr><tr><td data-num=\"65\"></td><td><pre><span class=\"token punctuation\">&#125;</span> HANDLE_TABLE_ENTRY<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span> PHANDLE_TABLE_ENTRY<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre></pre></td></tr><tr><td data-num=\"67\"></td><td><pre><span class=\"token comment\">// 从 WRK 源码中复制的宏定义</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">TABLE_PAGE_SIZE</span> <span class=\"token expression\">PAGE_SIZE</span></span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">LOWLEVEL_COUNT</span> <span class=\"token expression\"><span class=\"token punctuation\">(</span>TABLE_PAGE_SIZE <span class=\"token operator\">/</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>HANDLE_TABLE_ENTRY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MIDLEVEL_COUNT</span> <span class=\"token expression\"><span class=\"token punctuation\">(</span>PAGE_SIZE <span class=\"token operator\">/</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>PHANDLE_TABLE_ENTRY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">LOWLEVEL_THRESHOLD</span> <span class=\"token expression\">LOWLEVEL_COUNT</span></span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MIDLEVEL_THRESHOLD</span> <span class=\"token expression\"><span class=\"token punctuation\">(</span>MIDLEVEL_COUNT <span class=\"token operator\">*</span> LOWLEVEL_COUNT<span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>VOID <span class=\"token function\">DriverUnload</span><span class=\"token punctuation\">(</span>PDRIVER_OBJECT pDriver<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是驱动，我卸载了\\t\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>VOID <span class=\"token function\">Func</span><span class=\"token punctuation\">(</span>PUCHAR pName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>\t<span class=\"token comment\">//VOID Func(ULONG uPid) &#123;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>\tULONG Pro<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>\t__asm <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>\t\tmov eax<span class=\"token punctuation\">,</span> fs<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0x124</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>\t\tmov eax<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>eax <span class=\"token operator\">+</span> <span class=\"token number\">0x44</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>\t\tmov Pro<span class=\"token punctuation\">,</span> eax<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>\t<span class=\"token comment\">// 进程结构体 EPROCESS +0x88 的位置是一个链接所有进程的双向链表</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>\tPLIST_ENTRY pListProcess <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PLIST_ENTRY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>Pro <span class=\"token operator\">+</span> <span class=\"token number\">0x88</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>\t<span class=\"token comment\">// 遍历进程</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>pListProcess<span class=\"token operator\">-></span>Flink <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span>PLIST_ENTRY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>Pro <span class=\"token operator\">+</span> <span class=\"token number\">0x88</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>\t\t<span class=\"token comment\">//EPROCESS 结构体</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>\t\tULONG NextProcess <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ULONG<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>pListProcess<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">0x88</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">strcmp</span><span class=\"token punctuation\">(</span>pName<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>PUCHAR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>NextProcess <span class=\"token operator\">+</span> <span class=\"token number\">0x174</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>\t\t\t<span class=\"token comment\">//if (uPid == *(PULONG)(NextProcess + 0x84))</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>\t\t\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Eprocess:%#X\\t\\n\"</span><span class=\"token punctuation\">,</span> NextProcess<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>\t\t\t<span class=\"token comment\">// 遍历句柄表</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>\t\t\t<span class=\"token comment\">// 取进程 0xc4 的地址</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>\t\t\tPULONG ObjectTable <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PULONG<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>PULONG<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>NextProcess <span class=\"token operator\">+</span> <span class=\"token number\">0xC4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>\t\t\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ObjectTable:%#X\\t\\n\"</span><span class=\"token punctuation\">,</span> ObjectTable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>\t\t\tPULONG TableCode <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PULONG<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>ObjectTable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>\t\t\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"TableCode:%#X\\t\\n\"</span><span class=\"token punctuation\">,</span> TableCode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>\t\t\t<span class=\"token comment\">// 判断有进程句柄表的层数</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>\t\t\t<span class=\"token comment\">// 取最后两 bit 位</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>\t\t\t<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>TableCode <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>\t\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">0</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>            PHANDLE_TABLE_ENTRY pTableCode <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PHANDLE_TABLE_ENTRY<span class=\"token punctuation\">)</span>TableCode<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>            <span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pTableCode:%#X\\t\\n\"</span><span class=\"token punctuation\">,</span> pTableCode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>\t\t\t\t<span class=\"token comment\">// 开始遍历句柄表，大小时一个页</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">size_t</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> LOWLEVEL_THRESHOLD <span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>\t\t\t\t\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[*]>>-----【第%d项】-----&lt;&lt;[*]\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>\t\t\t\t\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Object:%#010x\\t\\n\"</span><span class=\"token punctuation\">,</span> pTableCode<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>Object<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>\t\t\t\t\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ObAttributes:%#010x\\t\\n\"</span><span class=\"token punctuation\">,</span> pTableCode<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>ObAttributes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>\t\t\t\t\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"InfoTable:%#010x\\t\\n\"</span><span class=\"token punctuation\">,</span> pTableCode<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>InfoTable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>\t\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pTableCode<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>InfoTable <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>\t\t\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>\t\t\t\t\t\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"InfoTable->AuditMask:%#010x\\t\\n\"</span><span class=\"token punctuation\">,</span> pTableCode<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>InfoTable<span class=\"token operator\">-></span>AuditMask<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>\t\t\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>\t\t\t\t\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Value:%#010x\\t\\n\"</span><span class=\"token punctuation\">,</span> pTableCode<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>\t\t\t\t\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GrantedAccess:%#010x\\t\\n\"</span><span class=\"token punctuation\">,</span> pTableCode<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>GrantedAccess<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>\t\t\t\t\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GrantedAccessIndex:%#010x\\t\\n\"</span><span class=\"token punctuation\">,</span> pTableCode<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>GrantedAccessIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>\t\t\t\t\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"CreatorBackTraceIndex:%#010x\\t\\n\"</span><span class=\"token punctuation\">,</span> pTableCode<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>CreatorBackTraceIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>\t\t\t\t\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"NextFreeTableEntry:%#010x\\t\\n\"</span><span class=\"token punctuation\">,</span> pTableCode<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>NextFreeTableEntry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>\t\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>\t\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">2</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>\t\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">3</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre>\t\t\t<span class=\"token keyword\">default</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>\t\t\t\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*HandleTable &amp; 0x3 = %d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>TableCode <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre></pre></td></tr><tr><td data-num=\"151\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre>\t\tpListProcess <span class=\"token operator\">=</span> pListProcess<span class=\"token operator\">-></span>Flink<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"153\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"154\"></td><td><pre></pre></td></tr><tr><td data-num=\"155\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"156\"></td><td><pre></pre></td></tr><tr><td data-num=\"157\"></td><td><pre>NTSTATUS <span class=\"token function\">DriverEntry</span><span class=\"token punctuation\">(</span>PDRIVER_OBJECT pDriver<span class=\"token punctuation\">,</span> PUNICODE_STRING pRegPath<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"158\"></td><td><pre>\tpDriver<span class=\"token operator\">-></span>DriverUnload <span class=\"token operator\">=</span> DriverUnload<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"159\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是驱动,我运行了\\t\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"160\"></td><td><pre>\t<span class=\"token comment\">// 遍历所有进程，遍历该进程的句柄表</span></pre></td></tr><tr><td data-num=\"161\"></td><td><pre>\t<span class=\"token function\">Func</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"calc.exe\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"162\"></td><td><pre>\t<span class=\"token keyword\">return</span> STATUS_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"163\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>仅仅遍历了层数为 1 的句柄表。也可以遍历的更详细，遍历出每个句柄的类型。</p>\n<p><img data-src=\"image005.png\" alt=\"\" /></p>\n</div></details>\n<details class=\"info\"><summary>实现用句柄表反调试</summary><div>\n<p>思路：遍历所有其他进程句柄表，看哪个进程的句柄表中保护自己的进程，如果有，说明正在被调试。</p>\n<p>用一个驱动不停地遍历进程链表，然后遍历进程的句柄表，如果发现句柄表项和游戏 EPROCESS 相等，就意味着被 OpenProcess 了，就认为是被调试了。</p>\n<p>代码：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>暂时pass</pre></td></tr></table></figure></div></details>\n<h2 id=\"全局句柄表\"><a class=\"anchor\" href=\"#全局句柄表\">#</a> 全局句柄表</h2>\n<p>在进程中可以创建、打开很多内核对象，这些内核对象的地址都存储在当前进程的句柄表中。我们在应用层得到的句柄实际上就是句柄表的索引。进程的句柄表是私有的，每个进程都有一个自己的句柄表。除此之外，系统还有一个全局句柄表，其导出变量是： <code>PspCidTable</code></p>\n<p>所有的进程和线程无论无论是否打开，都在这个表中。<br />\n每个进程和线程都有一个唯一的编号： <code>PID</code>  和  <code>TID</code> ，这两个值其实就是全局句柄表中的索引，统称  <code>CID</code> 。进程和线程的查询，主要是以下三个函数，按照给定的  <code>PID</code>  或  <code>TID</code>  从  <code>PspCidTable</code>  从查找相应的进线程对象：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">PsLookupProcessThreadByCid</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">PsLookupProcessByProcessId</span><span class=\"token punctuation\">(</span>HANDLE ProcessId<span class=\"token punctuation\">,</span> PEPROCESS <span class=\"token operator\">*</span>Process<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">PsLookupThreadByThreadId</span><span class=\"token punctuation\">(</span>HANDLE ThreadId<span class=\"token punctuation\">,</span> PETHREAD <span class=\"token operator\">*</span>Thread<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>全局句柄表的结构如下：</p>\n<p><img data-src=\"image004.png\" alt=\"\" /></p>\n<h3 id=\"观察全局句柄表\"><a class=\"anchor\" href=\"#观察全局句柄表\">#</a> 观察全局句柄表</h3>\n<p>在 Windbg 中查看：通过 PID 的值和  <code>PspCidTable</code>  找到内核对象。</p>\n<p>随便打开一个进程，查看其 PID，我打开的计算器的 PID 为 1212，转换为 16 进制为 0x4BC。</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kd&gt; dd PspCidTable</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>805649c0  e1003c58 00000002 00000000 00000000</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>805649d0  00000000 00000000 00000000 00000000</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>805649e0  00000000 00000000 00000000 00000000</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>805649f0  00000000 00000000 00000000 00000000</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>80564a00  00000000 00000000 00000000 00000000</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>80564a10  00000000 00000000 00000000 00000000</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>80564a20  00000000 00000000 00000000 00000000</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>80564a30  00000000 00000000 00000000 00000000</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>kd&gt; dt e1003c58 _HANDLE_TABLE</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>nt!_HANDLE_TABLE</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   +0x000 TableCode        : 0xe1005000</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   +0x004 QuotaProcess     : (null) </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   +0x008 UniqueProcessId  : (null) </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   +0x00c HandleTableLock  : [4] _EX_PUSH_LOCK</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   +0x01c HandleTableList  : _LIST_ENTRY [ 0xe1003c74 - 0xe1003c74 ]</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   +0x024 HandleContentionEvent : _EX_PUSH_LOCK</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   +0x028 DebugInfo        : (null) </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   +0x02c ExtraInfoPages   : 0n0</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>   +0x030 FirstFree        : 0x39c</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>   +0x034 LastFree         : 0x770</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>   +0x038 NextHandleNeedingPool : 0x800</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>   +0x03c HandleCount      : 0n279</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>   +0x040 Flags            : 1</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>   +0x040 StrictFIFO       : 0y1</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>kd&gt; dq 0xe1005000 + 4BC * 2</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>e1005978  00000000&#96;89ee8021 0000055c&#96;00000000</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>e1005988  000000e8&#96;00000000 00000000&#96;89efe8a9</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>e1005998  00000728&#96;00000000 0000070c&#96;00000000</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>e10059a8  00000000&#96;89d4e6a1 000004a0&#96;00000000</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>e10059b8  00000000&#96;8a05c6a9 00000304&#96;00000000</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>e10059c8  00000000&#96;8a0f1da1 00000000&#96;8a0f16c9</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>e10059d8  00000000&#96;89cd7161 00000000&#96;8a08e661</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>e10059e8  000003f8&#96;00000000 00000000&#96;8a19b021</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>kd&gt; dt _EPROCESS 89ee8020 &#x2F;&#x2F; 去掉低三位的属性</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>nt!_EPROCESS</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>   +0x000 Pcb              : _KPROCESS</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>   ……</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>   ……</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>   +0x174 ImageFileName    : [16]  &quot;calc.exe&quot; &#x2F;&#x2F; 找到了</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>   ……</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>   ……</pre></td></tr></table></figure><h1 id=\"reference\"><a class=\"anchor\" href=\"#reference\">#</a> Reference</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxOTg4NDQ4L2FydGljbGUvZGV0YWlscy8xMDQ5NDUzMTE=\">https://blog.csdn.net/qq_41988448/article/details/104945311</span></p>\n<p>《Windows 内核原理与实现》</p>\n",
            "tags": [
                "进程句柄表",
                "全局句柄表"
            ]
        }
    ]
}