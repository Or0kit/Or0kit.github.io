{
    "version": "https://jsonfeed.org/version/1",
    "title": "Or0kit • All posts by \"psconverttoguithread\" tag",
    "description": "临渊羡鱼，不如退而结网",
    "home_page_url": "https://Or0kit.github.io",
    "items": [
        {
            "id": "https://or0kit.github.io/Bin/Core/WindowsXp/MessageMechanism/%E6%B6%88%E6%81%AF%E6%9C%BA%E5%88%B6-01%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E5%9C%A8%E5%93%AA/",
            "url": "https://or0kit.github.io/Bin/Core/WindowsXp/MessageMechanism/%E6%B6%88%E6%81%AF%E6%9C%BA%E5%88%B6-01%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E5%9C%A8%E5%93%AA/",
            "title": "消息机制-01消息队列在哪",
            "date_published": "2022-04-20T07:17:06.000Z",
            "content_html": "<h1 id=\"楔子\"><a class=\"anchor\" href=\"#楔子\">#</a> 楔子</h1>\n<p>接触过编程的人，或多或少用到过消息机制，但大多数人（包括我自己）只是知道相关 API 的基本用法，却不知道它是如何实现的</p>\n<p>从本章起，我们将带着以下几个问题一起来学习消息机制：</p>\n<ol>\n<li>什么是窗口句柄？在哪里？有什么用？</li>\n<li>什么是消息？什么是消息队列？消息队列在哪？</li>\n<li>什么是窗口过程？窗口过程是谁调用的？没有消息循环窗口过程会执行吗？</li>\n<li>为什么要有 w32k.sys 这个模块？</li>\n<li>为什么只有使用图形界面的程序才可以访问 KeServiceDescriptorTableShadow?</li>\n<li>界面 &quot;卡死&quot; 的时候为什么鼠标还可以动？</li>\n</ol>\n<h1 id=\"画一个简单的窗口\"><a class=\"anchor\" href=\"#画一个简单的窗口\">#</a> 画一个简单的窗口</h1>\n<p>从设计层面理解 Windows 的消息机制是怎么来的。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">_WIN32_WINNT</span> <span class=\"token expression\"><span class=\"token number\">0x500</span></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;windows.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_Color</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tDWORD r<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tDWORD g<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tDWORD b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span>Color<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_WindowClass</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tDWORD x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tDWORD y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tDWORD width<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tDWORD height<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\tColor color<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span>WindowClass<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">// 按照 WindowClass 的参数，将 hdc 中的数据打印到指定设备</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">PaintWindows</span><span class=\"token punctuation\">(</span>HDC hdc<span class=\"token punctuation\">,</span> WindowClass <span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\tHBRUSH hBrush<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\thBrush <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>HBRUSH<span class=\"token punctuation\">)</span><span class=\"token function\">GetStockObject</span><span class=\"token punctuation\">(</span>DC_BRUSH<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token function\">SelectObject</span><span class=\"token punctuation\">(</span>hdc<span class=\"token punctuation\">,</span> hBrush<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\">// 画刷</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token function\">SetDCBrushColor</span><span class=\"token punctuation\">(</span>hdc<span class=\"token punctuation\">,</span> <span class=\"token function\">RGB</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-></span>color<span class=\"token punctuation\">.</span>r<span class=\"token punctuation\">,</span> p<span class=\"token operator\">-></span>color<span class=\"token punctuation\">.</span>g<span class=\"token punctuation\">,</span> p<span class=\"token operator\">-></span>color<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token function\">MoveToEx</span><span class=\"token punctuation\">(</span>hdc<span class=\"token punctuation\">,</span> p<span class=\"token operator\">-></span>x<span class=\"token punctuation\">,</span> p<span class=\"token operator\">-></span>y<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token function\">LineTo</span><span class=\"token punctuation\">(</span>hdc<span class=\"token punctuation\">,</span> p<span class=\"token operator\">-></span>x<span class=\"token operator\">+</span>p<span class=\"token operator\">-></span>width<span class=\"token punctuation\">,</span> p<span class=\"token operator\">-></span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token function\">LineTo</span><span class=\"token punctuation\">(</span>hdc<span class=\"token punctuation\">,</span> p<span class=\"token operator\">-></span>x<span class=\"token operator\">+</span>p<span class=\"token operator\">-></span>width<span class=\"token punctuation\">,</span> p<span class=\"token operator\">-></span>y<span class=\"token operator\">+</span>p<span class=\"token operator\">-></span>height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token function\">LineTo</span><span class=\"token punctuation\">(</span>hdc<span class=\"token punctuation\">,</span> p<span class=\"token operator\">-></span>x<span class=\"token punctuation\">,</span> p<span class=\"token operator\">-></span>y<span class=\"token operator\">+</span>p<span class=\"token operator\">-></span>height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token function\">LineTo</span><span class=\"token punctuation\">(</span>hdc<span class=\"token punctuation\">,</span> p<span class=\"token operator\">-></span>x<span class=\"token punctuation\">,</span> p<span class=\"token operator\">-></span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token function\">Rectangle</span><span class=\"token punctuation\">(</span>hdc<span class=\"token punctuation\">,</span> p<span class=\"token operator\">-></span>x<span class=\"token punctuation\">,</span> p<span class=\"token operator\">-></span>y<span class=\"token punctuation\">,</span> p<span class=\"token operator\">-></span>width<span class=\"token punctuation\">,</span> p<span class=\"token operator\">-></span>height<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t<span class=\"token function\">DeleteObject</span><span class=\"token punctuation\">(</span>hBrush<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t<span class=\"token keyword\">char</span> cMessage<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 消息</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\tHWND hwnd<span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\">// 画在哪</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\tHDC hdc<span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\">// 显卡缓存</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t<span class=\"token comment\">// 设置窗口参数，长宽高之类的</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\tWindowClass wClass<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\twClass<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\twClass<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\twClass<span class=\"token punctuation\">.</span>width <span class=\"token operator\">=</span> <span class=\"token number\">800</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\twClass<span class=\"token punctuation\">.</span>height <span class=\"token operator\">=</span> <span class=\"token number\">400</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\twClass<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">.</span>r <span class=\"token operator\">=</span> <span class=\"token number\">0xEF</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\twClass<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">.</span>g <span class=\"token operator\">=</span> <span class=\"token number\">0xEB</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\twClass<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">.</span>b <span class=\"token operator\">=</span> <span class=\"token number\">0xDE</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t<span class=\"token comment\">// 画在哪</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\thwnd <span class=\"token operator\">=</span> <span class=\"token function\">GetDesktopWindow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t<span class=\"token comment\">//hwnd = FindWindow(\"dbgviewClass\", NULL);</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t<span class=\"token comment\">// 获取 DC 设备句柄：可以把 DC 理解成显卡缓存</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\thdc <span class=\"token operator\">=</span> <span class=\"token function\">GetWindowDC</span><span class=\"token punctuation\">(</span>hwnd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t\t<span class=\"token comment\">// 画窗口</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t\t<span class=\"token function\">PaintWindows</span><span class=\"token punctuation\">(</span>hdc<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>wClass<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>\t\tcMessage <span class=\"token operator\">=</span> <span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\t\t<span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>cMessage<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\t\t<span class=\"token keyword\">case</span> <span class=\"token string\">'a'</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\t\t\twClass<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">.</span>r <span class=\"token operator\">+=</span> <span class=\"token number\">0x10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>\t\t\twClass<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">.</span>g <span class=\"token operator\">+=</span> <span class=\"token number\">0x10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>\t\t\twClass<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">.</span>b <span class=\"token operator\">+=</span> <span class=\"token number\">0x10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>\t\t<span class=\"token keyword\">case</span> <span class=\"token string\">'b'</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>\t\t\twClass<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">.</span>r <span class=\"token operator\">-=</span> <span class=\"token number\">0x10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>\t\t\twClass<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">.</span>g <span class=\"token operator\">-=</span> <span class=\"token number\">0x10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>\t\t\twClass<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">.</span>b <span class=\"token operator\">-=</span> <span class=\"token number\">0x10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>运行结果：</p>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<p>我们发现我们画的这个傻瓜窗口：</p>\n<ol>\n<li>被其它窗口覆盖后就消失了</li>\n<li>只能接收键盘发送的消息</li>\n</ol>\n<p>那么如何使窗口能够接收所有消息呢？</p>\n<p>答案：将所有消息放入一块内存中，这块内存被称之为 “消息队列”</p>\n<h1 id=\"消息队列\"><a class=\"anchor\" href=\"#消息队列\">#</a> 消息队列</h1>\n<p>描述：本质上是一种数据结构，当对象接收到消息时，将接收到的所有消息放入消息队列中，等待对象进行处理<br />\n规则：先进先出</p>\n<p><img data-src=\"image002.png\" alt=\"\" /></p>\n<h2 id=\"消息队列在哪\"><a class=\"anchor\" href=\"#消息队列在哪\">#</a> 消息队列在哪？</h2>\n<p>我们假设把消息队列放到用户空间，那么就要有一个专用进程去把这些消息放到各个进程的消息队列中，这就涉及了跨进程通信的问题，因为是这个专用进程负责监听消息，它首先能得到这些消息，然后在分发给其他进程的消息队列，这样的话就会有大量的时间花费在跨进程通信上，Windows 并没有采用这种解决方案，Linux 采用的是这种解决方案。</p>\n<p>在 Linux 中：专用进程</p>\n<ol>\n<li>使用专用进程捕获所有消息</li>\n<li>判断消息所属进程，进行分发，将消息分配到目标进程的消息队列中</li>\n</ol>\n<p><img data-src=\"image003.png\" alt=\"\" /></p>\n<p><strong>微软的解决方案：GUI 线程</strong></p>\n<p>注意 GUI 和 GDI 的区别。</p>\n<p>&lt;1&gt; 当线程刚创建的时候，都是普通线程：<br />\n <code>Thread.ServiceTable-&gt; KeServiceDescriptorTable</code></p>\n<p>&lt;2&gt; 当线程第一次调用  <code>Win32k.sys</code>  时，会调用一个函数：  <code>PsConvertToGuiThread</code></p>\n<p>主要做几件事：<br />\na. 扩充内核栈，必须换成 64KB 的大内核栈，因为普通内核栈只有 12KB 大小。<br />\nb. 创建一个包含消息队列的结构体，并挂到 KTHREAD 上。<br />\nc.  <code>Thread.ServiceTable-&gt; KeServiceDescriptorTableShadow</code> <br />\nd. 把需要的内存数据映射到本进程空间</p>\n<p>Windows 把消息队列存到了 0 环。</p>\n<h2 id=\"如何查找消息队列\"><a class=\"anchor\" href=\"#如何查找消息队列\">#</a> 如何查找消息队列</h2>\n<p>////////<strong> 那么在内核中可以借此判断线程是窗口程序还是控制台程序呢？</strong><br />\n在  <code>KTHREAD</code>  中有一个成员  <code>+0x130 Win32Thread      : Ptr32 Void</code> ，若当前程序使用了图形界面相关的 API，这个成员就指向一个结构体 <code>THREADINFO</code> ，其成员 <code>PQ  pq;</code>  包含了当前线程的消息队列。</p>\n<p>以下是我在 XP 源码中的发现：<br />\n从此函数开始：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>PTHREADINFO <span class=\"token function\">PtiCurrent</span><span class=\"token punctuation\">(</span>VOID<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">ConnectIfNecessary</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>PTHREADINFO<span class=\"token punctuation\">)</span><span class=\"token function\">NtCurrentTebShared</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>Win32ThreadInfo<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">tagTHREADINFO</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    W32THREAD<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">//***************************************** begin: USER specific fields</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    PTL             ptl<span class=\"token punctuation\">;</span>                <span class=\"token comment\">// Listhead for thread lock list</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    PPROCESSINFO    ppi<span class=\"token punctuation\">;</span>                <span class=\"token comment\">// process info struct for this thread</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    PQ              pq<span class=\"token punctuation\">;</span>                 <span class=\"token comment\">// keyboard and mouse input queue</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>……</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>……</pre></td></tr></table></figure><p>下面是结构体 <code>Q</code>  或者说 <code>tagQ</code>  的结构：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * Structure definition for messages as they exist on a Q. Same as MSG</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * structure except for the link-pointer and flags at the end.</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">tagQMSG</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    PQMSG           pqmsgNext<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    PQMSG           pqmsgPrev<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    MSG             msg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    LONG_PTR        ExtraInfo<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    DWORD           dwQEvent<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    PTHREADINFO     pti<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span> QMSG<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">tagMLIST</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    PQMSG pqmsgRead<span class=\"token punctuation\">;</span>        <span class=\"token comment\">// next message to be read. This is a FIFO queue</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    PQMSG pqmsgWriteLast<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// last message  added to the queue. Used mainly for coalescing</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    DWORD cMsgs<span class=\"token punctuation\">;</span>            <span class=\"token comment\">// Count of messages. Used for optimizations and to enforce a max.</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span> MLIST<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>PMLIST<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"21\"></td><td><pre> * Message Queue structure.</pre></td></tr><tr><td data-num=\"22\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"23\"></td><td><pre> * Note, if you need to add a WORD sized value,</pre></td></tr><tr><td data-num=\"24\"></td><td><pre> * do so after xbtnDblClk.</pre></td></tr><tr><td data-num=\"25\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">tagQ</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    MLIST       mlInput<span class=\"token punctuation\">;</span>            <span class=\"token comment\">// raw mouse and key message list.</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    PTHREADINFO ptiSysLock<span class=\"token punctuation\">;</span>         <span class=\"token comment\">// Thread currently allowed to process input</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    ULONG_PTR    idSysLock<span class=\"token punctuation\">;</span>          <span class=\"token comment\">// Last message removed or to be removed before unlocking</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    ULONG_PTR    idSysPeek<span class=\"token punctuation\">;</span>          <span class=\"token comment\">// Last message peeked</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    PTHREADINFO ptiMouse<span class=\"token punctuation\">;</span>           <span class=\"token comment\">// Last thread to get mouse msg.</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    PTHREADINFO ptiKeyboard<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    PWND        spwndCapture<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    PWND        spwndFocus<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    PWND        spwndActive<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    PWND        spwndActivePrev<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    UINT        codeCapture<span class=\"token punctuation\">;</span>        <span class=\"token comment\">// type of captue. See *_CAP* defines in this file</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    UINT        msgDblClk<span class=\"token punctuation\">;</span>          <span class=\"token comment\">// last mouse down message removed</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    WORD        xbtnDblClk<span class=\"token punctuation\">;</span>         <span class=\"token comment\">// last xbutton down</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    DWORD       timeDblClk<span class=\"token punctuation\">;</span>         <span class=\"token comment\">// max time for next button down to be taken as double click</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    HWND        hwndDblClk<span class=\"token punctuation\">;</span>         <span class=\"token comment\">// window that got last button down</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    POINT       ptDblClk<span class=\"token punctuation\">;</span>           <span class=\"token comment\">// last button down position. See SYSMET(C?DOUBLECLK)</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    BYTE        afKeyRecentDown<span class=\"token punctuation\">[</span>CBKEYSTATERECENTDOWN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    BYTE        afKeyState<span class=\"token punctuation\">[</span>CBKEYSTATE<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    CARET       caret<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    PCURSOR     spcurCurrent<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token keyword\">int</span>         iCursorLevel<span class=\"token punctuation\">;</span>       <span class=\"token comment\">// show/hide count. &lt; 0 if the cursor is not visible</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    DWORD       QF_flags<span class=\"token punctuation\">;</span>            <span class=\"token comment\">// QF_ flags go here</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    USHORT      cThreads<span class=\"token punctuation\">;</span>            <span class=\"token comment\">// Count of threads using this queue</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    USHORT      cLockCount<span class=\"token punctuation\">;</span>          <span class=\"token comment\">// Count of threads that don't want this queue freed</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    UINT        msgJournal<span class=\"token punctuation\">;</span>         <span class=\"token comment\">// See SetJournalTimer. Journal message to be delivered when timer goes off</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    LONG_PTR    ExtraInfo<span class=\"token punctuation\">;</span>          <span class=\"token comment\">// Extra info for last qmsg read. See GetMessageExtraInfo</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token punctuation\">&#125;</span> Q<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h1>\n<p>&lt;1&gt; 消息队列存储在 0 环，通过 KTHREAD.Win32Thread 可以找到</p>\n<p>&lt;2&gt; 并不是所有线程都要消息队列，只有 GUI 线程才有消息队列</p>\n<p>&lt;3&gt; 一个 GUI 线程对应 1 个消息队列</p>\n<h1 id=\"reference\"><a class=\"anchor\" href=\"#reference\">#</a> Reference</h1>\n<p>滴水课件</p>\n",
            "tags": [
                "消息队列",
                "PsConvertToGuiThread",
                "win32k.sys",
                "GUI线程"
            ]
        }
    ]
}