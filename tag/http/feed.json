{
    "version": "https://jsonfeed.org/version/1",
    "title": "Or0kit • All posts by \"http\" tag",
    "description": "临渊羡鱼，不如退而结网",
    "home_page_url": "https://Or0kit.github.io",
    "items": [
        {
            "id": "https://or0kit.github.io/Internet/url-http/",
            "url": "https://or0kit.github.io/Internet/url-http/",
            "title": "url-http",
            "date_published": "2020-12-01T00:52:06.000Z",
            "content_html": "<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<blockquote>\n<p>跟着 SECEVERY 学习 web 安全，昨晚讲了 URL 与 http 协议，之前虽然学过，但也忘的不少，这次就总结复习巩固一下</p>\n</blockquote>\n<h1 id=\"什么是url\"><a class=\"anchor\" href=\"#什么是url\">#</a> 什么是 URL？</h1>\n<p>URL 的全称统一资源定位符 (Uniform Resource Locator) 是对可以从互联网上得到的资源的位置和访问方法的一种简洁的表示，是互联网上标准资源的地址。互联网上的每个文件都有一个唯一的 URL，它包含的信息指出文件的位置以及浏览器应该怎么处理它。</p>\n<h1 id=\"url的组成\"><a class=\"anchor\" href=\"#url的组成\">#</a> URL 的组成</h1>\n<p><code>scheme://login:password@address:/path/to/resource?query_string#fragment</code></p>\n<ol>\n<li><code>Scheme</code></li>\n</ol>\n<p>Scheme 是用来指定使用的传输协议，其中最常见的就是 HTTP 协议，它也是互联网中应用最广的协议。其他常用的协议还有:</p>\n<p>Øfile: 用于访问资源位于本地计算机上的文件。<br />\nØftp: 用于访问 FTP 服务器上的资源。<br />\nØhttps: 通过 SSL 协议的 HTTP 访问 web 服务器资源。<br />\nØmailto: 访问资源属于电子邮件地址，通过 SMTP 协议访问。<br />\nØed2k、flashget、thunde 等，通过支持专用下载协议的 P2P 软件访问资源。</p>\n<ol start=\"2\">\n<li>\n<p><code>//</code> <br />\nURL 层级 URL 标记符号，根据 RFC 1738 规定的语法，在授权信息之前，每个层级结构的 URL 中都会包括固定的 “//” 符号。<br />\n非层级结构的 URL:mailto:</p>\n</li>\n<li>\n<p><code>login:password</code></p>\n</li>\n</ol>\n<p>访问资源的身份验证。在 URL 中，身份验证属于可选项，在向服务器申请资源时，在某些情况下，需要指定一个用户名和密码。<br />\n如果没有身份验证字段，浏览器默认以匿名的方式访问资源<br />\n最简单的例子便是访问 FTP 服务器</p>\n<ol start=\"4\">\n<li><code>address</code></li>\n</ol>\n<p>完整的层级 URL，必须有一个域名、IPv4 或者 IPv6 地址作为请求服务器的位置。域名不区分大小写，IPv6 需要括在方括号中。<br />\n这里注意 @符号，<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucXEuY29tQHd3dy5iYWlkdS5jb20=\">https://www.qq.com@www.baidu.com</span> 这个连接点击后会跳转到百度</p>\n<ol start=\"5\">\n<li><code>Port</code></li>\n</ol>\n<p>服务器端口是 URL 中可选内容，在没有指定端口时，会默认去访问协议的标准端口。如 http 的默认端口为 80. 基本上浏览器支持的协议都会有关联的默认服务接口。不过默认接口可以在 URL 中进行修改</p>\n<ol start=\"6\">\n<li><code>/path/to/resource</code></li>\n</ol>\n<p>URL 的这部分被称为层级文件路径，这一结构来源自 UNIX 目录语义，因此保留了对 /../，/./ 的支持。</p>\n<ol start=\"7\">\n<li><code>?query_string</code></li>\n</ol>\n<p>查询字符串是一个非必须的字段，只要负责将一系列非层级格式的任意参数传递给服务器。可同时传递多个参数，参数之间用 “&amp;” 符号连接，每个参数名与值用 “=” 隔开。? 后接参数</p>\n<ol start=\"8\">\n<li><code>#fragment</code></li>\n</ol>\n<p>片段 ID 同样是应用的位置有别于查询字符串，他应用于客户端，片段 ID 值并不会回传至服务端。在实际场景下，片段 ID 一般用于指向页面中的某个锚点，将片段 ID 与与预先设置的锚点名称匹配，并滚到相应的位置</p>\n<h1 id=\"浏览器对url的解析过程\"><a class=\"anchor\" href=\"#浏览器对url的解析过程\">#</a> 浏览器对 URL 的解析过程</h1>\n<blockquote>\n<p>1、提取协议名</p>\n<blockquote>\n<p>浏览器接收到 url 之后会查找第一个 “:”，找到左边的便是协议名。</p>\n</blockquote>\n</blockquote>\n<hr />\n<blockquote>\n<p>2、去除层级标识符</p>\n<blockquote>\n<p>字符串 // 应该算跟在协议名后面的，如果发现有该字符则会跳过该字符，如果没有找到便不管了，所以 http:baidu.com 也是可以访问的。</p>\n</blockquote>\n</blockquote>\n<hr />\n<blockquote>\n<p>3、获取授权信息部分</p>\n<blockquote>\n<p>紧接着会依次扫描 url，以 /、?、#, 那个先出现为准来截取 URL, 如果存在认证信息，提取出来的再查找 @符号，如果找到，@符号左边便是登录信息。<br />\n4、提取目标地址<br />\n第 3 步提取授权信息之后 @符号右边便是目标地址信息。目标地址信息第一个 “：” 分开的就是主机名和端口号。</p>\n</blockquote>\n</blockquote>\n<hr />\n<blockquote>\n<p>5、确认路径</p>\n<blockquote>\n<p>在目标地址部分结尾跟着一个正斜杠，接下来扫描？和 #直至结尾，那个先出现便以那个为准，截取出来中间部分即路径信息。</p>\n</blockquote>\n</blockquote>\n<hr />\n<blockquote>\n<p>6、提取查询字符串</p>\n<blockquote>\n<p>在第 5 步中，如果存在 “？”，便会扫描 #或者至字符串结尾，中间部分便是查询字段。</p>\n</blockquote>\n</blockquote>\n<hr />\n<blockquote>\n<p>7、提取片段 ID</p>\n<blockquote>\n<p>如果成功解析完上一条信息，它最后还跟着 #号那么从这个符号到字符串的结尾便算片段 ID 了，片段 ID 是不会发送到服务器的！一般用来跳到 A 标签的锚链接。</p>\n</blockquote>\n</blockquote>\n<h1 id=\"uri-urn\"><a class=\"anchor\" href=\"#uri-urn\">#</a> URI URN</h1>\n<ul>\n<li>\n<p>URI，是 uniform resource identifier，统一资源标识符，用来唯一的标识一个资源</p>\n</li>\n<li>\n<p>URL 是 uniform resource locator，统一资源定位器，它是一种具体的 URI，即 URL 可以用来标识一个资源，而且还指明了如何 locate 这个资源。</p>\n</li>\n<li>\n<p>URN，uniform resource name，统一资源命名，是通过名字来标识资源，比如 mailto:java-net@java.sun.com。</p>\n</li>\n</ul>\n<p>就不详细介绍另外两个了</p>\n<h1 id=\"http协议\"><a class=\"anchor\" href=\"#http协议\">#</a> HTTP 协议</h1>\n<p>这一篇就够了，不重复造轮子了。<br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vcmFueW9uc3VlL3AvNTk4NDAwMS5odG1s\">https://www.cnblogs.com/ranyonsue/p/5984001.html</span></p>\n<h2 id=\"https\"><a class=\"anchor\" href=\"#https\">#</a> <strong>HTTPS</strong></h2>\n<blockquote>\n<p>在 HTTP 的基础上主要基于 SPDF 协议结合 SSL/TLS 加密协议，客户端依靠证书验证服务器身份传递加密信息的通信协议。</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">时间</th>\n<th style=\"text-align:left\">版本</th>\n<th style=\"text-align:center\">功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">1991 年</td>\n<td style=\"text-align:left\">HTTP/0.9</td>\n<td style=\"text-align:center\">仅支持 GET 请求，不支持请求头</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">1996 年</td>\n<td style=\"text-align:left\">HTTP/1.0</td>\n<td style=\"text-align:center\">默认短连接（一次请求建议一次 TCP 连接，请求完就断开），支持 GET、POST、 HEAD 请求</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">1999 年</td>\n<td style=\"text-align:left\">HTTP/1.1</td>\n<td style=\"text-align:center\">默认长连接（一次 TCP 连接可以多次请求）；支持 PUT、DELETE、PATCH 等六种请求增加 host 头，支持虚拟主机；支持断点续传功能</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">2015 年</td>\n<td style=\"text-align:left\">HTTP/2.0</td>\n<td style=\"text-align:center\">多路复用，降低开销（一次 TCP 连接可以处理多个请求）；服务器主动推送（相关资源一个请求全部推送）；解析基于二进制，解析错误少，更高效（HTTP/1.X 解析基于文本）；报头压缩，降低开销。</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"15种http请求方法\"><a class=\"anchor\" href=\"#15种http请求方法\">#</a> <strong>15 种 http 请求方法</strong></h2>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">编号</th>\n<th style=\"text-align:left\">方法</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">1</td>\n<td style=\"text-align:left\">GET</td>\n<td style=\"text-align:center\">请求指定的页面信息，并返回实体主体</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">2</td>\n<td style=\"text-align:left\">HEAD</td>\n<td style=\"text-align:center\">类似于 get 请求，只不过返回的响应中没有具体的内容，用于获取报头</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">3</td>\n<td style=\"text-align:left\">POST</td>\n<td style=\"text-align:center\">向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。POST 请求可能会导致新的资源的建立和 / 或已有资源的修改</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">4</td>\n<td style=\"text-align:left\">PUT</td>\n<td style=\"text-align:center\">从客户端向服务器传送的数据取代指定的文档的内容</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">5</td>\n<td style=\"text-align:left\">DELETE</td>\n<td style=\"text-align:center\">请求服务器删除指定的页面。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">6</td>\n<td style=\"text-align:left\">CONNECT</td>\n<td style=\"text-align:center\">HTTP/1.1 协议中预留给能够将连接改为管道方式的代理服务器。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">7</td>\n<td style=\"text-align:left\">OPTIONS</td>\n<td style=\"text-align:center\">允许客户端查看服务器的性能。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">8</td>\n<td style=\"text-align:left\">TRACE</td>\n<td style=\"text-align:center\">回显服务器收到的请求，主要用于测试或诊断。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">9</td>\n<td style=\"text-align:left\">PATCH</td>\n<td style=\"text-align:center\">实体中包含一个表，表中说明与该 URI 所表示的原内容的区别。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">10</td>\n<td style=\"text-align:left\">MOVE</td>\n<td style=\"text-align:center\">请求服务器将指定的页面移至另一个网络地址。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">11</td>\n<td style=\"text-align:left\">COPY</td>\n<td style=\"text-align:center\">请求服务器将指定的页面拷贝至另一个网络地址。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">12</td>\n<td style=\"text-align:left\">LINK</td>\n<td style=\"text-align:center\">请求服务器建立链接关系。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">13</td>\n<td style=\"text-align:left\">UNLINK</td>\n<td style=\"text-align:center\">断开链接关系。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">14</td>\n<td style=\"text-align:left\">WRAPPED</td>\n<td style=\"text-align:center\">允许客户端发送经过封装的请求。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">15</td>\n<td style=\"text-align:left\">Extension-mothed</td>\n<td style=\"text-align:center\">在不改动协议的前提下，可增加另外的方法。</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"http-状态消息\"><a class=\"anchor\" href=\"#http-状态消息\">#</a> HTTP 状态消息</h2>\n<blockquote>\n<p>当浏览器从 web 服务器请求服务时，可能会发生错误。</p>\n</blockquote>\n<p><strong>以下列举了有可能会返回的一系列 HTTP 状态消息：</strong></p>\n<p>1xx: 信息</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">消息：</th>\n<th style=\"text-align:center\">描述：</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">100 Continue</td>\n<td style=\"text-align:center\">服务器仅接收到部分请求，如果服务器没有拒绝该请求，客户端应该继续发送其余的请求。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">101 Switching Protocols</td>\n<td style=\"text-align:center\">服务器转换协议：服务器将遵从客户的请求转换到另外一种协议。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">103 Checkpoint</td>\n<td style=\"text-align:center\">用于 PUT 或者 POST 请求恢复失败时的恢复请求建议。</td>\n</tr>\n</tbody>\n</table>\n<p>2xx: 成功</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">消息：</th>\n<th style=\"text-align:center\">描述：</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">200 OK</td>\n<td style=\"text-align:center\">请求成功（这是对 HTTP 请求成功的标准应答。）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">201 Created</td>\n<td style=\"text-align:center\">请求被创建完成，同时新的资源被创建。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">202 Accepted</td>\n<td style=\"text-align:center\">供处理的请求已被接受，但是处理未完成。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">203 Non-Authoritative Information</td>\n<td style=\"text-align:center\">请求已经被成功处理，但是一些应答头可能不正确，因为使用的是其他文档的拷贝。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">204 No Content</td>\n<td style=\"text-align:center\">请求已经被成功处理，但是没有返回新文档。浏览器应该继续显示原来的文档。如果用户定期地刷新页面，而 Servlet 可以确定用户文档足够新，这个状态代码是很有用的。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">205 Reset Content</td>\n<td style=\"text-align:center\">请求已经被成功处理，但是没有返回新文档。但浏览器应该重置它所显示的内容。用来强制浏览器清除表单输入内容。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">206 Partial Content</td>\n<td style=\"text-align:center\">客户发送了一个带有 Range 头的 GET 请求，服务器完成了它。</td>\n</tr>\n</tbody>\n</table>\n<p>3xx: 重定向</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">消息：</th>\n<th style=\"text-align:center\">描述：</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">300 Multiple Choices</td>\n<td style=\"text-align:center\">多重选择。链接列表。用户可以选择某链接到达目的地。最多允许五个地址。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">301 Moved Permanently</td>\n<td style=\"text-align:center\">所请求的页面已经转移至新的 URL 。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">302 Found</td>\n<td style=\"text-align:center\">所请求的页面已经临时转移至新的 URL 。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">303 See Other</td>\n<td style=\"text-align:center\">所请求的页面可在别的 URL 下被找到。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">304 Not Modified</td>\n<td style=\"text-align:center\">未按预期修改文档。客户端有缓冲的文档并发出了一个条件性的请求（一般是提供 If-Modified-Since 头表示客户只想比指定日期更新的文档）。服务器告诉客户，原来缓冲的文档还可以继续使用。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">305 Use Proxy</td>\n<td style=\"text-align:center\">客户请求的文档应该通过 Location 头所指明的代理服务器提取。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">306 Switch Proxy</td>\n<td style=\"text-align:center\">目前已不再使用，但是代码依然被保留。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">307 Temporary Redirect</td>\n<td style=\"text-align:center\">被请求的页面已经临时移至新的 URL 。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">308 Resume Incomplete</td>\n<td style=\"text-align:center\">用于 PUT 或者 POST 请求恢复失败时的恢复请求建议。</td>\n</tr>\n</tbody>\n</table>\n<p>4xx: 客户端错误</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">消息：</th>\n<th style=\"text-align:center\">描述：</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">400 Bad Request</td>\n<td style=\"text-align:center\">因为语法错误，服务器未能理解请求。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">401 Unauthorized</td>\n<td style=\"text-align:center\">合法请求，但对被请求页面的访问被禁止。因为被请求的页面需要身份验证，客户端没有提供或者身份验证失败。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">402 Payment Required</td>\n<td style=\"text-align:center\">此代码尚无法使用。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">403 Forbidden</td>\n<td style=\"text-align:center\">合法请求，但对被请求页面的访问被禁止。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">404 Not Found</td>\n<td style=\"text-align:center\">服务器无法找到被请求的页面。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">405 Method Not Allowed</td>\n<td style=\"text-align:center\">请求中指定的方法不被允许。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">406 Not Acceptable</td>\n<td style=\"text-align:center\">服务器生成的响应无法被客户端所接受。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">407 Proxy Authentication Required</td>\n<td style=\"text-align:center\">用户必须首先使用代理服务器进行验证，这样请求才会被处理。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">408 Request Timeout</td>\n<td style=\"text-align:center\">请求超出了服务器的等待时间。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">409 Conflict</td>\n<td style=\"text-align:center\">由于冲突，请求无法被完成。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">410 Gone</td>\n<td style=\"text-align:center\">被请求的页面不可用。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">411 Length Required\t&quot;Content-Length&quot;</td>\n<td style=\"text-align:center\">未被定义。如果无此内容，服务器不会接受请求。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">412 Precondition Failed</td>\n<td style=\"text-align:center\">请求中的前提条件被服务器评估为失败。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">413 Request Entity Too Large</td>\n<td style=\"text-align:center\">由于所请求的实体太大，服务器不会接受请求。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">414 Request-URI Too Long</td>\n<td style=\"text-align:center\">由于 URL 太长，服务器不会接受请求。当 POST 请求被转换为带有很长的查询信息的 GET 请求时，就会发生这种情况。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">415 Unsupported Media Type</td>\n<td style=\"text-align:center\">由于媒介类型不被支持，服务器不会接受请求。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">416 Requested Range Not Satisfiable</td>\n<td style=\"text-align:center\">客户端请求部分文档，但是服务器不能提供被请求的部分。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">417 Expectation Failed</td>\n<td style=\"text-align:center\">服务器不能满足客户在请求中指定的请求头。</td>\n</tr>\n</tbody>\n</table>\n<p>5xx: 服务器错误</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">消息：</th>\n<th style=\"text-align:center\">描述：</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">500 Internal Server Error</td>\n<td style=\"text-align:center\">请求未完成。服务器遇到不可预知的情况。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">501 Not Implemented</td>\n<td style=\"text-align:center\">请求未完成。服务器不支持所请求的功能，或者服务器无法完成请求。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">502 Bad Gateway</td>\n<td style=\"text-align:center\">请求未完成。服务器充当网关或者代理的角色时，从上游服务器收到一个无效的响应。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">503 Service Unavailable</td>\n<td style=\"text-align:center\">服务器当前不可用（过载或者当机）。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">504 Gateway Timeout</td>\n<td style=\"text-align:center\">网关超时。服务器充当网关或者代理的角色时，未能从上游服务器收到一个及时的响应。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">505 HTTP Version Not Supported</td>\n<td style=\"text-align:center\">服务器不支持请求中指明的 HTTP 协议版本。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">511 Network Authentication Required</td>\n<td style=\"text-align:center\">用户需要提供身份验证来获取网络访问入口。</td>\n</tr>\n</tbody>\n</table>\n<p>附上链接<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS90YWdzL2h0bWwtaHR0cG1lc3NhZ2VzLmh0bWw=\"> https://www.runoob.com/tags/html-httpmessages.html</span></p>\n",
            "tags": [
                "url",
                "http"
            ]
        }
    ]
}