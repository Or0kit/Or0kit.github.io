{
    "version": "https://jsonfeed.org/version/1",
    "title": "Or0kit • All posts by \"win事件\" tag",
    "description": "临渊羡鱼，不如退而结网",
    "home_page_url": "https://Or0kit.github.io",
    "items": [
        {
            "id": "https://or0kit.github.io/Bin/Win32/Win%E4%BA%8B%E4%BB%B6/",
            "url": "https://or0kit.github.io/Bin/Win32/Win%E4%BA%8B%E4%BB%B6/",
            "title": "Win事件与线程同步",
            "date_published": "2021-06-03T04:56:46.000Z",
            "content_html": "<h1 id=\"通知类型\"><a class=\"anchor\" href=\"#通知类型\">#</a> 通知类型</h1>\n<p>创建通知类型</p>\n<h2 id=\"createevent函数\"><a class=\"anchor\" href=\"#createevent函数\">#</a> CreateEvent 函数</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>HANDLE <span class=\"token function\">CreateEvent</span><span class=\"token punctuation\">(</span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  LPSECURITY_ATTRIBUTES lpEventAttributes<span class=\"token punctuation\">,</span> <span class=\"token comment\">// SD  </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  BOOL bManualReset<span class=\"token punctuation\">,</span>                       <span class=\"token comment\">// reset type  </span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  BOOL bInitialState<span class=\"token punctuation\">,</span>                      <span class=\"token comment\">// initial state  </span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  LPCTSTR lpName                           <span class=\"token comment\">// object name  </span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"参数解析\"><a class=\"anchor\" href=\"#参数解析\">#</a> 参数解析</h2>\n<h3 id=\"lpeventattributes\"><a class=\"anchor\" href=\"#lpeventattributes\">#</a> lpEventAttributes</h3>\n<p>指向 <code>SECURITY_ATTRIBUTES</code>  结构体，此结构体决定函数的返回句柄是否可以让子进程继承。如果这个参数为 <code>NULL</code> ，这个句柄是不能继承的。一般情况下，这个参数设置为 <code>NULL</code> 。</p>\n<h3 id=\"bmanualreset\"><a class=\"anchor\" href=\"#bmanualreset\">#</a> bManualReset</h3>\n<p>指定将创建的 <code>EVENT</code>  是自动复位还是手动复位。如果为 <code>TRUE</code> ，需要用 <code>ResetEvent(HANDLE)</code>  函数手动复位状态为无信号，即一旦改 <code>EVENT</code>  被设置成有信号，则它会一直等到 <code>ResetEvent</code>  调用时才为无信号状态。如果为 <code>FALSE</code> ，当一个有信号的等待线程被释放后，系统会自动复位状态为无信号状态。</p>\n<h3 id=\"binitialstate\"><a class=\"anchor\" href=\"#binitialstate\">#</a> bInitialState</h3>\n<p>指定事件对象的初始状态。如果为 <code>TRUE</code> ，初始状态为有信号，否则为无信号。</p>\n<h3 id=\"lpname\"><a class=\"anchor\" href=\"#lpname\">#</a> lpName</h3>\n<p>事件对象的名称，以字符串表示。名称的长度受 <code>MAX_PATH</code>  的限制，名称是大小写敏感的。</p>\n<p>如果 <code>lpName</code>  匹配一个存在的命名的事件对象，函数将请求 <code>EVENT_ALL_ACCESS</code>  来访问存在的对象。在这种情况下， <code>bManualReset</code>  和 <code>bInitialState</code>  被忽略，因为这两个参数已经被存在的事件设置。如果 <code>lpEventAttributes</code>  参数不为 <code>NULL</code> ，这个参数可以决定是否句柄被继承，但是它的安全描述 <code>（security-descriptor）</code> 成员被忽略。</p>\n<p>如果 <code>lpName</code>  为 <code>NULL</code> ，创建一个没有名称的事件。</p>\n<p>如果 <code>lpName</code>  匹配一个存在的 <code>semaphore</code> , <code>mutex</code> ,  <code>waitable timer</code> ,  <code>job</code>  或者 <code>file-mapping</code>  对象的名称，函数调用失败， <code>GetLastError</code>  函数返回 <code>ERROR_INVALID_HANDLE</code> 。由于这些对象共享相同的命名空间，才导致这种情况的发生。</p>\n<h2 id=\"返回值\"><a class=\"anchor\" href=\"#返回值\">#</a> 返回值</h2>\n<p>函数返回句柄，该句柄具有 <code>EVENT_ALL_ACCESS</code>  权限去访问新的事件对象，同时它可以在任何需要事件对象句柄的函数中使用。</p>\n<h2 id=\"事件的初始状态\"><a class=\"anchor\" href=\"#事件的初始状态\">#</a> 事件的初始状态</h2>\n<p>事件对象的初始状态由 <code>bInitialState</code>  参数指定，用 <code>SetEvent函数</code> 可以设置对象为有信号状态，用 <code>ResetEvent函数</code> 可以设置对象为无信号状态。</p>\n<p><span class=\"label info\">应用:</span><br />\n 调用过程中的任何线程，都可以在一个等待函数中指定事件对象句柄。当指定的对象的状态为有信号时，单对象等待函数（例如 WaitForSingleObject）返回。对于多对象等待函数（例如 WaitForMultipleObjects），可以指定为任意或所有指定的对象被置为有信号状态。当等待函数返回时，等待线程将被释放去继续它的执行。</p>\n<p>当一个手动复原的事件对象的状态被置为有信号状态时，该对象将一直保持有信号状态，直至明确调用 <code>ResetEvent</code>  函数将其置为无符号状态。</p>\n<p>注意： <span class=\"label danger\">当事件对象被设置为有信号状态时，任何数量的等待线程或者随后等待的线程都会被释放。</span></p>\n<p><code>SetEvent(HANDLE hEvent);</code> <br />\n <code>ResetEvent(HANDLE hEvent);</code></p>\n<h2 id=\"实例代码\"><a class=\"anchor\" href=\"#实例代码\">#</a> 实例代码</h2>\n<p>通过修改 <code>bManualReset</code>  和 <code>bInitialState</code>  来深刻理解 <code>CreateEvent</code>  函数</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;windows.h></span>  </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>DWORD WINAPI <span class=\"token function\">ThreadProc1</span><span class=\"token punctuation\">(</span>LPVOID lpParam<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>DWORD WINAPI <span class=\"token function\">ThreadProc2</span><span class=\"token punctuation\">(</span>LPVOID lpParam<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>HANDLE hEvent <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>HANDLE hThread1 <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>HANDLE hThread2 <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> args<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    hEvent <span class=\"token operator\">=</span> <span class=\"token function\">CreateEvent</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> TRUE<span class=\"token punctuation\">,</span> TRUE<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 使用手动重置为无信号状态，初始化时有信号状态</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    从结果中看，执行完线程 1 又执行了线程 2.</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    hEvent 一直处于有信号状态，无论线程 1 是否释放，hEvent 仍处于有信号状态，所以线程 2 也正常执行了。</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    */</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">//hEvent = CreateEvent (NULL, FALSE, FALSE, NULL);// 使用自动重置为无信号状态，初始化为无信号状态</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    由于调用 SetEvent，hEvent 为有信号状态，线程 1 正常执行，又由于调用完线程 1 后，hEvent 自动重置为无信号状态，所以线程 2 只能在等待，直到主线程退出。</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    修改：线程 1 中的 SetEvent (hEvent); 的注释去掉，再运行，则线程 1 和线程 2 都会执行。</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    */</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token comment\">//hEvent = CreateEvent (NULL, FALSE, TRUE, NULL); // 当一个等待线程被释放时，自动重置为无信号状态，初始是有信号状态  </span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    从执行结果中分析，执行了线程 1，线程 2 一直在等待，直到主线程结束。</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    由于 hEvent = CreateEvent (NULL, FALSE, TRUE, NULL)，当一个等待线程被释放时，自动重置为无信号状态，初始是有信号状态</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    初始执行线程 1 的时候，hEvent 是有信号的，所以线程 1 正常执行；又由于 bManualReset=FALSE，所以执行完线程 1 后，hEvent 自动重置为无信号状态</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    WaitForSingleObject (hEvent,INFINITE); 函数一直在等待 hEvent 变为有信号状态，但是当主线程执行完，还没等待到，线程 2 程序一直没有走下去。</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    */</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token comment\">//hEvent = CreateEvent (NULL, TRUE, FALSE, NULL);// 使用手动重置为无信号状态，初始化时无信号状态</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    执行结果，可想而知，只能输出：</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    in thread1@!</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    in thread2@!</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    因为初始为无信号状态，所以 hEvent 一直处于无信号状态，因此这两个线程一直在等待，直到主线程结束。</pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    修改：放开例子中的注释部分：</pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    if (SetEvent (hEvent))// 设置信号为有信号状态</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    &#123;</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    cout &lt;&lt; \"setEvent 成功\" &lt;&lt;endl;</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    &#125;</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    可见，线程 1 和线程 2 都执行了。</pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    因为调用 SetEvent，事件变为有信号状态，线程 1 执行；又由于线程 1 释放后，hEvent 仍旧处于有信号状态，所以线程 2 也执行了。</pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    再修改：在线程 1 中，添加 ResetEvent (hEvent)（手动设置事件为无信号状态），则线程 2 不会执行。</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    */</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token comment\">// 在第 1、3、4 种情况下注释 SetEvent 函数</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token comment\">//if (SetEvent(hEvent))  </span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token comment\">//&#123;  </span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token comment\">//  cout &lt;&lt; \"setEvent 成功\" &lt;&lt;endl;  </span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token comment\">//&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token comment\">// 创建线程</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    hThread1 <span class=\"token operator\">=</span> <span class=\"token function\">CreateThread</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>LPTHREAD_START_ROUTINE<span class=\"token punctuation\">)</span>ThreadProc1<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    <span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    hThread2 <span class=\"token operator\">=</span> <span class=\"token function\">CreateThread</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>LPTHREAD_START_ROUTINE<span class=\"token punctuation\">)</span>ThreadProc2<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    <span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre></pre></td></tr><tr><td data-num=\"70\"></td><td><pre></pre></td></tr><tr><td data-num=\"71\"></td><td><pre></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span> <span class=\"token operator\">==</span> hThread1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"create thread fail!\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>    <span class=\"token comment\">//system(\"pause\");</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>DWORD WINAPI <span class=\"token function\">ThreadProc1</span><span class=\"token punctuation\">(</span>LPVOID lpParam<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"in thread1@!\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>    DWORD dReturn <span class=\"token operator\">=</span> <span class=\"token function\">WaitForSingleObject</span><span class=\"token punctuation\">(</span>hEvent<span class=\"token punctuation\">,</span> INFINITE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>WAIT_OBJECT_0 <span class=\"token operator\">==</span> dReturn<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" thread1 signaled ! \"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"in thread1 --signal\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>    <span class=\"token comment\">//SetEvent(hEvent); </span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>    <span class=\"token comment\">//ResetEvent(hEvent);</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>DWORD WINAPI <span class=\"token function\">ThreadProc2</span><span class=\"token punctuation\">(</span>LPVOID lpParam<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"in thread2@!\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>    DWORD dReturn <span class=\"token operator\">=</span> <span class=\"token function\">WaitForSingleObject</span><span class=\"token punctuation\">(</span>hEvent<span class=\"token punctuation\">,</span> INFINITE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>WAIT_OBJECT_0 <span class=\"token operator\">==</span> dReturn<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"thread2 signaled ! \"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"in thread2--signal\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"线程同步\"><a class=\"anchor\" href=\"#线程同步\">#</a> 线程同步</h1>\n<p>线程互斥：线程互斥是指对于共享的进程系统资源，在各单个线程访问时的排它性。当有若干个线程都要使用某一共享资源时， 任何时刻最多只允许一个线程去使用，其它要使用该资源的线程必须等待，直到占用资源者释放该资源。</p>\n<p>线程同步：线程同步是指线程之间所具有的一种制约关系，一个线程的执行依赖另一个线程的消息，当它没有得到另一个线程的消息时应等待，直到消息到达时才被唤醒。</p>\n<p>同步 = 互斥 + 有序执行</p>\n<p>同步的前提是互斥</p>\n<h2 id=\"生产者和消费者\"><a class=\"anchor\" href=\"#生产者和消费者\">#</a> 生产者和消费者</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;Windows.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>HANDLE hproducer<span class=\"token punctuation\">,</span> hconsumer<span class=\"token punctuation\">;</span><span class=\"token comment\">// 生产者消费者句柄</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> G_Max <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">int</span> G_Product <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>DWORD WINAPI <span class=\"token function\">Thread1</span><span class=\"token punctuation\">(</span>LPVOID lpParam<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>DWORD WINAPI <span class=\"token function\">Thread2</span><span class=\"token punctuation\">(</span>LPVOID lpParam<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tHANDLE hThread<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\thproducer <span class=\"token operator\">=</span> <span class=\"token operator\">::</span><span class=\"token function\">CreateEvent</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> FALSE<span class=\"token punctuation\">,</span> TRUE<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\thconsumer <span class=\"token operator\">=</span> <span class=\"token operator\">::</span><span class=\"token function\">CreateEvent</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> FALSE<span class=\"token punctuation\">,</span> FALSE<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\thThread<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">::</span><span class=\"token function\">CreateThread</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> Thread1<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\thThread<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">::</span><span class=\"token function\">CreateThread</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> Thread2<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token function\">WaitForMultipleObjects</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> hThread<span class=\"token punctuation\">,</span> TRUE<span class=\"token punctuation\">,</span> INFINITE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token function\">CloseHandle</span><span class=\"token punctuation\">(</span>hThread<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token function\">CloseHandle</span><span class=\"token punctuation\">(</span>hThread<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token function\">CloseHandle</span><span class=\"token punctuation\">(</span>hproducer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token function\">CloseHandle</span><span class=\"token punctuation\">(</span>hconsumer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>DWORD WINAPI <span class=\"token function\">Thread1</span><span class=\"token punctuation\">(</span>LPVOID lpParam<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> G_Max<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\t<span class=\"token function\">WaitForSingleObject</span><span class=\"token punctuation\">(</span>hproducer<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 一直在等待信号</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\t<span class=\"token operator\">++</span>G_Product<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\tDWORD id <span class=\"token operator\">=</span> <span class=\"token operator\">::</span><span class=\"token function\">GetCurrentThreadId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"生产者%d生产一个！产品数量为%d\\n\"</span><span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">,</span> G_Product<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\t<span class=\"token function\">SetEvent</span><span class=\"token punctuation\">(</span>hconsumer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>DWORD WINAPI <span class=\"token function\">Thread2</span><span class=\"token punctuation\">(</span>LPVOID lpParam<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> G_Max<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t\t<span class=\"token function\">WaitForSingleObject</span><span class=\"token punctuation\">(</span>hconsumer<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t\t<span class=\"token operator\">--</span>G_Product<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t\tDWORD id <span class=\"token operator\">=</span> <span class=\"token operator\">::</span><span class=\"token function\">GetCurrentThreadId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"消费者%d消费一个!产品剩余数量为%d\\n\"</span><span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">,</span> G_Product<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t\t<span class=\"token function\">SetEvent</span><span class=\"token punctuation\">(</span>hproducer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"reference\"><a class=\"anchor\" href=\"#reference\">#</a> Reference</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE2NDI3NzQvYXJ0aWNsZS9kZXRhaWxzLzUyNzg5OTY5\">https://blog.csdn.net/u011642774/article/details/52789969</span></p>\n",
            "tags": [
                "Win事件",
                "线程同步"
            ]
        }
    ]
}