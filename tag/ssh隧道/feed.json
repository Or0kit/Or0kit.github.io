{
    "version": "https://jsonfeed.org/version/1",
    "title": "Or0kit • All posts by \"ssh隧道\" tag",
    "description": "临渊羡鱼，不如退而结网",
    "home_page_url": "https://Or0kit.github.io",
    "items": [
        {
            "id": "https://or0kit.github.io/Programming/Python/BHP%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%88%E4%B8%89%EF%BC%89-SSH%E4%B8%8ESSH%E9%9A%A7%E9%81%93/",
            "url": "https://or0kit.github.io/Programming/Python/BHP%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%88%E4%B8%89%EF%BC%89-SSH%E4%B8%8ESSH%E9%9A%A7%E9%81%93/",
            "title": "BHP第二章（三）-SSH与SSH隧道",
            "date_published": "2021-01-27T15:43:48.000Z",
            "content_html": "<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<p>通过 python 打造自己的 SSH (Secure Shell)。</p>\n<h1 id=\"通过paramiko使用ssh\"><a class=\"anchor\" href=\"#通过paramiko使用ssh\">#</a> 通过 paramiko 使用 SSH</h1>\n<h2 id=\"例子\"><a class=\"anchor\" href=\"#例子\">#</a> 例子</h2>\n<p>paramiko 是第三方库，要用 pip 安装。 <code>pip install paramiko</code></p>\n<p>在 python 的世界里，可以使用原始套接字和一些加密函数创建自己的 SSH 客户端或者服务端。但 python 中也有现成模块，使用 paramiko 库中的 PyCrypto 能让我们轻松使用 SSH2 协议</p>\n<p>在示例中，我们首先需要引入 <code>paramiko</code>  库，然后使用 <code>SSHClient()</code>  方法实例化对象，然后使用 <code>load_host_key()</code>  方法密钥认证的方式连接服务器，这里让实验可视化使用 <code>connect()</code>  方法以明文密码的方式连接服务器，连接服务器之前可以使用 <code>set_missing_host_key_policy()</code>  设置对于服务器密钥的策略，使用 <code>AutoAddPolicy()</code>  设置策略为自动添加服务器密钥，然后使用 <code>get_transport()</code>  与 <code>open_session()</code>  方法来得到 ssh 加密通道和打开线程，运用 if 语句与 acitve 属性判断线程是否存活，如果存活，使用 <code>exec_command()</code>  来执行我们想要执行的命令，通过 <code>recv()</code>  方法将命令在服务器执行后的结果返回给我们，这里也需要注意编码问题</p>\n<p><span class=\"label\">Code</span></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> paramiko</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">loging_shh</span><span class=\"token punctuation\">(</span>ip<span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">,</span> passwd<span class=\"token punctuation\">,</span> command<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    client <span class=\"token operator\">=</span> paramiko<span class=\"token punctuation\">.</span>SSHClient<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\"># client.load_host_keys('/root/.ssh/konw_hosts')</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    client<span class=\"token punctuation\">.</span>set_missing_host_key_policy<span class=\"token punctuation\">(</span>paramiko<span class=\"token punctuation\">.</span>AutoAddPolicy<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    client<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span>ip<span class=\"token punctuation\">,</span> username<span class=\"token operator\">=</span>user<span class=\"token punctuation\">,</span> password<span class=\"token operator\">=</span>passwd<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    ssh_session <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span>get_transport<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>open_session<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">if</span> ssh_session<span class=\"token punctuation\">.</span>active<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        ssh_session<span class=\"token punctuation\">.</span>exec_command<span class=\"token punctuation\">(</span>command<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>ssh_session<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    loging_shh<span class=\"token punctuation\">(</span><span class=\"token string\">'192.168.199.128'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'root'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'root'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'id'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>运行程序后得到了服务器执行命令后的结果<br />\n<img data-src=\"image001.png\" alt=\"\" /></p>\n<h2 id=\"编写返回命令的ssh\"><a class=\"anchor\" href=\"#编写返回命令的ssh\">#</a> 编写返回命令的 SSH</h2>\n<p>通常情况下，可以使用 SSH 客户端连接 SSH 服务器，但 Windows 本身不一定装有 SSH 服务端，所以我们需要反向将命令从 SSH 服务端发送给 SSH 客户端。（即客户端控制服务端）</p>\n<p><span class=\"label\">Code</span></p>\n<pre><code class=\"language-python\">\n\n</code></pre>\n",
            "tags": [
                "SSH隧道",
                "python",
                "SSH"
            ]
        },
        {
            "id": "https://or0kit.github.io/Internet/SSH%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91%EF%BC%88SSH%E9%9A%A7%E9%81%93%EF%BC%89%E3%80%90%E8%BD%AC%E3%80%91/",
            "url": "https://or0kit.github.io/Internet/SSH%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91%EF%BC%88SSH%E9%9A%A7%E9%81%93%EF%BC%89%E3%80%90%E8%BD%AC%E3%80%91/",
            "title": "SSH端口转发（SSH隧道）【转】",
            "date_published": "2020-12-02T09:30:08.000Z",
            "content_html": "<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<blockquote>\n<p>网上冲浪浏览到一篇好文章 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuaWJtLmNvbS9kZXZlbG9wZXJ3b3Jrcy9jbi9saW51eC9sLWNuLXNzaGZvcndhcmQvaW5kZXguaHRtbA==\">https://www.ibm.com/developerworks/cn/linux/l-cn-sshforward/index.html</span> 就把前辈的文章搬过来咯（ゝ ω・）vｷｭﾋﾟｯ</p>\n</blockquote>\n<p>附上 SSH 参数说明<br />\n - C 允许压缩数据<br />\n - f 后台运行<br />\n - N 表示只连接远程主机，不打开远程 shell<br />\n-R 将端口绑定到远程服务器，反向代理<br />\n - L 将端口绑定到本地客户端，正向代理<br />\n - T 不为这个连接分配 TTY<br />\n-NT 代表这个 SSH 连接只用来传数据，不执行远程操作</p>\n<h1 id=\"第一部分-概述\"><a class=\"anchor\" href=\"#第一部分-概述\">#</a> 第一部分 概述</h1>\n<p>当你在咖啡馆享受免费 WiFi 的时候，有没有想到可能有人正在窃取你的密码及隐私信息？当你发现实验室的防火墙阻止了你的网络应用端口，是不是有苦难言？来看看 SSH 的端口转发功能能给我们带来什么好处吧！</p>\n<h1 id=\"端口转发概述\"><a class=\"anchor\" href=\"#端口转发概述\">#</a> 端口转发概述</h1>\n<p>让我们先来了解一下端口转发的概念吧。我们知道，SSH 会自动加密和解密所有 SSH 客户端与服务端之间的网络数据。但是，SSH 还同时提供了一个非常有用的功能，这就是端口转发。它能够将其他 TCP 端口的网络数据通过 SSH 链接来转发，并且自动提供了相应的加密及解密服务。这一过程有时也被叫做 “隧道”（tunneling），这是因为 SSH 为其他 TCP 链接提供了一个安全的通道来进行传输而得名。例如，Telnet，SMTP，LDAP 这些 TCP 应用均能够从中得益，避免了用户名，密码以及隐私信息的明文传输。而与此同时，如果您工作环境中的防火墙限制了一些网络端口的使用，但是允许 SSH 的连接，那么也是能够通过将 TCP 端口转发来使用 SSH 进行通讯。总的来说 SSH 端口转发能够提供两大功能：</p>\n<blockquote>\n<ol>\n<li>加密 SSH Client 端至 SSH Server 端之间的通讯数据。</li>\n</ol>\n</blockquote>\n<ol start=\"2\">\n<li>突破防火墙的限制完成一些之前无法建立的 TCP 连接。<br />\n图 1. SSH 端口转发<img data-src=\"image001.jpg\" alt=\"\" /><br />\n如上图所示，使用了端口转发之后，TCP 端口 A 与 B 之间现在并不直接通讯，而是转发到了 SSH 客户端及服务端来通讯，从而自动实现了数据加密并同时绕过了防火墙的限制。</li>\n</ol>\n<h1 id=\"第二部分-本地转发与远程转发\"><a class=\"anchor\" href=\"#第二部分-本地转发与远程转发\">#</a> 第二部分 本地转发与远程转发</h1>\n<h2 id=\"本地转发实例分析\"><a class=\"anchor\" href=\"#本地转发实例分析\">#</a> 本地转发实例分析</h2>\n<p>我们先来看第一个例子，在实验室里有一台 LDAP 服务器（LdapServerHost），但是限制了只有本机上部署的应用才能直接连接此 LDAP 服务器。如果我们由于调试或者测试的需要想临时从远程机器（LdapClientHost）直接连接到这个 LDAP 服务器，有什么方法能够实现呢？</p>\n<p>答案无疑是本地端口转发了，它的命令格式是：<br />\n <code>ssh -L &lt;local port&gt;:&lt;remote host&gt;:&lt;remote port&gt; &lt;SSH hostname&gt;</code> <br />\n 在 LdapClientHost 上执行如下命令即可建立一个 SSH 的本地端口转发，例如：<br />\n <code>$ ssh -L 7001:localhost:389 LdapServerHost</code> <br />\n 图 2. 本地端口转发<img data-src=\"image002.jpg\" alt=\"\" /><br />\n这里需要注意的是本例中我们选择了 7001 端口作为本地的监听端口，在选择端口号时要注意非管理员帐号是无权绑定 1-1023 端口的，所以一般是选用一个 1024-65535 之间的并且尚未使用的端口号即可。</p>\n<p>然后我们可以将远程机器（LdapClientHost）上的应用直接配置到本机的 7001 端口上（而不是 LDAP 服务器的 389 端口上）。之后的数据流将会是下面这个样子：</p>\n<ol>\n<li>我们在 LdapClientHost 上的应用将数据发送到本机的 7001 端口上，</li>\n<li>而本机的 SSH Client 会将 7001 端口收到的数据加密并转发到 LdapServertHost 的 SSH Server 上。</li>\n<li>SSH Server 会解密收到的数据并将之转发到监听的 LDAP 389 端口上，</li>\n<li>最后再将从 LDAP 返回的数据原路返回以完成整个流程。<br />\n我们可以看到，这整个流程应用并没有直接连接 LDAP 服务器，而是连接到了本地的一个监听端口，但是 SSH 端口转发完成了剩下的所有事情，加密，转发，解密，通讯。</li>\n</ol>\n<p>这里有几个地方需要注意：</p>\n<ol>\n<li>SSH 端口转发是通过 SSH 连接建立起来的，我们必须保持这个 SSH 连接以使端口转发保持生效。一旦关闭了此连接，相应的端口转发也会随之关闭。</li>\n<li>我们只能在建立 SSH 连接的同时创建端口转发，而不能给一个已经存在的 SSH 连接增加端口转发。</li>\n<li>你可能会疑惑上面命令中的 <remote host> 为什么用 localhost，它指向的是哪台机器呢？在本例中，它指向 LdapServertHost 。我们为什么用 localhost 而不是 IP 地址或者主机名呢？其实这个取决于我们之前是如何限制 LDAP 只有本机才能访问。如果只允许 lookback 接口访问的话，那么自然就只有 localhost 或者 IP 为 127.0.0.1 才能访问了，而不能用真实 IP 或者主机名。</li>\n<li>命令中的 <remote host> 和 <SSH hostname> 必须是同一台机器么？其实是不一定的，它们可以是两台不同的机器。我们在后面的例子里会详细阐述这点。</li>\n<li>好了，我们已经在 LdapClientHost 建立了端口转发，那么这个端口转发可以被其他机器使用么？比如能否新增加一台 LdapClientHost2 来直接连接 LdapClientHost 的 7001 端口？答案是不行的，在主流 SSH 实现中，本地端口转发绑定的是 lookback 接口，这意味着只有 localhost 或者 127.0.0.1 才能使用本机的端口转发，其他机器发起的连接只会得到 “connection refused.”。好在 SSH 同时提供了 GatewayPorts 关键字，我们可以通过指定它与其他机器共享这个本地端口转发。<br />\n <code>ssh -g -L &lt;local port&gt;:&lt;remote host&gt;:&lt;remote port&gt; &lt;SSH hostname&gt;</code></li>\n</ol>\n<h2 id=\"远程转发实例分析\"><a class=\"anchor\" href=\"#远程转发实例分析\">#</a> 远程转发实例分析</h2>\n<p>我们来看第二个例子，这次假设由于网络或防火墙的原因我们不能用 SSH 直接从 LdapClientHost 连接到 LDAP 服务器（LdapServertHost），但是反向连接却是被允许的。那此时我们的选择自然就是远程端口转发了。<br />\n它的命令格式是：<br />\n <code>ssh -R &lt;local port&gt;:&lt;remote host&gt;:&lt;remote port&gt; &lt;SSH hostname&gt;</code> <br />\n 例如在 LDAP 服务器（LdapServertHost）端执行如下命令：<br />\n <code>$ ssh -R 7001:localhost:389 LdapClientHost</code> <br />\n 图 3. 远程端口转发<img data-src=\"image003.jpg\" alt=\"\" /></p>\n<p>和本地端口转发相比，这次的图里，SSH Server 和 SSH Client 的位置对调了一下，但是数据流依然是一样的。我们在 LdapClientHost 上的应用将数据发送到本机的 7001 端口上，而本机的 SSH Server 会将 7001 端口收到的数据加密并转发到 LdapServertHost 的 SSH Client 上。 SSH Client 会解密收到的数据并将之转发到监听的 LDAP 389 端口上，最后再将从 LDAP 返回的数据原路返回以完成整个流程。</p>\n<p>看到这里，你是不是会有点糊涂了么？为什么叫本地转发，而有时又叫远程转发？这两者有什么区别？</p>\n<h2 id=\"本地转发与远程转发的对比与分析\"><a class=\"anchor\" href=\"#本地转发与远程转发的对比与分析\">#</a> 本地转发与远程转发的对比与分析</h2>\n<p>不错，SSH Server，SSH Client，LdapServertHost，LdapClientHost，本地转发，远程转发，这么多的名词的确容易让人糊涂。让我们来分析一下其中的结构吧。首先，SSH 端口转发自然需要 SSH 连接，而 SSH 连接是有方向的，从 SSH Client 到 SSH Server 。而我们的应用也是有方向的，比如需要连接 LDAP Server 时，LDAP Server 自然就是 Server 端，我们应用连接的方向也是从应用的 Client 端连接到应用的 Server 端。如果这两个连接的方向一致，那我们就说它是本地转发。而如果两个方向不一致，我们就说它是远程转发。</p>\n<p>我们可以回忆上面的两个例子来做个对照。</p>\n<p>本地转发时：</p>\n<p>LdapClientHost 同时是应用的客户端，也是 SSH Client，这两个连接都从它指向 LdapServertHost（既是 LDAP 服务端，也是 SSH Server）。</p>\n<p>远程转发时：</p>\n<p>LdapClientHost 是应用的客户端，但却是 SSH Server, 而 LdapServertHost 是 LDAP 的服务端，但却是 SSH Client 。这样两个连接的方向刚好相反。</p>\n<p>另一个方便记忆的方法是，Server 端的端口都是预定义的固定端口（SSH Server 的端口 22，LDAP 的端口 389），而 Client 端的端口都是动态可供我们选择的端口（如上述例子中选用的 7001 端口）。如果 Server 端的两个端口都在同一台机器，Client 端的两个端口都在另一台机器上，那么这就是本地连接；如果这四个端口交叉分布在两个机器上，每台机器各有一个 Server 端端口，一个 Client 端端口，那就是远程连接。</p>\n<p>弄清楚了两者的区别之后，再来看看两者的相同之处。如果你所在的环境下，既允许 LdapClientHost 发起 SSH 连接到 LdapServerHost，也允许 LdapServerHost 发起 SSH 连接到 LdapClientHost 。那么这时我们选择本地转发或远程转发都是可以的，能完成一样的功能。</p>\n<p>接着让我们来看个进阶版的端口转发。我们之前涉及到的各种连接与转发都只涉及到了两台机器，还记得我们在本地转发中提到的一个问题么？本地转发命令中的 &lt;remote host&gt; 和 &lt;SSH hostname&gt; 可以是不同的机器么？</p>\n<p>答案是可以的！让我们来看一个涉及到四台机器 (A,B,C,D) 的例子。<br />\n <code>ssh -L &lt;local port&gt;:&lt;remote host&gt;:&lt;remote port&gt; &lt;SSH hostname&gt;</code> <br />\n 图 4. 多主机转发应用<img data-src=\"image004.jpg\" alt=\"\" /><br />\n在 SSH Client (C) 执行下列命令来建立 SSH 连接以及端口转发：<br />\n <code>$ ssh -g -L 7001:&lt;B&gt;:389 &lt;D&gt;</code> <br />\n 然后在我们的应用客户端（A）上配置连接机器（C ）的 7001 端口即可。注意我们在命令中指定了 “-g” 参数以保证机器（A）能够使用机器（C）建立的本地端口转发。而另一个值得注意的地方是，在上述连接中，（A）&lt;-&gt; (C) 以及 (B)&lt;-&gt;(D) 之间的连接并不是安全连接，它们之间没有经过 SSH 的加密及解密。如果他们之间的网络并不是值得信赖的网络连接，我们就需要谨慎使用这种连接方式了。</p>\n<h1 id=\"第三部分-其他类型的转发\"><a class=\"anchor\" href=\"#第三部分-其他类型的转发\">#</a> 第三部分 其他类型的转发</h1>\n<h2 id=\"动态转发实例分析\"><a class=\"anchor\" href=\"#动态转发实例分析\">#</a> 动态转发实例分析</h2>\n<p>恩，动态转发，听上去很酷。当你看到这里时，有没有想过我们已经讨论过了本地转发，远程转发，但是前提都是要求有一个固定的应用服务端的端口号，例如前面例子中的 LDAP 服务端的 389 端口。那如果没有这个端口号怎么办？等等，什么样的应用会没有这个端口号呢？嗯，比如说用浏览器进行 Web 浏览，比如说 MSN 等等。</p>\n<p>当我们在一个不安全的 WiFi 环境下上网，用 SSH 动态转发来保护我们的网页浏览及 MSN 信息无疑是十分必要的。让我们先来看一下动态转发的命令格式：</p>\n<p><code>$ ssh -D &lt;local port&gt; &lt;SSH Server&gt;</code> <br />\n 例如：</p>\n<p><code>$ ssh -D 7001 &lt;SSH Server&gt;</code> <br />\n 图 5. 动态端口转发<img data-src=\"image005.jpg\" alt=\"\" /><br />\n似乎很简单，我们依然选择了 7001 作为本地的端口号，其实在这里 SSH 是创建了一个 SOCKS 代理服务。来看看帮助文档中对 -D 参数的描述：</p>\n<blockquote>\n<p>-D port<br />\nThis works by allocating a socket to listen to port on the local<br />\nside, and whenever a connection is made to this port, the con-<br />\nnection is forwarded over the secure channel, and the applica-<br />\ntion protocol is then used to determine where to connect to from<br />\nthe remote machine.  Currently the SOCKS4 and SOCKS5 protocols<br />\nare supported, and ssh will act as a SOCKS server.  Only root<br />\ncan forward privileged ports.  Dynamic port forwardings can also<br />\nbe specified in the configuration file.</p>\n</blockquote>\n<p>百度翻译是：</p>\n<blockquote>\n<p>这是通过分配一个套接字来监听本地端的端口来实现的，每当连接到此端口时，连接都会通过安全通道转发，然后使用应用协议来确定从远程计算机连接到哪里。目前支持 SOCKS4 和 SOCKS5 协议，ssh 将充当 SOCKS 服务器。只有 root 用户可以转发特权端口。动态端口转发也可以在配置文件中指定。</p>\n</blockquote>\n<p>之后的使用就简单了，我们可以直接使用 localhost:7001 来作为正常的 SOCKS 代理来使用，直接在浏览器或 MSN 上设置即可。在 SSH Client 端无法访问的网站现在也都可以正常浏览。而这里需要值得注意的是，此时 SSH 所包护的范围只包括从浏览器端（SSH Client 端）到 SSH Server 端的连接，并不包含从 SSH Server 端 到目标网站的连接。如果后半截连接的安全不能得到充分的保证的话，这种方式仍不是合适的解决方案。</p>\n<h2 id=\"x-协议转发实例分析\"><a class=\"anchor\" href=\"#x-协议转发实例分析\">#</a> X 协议转发实例分析</h2>\n<blockquote>\n<p>emm 这些倒是没听过<br />\n好了，让我们来看最后一个例子 - X 协议转发。</p>\n</blockquote>\n<p>我们日常工作当中，可能会经常会远程登录到 Linux/Unix/Solaris/HP 等机器上去做一些开发或者维护，也经常需要以 GUI 方式运行一些程序，比如要求图形化界面来安装 DB2/WebSphere 等等。这时候通常有两种选择来实现：VNC 或者 X 窗口，让我们来看看后者。</p>\n<p>使用 X 窗口通常需要分别安装：X Client 和 X Server 。在本例中我们的 X Client 就是所访问的远程 Linux/Unix/Solaris/HP，而我们的 X Server 则是发起访问的本地机器（例如你面前正在使用的笔记本或台式机）。把 X Client 端的 X 窗口显示在 X Server 端需要先行在 X Client 端指定 X Server 的位置，命令格式如下：</p>\n<p><code>export DISPLAY=&lt;X Server IP&gt;:&lt;display #&gt;.&lt;virtual #&gt;</code> <br />\n 例如：</p>\n<p><code>export DISPLAY=myDesktop:1.0</code> <br />\n 然后直接运行 X 应用即可，X 窗口就会自动在我们的本地端打开。</p>\n<p>一切运行正常，但是，这时候 IT 部门突然在远程 Linux/Unix/Solaris/HP 前面加了一道防火墙。非常不幸的是，X 协议并不在允许通过的列表之内。怎么办？只能使用 VNC 了么？不，其实只要使用了 SSH 端口转发即可通过，同时也对 X 通讯数据做了加密，真是一举两得。（当然，使用此方法前最好先咨询相关 IT 部门是否符合相应的安全条例，以免造成违规操作。）</p>\n<p>建立命令也很简单，直接从本地机器（X Server 端）发起一个如下的 SSH 连接即可：</p>\n<p><code>$ ssh -X &lt;SSH Server&gt;</code> <br />\n 图 5. X 转发<img data-src=\"image006.jpg\" alt=\"\" /><br />\n建立连接之后就可以直接运行远程的 X 应用。注意建立 X 转发之后会自动设置 DISPLAY 环境变量，通常会被设置成 localhost:10.0，我们无需也不应该在连接之后再进行修改此环境变量。</p>\n<p>一个比较常见的场景是，我们的本地机器是 Windows 操作系统，这时可以选择开源的 XMing 来作为我们的 XServer，而 SSH Client 则可以任意选择了，例如 PuTTY，Cygwin 均可以配置 访问 SSH 的同时建立 X 转发。</p>\n<h1 id=\"第四部分-总结\"><a class=\"anchor\" href=\"#第四部分-总结\">#</a> 第四部分 总结</h1>\n<p>至此，我们已经完成了本地端口转发，远程端口转发，动态端口转发以及 X 转发的介绍。回顾起来，总的思路是通过将 TCP 连接转发到 SSH 通道上以解决数据加密以及突破防火墙的种种限制。对一些已知端口号的应用，例如 Telnet/LDAP/SMTP，我们可以使用本地端口转发或者远程端口转发来达到目的。动态端口转发则可以实现 SOCKS 代理从而加密以及突破防火墙对 Web 浏览的限制。对于 X 应用，无疑是 X 转发最为适用了。虽然每一部分我们都只是简单的介绍了一下，但如果能灵活应用这些技巧，相信对我们的日常生活 / 工作也是会有所帮助的。</p>\n",
            "tags": [
                "SSH隧道"
            ]
        }
    ]
}