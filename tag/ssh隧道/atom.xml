<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://Or0kit.github.io</id>
    <title>Or0kit • Posts by &#34;ssh隧道&#34; tag</title>
    <link href="https://Or0kit.github.io" />
    <updated>2021-01-27T15:43:48.000Z</updated>
    <category term="Algolia" />
    <category term="Drozer" />
    <category term="同义词替换" />
    <category term="xpath" />
    <category term="win32api" />
    <category term="WOW64" />
    <category term="windows消息机制" />
    <category term="虚拟内存" />
    <category term="jsDelivr" />
    <category term="First blog" />
    <category term="markdown 学习" />
    <category term="Android" />
    <category term="替换密钥" />
    <category term="数论基础" />
    <category term="ADB" />
    <category term="雷电模拟器" />
    <category term="Hadoop" />
    <category term="IDA" />
    <category term="Windows逆向" />
    <category term="SSH隧道" />
    <category term="url" />
    <category term="http" />
    <category term="应急响应" />
    <category term="Nginx" />
    <category term="Linux" />
    <category term="CentOS7配置vsftp" />
    <category term="Psad" />
    <category term="fwsnort" />
    <category term="x86汇编指令" />
    <category term="动态分析技术基础" />
    <category term="静态分析基础" />
    <category term="逆向" />
    <category term="IDA学习" />
    <category term="恶意代码分析实战入门" />
    <category term="加壳" />
    <category term="脱壳" />
    <category term="C++壳" />
    <category term="ESP寻址" />
    <category term="定位Win32窗口回调函数" />
    <category term="HOOK攻防" />
    <category term="瞬时HOOK过检测" />
    <category term="INLINE-HOOK" />
    <category term="IAT HOOK" />
    <category term="INLINE HOOK" />
    <category term="进程监控" />
    <category term="模块隐藏" />
    <category term="进程通信" />
    <category term="tlhelp32.h" />
    <category term="进程遍历" />
    <category term="模块遍历" />
    <category term="外挂原理" />
    <category term="DLL注入之进程间通信" />
    <category term="TEB" />
    <category term="PEB" />
    <category term="R3层断链" />
    <category term="Win临界区" />
    <category term="Win事件" />
    <category term="线程同步" />
    <category term="Win互斥体" />
    <category term="内存映射文件" />
    <category term="内存映射共享" />
    <category term="写拷贝" />
    <category term="Win子窗口控件" />
    <category term="win32文件函数" />
    <category term="代码注入" />
    <category term="窗口程序" />
    <category term="消息机制" />
    <category term="消息类型" />
    <category term="私有内存" />
    <category term="共享内存" />
    <category term="设备对象" />
    <category term="DC设备上下文" />
    <category term="图形对象" />
    <category term="创建线程" />
    <category term="线程控制" />
    <category term="线程相关API" />
    <category term="线程上下文" />
    <category term="CONTEXT结构体" />
    <category term="物理内存" />
    <category term="Windows进程" />
    <category term="句柄表" />
    <category term="远程线程函数" />
    <category term="远程线程" />
    <category term="DLL注入" />
    <category term="DLL注入相关函数" />
    <category term="WinMain函数" />
    <category term="调用约定" />
    <category term="我的GetProcAddress" />
    <category term="资源文件" />
    <category term="消息断点" />
    <category term="PE课后作业" />
    <category term="通用控件" />
    <category term="WM_NOTIFY消息类型" />
    <category term="MFC" />
    <category term="PE查看器" />
    <category term="RVA与FOA" />
    <category term="PE结构" />
    <category term="DOS头属性说明" />
    <category term="标准PE头属性说明" />
    <category term="扩展PE头属性说明" />
    <category term="节表属性说明" />
    <category term="空白区添加代码" />
    <category term="合并节" />
    <category term="导入表" />
    <category term="注入" />
    <category term="导入表注入" />
    <category term="导出表" />
    <category term="扩大节" />
    <category term="新增节" />
    <category term="移动NT头" />
    <category term="移动导出表" />
    <category term="移动重定位表" />
    <category term="重定位表" />
    <category term="静态链接库" />
    <category term="动态链接库" />
    <category term="句柄" />
    <category term="CobaltStrike" />
    <category term="RedTeam" />
    <category term="Apeache" />
    <category term="php" />
    <category term="Nmap" />
    <category term="guestbook" />
    <category term="SQLmap" />
    <category term="apache" />
    <category term="log" />
    <category term="mysql主键" />
    <category term="CSRF" />
    <category term="SSRF" />
    <category term="业务逻辑漏洞" />
    <category term="xss" />
    <category term="webshell流量特征" />
    <category term="虚拟网卡" />
    <category term="button" />
    <category term="单选框" />
    <category term="复选框件" />
    <category term="Edit" />
    <category term="Combo Box" />
    <category term="Tab" />
    <category term="ListCtrl" />
    <category term="MFC的本质" />
    <category term="MFC的层次结构图" />
    <category term="手动创建一个MFC程序" />
    <category term="MFC的初始化过程" />
    <category term="MFC运行时类型识别" />
    <category term="关键字static" />
    <category term="关键字const" />
    <category term="MFC动态创建" />
    <category term="MFC消息映射" />
    <category term="结构体AFX_MSGMAP_ENTRY" />
    <category term="结构体AFX_MSGM" />
    <category term="MFC的三大类消息" />
    <category term="数据传输" />
    <category term="ini文件的读写" />
    <category term="python" />
    <category term="SSH" />
    <category term="python文件读取" />
    <category term="数据分析" />
    <category term="socket" />
    <category term="数据库编程" />
    <category term="python内置属性" />
    <category term="multiprocessing" />
    <category term="threading" />
    <category term="scrapy" />
    <category term="测试" />
    <category term="BHP" />
    <category term="Python的import功能" />
    <category term="木马" />
    <category term="非可变序列算法" />
    <category term="可变序列算法" />
    <category term="排序算法" />
    <category term="迭代器" />
    <category term="使用自定义对象" />
    <category term="0环与3环的通信（常规方法）" />
    <category term="内核空间" />
    <category term="内核模块" />
    <category term="遍历内核模块" />
    <category term="定位未导出函数PspTiminateProcess" />
    <category term="内核编程基础" />
    <category term="ANSI_STRING" />
    <category term="UNICODE_STRING" />
    <category term="内核内存" />
    <category term="上下文环境" />
    <category term="中断请求级别" />
    <category term="链表" />
    <category term="自旋锁" />
    <category term="注册表" />
    <category term="地址空间" />
    <category term="文件操作" />
    <category term="线程与事件" />
    <category term="内核重载" />
    <category term="配置VS2019+WDK10" />
    <category term="第一个驱动程序" />
    <category term="驱动调试" />
    <category term="调试驱动程序" />
    <category term="OpenSCManager" />
    <category term="CreateService" />
    <category term="APC的本质" />
    <category term="APC的备用队列" />
    <category term="线性地址的管理" />
    <category term="VAD树" />
    <category term="_MMVAD" />
    <category term="_MMVAD_FLAGS" />
    <category term="共享物理页" />
    <category term="共享文件" />
    <category term="LoadLibrary的本质" />
    <category term="VirtualAlloc" />
    <category term="MEM_COMMIT与MEM_RESERVE" />
    <category term="malloc" />
    <category term="堆内存" />
    <category term="栈内存" />
    <category term="全局区内存" />
    <category term="MmAddPhysicalMemoryEx" />
    <category term="缺页异常" />
    <category term="消息队列" />
    <category term="PsConvertToGuiThread" />
    <category term="win32k.sys" />
    <category term="GUI线程" />
    <category term="窗口程序的创建" />
    <category term="消息循环" />
    <category term="临界区" />
    <category term="KPCR结构体" />
    <category term="模拟线程切换" />
    <category term="模拟挂起与恢复函数" />
    <category term="等待链表" />
    <category term="调度链表" />
    <category term="ETHREAD" />
    <category term="KTHREAD" />
    <category term="进程的创建" />
    <category term="获取当前进程" />
    <category term="EPROCESS" />
    <category term="KPROCESS" />
    <category term="2-9-9-12分页" />
    <category term="PAE" />
    <category term="PDPTE" />
    <category term="PDE" />
    <category term="PTE" />
    <category term="XD标志位" />
    <category term="逆向分析MmIsAddressValid函数(2-9-9-12)" />
    <category term="TLB" />
    <category term="INVLPG指令" />
    <category term="全局页" />
    <category term="ShadowWalker" />
    <category term="PWT" />
    <category term="PDT" />
    <category term="CPU缓存" />
    <category term="中断" />
    <category term="异常" />
    <category term="CLI指令" />
    <category term="STI指令" />
    <category term="INT2" />
    <category term="INT8" />
    <category term="中断门描述符" />
    <category term="IDT" />
    <category term="提权" />
    <category term="跨段跳转流程" />
    <category term="JMP FAR指令" />
    <category term="TSS" />
    <category term="任务门" />
    <category term="LDT段描述符" />
    <category term="LDT" />
    <category term="CR0" />
    <category term="CR2" />
    <category term="CR4" />
    <category term="CRL" />
    <category term="DPL" />
    <category term="RPL" />
    <category term="段寄存器结构" />
    <category term="段描述符" />
    <category term="段选择子" />
    <category term="GDT表" />
    <category term="调用门" />
    <category term="调用门描述符" />
    <category term="逆向分析MmIsAddressValid函数" />
    <category term="error C2143" />
    <category term="error C2275" />
    <category term="CALL与CALL FAR" />
    <category term="陷阱门描述符" />
    <category term="10-10-12分页" />
    <category term="页目录表基址" />
    <category term="页表的基址" />
    <category term="0地址执行ShellCode" />
    <category term="PDE_PTE" />
    <category term="物理页" />
    <category term="SSDT HOOK" />
    <category term="OpenProcess" />
    <category term="系统服务表" />
    <category term="SSDT" />
    <category term="SSDT HOOK隐藏" />
    <category term="API进出内核" />
    <category term="系统调用阶段总结" />
    <category term="网络安全法" />
    <category term="ASCII" />
    <category term="GBK" />
    <category term="ANSI" />
    <category term="Unicode" />
    <category term="UTF-8" />
    <category term="URL 编码/解码" />
    <category term="十进制" />
    <category term="二进制" />
    <category term="十六进制" />
    <category term="内存" />
    <category term="x64" />
    <category term="编写ShellCode实现IAT HOOK" />
    <category term="ShellCode原则" />
    <category term="傀儡进程加密壳" />
    <category term="ZwUnmapViewOfSection函数" />
    <category term="加载图标" />
    <category term="提取图标" />
    <category term="资源表" />
    <category term="HTML" />
    <category term="文件包含" />
    <category term="sql注入" />
    <category term="MFC命令传递" />
    <category term="远控界面编写" />
    <category term="STL" />
    <category term="Vector容器" />
    <category term="Deque容器" />
    <category term="List容器" />
    <category term="Set容器" />
    <category term="Multiset容器" />
    <category term="Map容器" />
    <category term="Multimap容器" />
    <category term="Stack容器" />
    <category term="Queue容器" />
    <category term="priority_queue容器" />
    <category term="经典定长指令" />
    <category term="经典变长指令" />
    <category term="指令前缀" />
    <category term="串口" />
    <category term="过滤" />
    <category term="键盘过滤" />
    <category term="KAPC" />
    <category term="QueueUserAPC" />
    <category term="NtQueueApcThread" />
    <category term="KeInitializeApc" />
    <category term="KeInsertQueueApc" />
    <category term="KiInsertQueueApc" />
    <category term="进程句柄表" />
    <category term="全局句柄表" />
    <category term="消息队列与线程" />
    <category term="Windows线程切换" />
    <category term="KiSwapContext" />
    <category term="SwapContext" />
    <category term="时钟中断" />
    <category term="时间片管理" />
    <category term="线程切换与TSS" />
    <category term="线程切换与FS" />
    <category term="线程切换与线程优先级" />
    <category term="快速调用" />
    <category term="中断调用" />
    <category term="分析ReadProcessMemory" />
    <category term="KiFastSystemCall" />
    <category term="KiIntSystemCall" />
    <category term="重写3环" />
    <category term="文件上传" />
    <category term="隐藏驱动" />
    <category term="IopLoadDriver" />
    <category term="延迟过程调用" />
    <category term="进程挂靠" />
    <category term="跨进程读写内存" />
    <category term="APC" />
    <category term="逆向分析NtReadVirtualMemory" />
    <category term="逆向分析NtWriteVIrtualMemory" />
    <category term="AD-Attack-Defense" />
    <category term="payload" />
    <category term="sysenter指令" />
    <category term="KiFastCallEntry函数" />
    <category term="KiSystemService函数" />
    <category term="Trap_Frame" />
    <category term="web安全" />
    <category term="Pentest" />
    <category term="磁盘虚拟" />
    <category term="PDO" />
    <category term="Windows中从击键到内核的过程" />
    <category term="KEYBOARD_INPUT_DATA结构" />
    <category term="IRP完成回调函数" />
    <category term="DriverEntry函数的定义" />
    <category term="WDF_DRIVER_CONFIG结构" />
    <category term="EvtDriverDeviceAdd函数" />
    <category term="FAT12/16磁盘卷" />
    <category term="磁盘的过滤" />
    <category term="具有还原功能的磁盘卷过滤驱动" />
    <category term="文件系统" />
    <category term="Minifilter" />
    <category term="boot驱动" />
    <category term="bitmap" />
    <entry>
        <id>https://or0kit.github.io/Programming/Python/BHP%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%88%E4%B8%89%EF%BC%89-SSH%E4%B8%8ESSH%E9%9A%A7%E9%81%93/</id>
        <title>BHP第二章（三）-SSH与SSH隧道</title>
        <link rel="alternate" href="https://or0kit.github.io/Programming/Python/BHP%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%88%E4%B8%89%EF%BC%89-SSH%E4%B8%8ESSH%E9%9A%A7%E9%81%93/"/>
        <content type="html">&lt;h1 id=&#34;前言&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#前言&#34;&gt;#&lt;/a&gt; 前言&lt;/h1&gt;
&lt;p&gt;通过 python 打造自己的 SSH (Secure Shell)。&lt;/p&gt;
&lt;h1 id=&#34;通过paramiko使用ssh&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#通过paramiko使用ssh&#34;&gt;#&lt;/a&gt; 通过 paramiko 使用 SSH&lt;/h1&gt;
&lt;h2 id=&#34;例子&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#例子&#34;&gt;#&lt;/a&gt; 例子&lt;/h2&gt;
&lt;p&gt;paramiko 是第三方库，要用 pip 安装。 &lt;code&gt;pip install paramiko&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;在 python 的世界里，可以使用原始套接字和一些加密函数创建自己的 SSH 客户端或者服务端。但 python 中也有现成模块，使用 paramiko 库中的 PyCrypto 能让我们轻松使用 SSH2 协议&lt;/p&gt;
&lt;p&gt;在示例中，我们首先需要引入 &lt;code&gt;paramiko&lt;/code&gt;  库，然后使用 &lt;code&gt;SSHClient()&lt;/code&gt;  方法实例化对象，然后使用 &lt;code&gt;load_host_key()&lt;/code&gt;  方法密钥认证的方式连接服务器，这里让实验可视化使用 &lt;code&gt;connect()&lt;/code&gt;  方法以明文密码的方式连接服务器，连接服务器之前可以使用 &lt;code&gt;set_missing_host_key_policy()&lt;/code&gt;  设置对于服务器密钥的策略，使用 &lt;code&gt;AutoAddPolicy()&lt;/code&gt;  设置策略为自动添加服务器密钥，然后使用 &lt;code&gt;get_transport()&lt;/code&gt;  与 &lt;code&gt;open_session()&lt;/code&gt;  方法来得到 ssh 加密通道和打开线程，运用 if 语句与 acitve 属性判断线程是否存活，如果存活，使用 &lt;code&gt;exec_command()&lt;/code&gt;  来执行我们想要执行的命令，通过 &lt;code&gt;recv()&lt;/code&gt;  方法将命令在服务器执行后的结果返回给我们，这里也需要注意编码问题&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;label&#34;&gt;Code&lt;/span&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; paramiko&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;loging_shh&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;ip&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; user&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; passwd&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; command&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    client &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; paramiko&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;SSHClient&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;# client.load_host_keys(&#39;/root/.ssh/konw_hosts&#39;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    client&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;set_missing_host_key_policy&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;paramiko&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;AutoAddPolicy&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    client&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;connect&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;ip&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; username&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;user&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; password&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;passwd&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    ssh_session &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; client&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;get_transport&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;open_session&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; ssh_session&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;active&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        ssh_session&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;exec_command&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;command&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;ssh_session&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;recv&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1024&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;decode&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;utf-8&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; __name__ &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;__main__&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    loging_shh&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;192.168.199.128&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;root&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;root&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;id&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;运行程序后得到了服务器执行命令后的结果&lt;br /&gt;
&lt;img data-src=&#34;image001.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;编写返回命令的ssh&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#编写返回命令的ssh&#34;&gt;#&lt;/a&gt; 编写返回命令的 SSH&lt;/h2&gt;
&lt;p&gt;通常情况下，可以使用 SSH 客户端连接 SSH 服务器，但 Windows 本身不一定装有 SSH 服务端，所以我们需要反向将命令从 SSH 服务端发送给 SSH 客户端。（即客户端控制服务端）&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;label&#34;&gt;Code&lt;/span&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;

&lt;/code&gt;&lt;/pre&gt;
</content>
        <category term="SSH隧道" />
        <category term="python" />
        <category term="SSH" />
        <updated>2021-01-27T15:43:48.000Z</updated>
    </entry>
    <entry>
        <id>https://or0kit.github.io/Internet/SSH%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91%EF%BC%88SSH%E9%9A%A7%E9%81%93%EF%BC%89%E3%80%90%E8%BD%AC%E3%80%91/</id>
        <title>SSH端口转发（SSH隧道）【转】</title>
        <link rel="alternate" href="https://or0kit.github.io/Internet/SSH%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91%EF%BC%88SSH%E9%9A%A7%E9%81%93%EF%BC%89%E3%80%90%E8%BD%AC%E3%80%91/"/>
        <content type="html">&lt;h1 id=&#34;前言&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#前言&#34;&gt;#&lt;/a&gt; 前言&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;网上冲浪浏览到一篇好文章 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuaWJtLmNvbS9kZXZlbG9wZXJ3b3Jrcy9jbi9saW51eC9sLWNuLXNzaGZvcndhcmQvaW5kZXguaHRtbA==&#34;&gt;https://www.ibm.com/developerworks/cn/linux/l-cn-sshforward/index.html&lt;/span&gt; 就把前辈的文章搬过来咯（ゝ ω・）vｷｭﾋﾟｯ&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;附上 SSH 参数说明&lt;br /&gt;
 - C 允许压缩数据&lt;br /&gt;
 - f 后台运行&lt;br /&gt;
 - N 表示只连接远程主机，不打开远程 shell&lt;br /&gt;
-R 将端口绑定到远程服务器，反向代理&lt;br /&gt;
 - L 将端口绑定到本地客户端，正向代理&lt;br /&gt;
 - T 不为这个连接分配 TTY&lt;br /&gt;
-NT 代表这个 SSH 连接只用来传数据，不执行远程操作&lt;/p&gt;
&lt;h1 id=&#34;第一部分-概述&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#第一部分-概述&#34;&gt;#&lt;/a&gt; 第一部分 概述&lt;/h1&gt;
&lt;p&gt;当你在咖啡馆享受免费 WiFi 的时候，有没有想到可能有人正在窃取你的密码及隐私信息？当你发现实验室的防火墙阻止了你的网络应用端口，是不是有苦难言？来看看 SSH 的端口转发功能能给我们带来什么好处吧！&lt;/p&gt;
&lt;h1 id=&#34;端口转发概述&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#端口转发概述&#34;&gt;#&lt;/a&gt; 端口转发概述&lt;/h1&gt;
&lt;p&gt;让我们先来了解一下端口转发的概念吧。我们知道，SSH 会自动加密和解密所有 SSH 客户端与服务端之间的网络数据。但是，SSH 还同时提供了一个非常有用的功能，这就是端口转发。它能够将其他 TCP 端口的网络数据通过 SSH 链接来转发，并且自动提供了相应的加密及解密服务。这一过程有时也被叫做 “隧道”（tunneling），这是因为 SSH 为其他 TCP 链接提供了一个安全的通道来进行传输而得名。例如，Telnet，SMTP，LDAP 这些 TCP 应用均能够从中得益，避免了用户名，密码以及隐私信息的明文传输。而与此同时，如果您工作环境中的防火墙限制了一些网络端口的使用，但是允许 SSH 的连接，那么也是能够通过将 TCP 端口转发来使用 SSH 进行通讯。总的来说 SSH 端口转发能够提供两大功能：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;加密 SSH Client 端至 SSH Server 端之间的通讯数据。&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;突破防火墙的限制完成一些之前无法建立的 TCP 连接。&lt;br /&gt;
图 1. SSH 端口转发&lt;img data-src=&#34;image001.jpg&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
如上图所示，使用了端口转发之后，TCP 端口 A 与 B 之间现在并不直接通讯，而是转发到了 SSH 客户端及服务端来通讯，从而自动实现了数据加密并同时绕过了防火墙的限制。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;第二部分-本地转发与远程转发&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#第二部分-本地转发与远程转发&#34;&gt;#&lt;/a&gt; 第二部分 本地转发与远程转发&lt;/h1&gt;
&lt;h2 id=&#34;本地转发实例分析&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#本地转发实例分析&#34;&gt;#&lt;/a&gt; 本地转发实例分析&lt;/h2&gt;
&lt;p&gt;我们先来看第一个例子，在实验室里有一台 LDAP 服务器（LdapServerHost），但是限制了只有本机上部署的应用才能直接连接此 LDAP 服务器。如果我们由于调试或者测试的需要想临时从远程机器（LdapClientHost）直接连接到这个 LDAP 服务器，有什么方法能够实现呢？&lt;/p&gt;
&lt;p&gt;答案无疑是本地端口转发了，它的命令格式是：&lt;br /&gt;
 &lt;code&gt;ssh -L &amp;lt;local port&amp;gt;:&amp;lt;remote host&amp;gt;:&amp;lt;remote port&amp;gt; &amp;lt;SSH hostname&amp;gt;&lt;/code&gt; &lt;br /&gt;
 在 LdapClientHost 上执行如下命令即可建立一个 SSH 的本地端口转发，例如：&lt;br /&gt;
 &lt;code&gt;$ ssh -L 7001:localhost:389 LdapServerHost&lt;/code&gt; &lt;br /&gt;
 图 2. 本地端口转发&lt;img data-src=&#34;image002.jpg&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
这里需要注意的是本例中我们选择了 7001 端口作为本地的监听端口，在选择端口号时要注意非管理员帐号是无权绑定 1-1023 端口的，所以一般是选用一个 1024-65535 之间的并且尚未使用的端口号即可。&lt;/p&gt;
&lt;p&gt;然后我们可以将远程机器（LdapClientHost）上的应用直接配置到本机的 7001 端口上（而不是 LDAP 服务器的 389 端口上）。之后的数据流将会是下面这个样子：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;我们在 LdapClientHost 上的应用将数据发送到本机的 7001 端口上，&lt;/li&gt;
&lt;li&gt;而本机的 SSH Client 会将 7001 端口收到的数据加密并转发到 LdapServertHost 的 SSH Server 上。&lt;/li&gt;
&lt;li&gt;SSH Server 会解密收到的数据并将之转发到监听的 LDAP 389 端口上，&lt;/li&gt;
&lt;li&gt;最后再将从 LDAP 返回的数据原路返回以完成整个流程。&lt;br /&gt;
我们可以看到，这整个流程应用并没有直接连接 LDAP 服务器，而是连接到了本地的一个监听端口，但是 SSH 端口转发完成了剩下的所有事情，加密，转发，解密，通讯。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这里有几个地方需要注意：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;SSH 端口转发是通过 SSH 连接建立起来的，我们必须保持这个 SSH 连接以使端口转发保持生效。一旦关闭了此连接，相应的端口转发也会随之关闭。&lt;/li&gt;
&lt;li&gt;我们只能在建立 SSH 连接的同时创建端口转发，而不能给一个已经存在的 SSH 连接增加端口转发。&lt;/li&gt;
&lt;li&gt;你可能会疑惑上面命令中的 &lt;remote host&gt; 为什么用 localhost，它指向的是哪台机器呢？在本例中，它指向 LdapServertHost 。我们为什么用 localhost 而不是 IP 地址或者主机名呢？其实这个取决于我们之前是如何限制 LDAP 只有本机才能访问。如果只允许 lookback 接口访问的话，那么自然就只有 localhost 或者 IP 为 127.0.0.1 才能访问了，而不能用真实 IP 或者主机名。&lt;/li&gt;
&lt;li&gt;命令中的 &lt;remote host&gt; 和 &lt;SSH hostname&gt; 必须是同一台机器么？其实是不一定的，它们可以是两台不同的机器。我们在后面的例子里会详细阐述这点。&lt;/li&gt;
&lt;li&gt;好了，我们已经在 LdapClientHost 建立了端口转发，那么这个端口转发可以被其他机器使用么？比如能否新增加一台 LdapClientHost2 来直接连接 LdapClientHost 的 7001 端口？答案是不行的，在主流 SSH 实现中，本地端口转发绑定的是 lookback 接口，这意味着只有 localhost 或者 127.0.0.1 才能使用本机的端口转发，其他机器发起的连接只会得到 “connection refused.”。好在 SSH 同时提供了 GatewayPorts 关键字，我们可以通过指定它与其他机器共享这个本地端口转发。&lt;br /&gt;
 &lt;code&gt;ssh -g -L &amp;lt;local port&amp;gt;:&amp;lt;remote host&amp;gt;:&amp;lt;remote port&amp;gt; &amp;lt;SSH hostname&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;远程转发实例分析&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#远程转发实例分析&#34;&gt;#&lt;/a&gt; 远程转发实例分析&lt;/h2&gt;
&lt;p&gt;我们来看第二个例子，这次假设由于网络或防火墙的原因我们不能用 SSH 直接从 LdapClientHost 连接到 LDAP 服务器（LdapServertHost），但是反向连接却是被允许的。那此时我们的选择自然就是远程端口转发了。&lt;br /&gt;
它的命令格式是：&lt;br /&gt;
 &lt;code&gt;ssh -R &amp;lt;local port&amp;gt;:&amp;lt;remote host&amp;gt;:&amp;lt;remote port&amp;gt; &amp;lt;SSH hostname&amp;gt;&lt;/code&gt; &lt;br /&gt;
 例如在 LDAP 服务器（LdapServertHost）端执行如下命令：&lt;br /&gt;
 &lt;code&gt;$ ssh -R 7001:localhost:389 LdapClientHost&lt;/code&gt; &lt;br /&gt;
 图 3. 远程端口转发&lt;img data-src=&#34;image003.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;和本地端口转发相比，这次的图里，SSH Server 和 SSH Client 的位置对调了一下，但是数据流依然是一样的。我们在 LdapClientHost 上的应用将数据发送到本机的 7001 端口上，而本机的 SSH Server 会将 7001 端口收到的数据加密并转发到 LdapServertHost 的 SSH Client 上。 SSH Client 会解密收到的数据并将之转发到监听的 LDAP 389 端口上，最后再将从 LDAP 返回的数据原路返回以完成整个流程。&lt;/p&gt;
&lt;p&gt;看到这里，你是不是会有点糊涂了么？为什么叫本地转发，而有时又叫远程转发？这两者有什么区别？&lt;/p&gt;
&lt;h2 id=&#34;本地转发与远程转发的对比与分析&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#本地转发与远程转发的对比与分析&#34;&gt;#&lt;/a&gt; 本地转发与远程转发的对比与分析&lt;/h2&gt;
&lt;p&gt;不错，SSH Server，SSH Client，LdapServertHost，LdapClientHost，本地转发，远程转发，这么多的名词的确容易让人糊涂。让我们来分析一下其中的结构吧。首先，SSH 端口转发自然需要 SSH 连接，而 SSH 连接是有方向的，从 SSH Client 到 SSH Server 。而我们的应用也是有方向的，比如需要连接 LDAP Server 时，LDAP Server 自然就是 Server 端，我们应用连接的方向也是从应用的 Client 端连接到应用的 Server 端。如果这两个连接的方向一致，那我们就说它是本地转发。而如果两个方向不一致，我们就说它是远程转发。&lt;/p&gt;
&lt;p&gt;我们可以回忆上面的两个例子来做个对照。&lt;/p&gt;
&lt;p&gt;本地转发时：&lt;/p&gt;
&lt;p&gt;LdapClientHost 同时是应用的客户端，也是 SSH Client，这两个连接都从它指向 LdapServertHost（既是 LDAP 服务端，也是 SSH Server）。&lt;/p&gt;
&lt;p&gt;远程转发时：&lt;/p&gt;
&lt;p&gt;LdapClientHost 是应用的客户端，但却是 SSH Server, 而 LdapServertHost 是 LDAP 的服务端，但却是 SSH Client 。这样两个连接的方向刚好相反。&lt;/p&gt;
&lt;p&gt;另一个方便记忆的方法是，Server 端的端口都是预定义的固定端口（SSH Server 的端口 22，LDAP 的端口 389），而 Client 端的端口都是动态可供我们选择的端口（如上述例子中选用的 7001 端口）。如果 Server 端的两个端口都在同一台机器，Client 端的两个端口都在另一台机器上，那么这就是本地连接；如果这四个端口交叉分布在两个机器上，每台机器各有一个 Server 端端口，一个 Client 端端口，那就是远程连接。&lt;/p&gt;
&lt;p&gt;弄清楚了两者的区别之后，再来看看两者的相同之处。如果你所在的环境下，既允许 LdapClientHost 发起 SSH 连接到 LdapServerHost，也允许 LdapServerHost 发起 SSH 连接到 LdapClientHost 。那么这时我们选择本地转发或远程转发都是可以的，能完成一样的功能。&lt;/p&gt;
&lt;p&gt;接着让我们来看个进阶版的端口转发。我们之前涉及到的各种连接与转发都只涉及到了两台机器，还记得我们在本地转发中提到的一个问题么？本地转发命令中的 &amp;lt;remote host&amp;gt; 和 &amp;lt;SSH hostname&amp;gt; 可以是不同的机器么？&lt;/p&gt;
&lt;p&gt;答案是可以的！让我们来看一个涉及到四台机器 (A,B,C,D) 的例子。&lt;br /&gt;
 &lt;code&gt;ssh -L &amp;lt;local port&amp;gt;:&amp;lt;remote host&amp;gt;:&amp;lt;remote port&amp;gt; &amp;lt;SSH hostname&amp;gt;&lt;/code&gt; &lt;br /&gt;
 图 4. 多主机转发应用&lt;img data-src=&#34;image004.jpg&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
在 SSH Client (C) 执行下列命令来建立 SSH 连接以及端口转发：&lt;br /&gt;
 &lt;code&gt;$ ssh -g -L 7001:&amp;lt;B&amp;gt;:389 &amp;lt;D&amp;gt;&lt;/code&gt; &lt;br /&gt;
 然后在我们的应用客户端（A）上配置连接机器（C ）的 7001 端口即可。注意我们在命令中指定了 “-g” 参数以保证机器（A）能够使用机器（C）建立的本地端口转发。而另一个值得注意的地方是，在上述连接中，（A）&amp;lt;-&amp;gt; (C) 以及 (B)&amp;lt;-&amp;gt;(D) 之间的连接并不是安全连接，它们之间没有经过 SSH 的加密及解密。如果他们之间的网络并不是值得信赖的网络连接，我们就需要谨慎使用这种连接方式了。&lt;/p&gt;
&lt;h1 id=&#34;第三部分-其他类型的转发&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#第三部分-其他类型的转发&#34;&gt;#&lt;/a&gt; 第三部分 其他类型的转发&lt;/h1&gt;
&lt;h2 id=&#34;动态转发实例分析&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#动态转发实例分析&#34;&gt;#&lt;/a&gt; 动态转发实例分析&lt;/h2&gt;
&lt;p&gt;恩，动态转发，听上去很酷。当你看到这里时，有没有想过我们已经讨论过了本地转发，远程转发，但是前提都是要求有一个固定的应用服务端的端口号，例如前面例子中的 LDAP 服务端的 389 端口。那如果没有这个端口号怎么办？等等，什么样的应用会没有这个端口号呢？嗯，比如说用浏览器进行 Web 浏览，比如说 MSN 等等。&lt;/p&gt;
&lt;p&gt;当我们在一个不安全的 WiFi 环境下上网，用 SSH 动态转发来保护我们的网页浏览及 MSN 信息无疑是十分必要的。让我们先来看一下动态转发的命令格式：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ ssh -D &amp;lt;local port&amp;gt; &amp;lt;SSH Server&amp;gt;&lt;/code&gt; &lt;br /&gt;
 例如：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ ssh -D 7001 &amp;lt;SSH Server&amp;gt;&lt;/code&gt; &lt;br /&gt;
 图 5. 动态端口转发&lt;img data-src=&#34;image005.jpg&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
似乎很简单，我们依然选择了 7001 作为本地的端口号，其实在这里 SSH 是创建了一个 SOCKS 代理服务。来看看帮助文档中对 -D 参数的描述：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;-D port&lt;br /&gt;
This works by allocating a socket to listen to port on the local&lt;br /&gt;
side, and whenever a connection is made to this port, the con-&lt;br /&gt;
nection is forwarded over the secure channel, and the applica-&lt;br /&gt;
tion protocol is then used to determine where to connect to from&lt;br /&gt;
the remote machine.  Currently the SOCKS4 and SOCKS5 protocols&lt;br /&gt;
are supported, and ssh will act as a SOCKS server.  Only root&lt;br /&gt;
can forward privileged ports.  Dynamic port forwardings can also&lt;br /&gt;
be specified in the configuration file.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;百度翻译是：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这是通过分配一个套接字来监听本地端的端口来实现的，每当连接到此端口时，连接都会通过安全通道转发，然后使用应用协议来确定从远程计算机连接到哪里。目前支持 SOCKS4 和 SOCKS5 协议，ssh 将充当 SOCKS 服务器。只有 root 用户可以转发特权端口。动态端口转发也可以在配置文件中指定。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;之后的使用就简单了，我们可以直接使用 localhost:7001 来作为正常的 SOCKS 代理来使用，直接在浏览器或 MSN 上设置即可。在 SSH Client 端无法访问的网站现在也都可以正常浏览。而这里需要值得注意的是，此时 SSH 所包护的范围只包括从浏览器端（SSH Client 端）到 SSH Server 端的连接，并不包含从 SSH Server 端 到目标网站的连接。如果后半截连接的安全不能得到充分的保证的话，这种方式仍不是合适的解决方案。&lt;/p&gt;
&lt;h2 id=&#34;x-协议转发实例分析&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#x-协议转发实例分析&#34;&gt;#&lt;/a&gt; X 协议转发实例分析&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;emm 这些倒是没听过&lt;br /&gt;
好了，让我们来看最后一个例子 - X 协议转发。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我们日常工作当中，可能会经常会远程登录到 Linux/Unix/Solaris/HP 等机器上去做一些开发或者维护，也经常需要以 GUI 方式运行一些程序，比如要求图形化界面来安装 DB2/WebSphere 等等。这时候通常有两种选择来实现：VNC 或者 X 窗口，让我们来看看后者。&lt;/p&gt;
&lt;p&gt;使用 X 窗口通常需要分别安装：X Client 和 X Server 。在本例中我们的 X Client 就是所访问的远程 Linux/Unix/Solaris/HP，而我们的 X Server 则是发起访问的本地机器（例如你面前正在使用的笔记本或台式机）。把 X Client 端的 X 窗口显示在 X Server 端需要先行在 X Client 端指定 X Server 的位置，命令格式如下：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;export DISPLAY=&amp;lt;X Server IP&amp;gt;:&amp;lt;display #&amp;gt;.&amp;lt;virtual #&amp;gt;&lt;/code&gt; &lt;br /&gt;
 例如：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;export DISPLAY=myDesktop:1.0&lt;/code&gt; &lt;br /&gt;
 然后直接运行 X 应用即可，X 窗口就会自动在我们的本地端打开。&lt;/p&gt;
&lt;p&gt;一切运行正常，但是，这时候 IT 部门突然在远程 Linux/Unix/Solaris/HP 前面加了一道防火墙。非常不幸的是，X 协议并不在允许通过的列表之内。怎么办？只能使用 VNC 了么？不，其实只要使用了 SSH 端口转发即可通过，同时也对 X 通讯数据做了加密，真是一举两得。（当然，使用此方法前最好先咨询相关 IT 部门是否符合相应的安全条例，以免造成违规操作。）&lt;/p&gt;
&lt;p&gt;建立命令也很简单，直接从本地机器（X Server 端）发起一个如下的 SSH 连接即可：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ ssh -X &amp;lt;SSH Server&amp;gt;&lt;/code&gt; &lt;br /&gt;
 图 5. X 转发&lt;img data-src=&#34;image006.jpg&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
建立连接之后就可以直接运行远程的 X 应用。注意建立 X 转发之后会自动设置 DISPLAY 环境变量，通常会被设置成 localhost:10.0，我们无需也不应该在连接之后再进行修改此环境变量。&lt;/p&gt;
&lt;p&gt;一个比较常见的场景是，我们的本地机器是 Windows 操作系统，这时可以选择开源的 XMing 来作为我们的 XServer，而 SSH Client 则可以任意选择了，例如 PuTTY，Cygwin 均可以配置 访问 SSH 的同时建立 X 转发。&lt;/p&gt;
&lt;h1 id=&#34;第四部分-总结&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#第四部分-总结&#34;&gt;#&lt;/a&gt; 第四部分 总结&lt;/h1&gt;
&lt;p&gt;至此，我们已经完成了本地端口转发，远程端口转发，动态端口转发以及 X 转发的介绍。回顾起来，总的思路是通过将 TCP 连接转发到 SSH 通道上以解决数据加密以及突破防火墙的种种限制。对一些已知端口号的应用，例如 Telnet/LDAP/SMTP，我们可以使用本地端口转发或者远程端口转发来达到目的。动态端口转发则可以实现 SOCKS 代理从而加密以及突破防火墙对 Web 浏览的限制。对于 X 应用，无疑是 X 转发最为适用了。虽然每一部分我们都只是简单的介绍了一下，但如果能灵活应用这些技巧，相信对我们的日常生活 / 工作也是会有所帮助的。&lt;/p&gt;
</content>
        <category term="SSH隧道" />
        <updated>2020-12-02T09:30:08.000Z</updated>
    </entry>
</feed>
