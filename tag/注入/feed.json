{
    "version": "https://jsonfeed.org/version/1",
    "title": "Or0kit • All posts by \"注入\" tag",
    "description": "临渊羡鱼，不如退而结网",
    "home_page_url": "https://Or0kit.github.io",
    "items": [
        {
            "id": "https://or0kit.github.io/Bin/WindowsPE/%E5%AF%BC%E5%85%A5%E8%A1%A8%E6%B3%A8%E5%85%A5/",
            "url": "https://or0kit.github.io/Bin/WindowsPE/%E5%AF%BC%E5%85%A5%E8%A1%A8%E6%B3%A8%E5%85%A5/",
            "title": "导入表注入",
            "date_published": "2021-10-14T09:02:22.000Z",
            "content_html": "<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<p>导入表中不能动 IAT 表，因为 exe 中的 call 0x0040123 这种调用导入的函数已经被写死了，程序中有多少地址引用这个函数，我们基本无法计算，工作量太大了。</p>\n<h1 id=\"注入的种类\"><a class=\"anchor\" href=\"#注入的种类\">#</a> 注入的种类</h1>\n<p>1、注册表注入<br />\n 2、导入表注入<br />\n 3、特洛伊注入<br />\n 4、远程线程注入<br />\n 5、无 DLL 注入<br />\n 6、Apc 注入<br />\n 7、Windows 挂钩注入 DLL<br />\n8、输入法注入</p>\n<h1 id=\"导入表注入原理\"><a class=\"anchor\" href=\"#导入表注入原理\">#</a> 导入表注入原理</h1>\n<p>当 exe 被加载时，系统会根据 exe 导入表信息来加载需要用到的 DLL, 导入表注入的原理就是修改 exe 导入表，将自己的 DLL 添加到 exe 的导入表中，这样 exe 运行时可以将自己的 DLL 加载到 exe 的进程空间。</p>\n<h1 id=\"导入表注入的实现步骤\"><a class=\"anchor\" href=\"#导入表注入的实现步骤\">#</a> 导入表注入的实现步骤：</h1>\n<p><strong>第一步：</strong></p>\n<p>根据目录项 (第二个就是导入表) 得到导入表信息：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_IMAGE_DATA_DIRECTORY</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    DWORD   VirtualAddress<span class=\"token punctuation\">;</span>\t</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    DWORD   Size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span> IMAGE_DATA_DIRECTORY<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>PIMAGE_DATA_DIRECTORY<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><code>VirtualAddress</code> : 指向导入表结构\t<br />\n <code>Size</code> : 导入表的总大小</p>\n<p>这两个值都需要</p>\n<p><strong>第二步：</strong></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_IMAGE_IMPORT_DESCRIPTOR</span> <span class=\"token punctuation\">&#123;</span>\t\t\t\t\t\t\t</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">union</span> <span class=\"token punctuation\">&#123;</span>\t\t\t\t\t\t\t</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        DWORD   Characteristics<span class=\"token punctuation\">;</span>           \t\t\t\t\t\t\t</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        DWORD   OriginalFirstThunk<span class=\"token punctuation\">;</span>         \t\t\t\t\t\t\t</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    DWORD   TimeDateStamp<span class=\"token punctuation\">;</span>               \t\t\t\t\t\t\t</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    DWORD   ForwarderChain<span class=\"token punctuation\">;</span>              \t\t\t\t\t\t\t</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    DWORD   Name<span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    DWORD   FirstThunk<span class=\"token punctuation\">;</span>                 \t\t\t\t\t\t\t</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span> IMAGE_IMPORT_DESCRIPTOR<span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">typedef</span> IMAGE_IMPORT_DESCRIPTOR UNALIGNED <span class=\"token operator\">*</span>PIMAGE_IMPORT_DESCRIPTOR<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><img data-src=\"image001.png\" alt=\"\" /></p>\n<p>新增一个导入表需要的空间：</p>\n<p>A:20 字节</p>\n<p>B:16 字节</p>\n<p>C: 取决于 DLL 名串的长度 + 1</p>\n<p>D: 取决于函数名的长度 + 1+2</p>\n<p>判断哪一个节的空白区 &gt; Size (原导入表的大小) + 20 + A + B + C + D</p>\n<p>如果空间不够：可以将 C/D 存储在其他的空白区</p>\n<p>也就是，只要空白区 &gt; Size + 0x20 就可以了</p>\n<p>如果仍然不够，就需要扩大最后一个节，或者新增节来解决.</p>\n<p><strong>第三步：</strong></p>\n<p>将原导入表全部 Copy 到空白区</p>\n<p><strong>第四步：</strong></p>\n<p>在新的导入表后面，追加一个导入表.</p>\n<p><strong>第五步：</strong></p>\n<p>追加 8 个字节的 INT 表  8 个字节的 IAT 表</p>\n<p><strong>第六步：</strong></p>\n<p>追加一个 IMAGE_IMPORT_BY_NAME 结构，前 2 个字节是 0 后面是函数名称字符串</p>\n<p><strong>第七步：</strong></p>\n<p>将 IMAGE_IMPORT_BY_NAME 结构的 RVA 赋值给 INT 和 IAT 表中的第一项</p>\n<p><strong>第八步：</strong></p>\n<p>分配空间存储 DLL 名称字符串 并将该字符串的 RVA 赋值给 Name 属性</p>\n<p><strong>第九步：</strong></p>\n<p>修正 IMAGE_DATA_DIRECTORY 结构的 VirtualAddress 和 Size</p>\n",
            "tags": [
                "注入",
                "导入表注入"
            ]
        }
    ]
}