{
    "version": "https://jsonfeed.org/version/1",
    "title": "Or0kit • All posts by \"swapcontext\" tag",
    "description": "临渊羡鱼，不如退而结网",
    "home_page_url": "https://Or0kit.github.io",
    "items": [
        {
            "id": "https://or0kit.github.io/Bin/Core/WindowsXp/Process-Thread/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B-Windows%E7%BA%BF%E7%A8%8B%E5%88%87%E6%8D%A2/",
            "url": "https://or0kit.github.io/Bin/Core/WindowsXp/Process-Thread/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B-Windows%E7%BA%BF%E7%A8%8B%E5%88%87%E6%8D%A2/",
            "title": "进程与线程-Windows线程切换",
            "date_published": "2022-01-21T07:33:33.000Z",
            "content_html": "<h1 id=\"楔子\"><a class=\"anchor\" href=\"#楔子\">#</a> 楔子</h1>\n<p>线程切换是操作系统的核心内容，几乎所有的内核 API 都会调用切换线程的函数。</p>\n<blockquote>\n<p>我们要解决以下这些问题，带着问题去学习。</p>\n</blockquote>\n<ol>\n<li>SwapContext 有几个参数，分别是什么？</li>\n<li>SwapContext 在哪里实现了线程切换</li>\n<li>线程切换的时候，会切换 CR3 吗？切换 CR3 的条件是什么？</li>\n<li>中断门提权时，CPU 会从 TSS 得到 ESP0 和 SS0，TSS 中存储的一定是当前线程的 ESP0 和 SS0 吗？如何做到的？</li>\n<li>FS:[0] 在 3 环指向 TEB，但是线程有很多，FS:[0] 指向的是哪个线程的 TEB，如何做到的？</li>\n<li>0 环的 ExceptionList 在哪里备份的？</li>\n<li>IdleThread 是什么？什么时候执行？找到这个函数.</li>\n<li>如何找到下一个就绪线程？</li>\n<li>模拟线程切换与 Windows 线程切换有哪些区别？</li>\n</ol>\n<h1 id=\"windows线程切换\"><a class=\"anchor\" href=\"#windows线程切换\">#</a> Windows 线程切换</h1>\n<h2 id=\"主动切换切换\"><a class=\"anchor\" href=\"#主动切换切换\">#</a> 主动切换切换</h2>\n<p>在上一篇模模拟 Windows 线程切换 (ThreadSwitch) 中，有一个重要的函数： <code>SwitchContext</code>  只有调用这个函数，就会导致线程切换。<br />\nWindows 也有类似的函数： <code>KiSwapContext</code></p>\n<h3 id=\"kiswapcontext函数\"><a class=\"anchor\" href=\"#kiswapcontext函数\">#</a> KiSwapContext 函数</h3>\n<p>此函数在内核文件  <code>ntkrnlpa.exe</code> / <code>ntoskrnl.exe</code>  中。</p>\n<p>在 IDA 中查看其反汇编：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>.text:0046EA9C ; __fastcall KiSwapContext (x)</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>.text:0046EA9C @KiSwapContext@4 proc near              ; CODE XREF: KiSwapThread ()+85↑p</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>.text:0046EA9C</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>.text:0046EA9C var_10          &#x3D; dword ptr -10h</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>.text:0046EA9C var_C           &#x3D; dword ptr -0Ch</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>.text:0046EA9C var_8           &#x3D; dword ptr -8</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>.text:0046EA9C var_4           &#x3D; dword ptr -4</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>.text:0046EA9C</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>.text:0046EA9C                 sub     esp, 10h        ; 使用 fastcall 调用方式。</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>.text:0046EA9C                                         ; 寄存器传参，因此要将使用到的寄存器保存在堆栈中。</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>.text:0046EA9F                 mov     [esp+0Ch], ebx  ; 入栈</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>.text:0046EAA3                 mov     [esp+8], esi</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>.text:0046EAA7                 mov     [esp+4], edi</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>.text:0046EAAB                 mov     [esp], ebp</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>.text:0046EAAE                 mov     ebx, large fs:1Ch ; _KPCR.SelfPcr</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>.text:0046EAB5                 mov     esi, ecx        ; ecx: 新线程的_ETHREAD</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>.text:0046EAB7                 mov     edi, [ebx+124h] ; 取当前正在运行的线程的结构体</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>.text:0046EABD                 mov     [ebx+124h], esi ; 修改 KPCR，换成新线程的 ETHREAD 结构体</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>.text:0046EAC3                 mov     cl, [edi+58h]   ; _ETHREAD.Tcb.WaitIrql</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>.text:0046EAC6                 call    SwapContext</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>.text:0046EACB                 mov     ebp, [esp]      ; 恢复新线程各种寄存器</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>.text:0046EACE                 mov     edi, [esp+4]</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>.text:0046EAD2                 mov     esi, [esp+8]</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>.text:0046EAD6                 mov     ebx, [esp+0Ch]</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>.text:0046EADA                 add     esp, 10h</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>.text:0046EADD                 retn</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>.text:0046EADD @KiSwapContext@4 endp</pre></td></tr></table></figure><p>这个函数并不是真正的线程切换，只是更改了 KPCR 中的 ETHREAD 结构体。把要旧的结构体换成了新的。</p>\n<p>关于  <code>SwapContext</code>  函数，后面在详细对其逆向分析。</p>\n<h3 id=\"查看调用kiswapcontext的函数\"><a class=\"anchor\" href=\"#查看调用kiswapcontext的函数\">#</a> 查看调用 KiSwapContext 的函数</h3>\n<p>在 IDA 中使用交叉引用：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Direction</th>\n<th style=\"text-align:left\">Type</th>\n<th style=\"text-align:left\">Address</th>\n<th style=\"text-align:left\">Text</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">Up</td>\n<td style=\"text-align:left\">p</td>\n<td style=\"text-align:left\">KiSwapThread()+85</td>\n<td style=\"text-align:left\">call    @KiSwapContext@4; KiSwapContext(x)</td>\n</tr>\n</tbody>\n</table>\n<p>发现 KiSwapThread 调用的 KiSwaoContext 。接着查看 KiSwapThread 的交叉引用：</p>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<p>发现有 7 个函数调用了 KiSwapThread 。我们再随便找一个函数，查看其交叉引用：</p>\n<p><img data-src=\"image002.png\" alt=\"\" /></p>\n<p>发现有 270 个函数，这就意味着我们调用了这里面的任何一个函数都会导致线程切换，而这些函数还有上层调用的它们的函数，所以我们可以得出一个结论：<strong>Windows 中绝大部分 API 都调用了 SwapContext 函数</strong>，也就是说，当前线程只要调用了 API，就会导致线程切换。</p>\n<h3 id=\"swapcontext-函数\"><a class=\"anchor\" href=\"#swapcontext-函数\">#</a> SwapContext 函数</h3>\n<p>这个函数目前我还不能完全理解。大部分是偷看海哥视频里的注释。</p>\n<p>在 IDA 中逆向分析如下：</p>\n<p><img data-src=\"image003.png\" alt=\"\" /></p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>.text:0046EBC0 SwapContext     proc near               ; CODE XREF: KiUnlockDispatcherDatabase (x)+99↑p</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>.text:0046EBC0                                         ; KiSwapContext (x)+2A↑p ...</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>.text:0046EBC0</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>.text:0046EBC0 ; FUNCTION CHUNK AT .text:0046ED48 SIZE 00000033 BYTES</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>.text:0046EBC0</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>.text:0046EBC0                 or      cl, cl</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>.text:0046EBC2                 mov     es:[esi+_ETHREAD.Tcb.State], 2 ; 1 就绪 2 运行 5 等待</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>.text:0046EBC7                 pushf</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>.text:0046EBC8                 lea     ecx, [ebx+540h]</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>.text:0046EBCE                 call    @KeAcquireQueuedSpinLockAtDpcLevel@4 ; KeAcquireQueuedSpinLockAtDpcLevel (x)</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>.text:0046EBD3                 lea     ecx, [ebx+_KPCR.PrcbData.LockQueue]</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>.text:0046EBD9                 call    @KeReleaseQueuedSpinLockFromDpcLevel@4 ; KeReleaseQueuedSpinLockFromDpcLevel (x)</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>.text:0046EBDE</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>.text:0046EBDE loc_46EBDE:                             ; CODE XREF: KiIdleLoop ()+7C↓j</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>.text:0046EBDE                 mov     ecx, [ebx+_KPCR.NtTib.ExceptionList] ; 保存本线程切换时的内核 SEH 链表</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>.text:0046EBE0                 cmp     [ebx+_KPCR.PrcbData.DpcRoutineActive], 0 ; 是否有 DPC 有就蓝屏</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>.text:0046EBE7                 push    ecx</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>.text:0046EBE8                 jnz     loc_46ED71</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>.text:0046EBEE                 cmp     ds:_PPerfGlobalGroupMask, 0 ; LOG 用的 Windows 自己调试用的 别的地方没有用</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>.text:0046EBF5                 jnz     loc_46ED48</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>.text:0046EBFB</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>.text:0046EBFB loc_46EBFB:                             ; CODE XREF: SwapContext+190↓j</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>.text:0046EBFB                                         ; SwapContext+1A1↓j ...</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>.text:0046EBFB                 mov     ebp, cr0        ; cr0 控制寄存器可以判断当前环境是实模式还是保护模式，是否开启分页模式，写保护</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>.text:0046EBFE                 mov     edx, ebp</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>.text:0046EC00                 cmp     [edi+_ETHREAD.Tcb.NpxState], 0 ; NpxState 与浮点处理器相关，运行浮点用这个，没运行就不用。</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>.text:0046EC04                 jz      loc_46ED23      ; cr0 寄存器相关的</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>.text:0046EC0A</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>.text:0046EC0A loc_46EC0A:                             ; CODE XREF: _ScPatchFxe+E↓j</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>.text:0046EC0A                 mov     cl, [esi+_ETHREAD.Tcb.DebugActive]</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>.text:0046EC0D                 mov     [ebx+_KPCR.DebugActive], cl ; 新的线程的调试状态，更新到 KPCR 中</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>.text:0046EC10                 cli                     ; cli 不会被时钟中断了</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>.text:0046EC11                 mov     [edi+_ETHREAD.Tcb.KernelStack], esp ; 把当前的 esp 存储到旧线程的 ETHREAD 中</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>.text:0046EC14                 mov     eax, [esi+_ETHREAD.Tcb.InitialStack] ; 新线程的栈底</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>.text:0046EC17                 mov     ecx, [esi+_ETHREAD.Tcb.StackLimit]</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>.text:0046EC1A                 sub     eax, 210h       ; 减去 210H 就是将上面保存的浮点寄存器去掉 现在是真正的栈底了</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>.text:0046EC1F                 mov     [ebx+_KPCR.NtTib.StackLimit], ecx ; 更新 KPCR</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>.text:0046EC22                 mov     [ebx+_KPCR.NtTib.StackBase], eax ; 更新 KPCR</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>.text:0046EC25                 xor     ecx, ecx</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>.text:0046EC27                 mov     cl, [esi+_ETHREAD.Tcb.NpxState] ; 判断 NpxState 有没有浮点支持。</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>.text:0046EC27                                         ; 如果上一个线程和要替换的线程对浮点支持是一样的那就不用换 CR0，不一样就要换。</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>.text:0046EC2A                 and     edx, 0FFFFFFF1h</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>.text:0046EC2D                 or      ecx, edx</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>.text:0046EC2F                 or      ecx, [eax+20Ch]</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>.text:0046EC35                 cmp     ebp, ecx</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>.text:0046EC37                 jnz     loc_46ED1B</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>.text:0046EC3D                 lea     ecx, [ecx+0]</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>.text:0046EC40</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>.text:0046EC40 loc_46EC40:                             ; CODE XREF: SwapContext+15E↓j</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>.text:0046EC40                 test    dword ptr [eax-1Ch], 20000h ; 检查是否是虚拟 8086 模式，</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>.text:0046EC40                                         ; 如果不是的话 eax-10h 也就是减掉_KTRAP_FRAME 中的</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>.text:0046EC40                                         ; +0x07c V86Es            : Uint4B</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>.text:0046EC40                                         ; +0x080 V86Ds            : Uint4B</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>.text:0046EC40                                         ; +0x084 V86Fs            : Uint4B</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>.text:0046EC40                                         ; +0x088 V86Gs            : Uint4B</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>.text:0046EC40                                         ; 4 个成员。</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>.text:0046EC40                                         ; 如果是那就不减。</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>.text:0046EC47                 jnz     short loc_46EC4C ; 取 TSS（TSS 就是 3 环向 0 环切的时候，去 TSS 取 ESP0 和 SS0 别的没用）</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>.text:0046EC49                 sub     eax, 10h</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>.text:0046EC4C</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>.text:0046EC4C loc_46EC4C:                             ; CODE XREF: SwapContext+87↑j</pre></td></tr><tr><td data-num=\"62\"></td><td><pre>.text:0046EC4C                 mov     ecx, [ebx+_KPCR.TSS] ; 取 TSS（TSS 就是 3 环向 0 环切的时候，去 TSS 取 ESP0 和 SS0 别的没用）</pre></td></tr><tr><td data-num=\"63\"></td><td><pre>.text:0046EC4F                 mov     [ecx+_KTSS.Esp0], eax ; 更新 TTS 中的 Esp0</pre></td></tr><tr><td data-num=\"64\"></td><td><pre>.text:0046EC52                 mov     esp, [esi+_ETHREAD.Tcb.KernelStack] ; 将新线程的 esp 存到当前的 esp 寄存器中</pre></td></tr><tr><td data-num=\"65\"></td><td><pre>.text:0046EC55                 mov     eax, [esi+_ETHREAD.Tcb.Teb] ; 当前线程有很多状态 一份在 ETHREAD 里面 还有一个备份在 FS 中</pre></td></tr><tr><td data-num=\"66\"></td><td><pre>.text:0046EC55                                         ; 这样的好处是 在 3 环可以通过 fs 获取当前线程的信息</pre></td></tr><tr><td data-num=\"67\"></td><td><pre>.text:0046EC58                 mov     [ebx+_KPCR.NtTib.Self], eax ; 临时存储新线程的 TEB</pre></td></tr><tr><td data-num=\"68\"></td><td><pre>.text:0046EC5B                 sti                     ; 开启时钟中断</pre></td></tr><tr><td data-num=\"69\"></td><td><pre>.text:0046EC5C                 mov     eax, [edi+_ETHREAD.Tcb.ApcState.Process]</pre></td></tr><tr><td data-num=\"70\"></td><td><pre>.text:0046EC5F                 cmp     eax, [esi+_ETHREAD.Tcb.ApcState.Process] ; 查看是否是同一个进程内的线程切换</pre></td></tr><tr><td data-num=\"71\"></td><td><pre>.text:0046EC62                 mov     [edi+_ETHREAD.Tcb.IdleSwapBlock], 0</pre></td></tr><tr><td data-num=\"72\"></td><td><pre>.text:0046EC66                 jz      short loc_46ECA8 ; 如果是一个进程内的线程切换，则跳转。</pre></td></tr><tr><td data-num=\"73\"></td><td><pre>.text:0046EC68                 mov     edi, [esi+_ETHREAD.Tcb.ApcState.Process] ; 如果不是一个进程，取出新线程的进程结构体</pre></td></tr><tr><td data-num=\"74\"></td><td><pre>.text:0046EC6B                 mov     ecx, [ebx+_KPCR.SetMember]</pre></td></tr><tr><td data-num=\"75\"></td><td><pre>.text:0046EC6E                 xor     [eax+34h], ecx</pre></td></tr><tr><td data-num=\"76\"></td><td><pre>.text:0046EC71                 xor     [edi+_EPROCESS.Pcb.ActiveProcessors], ecx ; ActiveProcessors 记录了当前进程正在哪些处理器上运行</pre></td></tr><tr><td data-num=\"77\"></td><td><pre>.text:0046EC74                 test    [edi+_EPROCESS.Pcb.LdtDescriptor.LimitLow], 0FFFFh ; 判断 LDT</pre></td></tr><tr><td data-num=\"78\"></td><td><pre>.text:0046EC7A                 jnz     short loc_46ECED</pre></td></tr><tr><td data-num=\"79\"></td><td><pre>.text:0046EC7C                 xor     eax, eax</pre></td></tr><tr><td data-num=\"80\"></td><td><pre>.text:0046EC7E</pre></td></tr><tr><td data-num=\"81\"></td><td><pre>.text:0046EC7E loc_46EC7E:                             ; CODE XREF: SwapContext+156↓j</pre></td></tr><tr><td data-num=\"82\"></td><td><pre>.text:0046EC7E                 lldt    ax              ; 修改 LDT 寄存器</pre></td></tr><tr><td data-num=\"83\"></td><td><pre>.text:0046EC81                 lea     ecx, [ebx+540h]</pre></td></tr><tr><td data-num=\"84\"></td><td><pre>.text:0046EC87                 call    @KeReleaseQueuedSpinLockFromDpcLevel@4 ; KeReleaseQueuedSpinLockFromDpcLevel (x)</pre></td></tr><tr><td data-num=\"85\"></td><td><pre>.text:0046EC8C                 xor     eax, eax</pre></td></tr><tr><td data-num=\"86\"></td><td><pre>.text:0046EC8E                 mov     gs, eax         ; GS 清零</pre></td></tr><tr><td data-num=\"87\"></td><td><pre>.text:0046EC90                 assume gs:nothing</pre></td></tr><tr><td data-num=\"88\"></td><td><pre>.text:0046EC90                 mov     eax, [edi+_EPROCESS.Pcb.DirectoryTableBase] ; 取新线程的 CR3</pre></td></tr><tr><td data-num=\"89\"></td><td><pre>.text:0046EC93                 mov     ebp, [ebx+_KPCR.TSS]</pre></td></tr><tr><td data-num=\"90\"></td><td><pre>.text:0046EC96                 mov     ecx, dword ptr [edi+_EPROCESS.Pcb.IopmOffset]</pre></td></tr><tr><td data-num=\"91\"></td><td><pre>.text:0046EC99                 mov     [ebp+_KTSS.CR3], eax</pre></td></tr><tr><td data-num=\"92\"></td><td><pre>.text:0046EC9C                 mov     cr3, eax        ; 切换 CR3</pre></td></tr><tr><td data-num=\"93\"></td><td><pre>.text:0046EC9F                 mov     [ebp+_KTSS.IoMapBase], cx  ; 存储 IO 权限位图到 TSS。当前线程的的 IO 权限位图 Windows 2000 以后不用了。</pre></td></tr><tr><td data-num=\"94\"></td><td><pre>.text:0046ECA3                 jmp     short loc_46ECB3</pre></td></tr><tr><td data-num=\"95\"></td><td><pre>.text:0046ECA3 ; ---------------------------------------------------------------------------</pre></td></tr><tr><td data-num=\"96\"></td><td><pre>.text:0046ECA5                 align 4</pre></td></tr><tr><td data-num=\"97\"></td><td><pre>.text:0046ECA8</pre></td></tr><tr><td data-num=\"98\"></td><td><pre>.text:0046ECA8 loc_46ECA8:                             ; CODE XREF: SwapContext+A6↑j</pre></td></tr><tr><td data-num=\"99\"></td><td><pre>.text:0046ECA8                 lea     ecx, [ebx+540h]</pre></td></tr><tr><td data-num=\"100\"></td><td><pre>.text:0046ECAE                 call    @KeReleaseQueuedSpinLockFromDpcLevel@4 ; KeReleaseQueuedSpinLockFromDpcLevel (x)</pre></td></tr><tr><td data-num=\"101\"></td><td><pre>.text:0046ECB3</pre></td></tr><tr><td data-num=\"102\"></td><td><pre>.text:0046ECB3 loc_46ECB3:                             ; CODE XREF: SwapContext+E3↑j</pre></td></tr><tr><td data-num=\"103\"></td><td><pre>.text:0046ECB3                 mov     eax, [ebx+_KPCR.NtTib.Self]</pre></td></tr><tr><td data-num=\"104\"></td><td><pre>.text:0046ECB6                 mov     ecx, [ebx+_KPCR.GDT] ;  假设 GDT 表在 0x8003f000</pre></td></tr><tr><td data-num=\"105\"></td><td><pre>.text:0046ECB6                                         ; ecx &#x3D; 0x8003f000</pre></td></tr><tr><td data-num=\"106\"></td><td><pre>.text:0046ECB6                                         ; 3 环 FS &#x3D; 0x3B</pre></td></tr><tr><td data-num=\"107\"></td><td><pre>.text:0046ECB6                                         ; 所以 FS 在 GDT 表里的地址是 0x8003f03B</pre></td></tr><tr><td data-num=\"108\"></td><td><pre>.text:0046ECB6                                         ; 下面的操作是修改 FS 的段描述符，这样 3 环 FS 就能找到 TEB 了</pre></td></tr><tr><td data-num=\"109\"></td><td><pre>.text:0046ECB9                 mov     [ecx+3Ah], ax</pre></td></tr><tr><td data-num=\"110\"></td><td><pre>.text:0046ECBD                 shr     eax, 10h</pre></td></tr><tr><td data-num=\"111\"></td><td><pre>.text:0046ECC0                 mov     [ecx+3Ch], al</pre></td></tr><tr><td data-num=\"112\"></td><td><pre>.text:0046ECC3                 mov     [ecx+3Fh], ah</pre></td></tr><tr><td data-num=\"113\"></td><td><pre>.text:0046ECC6                 inc     [esi+_ETHREAD.Tcb.ContextSwitches]</pre></td></tr><tr><td data-num=\"114\"></td><td><pre>.text:0046ECC9                 inc     [ebx+_KPCR.PrcbData.KeContextSwitches]</pre></td></tr><tr><td data-num=\"115\"></td><td><pre>.text:0046ECCF                 pop     ecx</pre></td></tr><tr><td data-num=\"116\"></td><td><pre>.text:0046ECD0                 mov     [ebx], ecx</pre></td></tr><tr><td data-num=\"117\"></td><td><pre>.text:0046ECD2                 cmp     byte ptr [esi+49h], 0</pre></td></tr><tr><td data-num=\"118\"></td><td><pre>.text:0046ECD6                 jnz     short loc_46ECDC</pre></td></tr><tr><td data-num=\"119\"></td><td><pre>.text:0046ECD8                 popf</pre></td></tr><tr><td data-num=\"120\"></td><td><pre>.text:0046ECD9                 xor     eax, eax</pre></td></tr><tr><td data-num=\"121\"></td><td><pre>.text:0046ECDB                 retn</pre></td></tr></table></figure><p>结合以下的两张图可以的更好理解 <code>SwapContext</code>  函数，关于这两张图，后面会详细说明。</p>\n<p><img data-src=\"image004.png\" alt=\"\" />   <img data-src=\"image005.png\" alt=\"\" /></p>\n<h3 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h3>\n<ol>\n<li>Windows 中绝大部分 API 都调用了 SwapContext 函数</li>\n</ol>\n<p>也就是说，当线程只要调用了 API，就是导致线程切换。</p>\n<ol start=\"2\">\n<li>线程切换时会比较是否属于同一个进程，如果不是，切换 Cr3</li>\n</ol>\n<p>Cr3 换了，进程也就切换了。</p>\n<p>那么如果不调用 API，就可以一直占用 CPU 吗？</p>\n<h2 id=\"线程被动切换\"><a class=\"anchor\" href=\"#线程被动切换\">#</a> 线程被动切换</h2>\n<p>一个线程并不是必须自身调用 API 来实现线程切换，其他可以引起中断。</p>\n<p>两类：①异常 / 中断；②时钟中断。</p>\n<h3 id=\"时钟中断\"><a class=\"anchor\" href=\"#时钟中断\">#</a> 时钟中断</h3>\n<p>时钟中断走 0x30 号中断，系统每过 20ms 触发一次时钟中断来 (可能) 切换线程。</p>\n<p>如要获取当前的时钟间隔值，可使用 Win32 API： <code>GetSystemTimeAdjustment</code></p>\n<p>时钟中断的执行流程如下：</p>\n<p><img data-src=\"image006.png\" alt=\"\" /></p>\n<h4 id=\"总结-2\"><a class=\"anchor\" href=\"#总结-2\">#</a> 总结</h4>\n<p>线程切换的几种情况：</p>\n<ol>\n<li>主动调用 API 函数</li>\n<li>时钟中断</li>\n<li>异常处理</li>\n</ol>\n<p>如果一个线程不调用 API，在代码中屏蔽中断 (CLI 指令), 并且不会出现异常，那么当前线程将永久占有 CPU, 单核占有率 100%，2 核就是 50%。</p>\n<h3 id=\"时间片管理\"><a class=\"anchor\" href=\"#时间片管理\">#</a> 时间片管理</h3>\n<p>在上面我们知道时钟中断会导致线程进行切换，但并不是说只要有时钟中断就一定会切换线程，时钟中断时，两种情况会导致线程切换：</p>\n<p>1、当前的线程 CPU 时间片到期</p>\n<p>2、有备用线程 (KPCR.PrcbData.NextThread)</p>\n<h4 id=\"关于cpu时间片\"><a class=\"anchor\" href=\"#关于cpu时间片\">#</a> 关于 CPU 时间片</h4>\n<ol>\n<li>当一个新的线程开始执行时，初始化程序会在 <code>_KTHREAD.Quantum</code>  赋初始值，该值的大小由 <code>_KPROCESS.ThreadQuantum</code>  决定<br />\n (观察 <code>ThreadQuantum</code>  大小)</li>\n</ol>\n<p>这是属于某个进程的线程的  <code>Quantum</code>  的值</p>\n<p><img data-src=\"image007.png\" alt=\"\" /></p>\n<p>这是其进程的  <code>ThreadQuantum</code>  的值</p>\n<p><img data-src=\"image008.png\" alt=\"\" /></p>\n<ol start=\"2\">\n<li>每次时钟中断会调用 <code>KeUpdateRunTime</code>  函数，该函数每次将当前线程 <code>Quantum</code>  减少 3 个单位，如果减到 0，则将 <code>KPCR.PrcbData.QuantumEnd</code>  的值设置为非 0。</li>\n</ol>\n<p>在 IDA 中逆向分析  <code>KeUpdateRunTime</code>  函数：</p>\n<p><img data-src=\"image009.png\" alt=\"\" /></p>\n<p><code>KPCR.PrcbData.QuantumEnd</code>  的值代表着时间片是否用完，没有用完时它的值是 0 ，用完的话就是非 0 了。</p>\n<ol start=\"3\">\n<li><code>KiDispatchInterrupt</code>  判断时间片到期：</li>\n</ol>\n<p>调用 <code>KiQuantumEnd</code>  (重新设置时间片、找到要运行的线程)</p>\n<p>这是时钟中断最后要执行的函数。</p>\n<p>在 IDA 中逆向分析  <code>KiDispatchInterrupt</code>  函数：</p>\n<p><img data-src=\"image010.png\" alt=\"\" /></p>\n<p><code>KiQuantumEnd</code>  这个函数做的事情主要就是这个：</p>\n<p><img data-src=\"image011.png\" alt=\"\" /></p>\n<p>重新设置时间片：进程中原本是多少，还设置成多少。<br />\n之后会调用 <code>KiFindReadyThread</code>  切换线程的状态，然后执行  <code>SwapContext</code>  切换线程。</p>\n<p>在 IDA 中看 <code>KiFindReadyThread</code>  的关键操作：</p>\n<p><img data-src=\"image012.png\" alt=\"\" /></p>\n<p>从汇编的角度看双向链表的添加操作……</p>\n<h4 id=\"有备用线程的情况下\"><a class=\"anchor\" href=\"#有备用线程的情况下\">#</a> 有备用线程的情况下</h4>\n<p>分析 <code>KiDispatchInterrupt</code>  函数我们可以得知另一种情况，当时间片没有耗尽，但存在备用线程时，仍然会切换线程，若没有备用线程就直接返回了。</p>\n<p><img data-src=\"image013.png\" alt=\"\" /></p>\n<h2 id=\"线程切换的三种情况总述\"><a class=\"anchor\" href=\"#线程切换的三种情况总述\">#</a> 线程切换的三种情况总述</h2>\n<p>1)、当前线程主动调用 API：</p>\n<p>API 函数 ---&gt;  <code>KiSwapThread</code>   ---&gt;  <code>KiSwapContext</code>  ---&gt;  <code>SwapContext</code></p>\n<p>(2)、当前线程时间片到期：</p>\n<p><code>KiDispatchInterrupt</code>  ---&gt;  <code>KiQuantumEnd</code>  ---&gt;  <code>KiFindReadyThread</code>  ---&gt;  <code>SwapContext</code></p>\n<p>(3)、有备用线程 (KPCR.PrcbData.NextThread)</p>\n<p><code>KiDispatchInterrupt</code>  ---&gt;  <code>KiFindReadyThread</code>  ---&gt;  <code>SwapContext</code></p>\n<h2 id=\"线程切换与tss\"><a class=\"anchor\" href=\"#线程切换与tss\">#</a> 线程切换与 TSS</h2>\n<p><code>SwapContext</code>  这个函数是 Windows 线程切换的核心，无论是主动切换还是系统时钟导致的线程切换，最终都会调用这个函数。在这个函数中除了切换堆栈以外，还做了很多其他的事情，了解这些细节对我们学习操作系统至关重要。</p>\n<p>我们了解一下线程切换与 TSS 的关系。</p>\n<h3 id=\"内核堆栈\"><a class=\"anchor\" href=\"#内核堆栈\">#</a> 内核堆栈</h3>\n<p>在_KTHREAD 结构体中有三个成员：<br />\n <code>InitialStack</code>  栈底<br />\n <code>KernelStack</code>  栈顶<br />\n <code>StackLimit</code>  栈的边界</p>\n<p>由此我们可以大致了解内核堆栈信息：</p>\n<p><img data-src=\"image014.png\" alt=\"\" /></p>\n<h3 id=\"内核堆栈的结构\"><a class=\"anchor\" href=\"#内核堆栈的结构\">#</a> 内核堆栈的结构</h3>\n<p>对于内核堆栈的结构，在通过逆向 <code>SwapContext</code>  函数时，我们已经发现了一些端倪，如下：</p>\n<p><img data-src=\"image015.png\" alt=\"\" /></p>\n<p>也就是说从线程的 <code>InitialStack</code>  栈底开始往上 0x210 个字节 是存储着浮点寄存器的值，而后紧接着就是 <code>_Trap_Frame</code>  结构</p>\n<p><img data-src=\"image005.png\" alt=\"\" /></p>\n<p>之后又判断了是否处于虚拟 8086 模式，对 0 环栈底做了进一步的处理。附上 <code>_Trap_Frame</code>  结构图：</p>\n<p><img data-src=\"image016.png\" alt=\"\" /></p>\n<h3 id=\"调用api进0环\"><a class=\"anchor\" href=\"#调用api进0环\">#</a> 调用 API 进 0 环</h3>\n<p>普通调用：通过 <code>TSS.ESP0</code>  得到 0 环堆栈。---- 既中断门提权</p>\n<p>快速调用：从 MSR 得到一个临时 0 环栈，代码执行后仍然<br />\n通过 TSS.ESP0 得到当前线程 0 环堆栈。</p>\n<p><img data-src=\"image017.png\" alt=\"\" /></p>\n<h3 id=\"如何用tss保存所有线程的esp0\"><a class=\"anchor\" href=\"#如何用tss保存所有线程的esp0\">#</a> 如何用 TSS 保存所有线程的 ESP0</h3>\n<p>Intel 设计 TSS 的目的是为了任务切换 (线程切换), 但 Windows 与 Linux<br />\n 并没有使用。而是采用堆栈来保存线程的各种寄存器。</p>\n<p>一个 CPU 只有一个 TSS, 但是线程很多，如何用一个 TSS 来保存所有<br />\n线程的 ESP0 呢？</p>\n<p>在 <code>SwapContext</code>  函数中查找与 TTS 相关的代码（这里改了后面肯定是要用的）：</p>\n<p><img data-src=\"image018.png\" alt=\"\" /></p>\n<p>发现有三个位置与 TSS 有联系，其中第一处就是我们要找的答案，eax 存储的就是处理后的线程的 0 环 ESP。<br />\n<strong>每一次线程切换都会更新这个值，把对应线程的 0 环堆栈存储在 TTS.Esp0 的位置。</strong></p>\n<p>第二处是把当前线程所属进程的 CR3 也存储到了 TSS 中。<br />\n第三处是 IO 权限位图。</p>\n<h2 id=\"线程切换与fs\"><a class=\"anchor\" href=\"#线程切换与fs\">#</a> 线程切换与 FS</h2>\n<p>FS:[0] 寄存器在 3 环时指向 TEB, 进入 0 环后 FS:[0] 指向 KPCR。但系统中同时存在很多个线程，这就意味着 FS:[0] 在 3 环时指向的 TEB 要有多个 (每个线程一份)。</p>\n<p>但在实际的使用中我们发现，当我们在 3 环查看不同线程的 FS 寄存器时，FS 的段选择子都是相同的，那是如何实现通过一个 FS 寄存器指向多个 TEB 呢？</p>\n<p>我们还是分析 <code>SwapContext</code>  函数中查找与 FS 相关的代码：</p>\n<p><img data-src=\"image019.png\" alt=\"\" /></p>\n<p><strong>线程切换的时候每次都在 GDT 表中索引为 0x3B 的地址构建每个线程关于 TEB 的段描述符</strong></p>\n<p>附上段描述符的结构：</p>\n<p><img data-src=\"image020.png\" alt=\"\" /></p>\n<h2 id=\"线程切换与线程优先级\"><a class=\"anchor\" href=\"#线程切换与线程优先级\">#</a> 线程切换与线程优先级</h2>\n<p>在 <code>KiSwapThread</code>  与 <code>KiQuantumEnd</code>  函数中都是通过 <code>KiFindReadyThread</code>  来找下一个要切换的线程， <code>KiFindReadyThread</code>  是根据什么条件来选择下一个要执行的线程呢？</p>\n<h3 id=\"调度链表32个\"><a class=\"anchor\" href=\"#调度链表32个\">#</a> 调度链表（32 个）</h3>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kd&gt; dd KiDispatcherReadyListHead</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>8055bc20  8055bc20 8055bc20 8055bc28 8055bc28</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>8055bc30  8055bc30 8055bc30 8055bc38 8055bc38</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>8055bc40  8055bc40 8055bc40 8055bc48 8055bc48</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>8055bc50  8055bc50 8055bc50 8055bc58 8055bc58</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>8055bc60  8055bc60 8055bc60 8055bc68 8055bc68</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>8055bc70  8055bc70 8055bc70 8055bc78 8055bc78</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>8055bc80  8055bc80 8055bc80 8055bc88 8055bc88</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>8055bc90  8055bc90 8055bc90 8055bc98 8055bc98</pre></td></tr></table></figure><p><code>KiFindReadyThread</code>  查找方式：<br />\n按照优先级别进行查找：31..30..29..28.....</p>\n<p>也就是说，在<strong>本次查找</strong>中，如果级别 31 的链表里面有线程，那么就不会查找级别为 30 的链表！</p>\n<p>根据我学过的计算机操作系统的知识，由于调度算法，每次查找线程的时候，线程的优先级都会动态调整的。</p>\n<h3 id=\"如何高效查找\"><a class=\"anchor\" href=\"#如何高效查找\">#</a> 如何高效查找</h3>\n<p>调度链表有 32 个，每次都从头开始查找效率太低，所以 Windows 使用一个 DWORD 类型变量的变量来记录，利用其 32 个比特位的特性。<br />\n当向调度链表 (32 个) 中挂入或者摘除某个线程时，会判断当前级别的链表是否为空，为空将 DWORD 变量对应位置 0，否则置 1。</p>\n<p>如下图：</p>\n<p><img data-src=\"image021.png\" alt=\"\" /></p>\n<p>这个变量： <code>_kiReadySummary</code></p>\n<p>多 cpu 会随机寻找 <code>KiDispatcherReadyListHead</code>  指向的数组中的线程。线程可以绑定某个 cpu（使用 api： <code>setThreadAffinityMask</code> ）</p>\n<p>这里可以逆向分析一下 <code>KiFindReadyThread</code>  函数。详细见：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vb25ldHJhaW5lZS9wLzEyNzUyMTgzLmh0bWw=\">https://www.cnblogs.com/onetrainee/p/12752183.html</span></p>\n<h3 id=\"如果没有就绪线程怎么办\"><a class=\"anchor\" href=\"#如果没有就绪线程怎么办\">#</a> 如果没有就绪线程怎么办？</h3>\n<p>PrcbData：</p>\n<p>+0x004 CurrentThread    : Ptr32 _KTHREAD<br />\n+0x008 NextThread       : Ptr32 _KTHREAD<br />\n+0x00c IdleThread       : Ptr32 _KTHREAD</p>\n<p><img data-src=\"image022.png\" alt=\"\" /></p>\n<p>并且还修改了  <code>_KiIdleSummary</code>  这个变量。</p>\n<p>那我们如何找这个空闲线程的函数呢？</p>\n<p>用 Windbg 下断后，查看当前的  <code>KPRCB</code>  结构体，找到  <code>IdleThread</code>  线程的  <code>ETHREAD</code>  结构体。</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kd&gt; dt _KPRCB 0xFFDFF120</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>nt!_KPRCB</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   +0x000 MinorVersion     : 1</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   +0x002 MajorVersion     : 1</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   +0x004 CurrentThread    : 0x8055ce60 _KTHREAD</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   +0x008 NextThread       : (null) </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   +0x00c IdleThread       : 0x8055ce60 _KTHREAD</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   +0x010 Number           : 0 &#39;&#39;</pre></td></tr></table></figure><p>查看  <code>IdleThread</code>  线程的  <code>ETHREAD</code>  结构体。</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kd&gt; dt _ETHREAD 0x8055ce60 </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>nt!_ETHREAD</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   +0x000 Tcb              : _KTHREAD</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   +0x1c0 CreateTime       : _LARGE_INTEGER 0x0</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   +0x1c0 NestedFaultCount : 0y00</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   +0x1c0 ApcNeeded        : 0y0</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   +0x1c8 ExitTime         : _LARGE_INTEGER 0x0</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   +0x1c8 LpcReplyChain    : _LIST_ENTRY [ 0x0 - 0x0 ]</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   +0x1c8 KeyedWaitChain   : _LIST_ENTRY [ 0x0 - 0x0 ]</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   +0x1d0 ExitStatus       : 0n0</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   +0x1d0 OfsChain         : (null) </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   +0x1d4 PostBlockList    : _LIST_ENTRY [ 0x0 - 0x0 ]</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   +0x1dc TerminationPort  : (null) </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   +0x1dc ReaperLink       : (null) </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   +0x1dc KeyedWaitValue   : (null) </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   +0x1e0 ActiveTimerListLock : 0</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   +0x1e4 ActiveTimerListHead : _LIST_ENTRY [ 0x0 - 0x0 ]</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   +0x1ec Cid              : _CLIENT_ID</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   +0x1f4 LpcReplySemaphore : _KSEMAPHORE</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>   +0x1f4 KeyedWaitSemaphore : _KSEMAPHORE</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>   +0x208 LpcReplyMessage  : (null) </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>   +0x208 LpcWaitingOnPort : (null) </pre></td></tr><tr><td data-num=\"23\"></td><td><pre>   +0x20c ImpersonationInfo : (null) </pre></td></tr><tr><td data-num=\"24\"></td><td><pre>   +0x210 IrpList          : _LIST_ENTRY [ 0x0 - 0x0 ]</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>   +0x218 TopLevelIrp      : 0</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>   +0x21c DeviceToVerify   : (null) </pre></td></tr><tr><td data-num=\"27\"></td><td><pre>   +0x220 ThreadsProcess   : (null) </pre></td></tr><tr><td data-num=\"28\"></td><td><pre>   +0x224 StartAddress     : (null) </pre></td></tr><tr><td data-num=\"29\"></td><td><pre>   +0x228 Win32StartAddress : (null) </pre></td></tr><tr><td data-num=\"30\"></td><td><pre>   +0x228 LpcReceivedMessageId : 0</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>   +0x22c ThreadListEntry  : _LIST_ENTRY [ 0x0 - 0x0 ]</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>   +0x234 RundownProtect   : _EX_RUNDOWN_REF</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>   +0x238 ThreadLock       : _EX_PUSH_LOCK</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>   +0x23c LpcReplyMessageId : 0</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>   +0x240 ReadClusterSize  : 0</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>   +0x244 GrantedAccess    : 0x1f03ff</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>   +0x248 CrossThreadFlags : 0</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>   +0x248 Terminated       : 0y0</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>   +0x248 DeadThread       : 0y0</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>   +0x248 HideFromDebugger : 0y0</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>   +0x248 ActiveImpersonationInfo : 0y0</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>   +0x248 SystemThread     : 0y0</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>   +0x248 HardErrorsAreDisabled : 0y0</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>   +0x248 BreakOnTermination : 0y0</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>   +0x248 SkipCreationMsg  : 0y0</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>   +0x248 SkipTerminationMsg : 0y0</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>   +0x24c SameThreadPassiveFlags : 0</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>   +0x24c ActiveExWorker   : 0y0</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>   +0x24c ExWorkerCanWaitUser : 0y0</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>   +0x24c MemoryMaker      : 0y0</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>   +0x250 SameThreadApcFlags : 0</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>   +0x250 LpcReceivedMsgIdValid : 0y0</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>   +0x250 LpcExitThreadCalled : 0y0</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>   +0x250 AddressSpaceOwner : 0y0</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>   +0x254 ForwardClusterOnly : 0 &#39;&#39;</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>   +0x255 DisablePageFaultClustering : 0 &#39;&#39;</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>   +0x258 KernelStackReference : 0</pre></td></tr></table></figure><p>发现其  <code>+0x224 StartAddress     : (null)</code>  的值为空。找不到线程开始的地方。</p>\n<p>这里还是得逆向分析  <code>SwapContext</code>  函数：</p>\n<p>切换完 esp 后： <code>  mov     esp, [esi+_ETHREAD.Tcb.KernelStack] ; 将新线程的esp存到当前的esp寄存器中</code></p>\n<p>我们观察有几个出栈操作（pop、popf）</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>.text:0046ECCF                 pop     ecx</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>.text:0046ECD0                 mov     [ebx], ecx</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>.text:0046ECD2                 cmp     byte ptr [esi+49h], 0</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>.text:0046ECD6                 jnz     short loc_46ECDC</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>.text:0046ECD8                 popf</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>.text:0046ECD9                 xor     eax, eax</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>.text:0046ECDB                 retn</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>loc_46ECDC: </pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>.text:0046ECDC                 popf</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>.text:0046ECDD                 jnz     short loc_46ECE2</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>.text:0046ECDF                 mov     al, 1</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>.text:0046ECE1                 retn</pre></td></tr></table></figure><p><strong>发现总共执行了两次出栈操作</strong>，那我们直接去找 IdleThread 线程的 <code>_ETHREAD.Tcb.KernelStack</code>  的值</p>\n<p><code>[+0x028] KernelStack      : 0x8055244c [Type: void *]</code> <br />\n 在 windbg 中查看：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kd&gt; dd 0x8055244c </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>8055244c  00000000 ffdff980 80546e6c 00000000</pre></td></tr></table></figure><p>总共执行了两次出栈操作那么  <code>esp+8</code>  的位置就是  <code>retn</code>  返回  <code>eip</code>  要执行的地方。</p>\n<p>在本次实验中的值是  <code>80546e6c</code> ，在 windbg 中查看：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kd&gt; u 80546e6c </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>nt!KiIdleLoop+0x10:</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>80546e6c f390            pause</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>80546e6e fb              sti</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>80546e6f 90              nop</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>80546e70 90              nop</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>80546e71 fa              cli</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>80546e72 3b6d00          cmp     ebp,dword ptr [ebp]</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>80546e75 740d            je      nt!KiIdleLoop+0x28 (80546e84)</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>80546e77 b102            mov     cl,2</pre></td></tr></table></figure><p>发现执行的是  <code>KiIdleLoop+0x10</code>  的地方，所以  <code>KiIdleLoop</code>  就是我们要找的  <code>IdleThread</code>  线程的函数。</p>\n<p>可是这里我有个问题，执行了  <code>pop  ecx</code>  和  <code>popf</code>  ESP 的值不应该是加 6 吗？为什么去找 ESP 加 8 的位置呢？</p>\n<h1 id=\"总结-3\"><a class=\"anchor\" href=\"#总结-3\">#</a> 总结</h1>\n<ol>\n<li>SwapContext 有几个参数，分别是什么？</li>\n</ol>\n<p><img data-src=\"image023.png\" alt=\"\" /></p>\n<ol start=\"2\">\n<li>SwapContext 在哪里实现了线程切换</li>\n</ol>\n<p><img data-src=\"image024.png\" alt=\"\" /></p>\n<ol start=\"3\">\n<li>线程切换的时候，会切换 CR3 吗？切换 CR3 的条件是什么？</li>\n</ol>\n<p><img data-src=\"image025.png\" alt=\"\" /></p>\n<p>这里我们能够知道一个小知识：<strong>线程能读写地址，是由 0x44 位置的进程结构体的 CR3 决定的，并不是 0x220 的位置。</strong></p>\n<ol start=\"4\">\n<li>中断门提权时，CPU 会从 TSS 得到 ESP0 和 SS0，TSS 中存储的一定是当前线程的 ESP0 和 SS0 吗？如何做到的？</li>\n</ol>\n<p>上面已经详细解释了。<br />\n并没有存 SS0 的代码，因为所有线程的 SS0 的值是固定不变的，系统启动时已经填到 TSS 里，不需要在这里改了。</p>\n<p><img data-src=\"image026.png\" alt=\"\" /></p>\n<ol start=\"5\">\n<li>FS:[0] 在 3 环指向 TEB，但是线程有很多，FS:[0] 指向的是哪个线程的 TEB，如何做到的？</li>\n</ol>\n<p>上面已经详细解释了。<br />\n<strong>线程切换的时候每次都在 GDT 表中索引为 0x3B 的地址构建每个线程关于 TEB 的段描述符</strong></p>\n<p><img data-src=\"image019.png\" alt=\"\" /></p>\n<ol start=\"6\">\n<li>0 环的 ExceptionList 在哪里备份的？</li>\n</ol>\n<p><img data-src=\"image027.png\" alt=\"\" /></p>\n<ol start=\"7\">\n<li>IdleThread 是什么？什么时候执行？找到这个函数.</li>\n</ol>\n<p><img data-src=\"image022.png\" alt=\"\" /></p>\n<p>如何找到这个线程的函数上面也讲了。</p>\n<ol start=\"8\">\n<li>如何找到下一个就绪线程？</li>\n</ol>\n<p><code>KiFindReadyThread</code>  函数</p>\n<ol start=\"9\">\n<li>模拟线程切换与 Windows 线程切换有哪些区别？</li>\n</ol>\n<p>3 环与 0 环，真正的线程有两个栈，一个是 3 环的一个是 0 环的，模拟线程只有一个栈，还没用到异常链表、ss、TSS。</p>\n",
            "tags": [
                "Windows线程切换",
                "KiSwapContext",
                "SwapContext",
                "时钟中断",
                "时间片管理",
                "线程切换与TSS",
                "线程切换与FS",
                "线程切换与线程优先级"
            ]
        }
    ]
}