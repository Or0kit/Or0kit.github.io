{
    "version": "https://jsonfeed.org/version/1",
    "title": "Or0kit • All posts by \"keinitializeapc\" tag",
    "description": "临渊羡鱼，不如退而结网",
    "home_page_url": "https://Or0kit.github.io",
    "items": [
        {
            "id": "https://or0kit.github.io/Bin/Core/WindowsXp/Apc/APC%E6%9C%BA%E5%88%B6-03APC%E7%9A%84%E6%8C%82%E5%85%A5%E8%BF%87%E7%A8%8B/",
            "url": "https://or0kit.github.io/Bin/Core/WindowsXp/Apc/APC%E6%9C%BA%E5%88%B6-03APC%E7%9A%84%E6%8C%82%E5%85%A5%E8%BF%87%E7%A8%8B/",
            "title": "APC机制-03APC的挂入过程",
            "date_published": "2022-02-25T11:23:40.000Z",
            "content_html": "<h1 id=\"楔子\"><a class=\"anchor\" href=\"#楔子\">#</a> 楔子</h1>\n<p>无论是正常状态还是挂靠状态，都有两个 APC 队列，一个内核队列，一个用户队列。</p>\n<p>每当要挂入一个 APC 函数时，不管是内核 APC 还是用户 APC，内核都要准备一个  <code>KAPC</code>  的数据结构，并且将这个  <code>KAPC</code>  结构挂到相应的 APC 队列中。</p>\n<h1 id=\"kapc-结构\"><a class=\"anchor\" href=\"#kapc-结构\">#</a> KAPC 结构</h1>\n<pre><code>kd&gt; dt _KAPC\nnt!_KAPC\n   +0x000 Type\t\t        //类型  APC类型为0x12\n   +0x002 Size\t\t        //本结构体的大小  0x30\n   +0x004 Spare0    \t    //未使用                             \n   +0x008 Thread \t\t    //目标线程                                  \n   +0x00c ApcListEntry\t    //APC队列挂的位置\n   +0x014 KernelRoutine\t    //指向一个函数(释放APC)\n   +0x018 RundownRoutine    //略 \n   +0x01c NormalRoutine\t    //用户APC总入口  或者 真正的内核apc函数\n   +0x020 NormalContext\t    //内核APC：NULL  用户APC：真正的APC函数\n   +0x024 SystemArgument1   //APC函数的参数\t\n   +0x028 SystemArgument2   //APC函数的参数\n   +0x02c ApcStateIndex\t    //挂哪个队列，有四个值：0 1 2 3\n   +0x02d ApcMode\t        //内核APC 用户APC\n   +0x02e Inserted\t        //表示本apc是否已挂入队列 挂入前：0  挂入后  1\n</code></pre>\n<h1 id=\"apcstateindex\"><a class=\"anchor\" href=\"#apcstateindex\">#</a> ApcStateIndex</h1>\n<p>与 KTHREAD (+0x165) 的属性同名，但含义不一样：</p>\n<p>ApcStateIndex 有四个值：<br />\n0 原始环境 1 挂靠环境 2 当前环境 3 插入 APC 时的当前环境</p>\n<p>正常情况下：<br />\nApcStatePointer [0]  指向 ApcState<br />\nApcStatePointer [1]  指向 SavedApcState<br />\n 挂靠情况下：<br />\nApcStatePointer [0]  指向 SavedApcState<br />\nApcStatePointer [1]  指向 ApcState</p>\n<p>2 初始化的时候，当前线程的 ApcState，不管挂靠还是没挂靠，我只选当前的 APC 状态。 判断是否为  <code>2</code>  的状态可以在  <code>KeInitializeApc</code>  中观察到。</p>\n<p>3 插入的时候，当前线程的 ApcState，如果在初始化的时候还没有挂靠，在准备插入的时候线程挂靠了，如果值为 3 就会使 KAPC 中的 ApcStateIndex 与 KTHREAD 中的 ApcStateIndex 一样。 判断是否为 <code>3</code>  的状态可以在  <code>KiInsertQueueApc</code>  中观察到。</p>\n<h1 id=\"alertable属性说明是否运行被apc吵醒\"><a class=\"anchor\" href=\"#alertable属性说明是否运行被apc吵醒\">#</a> Alertable 属性说明 (是否运行被 APC 吵醒)</h1>\n<p>结合  <code>KiInsertQueueApc</code>  函数</p>\n<pre><code>kd&gt; dt _KTHREAD\nntdll!_KTHREAD\n   ...\n   +0x164 Alertable        : UChar\n   ...\n\nDWORD SleepEx(\n  DWORD dwMilliseconds, // time-out interval\n  BOOL bAlertable        \t// early completion option\n);\nDWORD WaitForSingleObjectEx(\n  HANDLE hHandle,        \t// handle to object\n  DWORD dwMilliseconds, // time-out interval\n  BOOL bAlertable        \t// alertable option\n);\n</code></pre>\n<p>总结:</p>\n<p>1、 <code>Alertable=0</code>  当前插入的 APC 函数未必有机会执行： <code>UserApcPending = 0</code></p>\n<p>2、 <code>Alertable=1  UserApcPending = 1</code>  将目标线程唤醒 (从等待链表中摘出来，并挂到调度链表)</p>\n<h1 id=\"挂入流程\"><a class=\"anchor\" href=\"#挂入流程\">#</a> 挂入流程</h1>\n<p>从 R3 到 R0 的调用流程</p>\n<p>用户层调用：QueueUserAPC (kernel32.dll) -&gt; NtQueueApcThread (ntkrnlpa.exe)  -&gt;  内核层调用 KeInitializeApc (分配空间 初始化 KAPC 结构体) -&gt; KeInsertQueueApc -&gt; KiInsertQueueApc (将 KAPC 插入指定 APC 队列)</p>\n<h2 id=\"各层函数分析\"><a class=\"anchor\" href=\"#各层函数分析\">#</a> 各层函数分析</h2>\n<p>分析一下各层的函数的都做了什么事情。</p>\n<h3 id=\"queueuserapckernel32dll\"><a class=\"anchor\" href=\"#queueuserapckernel32dll\">#</a> QueueUserAPC(kernel32.dll)</h3>\n<p>首先了解一下这个函数</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>WINBASEAPI</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>DWORD</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>WINAPI</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">QueueUserAPC</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    PAPCFUNC pfnAPC<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    HANDLE hThread<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    ULONG_PTR dwData</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">/*++</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>Routine Description:</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    这个函数用于将用户模式的 APC 队列到指定的线程。当指定的线程执行 alertable 等待时，APC 将被触发。</pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>Arguments:</pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    pfnAPC - 提供 APC 例程的地址，以便在 APC 触发时执行。</pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    hHandle - 为线程对象提供一个句柄。调用者必须具有对该线程的线程设置上下文访问权限。</pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    dwData - 提供一个 DWORD 传递给 APC</pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>Return Value:</pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    TRUE - The operations was successful</pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    FALSE - The operation failed. GetLastError () is not defined.</pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>--*/</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    NTSTATUS Status<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    PVOID Argument1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PVOID<span class=\"token punctuation\">)</span> pfnAPC<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    PVOID Argument2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PVOID<span class=\"token punctuation\">)</span> dwData<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    PVOID Argument3 <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    ACTIVATION_CONTEXT_BASIC_INFORMATION acbi <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    Status <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token function\">RtlQueryInformationActivationContext</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            RTL_QUERY_INFORMATION_ACTIVATION_CONTEXT_FLAG_USE_ACTIVE_ACTIVATION_CONTEXT<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            ActivationContextBasicInformation<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            <span class=\"token operator\">&amp;</span>acbi<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>acbi<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">NT_SUCCESS</span><span class=\"token punctuation\">(</span>Status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SXS: %s failing because RtlQueryInformationActivationContext() returned status %08lx\\n\"</span><span class=\"token punctuation\">,</span> __FUNCTION__<span class=\"token punctuation\">,</span> Status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token keyword\">return</span> FALSE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    Argument3 <span class=\"token operator\">=</span> acbi<span class=\"token punctuation\">.</span>ActivationContext<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>acbi<span class=\"token punctuation\">.</span>Flags <span class=\"token operator\">&amp;</span> ACTIVATION_CONTEXT_FLAG_NO_INHERIT<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token comment\">// We're not supposed to propogate the activation context; set it to a value to indicate such.</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        Argument3 <span class=\"token operator\">=</span> INVALID_ACTIVATION_CONTEXT<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    Status <span class=\"token operator\">=</span> <span class=\"token function\">NtQueueApcThread</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>                hThread<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>                <span class=\"token operator\">&amp;</span>BaseDispatchAPC<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>                Argument1<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>                Argument2<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>                Argument3</pre></td></tr><tr><td data-num=\"64\"></td><td><pre>                <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span><span class=\"token function\">NT_SUCCESS</span><span class=\"token punctuation\">(</span>Status<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>其中的  <code>RtlQueryInformationActivationContext</code>  函数也不知道有什么用，暂时不管，我们先分析主线，此函数又调用了  <code>NtQueueApcThread</code>  了</p>\n<h3 id=\"ntqueueapcthreadntkrnlpaexe\"><a class=\"anchor\" href=\"#ntqueueapcthreadntkrnlpaexe\">#</a> NtQueueApcThread(ntkrnlpa.exe)</h3>\n<p>在 Ntdll 中也有一个同名的函数，会通过快速调用，调用 ntkrnlpa 中的这个函数。这里就直接介绍这个函数了。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>NTSYSAPI</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>NTSTATUS</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>NTAPI</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">NtQueueApcThread</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    IN HANDLE ThreadHandle<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    IN PPS_APC_ROUTINE ApcRoutine<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    IN PVOID ApcArgument1<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    IN PVOID ApcArgument2<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    IN PVOID ApcArgument3</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">/*++</pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>Routine Description:</pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    This function is used to queue a user-mode APC to the specified thread. The APC</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    will fire when the specified thread does an alertable wait</pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>Arguments:</pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    ThreadHandle - Supplies a handle to a thread object.  The caller</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        must have THREAD_SET_CONTEXT access to the thread.</pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    ApcRoutine - Supplies the address of the APC routine to execute when the</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        APC fires.</pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    ApcArgument1 - Supplies the first PVOID passed to the APC</pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    ApcArgument2 - Supplies the second PVOID passed to the APC</pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    ApcArgument3 - Supplies the third PVOID passed to the APC</pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>Return Value:</pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    Returns an NT Status code indicating success or failure of the API</pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>--*/</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    PETHREAD Thread<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    NTSTATUS st<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    KPROCESSOR_MODE Mode<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    PKAPC Apc<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token function\">PAGED_CODE</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    Mode <span class=\"token operator\">=</span> <span class=\"token function\">KeGetPreviousMode</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    st <span class=\"token operator\">=</span> <span class=\"token function\">ObReferenceObjectByHandle</span> <span class=\"token punctuation\">(</span>ThreadHandle<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>                                    THREAD_SET_CONTEXT<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                                    PsThreadType<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>                                    Mode<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                                    <span class=\"token operator\">&amp;</span>Thread<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                                    <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">NT_SUCCESS</span> <span class=\"token punctuation\">(</span>st<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        st <span class=\"token operator\">=</span> STATUS_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">IS_SYSTEM_THREAD</span> <span class=\"token punctuation\">(</span>Thread<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>            st <span class=\"token operator\">=</span> STATUS_INVALID_HANDLE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>            Apc <span class=\"token operator\">=</span> <span class=\"token function\">ExAllocatePoolWithQuotaTag</span> <span class=\"token punctuation\">(</span>NonPagedPool <span class=\"token operator\">|</span> POOL_QUOTA_FAIL_INSTEAD_OF_RAISE<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>                                              <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>Apc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>                                              <span class=\"token string\">'pasP'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Apc <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>                st <span class=\"token operator\">=</span> STATUS_NO_MEMORY<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>                <span class=\"token function\">KeInitializeApc</span> <span class=\"token punctuation\">(</span>Apc<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>                                 <span class=\"token operator\">&amp;</span>Thread<span class=\"token operator\">-></span>Tcb<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>                                 OriginalApcEnvironment<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>                                 PspQueueApcSpecialApc<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>                                 <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>                                 <span class=\"token punctuation\">(</span>PKNORMAL_ROUTINE<span class=\"token punctuation\">)</span>ApcRoutine<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>                                 UserMode<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>                                 ApcArgument1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">KeInsertQueueApc</span> <span class=\"token punctuation\">(</span>Apc<span class=\"token punctuation\">,</span> ApcArgument2<span class=\"token punctuation\">,</span> ApcArgument3<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>                    <span class=\"token function\">ExFreePool</span> <span class=\"token punctuation\">(</span>Apc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>                    st <span class=\"token operator\">=</span> STATUS_UNSUCCESSFUL<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>        <span class=\"token function\">ObDereferenceObject</span> <span class=\"token punctuation\">(</span>Thread<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>    <span class=\"token keyword\">return</span> st<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>可以观察到，先申请了一块  <code>KAPC</code>  大小的内存，然后调用  <code>KeInitializeApc</code>  给 KAPC 初始化 ，初始化完成后，调用了  <code>KeInsertQueueApc</code>  插入了。</p>\n<p>注意这里有个细节：</p>\n<p><strong>验证了是否是系统进程，这是一个宏定义：  <code>#define IS_SYSTEM_THREAD(Thread)  (((Thread)-&gt;CrossThreadFlags&amp;PS_CROSS_THREAD_FLAGS_SYSTEM) != 0)</code>   利用这个特点，如果想要防止用户 APC 注入，可以更改线程标志。</strong></p>\n<h3 id=\"keinitializeapc初始化kapc结构体\"><a class=\"anchor\" href=\"#keinitializeapc初始化kapc结构体\">#</a> KeInitializeApc (初始化 KAPC 结构体)</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>VOID <span class=\"token function\">KeInitializeApc</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  IN PKAPC Apc<span class=\"token punctuation\">,</span><span class=\"token comment\">//KAPC 指针</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  IN PKTHREAD Thread<span class=\"token punctuation\">,</span><span class=\"token comment\">// 目标线程</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  IN KAPC_ENVIRONMENT TargetEnvironment<span class=\"token punctuation\">,</span><span class=\"token comment\">//0 1 2 3 四种状态</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  IN PKKERNEL_ROUTINE KernelRoutine<span class=\"token punctuation\">,</span><span class=\"token comment\">// 销毁 KAPC 的函数地址</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  IN PKRUNDOWN_ROUTINE RundownRoutine OPTIONAL<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  IN PKNORMAL_ROUTINE NormalRoutine<span class=\"token punctuation\">,</span><span class=\"token comment\">// 用户 APC 总入口或者内核 apc 函数</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  IN KPROCESSOR_MODE Mode<span class=\"token punctuation\">,</span><span class=\"token comment\">// 要插入用户 apc 队列还是内核 apc 队列</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  IN PVOID NormalContext<span class=\"token comment\">// 内核 APC：NULL  用户 APC：真正的 APC 函数</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">/*++</pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>Routine Description:</pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>这个函数初始化一个内核 APC 对象。 线程、内核例程和可选的常规例程、处理器模式和常规上下文参数都存储在 APC 对象中。 </pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>Arguments:</pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    Apc - 提供一个指向 APC 类型控制对象的指针。</pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    Thread - 提供一个指向线程类型的调度程序对象的指针。</pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    Environment - 有效值为：OriginalApcEnvironment、attacheapcenvironment、CurrentApcEnvironment 或 InsertApcEnvironment。枚举类型 0 1 2 3</pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    KernelRoutine - 提供一个指向在内核模式下 IRQL APC_LEVEL 执行的函数的指针。 </pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    RundownRoutine - 提供一个可选的函数指针，当线程终止时，如果 APC 在线程的 APC 队列中，这个函数将被调用。</pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    NormalRoutine - 提供一个指向函数的可选指针，该函数将在 IRQL 0 中以指定的处理器模式执行。 如果没有指定这个参数，则忽略 ProcessorMode 和 NormalContext 参数。</pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    ApcMode - 提供处理器模式，在这种模式下，NormalRoutine 参数指定的函数将被执行。  </pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    NormalContext - 提供指向任意数据结构的指针，该数据结构将被传递给 NormalRoutine 参数指定的函数。</pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>Return Value:</pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    None.</pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>--*/</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token function\">ASSERT</span><span class=\"token punctuation\">(</span>Environment <span class=\"token operator\">&lt;=</span> InsertApcEnvironment<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token comment\">// Initialize standard control object header.</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    Apc<span class=\"token operator\">-></span>Type <span class=\"token operator\">=</span> ApcObject<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    Apc<span class=\"token operator\">-></span>Size <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>KAPC<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token comment\">/* </pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    初始化 APC 环境、线程地址、内核例程地址、运行例程地址、普通例程地址、处理器模式和正常上下文参数。</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    如果正常的例程地址为 NULL，则处理器模式默认为 KernelMode，而 APC 是一个特殊的 APC。</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    否则，将从参数列表中提取处理器模式。</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    */</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Environment <span class=\"token operator\">==</span> CurrentApcEnvironment<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        Apc<span class=\"token operator\">-></span>ApcStateIndex <span class=\"token operator\">=</span> Thread<span class=\"token operator\">-></span>ApcStateIndex<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        <span class=\"token function\">ASSERT</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>Environment <span class=\"token operator\">&lt;=</span> Thread<span class=\"token operator\">-></span>ApcStateIndex<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>Environment <span class=\"token operator\">==</span> InsertApcEnvironment<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        Apc<span class=\"token operator\">-></span>ApcStateIndex <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>CCHAR<span class=\"token punctuation\">)</span>Environment<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    Apc<span class=\"token operator\">-></span>Thread <span class=\"token operator\">=</span> Thread<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    Apc<span class=\"token operator\">-></span>KernelRoutine <span class=\"token operator\">=</span> KernelRoutine<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>    Apc<span class=\"token operator\">-></span>RundownRoutine <span class=\"token operator\">=</span> RundownRoutine<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    Apc<span class=\"token operator\">-></span>NormalRoutine <span class=\"token operator\">=</span> NormalRoutine<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">ARGUMENT_PRESENT</span><span class=\"token punctuation\">(</span>NormalRoutine<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>        Apc<span class=\"token operator\">-></span>ApcMode <span class=\"token operator\">=</span> ApcMode<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>        Apc<span class=\"token operator\">-></span>NormalContext <span class=\"token operator\">=</span> NormalContext<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>        Apc<span class=\"token operator\">-></span>ApcMode <span class=\"token operator\">=</span> KernelMode<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>        Apc<span class=\"token operator\">-></span>NormalContext <span class=\"token operator\">=</span> NIL<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>    Apc<span class=\"token operator\">-></span>Inserted <span class=\"token operator\">=</span> FALSE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"keinsertqueueapc\"><a class=\"anchor\" href=\"#keinsertqueueapc\">#</a> KeInsertQueueApc</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>BOOLEAN</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">KeInsertQueueApc</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    IN PRKAPC Apc<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    IN PVOID SystemArgument1<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    IN PVOID SystemArgument2<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    IN KPRIORITY Increment</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">/*++</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>Routine Description:</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  这个函数将一个 APC 对象插入到 APC 队列中，该队列由 APC 对象的线程和处理器模式字段指定。</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  如果 APC 对象已经在 APC 队列中或 APC 队列被禁用，则不执行任何操作。 </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  否则，APC 对象被插入到指定的队列中，并做出适当的调度决策。  </pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>Arguments:</pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    Apc - 提供一个指向 APC 类型控制对象的指针。  </pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    SystemArgument1, SystemArgument2 - 提供一组包含执行程序提供的非类型化数据的两个参数。  </pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    Increment - 提供优先级增量，如果排队的 APC 导致一个线程等待满足。  </pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>Return Value:</pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    如果 APC 对象已经在 APC 队列中，或者禁用 APC 队列，则返回 false 值。否则，将返回一个 TRUE 的值。</pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>--*/</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    BOOLEAN Inserted<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    KLOCK_QUEUE_HANDLE LockHandle<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    KIRQL OldIrql<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    PRKTHREAD Thread<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token function\">ASSERT_APC</span><span class=\"token punctuation\">(</span>Apc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token function\">ASSERT</span><span class=\"token punctuation\">(</span><span class=\"token function\">KeGetCurrentIrql</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> DISPATCH_LEVEL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token comment\">// 将 IROL 提升到 SYNCH_LEVEL _ level，获取线程 APC 队列锁，并锁定调度程序数据库。</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    Thread <span class=\"token operator\">=</span> Apc<span class=\"token operator\">-></span>Thread<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token function\">KeAcquireInStackQueuedSpinLockRaiseToSynch</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>Thread<span class=\"token operator\">-></span>ApcQueueLock<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>LockHandle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token function\">KiLockDispatcherDatabaseAtSynchLevel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token comment\">// 如果 Apc 队列被禁用，则将 inserted 设置为 FALSE。否则，将系统参数值保存在 APC 对象中，并尝试对 APC 进行排队。</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Thread<span class=\"token operator\">-></span>ApcQueueable <span class=\"token operator\">==</span> FALSE<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        Inserted <span class=\"token operator\">=</span> FALSE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        Apc<span class=\"token operator\">-></span>SystemArgument1 <span class=\"token operator\">=</span> SystemArgument1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        Apc<span class=\"token operator\">-></span>SystemArgument2 <span class=\"token operator\">=</span> SystemArgument2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        Inserted <span class=\"token operator\">=</span> <span class=\"token function\">KiInsertQueueApc</span><span class=\"token punctuation\">(</span>Apc<span class=\"token punctuation\">,</span> Increment<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token comment\">// 从同步级别解锁调度程序数据库，将线程 APC 队列锁和较低的 IRQL 解锁到其先前的值，并返回是否插入了 APC。</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token function\">KiUnlockDispatcherDatabaseFromSynchLevel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token function\">KeReleaseInStackQueuedSpinLock</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>LockHandle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token keyword\">return</span> Inserted<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>此函数又调用  <code>KiInsertQueueApc</code>  函数</p>\n<h3 id=\"kiinsertqueueapc\"><a class=\"anchor\" href=\"#kiinsertqueueapc\">#</a> KiInsertQueueApc</h3>\n<p>KiInsertQueueApc 说明：</p>\n<ol>\n<li>\n<p>根据 KAPC 结构中的 ApcStateIndex 找到对应的 APC 队列</p>\n</li>\n<li>\n<p>再根据 KAPC 结构中的 ApcMode 确定是用户队列还是内核队列</p>\n</li>\n<li>\n<p>将 KAPC 挂到对应的队列中 (挂到 KAPC 的 ApcListEntry 处)</p>\n</li>\n<li>\n<p>再根据 KAPC 结构中的 Inserted 置 1，标识当前的 KAPC 为已插入状态</p>\n</li>\n<li>\n<p>修改 KAPC_STATE 结构中的 KernelApcPending/UserApcPending</p>\n</li>\n</ol>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>BOOLEAN</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>FASTCALL</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">KiInsertQueueApc</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    IN PKAPC Apc<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    IN KPRIORITY Increment</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">/*++</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>Routine Description:</pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    此函数将 APC 对象插入到线程的 APC 队列中。</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    线程对象的地址、APC 队列和 APC 的类型都是从 APC 对象派生出来的。</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    如果 APC 对象已经在 APC 队列中，则不执行操作并返回函数值 False。</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    如果将 APC 插入到指定的 APC 队列中，则将其插入状态设置为 true，并返回函数值 true。</pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    N.B. 在调用此例程时，必须保持线程 APC 队列锁和调度程序数据库锁定。</pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>Arguments:</pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    Apc - Supplies a pointer to a control object of type APC.</pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    Increment - Supplies the priority increment that is to be applied if</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        queuing the APC causes a thread wait to be satisfied.</pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>Return Value:</pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    If the APC object is already in an APC queue, then a value of FALSE is</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    returned. Else a value of TRUE is returned.</pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>--*/</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    KPROCESSOR_MODE ApcMode<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    PKAPC ApcEntry<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    PKAPC_STATE ApcState<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    BOOLEAN Inserted<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    PLIST_ENTRY ListEntry<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    PKTHREAD Thread<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token comment\">// 如果 APC 对象已经在 APC 队列中，则将插入设置为 FALSE。</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token comment\">// 否则将 APC 对象插入到适当的队列中，将 APC 插入状态设置为 TRUE，检查 APC 是否应该立即交付，并将插入状态设置为 TRUE。 </span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token comment\">// For multiprocessor performance, the following code utilizes the fact</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token comment\">// that kernel APC disable count is incremented before checking whether</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token comment\">// the kernel APC queue is nonempty.</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token comment\">// See KeLeaveCriticalRegion().</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    Thread <span class=\"token operator\">=</span> Apc<span class=\"token operator\">-></span>Thread<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Apc<span class=\"token operator\">-></span>Inserted<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        Inserted <span class=\"token operator\">=</span> FALSE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Apc<span class=\"token operator\">-></span>ApcStateIndex <span class=\"token operator\">==</span> InsertApcEnvironment<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>            Apc<span class=\"token operator\">-></span>ApcStateIndex <span class=\"token operator\">=</span> Thread<span class=\"token operator\">-></span>ApcStateIndex<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        ApcState <span class=\"token operator\">=</span> Thread<span class=\"token operator\">-></span>ApcStatePointer<span class=\"token punctuation\">[</span>Apc<span class=\"token operator\">-></span>ApcStateIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token comment\">// 如果 NormalRoutine 值为 NULL，【则在处理器模式选择的所有其他特殊 APC 项之后插入 APC】。  </span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        <span class=\"token comment\">// 否则，将 APC 对象插入处理器模式选择的 APC 队列的尾部，除非 APC 模式是用户模式，</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token comment\">// 特殊的 APC 例程的地址是退出线程，在这种情况下，将 APC 插入到列表的前面，并设置用户 APC 挂起。  </span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre></pre></td></tr><tr><td data-num=\"67\"></td><td><pre></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        ApcMode <span class=\"token operator\">=</span> Apc<span class=\"token operator\">-></span>ApcMode<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Apc<span class=\"token operator\">-></span>NormalRoutine <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ApcMode <span class=\"token operator\">!=</span> KernelMode<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>Apc<span class=\"token operator\">-></span>KernelRoutine <span class=\"token operator\">==</span> PsExitSpecialApc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>                Thread<span class=\"token operator\">-></span>ApcState<span class=\"token punctuation\">.</span>UserApcPending <span class=\"token operator\">=</span> TRUE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>                <span class=\"token function\">InsertHeadList</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>ApcState<span class=\"token operator\">-></span>ApcListHead<span class=\"token punctuation\">[</span>ApcMode<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>                               <span class=\"token operator\">&amp;</span>Apc<span class=\"token operator\">-></span>ApcListEntry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>                <span class=\"token comment\">// 内核模式</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>                <span class=\"token function\">InsertTailList</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>ApcState<span class=\"token operator\">-></span>ApcListHead<span class=\"token punctuation\">[</span>ApcMode<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>                               <span class=\"token operator\">&amp;</span>Apc<span class=\"token operator\">-></span>ApcListEntry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>            ListEntry <span class=\"token operator\">=</span> ApcState<span class=\"token operator\">-></span>ApcListHead<span class=\"token punctuation\">[</span>ApcMode<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>Blink<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>ListEntry <span class=\"token operator\">!=</span> <span class=\"token operator\">&amp;</span>ApcState<span class=\"token operator\">-></span>ApcListHead<span class=\"token punctuation\">[</span>ApcMode<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>                ApcEntry <span class=\"token operator\">=</span> <span class=\"token function\">CONTAINING_RECORD</span><span class=\"token punctuation\">(</span>ListEntry<span class=\"token punctuation\">,</span> KAPC<span class=\"token punctuation\">,</span> ApcListEntry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ApcEntry<span class=\"token operator\">-></span>NormalRoutine <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>                ListEntry <span class=\"token operator\">=</span> ListEntry<span class=\"token operator\">-></span>Blink<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>            <span class=\"token function\">InsertHeadList</span><span class=\"token punctuation\">(</span>ListEntry<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>Apc<span class=\"token operator\">-></span>ApcListEntry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>        Apc<span class=\"token operator\">-></span>Inserted <span class=\"token operator\">=</span> TRUE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>        <span class=\"token comment\">// 如果 APC 对象的 APC 索引与线程的 APC 索引相匹配，那么检查 APC 是否应该中断线程执行，或者让线程进入等待状态。</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Apc<span class=\"token operator\">-></span>ApcStateIndex <span class=\"token operator\">==</span> Thread<span class=\"token operator\">-></span>ApcStateIndex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>            <span class=\"token comment\">// 如果 APC 的处理器模式是内核模式，那么检查 APC 是否应该中断线程或使线程脱离等待状态。 </span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>            <span class=\"token comment\">// 否则检查 APC 是否应该对线程进行排序，使其脱离可提醒的等待状态。  </span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ApcMode <span class=\"token operator\">==</span> KernelMode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>                Thread<span class=\"token operator\">-></span>ApcState<span class=\"token punctuation\">.</span>KernelApcPending <span class=\"token operator\">=</span> TRUE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Thread<span class=\"token operator\">-></span>State <span class=\"token operator\">==</span> Running<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>                    <span class=\"token comment\">// 这个函数会获取  APC_LEVEL 等级的 IRQL</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>                    <span class=\"token function\">KiRequestApcInterrupt</span><span class=\"token punctuation\">(</span>Thread<span class=\"token operator\">-></span>NextProcessor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>Thread<span class=\"token operator\">-></span>State <span class=\"token operator\">==</span> Waiting<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>                          <span class=\"token punctuation\">(</span>Thread<span class=\"token operator\">-></span>WaitIrql <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>                          <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>Apc<span class=\"token operator\">-></span>NormalRoutine <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>                          <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>Thread<span class=\"token operator\">-></span>KernelApcDisable <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>                          <span class=\"token punctuation\">(</span>Thread<span class=\"token operator\">-></span>ApcState<span class=\"token punctuation\">.</span>KernelApcInProgress <span class=\"token operator\">==</span> FALSE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>                    <span class=\"token comment\">// 唤醒线程 使其从等待队列中移除</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>                    <span class=\"token function\">KiUnwaitThread</span><span class=\"token punctuation\">(</span>Thread<span class=\"token punctuation\">,</span> STATUS_KERNEL_APC<span class=\"token punctuation\">,</span> Increment<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>            <span class=\"token comment\">// 如果不是内核模式那么</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>Thread<span class=\"token operator\">-></span>State <span class=\"token operator\">==</span> Waiting<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>                      <span class=\"token punctuation\">(</span>Thread<span class=\"token operator\">-></span>WaitMode <span class=\"token operator\">==</span> UserMode<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>                      <span class=\"token punctuation\">(</span>Thread<span class=\"token operator\">-></span>Alertable <span class=\"token operator\">||</span> Thread<span class=\"token operator\">-></span>ApcState<span class=\"token punctuation\">.</span>UserApcPending<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>                Thread<span class=\"token operator\">-></span>ApcState<span class=\"token punctuation\">.</span>UserApcPending <span class=\"token operator\">=</span> TRUE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>                <span class=\"token function\">KiUnwaitThread</span><span class=\"token punctuation\">(</span>Thread<span class=\"token punctuation\">,</span> STATUS_USER_APC<span class=\"token punctuation\">,</span> Increment<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>        Inserted <span class=\"token operator\">=</span> TRUE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>    <span class=\"token comment\">// 返回 APC 对象是否插入到 APC 队列中。</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>    <span class=\"token keyword\">return</span> Inserted<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"作业\"><a class=\"anchor\" href=\"#作业\">#</a> 作业</h1>\n<ol>\n<li>\n<p>创建一个进程，使用 Sleep () 函数让其处于等待状态，然后向其 APC 队列插入 APC, 观蔡是否执行。</p>\n</li>\n<li>\n<p>如何让上题中的 APC 函数执行？</p>\n</li>\n</ol>\n<p>代码：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">_WIN32_WINNT</span> <span class=\"token expression\"><span class=\"token number\">0x0400</span></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;windows.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>DWORD WINAPI <span class=\"token function\">ThreadProc</span><span class=\"token punctuation\">(</span>LPVOID pM<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token comment\">//SleepEx(3000,TRUE);</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">10000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ThreadProc执行了 %d\\n\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token function\">SleepEx</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">,</span> TRUE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> k <span class=\"token operator\">&lt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> k<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ThreadProc执行了-%d\\n\"</span><span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">void</span> WINAPI <span class=\"token function\">ApcProc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> para<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ApcProc执行了-------!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">void</span> WINAPI <span class=\"token function\">ApcProc2</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> para<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ApcProc2执行了-------!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\tDWORD dwRet<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\tHANDLE handle <span class=\"token operator\">=</span> <span class=\"token function\">CreateThread</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> ThreadProc<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token comment\">// 注入 APC </span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\tdwRet <span class=\"token operator\">=</span> <span class=\"token function\">QueueUserAPC</span><span class=\"token punctuation\">(</span>ApcProc<span class=\"token punctuation\">,</span> handle<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dwRet<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Apc1插入成功！\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\tdwRet <span class=\"token operator\">=</span> <span class=\"token function\">QueueUserAPC</span><span class=\"token punctuation\">(</span>ApcProc2<span class=\"token punctuation\">,</span> handle<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dwRet<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Apc2插入成功！\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t<span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>当 APC 被唤醒的时候两个 APC 一起执行了。</p>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<p>设置为可被唤醒状态时</p>\n<p><img data-src=\"image002.png\" alt=\"\" /></p>\n",
            "tags": [
                "KAPC",
                "QueueUserAPC",
                "NtQueueApcThread",
                "KeInitializeApc",
                "KeInsertQueueApc",
                "KiInsertQueueApc"
            ]
        }
    ]
}