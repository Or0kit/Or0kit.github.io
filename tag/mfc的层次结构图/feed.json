{
    "version": "https://jsonfeed.org/version/1",
    "title": "Or0kit • All posts by \"mfc的层次结构图\" tag",
    "description": "临渊羡鱼，不如退而结网",
    "home_page_url": "https://Or0kit.github.io",
    "items": [
        {
            "id": "https://or0kit.github.io/Programming/MFC/MFC%E5%85%AD%E5%A4%A7%E6%A0%B8%E5%BF%83%E6%9C%BA%E5%88%B6-01MFC%E5%88%9D%E5%A7%8B%E5%8C%96%E8%BF%87%E7%A8%8B/",
            "url": "https://or0kit.github.io/Programming/MFC/MFC%E5%85%AD%E5%A4%A7%E6%A0%B8%E5%BF%83%E6%9C%BA%E5%88%B6-01MFC%E5%88%9D%E5%A7%8B%E5%8C%96%E8%BF%87%E7%A8%8B/",
            "title": "MFC六大核心机制-01MFC初始化过程",
            "date_published": "2022-04-05T11:17:06.000Z",
            "content_html": "<h1 id=\"楔子\"><a class=\"anchor\" href=\"#楔子\">#</a> 楔子</h1>\n<p>MFC 共有六大核心机制分别是：</p>\n<ul>\n<li>MFC 程序的初始化过程</li>\n<li>RTTI（Runtime Type Information） 运行时类型信息</li>\n<li>Dynamic Creation 动态创建</li>\n<li>Persistence 永久保存</li>\n<li>Message Mapping 消息映射</li>\n<li>Message Routing 消息循环</li>\n</ul>\n<p>这次学习的 MFC 教程应该是以《深入浅出 MFC》这本书讲解的。</p>\n<h1 id=\"mfc的本质\"><a class=\"anchor\" href=\"#mfc的本质\">#</a> MFC 的本质</h1>\n<p>因为没有系统的学习 MFC，现在写代码出错了都不知道怎么调试。所以准备学一下 MFC 的本质。知其然知其所以然！</p>\n<p>MFC (Microsoft Foundation Classes) 是由微软提供的放置 WINAPI 的面向对象的包装的 C++ 类库。<br />\nMFC6.0 中大约封装了 200 个类，分别封装了 WINAPI 和 WINSDK 中的结构和过程。<br />\n另外 MFC 还提供了一个应用程序框架。例如程序向导和类向导自动生成的代码，这样大大减少了程序员的工作量，提高了开发效率。</p>\n<p><strong>MFC 的本质就是 win32 的封装。</strong></p>\n<h1 id=\"第一个mfc程序\"><a class=\"anchor\" href=\"#第一个mfc程序\">#</a> 第一个 MFC 程序</h1>\n<p>由于根据项目引导生成的代码繁杂冗余，所以我们可以自己来手写 MFC 来创建 Windows 窗口程序，这样就可以避免一些不必要的代码。</p>\n<p>本节需要掌握的知识点：<br />\nA: CWinApp 可以覆盖的虚函数 InitInstance<br />\nB: CWinApp 成员变量 m_pMainWnd<br />\nC: CFramWnd 的成员函数 create 以及参数</p>\n<p>需要简单了解的内容</p>\n<p>A: 通过 MSDN 去查看 MFC 的层次结构图<br />\n B: 对 CWinApp 有个初步的认识<br />\n C: 对 CFramWnd 有个初步认识</p>\n<h2 id=\"mfc的层次结构图\"><a class=\"anchor\" href=\"#mfc的层次结构图\">#</a> MFC 的层次结构图</h2>\n<p>在 MSDN Library 中搜索 hierarchy chart 即可获得 MFC 的层次结构图：</p>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<p>本章我们只需要了解 CWinApp、CFramWnd。</p>\n<h2 id=\"cwinapp类\"><a class=\"anchor\" href=\"#cwinapp类\">#</a> CWinApp 类</h2>\n<p>CWinApp 类是派生 Windows 应用程序对象的基类。应用程序对象提供了用于初始化应用程序 (及其每个实例) 和运行应用程序的成员函数。</p>\n<p>每个使用 MFC 的应用程序只能包含一个派生自 CWinApp 的对象。这个对象是在其他 c++ 全局对象被构造时被构造的，并且在 Windows 调用 WinMain 函数时已经可用，这个函数是由 MFC 库提供的。在全局级别声明你的派生 CWinApp 对象。</p>\n<p>当您从 CWinApp 派生应用程序类时，覆盖  <code>InitInstance</code>  成员函数以创建应用程序的主窗口对象。<br />\n他还有一个成员变量  <code>m_pMainWnd</code>  用来记录创建的主窗口对象。</p>\n<p>除了 CWinApp 成员函数之外， Microsoft 基础类库还提供了以下全局函数来访问  <code>CWinApp</code>  对象和其他全局信息：</p>\n<p><code>AfxGetApp</code>  获取一个指向  <code>CWinApp</code>  对象的指针。<br />\n <code>AfxGetInstanceHandle</code>  获取当前应用程序实例的句柄。<br />\n <code>AfxGetResourceHandle</code>  获取应用程序资源的句柄。<br />\n <code>AfxGetAppName</code>  获取指向包含应用程序名称的字符串的指针。或者，，如果您有一个指向 CWinApp 对象的指针，请使用  <code>m_pszExeName</code>  获取应用程序的名称。</p>\n<p><img data-src=\"image002.png\" alt=\"\" /></p>\n<p>CWinApp 类代表一个程序本身。</p>\n<h2 id=\"cframewnd类\"><a class=\"anchor\" href=\"#cframewnd类\">#</a> CFrameWnd 类</h2>\n<p>CFrameWnd 类提供了 Windows 单文档界面（SDI）重叠或弹出框架窗口的功能，以及用于管理窗口的成员。</p>\n<p>要为应用程序创建有用的框架窗口，请从 CFrameWnd 派生类。向派生类添加成员变量以存储特定于您的应用程序的数据。在派生类中实现消息处理程序成员函数和消息映射，以指定在将消息定向到窗口时会发生什么。</p>\n<p>有三种方法来构造框架窗口：</p>\n<p>1. 使用 Create 直接构造它 （本节需要掌握的内容）<br />\n2. 使用 LoadFrame 直接构造它（后续会学）<br />\n3. 使用文档模板间接构建它 （后续会学）</p>\n<p>注：我们可以认为 CFrameWnd 类取代了窗口过程函数。</p>\n<p>Create 成员函数<br />\n CFrameWnd :: Create 成员函数语法格式如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>BOOL <span class=\"token function\">Create</span><span class=\"token punctuation\">(</span>LPCTSTR lpszClassName<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 如果类名为 NULL，则以 MFC 内建的窗口类产生一个标准的外框窗口</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>           LPCTSTR lpszWindowName<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>           DWORD dwStyle <span class=\"token operator\">=</span> WS_OVERLAPPEDWINDOW<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>           <span class=\"token keyword\">const</span> RECT<span class=\"token operator\">&amp;</span> rect <span class=\"token operator\">=</span> rectDefault<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>           CWnd<span class=\"token operator\">*</span> pParentWnd <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span>        <span class=\"token comment\">// != NULL for popups</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>           LPCTSTR lpszMenuName <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>          DWORD dwExStyle <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>         CCreateContext<span class=\"token operator\">*</span> pContext <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 返回值：非零表示初始化成功，否则为 0</span></pre></td></tr></table></figure><p>通过两个步骤构造一个 CFrameWnd 对象：</p>\n<p>首先调用构造函数，它构造 CFrameWnd 类的对象，然后调用 Create 成员方法，创建 Windows 框架窗口并将其附加到 CFrameWnd 类的对象；</p>\n<p>创建初始化窗口的类名和窗口名称，并注册其样式，父级和关联菜单的默认值。</p>\n<h2 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h2>\n<ol>\n<li>基于 MFC 的窗口程序必须也只能有一个由从 CWinApp 派生的对象。</li>\n<li>我们必须覆盖 CWinApp 的虚函数 InitInstance 在里面创建窗口，并把窗口对象保存在它的成员变量  <code>m_pMainWnd</code>  。</li>\n<li>创建窗口是通过派生  <code>CFrameWnd</code>  对象，在它的构造函数里面调用成员函数 <code>create</code> 。</li>\n</ol>\n<p>手动编写 MFC 程序的几个注意事项（这是 VC6）：</p>\n<ol>\n<li>使用 Win32 Application 去创建项目</li>\n<li>项目需要包含 MFC 运行库，VC6 设置：Project → Setting → General → Use MFC In Static Library</li>\n<li>使用头文件 afxwin.h</li>\n</ol>\n<h2 id=\"手动创建一个mfc程序\"><a class=\"anchor\" href=\"#手动创建一个mfc程序\">#</a> 手动创建一个 MFC 程序</h2>\n<p>这里我用的编译器是 VS2019，步骤如下：<br />\n创建一个  <code>Windows桌面项目</code>  选择  <code>桌面应用程序</code>  ：</p>\n<p><img data-src=\"image005.png\" alt=\"\" /></p>\n<p>使用 MFC 静态库：</p>\n<p><img data-src=\"image003.png\" alt=\"\" /></p>\n<p>接下来添加代码：</p>\n<p>Hello.h</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\">once</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">WIN32_LEAN_AND_MEAN</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;afxwin.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">CMyApp</span><span class=\"token operator\">:</span><span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">CWinApp</span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">virtual</span> BOOL <span class=\"token function\">InitInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">CMainWindow</span> <span class=\"token operator\">:</span><span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">CFrameWnd</span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token function\">CMainWindow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>Hello.cpp</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"Hello.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>CMyApp theApp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>BOOL <span class=\"token class-name\">CMyApp</span><span class=\"token operator\">::</span><span class=\"token function\">InitInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tm_pMainWnd <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> CMainWindow<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tm_pMainWnd<span class=\"token operator\">-></span><span class=\"token function\">ShowWindow</span><span class=\"token punctuation\">(</span>m_nCmdShow<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tm_pMainWnd<span class=\"token operator\">-></span><span class=\"token function\">UpdateWindow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">return</span> TRUE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token class-name\">CMainWindow</span><span class=\"token operator\">::</span><span class=\"token function\">CMainWindow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token function\">Create</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t<span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t<span class=\"token function\">TEXT</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\tWS_OVERLAPPED <span class=\"token operator\">|</span> WS_CAPTION <span class=\"token operator\">|</span> WS_SYSMENU <span class=\"token operator\">|</span> WS_THICKFRAME <span class=\"token operator\">|</span> WS_MAXIMIZEBOX <span class=\"token operator\">|</span> WS_VSCROLL<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t<span class=\"token comment\">// 左上角，既起始位置是（400,300），右下角（800,700）</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t<span class=\"token comment\">// 700 -300 是高度  800-400 是宽度</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t<span class=\"token function\">CRect</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token punctuation\">,</span> <span class=\"token number\">800</span><span class=\"token punctuation\">,</span> <span class=\"token number\">700</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>运行结果：</p>\n<p><img data-src=\"image004.png\" alt=\"\" /></p>\n<p>为什么代码里没有 WinMain？MFC 没有 WinMain 函数吗？其实 MFC 是在内部接管了 WinMain，我们可以认为 CWinApp 就是 WinMain，只不过我们没法很直观的看见 WinMain 函数。</p>\n<h1 id=\"mfc的初始化过程1\"><a class=\"anchor\" href=\"#mfc的初始化过程1\">#</a> MFC 的初始化过程 1</h1>\n<p>上面我们手动创建了一个 MFC 程序，但并没有 WinMain 函数，整个程序唯一的语句也就是  <code>CMyApp theApp;</code>  这是具有全局有效性、用来实例对象化的语句。这是  <code>CWinApp</code>  的派生类的全局对象，那么到底是什么启动的程序的运行？应用程序对象又是在什么时候其作用的呢？其实回答这些问题的最好方法就是取看一下 MFC 的主框架源码，但暂时我们还不能这么去做，因为主框架的源码太过于庞大。<br />\n这节我们把我的重点突出来。</p>\n<h2 id=\"通过代码来模拟mfc的初始化过程\"><a class=\"anchor\" href=\"#通过代码来模拟mfc的初始化过程\">#</a> 通过代码来模拟 MFC 的初始化过程</h2>\n<ol>\n<li>本节必须掌握的知识点</li>\n</ol>\n<ul>\n<li>\n<p>为什么要声明全局的应用程序对象 (CWinApp)</p>\n</li>\n<li>\n<p>学会使用类视图快速添加类</p>\n</li>\n</ul>\n<ol start=\"2\">\n<li>需要简单了解的内容</li>\n</ol>\n<ul>\n<li>\n<p>CWinApp 的层次结构</p>\n</li>\n<li>\n<p>CFramWnd 的层次结构</p>\n</li>\n</ul>\n<h2 id=\"代码模拟\"><a class=\"anchor\" href=\"#代码模拟\">#</a> 代码模拟</h2>\n<p>用代码模拟 MFC 的初始化过程，我们基于上一章中手动编写的 MFC 代码来模拟。</p>\n<p>我们继承两个类 CWinApp、CFrameWnd，这两个类的层次结构如下：</p>\n<p><img data-src=\"image006.png\" alt=\"\" /></p>\n<p>所以在这里我们需要重写 CObject、CCmdTarget、CWinThread、CWnd、CWinApp、CFrameWnd 这几个类...</p>\n<p>仅仅是模拟代码，不用写实际功能，写上构造、析构函数即可。</p>\n<p>这里要记住：<strong>全局变量和全局对象总是在任何其他代码前执行</strong></p>\n<p>结果：</p>\n<p><img data-src=\"image007.png\" alt=\"\" /></p>\n<h1 id=\"mfc初始化过程2\"><a class=\"anchor\" href=\"#mfc初始化过程2\">#</a> MFC 初始化过程 2</h1>\n<p>继续进行 MFC 初始化模拟。</p>\n<p>在上一节中我们知道了一个全局对象或一个全局变量的实现是早于 WinMain 的，所以我们构造了 CWinApp 对象，先调用它的构造函数然后才进入 WinMain，这样做的好处是什么呢？我们要在 WinMain 执行之前要做的事情都可以这样处理。</p>\n<p>注意： WinMian 在 MFC 中并不是封装在类中，因为它是由系统调用的。</p>\n<h2 id=\"mfc是如何使用应用程序对象\"><a class=\"anchor\" href=\"#mfc是如何使用应用程序对象\">#</a> MFC 是如何使用应用程序对象</h2>\n<p>需要简单了解的内容</p>\n<p>CWinApp 类的二个可以覆盖的虚函数</p>\n<p><code>virtual BOOL InitInstance();</code></p>\n<p><code>virtual int Run();</code></p>\n<h2 id=\"代码模拟-2\"><a class=\"anchor\" href=\"#代码模拟-2\">#</a> 代码模拟</h2>\n<p>在上一章的模拟代码中我们相比于使用 MFC，还少了很多东西，比如  <code>InitInstance</code>  、  <code>m_pMainWnd</code>  等等。</p>\n<p>在上一章节中我们是将  <code>InitInstance</code>  这个虚函数删除的，在本章中我们可以基于上一章节的代码重新定义一下该虚函数，在原 MFC 中（这里我们是模拟）这个虚函数在三个类中都存在：</p>\n<p><img data-src=\"image008.png\" alt=\"\" /></p>\n<p>我们已经了解层次结构所以直接在最高一层去定义，也就是  <code>CWinThread</code>  这个类中去定义即可  <code>virtual bool InitInstance() = 0;</code>  为了省事可以定义为纯虚函数。<br />\n <code>m_pMainWnd</code>  同样在  <code>CWinThread</code>  类中，我们也模拟着在我们的代码中定义一下： <code>CWnd* m_pMainWnd;</code>  这里注意包含头文件。</p>\n<p>接下来在要做的事情和用 MFC 写的一样，在我们的  <code>InitInstance</code>  函数中：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token class-name\">CMyApp</span><span class=\"token operator\">::</span><span class=\"token function\">InitInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"CMyApp::InitInstance 函数\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tm_pMainWnd <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> CFrameWnd<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>继续执行一下代码：</p>\n<p><img data-src=\"image009.png\" alt=\"\" /></p>\n<p>我们发现并没有调用我们的  <code>InitInstance</code>  函数，由此可以推断出，  <code>InitInstance</code>  函数是在 WinMain 中调用的，我们添加代码 <code>theApp.InitInstance();</code></p>\n<p><img data-src=\"image010.png\" alt=\"\" /></p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>CObject 构造函数</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>CCmdTarget 构造函数</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>CWinThread 构造函数</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>CWinApp 构造函数</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>CMyApp 构造函数</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>WinMiam 函数</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>CMyApp::InitInstance 函数</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>CObject 构造函数</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>CCmdTarget 构造函数</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>CWnd 构造函数</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>CFrameWnd 构造函数</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>CMainWindow 构造函数</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>Create 函数</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>CMyApp 析构函数</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>CWinApp 析构函数</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>CWinThread 析构函数</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>CCmdTarget 析构函数</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>CObject 析构函数</pre></td></tr></table></figure><p>以上就是简化版的 MFC 执行流程。</p>\n<p>但我们这里还有一个问题就是，我们在模拟 WinMain 函数中是直接用 <strong>应用程序对象</strong> 去调用的 <code>InitInstance</code> ，但在实际中，WinMain 并不是我们写的，它是如何调用 <code>InitInstance</code>  的呢？</p>\n<p>在前面 <code>CWinApp</code>  类的介绍中，我们有一个全局函数  <code>AfxGetApp</code>  获取一个指向  <code>CWinApp</code>  对象的指针。那么我们也可以简单的模拟一下：</p>\n<p>在 CMyApp 类中：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">CMyApp</span> <span class=\"token operator\">:</span><span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">CWinApp</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tCMyApp<span class=\"token operator\">*</span> m_pCurrentApp<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 当前应用程序的指针</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token function\">CMyApp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token operator\">~</span><span class=\"token function\">CMyApp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">bool</span> <span class=\"token function\">InitInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>在其构造函数中：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">CMyApp</span><span class=\"token operator\">::</span><span class=\"token function\">CMyApp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"CMyApp 构造函数\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tm_pCurrentApp <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在主程序中定义：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">\"CMyApp.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>CMyApp theApp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>CMyApp<span class=\"token operator\">*</span> <span class=\"token function\">AfxGetApp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">return</span> theApp<span class=\"token punctuation\">.</span>m_pCurrentApp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">int</span>  <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"WinMiam 函数\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token comment\">//theApp.InitInstance();</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tCMyApp<span class=\"token operator\">*</span> pApp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\tpApp <span class=\"token operator\">=</span> <span class=\"token function\">AfxGetApp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tpApp<span class=\"token operator\">-></span><span class=\"token function\">InitInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"image011.png\" alt=\"\" /></p>\n<p>这样差不多既是 MFC 的执行流程了，主要是了解一个大概，后面看 MFC 的源码就清晰多了。</p>\n<h1 id=\"reference\"><a class=\"anchor\" href=\"#reference\">#</a> Reference</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vbGl1ZmVpMTk4My9wLzcxMzEwMDIuaHRtbA==\">https://www.cnblogs.com/liufei1983/p/7131002.html</span><br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naDBzdC5jbi9CaW5hcnktTGVhcm5pbmcvTUZDLmh0bWw=\">https://gh0st.cn/Binary-Learning/MFC.html</span><br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20venBjaGNiZC9wLzEyMjY2MDczLmh0bWw=\">https://www.cnblogs.com/zpchcbd/p/12266073.html</span></p>\n",
            "tags": [
                "MFC的本质",
                "MFC的层次结构图",
                "手动创建一个MFC程序",
                "MFC的初始化过程"
            ]
        }
    ]
}