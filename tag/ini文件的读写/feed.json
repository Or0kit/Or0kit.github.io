{
    "version": "https://jsonfeed.org/version/1",
    "title": "Or0kit • All posts by \"ini文件的读写\" tag",
    "description": "临渊羡鱼，不如退而结网",
    "home_page_url": "https://Or0kit.github.io",
    "items": [
        {
            "id": "https://or0kit.github.io/Programming/MFC/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%86%99%E8%BF%9C%E6%8E%A7-02%E5%8A%A0%E5%85%A5Socket%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93%E7%9A%84%E5%86%85%E6%A0%B8/",
            "url": "https://or0kit.github.io/Programming/MFC/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%86%99%E8%BF%9C%E6%8E%A7-02%E5%8A%A0%E5%85%A5Socket%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93%E7%9A%84%E5%86%85%E6%A0%B8/",
            "title": "从零开始写远控-02加入Socket数据传输的内核",
            "date_published": "2022-10-03T12:41:32.000Z",
            "content_html": "<h1 id=\"正文\"><a class=\"anchor\" href=\"#正文\">#</a> 正文</h1>\n<p>已经编写好基本的界面了，接下来分析 gh0st 的数据传输架构，这是一个远控的核心，其他功能都可以根据这个核心去拓展。</p>\n<h2 id=\"分析gh0st主控端socket内核\"><a class=\"anchor\" href=\"#分析gh0st主控端socket内核\">#</a> 分析 gh0st 主控端 socket 内核</h2>\n<p>简略分析 socket 的内核。</p>\n<p>视频中老狼是从重启功能开始切入分析的。</p>\n<p>开始从 ReBoot 函数开始看起：</p>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<p>当触发重启消息事件时，就会调用  <code>SendSelectCommand</code>  处理函数（很多都是调用这个函数，相当于一个消息处理的入口）。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">CGh0stView</span><span class=\"token operator\">::</span><span class=\"token function\">SendSelectCommand</span><span class=\"token punctuation\">(</span>PBYTE pData<span class=\"token punctuation\">,</span> UINT nSize<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token comment\">// TODO: Add your command handler code here</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tPOSITION pos <span class=\"token operator\">=</span> m_pListCtrl<span class=\"token operator\">-></span><span class=\"token function\">GetFirstSelectedItemPosition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//iterator for the CListCtrl</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">)</span> <span class=\"token comment\">//so long as we have a valid POSITION, we keep iterating</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token keyword\">int</span>\tnItem <span class=\"token operator\">=</span> m_pListCtrl<span class=\"token operator\">-></span><span class=\"token function\">GetNextSelectedItem</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\tClientContext<span class=\"token operator\">*</span> pContext <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>ClientContext<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>m_pListCtrl<span class=\"token operator\">-></span><span class=\"token function\">GetItemData</span><span class=\"token punctuation\">(</span>nItem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token comment\">// 发送获得驱动器列表数据包</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\tm_iocpServer<span class=\"token operator\">-></span><span class=\"token function\">Send</span><span class=\"token punctuation\">(</span>pContext<span class=\"token punctuation\">,</span> pData<span class=\"token punctuation\">,</span> nSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t<span class=\"token comment\">//Save the pointer to the new item in our CList</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span> <span class=\"token comment\">//EO while(pos) -- at this point we have deleted the moving items and stored them in memoryt\t</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>解释上面的代码：获取选中了多少行，然后遍历每一行，获取每一行的  <code>ClientContext</code>  类对象，然后调用  <code>m_iocpServer</code>  的  <code>Send</code>  函数发送数据。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">ClientContext</span>          <span class=\"token comment\">// 简单分析 ClientContext 结构体然后回到  SendSelectCommand</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    SOCKET\t\t\t\tm_Socket<span class=\"token punctuation\">;</span>              <span class=\"token comment\">// 套接字</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token comment\">// Store buffers</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tCBuffer\t\t\t\tm_WriteBuffer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tCBuffer\t\t\t\tm_CompressionBuffer<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 接收到的压缩的数据</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tCBuffer\t\t\t\tm_DeCompressionBuffer<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 解压后的数据</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tCBuffer\t\t\t\tm_ResendWriteBuffer<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 上次发送的数据包，接收失败时重发时用</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">int</span>\t\t\t\t\tm_Dialog<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 放对话框列表用，第一个 int 是类型，第二个是 CDialog 的地址</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">int</span>\t\t\t\t\tm_nTransferProgress<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token comment\">// Input Elements for Winsock</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\tWSABUF\t\t\t\tm_wsaInBuffer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tBYTE\t\t\t\tm_byInBuffer<span class=\"token punctuation\">[</span><span class=\"token number\">8192</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token comment\">// Output elements for Winsock</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tWSABUF\t\t\t\tm_wsaOutBuffer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\tHANDLE\t\t\t\tm_hWriteComplete<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token comment\">// Message counts... purely for example purposes</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\tLONG\t\t\t\tm_nMsgIn<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\tLONG\t\t\t\tm_nMsgOut<span class=\"token punctuation\">;</span>\t</pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\tBOOL\t\t\t\tm_bIsMainSocket<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 是不是主 socket</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\tClientContext<span class=\"token operator\">*</span>\t\tm_pWriteContext<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\tClientContext<span class=\"token operator\">*</span>\t\tm_pReadContext<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>接着按 F12 查看  <code>m_iocpServer</code>  声明。</p>\n<p>发现是  <code>CIOCPServer</code>  类型的指针变量：  <code>CIOCPServer* m_iocpServer</code></p>\n<h3 id=\"ciocpserver-类-send函数分析\"><a class=\"anchor\" href=\"#ciocpserver-类-send函数分析\">#</a> CIOCPServer 类 Send 函数分析</h3>\n<p>简单的了解一下流程。</p>\n<p>查看其  <code>Send</code>  函数：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">CIOCPServer</span><span class=\"token operator\">::</span><span class=\"token function\">Send</span><span class=\"token punctuation\">(</span>ClientContext<span class=\"token operator\">*</span> pContext<span class=\"token punctuation\">,</span> LPBYTE lpData<span class=\"token punctuation\">,</span> UINT nSize<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pContext <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">try</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nSize <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t\t<span class=\"token comment\">// Compress data</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span>\tdestLen <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span>nSize <span class=\"token operator\">*</span> <span class=\"token number\">1.001</span>  <span class=\"token operator\">+</span> <span class=\"token number\">12</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// 计算压缩后数据的大小</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t\tLPBYTE\t\t\tpDest <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> BYTE<span class=\"token punctuation\">[</span>destLen<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>                 <span class=\"token comment\">// 分配压缩数据的空间</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t\t<span class=\"token keyword\">int</span>\tnRet <span class=\"token operator\">=</span> <span class=\"token function\">compress</span><span class=\"token punctuation\">(</span>pDest<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>destLen<span class=\"token punctuation\">,</span> lpData<span class=\"token punctuation\">,</span> nSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// 压缩数据</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t\t</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nRet <span class=\"token operator\">!=</span> Z_OK<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">delete</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> pDest<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t\t<span class=\"token comment\">//////////////////////////////////////////////////////////////////////////</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t\tLONG nBufLen <span class=\"token operator\">=</span> destLen <span class=\"token operator\">+</span> HDR_SIZE<span class=\"token punctuation\">;</span>      <span class=\"token comment\">// 数据中加入数据头标识大小    </span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t\t<span class=\"token comment\">// 5 bytes packet flag</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t\tpContext<span class=\"token operator\">-></span>m_WriteBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">Write</span><span class=\"token punctuation\">(</span>m_bPacketFlag<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>m_bPacketFlag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 写入数据头</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t\t<span class=\"token comment\">// 4 byte header [Size of Entire Packet]</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t\tpContext<span class=\"token operator\">-></span>m_WriteBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">Write</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>PBYTE<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>nBufLen<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>nBufLen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 写入当前数据总大小  </span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t\t<span class=\"token comment\">// 4 byte header [Size of UnCompress Entire Packet]</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t\tpContext<span class=\"token operator\">-></span>m_WriteBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">Write</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>PBYTE<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>nSize<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>nSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>          <span class=\"token comment\">// 写入压缩前的数据大小</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t\t<span class=\"token comment\">// Write Data</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t\tpContext<span class=\"token operator\">-></span>m_WriteBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">Write</span><span class=\"token punctuation\">(</span>pDest<span class=\"token punctuation\">,</span> destLen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                        <span class=\"token comment\">// 写入数据</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t\t<span class=\"token keyword\">delete</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> pDest<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t\t</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\t\t<span class=\"token comment\">// 发送完后，再备份数据，因为有可能是 m_ResendWriteBuffer 本身在发送，所以不直接写入</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\t\tLPBYTE lpResendWriteBuffer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> BYTE<span class=\"token punctuation\">[</span>nSize<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\t\t<span class=\"token function\">CopyMemory</span><span class=\"token punctuation\">(</span>lpResendWriteBuffer<span class=\"token punctuation\">,</span> lpData<span class=\"token punctuation\">,</span> nSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\t\tpContext<span class=\"token operator\">-></span>m_ResendWriteBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">ClearBuffer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\t\tpContext<span class=\"token operator\">-></span>m_ResendWriteBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">Write</span><span class=\"token punctuation\">(</span>lpResendWriteBuffer<span class=\"token punctuation\">,</span> nSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 备份发送的数据</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\t\t<span class=\"token keyword\">delete</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> lpResendWriteBuffer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\t<span class=\"token keyword\">else</span> <span class=\"token comment\">// 要求重发</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\t\tpContext<span class=\"token operator\">-></span>m_WriteBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">Write</span><span class=\"token punctuation\">(</span>m_bPacketFlag<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>m_bPacketFlag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\t\tpContext<span class=\"token operator\">-></span>m_ResendWriteBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">ClearBuffer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\t\tpContext<span class=\"token operator\">-></span>m_ResendWriteBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">Write</span><span class=\"token punctuation\">(</span>m_bPacketFlag<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>m_bPacketFlag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 备份发送的数据\t</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t\t<span class=\"token comment\">// Wait for Data Ready signal to become available</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t\t<span class=\"token function\">WaitForSingleObject</span><span class=\"token punctuation\">(</span>pContext<span class=\"token operator\">-></span>m_hWriteComplete<span class=\"token punctuation\">,</span> INFINITE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t\t<span class=\"token comment\">// Prepare Packet</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t <span class=\"token comment\">//\tpContext->m_wsaOutBuffer.buf = (CHAR*) new BYTE[nSize];</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t <span class=\"token comment\">//\tpContext->m_wsaOutBuffer.len = pContext->m_WriteBuffer.GetBufferLen();</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre> \t\tOVERLAPPEDPLUS <span class=\"token operator\">*</span> pOverlap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">OVERLAPPEDPLUS</span><span class=\"token punctuation\">(</span>IOWrite<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 创建一个对列</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre> \t\t<span class=\"token function\">PostQueuedCompletionStatus</span><span class=\"token punctuation\">(</span>m_hCompletionPort<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span> pContext<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>pOverlap<span class=\"token operator\">-></span>m_ol<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 发送这个队列的消息  搜索 IOWrite</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t\tpContext<span class=\"token operator\">-></span>m_nMsgOut<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>发送数据前先把要发送的数据压缩了一下，然后加入数据头，数据头为：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 这里是数据发送的标记  服务端同客户端字符必须一致</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>BYTE bPacketFlag<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'G'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'h'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'s'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'t'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>m_bPacketFlag<span class=\"token punctuation\">,</span> bPacketFlag<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>bPacketFlag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>然后就创建了一个叫  <code>IOWrite</code>  的队列，搜索一下，发现这个  <code>IO_MESSAGE_HANDLER(IOWrite, OnClientWriting)</code>   转到  <code>OnClientWriting</code> <br />\n 函数查看：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token class-name\">CIOCPServer</span><span class=\"token operator\">::</span><span class=\"token function\">OnClientWriting</span><span class=\"token punctuation\">(</span>ClientContext<span class=\"token operator\">*</span> pContext<span class=\"token punctuation\">,</span> DWORD dwIoSize<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">try</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token comment\">//////////////////////////////////////////////////////////////////////////</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t<span class=\"token keyword\">static</span> DWORD nLastTick <span class=\"token operator\">=</span> <span class=\"token function\">GetTickCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token keyword\">static</span> DWORD nBytes <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\tnBytes <span class=\"token operator\">+=</span> dwIoSize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">GetTickCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> nLastTick <span class=\"token operator\">>=</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t\tnLastTick <span class=\"token operator\">=</span> <span class=\"token function\">GetTickCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t\t<span class=\"token function\">InterlockedExchange</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>LPLONG<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span>m_nSendKbps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> nBytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t\tnBytes <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t<span class=\"token comment\">//////////////////////////////////////////////////////////////////////////</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\tULONG ulFlags <span class=\"token operator\">=</span> MSG_PARTIAL<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t<span class=\"token comment\">// Finished writing - tidy up</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\tpContext<span class=\"token operator\">-></span>m_WriteBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">Delete</span><span class=\"token punctuation\">(</span>dwIoSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pContext<span class=\"token operator\">-></span>m_WriteBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">GetBufferLen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t\tpContext<span class=\"token operator\">-></span>m_WriteBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">ClearBuffer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t\t<span class=\"token comment\">// Write complete</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t\t<span class=\"token function\">SetEvent</span><span class=\"token punctuation\">(</span>pContext<span class=\"token operator\">-></span>m_hWriteComplete<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\">// issue new read after this one</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t\tOVERLAPPEDPLUS <span class=\"token operator\">*</span> pOverlap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">OVERLAPPEDPLUS</span><span class=\"token punctuation\">(</span>IOWrite<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\t\t<span class=\"token function\">m_pNotifyProc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>LPVOID<span class=\"token punctuation\">)</span> m_pFrame<span class=\"token punctuation\">,</span> pContext<span class=\"token punctuation\">,</span> NC_TRANSMIT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// 调用一下回调函数</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\t\tpContext<span class=\"token operator\">-></span>m_wsaOutBuffer<span class=\"token punctuation\">.</span>buf <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> pContext<span class=\"token operator\">-></span>m_WriteBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">GetBuffer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\t\tpContext<span class=\"token operator\">-></span>m_wsaOutBuffer<span class=\"token punctuation\">.</span>len <span class=\"token operator\">=</span> pContext<span class=\"token operator\">-></span>m_WriteBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">GetBufferLen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>             <span class=\"token comment\">// 最终调用 WSASend 将数据发送出去</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\t\t<span class=\"token keyword\">int</span> nRetVal <span class=\"token operator\">=</span> <span class=\"token function\">WSASend</span><span class=\"token punctuation\">(</span>pContext<span class=\"token operator\">-></span>m_Socket<span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\t\t\t\t\t\t<span class=\"token operator\">&amp;</span>pContext<span class=\"token operator\">-></span>m_wsaOutBuffer<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\t\t\t\t\t\t<span class=\"token number\">1</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\t\t\t\t\t\t<span class=\"token operator\">&amp;</span>pContext<span class=\"token operator\">-></span>m_wsaOutBuffer<span class=\"token punctuation\">.</span>len<span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\t\t\t\t\t\tulFlags<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\t\t\t\t\t\t<span class=\"token operator\">&amp;</span>pOverlap<span class=\"token operator\">-></span>m_ol<span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t\t\t\t\t\t\t<span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>      <span class=\"token comment\">// 判断是否成功。如果失败就执行 if 中的代码</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> nRetVal <span class=\"token operator\">==</span> SOCKET_ERROR <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">WSAGetLastError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> WSA_IO_PENDING <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t\t\t\t<span class=\"token function\">RemoveStaleClient</span><span class=\"token punctuation\">(</span> pContext<span class=\"token punctuation\">,</span> FALSE <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t<span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\">// issue new read after this one</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>发现其调用了回调函数，查看了一下，什么也没做，直接 break 返回了。<br />\n最后就调用了  <code>WSASend</code>  把数据发了出去。</p>\n<h3 id=\"ciocpserver-类的-onclientreading-函数分析\"><a class=\"anchor\" href=\"#ciocpserver-类的-onclientreading-函数分析\">#</a> CIOCPServer 类的 OnClientReading 函数分析</h3>\n<p>上面的  <code>OnClientWriting</code>  是向被控端发送数据时调用。</p>\n<p>接下来分析  <code>OnClientReading</code>  了解当主控端收到消息时如何处理。</p>\n<p>可以在 CIOCPServer 中看到 IO 操作的映射函数  <code>IO_MESSAGE_HANDLER(IORead, OnClientReading)</code>  当有消息发来的时候就调用了  <code>OnClientReading</code>  。</p>\n<p>还是简单的了解一下流程</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token class-name\">CIOCPServer</span><span class=\"token operator\">::</span><span class=\"token function\">OnClientReading</span><span class=\"token punctuation\">(</span>ClientContext<span class=\"token operator\">*</span> pContext<span class=\"token punctuation\">,</span> DWORD dwIoSize<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tCLock <span class=\"token function\">cs</span><span class=\"token punctuation\">(</span>CIOCPServer<span class=\"token operator\">::</span>m_cs<span class=\"token punctuation\">,</span> <span class=\"token string\">\"OnClientReading\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">try</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t<span class=\"token comment\">//////////////////////////////////////////////////////////////////////////</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token keyword\">static</span> DWORD nLastTick <span class=\"token operator\">=</span> <span class=\"token function\">GetTickCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token keyword\">static</span> DWORD nBytes <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\tnBytes <span class=\"token operator\">+=</span> dwIoSize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">GetTickCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> nLastTick <span class=\"token operator\">>=</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t\tnLastTick <span class=\"token operator\">=</span> <span class=\"token function\">GetTickCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t\t<span class=\"token function\">InterlockedExchange</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>LPLONG<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span>m_nRecvKbps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> nBytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t\tnBytes <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t<span class=\"token comment\">//////////////////////////////////////////////////////////////////////////</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dwIoSize <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t\t<span class=\"token function\">RemoveStaleClient</span><span class=\"token punctuation\">(</span>pContext<span class=\"token punctuation\">,</span> FALSE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token comment\">// 如果出现错误要求重发数据</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dwIoSize <span class=\"token operator\">==</span> FLAG_SIZE <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">memcmp</span><span class=\"token punctuation\">(</span>pContext<span class=\"token operator\">-></span>m_byInBuffer<span class=\"token punctuation\">,</span> m_bPacketFlag<span class=\"token punctuation\">,</span> FLAG_SIZE<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t\t<span class=\"token comment\">// 重新发送</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t\t<span class=\"token function\">Send</span><span class=\"token punctuation\">(</span>pContext<span class=\"token punctuation\">,</span> pContext<span class=\"token operator\">-></span>m_ResendWriteBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">GetBuffer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> pContext<span class=\"token operator\">-></span>m_ResendWriteBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">GetBufferLen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t\t<span class=\"token comment\">// 必须再投递一个接收请求</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t\t<span class=\"token function\">PostRecv</span><span class=\"token punctuation\">(</span>pContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\t<span class=\"token comment\">// 将接收到的数据写入</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\t<span class=\"token comment\">// Add the message to out message</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\t<span class=\"token comment\">// Dont forget there could be a partial, 1, 1 or more + partial mesages</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\tpContext<span class=\"token operator\">-></span>m_CompressionBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">Write</span><span class=\"token punctuation\">(</span>pContext<span class=\"token operator\">-></span>m_byInBuffer<span class=\"token punctuation\">,</span>dwIoSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\t<span class=\"token comment\">// 调用回调函数 传递\tNC_RECEIVE  跟进回调函数查看  </span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\t<span class=\"token function\">m_pNotifyProc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>LPVOID<span class=\"token punctuation\">)</span> m_pFrame<span class=\"token punctuation\">,</span> pContext<span class=\"token punctuation\">,</span> NC_RECEIVE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>         <span class=\"token comment\">// 如果接收的数据 大于标识头大小</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\t<span class=\"token comment\">// Check real Data</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>pContext<span class=\"token operator\">-></span>m_CompressionBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">GetBufferLen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> HDR_SIZE<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t\t\tBYTE bPacketFlag<span class=\"token punctuation\">[</span>FLAG_SIZE<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t\t\t<span class=\"token function\">CopyMemory</span><span class=\"token punctuation\">(</span>bPacketFlag<span class=\"token punctuation\">,</span> pContext<span class=\"token operator\">-></span>m_CompressionBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">GetBuffer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>bPacketFlag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            <span class=\"token comment\">// 这里对比 是否是同一个标识头 就是上一节给大家将的 我们再去看看 此类的构造函数</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">memcmp</span><span class=\"token punctuation\">(</span>m_bPacketFlag<span class=\"token punctuation\">,</span> bPacketFlag<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>m_bPacketFlag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">throw</span> <span class=\"token string\">\"bad buffer\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>            </pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t\t\t<span class=\"token comment\">// 得到数据大小  到 Send 函数看一下 就明白了  搜索  Send</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t\t\t<span class=\"token keyword\">int</span> nSize <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>    </pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t\t\t<span class=\"token function\">CopyMemory</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>nSize<span class=\"token punctuation\">,</span> pContext<span class=\"token operator\">-></span>m_CompressionBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">GetBuffer</span><span class=\"token punctuation\">(</span>FLAG_SIZE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t\t\t</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t\t\t<span class=\"token comment\">// Update Process Variable</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t\t\tpContext<span class=\"token operator\">-></span>m_nTransferProgress <span class=\"token operator\">=</span> pContext<span class=\"token operator\">-></span>m_CompressionBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">GetBufferLen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">100</span> <span class=\"token operator\">/</span> nSize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>            <span class=\"token comment\">// 如果数据大小真确</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nSize <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>pContext<span class=\"token operator\">-></span>m_CompressionBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">GetBufferLen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> nSize<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">int</span> nUnCompressLength <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t\t\t\t<span class=\"token comment\">// Read off header</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t\t\t\t</pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t\t\t\t<span class=\"token comment\">// 读取数据</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t\t\t\tpContext<span class=\"token operator\">-></span>m_CompressionBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">Read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>PBYTE<span class=\"token punctuation\">)</span> bPacketFlag<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>bPacketFlag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>\t\t\t\tpContext<span class=\"token operator\">-></span>m_CompressionBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">Read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>PBYTE<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>nSize<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\t\t\t\tpContext<span class=\"token operator\">-></span>m_CompressionBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">Read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>PBYTE<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>nUnCompressLength<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\t\t\t\t</pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\t\t\t\t<span class=\"token comment\">////////////////////////////////////////////////////////</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\t\t\t\t<span class=\"token comment\">////////////////////////////////////////////////////////</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>\t\t\t\t<span class=\"token comment\">// SO you would process your data here</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>\t\t\t\t<span class=\"token comment\">// </span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\t\t\t\t<span class=\"token comment\">// I'm just going to post message so we can see the data</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">int</span>\tnCompressLength <span class=\"token operator\">=</span> nSize <span class=\"token operator\">-</span> HDR_SIZE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>\t\t\t\tPBYTE pData <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> BYTE<span class=\"token punctuation\">[</span>nCompressLength<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// 重新计算数据的压缩前大小</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>\t\t\t\tPBYTE pDeCompressionData <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> BYTE<span class=\"token punctuation\">[</span>nUnCompressLength<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>\t\t\t\t</pre></td></tr><tr><td data-num=\"80\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pData <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span> <span class=\"token operator\">||</span> pDeCompressionData <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>\t\t\t\t\t<span class=\"token keyword\">throw</span> <span class=\"token string\">\"bad Allocate\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>\t\t\t\tpContext<span class=\"token operator\">-></span>m_CompressionBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">Read</span><span class=\"token punctuation\">(</span>pData<span class=\"token punctuation\">,</span> nCompressLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>\t\t\t\t<span class=\"token comment\">//////////////////////////////////////////////////////////////////////////</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>\t\t\t\t<span class=\"token comment\">// 解压缩数据 ，此处也就是这个完成端口传输的 精妙所在，用解压是否成功判断 数据包是否完整接收</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span>\tdestLen <span class=\"token operator\">=</span> nUnCompressLength<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">int</span>\tnRet <span class=\"token operator\">=</span> <span class=\"token function\">uncompress</span><span class=\"token punctuation\">(</span>pDeCompressionData<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>destLen<span class=\"token punctuation\">,</span> pData<span class=\"token punctuation\">,</span> nCompressLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>\t\t\t\t<span class=\"token comment\">//////////////////////////////////////////////////////////////////////////</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nRet <span class=\"token operator\">==</span> Z_OK<span class=\"token punctuation\">)</span>   <span class=\"token comment\">// 如果完整接收</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>\t\t\t\t\t<span class=\"token comment\">// 写入数据</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>\t\t\t\t\tpContext<span class=\"token operator\">-></span>m_DeCompressionBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">ClearBuffer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>\t\t\t\t\tpContext<span class=\"token operator\">-></span>m_DeCompressionBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">Write</span><span class=\"token punctuation\">(</span>pDeCompressionData<span class=\"token punctuation\">,</span> destLen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>\t\t\t\t\t <span class=\"token comment\">// 调用回调函数传递  NC_RECEIVE_COMPLETE  到回调函数看一下 </span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>\t\t\t\t\t<span class=\"token function\">m_pNotifyProc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>LPVOID<span class=\"token punctuation\">)</span> m_pFrame<span class=\"token punctuation\">,</span> pContext<span class=\"token punctuation\">,</span> NC_RECEIVE_COMPLETE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   </pre></td></tr><tr><td data-num=\"97\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>\t\t\t\t\t<span class=\"token keyword\">throw</span> <span class=\"token string\">\"bad buffer\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">delete</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> pData<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">delete</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> pDeCompressionData<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>\t\t\t\tpContext<span class=\"token operator\">-></span>m_nMsgIn<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>\t\t\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>\t\t<span class=\"token comment\">// Post to WSARecv Next</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>\t\t<span class=\"token function\">PostRecv</span><span class=\"token punctuation\">(</span>pContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>\t\tpContext<span class=\"token operator\">-></span>m_CompressionBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">ClearBuffer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>\t\t<span class=\"token comment\">// 要求重发，就发送 0, 内核自动添加数包标志</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>\t\t<span class=\"token function\">Send</span><span class=\"token punctuation\">(</span>pContext<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>\t\t<span class=\"token function\">PostRecv</span><span class=\"token punctuation\">(</span>pContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "数据传输",
                "ini文件的读写"
            ]
        }
    ]
}