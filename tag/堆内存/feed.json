{
    "version": "https://jsonfeed.org/version/1",
    "title": "Or0kit • All posts by \"堆内存\" tag",
    "description": "临渊羡鱼，不如退而结网",
    "home_page_url": "https://Or0kit.github.io",
    "items": [
        {
            "id": "https://or0kit.github.io/Bin/Core/WindowsXp/MemoryManagement/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86-02Private%20Memory/",
            "url": "https://or0kit.github.io/Bin/Core/WindowsXp/MemoryManagement/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86-02Private%20Memory/",
            "title": "内存管理-02Private Memory",
            "date_published": "2022-04-15T07:16:55.000Z",
            "content_html": "<h1 id=\"申请内存的两种方式\"><a class=\"anchor\" href=\"#申请内存的两种方式\">#</a> 申请内存的两种方式</h1>\n<p>&lt;1&gt; 通过  <code>VirtualAlloc</code>  /  <code>VirtualAllocEx</code>  申请的：Private Memory</p>\n<p>&lt;2&gt; 通过  <code>CreateFileMapping</code>  映射的：Mapped Memory</p>\n<h2 id=\"验证内存种类\"><a class=\"anchor\" href=\"#验证内存种类\">#</a> 验证内存种类</h2>\n<p>接下来写代码去验证上面的两种内存种类。</p>\n<p>在复习一下  <code>VirtualAlloc</code>  函数：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>LPVOID VirtualAlloc<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tLPVOID lpAddress<span class=\"token punctuation\">,</span> \t<span class=\"token comment\">// 要分配的内存区域的地址</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tDWORD dwSize<span class=\"token punctuation\">,</span> \t\t<span class=\"token comment\">// 分配的大小</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tDWORD flAllocationType<span class=\"token punctuation\">,</span> \t<span class=\"token comment\">// 分配的类型</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tDWORD flProtect \t<span class=\"token comment\">// 该内存的初始保护属性</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>参数介绍：</p>\n<p>申请内存的地址。可以指定地址，但是物理页我们不知道哪里的地址是否可用，所以一般为 NULL 。<br />\n申请内存的大小。一般以页的整数倍进行申请，如：两页 0x1000*2 。<br />\n申请内存的类型。<br />\n常用的有两种类型：<br />\n <code>MEM_RESERVE</code>  : 先申请线性内存，但不占用物理内存<br />\n <code>MEM_COMMIT</code>  : 占用线性内存和物理内存。<strong>一会就打破这个认知！</strong><br />\n内存的状态。可读、可写、可执行。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;Windows.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">void</span><span class=\"token operator\">*</span> p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tp <span class=\"token operator\">=</span> <span class=\"token function\">VirtualAlloc</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x1000</span><span class=\"token punctuation\">,</span>MEM_COMMIT<span class=\"token punctuation\">,</span>PAGE_READWRITE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"p:%p\\t\\n\"</span><span class=\"token punctuation\">,</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token function\">VirtualFree</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>MEM_FREE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>先运行，不申请内存，查看此进程的内存结构：</p>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<p>申请后：</p>\n<p><img data-src=\"image002.png\" alt=\"\" /></p>\n<h2 id=\"验证-mem_reserve-与-mem_commit\"><a class=\"anchor\" href=\"#验证-mem_reserve-与-mem_commit\">#</a> 验证 MEM_RESERVE 与 MEM_COMMIT</h2>\n<p>我们使用 VirtualAlloc 这个函数的时候，第三个参数要传分配的类型，常见的一个是  <code>MEM_COMMIT</code>  ，另一个是  <code>MEM_RESERVE</code>  。</p>\n<p>前者申请后就会提供一个物理页，而后者会有记录但不会给你物理页，真的是这样的吗？</p>\n<p>之前的代码里我们传递的参数是 <code>MEM_COMMIT</code> ，但我们并没有给申请的地址赋值，我们来查看一下是否有物理页：</p>\n<p><img data-src=\"image003.png\" alt=\"\" /></p>\n<p>可以看到并没有 PTE，也就是没有挂物理页。</p>\n<p>更改上面的代码，给申请的地址赋值：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;Windows.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">void</span><span class=\"token operator\">*</span> p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tp <span class=\"token operator\">=</span> <span class=\"token function\">VirtualAlloc</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x1000</span><span class=\"token punctuation\">,</span>MEM_COMMIT<span class=\"token punctuation\">,</span>PAGE_READWRITE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"p:%p\\t\\n\"</span><span class=\"token punctuation\">,</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>p<span class=\"token operator\">=</span><span class=\"token number\">666</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token function\">VirtualFree</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>MEM_FREE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>可以看到：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kd&gt; !vtop 0aac01e0 0x3c0000</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>X86VtoP: Virt 00000000003c0000, pagedir 000000000aac01e0</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>X86VtoP: PAE PDPE 000000000aac01e0 - 000000004e48a801</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>X86VtoP: PAE PDE 000000004e48a008 - 000000004e723867</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>X86VtoP: PAE PTE 000000004e723e00 - 800000004ea37867</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>X86VtoP: PAE Mapped phys 000000004ea37000</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>Virtual address 3c0000 translates to physical address 4ea37000.</pre></td></tr></table></figure><p>可以看到挂上物理页了。也就是说，就算使用 MEM_COMMIT 参数，如果不用的话，物理页也不会给你的。</p>\n<h1 id=\"堆与栈\"><a class=\"anchor\" href=\"#堆与栈\">#</a> 堆与栈</h1>\n<p>一个由 C/C++ 编译的程序占用的内存分为以下几个部分</p>\n<ol>\n<li>栈区（stack）: 由编译器自动分配释放 ，存放函数的参数值，局部变量的值等。其操作方式类似于数据结构中的栈</li>\n<li>堆区（heap）: 一般由程序员分配释放， 若程序员不释放，程序结束时可能由 OS 回收 。注意它与数据结构中的堆是两回事，分配方式倒是类似于链表。</li>\n<li>全局区（静态区）（static）: 全局变量和静态变量的存储是放在一块的，初始化的全局变量和静态变量在一块区域， 未初始化的全局变量和未初始化的静态变量在相邻的另一块区域。  程序结束后有系统释放</li>\n<li>文字常量区：常量字符串就是放在这里的。 程序结束后由系统释放</li>\n<li>程序代码区：存放函数体的二进制代码。</li>\n</ol>\n<h2 id=\"堆内存与-malloc-分析\"><a class=\"anchor\" href=\"#堆内存与-malloc-分析\">#</a> 堆内存与 malloc 分析</h2>\n<p>在 c 程序中我们经常用 malloc 来 “申请内存”。<br />\n但它不是真正申请内存，它的底层实现是  <code>HeapAlloc</code>  ，就是申请堆内存，而这堆内存是进程创建好后操作系统就分配好了的。<br />\n我们来做个实验验证一下：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;Windows.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tLPVOID p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    p <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"p: 0x%X\\n\"</span><span class=\"token punctuation\">,</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在没执行 malloc 前看一下进程的内存结构：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kd&gt; !vad 0x8a0fdfc0</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>VAD   Level     Start       End Commit</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>8a1ce638  1        10        10      1 Private      READWRITE          </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>8a056258  2        20        20      1 Private      READWRITE          </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>8a0fdfc0  0        30       12f      4 Private      READWRITE          </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>8a074aa0  3       130       132      0 Mapped       READONLY           Pagefile section, shared commit 0x3</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>89d0eb38  2       140       23f      9 Private      READWRITE          </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>89e05778  4       240       24f      6 Private      READWRITE          </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>8a0dfa00  3       250       25f      0 Mapped       READWRITE          Pagefile section, shared commit 0x3</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>89ace2a8  5       260       275      0 Mapped       READONLY           \\WINDOWS\\system32\\unicode.nls</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>8a09a2e8  4       280       2c0      0 Mapped       READONLY           \\WINDOWS\\system32\\locale.nls</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>8a112a20  6       2d0       310      0 Mapped       READONLY           \\WINDOWS\\system32\\sortkey.nls</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>89ad4380  5       320       325      0 Mapped       READONLY           \\WINDOWS\\system32\\sorttbls.nls</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>89d1bcb8  7       330       370      0 Mapped       READONLY           Pagefile section, shared commit 0x41</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>8a09be68  6       380       38f      3 Private      READWRITE          </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>8a167bd0  7       390       392      0 Mapped       READONLY           \\WINDOWS\\system32\\ctype.nls</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>89d91d08  8       3a0       3ad      0 Mapped       READWRITE          Pagefile section, shared commit 0xe</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>8a04df30  9       3b0       3b0      1 Private      READWRITE          </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>89ac7148  1       400       42d      7 Mapped  Exe  EXECUTE_WRITECOPY  \\Documents and Settings\\Administrator\\My Documents\\TestHeapAndStack\\Debug\\TestHeapAndStack.exe</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>8a1f8b78  4     76d70     76d91      2 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\apphelp.dll</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>89ad66a8  5     77bd0     77bd7      2 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\version.dll</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>8a19ad48  6     77da0     77e48      6 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\advapi32.dll</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>8a16f5b8  7     77e50     77ee2      2 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\rpcrt4.dll</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>89ad5388  8     77fc0     77fd0      2 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\secur32.dll</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>89dbbc00  3     7c800     7c91d      6 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\kernel32.dll</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>89d11fd8  2     7c920     7c9b2      5 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\ntdll.dll</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>89ad1d20  4     7f6f0     7f7ef      0 Mapped       EXECUTE_READ       Pagefile section, shared commit 0x7</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>8a175400  3     7ffa0     7ffd2      0 Mapped       READONLY           Pagefile section, shared commit 0x33</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>8a0a5dc8  4     7ffdd     7ffdd      1 Private      READWRITE          </pre></td></tr><tr><td data-num=\"30\"></td><td><pre>89d18918  5     7ffdf     7ffdf      1 Private      READWRITE</pre></td></tr></table></figure><p>执行 malloc 后，程序打印出的地址为： <code>p: 003807A8</code> ，此时再看内存结构：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kd&gt; !vad 0x8a0fdfc0</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>VAD   Level     Start       End Commit</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>8a1ce638  1        10        10      1 Private      READWRITE          </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>8a056258  2        20        20      1 Private      READWRITE          </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>8a0fdfc0  0        30       12f      4 Private      READWRITE          </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>8a074aa0  3       130       132      0 Mapped       READONLY           Pagefile section, shared commit 0x3</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>89d0eb38  2       140       23f      9 Private      READWRITE          </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>89e05778  4       240       24f      6 Private      READWRITE          </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>8a0dfa00  3       250       25f      0 Mapped       READWRITE          Pagefile section, shared commit 0x3</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>89ace2a8  5       260       275      0 Mapped       READONLY           \\WINDOWS\\system32\\unicode.nls</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>8a09a2e8  4       280       2c0      0 Mapped       READONLY           \\WINDOWS\\system32\\locale.nls</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>8a112a20  6       2d0       310      0 Mapped       READONLY           \\WINDOWS\\system32\\sortkey.nls</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>89ad4380  5       320       325      0 Mapped       READONLY           \\WINDOWS\\system32\\sorttbls.nls</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>89d1bcb8  7       330       370      0 Mapped       READONLY           Pagefile section, shared commit 0x41</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>8a09be68  6       380       38f      5 Private      READWRITE          </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>8a167bd0  7       390       392      0 Mapped       READONLY           \\WINDOWS\\system32\\ctype.nls</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>89d91d08  8       3a0       3ad      0 Mapped       READWRITE          Pagefile section, shared commit 0xe</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>8a04df30  9       3b0       3b0      1 Private      READWRITE          </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>89ac7148  1       400       42d      7 Mapped  Exe  EXECUTE_WRITECOPY  \\Documents and Settings\\Administrator\\My Documents\\TestHeapAndStack\\Debug\\TestHeapAndStack.exe</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>8a1f8b78  4     76d70     76d91      2 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\apphelp.dll</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>89ad66a8  5     77bd0     77bd7      2 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\version.dll</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>8a19ad48  6     77da0     77e48      6 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\advapi32.dll</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>8a16f5b8  7     77e50     77ee2      2 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\rpcrt4.dll</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>89ad5388  8     77fc0     77fd0      2 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\secur32.dll</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>89dbbc00  3     7c800     7c91d      6 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\kernel32.dll</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>89d11fd8  2     7c920     7c9b2      5 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\ntdll.dll</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>89ad1d20  4     7f6f0     7f7ef      0 Mapped       EXECUTE_READ       Pagefile section, shared commit 0x7</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>8a175400  3     7ffa0     7ffd2      0 Mapped       READONLY           Pagefile section, shared commit 0x33</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>8a0a5dc8  4     7ffdd     7ffdd      1 Private      READWRITE          </pre></td></tr><tr><td data-num=\"30\"></td><td><pre>89d18918  5     7ffdf     7ffdf      1 Private      READWRITE</pre></td></tr></table></figure><p><code>8a09be68  6       380       38f      5 Private      READWRITE </code>  这个线性地址早已存在。<br />\n所以 malloc 就是从已经分配好的线性地址也就是堆内存中取出地址来用。</p>\n<h2 id=\"栈内存与全局变量区的内存\"><a class=\"anchor\" href=\"#栈内存与全局变量区的内存\">#</a> 栈内存与全局变量区的内存</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;Windows.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> x<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">int</span> y <span class=\"token operator\">=</span> <span class=\"token number\">0x12345678</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"x:%x y:%x \\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在运行前 (可以下断点) 查看进程的内存结构：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>VAD   Level     Start       End Commit</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>8a108ef0  1        10        10      1 Private      READWRITE</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>89d0f8e8  2        20        20      1 Private      READWRITE</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>8a1d4360  0        30       12f      4 Private      READWRITE</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>89d1ef10  3       130       132      0 Mapped       READONLY           Pagefile section, shared commit 0x3</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>89e01950  2       140       23f      8 Private      READWRITE          </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>8a056258  4       240       24f      6 Private      READWRITE          </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>8a19ef10  3       250       25f      0 Mapped       READWRITE          Pagefile section, shared commit 0x3</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>8a16f160  5       260       275      0 Mapped       READONLY           \\WINDOWS\\system32\\unicode.nls</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>89d19408  4       280       2c0      0 Mapped       READONLY           \\WINDOWS\\system32\\locale.nls</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>89dabd28  6       2d0       310      0 Mapped       READONLY           \\WINDOWS\\system32\\sortkey.nls</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>89ad47b8  5       320       325      0 Mapped       READONLY           \\WINDOWS\\system32\\sorttbls.nls</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>8a12e820  7       330       370      0 Mapped       READONLY           Pagefile section, shared commit 0x41</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>89d79bc8  6       380       38f      3 Private      READWRITE          </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>8a062d58  7       390       392      0 Mapped       READONLY           \\WINDOWS\\system32\\ctype.nls</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>89d9a2a8  8       3a0       3ad      0 Mapped       READWRITE          Pagefile section, shared commit 0xe</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>89d0eb38  9       3b0       3b0      1 Private      READWRITE          </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>8a0348b8  1       400       42e      8 Mapped  Exe  EXECUTE_WRITECOPY  \\Documents and Settings\\Administrator\\My Documents\\TestHeapAndStack\\Debug\\TestHeapAndStack.exe</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>8a065420  4     76d70     76d91      2 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\apphelp.dll</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>89d1ad68  5     77bd0     77bd7      2 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\version.dll</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>8a034a78  6     77da0     77e48      6 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\advapi32.dll</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>89d03940  7     77e50     77ee2      2 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\rpcrt4.dll</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>89dbc488  8     77fc0     77fd0      2 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\secur32.dll</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>89cf8798  3     7c800     7c91d      6 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\kernel32.dll</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>8a0348e8  2     7c920     7c9b2      5 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\ntdll.dll</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>89cf87c8  4     7f6f0     7f7ef      0 Mapped       EXECUTE_READ       Pagefile section, shared commit 0x7</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>89ad22e8  3     7ffa0     7ffd2      0 Mapped       READONLY           Pagefile section, shared commit 0x33</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>8a072a00  4     7ffdb     7ffdb      1 Private      READWRITE          </pre></td></tr><tr><td data-num=\"29\"></td><td><pre>89da64c0  5     7ffdf     7ffdf      1 Private      READWRITE</pre></td></tr></table></figure><p>运行后打印信息如下： <code>x:0042AC50 y:0012FF7C</code>  其内存结构如下：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>8a108ef0  1        10        10      1 Private      READWRITE</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>89d0f8e8  2        20        20      1 Private      READWRITE</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>8a1d4360  0        30       12f      4 Private      READWRITE</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>89d1ef10  3       130       132      0 Mapped       READONLY           Pagefile section, shared commit 0x3</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>89e01950  2       140       23f      8 Private      READWRITE          </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>8a056258  4       240       24f      6 Private      READWRITE          </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>8a19ef10  3       250       25f      0 Mapped       READWRITE          Pagefile section, shared commit 0x3</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>8a16f160  5       260       275      0 Mapped       READONLY           \\WINDOWS\\system32\\unicode.nls</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>89d19408  4       280       2c0      0 Mapped       READONLY           \\WINDOWS\\system32\\locale.nls</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>89dabd28  6       2d0       310      0 Mapped       READONLY           \\WINDOWS\\system32\\sortkey.nls</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>89ad47b8  5       320       325      0 Mapped       READONLY           \\WINDOWS\\system32\\sorttbls.nls</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>8a12e820  7       330       370      0 Mapped       READONLY           Pagefile section, shared commit 0x41</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>89d79bc8  6       380       38f      5 Private      READWRITE          </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>8a062d58  7       390       392      0 Mapped       READONLY           \\WINDOWS\\system32\\ctype.nls</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>89d9a2a8  8       3a0       3ad      0 Mapped       READWRITE          Pagefile section, shared commit 0xe</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>89d0eb38  9       3b0       3b0      1 Private      READWRITE          </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>8a0348b8  1       400       42e      8 Mapped  Exe  EXECUTE_WRITECOPY  \\Documents and Settings\\Administrator\\My Documents\\TestHeapAndStack\\Debug\\TestHeapAndStack.exe</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>8a065420  4     76d70     76d91      2 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\apphelp.dll</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>89d1ad68  5     77bd0     77bd7      2 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\version.dll</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>8a034a78  6     77da0     77e48      6 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\advapi32.dll</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>89d03940  7     77e50     77ee2      2 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\rpcrt4.dll</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>89dbc488  8     77fc0     77fd0      2 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\secur32.dll</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>89cf8798  3     7c800     7c91d      6 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\kernel32.dll</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>8a0348e8  2     7c920     7c9b2      5 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\ntdll.dll</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>89cf87c8  4     7f6f0     7f7ef      0 Mapped       EXECUTE_READ       Pagefile section, shared commit 0x7</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>89ad22e8  3     7ffa0     7ffd2      0 Mapped       READONLY           Pagefile section, shared commit 0x33</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>8a072a00  4     7ffdb     7ffdb      1 Private      READWRITE          </pre></td></tr><tr><td data-num=\"28\"></td><td><pre>89da64c0  5     7ffdf     7ffdf      1 Private      READWRITE</pre></td></tr></table></figure><p>可以发现这两处内存地址也是提前申请好的。</p>\n<p>至此结束。</p>\n",
            "tags": [
                "VirtualAlloc",
                "MEM_COMMIT与MEM_RESERVE",
                "malloc",
                "堆内存",
                "栈内存",
                "全局区内存"
            ]
        }
    ]
}