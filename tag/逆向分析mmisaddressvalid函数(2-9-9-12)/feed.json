{
    "version": "https://jsonfeed.org/version/1",
    "title": "Or0kit • All posts by \"逆向分析mmisaddressvalid函数(2-9-9-12)\" tag",
    "description": "临渊羡鱼，不如退而结网",
    "home_page_url": "https://Or0kit.github.io",
    "items": [
        {
            "id": "https://or0kit.github.io/Bin/Core/WindowsXp/Protect-Mode/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F-2-9-9-12%E5%88%86%E9%A1%B5/",
            "url": "https://or0kit.github.io/Bin/Core/WindowsXp/Protect-Mode/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F-2-9-9-12%E5%88%86%E9%A1%B5/",
            "title": "保护模式-2-9-9-12分页",
            "date_published": "2021-08-31T14:19:22.000Z",
            "content_html": "<h1 id=\"10-10-12-分页的寻址范围\"><a class=\"anchor\" href=\"#10-10-12-分页的寻址范围\">#</a> 10-10-12 分页的寻址范围</h1>\n<p>在之前的学习中，有一个课后思考题：10-10-12 分页模式物理内存能够识别的最多范围是多少？<br />\n我们当时是怎么算的呢？很简单嘛，有 1024 个页表，每个页表有 1024 个物理页，每个物理页有 4KB，那不就是 1024 * 1024 * 4KB = 4GB 吗？！<br />\n答案确实是 4GB，但很遗憾，如果你是这样算的，那你对 10-10-12 分页就还没有理解到位。<br />\n更有甚者可能会说，32 位系统，2^32=4GB，所以寻址范围是 4GB，这就更加错的离谱。</p>\n<p>实际上，决定物理内存寻址范围的是页表项 PTE。</p>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<p>PTE 的低 12 位是属性；高 20 位是基址，低 12 位补零后构成了<strong>物理页基址</strong>。所以，物理地址的寻址范围是由 PTE 构成的这 32 位物理页基址决定的，4GB 是从这里来的。</p>\n<p><strong>注意，线程的 4GB 和物理地址寻址范围的 4GB 不是一个东西。</strong> 物理地址寻址的 4GB 我们刚才已经解释过，是由 PTE 决定的。而线程的 4GB 其实指的是 32 位线性地址确定的，这个才是和 32 位系统相关的，和分页模式无关，32 位系统的线性地址就是 32 位。</p>\n<h1 id=\"10-10-12-分页的缺点\"><a class=\"anchor\" href=\"#10-10-12-分页的缺点\">#</a> 10-10-12 分页的缺点</h1>\n<p>缺点就是物理地址寻址范围太小了，只有 4GB。随着硬件的发展，物理内存已经超过 4GB 了，所以我们需要一种新的分页模式来映射更多的物理内存，2-9-9-12 分页又称为 PAE（物理地址扩展）分页就应运而生了。</p>\n<h1 id=\"2-9-9-12-分页\"><a class=\"anchor\" href=\"#2-9-9-12-分页\">#</a> 2-9-9-12 分页</h1>\n<p>2-9-9-12 分页将物理地址寻址范围扩大到 2^36=64GB。</p>\n<h1 id=\"为什么是2-9-9-12\"><a class=\"anchor\" href=\"#为什么是2-9-9-12\">#</a> 为什么是 2-9-9-12</h1>\n<ul>\n<li>页的大小是确定的，4KB 不能随便改，所以 32 位的最后一部分就确定为了 12 位。</li>\n<li>如果想增大物理内存的访问范围，就需要增大 PTE，增大了多少呢？考虑对齐的因素，增加到 8 个字节，由于 PTE 增大了，而 PTT 表的大小没变，依然是 4KB，所以每张 PTT 表能放的 PTE 个数由原来的 1024 个减少到 512 个，512 等于 2 的 9 次方，因此 PTI=9</li>\n</ul>\n<p><img data-src=\"image003.png\" alt=\"\" /></p>\n<ul>\n<li>由于 2 的 9 次方个 PDE 就能找到所有的 PTT 表，因此 PDI=9</li>\n<li>分配到这里时，还剩下前 2 位未分配。与 10-10-12 不同，CR3 不直接指向 PDT 表，而是指向一张新的表，叫做 PDPT 表（页目录指针表），PDPT 表中的每一个成员叫做 PDPTE（Page-Directory-Point-Table Entry，页目录指针表项），每项占 8 个字节。PDPT 表只有 4 个成员，因为 2 位比特位只能满足四种情况： <code>00 01 10 11</code> 。</li>\n</ul>\n<p>2-9-9-12 分页结构图</p>\n<p><img data-src=\"image002.png\" alt=\"\" /></p>\n<h1 id=\"pdpte\"><a class=\"anchor\" href=\"#pdpte\">#</a> PDPTE</h1>\n<p><img data-src=\"image004.png\" alt=\"\" /></p>\n<p><code>P位</code> ：第 0 位，有效位<br />\n <code>Avail</code> ：这部分供操作系统软件随意使用，CPU 不使用<br />\n <code>Base Addr</code> ：指向 PDT 表地址，由两部分组成</p>\n<blockquote>\n<p>第一部分：高四字节 32~35 位<br />\n第二部分：低 4 字节 12~31 位<br />\n这两部分加起来共 24 位，后 12 位补 0</p>\n</blockquote>\n<p><code>灰色部分</code> ：保留位</p>\n<p>PWT 位与 PCD 位下节学。</p>\n<h1 id=\"pde\"><a class=\"anchor\" href=\"#pde\">#</a> PDE</h1>\n<p><img data-src=\"image005.png\" alt=\"\" /></p>\n<p>低二十一位是对齐用的，所以每一页为 2^21=2MB。</p>\n<p>PAT 位：页属性表<br />\n只有当 PS=1 时，PAT 位才是有意义的（页属性表只针对页）<br />\n具体含义用到时再查资吧。</p>\n<p>注意：</p>\n<blockquote>\n<p>G 位、PCD 位、PWT 位可以暂且不管。<br />\n其他属性位的含义在上面学习 PDPTE 时或在学习 10-10-12 分页的 PDE 与 PTE 时已经介绍，这里不再详述</p>\n</blockquote>\n<h1 id=\"pte\"><a class=\"anchor\" href=\"#pte\">#</a> PTE</h1>\n<p><img data-src=\"image006.png\" alt=\"\" /></p>\n<p>特别说明：</p>\n<blockquote>\n<p>PTE 中 35-12 是物理页基址，24 位，低 12 位补 0<br />\n 物理页基址 + 12 位的页内偏移指向具体数据</p>\n</blockquote>\n<h1 id=\"xd标志位amd中称为nx即no-excetion\"><a class=\"anchor\" href=\"#xd标志位amd中称为nx即no-excetion\">#</a> XD 标志位（AMD 中称为 NX, 即 No Excetion ）</h1>\n<p>PDE/PTE 结构</p>\n<p><img data-src=\"image007.png\" alt=\"\" /></p>\n<p>段的属性有可读、可写和可执行</p>\n<p>页的属性有可读、可写</p>\n<p>当 RET 执行返回的时候，如果我修改堆栈里面的数据指向一个我提前准备<br />\n好的数据（把数据当作代码来执行，漏洞都是依赖这点，比如 SQL 注入也是）</p>\n<p>所以，Intel 就做了硬件保护，做了一个不可执行位，XD=1 时。那么你的软件溢出<br />\n了也没有关系，即使你的 EIP 蹦到了危险的 “数据区”，也是不可以执行的！</p>\n<p>在 PAE 分页模式下，PDE 与 PTE 的最高位为 XD/NX 位.</p>\n<h1 id=\"实验\"><a class=\"anchor\" href=\"#实验\">#</a> 实验</h1>\n<h2 id=\"在2-9-9-12分页模式下寻找物理地址\"><a class=\"anchor\" href=\"#在2-9-9-12分页模式下寻找物理地址\">#</a> 在 2-9-9-12 分页模式下寻找物理地址</h2>\n<p>老办法利用 CE 查找</p>\n<p><img data-src=\"image008.png\" alt=\"\" /></p>\n<p>按照 2-9-9-12 拆分 <code>000B1C18</code></p>\n<p>00<br />\n0 0000 0000<br />\n0 1011 0001</p>\n<p>2-9-9-12: <code>0-0-B1-C18</code></p>\n<p>在 windbg 中查找</p>\n<p>其中 notepad.exe 的 CR3 为： <code>0aac01a0</code></p>\n<p>在 windbg 中执行：<br />\n <code>!dq 0aac01a0</code></p>\n<p><img data-src=\"image009.png\" alt=\"\" /></p>\n<p><code>!dq 2bdcd000</code></p>\n<p><img data-src=\"image010.png\" alt=\"\" /></p>\n<p><code>!dq 2bdc8000 + b1*8</code></p>\n<p><img data-src=\"image011.png\" alt=\"\" /></p>\n<p><code>!db 2be1f000 + C18</code></p>\n<p><img data-src=\"image012.png\" alt=\"\" /></p>\n<h2 id=\"给0地址挂物理页\"><a class=\"anchor\" href=\"#给0地址挂物理页\">#</a> 给 0 地址挂物理页</h2>\n<p>代码</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a Value Adress:%p\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token number\">0x666</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"p Value;%x\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>程序的 CR3： <code>0aac02c0</code></p>\n<p>直接用 <code>!vtop</code>  命令了，不在手动拆分了。</p>\n<p>0 和 0012ff54 地址对应的 PDPE、PDE、PTE</p>\n<p><img data-src=\"image013.png\" alt=\"\" /></p>\n<p>这里就把 0 地址 PTE 指向的物理页修改为变量 aPTE 指向的物理页了。</p>\n<p><img data-src=\"image014.png\" alt=\"\" /></p>\n<p>没有！eq 命令，这里要用！ed, 注意地址在内存中的排序。</p>\n<p><code>!ed ac168000 acdb2867</code> <br />\n <code>!ed ac168004 80000000</code></p>\n<p><img data-src=\"image014.png\" alt=\"\" /></p>\n<p>成功！</p>\n<h2 id=\"逆向分析mmisaddressvalid函数2-9-9-12\"><a class=\"anchor\" href=\"#逆向分析mmisaddressvalid函数2-9-9-12\">#</a> 逆向分析 MmIsAddressValid 函数 (2-9-9-12)</h2>\n<p><img data-src=\"image015.png\" alt=\"\" /></p>\n<ul>\n<li>\n<p>学习操作系统是如何判断线性地址有效的。</p>\n</li>\n<li>\n<p>学习操作系统是如何找到 PDE、PTE 的，与之相关的汇编代码我们可以用到。也可以把汇编转成 C。</p>\n</li>\n</ul>\n<pre><code>mov     eax, VirtualAddress;\nshr     eax, 12h        ; 右移18位，相当于右移21位取PDI,然后乘以8，即再左移3位。\nand     eax, 3FF8h        ; 与操作，取 eax = PDPTI * 4KB + PDI * 8\nsub     eax, 3FA00000h  ; eax = C0600000 + PDPTI * 4KB + PDI * 8\n\t\t\t\t\t\t; eax 指向了 PDE\n</code></pre>\n<pre><code>mov     ecx, VirtualAddress;\nshr     ecx, 9          ; 相当于右移12位，然后乘以8\nand     ecx, 7FFFF8h    ; ecx = PDPTI * 2MB + PDI * 4KB + PTI * 8\nsub     ecx, 40000000h  ; ecx = C0000000 + PDPTI * 2MB + PDI * 4KB + PTI * 8\n\t\t                ; ecx 指向 PTE\n</code></pre>\n<h3 id=\"内存中的2-9-9-12分页结构图\"><a class=\"anchor\" href=\"#内存中的2-9-9-12分页结构图\">#</a> 内存中的 2-9-9-12 分页结构图</h3>\n<p>由 <strong>逆向分析 MmIsAddressValid 函数 (2-9-9-12)</strong> 可以联想到内存中的 2-9-9-12 分页结构图</p>\n<p><img data-src=\"image016.png\" alt=\"\" /></p>\n<p>总结如下:\t<br />\n1. 第三个 PDPTE 指向了一个 PDT 表，此表的前四项 指向了 PDPTE 的每一个元素<br />\n 2. 根据计算 C0600000 的最大索引，不会超过 C0604000</p>\n<pre><code class=\"language-asm\">\t \t\t\t\t\t\t\t\t\t\t\t\t mov     edi, edi\n\t.text:0043C92A 55                                push    ebp\n\t.text:0043C92B 8B EC                             mov     ebp, esp\n\t.text:0043C92D 51                                push    ecx\n\t.text:0043C92E 51                                push    ecx\n\t.text:0043C92F 8B 4D 08                          mov     ecx, [ebp+VirtualAddress]\n\t.text:0043C932 56                                push    esi\n\t.text:0043C933 8B C1                             mov     eax, ecx\n\t.text:0043C935 C1 E8 12                          shr     eax, 12h\n\t.text:0043C938 BE F8 3F 00 00                    mov     esi, 3FF8h\n\t.text:0043C93D 23 C6                             and     eax, esi\n\t.text:0043C93F 2D 00 00 A0 3F                    sub     eax, 3FA00000h\n</code></pre>\n<p><code>线性地址 &gt;&gt;18 +C0600000</code>  也就是说。得出的索引是 <code>2^14</code> ，最大值 <code>4000H</code>  实际应用从 0 开始，也就是  <code>4000H-(1*8byte)</code> <br />\n 那么得到最后一个 PDE 也就是 <code>C06003FFE8</code></p>\n<p>由此可推出</p>\n<blockquote>\n<p>C0600000 是第一个 PDT 表的首地址<br />\n C0601000 是第二个 PDT 表的首地址<br />\n C0602000 是第三个 PDT 表的首地址<br />\n C0603000 是第四个 PDT 表的首地址</p>\n</blockquote>\n<p>2-9-9-12 分页下</p>\n<p>总结进程的 0xC06000000-0xC0603000 线性地址对应的物理页分别存储第一个 PDT 表到第 4 个 PDT 表</p>\n<p>而通过当前进程 CR3 指向 PDPT 表只有四项，每项指向一 PDT 表基址</p>\n<p>第一个 PDT 表可以寻址 0x00000000-0x3FFFFFFF           这个 PDT 表映射的线性地址是 0xC0600000</p>\n<p>第二个 PDT 表可以寻址 0x40000000-0x7FFFFFFF           这个 PDT 表映射的线性地址是 0xC0601000</p>\n<p>第三个 PDT 表可以寻址 0x80000000-0xBFFFFFFF           这个 PDT 表映射的线性地址是 0xC0602000</p>\n<p>第四个 PDT 表可以寻址 0xC0000000-0xFFFFFFFF          这个 PDT 表映射的线性地址是 0xC0603000</p>\n<p>注意的是仔细看上面第 0xC0600000 地址拆分的时候可以看到这个线性地址对应物理页既是的 PDT 表有是 PTT 表</p>\n<p>本来就是 2-9-9-12PTT 表有  4KB*512*4=8M 线性地址存储，还有 4 个 PDT，这四个 PDT 存储在 0xC0600000-0xC0603000</p>\n<p>这个四个 PDT 表都既是 PDT 也是 PTT 表，否则 8M 的内存是不够的</p>\n<p>具体内容参考原文，链接为：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Rhb2xhb2Rhd2hvL2FydGljbGUvZGV0YWlscy8xMDkxODM4ODM=\">https://blog.csdn.net/taolaodawho/article/details/109183883</span></p>\n<h2 id=\"测试xd位\"><a class=\"anchor\" href=\"#测试xd位\">#</a> 测试 XD 位</h2>\n<p>CPU 可读 可写 可执行判断</p>\n<p>可读 可写的判断</p>\n<blockquote>\n<p>mov eax,ebx</p>\n</blockquote>\n<p>ebx 就是要进行可读判断 eax 进行可写判断</p>\n<blockquote>\n<p>jmp 0x12345678 // 可以修改 EIP 的指令都会进行可执行判断</p>\n</blockquote>\n<p>可执行判断，如果 PDE PTE 其中任何一个的最高位是 1 那么这个指令就会执行失败。</p>\n<p>代码转自<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0t3YW5zeS9hcnRpY2xlL2RldGFpbHMvMTA4OTY1MTk2\"> https://blog.csdn.net/Kwansy/article/details/108965196</span></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;Windows.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>buff<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>DWORD <span class=\"token operator\">*</span><span class=\"token function\">GetPDE</span><span class=\"token punctuation\">(</span>DWORD addr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xc0600000</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>addr <span class=\"token operator\">>></span> <span class=\"token number\">18</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x3ff8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token comment\">//DWORD PDPTI = addr >> 30;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token comment\">//DWORD PDI = (addr >> 21) &amp; 0x000001FF;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token comment\">//DWORD PTI = (addr >> 12) &amp; 0x000001FF;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token comment\">//return (DWORD *)(0xC0600000 + PDPTI * 0x1000 + PDI * 8);</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>DWORD <span class=\"token operator\">*</span><span class=\"token function\">GetPTE</span><span class=\"token punctuation\">(</span>DWORD addr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xc0000000</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>addr <span class=\"token operator\">>></span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x7ffff8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token comment\">//DWORD PDPTI = addr >> 30;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token comment\">//DWORD PDI = (addr >> 21) &amp; 0x000001FF;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token comment\">//DWORD PTI = (addr >> 12) &amp; 0x000001FF;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token comment\">//return (DWORD *)(0xC0000000 + PDPTI * 0x200000 + PDI * 0x1000 + PTI * 8);</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">__declspec</span><span class=\"token punctuation\">(</span>naked<span class=\"token punctuation\">)</span> <span class=\"token function\">R0Function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t__asm</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\tpush ebp</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t\tmov ebp<span class=\"token punctuation\">,</span>esp</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t\tsub esp<span class=\"token punctuation\">,</span><span class=\"token number\">0x1000</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t\tpushad</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t\tpushfd\t\t</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t__asm push fs</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token comment\">//__asm int 3</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token comment\">// 修改 buff 的 XD 位</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token function\">GetPDE</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>buff<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|=</span> <span class=\"token number\">0x80000000</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token function\">GetPTE</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>buff<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|=</span> <span class=\"token number\">0x80000000</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t<span class=\"token comment\">//__asm int 3</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t__asm pop fs</pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t__asm</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\tpopfd</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\t\tpopad</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t\t\tadd esp<span class=\"token punctuation\">,</span><span class=\"token number\">0x1000</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t\t\tmov esp<span class=\"token punctuation\">,</span>ebp</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t\t\tpop ebp</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t\t\tiretd</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\tDWORD dwEAX <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\tBYTE bytecode <span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0x90</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xB8</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x01</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xC3</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// NOP, MOV EAX,1, RET</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t<span class=\"token keyword\">int</span> xd<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t<span class=\"token comment\">// 申请一个内存页，写入硬编码</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\tbuff <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">VirtualAlloc</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x1000</span><span class=\"token punctuation\">,</span>MEM_COMMIT<span class=\"token punctuation\">,</span>PAGE_EXECUTE_READWRITE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"buff: %p\\n\"</span><span class=\"token punctuation\">,</span> buff<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t<span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>buff<span class=\"token punctuation\">,</span>bytecode<span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t<span class=\"token comment\">// 测试，对比 XD=0 和 XD=1 的运行结果</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输入XD位：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>xd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输入 0 可以调用，输入 1 调用失败</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\t<span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>xd <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"在IDT表构建中断门，请在windbg中执行下面的指令：\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"eq 8003f500 %04xee00`0008%04x\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>R0Function<span class=\"token operator\">>></span><span class=\"token number\">16</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>R0Function <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x0000FFFF</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>\t\t<span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>\t\t__asm <span class=\"token keyword\">int</span> <span class=\"token number\">0x20</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"XD位修改成功，buff不可执行.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>\t__asm</pre></td></tr><tr><td data-num=\"78\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>\t\t\tpush eax</pre></td></tr><tr><td data-num=\"80\"></td><td><pre>\t\t\txor eax<span class=\"token punctuation\">,</span>eax</pre></td></tr><tr><td data-num=\"81\"></td><td><pre>\t\t\tcall buff</pre></td></tr><tr><td data-num=\"82\"></td><td><pre>\t\t\tmov dwEAX<span class=\"token punctuation\">,</span>eax</pre></td></tr><tr><td data-num=\"83\"></td><td><pre>\t\t\tpop eax</pre></td></tr><tr><td data-num=\"84\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dwEAX <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"调用失败.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dwEAX <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"调用成功.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bye!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>\t<span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>如果将 XD 修改为 1，那么执行 CALL 会失败，程序会卡死。</p>\n<p><img data-src=\"image018.png\" alt=\"\" /></p>\n<p>如果 XD=0，就是默认情况了，可以正常调用函数并返回。</p>\n<p><img data-src=\"image019.png\" alt=\"\" /></p>\n<h1 id=\"windbg中查看0xc0000000与0xc0600000\"><a class=\"anchor\" href=\"#windbg中查看0xc0000000与0xc0600000\">#</a> windbg 中查看 0xC0000000 与 0xC0600000</h1>\n<p>其中 <code>0aac0300</code>  是 CR3。<br />\n <code>!vtop 0aac0300</code>  查看 0 地址的分页</p>\n<p><img data-src=\"image020.png\" alt=\"\" /></p>\n<p>可以发现这两个地址的特殊性， <code>0xC0600000</code>  所在的物理页既是 PDE 也是 PTE 还是物理页， <code>0xC0000000</code>  所在的物理页既是 PTE 还是物理页。</p>\n<p><img data-src=\"image021.png\" alt=\"\" /></p>\n<p><code>0xC0600000</code>  所在的物理页是 0 地址的 PDE</p>\n<p><img data-src=\"image022.png\" alt=\"\" /></p>\n<p><code>0xC0000000</code>  所在的物理页是 0 地址的 PTE</p>\n<h1 id=\"reference\"><a class=\"anchor\" href=\"#reference\">#</a> Reference</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0t3YW5zeS9hcnRpY2xlL2RldGFpbHMvMTA4OTU2OTcx\">https://blog.csdn.net/Kwansy/article/details/108956971</span><br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxOTg4NDQ4L2FydGljbGUvZGV0YWlscy8xMDI3MDk0NzA=\">https://blog.csdn.net/qq_41988448/article/details/102709470</span><br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0t3YW5zeS9hcnRpY2xlL2RldGFpbHMvMTA4OTY1MTk2\">https://blog.csdn.net/Kwansy/article/details/108965196</span><br />\n 页机制和 2-9-9-12 分页线性地址页表之间的映射关系<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Rhb2xhb2Rhd2hvL2FydGljbGUvZGV0YWlscy8xMDkxODM4ODM=\"> https://blog.csdn.net/taolaodawho/article/details/109183883</span></p>\n",
            "tags": [
                "2-9-9-12分页",
                "PAE",
                "PDPTE",
                "PDE",
                "PTE",
                "XD标志位",
                "逆向分析MmIsAddressValid函数(2-9-9-12)"
            ]
        }
    ]
}