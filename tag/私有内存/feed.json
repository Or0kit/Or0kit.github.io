{
    "version": "https://jsonfeed.org/version/1",
    "title": "Or0kit • All posts by \"私有内存\" tag",
    "description": "临渊羡鱼，不如退而结网",
    "home_page_url": "https://Or0kit.github.io",
    "items": [
        {
            "id": "https://or0kit.github.io/Bin/Win32/Win%E7%A7%81%E6%9C%89%E5%86%85%E5%AD%98%E5%92%8C%E5%85%B1%E4%BA%AB%E5%86%85%E5%AD%98%E7%9A%84%E7%94%B3%E8%AF%B7%E4%B8%8E%E9%87%8A%E6%94%BE/",
            "url": "https://or0kit.github.io/Bin/Win32/Win%E7%A7%81%E6%9C%89%E5%86%85%E5%AD%98%E5%92%8C%E5%85%B1%E4%BA%AB%E5%86%85%E5%AD%98%E7%9A%84%E7%94%B3%E8%AF%B7%E4%B8%8E%E9%87%8A%E6%94%BE/",
            "title": "Win私有内存和共享内存的申请与释放",
            "date_published": "2021-07-13T06:57:41.000Z",
            "content_html": "<h1 id=\"正文\"><a class=\"anchor\" href=\"#正文\">#</a> 正文</h1>\n<p>私有内存：在进程本身的物理页中，只能进程本身使用。<br />\n共享内存：进程都可以使用。</p>\n<h2 id=\"私有内存申请api\"><a class=\"anchor\" href=\"#私有内存申请api\">#</a> 私有内存申请 API</h2>\n<p><code>VirtualAlloc</code> <br />\n <code>virtualAllocEx</code>  在指定进程的虚拟空间保留或提交内存区域</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>LPVOID <span class=\"token function\">VirtualAlloc</span><span class=\"token punctuation\">(</span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    LPVOID lpAddress<span class=\"token punctuation\">,</span>        </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    SIZE_T dwSize<span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    DWORD flAllocationType<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    DWORD flProtect</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>参数介绍：</p>\n<ol>\n<li>申请内存的地址。可以指定地址，但是物理页我们不知道哪里的地址是否可用，所以一般为 <code>NULL</code> 。</li>\n<li>申请内存的大小。一般以页的整数倍进行申请，如：两页  <code>0x1000*2</code> 。</li>\n<li>申请内存的类型。<br />\n常用的有两种类型：<br />\n <code>MEM_RESERVE</code> : 先申请线性内存，但不占用物理内存<br />\n <code>MEM_COMMIT</code> : 占用线性内存和物理内存。</li>\n<li>内存的状态。可读、可写、可执行。</li>\n</ol>\n<h2 id=\"new-malloc的区别\"><a class=\"anchor\" href=\"#new-malloc的区别\">#</a> new malloc 的区别</h2>\n<p>真正申请内存的其实是 API。而 new malloc 是申请堆内存，new malloc 其实是在已申请的内存上面划分出一块虚拟内存。</p>\n<p>new 关键字本质也就是 malloc + 构造函数。malloc 的底层是通过 HeapAlloc 申请的，并没有进 0 环。</p>\n<h2 id=\"共享内存申请\"><a class=\"anchor\" href=\"#共享内存申请\">#</a> 共享内存申请</h2>\n<p>共享内存其实就是物理页共享使用，A 进程申请物理页并写入内容，B 进程可以读取。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>HANDLE <span class=\"token function\">CreateFileMapping</span><span class=\"token punctuation\">(</span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  HANDLE hFile<span class=\"token punctuation\">,</span>                       </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  LPSECURITY_ATTRIBUTES lpAttributes<span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  DWORD flProtect<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  DWORD dwMaximumSizeHigh<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  DWORD dwMaximumSizeLow<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  LPCTSTR lpName</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>参数介绍:</p>\n<ol>\n<li>文件映射。申请的物理页可以跟文件相映射，如果不需要文件只申请物理页则填 <code>INVALID_HANDLE_VALUE</code> 。</li>\n<li>SD 安全属性，每个内核对象都需要的安全属性。</li>\n<li>权限。你申请的这个物理页是可读的可写的还是可读写。</li>\n<li>申请内存的高 32 位。windows 为了支持 64 位操作系统，所以给了高低 32 位来保存地址， 如果是 32 位地址，则不需要，填 NULL 即可.</li>\n<li>低 32 位。你要申请的物理页内存的大小</li>\n<li>进程共享物理页的名字。如果希望这个物理页其他进程可以使用，则需要给一个名字。</li>\n</ol>\n<p>返回值：返回物理页句柄索引。</p>\n<p>有创建物理页 也有打开物理页 主要是其他进程使用。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>HANDLE <span class=\"token function\">OpenFileMapping</span><span class=\"token punctuation\">(</span>  DWORD dwDesiredAccess<span class=\"token punctuation\">,</span>  <span class=\"token comment\">// access mode</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  BOOL bInheritHandle<span class=\"token punctuation\">,</span>    <span class=\"token comment\">// inherit flag</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  LPCTSTR lpName          <span class=\"token comment\">// object name);</span></pre></td></tr></table></figure><p>当然如果其他进程使用一样可以使用 CreateFileMaping，只不过会返回文件对象已经存在的错误。</p>\n<h3 id=\"线性地址虚拟地址-关联物理页\"><a class=\"anchor\" href=\"#线性地址虚拟地址-关联物理页\">#</a> 线性地址 (虚拟地址) 关联物理页</h3>\n<p>我们还需要将这个物理页映射到线性地址。<br />\n需要的 API 如下</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>LPVOID <span class=\"token function\">MapViewOfFile</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  HANDLE hFileMappingObject<span class=\"token punctuation\">,</span>   <span class=\"token comment\">// 物理页句柄</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  DWORD dwDesiredAccess<span class=\"token punctuation\">,</span>       <span class=\"token comment\">// 线性地址访问权限。注意跟物理页最好一致，或者比物理页更低。</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  DWORD dwFileOffsetHigh<span class=\"token punctuation\">,</span>      <span class=\"token comment\">// 映射线性地址的偏移位置 高 32 位</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  DWORD dwFileOffsetLow<span class=\"token punctuation\">,</span>       <span class=\"token comment\">// 低 32 位</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  SIZE_T dwNumberOfBytesToMap  <span class=\"token comment\">// 内存映射的字节数</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"关闭映射\"><a class=\"anchor\" href=\"#关闭映射\">#</a> 关闭映射</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>BOOL WINAPI <span class=\"token function\">UnmapViewOfFile</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  _In_LPCVOID lpBaseAddress   <span class=\"token comment\">// 指定要解除映射的一个文件映射的基准地址。这个地址是早先用 MapViewOfFile 函数获得的</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>返回值 Bool，非零表示成功，零表示失败。可以通过 GetLastError () 获取错误代码。</p>\n<p>关闭物理页句柄用 <code>CloseHandle()</code></p>\n<h2 id=\"实例\"><a class=\"anchor\" href=\"#实例\">#</a> 实例</h2>\n<p>A 进程</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;Windows.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">WIN32_LEAN_AND_MEAN</span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MapFileName</span> <span class=\"token expression\">L</span><span class=\"token string\">\"共享内存\"</span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">M_Page</span> <span class=\"token expression\"><span class=\"token number\">0x1000</span></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>HANDLE g_hMapFile<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>LPVOID  g_lpBuff<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// 共享内存</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token comment\">// 获取内核对象 物理页 的句柄</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tg_hMapFile <span class=\"token operator\">=</span> <span class=\"token function\">CreateFileMapping</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\tINVALID_HANDLE_VALUE<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t<span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\tPAGE_READWRITE<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t<span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\tM_Page<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\tMapFileName</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\tg_lpBuff <span class=\"token operator\">=</span> <span class=\"token function\">MapViewOfFile</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\tg_hMapFile<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\tFILE_MAP_WRITE<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t<span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t<span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\tM_Page</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>PDWORD<span class=\"token punctuation\">)</span>g_lpBuff <span class=\"token operator\">=</span> <span class=\"token number\">0x12345678</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token function\">UnmapViewOfFile</span><span class=\"token punctuation\">(</span>g_lpBuff<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t<span class=\"token function\">CloseHandle</span><span class=\"token punctuation\">(</span>g_hMapFile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>B 进程</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;Windows.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">WIN32_LEAN_AND_MEAN</span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MapFileName</span> <span class=\"token expression\">L</span><span class=\"token string\">\"共享内存\"</span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">M_Page</span> <span class=\"token expression\"><span class=\"token number\">0x1000</span></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>HANDLE g_hMapFile<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>LPVOID  g_lpBuff<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// 共享内存</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token comment\">// 获取内核对象 物理页 的句柄</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tg_hMapFile <span class=\"token operator\">=</span> <span class=\"token function\">CreateFileMapping</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\tINVALID_HANDLE_VALUE<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t<span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\tPAGE_READWRITE<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t<span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\tM_Page<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\tMapFileName</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\tg_lpBuff <span class=\"token operator\">=</span> <span class=\"token function\">MapViewOfFile</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\tg_hMapFile<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\tFILE_MAP_WRITE<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t<span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t<span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\tM_Page</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>PDWORD<span class=\"token punctuation\">)</span>g_lpBuff<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token function\">UnmapViewOfFile</span><span class=\"token punctuation\">(</span>g_lpBuff<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t<span class=\"token function\">CloseHandle</span><span class=\"token punctuation\">(</span>g_hMapFile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>A 进程写入，B 进程访问。</p>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n",
            "tags": [
                "私有内存",
                "共享内存"
            ]
        }
    ]
}