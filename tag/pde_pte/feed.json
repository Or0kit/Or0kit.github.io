{
    "version": "https://jsonfeed.org/version/1",
    "title": "Or0kit • All posts by \"pde_pte\" tag",
    "description": "临渊羡鱼，不如退而结网",
    "home_page_url": "https://Or0kit.github.io",
    "items": [
        {
            "id": "https://or0kit.github.io/Bin/Core/WindowsXp/Protect-Mode/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%E2%80%94PDE-PTE/",
            "url": "https://or0kit.github.io/Bin/Core/WindowsXp/Protect-Mode/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%E2%80%94PDE-PTE/",
            "title": "保护模式—PDE_PTE",
            "date_published": "2021-08-25T08:51:04.000Z",
            "content_html": "<h1 id=\"10-10-12分页\"><a class=\"anchor\" href=\"#10-10-12分页\">#</a> 10-10-12 分页</h1>\n<blockquote>\n<p>一个物理页的大小为 4096 字节，即 2 的 12 次方，若要遍历整个物理页，则需要 12 个比特位<br />\n一个页表有 1024 个页表项，1024 等于 2 的十次方，即需要 10 个比特位<br />\n页目录表里有 1024 个页目录项，也需要 10 个比特位</p>\n</blockquote>\n<h1 id=\"cr3\"><a class=\"anchor\" href=\"#cr3\">#</a> CR3</h1>\n<blockquote>\n<p>在所有的寄存器中，只有 Cr3 存储的是物理地址，其它寄存器存的都是线性地址<br />\n Cr3 所存储的物理地址指向了一个页目录表（PDT）<br />\n在 Windows 中，一个页的大小通常为 4KB，即一个页可以存储 1024 个页目录表项（PDE）</p>\n</blockquote>\n<h1 id=\"pde与pte\"><a class=\"anchor\" href=\"#pde与pte\">#</a> PDE 与 PTE</h1>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<ul>\n<li><strong>PDE（页目录表项）</strong></li>\n</ul>\n<p>描述：</p>\n<blockquote>\n<p>页目录表（PDT）的每一项元素称为页目录表项（PDE）<br />\n每个页目录表项指向一个页表（PTT）<br />\n每个页表的大小为 4KB，即一个页表可以存储 1024 个页表项（PTE）</p>\n</blockquote>\n<ul>\n<li><strong>PTE（页表项）</strong></li>\n</ul>\n<p>描述：</p>\n<blockquote>\n<p>页表（PTT）的每一个元素称为页表项（PTE）<br />\n页表项（PTE）所指向的才是真正的物理页</p>\n</blockquote>\n<p>特征：</p>\n<ol>\n<li>PTE 可以指向一个物理页，也可以不指向物理页</li>\n<li>多个 PTE 可以指向同一个物理页</li>\n<li>一个 PTE 只能指向一个物理页</li>\n</ol>\n<h1 id=\"物理页的属性\"><a class=\"anchor\" href=\"#物理页的属性\">#</a> 物理页的属性</h1>\n<p>物理页的属性 = PDE 属性 &amp; PTE 属性</p>\n<p><img data-src=\"image002.png\" alt=\"\" /></p>\n<p><img data-src=\"image003.png\" alt=\"\" /></p>\n<p><code>P位</code> ：是否有效位<br />\n注意：当 PDE 或 PTE 中有一个的属性 P=0 时，物理页就是无效的</p>\n<p><code>R/W位</code> ：读写位<br />\n R/W=0：只读<br />\n R/W=1：可读可写</p>\n<p><code>U/S位</code> ：权限位<br />\n U/S=0：特权用户<br />\n U/S=1：普通用户</p>\n<p><code>PS位</code> ：PDE 特有<br />\n PS == PageSize<br />\nPS=1：PDE 直接指向物理页，低 22 位 = 页内偏移，偏移最大值为 4MB，俗称 &quot;大页&quot;<br />\nPS=0：PDE 指向 PTE</p>\n<p><code>A位</code> ：访问位<br />\n A=1：该 PDE/PTE 被访问过<br />\n A=0：该 PDE/PTE 未被访问过</p>\n<p><code>D位</code> ：脏位<br />\n D=1：该 PDE/PTE 被写过<br />\n D=0：该 PDE/PTE 未被写过</p>\n<p><em><strong>关于 G 位，PWT 位，PCD 位，学完控制寄存器域 TLB 才能讲。</strong></em></p>\n<h1 id=\"实验\"><a class=\"anchor\" href=\"#实验\">#</a> 实验</h1>\n<h2 id=\"修改us位访问高2g内存\"><a class=\"anchor\" href=\"#修改us位访问高2g内存\">#</a> 修改 U/S 位访问高 2G 内存</h2>\n<p>之前学习段的时候，我们可以通过调用门，中断门，任务门等方式将 CPL 提升到 0，从而可以读写高 2G 内存。学习了 U/S 位后，我们可以不提权也能访问高 2G，只需要将想访问的物理页对应的 PDE PTE 的 U/S 位改写为 1 即可。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token number\">0x8003f020</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> addr <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"addr Linear Address:%#010X\\n10-10-12: %x-%x-%x\\n\"</span><span class=\"token punctuation\">,</span>addr<span class=\"token punctuation\">,</span>addr<span class=\"token operator\">>></span><span class=\"token number\">22</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span>addr<span class=\"token operator\">>></span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span><span class=\"token number\">0x3FF</span><span class=\"token punctuation\">,</span>addr<span class=\"token operator\">&amp;</span><span class=\"token number\">0xFFF</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Read High 2G Memory %#010X:%#010X\\n\"</span><span class=\"token punctuation\">,</span>addr<span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>查看 PDE 和 PTE</p>\n<p><img data-src=\"image004.png\" alt=\"\" /></p>\n<p>修改 U/S 位并查看是否修改成功</p>\n<p><img data-src=\"image005.png\" alt=\"\" /></p>\n<p>成功读取高 2G 内存的值</p>\n<p><img data-src=\"image006.png\" alt=\"\" /></p>\n<h2 id=\"ps位验证\"><a class=\"anchor\" href=\"#ps位验证\">#</a> PS 位验证</h2>\n<p>随便找一个进程的 CR3，看一下</p>\n<p><img data-src=\"image007.png\" alt=\"\" /></p>\n<p>CR3: 143d3000<br />\n10-10-12:50-3d3-0</p>\n<h2 id=\"通过修改页表使代码能在0地址处读写\"><a class=\"anchor\" href=\"#通过修改页表使代码能在0地址处读写\">#</a> 通过修改页表使代码能在 0 地址处读写</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> <span class=\"token number\">0x0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">0x12345678</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> addr <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a VirtualAddress:%#010X\\n10-10-12:%x-%x-%x\\n\\n\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>a<span class=\"token operator\">>></span><span class=\"token number\">22</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>a<span class=\"token operator\">>></span><span class=\"token number\">12</span><span class=\"token operator\">&amp;</span><span class=\"token number\">0x3FF</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>a<span class=\"token operator\">&amp;</span><span class=\"token number\">0xFFF</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"addr VirtualAddress:%#010X\\n10-10-12:%x-%x-%x\\n\\n\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\taddr<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\taddr<span class=\"token operator\">>></span><span class=\"token number\">22</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t<span class=\"token punctuation\">(</span>addr<span class=\"token operator\">>></span><span class=\"token number\">12</span><span class=\"token operator\">&amp;</span><span class=\"token number\">0x3FF</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\taddr<span class=\"token operator\">&amp;</span><span class=\"token number\">0xFFF</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Write 0x0 Address Data 0x666 *p=%#010X\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>p<span class=\"token operator\">=</span><span class=\"token number\">0x666</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>查看程序的 CR3，找到 a 变量的物理地址。</p>\n<p><img data-src=\"image008.png\" alt=\"\" /></p>\n<p>更改 0 地址的 PTE，使 0 地址的 PDE 指向变量 a 的 PTE。</p>\n<p><img data-src=\"image009.png\" alt=\"\" /></p>\n<p>结果：</p>\n<p><img data-src=\"image010.png\" alt=\"\" /></p>\n<h2 id=\"通过修改物理页属性使字符串常量可修改\"><a class=\"anchor\" href=\"#通过修改物理页属性使字符串常量可修改\">#</a> 通过修改物理页属性使字符串常量可修改</h2>\n<p>懒得做了，修改一下 <code>R/w</code>  位就行了</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>str <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello World\"</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 众所周知，C 语言中字符串是不能直接修改的。</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"线性地址：%x\"</span><span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t\t\t<span class=\"token comment\">// 让程序执行到这里</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token comment\">// 修改只读变量</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tstr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'M'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"修改后的值：%s\\n\"</span><span class=\"token punctuation\">,</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"reference\"><a class=\"anchor\" href=\"#reference\">#</a> Reference</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0t3YW5zeS9hcnRpY2xlL2RldGFpbHMvMTA4OTE0Mzkz\">https://blog.csdn.net/Kwansy/article/details/108914393</span><br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxOTg4NDQ4L2FydGljbGUvZGV0YWlscy8xMDI2MjcyMzk=\">https://blog.csdn.net/qq_41988448/article/details/102627239</span></p>\n",
            "tags": [
                "PDE_PTE",
                "物理页"
            ]
        }
    ]
}