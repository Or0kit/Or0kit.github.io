{
    "version": "https://jsonfeed.org/version/1",
    "title": "Or0kit • All posts by \"x64\" tag",
    "description": "临渊羡鱼，不如退而结网",
    "home_page_url": "https://Or0kit.github.io",
    "items": [
        {
            "id": "https://or0kit.github.io/Bin/Assembly/x64%E6%B1%87%E7%BC%96%E5%AD%A6%E4%B9%A0/",
            "url": "https://or0kit.github.io/Bin/Assembly/x64%E6%B1%87%E7%BC%96%E5%AD%A6%E4%B9%A0/",
            "title": "x64汇编学习",
            "date_published": "2022-06-27T08:55:08.000Z",
            "content_html": "<h1 id=\"初学x64汇编\"><a class=\"anchor\" href=\"#初学x64汇编\">#</a> 初学 x64 汇编</h1>\n<p>要学习的 x64 汇编是  <code>AMD64</code>  与  <code>Intel64</code>  的合称。<br />\n最早是 Intel 实现了一套 64 位的指令集，但是不兼容之前的 32 位程序，后来 AMD 实现了一套兼容 32 位程序的 64 位指令集，后来的 64 位程序都按照 AMD 的标准实现了，Intel 也得支持这套指令集了。</p>\n<h1 id=\"寄存器\"><a class=\"anchor\" href=\"#寄存器\">#</a> 寄存器</h1>\n<p>在 16 位和 32 位的编程里，可以使用的通用寄存器是一样的，如下所示：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">8 位</th>\n<th style=\"text-align:left\">16 位</th>\n<th style=\"text-align:left\">32 位</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">al</td>\n<td style=\"text-align:left\">ax</td>\n<td style=\"text-align:left\">eax</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">cl</td>\n<td style=\"text-align:left\">cx</td>\n<td style=\"text-align:left\">ecx</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">dl</td>\n<td style=\"text-align:left\">dx</td>\n<td style=\"text-align:left\">edx</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">bl</td>\n<td style=\"text-align:left\">bx</td>\n<td style=\"text-align:left\">ebx</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ah</td>\n<td style=\"text-align:left\">sp</td>\n<td style=\"text-align:left\">esp</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ch</td>\n<td style=\"text-align:left\">bp</td>\n<td style=\"text-align:left\">ebp</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">dh</td>\n<td style=\"text-align:left\">si</td>\n<td style=\"text-align:left\">esi</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">bh</td>\n<td style=\"text-align:left\">di</td>\n<td style=\"text-align:left\">edi</td>\n</tr>\n</tbody>\n</table>\n<p>在 x64 体系里，在原来的 8 个通用寄存器的基础上新增了 8 个寄存器，并且原来的寄存器也得到了扩展。<br />\n在 64 位编程里可以使用的通用寄存器如下所示：</p>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<p>更直观一点来看：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">8 位</th>\n<th style=\"text-align:left\">16 位</th>\n<th style=\"text-align:left\">32 位</th>\n<th style=\"text-align:left\">64 位</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">al/ah</td>\n<td style=\"text-align:left\">ax</td>\n<td style=\"text-align:left\">eax</td>\n<td style=\"text-align:left\">rax</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">cl/ch</td>\n<td style=\"text-align:left\">cx</td>\n<td style=\"text-align:left\">ecx</td>\n<td style=\"text-align:left\">rcx</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">dl/dh</td>\n<td style=\"text-align:left\">dx</td>\n<td style=\"text-align:left\">edx</td>\n<td style=\"text-align:left\">rdx</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">bl/bh</td>\n<td style=\"text-align:left\">bx</td>\n<td style=\"text-align:left\">ebx</td>\n<td style=\"text-align:left\">rbx</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">spl</td>\n<td style=\"text-align:left\">sp</td>\n<td style=\"text-align:left\">esp</td>\n<td style=\"text-align:left\">rsp</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">bpl</td>\n<td style=\"text-align:left\">bp</td>\n<td style=\"text-align:left\">ebp</td>\n<td style=\"text-align:left\">rbp</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">sil</td>\n<td style=\"text-align:left\">si</td>\n<td style=\"text-align:left\">esi</td>\n<td style=\"text-align:left\">rsi</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">dil</td>\n<td style=\"text-align:left\">di</td>\n<td style=\"text-align:left\">edi</td>\n<td style=\"text-align:left\">rdi</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">r8b</td>\n<td style=\"text-align:left\">r8w</td>\n<td style=\"text-align:left\">r8d</td>\n<td style=\"text-align:left\">r8</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">r9b</td>\n<td style=\"text-align:left\">r9w</td>\n<td style=\"text-align:left\">r9d</td>\n<td style=\"text-align:left\">r9</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">r10b</td>\n<td style=\"text-align:left\">r10w</td>\n<td style=\"text-align:left\">r10d</td>\n<td style=\"text-align:left\">r10</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">r11b</td>\n<td style=\"text-align:left\">r11w</td>\n<td style=\"text-align:left\">r11d</td>\n<td style=\"text-align:left\">r11</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">r12b</td>\n<td style=\"text-align:left\">r12w</td>\n<td style=\"text-align:left\">r12d</td>\n<td style=\"text-align:left\">r12</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">r13b</td>\n<td style=\"text-align:left\">r13w</td>\n<td style=\"text-align:left\">r13d</td>\n<td style=\"text-align:left\">r13</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">r14b</td>\n<td style=\"text-align:left\">r14w</td>\n<td style=\"text-align:left\">r14d</td>\n<td style=\"text-align:left\">r14</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">r15b</td>\n<td style=\"text-align:left\">r15w</td>\n<td style=\"text-align:left\">r15d</td>\n<td style=\"text-align:left\">r15</td>\n</tr>\n</tbody>\n</table>\n<p>在 64 位编程里可以使用 20 个 8 位寄存器和 16 个 16 位、32 位以及 64 位寄存器，寄存器体系得到了完整的补充。</p>\n<p>所有的 16 个寄存器都可以分割出相应的 8 位、16 位或 32 位寄存器。<br />\n在 16 位编程和 32 位编程里， <code>sp</code> 、 <code>bp</code> 、 <code>si</code>  及 <code>di</code>  不能使用低 8 位。<br />\n在 64 位编程里，可以使用分割出的 <code>spl</code> 、 <code>bpl</code> 、 <code>sil</code>  及 <code>dil</code>  低 8 位寄存器。</p>\n<p>64 位的 r8~r15 寄存器分割出相对应的 8 位、16 位及 32 位寄存器形式为: <code>r8b~r15b</code> ,  <code>r8w~r15w</code> , 以及 <code>r8d~r15d</code> 。</p>\n<p>还有  <code>rip</code>  与  <code>rflags</code> ，64 位的 <code>rflags</code>  寄存器高 32 位为保留位，低 32 位与 32 位下的 <code>eflags</code>  寄存器一样。</p>\n<h1 id=\"虚拟地址空间\"><a class=\"anchor\" href=\"#虚拟地址空间\">#</a> 虚拟地址空间</h1>\n<p>在 x64 体系中使用了  <code>canonical</code>  地址形式，但在 x64 体系里只实现了 48 位的  <code>virtual address</code> , 高 16 位被用做符号扩展。</p>\n<p>这高 16 位要么全是 0，要么全是 1，这种形式的地址被称为  <code>canonical</code>  地址，如下所示：</p>\n<p><img data-src=\"image002.png\" alt=\"\" /></p>\n<p>与  <code>canonical</code>  地址形式相对的是  <code>non-canoncial</code>  地址形式，如下所示。在 64 位模式下  <code>non-canonical</code>  地址形式是不合法的。</p>\n<p><img data-src=\"image003.png\" alt=\"\" /></p>\n<p>在 64 位的线性地址空间里，</p>\n<ol>\n<li><code>0x00000000_00000000</code>  到  <code>0x00007FFF_FFFFFFFF</code>  是合法的  <code>canonical</code>  地址。</li>\n<li><code>0x00008000_00000000</code>  到  <code>0xFFFF7FFF_FFFFFFFF</code>  是非法的  <code>non-canonical</code>  地址。</li>\n<li><code>0xFFFF8000_00000000</code>  到  <code>0xFFFFFFFF_FFFFFFFF</code>  是合法的  <code>canonical</code>  地址。</li>\n</ol>\n<p>在 <code>non-canonical</code>  地址形式里，它们的符号扩展位出现了问题。</p>\n<p>看下面的地址：</p>\n<p><code>FFFF8010_bc001000</code> ：这是符合  <code>canonical-address</code>  的地址， MSB 是 bit47，值为 1。 而 bit63 ~ bit48 全是 1</p>\n<p><code>00007c80_b8102040</code> ：这是符合  <code>canonical-address</code>  的地址， MSB 是 bit47，值为 0。 而 bit63 ~ bit48 全是 0</p>\n<p>实质上， <code>canonical-address</code>  地址中 bit63 ~ bit48 是符号扩展位。  <code>bit47</code>  是 64 位地址中最高能表示的位（MSB）。</p>\n<h1 id=\"x64体系中需要注意的事情\"><a class=\"anchor\" href=\"#x64体系中需要注意的事情\">#</a> x64 体系中需要注意的事情</h1>\n<ol>\n<li><strong>对 32 位寄存器的写操作（包括运算结果），会对相应的 64 位寄存器的搞 32 位清零。</strong></li>\n</ol>\n<p>如下所示：</p>\n<p>这是执行  <code>mov eax, 1</code>  指令之前的  <code>rax</code>  寄存器</p>\n<p><img data-src=\"image004.png\" alt=\"\" /></p>\n<p>执行后  <code>rax</code>  寄存器中的值：</p>\n<p><img data-src=\"image005.png\" alt=\"\" /></p>\n<p>此举影响所有的 64 位寄存器。</p>\n<p>另一个例子：</p>\n<p>执行 sub eax,1 之前：</p>\n<p><img data-src=\"image006.png\" alt=\"\" /></p>\n<p>执行之后，只有低 32 位是对的：</p>\n<p><img data-src=\"image007.png\" alt=\"\" /></p>\n<p>还有  <code>xor eax,eax</code>  这个指令并不只是清零  <code>eax</code>  ,  <code>rax</code>  也会被清零。</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>33C0     | xor eax,eax</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>48:33C0  | xor rax,rax</pre></td></tr></table></figure><p>以上汇编代码的作用是一样的都会将 <code>rax</code>  寄存器清零，但生成的硬编码是不一样的，所以编译器一般想要清空  <code>rax</code>  寄存器就会生成  <code>xor eax,eax</code>  汇编代码。</p>\n<p>64 位编程中代码的函数的返回值  <code>return 0</code>  那么就会生成 <code>xor eax,eax</code>  汇编代码。</p>\n<ol start=\"2\">\n<li><strong>立即数的使用，优先使用 32 位扩展，64 位立即数指令较少。</strong></li>\n</ol>\n<p>当你在 x64dbg 中输入  <code>mov rax,1</code>  它会自动生成  <code>mov eax, 1</code>   如果数值较大的话就会使用 rax，编译器也会对这些语句进行优化，优先使用硬编码短的。</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>48:C7C0 FFFFFFFF           | mov rax,FFFFFFFFFFFFFFFF           |</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>48:B8 FFFFFFFFFFFFFFFF     | mov rax,FFFFFFFFFFFFFFFF           |</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>66:B8 0100                 | mov ax,1                           |</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>B0 01                      | mov al,1                           |</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>B8 01000000                | mov eax,1                          |</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>48:B8 8967452301000000     | mov rax,123456789                  |</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>48:B8 0100000000000000     | mov rax,1                          |</pre></td></tr></table></figure><p>64 位指令比较少，如  <code>push</code>  指令操作立即数，只能操作 32 位立即数。</p>\n<p><img data-src=\"image008.png\" alt=\"\" /></p>\n<p>好多指令都是不支持 8 字节的立即数。</p>\n<p>如果想要把 <code>0x123456789</code>  这样的立即数压入栈中就必须得分为两步：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>mov rax,0x123456789;</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>pus rax</pre></td></tr></table></figure><p>此外 x64 下还有其他的 nop 指令，如下所示：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>| 90                         | nop                                    |</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>| 0F1FFE                     | nop esi,edi                            |</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>| 0F1F1D 1D1222CC            | nop dword ptr ds:[7FF73A025174],ebx    |</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>| 0F1F11                     | nop dword ptr ds:[rcx],edx             |</pre></td></tr></table></figure><p><strong>与硬编码 0x90 不同，开头为 0x0F1F。</strong></p>\n<p>逻辑上这些汇编代码与 <code>nop</code>  指令没有任何区别。</p>\n<p>在我看的这个教程中称这些汇编代码的出现只是编译器为了字节对齐。</p>\n<ol start=\"3\">\n<li><strong>内存优先使用相对偏移寻址，直接寻址指令较少。</strong></li>\n</ol>\n<p>例如 mov 指令：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>00007FF76DE03F6C       | 48:8B05 01000000           | mov rax,qword ptr ds:[7FF76DE03F74]    |</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>00007FF76DE03F73       | 90                         | nop                                    |</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>00007FF76DE03F74       | 90                         | nop                                    |</pre></td></tr></table></figure><p>硬编码是  <code>48:8B05 + 4个字节相对地址偏移</code>  便是  <code>mov rax,qword ptr ds:[此指令地址加上此指令长度加上相对偏移]</code></p>\n<p><strong>需要注意的是：4 个字节相对地址偏移，因为有正负之分所以有效的寻址范围只有正负偏移 2GB</strong></p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>00007FF76DE03F5A       | 48:A1 0000000000000000     | mov rax,qword ptr ds:[0]               |</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>00007FF76DE03F64       | 48:8B0425 00000000         | mov rax,qword ptr ds:[0]               |</pre></td></tr></table></figure><p>这些是直接寻址的。</p>\n<p>例如 add 指令：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>00007FF76DE03F73       | 48:010425 00000000         | add qword ptr ds:[0],rax               |</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>00007FF76DE03F7B       | 48:0105 00000000           | add qword ptr ds:[7FF76DE03F82],rax    |</pre></td></tr></table></figure><p>如这两个 add 指令，都是只能操作 4 个字节的相对地址偏移。</p>\n<p>还有一件事</p>\n<p>我们编写一个 x64 的程序在 vs2019 中看其反汇编：</p>\n<p><img data-src=\"image009.png\" alt=\"\" /></p>\n<p>而在 IDA 中查看其反汇编：</p>\n<p><img data-src=\"image010.png\" alt=\"\" /></p>\n<p>发现其前面加了 cs 段前缀，这是 IDA 的一种错误，观察其硬编码岂可已发现，我们可以在 x64dbg 中实验一下：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>00007FF76DE03F82       | 48:C705 00000000 78563412        | mov qword ptr ds:[7FF76DE03F8D],12345678      |</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>00007FF76DE03F8D       | 2E48:C705 00000000 78563412      | mov qword ptr cs:[7FF76DE03F99],12345678      |</pre></td></tr></table></figure><p>也是可以发现如果是 cs 段的话前面要加上 <code>0x2E</code>  的硬编码前缀。</p>\n<p>那么 IDA 为什么会这么做呢？</p>\n<p>因为这个指令都是相对偏移寻址，而下一个指令是绝对地址偏移，是处于 PE 结构中的代码段的，所以 IDA 识别成了 cs 段。</p>\n<ol start=\"4\">\n<li><strong>各种 jmp 比较</strong></li>\n</ol>\n<p>在 x64 地址空间中，如果加载一个 dll，那么想让程序跳转过去，不一定能实现，因为地址之间相距的大小可能超过了 2GB,</p>\n<p><img data-src=\"image011.png\" alt=\"\" /></p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>00007FF76DE03F99       | EB 00                            | jmp notepad.7FF76DE03F9B                      |</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>00007FF76DE03F9B       | E9 00000000                      | jmp notepad.7FF76DE03FA0                      |</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>00007FF76DE03FA0       | FF25 00000000                    | jmp qword ptr ds:[7FF76DE03FA6]               |</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>00007FF76DE03FA6       | FF2425 00000000                  | jmp qword ptr ds:[0]                          |</pre></td></tr></table></figure><ol start=\"5\">\n<li><strong>应有：hook 的指令选择</strong></li>\n</ol>\n<p>上面说了如果地址空间超过 4GB 大小，一般会这样进行跳转：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>00007FF76DE03FAD       | 48:B8 8967452301000000           | mov rax,123456789                             |</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>00007FF76DE03FB7       | FFE0                             | jmp rax                                       |</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>&#x2F;&#x2F; 或者这样</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>00007FF76DE03FBA       | 48:B8 8967452301000000           | mov rax,123456789                             |</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>00007FF76DE03FC4       | 50                               | push rax                                      |</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>00007FF76DE03FC5       | C3                               | ret                                           |</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>&#x2F;&#x2F; 最好是这样，既保存了 rax 寄存器的值，又可以跳转（13 个字节）</pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>00007FF76DE03FC7       | 50                               | push rax                                      |</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>00007FF76DE03FC8       | 48:B8 8967452301000000           | mov rax,123456789                             |</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>00007FF76DE03FD2       | C3                               | ret                                           |</pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>&#x2F;&#x2F; 21 个字节 </pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>00007FF76DE03FD4       | 48:83EC 08                       | sub rsp,8                                     |</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>00007FF76DE03FD8       | C70424 78563412                  | mov dword ptr ss:[rsp],12345678               |</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>00007FF76DE03FDF       | C74424 04 BC9A0000               | mov dword ptr ss:[rsp+4],9ABC                 |</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>00007FF76DE03FE7       | C3                               | ret                                           |</pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>&#x2F;&#x2F; 13 个字节</pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>00007FF76DE03FE9       | 68 78563412                      | push 12345678                                 |</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>00007FF76DE03FEE       | C74424 04 BC9A0000               | mov dword ptr ss:[rsp+4],9ABC                 |</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>00007FF76DE03FF6       | C3                               | ret                                           |</pre></td></tr></table></figure><p>x64 汇编没有类似  <code>pushad</code>  的保存寄存器的指令，想要保存寄存器只能一个一个保存。</p>\n<h1 id=\"调用约定\"><a class=\"anchor\" href=\"#调用约定\">#</a> 调用约定</h1>\n<p>强调一点：<strong>我们这次所学的调用约定只是微软编译器的习惯用法，并不是一种强制的东西，如果我们有一个函数只是自己调用的话，那么我们怎么设计它都可以的，只要堆栈平衡。</strong></p>\n<p>CPU 层面并没有限制调用约定，只是微软编译器生成的函数，通常是这个规则。这是微软优化好的，如果我们有更好的，也可以自己设定函数约定。</p>\n<p>微软中的函数也有这种情况，如果一个函数只被另一个函数调用，那么这两个函数之间的调用约定也可能被简化。</p>\n<hr />\n<hr />\n<hr />\n<h2 id=\"x64调用约定\"><a class=\"anchor\" href=\"#x64调用约定\">#</a> x64 调用约定</h2>\n<p>在 32 位编程中有 3 种调用约定  <code>__cdecl</code> ,   <code>__stdcall</code> ,  <code>__fastcall</code> ，而在 64 位编程中只有一种调用约定，为了兼容 32 位的代码这三种调用约定在 64 位编程中都失效了，例如系统 API 的头文件中的一般会有  <code>WINAPI</code>  这个调用约定，这是一个宏，其本质是 <code>__stdcall</code> ，所以编译器忽略了，写不写都一样。</p>\n<p>接下来我们从汇编的角度一步一步来了解 x64 的调用约定。</p>\n<ol>\n<li>调用方<strong>分配</strong>和<strong>清理</strong>参数所用的栈空间（外平栈）</li>\n<li>前 4 个参数使用  <code>rcx</code>   <code>rdx</code>   <code>r8</code>   <code>r9</code>  传递</li>\n<li>即使是寄存器传参，也要分配参数栈空间</li>\n<li>对于不定长参数，调用前至少分配 4 个参数</li>\n<li>易变寄存器有：  <code>rax</code>   <code>rcx</code>   <code>rdx</code>   <code>r8</code>   <code>r9</code>   <code>r10</code>   <code>r11</code> 。  <code>push</code>   <code>pop</code>  指令仅用来保存非易变寄存器，其他栈指针操作显式写寄存器  <code>rsp</code>  实现</li>\n<li>进入  <code>call</code>  之前  <code>rsp</code>  满足  <code>0x10</code>  字节对齐</li>\n<li>通常不适用  <code>rbp</code>  寻址栈内存，所以  <code>rsp</code>  在函数帧中尽量保持稳定（一次性分配局部变量和参数空间）</li>\n</ol>\n<h2 id=\"在cc中调用汇编\"><a class=\"anchor\" href=\"#在cc中调用汇编\">#</a> 在 C/C++ 中调用汇编</h2>\n<p>在 vs2019 中创建一个 cpp 文件和 asm 文件：</p>\n<p><img data-src=\"image012.png\" alt=\"\" /></p>\n<p>我们还要对 asm 文件做一些设置：</p>\n<p>对其右键点击属性：</p>\n<p><img data-src=\"image013.png\" alt=\"\" /></p>\n<p>然后这样设置；</p>\n<p><img data-src=\"image014.png\" alt=\"\" /></p>\n<p>点击应用后会出来自定义生成工具的一些设置，设置命令行编译以及输出，连接对象也要选择是：</p>\n<p><img data-src=\"image015.png\" alt=\"\" /></p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>命令行编译：ml64 &#x2F;Fo $(IntDir)%(fileName).obj&#x2F;c %(fileName).asm</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>输出：$(IntDir)%(fileName).obj</pre></td></tr></table></figure><p>此时我们的 asm 就可以参与生成了</p>\n<h2 id=\"实验验证\"><a class=\"anchor\" href=\"#实验验证\">#</a> 实验验证</h2>\n<p>前两条都很好理解，接下来亲自实验以代码来验证一下上面所说的 7 条约定。</p>\n<h3 id=\"验证第三条\"><a class=\"anchor\" href=\"#验证第三条\">#</a> 验证第三条</h3>\n<p>在汇编中写下如下代码：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>func Prot</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>.code</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>asm_fun PROC</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tmov rcx,1;</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tcall func;</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tret</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>asm_fun ENDP\t</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>END</pre></td></tr></table></figure><p>在汇编代码中我们调用函数之前没有去平衡堆栈。</p>\n<p>在 cpp 文件中写下如下代码：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;Windows.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token string\">\"C\"</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">void</span> __cdecl <span class=\"token function\">asm_fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span>ULONG64 a1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a1: %p\\n\"</span><span class=\"token punctuation\">,</span> a1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token function\">asm_fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>即使是用寄存器传参还是会报错：</p>\n<p><img data-src=\"image016.png\" alt=\"\" /></p>\n<p>我们可以直接在反汇编中查看原因：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>10:     void func(ULONG64 a1)</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    11:     &#123;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>00007FF67EB518F0  mov         qword ptr [rsp+8],rcx  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>00007FF67EB518F5  push        rbp  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>00007FF67EB518F6  push        rdi  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>00007FF67EB518F7  sub         rsp,0E8h  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>00007FF67EB518FE  lea         rbp,[rsp+20h]  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    12:         printf(&quot;a1: %p\\n&quot;, a1);</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>00007FF67EB51903  mov         rdx,qword ptr [a1]  </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>00007FF67EB5190A  lea         rcx,[string &quot;a1: %p\\n&quot; (07FF67EB59C28h)]  </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>00007FF67EB51911  call        printf (07FF67EB51190h)</pre></td></tr></table></figure><p><strong>可以发现调用函数后，会在函数中把寄存器传参的值再取出来放到栈中，而我们没有在栈外平衡堆栈，所以这里把 rcx 里的值也就是我们的参数放到了 rsp+8 中，而这个值也就是函数 ret 返回的地址，所以程序会报错。</strong></p>\n<p>所以我们还是要为其分配栈空间，汇编代码如下：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>func Prot</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>.code</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>asm_fun PROC</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tmov rcx,1;</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  sub rsp ,8h;</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tcall func;</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  add rsp, 8h;</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tret</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>asm_fun ENDP\t</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>END</pre></td></tr></table></figure><p>这样就没有错误了。</p>\n<p>当调用的函数有 4 个以上的参数时：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;Windows.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token string\">\"C\"</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">void</span> __cdecl <span class=\"token function\">asm_fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span>ULONG64 a1<span class=\"token punctuation\">,</span> ULONG64 a2<span class=\"token punctuation\">,</span> ULONG64 a3<span class=\"token punctuation\">,</span> ULONG64 a4<span class=\"token punctuation\">,</span> ULONG64 a5<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a1: %p\\n\"</span><span class=\"token punctuation\">,</span> a1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a2: %p\\n\"</span><span class=\"token punctuation\">,</span> a2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a3: %p\\n\"</span><span class=\"token punctuation\">,</span> a3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a4: %p\\n\"</span><span class=\"token punctuation\">,</span> a4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a5: %p\\n\"</span><span class=\"token punctuation\">,</span> a5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token function\">asm_fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>汇编代码中的平衡栈的操作如下：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>func Prot</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>.code</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>asm_fun PROC</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tmov rcx,1;\t</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tmov rdx,2;</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tmov r8,3;</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tmov r9,4;</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tpush 5;</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tsub rsp ,20h;</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\tcall func;</pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tadd rsp,28h;</pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tret</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>asm_fun ENDP\t</pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>END</pre></td></tr></table></figure><p>原因是我们的栈空间：</p>\n<p>这是我们执行完 call 指令后，进入到函数中时的栈空间结构图：</p>\n<p><img data-src=\"image017.png\" alt=\"\" /></p>\n<p><strong>在上面的汇编代码中，我们先用寄存器传递了 4 个参数，然后执行了 push 指令向栈中压入了一个值 5，push 指令执行完后 rsp+8 指向这个 5，然后我们把 rsp 减去 0x20, 既腾出了预留给寄存器传参用的空间，然后执行了 call 指令，函数的返回地址压入了栈中，此时栈顶指向了函数的返回地址。</strong></p>\n<h3 id=\"验证第四条\"><a class=\"anchor\" href=\"#验证第四条\">#</a> 验证第四条</h3>\n<p>有不定长参数的函数如： <code>printf</code></p>\n<p>我们可以更进其反汇编 c 查看一下：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>00007FF6C8C618B0 48 89 4C 24 08       mov         qword ptr [rsp+8],rcx  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>00007FF6C8C618B5 48 89 54 24 10       mov         qword ptr [rsp+10h],rdx  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>00007FF6C8C618BA 4C 89 44 24 18       mov         qword ptr [rsp+18h],r8  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>00007FF6C8C618BF 4C 89 4C 24 20       mov         qword ptr [rsp+20h],r9</pre></td></tr></table></figure><p>这是函数开头，可以看到函数是直接使用了编译器传参用的默认栈空间。</p>\n<h3 id=\"验证第五条\"><a class=\"anchor\" href=\"#验证第五条\">#</a> 验证第五条</h3>\n<p>知道了什么是易变寄存器，接下来验证一下第六条： <code>push</code>   <code>pop</code>  指令仅用来保存非易变寄存器，其他栈指针操作显式写寄存器  <code>rsp</code>  实现。</p>\n<p>对于这个约定，我们也可以查看用微软编译器生成代码的反汇编，查看其是否遵守这个约定。</p>\n<p><img data-src=\"image018.png\" alt=\"\" /></p>\n<p>这是我在 IDA 中搜索的 push 指令，可以发现 <code>push</code>  指令并没有操作易变寄存器，都是用来保存非易变寄存器的。</p>\n<p>也并没有我们上面汇编代码中的  <code>push 5</code>  这个指令，那么我们要如何写呢？</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>option casemap:none</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>func Proto</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>.code</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>asm_fun PROC</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tmov rcx,1;\t</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tmov rdx,2;</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tmov r8,3;</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tmov r9,4;</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tsub rsp ,28h;</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\tmov qword ptr [rsp+20h],5;</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tcall func;</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tadd rsp,28h;</pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tret</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>asm_fun ENDP\t</pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>END</pre></td></tr></table></figure><p><code>push 5</code>  指令变成了 <code>\tsub rsp ,28h;</code>  和\t <code>mov qword ptr [rsp+20h],5;</code>  两句指令。</p>\n<p>其实写之前可以编写一个程序去查看一下微软编译器会如何去做，我们编写一个 4 个以上参数的函数，然后看一下其反汇编：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>20: int main()</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    21: &#123;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>0000000140011983  sub         rsp,0F8h  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>000000014001198A  lea         rbp,[rsp+30h]  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    22:     func(1,2,3,4,5);</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>000000014001198F  mov         qword ptr [rsp+20h],5  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>0000000140011998  mov         r9d,4  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>000000014001199E  mov         r8d,3  </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>00000001400119A4  mov         edx,2  </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>00000001400119A9  mov         ecx,1  </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>00000001400119AE  call        func (014001119Fh)</pre></td></tr></table></figure><p>可以看到我们的做法和编译器的差不多一样了。</p>\n<h3 id=\"验证第七条\"><a class=\"anchor\" href=\"#验证第七条\">#</a> 验证第七条</h3>\n<p>通常不适用  <code>rbp</code>  寻址栈内存，所以  <code>rsp</code>  在函数帧中尽量保持稳定（一次性分配局部变量和参数空间）</p>\n<p>想要理解这句话我们需要先写一段汇编代码：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>option casemap:none</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>func Proto</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>printf proto\t</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>.data</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>pStr DB &#39;This is asm_fun&#39;, 0AH,00H</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>.code</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>asm_fun PROC</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tlea rcx,[pStr];</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tsub rsp,20h; printf 函数是可变长参数，所以要分配 0x20 栈空间</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tcall printf;</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\tadd rsp,20h;</pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tmov rcx,1;\t</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tmov rdx,2;</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tmov r8,3;</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\tmov r9,4;</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\tsub rsp ,28h;</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\tmov qword ptr [rsp+20h],5;</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\tcall func;</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\tadd rsp,28h;</pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\tret</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>asm_fun ENDP\t</pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>END</pre></td></tr></table></figure><p>这段汇编代码很多简单就是分别调用了两个函数，分别平衡了堆栈。<br />\n这样来回移动 <code>rsp</code>  显然是不合理的，会影响效率的，所以我们可以一次性分配局部变量和参数空间。</p>\n<p>上面的汇编代码可以更改为：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>option casemap:none</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>func Proto</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>printf proto\t</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>.data</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>pStr DB &#39;This is asm_fun&#39;, 0AH,00H</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>.code</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>asm_fun PROC</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tlea rcx,[pStr];\t</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tsub rsp ,28h;</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tcall printf;</pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tmov rcx,1;\t</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tmov rdx,2;</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tmov r8,3;</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tmov r9,4;</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\tmov qword ptr [rsp+20h],5;</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\tcall func;</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\tadd rsp,28h;</pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\tret</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>asm_fun ENDP\t</pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>END</pre></td></tr></table></figure><p>运行一样没有问题，并且可以观察一下编译器生成的汇编代码是否都是这样一次性分配好栈空间的（是的）。</p>\n<p>也因此我们无法在函数外部通过对 <code>rsp</code>  的加减来分析函数的参数个数的，具体得进入函数中取看。</p>\n<h3 id=\"验证第六条\"><a class=\"anchor\" href=\"#验证第六条\">#</a> 验证第六条</h3>\n<h1 id=\"seh\"><a class=\"anchor\" href=\"#seh\">#</a> SEH</h1>\n",
            "tags": [
                "x64"
            ]
        }
    ]
}