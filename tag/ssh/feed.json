{
    "version": "https://jsonfeed.org/version/1",
    "title": "Or0kit • All posts by \"ssh\" tag",
    "description": "临渊羡鱼，不如退而结网",
    "home_page_url": "https://Or0kit.github.io",
    "items": [
        {
            "id": "https://or0kit.github.io/Programming/Python/BHP%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%88%E4%B8%89%EF%BC%89-SSH%E4%B8%8ESSH%E9%9A%A7%E9%81%93/",
            "url": "https://or0kit.github.io/Programming/Python/BHP%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%88%E4%B8%89%EF%BC%89-SSH%E4%B8%8ESSH%E9%9A%A7%E9%81%93/",
            "title": "BHP第二章（三）-SSH与SSH隧道",
            "date_published": "2021-01-27T15:43:48.000Z",
            "content_html": "<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<p>通过 python 打造自己的 SSH (Secure Shell)。</p>\n<h1 id=\"通过paramiko使用ssh\"><a class=\"anchor\" href=\"#通过paramiko使用ssh\">#</a> 通过 paramiko 使用 SSH</h1>\n<h2 id=\"例子\"><a class=\"anchor\" href=\"#例子\">#</a> 例子</h2>\n<p>paramiko 是第三方库，要用 pip 安装。 <code>pip install paramiko</code></p>\n<p>在 python 的世界里，可以使用原始套接字和一些加密函数创建自己的 SSH 客户端或者服务端。但 python 中也有现成模块，使用 paramiko 库中的 PyCrypto 能让我们轻松使用 SSH2 协议</p>\n<p>在示例中，我们首先需要引入 <code>paramiko</code>  库，然后使用 <code>SSHClient()</code>  方法实例化对象，然后使用 <code>load_host_key()</code>  方法密钥认证的方式连接服务器，这里让实验可视化使用 <code>connect()</code>  方法以明文密码的方式连接服务器，连接服务器之前可以使用 <code>set_missing_host_key_policy()</code>  设置对于服务器密钥的策略，使用 <code>AutoAddPolicy()</code>  设置策略为自动添加服务器密钥，然后使用 <code>get_transport()</code>  与 <code>open_session()</code>  方法来得到 ssh 加密通道和打开线程，运用 if 语句与 acitve 属性判断线程是否存活，如果存活，使用 <code>exec_command()</code>  来执行我们想要执行的命令，通过 <code>recv()</code>  方法将命令在服务器执行后的结果返回给我们，这里也需要注意编码问题</p>\n<p><span class=\"label\">Code</span></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> paramiko</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">loging_shh</span><span class=\"token punctuation\">(</span>ip<span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">,</span> passwd<span class=\"token punctuation\">,</span> command<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    client <span class=\"token operator\">=</span> paramiko<span class=\"token punctuation\">.</span>SSHClient<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\"># client.load_host_keys('/root/.ssh/konw_hosts')</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    client<span class=\"token punctuation\">.</span>set_missing_host_key_policy<span class=\"token punctuation\">(</span>paramiko<span class=\"token punctuation\">.</span>AutoAddPolicy<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    client<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span>ip<span class=\"token punctuation\">,</span> username<span class=\"token operator\">=</span>user<span class=\"token punctuation\">,</span> password<span class=\"token operator\">=</span>passwd<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    ssh_session <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span>get_transport<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>open_session<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">if</span> ssh_session<span class=\"token punctuation\">.</span>active<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        ssh_session<span class=\"token punctuation\">.</span>exec_command<span class=\"token punctuation\">(</span>command<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>ssh_session<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    loging_shh<span class=\"token punctuation\">(</span><span class=\"token string\">'192.168.199.128'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'root'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'root'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'id'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>运行程序后得到了服务器执行命令后的结果<br />\n<img data-src=\"image001.png\" alt=\"\" /></p>\n<h2 id=\"编写返回命令的ssh\"><a class=\"anchor\" href=\"#编写返回命令的ssh\">#</a> 编写返回命令的 SSH</h2>\n<p>通常情况下，可以使用 SSH 客户端连接 SSH 服务器，但 Windows 本身不一定装有 SSH 服务端，所以我们需要反向将命令从 SSH 服务端发送给 SSH 客户端。（即客户端控制服务端）</p>\n<p><span class=\"label\">Code</span></p>\n<pre><code class=\"language-python\">\n\n</code></pre>\n",
            "tags": [
                "SSH隧道",
                "python",
                "SSH"
            ]
        }
    ]
}