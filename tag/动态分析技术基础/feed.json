{
    "version": "https://jsonfeed.org/version/1",
    "title": "Or0kit • All posts by \"动态分析技术基础\" tag",
    "description": "临渊羡鱼，不如退而结网",
    "home_page_url": "https://Or0kit.github.io",
    "items": [
        {
            "id": "https://or0kit.github.io/Bin/MalwareAnalysis/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E7%AC%AC03%E7%AB%A0/",
            "url": "https://or0kit.github.io/Bin/MalwareAnalysis/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E7%AC%AC03%E7%AB%A0/",
            "title": "恶意代码分析实战-第03章动态分析技术基础",
            "date_published": "2021-11-30T12:26:59.000Z",
            "content_html": "<h1 id=\"动态分析技术基础\"><a class=\"anchor\" href=\"#动态分析技术基础\">#</a> 动态分析技术基础</h1>\n<p>动态分析就是运行恶意代码之后进行检查的过程。</p>\n<p>动态分析是恶意代码分析流程的第二步，一般在静态分析进入死胡同时进行，比如恶意代码进行了混淆，或者分析师已经穷尽了可用的静态分析技术。动态分析技术包括在恶意代码运行时时刻进行监控，以及在恶意代码运行之后来检查系统情况。</p>\n<p>与静态分析技术不同，动态分析技术能让你观察到恶意代码的真实功能，<strong>一个行为存在于二进制程序中，并不意味着它就会被执行。</strong></p>\n<p>动态分析也是一种识别恶意代码功能的有效方法。例如你要分析的恶意代码是键盘记录程序，动态分析技术能让你在系统上找到键盘记录的日志文件，发现它的各种记录，追踪它将技术发送到哪里了，等等。这种深刻的洞察力是静态分析基础技术很那获得的。</p>\n<p>虽然动态分析技术非常强大，<strong>但它会让你的网络和系统处于危险之中</strong>。</p>\n<p>动态分析技术也有着它们的局限性，一个恶意代码在执行时不是所有代码都会被执行到的。例如，在一个需要参数命令行的恶意代码，每一个参数都会执行不同的程序功能，如果你不知道所有的命令行选项，你就不能动态分析出所有程序功能。这时就要利用更为高级的动态分析技术或者静态分析技术了。</p>\n<h2 id=\"沙箱简便但粗糙的方法\"><a class=\"anchor\" href=\"#沙箱简便但粗糙的方法\">#</a> 沙箱：简便但粗糙的方法</h2>\n<p>沙箱包括一个虚拟环境，通过某种方式模拟网络服务，以确保被测试的软件或恶意代码能正常执行。</p>\n",
            "tags": [
                "动态分析技术基础"
            ]
        }
    ]
}