<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>Or0kit • Posts by &#34;utf-8&#34; tag</title>
        <link>https://Or0kit.github.io</link>
        <description>临渊羡鱼，不如退而结网</description>
        <language>zh-CN</language>
        <pubDate>Wed, 09 Dec 2020 20:24:51 +0800</pubDate>
        <lastBuildDate>Wed, 09 Dec 2020 20:24:51 +0800</lastBuildDate>
        <category>Algolia</category>
        <category>Drozer</category>
        <category>同义词替换</category>
        <category>xpath</category>
        <category>win32api</category>
        <category>WOW64</category>
        <category>windows消息机制</category>
        <category>虚拟内存</category>
        <category>jsDelivr</category>
        <category>First blog</category>
        <category>markdown 学习</category>
        <category>Android</category>
        <category>替换密钥</category>
        <category>数论基础</category>
        <category>ADB</category>
        <category>雷电模拟器</category>
        <category>Hadoop</category>
        <category>IDA</category>
        <category>Windows逆向</category>
        <category>SSH隧道</category>
        <category>url</category>
        <category>http</category>
        <category>应急响应</category>
        <category>Nginx</category>
        <category>Linux</category>
        <category>CentOS7配置vsftp</category>
        <category>Psad</category>
        <category>fwsnort</category>
        <category>x86汇编指令</category>
        <category>动态分析技术基础</category>
        <category>静态分析基础</category>
        <category>逆向</category>
        <category>IDA学习</category>
        <category>恶意代码分析实战入门</category>
        <category>加壳</category>
        <category>脱壳</category>
        <category>C++壳</category>
        <category>ESP寻址</category>
        <category>定位Win32窗口回调函数</category>
        <category>HOOK攻防</category>
        <category>瞬时HOOK过检测</category>
        <category>INLINE-HOOK</category>
        <category>IAT HOOK</category>
        <category>INLINE HOOK</category>
        <category>进程监控</category>
        <category>模块隐藏</category>
        <category>进程通信</category>
        <category>tlhelp32.h</category>
        <category>进程遍历</category>
        <category>模块遍历</category>
        <category>外挂原理</category>
        <category>DLL注入之进程间通信</category>
        <category>TEB</category>
        <category>PEB</category>
        <category>R3层断链</category>
        <category>Win临界区</category>
        <category>Win事件</category>
        <category>线程同步</category>
        <category>Win互斥体</category>
        <category>内存映射文件</category>
        <category>内存映射共享</category>
        <category>写拷贝</category>
        <category>Win子窗口控件</category>
        <category>win32文件函数</category>
        <category>代码注入</category>
        <category>窗口程序</category>
        <category>消息机制</category>
        <category>消息类型</category>
        <category>私有内存</category>
        <category>共享内存</category>
        <category>设备对象</category>
        <category>DC设备上下文</category>
        <category>图形对象</category>
        <category>创建线程</category>
        <category>线程控制</category>
        <category>线程相关API</category>
        <category>线程上下文</category>
        <category>CONTEXT结构体</category>
        <category>物理内存</category>
        <category>Windows进程</category>
        <category>句柄表</category>
        <category>远程线程函数</category>
        <category>远程线程</category>
        <category>DLL注入</category>
        <category>DLL注入相关函数</category>
        <category>WinMain函数</category>
        <category>调用约定</category>
        <category>我的GetProcAddress</category>
        <category>资源文件</category>
        <category>消息断点</category>
        <category>PE课后作业</category>
        <category>通用控件</category>
        <category>WM_NOTIFY消息类型</category>
        <category>MFC</category>
        <category>PE查看器</category>
        <category>RVA与FOA</category>
        <category>PE结构</category>
        <category>DOS头属性说明</category>
        <category>标准PE头属性说明</category>
        <category>扩展PE头属性说明</category>
        <category>节表属性说明</category>
        <category>空白区添加代码</category>
        <category>合并节</category>
        <category>导入表</category>
        <category>注入</category>
        <category>导入表注入</category>
        <category>导出表</category>
        <category>扩大节</category>
        <category>新增节</category>
        <category>移动NT头</category>
        <category>移动导出表</category>
        <category>移动重定位表</category>
        <category>重定位表</category>
        <category>静态链接库</category>
        <category>动态链接库</category>
        <category>句柄</category>
        <category>CobaltStrike</category>
        <category>RedTeam</category>
        <category>Apeache</category>
        <category>php</category>
        <category>Nmap</category>
        <category>guestbook</category>
        <category>SQLmap</category>
        <category>apache</category>
        <category>log</category>
        <category>mysql主键</category>
        <category>CSRF</category>
        <category>SSRF</category>
        <category>业务逻辑漏洞</category>
        <category>xss</category>
        <category>webshell流量特征</category>
        <category>虚拟网卡</category>
        <category>button</category>
        <category>单选框</category>
        <category>复选框件</category>
        <category>Edit</category>
        <category>Combo Box</category>
        <category>Tab</category>
        <category>ListCtrl</category>
        <category>MFC的本质</category>
        <category>MFC的层次结构图</category>
        <category>手动创建一个MFC程序</category>
        <category>MFC的初始化过程</category>
        <category>MFC运行时类型识别</category>
        <category>关键字static</category>
        <category>关键字const</category>
        <category>MFC动态创建</category>
        <category>MFC消息映射</category>
        <category>结构体AFX_MSGMAP_ENTRY</category>
        <category>结构体AFX_MSGM</category>
        <category>MFC的三大类消息</category>
        <category>数据传输</category>
        <category>ini文件的读写</category>
        <category>python</category>
        <category>SSH</category>
        <category>python文件读取</category>
        <category>数据分析</category>
        <category>socket</category>
        <category>数据库编程</category>
        <category>python内置属性</category>
        <category>multiprocessing</category>
        <category>threading</category>
        <category>scrapy</category>
        <category>测试</category>
        <category>BHP</category>
        <category>Python的import功能</category>
        <category>木马</category>
        <category>非可变序列算法</category>
        <category>可变序列算法</category>
        <category>排序算法</category>
        <category>迭代器</category>
        <category>使用自定义对象</category>
        <category>0环与3环的通信（常规方法）</category>
        <category>内核空间</category>
        <category>内核模块</category>
        <category>遍历内核模块</category>
        <category>定位未导出函数PspTiminateProcess</category>
        <category>内核编程基础</category>
        <category>ANSI_STRING</category>
        <category>UNICODE_STRING</category>
        <category>内核内存</category>
        <category>上下文环境</category>
        <category>中断请求级别</category>
        <category>链表</category>
        <category>自旋锁</category>
        <category>注册表</category>
        <category>地址空间</category>
        <category>文件操作</category>
        <category>线程与事件</category>
        <category>内核重载</category>
        <category>配置VS2019+WDK10</category>
        <category>第一个驱动程序</category>
        <category>驱动调试</category>
        <category>调试驱动程序</category>
        <category>OpenSCManager</category>
        <category>CreateService</category>
        <category>APC的本质</category>
        <category>APC的备用队列</category>
        <category>线性地址的管理</category>
        <category>VAD树</category>
        <category>_MMVAD</category>
        <category>_MMVAD_FLAGS</category>
        <category>共享物理页</category>
        <category>共享文件</category>
        <category>LoadLibrary的本质</category>
        <category>VirtualAlloc</category>
        <category>MEM_COMMIT与MEM_RESERVE</category>
        <category>malloc</category>
        <category>堆内存</category>
        <category>栈内存</category>
        <category>全局区内存</category>
        <category>MmAddPhysicalMemoryEx</category>
        <category>缺页异常</category>
        <category>消息队列</category>
        <category>PsConvertToGuiThread</category>
        <category>win32k.sys</category>
        <category>GUI线程</category>
        <category>窗口程序的创建</category>
        <category>消息循环</category>
        <category>临界区</category>
        <category>KPCR结构体</category>
        <category>模拟线程切换</category>
        <category>模拟挂起与恢复函数</category>
        <category>等待链表</category>
        <category>调度链表</category>
        <category>ETHREAD</category>
        <category>KTHREAD</category>
        <category>进程的创建</category>
        <category>获取当前进程</category>
        <category>EPROCESS</category>
        <category>KPROCESS</category>
        <category>2-9-9-12分页</category>
        <category>PAE</category>
        <category>PDPTE</category>
        <category>PDE</category>
        <category>PTE</category>
        <category>XD标志位</category>
        <category>逆向分析MmIsAddressValid函数(2-9-9-12)</category>
        <category>TLB</category>
        <category>INVLPG指令</category>
        <category>全局页</category>
        <category>ShadowWalker</category>
        <category>PWT</category>
        <category>PDT</category>
        <category>CPU缓存</category>
        <category>中断</category>
        <category>异常</category>
        <category>CLI指令</category>
        <category>STI指令</category>
        <category>INT2</category>
        <category>INT8</category>
        <category>中断门描述符</category>
        <category>IDT</category>
        <category>提权</category>
        <category>跨段跳转流程</category>
        <category>JMP FAR指令</category>
        <category>TSS</category>
        <category>任务门</category>
        <category>LDT段描述符</category>
        <category>LDT</category>
        <category>CR0</category>
        <category>CR2</category>
        <category>CR4</category>
        <category>CRL</category>
        <category>DPL</category>
        <category>RPL</category>
        <category>段寄存器结构</category>
        <category>段描述符</category>
        <category>段选择子</category>
        <category>GDT表</category>
        <category>调用门</category>
        <category>调用门描述符</category>
        <category>逆向分析MmIsAddressValid函数</category>
        <category>error C2143</category>
        <category>error C2275</category>
        <category>CALL与CALL FAR</category>
        <category>陷阱门描述符</category>
        <category>10-10-12分页</category>
        <category>页目录表基址</category>
        <category>页表的基址</category>
        <category>0地址执行ShellCode</category>
        <category>PDE_PTE</category>
        <category>物理页</category>
        <category>SSDT HOOK</category>
        <category>OpenProcess</category>
        <category>系统服务表</category>
        <category>SSDT</category>
        <category>SSDT HOOK隐藏</category>
        <category>API进出内核</category>
        <category>系统调用阶段总结</category>
        <category>网络安全法</category>
        <category>ASCII</category>
        <category>GBK</category>
        <category>ANSI</category>
        <category>Unicode</category>
        <category>UTF-8</category>
        <category>URL 编码/解码</category>
        <category>十进制</category>
        <category>二进制</category>
        <category>十六进制</category>
        <category>内存</category>
        <category>x64</category>
        <category>编写ShellCode实现IAT HOOK</category>
        <category>ShellCode原则</category>
        <category>傀儡进程加密壳</category>
        <category>ZwUnmapViewOfSection函数</category>
        <category>加载图标</category>
        <category>提取图标</category>
        <category>资源表</category>
        <category>HTML</category>
        <category>文件包含</category>
        <category>sql注入</category>
        <category>MFC命令传递</category>
        <category>远控界面编写</category>
        <category>STL</category>
        <category>Vector容器</category>
        <category>Deque容器</category>
        <category>List容器</category>
        <category>Set容器</category>
        <category>Multiset容器</category>
        <category>Map容器</category>
        <category>Multimap容器</category>
        <category>Stack容器</category>
        <category>Queue容器</category>
        <category>priority_queue容器</category>
        <category>经典定长指令</category>
        <category>经典变长指令</category>
        <category>指令前缀</category>
        <category>串口</category>
        <category>过滤</category>
        <category>键盘过滤</category>
        <category>KAPC</category>
        <category>QueueUserAPC</category>
        <category>NtQueueApcThread</category>
        <category>KeInitializeApc</category>
        <category>KeInsertQueueApc</category>
        <category>KiInsertQueueApc</category>
        <category>进程句柄表</category>
        <category>全局句柄表</category>
        <category>消息队列与线程</category>
        <category>Windows线程切换</category>
        <category>KiSwapContext</category>
        <category>SwapContext</category>
        <category>时钟中断</category>
        <category>时间片管理</category>
        <category>线程切换与TSS</category>
        <category>线程切换与FS</category>
        <category>线程切换与线程优先级</category>
        <category>快速调用</category>
        <category>中断调用</category>
        <category>分析ReadProcessMemory</category>
        <category>KiFastSystemCall</category>
        <category>KiIntSystemCall</category>
        <category>重写3环</category>
        <category>文件上传</category>
        <category>隐藏驱动</category>
        <category>IopLoadDriver</category>
        <category>延迟过程调用</category>
        <category>进程挂靠</category>
        <category>跨进程读写内存</category>
        <category>APC</category>
        <category>逆向分析NtReadVirtualMemory</category>
        <category>逆向分析NtWriteVIrtualMemory</category>
        <category>AD-Attack-Defense</category>
        <category>payload</category>
        <category>sysenter指令</category>
        <category>KiFastCallEntry函数</category>
        <category>KiSystemService函数</category>
        <category>Trap_Frame</category>
        <category>web安全</category>
        <category>Pentest</category>
        <category>磁盘虚拟</category>
        <category>PDO</category>
        <category>Windows中从击键到内核的过程</category>
        <category>KEYBOARD_INPUT_DATA结构</category>
        <category>IRP完成回调函数</category>
        <category>DriverEntry函数的定义</category>
        <category>WDF_DRIVER_CONFIG结构</category>
        <category>EvtDriverDeviceAdd函数</category>
        <category>FAT12/16磁盘卷</category>
        <category>磁盘的过滤</category>
        <category>具有还原功能的磁盘卷过滤驱动</category>
        <category>文件系统</category>
        <category>Minifilter</category>
        <category>boot驱动</category>
        <category>bitmap</category>
        <item>
            <guid isPermalink="true">https://or0kit.github.io/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BC%96%E7%A0%81%E4%B8%8E%E8%BF%9B%E5%88%B6/</guid>
            <title>计算机编码与进制</title>
            <link>https://or0kit.github.io/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BC%96%E7%A0%81%E4%B8%8E%E8%BF%9B%E5%88%B6/</link>
            <category>ASCII</category>
            <category>GBK</category>
            <category>ANSI</category>
            <category>Unicode</category>
            <category>UTF-8</category>
            <category>URL 编码/解码</category>
            <category>十进制</category>
            <category>二进制</category>
            <category>十六进制</category>
            <category>内存</category>
            <pubDate>Wed, 09 Dec 2020 20:24:51 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;前言&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#前言&#34;&gt;#&lt;/a&gt; 前言&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;一直对这些编码的解码、编码、转码，进制很是疑惑。应用层能解析什么编码，什么进制，进制与编码之间的转换等等。决定研究一下。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;十进制-二进制-十六进制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#十进制-二进制-十六进制&#34;&gt;#&lt;/a&gt; 十进制 二进制 十六进制&lt;/h1&gt;
&lt;p&gt;在计算机中，&lt;font color=#008000&gt;&lt;em&gt;所有的数据在存储和运算时都要使用二进制数值表示（因为计算机用高电平和低电平分别表示 1 和 0）&lt;/em&gt;&lt;/font&gt;，而具体用哪些二进制数字表示哪个符号，当然每个人都可以约定自己的一套（这就叫编码），而大家如果要想互相通信而不造成混乱，那么大家就必须使用相同的编码规则，这就是统一编码的原因。&lt;font color=#008000&gt;简单来说编码就是字符与数值的对应关系。&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;计算机硬件是 0101 二进制的，16 进制刚好是 2 的倍数，更容易表达一个命令或者数据。二进制是在是太长了，容易看花眼，进制越大，数的表达长度也就越短，十六进制更简短，因为换算的时候一位 16 进制数可以顶 4 位 2 进制数，1111 正好是 F&lt;br /&gt;
 那么为啥偏偏是 16 进制呢？可能是因为 2、8、16，分别是 2 的 1 次方，3 次方，4 次方，这一点更加方便了进制之间的转换&lt;br /&gt;
最早规定 ASCII 字符集采用的就是 8bit (后期扩展了，但是基础单位还是 8bit)，8bit 用 2 个 16 进制直接就能表达出来，不管阅读还是存储都比其他进制要方便&lt;br /&gt;
计算机中 CPU 运算也是遵照 ASCII 字符集，以 16、32、64 的这样的方式在发展，因此数据交换的时候 16 进制也显得更好，但计算机最后操作的还是二进制&lt;/p&gt;
&lt;p&gt;&lt;font color=#008000&gt;&lt;em&gt;&lt;strong&gt;简单来说就是&lt;/strong&gt;&lt;/em&gt;&lt;/font&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;二进制就是只有 0，1 这两状态，方便计算机用硬件实现，才能有现在的计算机，现在计算机只能读懂二进制。&lt;/li&gt;
&lt;li&gt;十进制就是我们日常生活中常用的计数方法，一般用于人机交流用的。&lt;/li&gt;
&lt;li&gt;十六进制就是用 8 位二进制数组成的数制，很方便的和二进制进行转换，我们可以用十六进制观察和执行计算机的指令。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;计算机内存&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#计算机内存&#34;&gt;#&lt;/a&gt; 计算机内存&lt;/h1&gt;
&lt;p&gt;想要知道为什么是二进制，就得从底层开始了解了。&lt;/p&gt;
&lt;h2 id=&#34;内存的物理结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#内存的物理结构&#34;&gt;#&lt;/a&gt; 内存的物理结构&lt;/h2&gt;
&lt;p&gt;内存实际上是一种名为内存 IC 的电子元件。内存 IC 中有电源、地址信号、数据信号、控制信号等用于 输入输出的大量引脚（IC 的引脚），通过为其指定地址（address），来进行数据的读写。&lt;br /&gt;
内存 IC 的引脚配置如下图&lt;br /&gt;
&lt;img data-src=&#34;%E5%86%85%E5%AD%98%E7%9A%84%E7%89%A9%E7%90%86%E5%9C%B0%E5%9D%80.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将电源连接到 VCC 和 GND 后， 就可以给其他引脚传递比如 0 或者 1 这样的信号。大多数情况下，+ 5V 的直流电压表示 1，0V 表示 0。那么上图内存 IC 可以存储多少数据呢？一个内存 IC 能够存储多少数据要看地址信号的个数，因为数据在计算机中存储，每个数据必须对应一个地址，这样这个数据才是有意义的数据。也就是说这个内存 IC 有多少地址就可以存储多少数据。上面的内存 IC 有 A0～A9 共十个地址信 号引脚，表示可以指定 0000000000～1111111111 共 1024 个地址，因此上面的内存 IC 可以存储 1024 个数据。&lt;/li&gt;
&lt;li&gt;那么一个数据是多大呢？它是由数据信号引脚所确定的，上图内存 IC 中有 D0～D7 共八个数据信号引脚，表示一次可以输入输出 8 位（= 1 字节）的数据。因此，该内存 IC 一共可以存储 1024 个 1 字节的数据。因为 1024 = 1K（计算机领域 K 代表 2 的 10 次幂），所以该内存 IC 的容量就是 1KB。&lt;/li&gt;
&lt;li&gt;但现在大家使用的计算机至少有 512M 的内存，也就是 512000 个 1KB 大小的内存 IC，当然，一台计算机中不太 可能放入如此多的内存 IC。通常情况下，计算机使用的内存 IC 中会有 更多的地址信号引脚，这样就能在一个内存 IC 中存储数十兆字节的数据。因此，只用数个内存 IC，就可以达到 512MB 的容量。&lt;/li&gt;
&lt;li&gt;内存 IC 写入数据的过程是，首先接通电源 (+5V 或 0V) 指定数据，然后地址信号指定存储场所，再把数据的值输入给数据信号存储在指定位置。读取数据时，只需通过 A0～A9 的地址信号指定数据的存储场所，指定地址中存储的数据就会被输出到 D0～D7 的数据信号引脚 。控制信号是用以控制目前是读操作还是写操作。当写入数据时 WD 设为 1，读取数据时 RD 设为 1。&lt;/li&gt;
&lt;li&gt;总体来讲，内存 IC 内部有大量可以存储 8 位数据的地方，通过地址指定这些场所， 之后即可进行数据的读写。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;内存的逻辑模型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#内存的逻辑模型&#34;&gt;#&lt;/a&gt; 内存的逻辑模型&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;虽然内存的实体是内存 IC，不过从程序员的角度来看，也可以把 它假想成每层都存储着数据的楼房，并不需要过多地关注内存 IC 的电 源和控制信号等。如内存为 1KB 时，表示的是下图所示的有 1024 层的楼房（这里地址的值是从上往下逐渐变大，不过也有与此相反的情况）。&lt;br /&gt;
&lt;img data-src=&#34;%E5%86%85%E5%AD%98%E7%9A%84%E9%80%BB%E8%BE%91%E6%A8%A1%E5%9E%8B1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;不过，程序员眼里的内存模型中，还包含着物理内存中不存在的概念，那就是数据类型。编程语言中的数据类型表示存储的是何种类型的数据，它从内存来看，就是占用的内存大小（占有的楼层数）的意思。比如 C 语言中数据类型 char 代表占用一字节内存大小，short 代表占用 2 字节内存大小，long 代表占用 4 字节内存大小。因此不同的数据类型虽然存放同样的数据，但是他们占用内存的大小是不一样的。&lt;br /&gt;
&lt;img data-src=&#34;%E5%86%85%E5%AD%98%E7%9A%84%E9%80%BB%E8%BE%91%E6%A8%A1%E5%9E%8B2.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;仔细思考一下就会发现，根据程序中所指定的变量的数据类型的 不同，读写的物理内存大小也会随之发生变化，这其实是非常方便的。 大家不妨想一想，假如程序中只能逐个字节地对内存进行读写，那该 多么不便啊。在处理超过 1 个字节的数据时，还必须要编写分割处理 程序。此外，在不同的编程语言中，变量可以指定的数据类型的最大 长度也不相同。C 语言中，8 字节（= 64 位）的 double 类型是最大的。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;后话&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#后话&#34;&gt;#&lt;/a&gt; 后话&lt;/h2&gt;
&lt;p&gt;这位师傅后面还写了基于内存理解的几种数据结构，有时间可以了解一下。&lt;br /&gt;
链接为&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM0NzIwODE4L2FydGljbGUvZGV0YWlscy8xMDgzNjkyNTg=&#34;&gt; https://blog.csdn.net/qq_34720818/article/details/108369258&lt;/span&gt;&lt;/p&gt;
&lt;h1 id=&#34;计算机中的单位&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#计算机中的单位&#34;&gt;#&lt;/a&gt; 计算机中的单位&lt;/h1&gt;
&lt;h2 id=&#34;什么是bit&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#什么是bit&#34;&gt;#&lt;/a&gt; 什么是 bit？&lt;/h2&gt;
&lt;p&gt;比特（英语：binary digit），亦称二进制位，指二进制中的一位，是信息的最小单位。bit 是 binary digit（二进制数字）的缩写，由数学家 John Wilder Tukey 提出（可能是 1946 年提出，但有资料称 1943 年就提出了）。这个术语第一次被正式使用，是在香农著名的论文《通信的数学理论》（A Mathematical Theory of Communication）第 1 页中。&lt;/p&gt;
&lt;p&gt;电脑是以二进制存储以及发送接收数据的。二进制的一位，就叫做 1 bit。也就是说 bit 的含义就是二进制数中的一个数位，即 “0” 或者 &amp;quot;1&amp;quot;&lt;/p&gt;
&lt;h2 id=&#34;什么是byte&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#什么是byte&#34;&gt;#&lt;/a&gt; 什么是 Byte？&lt;/h2&gt;
&lt;p&gt;字节（Byte）是数字信息的单位，最常见的是由 8 个 bit 组成。字节是用于编码计算机中单个字符文本的位数，因此它是许多计算机体系结构中最小的可寻址存储单元。&lt;/p&gt;
&lt;p&gt;Byte 是字节的英文写法。它的简写为大写字母 “B&amp;quot;。&lt;br /&gt;
既然名字叫字节，那肯定跟字符有关系。是的。英文字符通常是一个字节，也就是 1B，中文字符通常是两个字节，也就是 2B。&lt;br /&gt;
字节 Byte 和比特 bit 的换算关系是 1 Byte = 8 bit 。&lt;/p&gt;
&lt;h2 id=&#34;kb-千字节&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#kb-千字节&#34;&gt;#&lt;/a&gt; KB （千字节）&lt;/h2&gt;
&lt;p&gt;需要了解的是，1 KB 并不是一千字节，因为计算机只认识二进制，所以在这里的 KB，是 2 的 10 次方，也就是 1024 个字节。&lt;/p&gt;
&lt;p&gt;另外很多表示存储单位的地方都把 B 写成 b，造成了大家认知的混乱。其实在存储单位计量中出现 b 的地方，它的意思仍然是 B，不要因为 bit 的缩写是 b 就被误导了，在存储计量中是不会用 比特，千比特 这种单位的。但是在网速计量中，b 的真实意思就是指 比特 了，这个我们下面再说。&lt;/p&gt;
&lt;h2 id=&#34;存储单位换算&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#存储单位换算&#34;&gt;#&lt;/a&gt; 存储单位换算&lt;/h2&gt;
&lt;p&gt;存储单位换算关系如下&lt;/p&gt;
&lt;p&gt;1B（bytes） = 8bit&lt;br /&gt;
1KB (Kilobyte 千字节)=1024B，&lt;br /&gt;
1MB (Megabyte 兆字节 简称 “兆”)=1024KB，&lt;br /&gt;
1GB (Gigabyte 吉字节 又称 “千兆”)=1024MB，&lt;br /&gt;
1TB (Trillionbyte 万亿字节 太字节)=1024GB，&lt;br /&gt;
1PB（Petabyte 千万亿字节 拍字节）=1024TB，&lt;br /&gt;
1EB（Exabyte 百亿亿字节 艾字节）=1024PB，&lt;br /&gt;
1ZB (Zettabyte 十万亿亿字节 泽字节)= 1024 EB,&lt;br /&gt;
1YB (Yottabyte 一亿亿亿字节 尧字节)= 1024 ZB,&lt;br /&gt;
1BB (Brontobyte 一千亿亿亿字节)= 1024 YB&lt;/p&gt;
&lt;h2 id=&#34;硬盘空间少比买的时候要少&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#硬盘空间少比买的时候要少&#34;&gt;#&lt;/a&gt; 硬盘空间少比买的时候要少？&lt;/h2&gt;
&lt;p&gt;是因为 换算时他们将 1024 按照 1000 来算&lt;br /&gt;
 256G 的硬盘： 256G= ？ Bytes：按 1000 来算&lt;/p&gt;
&lt;p&gt;256G 硬盘&lt;br /&gt;
 1K = 1000B&lt;br /&gt;
1M = 1000K&lt;br /&gt;
1G = 1000M = 1000&lt;em&gt;1000&lt;/em&gt;1000B =1000000000B&lt;br /&gt;
256G = 256000000000B&lt;/p&gt;
&lt;p&gt;256000000000/1024/1024/1024 B = 238.4185791015625 G&lt;br /&gt;
500GB&lt;em&gt;1000&lt;/em&gt;1000*1000/1024/1024/1024=465.66&lt;/p&gt;
&lt;h2 id=&#34;传输速率&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#传输速率&#34;&gt;#&lt;/a&gt; 传输速率&lt;/h2&gt;
&lt;p&gt;传输速率这个词，顾名思义，以某个东西作为单位，来描述单位时间内传输某个东西的数量。&lt;br /&gt;
比如下载软件上面，常常显示的 5.5MB/s，就是以字节 (Byte) 单位表示的传输速率。&lt;br /&gt;
&lt;font color=#008000&gt;计算机里以 Byte 作为存储的最小单位&lt;/font&gt;，所以下载时顺势就用了这个单位，显得直观。&lt;br /&gt;
一般而言，我们用 bit 来描述，传输时携带的信息量。另一常见，且容易搞混的，是波特率这个词。&lt;br /&gt;
&lt;font color=#008000&gt;bit 率是指，单位时间内传输过来的信息量。&lt;br /&gt;
baud 率则是指单位时间内传输过来的符号量。&lt;br /&gt;
这里有个弯要绕过来，因为常识层面大多数的信息都是以 01 两种符号来传输，所以两者在数值层面常常是相等的，相等自然弄混。&lt;br /&gt;
实际上符号量 可以不等于信息量。&lt;/font&gt;&lt;br /&gt;
举个例子，评价里常常有 优 良 中 差 4 个选项，每个字相当于 1 个符号。用一个字就可以表达。但如果换成 0 跟 1 两种符号来表示，那么优良中差是 4 种状态，只能表示成 00，01，10，11 ，那么每种状态，都用了两个位置来表示。这种情况下，1 个字 = 2bit。&lt;/p&gt;
&lt;p&gt;网络技术中的速率指的是连接在计算机网络上的主机在数字信道上传送数据的速率，它也称为数据率（data rate）或比特率（bit rate）。速率是计算机网络中最重要的一个性能指标。&lt;font color=#008000&gt;速率的单位是 b/s（比特每秒）（或 bit/s, 有时也写成 bps，即 ibt per second）。当数据率较高时，就可以用 kb/s（k=10&lt;sup&gt;3 = 千）、Mb/s (M=10&lt;/sup&gt;6 = 兆)、Gb/s（G=10^9 = 吉）或 Tb /s（T=10^12 = 太）。&lt;/font&gt;现在人们常用更简单的并且是很不严格的记法莱描述网络的速率，如 100M 以太网，而省略了单位中的 b/s，它的意思是速率为 100Mb/s 的以太网。&lt;/p&gt;
&lt;h2 id=&#34;32位和64位-31bit和64bit的区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#32位和64位-31bit和64bit的区别&#34;&gt;#&lt;/a&gt; 32 位和 64 位 /31bit 和 64bit 的区别&lt;/h2&gt;
&lt;p&gt;1、对操作系统来说，64 位和 32 位指最大内存寻址空间，32 位最大 4GB（2&lt;sup&gt;32），64 位理论上 16EB (2&lt;/sup&gt;64)，但现在一般都是 2^48&lt;/p&gt;
&lt;p&gt;2、对硬件来说，64 位和 32 位指数据宽度，64 位一次取 8 字节 y 也就是 64bit，32 取 4 字节也就是 32bit，所以理论上 64 位比 32 位性能提高了一倍。实际上的情况是，达不到，内存变大了，需要寻址更多。&lt;/p&gt;
&lt;p&gt;3、对应用程序来说，应用程序基于操作系统 和硬件，其使用的指令宽度随系统和硬件变化。&lt;br /&gt;
32 位和 64 位区别的最常见表现就是 64 万位操作系统可以支持 4G 以上的内存。缺点也是内存占用，64 位代码比 32 位代码多占用空间，&lt;/p&gt;
&lt;p&gt;现在来看 64 位操作系统兼容 32 位软件。反之则不行。&lt;/p&gt;
&lt;p&gt;32 位和 64 位最本质的区别是 CPU 来决定的，操作系统的位数是是看最大能把 CPU 的性能发挥到多高。我们现在在市面上见到的 CPU 都是 64 位的，32 位的 CPU 已经是老古董了。&lt;/p&gt;
&lt;h1 id=&#34;ascii&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ascii&#34;&gt;#&lt;/a&gt; ASCII&lt;/h1&gt;
&lt;p&gt;ASCII 码是由美国有关的标准化组织出台的，后来它被国际标准化组织（International Organization for Standardization, ISO）定为国际标准，称为 ISO 646 标准。该标准统一规定了常用字符（像 a、b、c、d 这样的 52 个字母（包括大写）以及 0、1 等数字还有一些常用的符号（例如：%、!、+ 等）总共 128 个字符）如何用二进制数来表示。ASCII 分为标准 ASCII 码使用 7 位二进制数组合来表示 128 种字符和扩展 ASCII 的 8 位二进制数组合来表示 256 种字符。&lt;/p&gt;
&lt;h2 id=&#34;标准ascii码&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#标准ascii码&#34;&gt;#&lt;/a&gt; 标准 ASCII 码&lt;/h2&gt;
&lt;p&gt;0-127 所包含的码称为标准 ASCII 编码，如：空格 SPACE 是 32（二进制 00100000），大写的字母 a 是 97（二进制 01100001）。这 128 个符号（包括 32 个不能打印出来的控制符号），只占用了一个字节 (8 位) 的后 7 位，最前面的一位统一规定为 0。&lt;/p&gt;
&lt;p&gt;下面是标准 ASCII 码表：&lt;br /&gt;
&lt;img data-src=&#34;%E6%A0%87%E5%87%86ASCII.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;扩展ascii码&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#扩展ascii码&#34;&gt;#&lt;/a&gt; 扩展 ASCII 码&lt;/h2&gt;
&lt;p&gt;后 128 个称为扩展 ASCII 码。扩展 ASCII 码允许将每个字符的第 8 位用于确定附加的 128 个特殊符号字符、外来语字母和图形符号；&lt;/p&gt;
&lt;p&gt;下面是扩展 ASCII 码表：&lt;br /&gt;
&lt;img data-src=&#34;ascii127-255.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;0b11111111 = 255 = 0xFF&lt;br /&gt;
0b01111111 = 127 = 0x7F&lt;/p&gt;
&lt;h2 id=&#34;python小知识&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#python小知识&#34;&gt;#&lt;/a&gt; Python 小知识&lt;/h2&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;在python中可以使用内置函数&lt;span class=&#34;token builtin&#34;&gt;ord&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;查看单个字符的ASCII码，例如：&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&gt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;ord&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;a&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;97&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token builtin&#34;&gt;ord&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; 函数实质是返回字符的 Unicode 码对应的十进制数值。例如&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&gt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;ord&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;国&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;22269&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;另外，&lt;span class=&#34;token builtin&#34;&gt;ord&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;逆函数&lt;span class=&#34;token builtin&#34;&gt;chr&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;查看编码对应的字符，例如：&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&gt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;chr&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;97&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token string&#34;&gt;&#39;a&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&gt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;chr&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;22269&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token string&#34;&gt;&#39;国&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h1 id=&#34;gbk&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#gbk&#34;&gt;#&lt;/a&gt; GBK&lt;/h1&gt;
&lt;p&gt;由于 ASCII 编码是不支持中文的，但又需要寻求一种编码方式来支持中文。于是，国人就定义了一套编码规则：当字符小于 127 位时，与 ASCII 的字符相同，但当两个大于 127 的字符连接在一起时，就代表一个汉字，第一个字节称为高字节（从 0xA1-0xF7）, 第二个字节为低字节（从 0xA1-0xFE）, 这样大约可以组合 7000 多个简体汉字。这个规则叫做 GB2312。&lt;/p&gt;
&lt;p&gt;由于中国汉字很多，有些字还是无法表示，于是重新定义了规则：不在要求低字节一定是 127 之后的编码，只要第一个字节是大于 127，就固定表示这是一个汉字的开始，不管后面跟的是不是扩展字符集里的内容。这种扩展之后的编码方案称之为 GBK，包含了 GB2312 的所有内容，同时新增了近 20000 个新的汉字（包括繁体字）和符号。但是，中国有 56 个民族，每个民族都有自己的文字，所以，对 GBK 编码规则进行了扩展，又加了近几千个少数民族的字符，再次扩展后得编码叫做 GB18030，GBK 字符是被包含在 GB18030 字符内的，与 GBK 基本向后兼容。GB18030 共收录汉字 70,244 个.&lt;/p&gt;
&lt;p&gt;Python 中使用 gbk 和 gb18030 编码 &#39; 韩&#39; 字：&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&gt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;韩&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;encode&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;gb18030&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token string&#34;&gt;b&#39;\\xba\\xab&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&gt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;韩&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;encode&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;gbk&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token string&#34;&gt;b&#39;\\xba\\xab&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h1 id=&#34;ansi&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ansi&#34;&gt;#&lt;/a&gt; ANSI&lt;/h1&gt;
&lt;p&gt;为使计算机支持更多的语言，通常使用 0x80~0xFFFF 范围内的 2 个字节来表示 1 个字符。比如：汉字 &#39; 中 &#39; 在中文操作系统中，使用 0xD6、0xD0 这两个字节存储。但不同的国家和地区制定了不同的标准，由此产生了 GB2312、GBK、GB18030、Big5、Shift_JIS 等各自的编码标准。这些使用多个字节来代表一个字符的各种延伸编码方式，被称为 ANSI 编码。在简体中文 Windows 操作系统为中，ANSI 编码代表 GBK 编码；在繁体中文 Windows 操作系统中，ANSI 编码代表 Big5；而在日文 Windows 操作系统中，ANSI 编码代表 Shift_JIS 编码。不同 ANSI 编码之间互不兼容，当信息在国际间交流时，无法将属于两种语言的文字，存储在同一段 ANSI 编码的文本中。ANSI 编码表示英文字符时用一个字节，表示中文用两个或四个字节。&lt;/p&gt;
&lt;h1 id=&#34;unicode&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#unicode&#34;&gt;#&lt;/a&gt; Unicode&lt;/h1&gt;
&lt;p&gt;因为世界上有很多国家，而每个国家都定义一套自己的编码标准，结果相互之间无法解析编码进行通信，所以 ISO（国际标准化组织）决定定义一套编码方案来解决所有国家的编码问题，这个新的编码方案就叫做 Unicode。注意 Unicode 不是一个新的编码规则，而是一套字符集（为每一个「字符」分配一个唯一的 ID（学名为码位 / 码点 / Code Point）），可以将 Unicode 理解为一本世界编码的字典。具体的符号对应表，可以查询，或者专门的汉字对应表。&lt;/p&gt;
&lt;p&gt;在 Python 中查看字符对应 Unicode 数值的方法：&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&gt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;中&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;encode&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;unicode_escape&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token string&#34;&gt;b&#39;\\\u4e2d&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&gt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;b&#39;\\\u4e2d&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;decode&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;unicode_escape&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token string&#34;&gt;&#39;中&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;需要注意的是，Unicode 只是一个符号集，它只规定了符号的二进制代码，却没有规定这个二进制代码应该如何存储。比如，汉字严的 Unicode 是十六进制数 4E25，转换成二进制数足足有 15 位（1001110 00100101），也就是说，这个符号的表示至少需要 2 个字节。表示其他更大的符号，可能需要 3 个字节或者 4 个字节，甚至更多。这里就有几个严重的问题，第一个问题是，计算机如何才能区别 Unicode 和 ASCII ？还有计算机怎么知道三个字节表示一个符号，而不是分别表示三个符号呢？第二个问题是，我们已经知道，英文字母只用一个字节表示就够了，如果 Unicode 统一规定，每个符号用三个或四个字节表示，那么每个英文字母前都必然有二到三个字节是 0，这对于存储或传输来说是极大的浪费，文本文件的大小会因此大出二三倍，这是无法接受的。它们造成的结果是：出现了 Unicode 的多种存储方式，也就是说有许多种不同的二进制格式，可以用来表示 Unicode。也导致了 Unicode 在很长一段时间内无法推广，直到 UTF 编码的出现。&lt;/p&gt;
&lt;h1 id=&#34;utf-8&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#utf-8&#34;&gt;#&lt;/a&gt; UTF-8&lt;/h1&gt;
&lt;p&gt;由于 Unicode 比较浪费网络和硬盘资源，因此为了解决这个问题，就在 Unicode 的基础上，定制了一套编码规则（将「码位」转换为字节序列的规则【编码 / 解码 可以理解为 加密 / 解密 的过程】），这个新的编码规则就是 UTF-8。UTF-8 采用 1-4 个字符进行传输和存储数据，是一种针对 Unicode 的可变长度字符编码，又称万国码。&lt;/p&gt;
&lt;p&gt;Unicode 与 Utf-8 编码规则：使用下面的模板进行互转&lt;/p&gt;
&lt;p&gt;Unicode 符号范围（十六进制） | UTF-8 编码方式 (二进制)&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;0000 0000-0000 007F | 0xxxxxxx&lt;/p&gt;
&lt;p&gt;0000 0080-0000 07FF | 110xxxxx 10xxxxxx&lt;/p&gt;
&lt;p&gt;0000 0800-0000 FFFF | 1110xxxx 10xxxxxx 10xxxxxx\&lt;/p&gt;
&lt;p&gt;0001 0000-0010 FFFF | 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx&lt;/p&gt;
&lt;p&gt;Unicode 字符通过对应模板加上标志位就后是 Utf-8 编。例如：&amp;quot;迷&amp;quot; Unicode 的编码为 \\u8ff7 用二进制表示为：‭10001111 11110111‬，8ff7 处于第三个模板范围内，把 10001111 11110111 按模板分成三份 1000 111111 110111，然后加上标志位的二进制为：11101000 10111111 10110111 所以 utf-8 编码是 &amp;quot;‭E8BFB7‬&amp;quot;&lt;/p&gt;
&lt;p&gt;Python 中 Unicode 字符转 UTF-8 编码：&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&gt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;迷&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;encode&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;utf-8&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token string&#34;&gt;b&#39;\\xe8\\xbf\\xb7&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;那么如何区分 utf-8 各个字符的？utf-8 区分每个字符的开始是根据编码的高位字节来区分的，比如：用一个字节表示的字符，第一个字节高位以 &amp;quot;0&amp;quot; 开头；用两个字节表示的字符，第一个字节的高位为以 &amp;quot;110&amp;quot; 开头，后面一个字节以 &amp;quot;10 开头&amp;quot;；用三个字节表示的字符，第一个字节以 &amp;quot;1110&amp;quot; 开头，后面两个字节以 &amp;quot;10&amp;quot; 开头；用四个字节表示的字符，第一个字节以 &amp;quot;11110&amp;quot; 开头，后面的三个字节以 &amp;quot;10&amp;quot; 开头。这样计算机就可以认出每个字符由几个字节组成，才能显示出正确的信息。&lt;/p&gt;
&lt;h2 id=&#34;utf-8和unicode转换&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#utf-8和unicode转换&#34;&gt;#&lt;/a&gt; UTF-8 和 Unicode 转换&lt;/h2&gt;
&lt;p&gt;比如汉字 &amp;quot;智&amp;quot;，utf-8 编码是 &amp;quot;\xe6\x99\xba&amp;quot; 对应的二进制为：&amp;quot;11100110 10011001 10111010&amp;quot;，由于 utf-8 中一个汉字是 3 个字节，所以对应的模板为：&lt;/p&gt;
&lt;p&gt;0000 0800-0000 FFFF | 1110xxxx 10xxxxxx 10xxxxxx&lt;/p&gt;
&lt;p&gt;11100110 10011001 10111010 | UTF-8 编码成的二进制 1110xxxx 10xxxxxx 10xxxxxx | 对应模版 0110 011001 111010 | 去除模版中的标志位后 01100110 01111010 代表十六进制 667A，因此根据规则转换得出 &amp;quot;智&amp;quot;Unicode 的编码为 667A。&lt;/p&gt;
&lt;p&gt;同样，根据 Unicode 中字符的编码位置，也能找到对应的 utf-8 编码。例如：UTF-8 编码：\xe8\xbf\xb7，用二进制表示为：‭11101000 10111111 10110111‬，有 3 个字节属于第三个模板范围，按模板去掉标志位后是：1000 111111 110111，结果就是 &#39; 迷&#39; 字的 Unicode 字符 8ff7。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&gt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;b&#39;\\\u8ff7&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;decode&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;unicode_escape&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token string&#34;&gt;&#39;迷&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;unicode与gbk编码的转换&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#unicode与gbk编码的转换&#34;&gt;#&lt;/a&gt; Unicode 与 GBK 编码的转换&lt;/h2&gt;
&lt;p&gt;Unicode 与 GBK 是两个完全不同的字符编码方案，其两者没有直接关系。如果要对其进行相&lt;/p&gt;
&lt;p&gt;互转换，最直接最高效的方法是查询各自的字符对照表。&lt;/p&gt;
&lt;p&gt;Python 实现 Unicode 与 GBK 转换（将 Unicode 对应数值：\\u8ff7 转 GBK 字符方法）：&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&gt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; l_u &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;b&#39;\\\u8ff7&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;decode&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;unicode_escape&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&gt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; l_u&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;encode&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;gbk&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token string&#34;&gt;b&#39;\\xc3\\xd4&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;UTF-8、Unicode 与 GBK 的关系&lt;br /&gt;
 Utf-8（utf-16）&lt;mark&gt;&lt;mark&gt;编码&lt;/mark&gt;&lt;/mark&gt; Unicode=&lt;mark&gt;&lt;mark&gt; 编码&lt;/mark&gt;&lt;/mark&gt; = GBK（ANSI）&lt;/p&gt;
&lt;p&gt;Utf-8（utf-16）&lt;mark&gt;&lt;mark&gt;解码&lt;/mark&gt;&lt;/mark&gt; Unicode=&lt;mark&gt; 解码&lt;/mark&gt; =====GBK（ANSI）&lt;/p&gt;
&lt;p&gt;总结：Unicode 字符可以通过编码可以得到 UTF-8 和 GBK，相反 UTF-8 和 GBK 也可以通过解码得到 Unicode，但 GBK 和 UTF-8 之间无法直接转换，只能转换到 Unicode 后再转到另一编码。&lt;font color=#00800&gt;其实所谓编码转换是数值与字符的转换。&lt;/font&gt;&lt;/p&gt;
&lt;h1 id=&#34;url-编码解码&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#url-编码解码&#34;&gt;#&lt;/a&gt; URL 编码 / 解码&lt;/h1&gt;
&lt;p&gt;URL 编码就是一个字符 ascii 码的十六进制。不过稍微有些变动，需要在前面加上 &amp;quot;%&amp;quot;。比如 &amp;quot;&amp;quot;，它的 ascii 码是 92，92 的十六进制是 5c，所以&amp;quot;&amp;quot; 的 URL 编码就是 %5c。那么汉字的 URL 编码呢？很简单，非 ASCII 字符的编码一般有两种，是以 GBK 或 UTF8 进行编码。例如：&amp;quot;迷&amp;quot; 对应的 UTF-8 编码 \xe8\xbf\xb7，则 &amp;quot;胡&amp;quot; 的 URL 编码是 % E8% BF% B7。解码方法是去掉 %，之后再进行 UTF-8 解码，就可以得到实际的字符了。&lt;/p&gt;
&lt;p&gt;计算机是以什么编码存储和传输数据的呢？&lt;br /&gt;
支持 Unicode 的应用程序（python、VS、VC、Google Chrome、notepad 等大多数程序都支持（部分程序需要设置编码）。&lt;/p&gt;
&lt;p&gt;不支持 Unicode 的应用程序（易语言等）则会以控制面板 — 区域 — 管理中设置的编码（ANSI）进行存储，例如：简体中文 (GBK)、繁体中文 (Big5) 等。&lt;br /&gt;
不支持 Unicode 的应用程序（易语言等）则会以控制面板 — 区域 — 管理中设置的编码（ANSI）进行存储，例如：简体中文 (GBK)、繁体中文 (Big5) 等。&lt;/p&gt;
&lt;p&gt;例如：以国产编程语言‘易语言’为例，看一下变量在内存中是以什么编码存储的&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;span&gt;h&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;a ＝ &lt;span class=&#34;token string&#34;&gt;&#34;你&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;调试输出 &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;取指针地址_文本型 &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;a&lt;span class=&#34;token punctuation&#34;&gt;))&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;* &lt;span class=&#34;token number&#34;&gt;1966420&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;通过 CE 查看此内存地址中对应的值为 0000E3C4，而 &amp;quot;你&amp;quot; 的 GBK 编码正好为：E3C4。由此得知，易语言软件是以 GBK 编码进行数据存储和传输的。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;再看看数据在内存中如何存储：&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用 OD 查看&lt;br /&gt;
&lt;img data-src=&#34;%E6%95%B0%E6%8D%AE%E5%9C%A8%E5%86%85%E5%AD%98%E4%B8%AD%E7%9A%84%E5%82%A8%E5%AD%98.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用 CE 查看&lt;br /&gt;
&lt;img data-src=&#34;CE%E6%9F%A5%E7%9C%8B.jpg&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
多字符变量 &amp;quot;你好啊&amp;quot; 的 GBK 字符：c4e3bac3b0a1&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;OD:&lt;br /&gt;
&lt;img data-src=&#34;OD.jpg&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
CE（8 字节显示）:&lt;br /&gt;
&lt;img data-src=&#34;CE.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;由此可以看出，内存的存储编码方式与软件支持的编码方式是一致的（易语言：GBK 字符；python：Unicode 字符）；计算机内存数据存储一般采用大端模式 (内存高位对数据低位，内存低位对数据高位) 。OD 默认是从内存低位到高位显示数据，CE 默认是从内存高位到低位显示数据，所以看到的十六进制数值是相反的。存储占用的内存大小，会根据变量的数据类型申请对应大小的内存来存储。&lt;/p&gt;
&lt;h1 id=&#34;参考&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#参考&#34;&gt;#&lt;/a&gt; 参考&lt;/h1&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3d3dy5janp6Yy5jb20vYXJ0aWNsZS81ODIuaHRtbA==&#34;&gt;http://www.cjzzc.com/article/582.html&lt;/span&gt;&lt;br /&gt;
&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2MDgxMjY1L2FydGljbGUvZGV0YWlscy84MTU3MjM4MQ==&#34;&gt;https://blog.csdn.net/qq_36081265/article/details/81572381&lt;/span&gt;&lt;br /&gt;
&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9tLmlkb25nZGUuY29tL3EvODI4NGU4RmI3RTkzQ2Q3OS9hNDQwMjY2OS5zaHRtbA==&#34;&gt;https://m.idongde.com/q/8284e8Fb7E93Cd79/a4402669.shtml&lt;/span&gt;&lt;br /&gt;
&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC85MTlhOTAxOWU2YWM=&#34;&gt;https://www.jianshu.com/p/919a9019e6ac&lt;/span&gt;&lt;br /&gt;
&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM0NzIwODE4L2FydGljbGUvZGV0YWlscy8xMDgzNjkyNTg=&#34;&gt;https://blog.csdn.net/qq_34720818/article/details/108369258&lt;/span&gt;&lt;br /&gt;
&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE2MDgxODAvYXJ0aWNsZS9kZXRhaWxzLzg1MTU3MDYx&#34;&gt;https://blog.csdn.net/u011608180/article/details/85157061&lt;/span&gt;&lt;br /&gt;
&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NodXhpbl9tbS9hcnRpY2xlL2RldGFpbHMvODQ4NzA2OTE=&#34;&gt;https://blog.csdn.net/chuxin_mm/article/details/84870691&lt;/span&gt;&lt;br /&gt;
&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzM3MjM3MTE2MC9hbnN3ZXIvMTAyMDIwMjIzMw==&#34;&gt;https://www.zhihu.com/question/372371160/answer/1020202233&lt;/span&gt;&lt;br /&gt;
&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzI4NTg0MDA1MS9hbnN3ZXIvNDUyNTM4MDc3&#34;&gt;https://www.zhihu.com/question/285840051/answer/452538077&lt;/span&gt;&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
