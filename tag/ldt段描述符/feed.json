{
    "version": "https://jsonfeed.org/version/1",
    "title": "Or0kit • All posts by \"ldt段描述符\" tag",
    "description": "临渊羡鱼，不如退而结网",
    "home_page_url": "https://Or0kit.github.io",
    "items": [
        {
            "id": "https://or0kit.github.io/Bin/Core/WindowsXp/Protect-Mode/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F-%E6%89%A9%E5%B1%95-%E4%BD%BF%E7%94%A8LDT/",
            "url": "https://or0kit.github.io/Bin/Core/WindowsXp/Protect-Mode/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F-%E6%89%A9%E5%B1%95-%E4%BD%BF%E7%94%A8LDT/",
            "title": "保护模式-扩展-使用LDT",
            "date_published": "2021-08-29T07:24:10.000Z",
            "content_html": "<h1 id=\"楔子\"><a class=\"anchor\" href=\"#楔子\">#</a> 楔子</h1>\n<p>野路子出身，之前一直没看懂火哥的使用 LDT 的代码，看了看《x86/x64 体系探索及编程》研究了一下。</p>\n<h2 id=\"ldt\"><a class=\"anchor\" href=\"#ldt\">#</a> LDT</h2>\n<p>Local Descriptor Table 是其中的一个描述符表，LDT 由 LDTR 的 base 域进行定位。</p>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<p>LDTR 的结构与段寄存器的结构是完全一致的，包括：base、limit、attribute 域，以及 selector 域，base、limit 和 atribute 组成 LDTR 的 Cache 部分，也是隐藏不可见的。像段寄存器一样，LDTR 需要使用 LDT 描述符进行加载，LDT 描述符只能存放在 GDT 中。 <strong>32 位的 LDTR.base 值能让 LDT 定位在 4G 的线性地址空间任何位置。</strong> 在 64 位模式下，LDTR.base 被扩展为 64 位。</p>\n<h2 id=\"ldt描述符\"><a class=\"anchor\" href=\"#ldt描述符\">#</a> LDT 描述符</h2>\n<p>LDT 描述符属于系统级的描述符，它的结构与 TSS 完全一致。</p>\n<p><img data-src=\"image002.png\" alt=\"\" /></p>\n<p>LDT 描述符的类型是 0x02，S 标志位为 0 值，表示属于一个 system 描述符。</p>\n<h2 id=\"ldtr的加载\"><a class=\"anchor\" href=\"#ldtr的加载\">#</a> LDTR 的加载</h2>\n<p>系统使用 LLDT 指令进行显式加载，或在进行任务切换时隐式地从 TSS 段里加载。</p>\n<p><code>mov ax, LDT_SEL ; LDT selector</code> <br />\n <code>lldt ax </code></p>\n<p><span class=\"label primary\">lldt 指令执行在 0 级权限里。处理器会检查以下内容:</span></p>\n<blockquote>\n<p><strong>selector 检查</strong></p>\n</blockquote>\n<blockquote>\n<p>对 selector 检查两个方面。</p>\n<ul>\n<li>如果提供的 selector 是 Null selector，则会产生 #GP 异常。</li>\n<li>如果 selector.TI=1，表示在 LDT 里，将产生 #GP 异常。</li>\n</ul>\n</blockquote>\n<blockquote>\n<p><strong>limit 检查</strong></p>\n</blockquote>\n<blockquote>\n<p>selector 是否超出 GDT limit 值。也就是 0x3ff。</p>\n</blockquote>\n<blockquote>\n<p><strong>LDT 描述符类型检查</strong></p>\n</blockquote>\n<blockquote>\n<p>能被加载到 LDTR 里的描述符必须如下。</p>\n<ul>\n<li>s 标志为 0，属于 system 描述符。</li>\n<li>P 标志为 1，表示在内存中。</li>\n<li>Type 值为 0x02，它是 LDT 描述符。</li>\n</ul>\n</blockquote>\n<h2 id=\"构ldt造段描述符\"><a class=\"anchor\" href=\"#构ldt造段描述符\">#</a> 构 LDT 造段描述符</h2>\n<p>让 base=0x00000000，limit=0x3ff。<br />\nLDT 段描述符： <code>0000e200`000003ff</code></p>\n<h2 id=\"实验\"><a class=\"anchor\" href=\"#实验\">#</a> 实验</h2>\n<p>知道了理论我们来实际使用一下。</p>\n<p>火哥说把权限转移到 LDT 表中，写保护时别人很难检测…… 小白不懂，扩展一下思路。</p>\n<p><span class=\"label primary\">这里有一个小细节需要注意:</span></p>\n<p><img data-src=\"image003.png\" alt=\"\" /></p>\n<p>其中红色箭头所指的内容，才是数据在计算机中的真实样子，其余的几种是 windbg 以数据宽度排好显示的。构建段描述符时要注意。<br />\n这是大端序、小段序排列的原因。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> dwLDT<span class=\"token punctuation\">[</span><span class=\"token number\">0x3ff</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 这里为什么用 6 个字节存储 GDT 的地址我也不清楚</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> GDTAddress<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token function\">__declspec</span><span class=\"token punctuation\">(</span>naked<span class=\"token punctuation\">)</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t__asm <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\tpushad<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\tpushfd<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t<span class=\"token comment\">// 取 GDT 表的地址</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\tlea eax<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>GDTAddress <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\tmov eax<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>eax<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t<span class=\"token comment\">//eax = 8003f090</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\tlea eax<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>eax <span class=\"token operator\">+</span> <span class=\"token number\">0x90</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t<span class=\"token comment\">// 取定义的 dwLDT 的地址 本程序中是 0X00417138，ecx = 00417138</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\tlea ecx<span class=\"token punctuation\">,</span> dwLDT<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t<span class=\"token comment\">// 将 7138 放进 ebx 的低 16 位中，bx =  7138</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\tmov bx<span class=\"token punctuation\">,</span> cx<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t<span class=\"token comment\">// 左移 16 位，将 7138 放进 ebx 的高 16 位中 ebx = 71380000</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\tshl ebx<span class=\"token punctuation\">,</span> <span class=\"token number\">0x10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t<span class=\"token comment\">// 把 0x03ff 放进 ebx 的低 16 位中，此时 ebx 的值为 0x713803ff</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\tmov bx<span class=\"token punctuation\">,</span> <span class=\"token number\">0x03ff</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t<span class=\"token comment\">// 给地址为 0x8003f090 内存空间赋值为： ff 03 38 71 </span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\tmov dword ptr ds <span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>eax<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">,</span> ebx<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t<span class=\"token comment\">//eax 的值为 0x8003f094</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\tlea eax<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>eax <span class=\"token operator\">+</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t<span class=\"token comment\">// 右移 16 位，ecx 的值为 0x00000041</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\tshr ecx<span class=\"token punctuation\">,</span> <span class=\"token number\">0x10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\t<span class=\"token comment\">// 给地址为 0x8003f094 内存赋值为 0x41</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\tmov byte ptr ds <span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>eax<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">,</span> cl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\t<span class=\"token comment\">// 给地址为 0x8003f095 内存赋值为 0x00e2</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\tmov word ptr ds <span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>eax <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0x00e2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\t<span class=\"token comment\">// 给地址为 0x8003f097 内存赋值为 0x</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\tmov byte ptr ds <span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>eax <span class=\"token operator\">+</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">,</span> ch<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\t<span class=\"token comment\">// 加载 LDT，使 LDTR 装载 LDT 选择子</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\tmov ax<span class=\"token punctuation\">,</span> <span class=\"token number\">0x93</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\tlldt ax<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\tpopfd<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\tpopad<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t\tretf<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> Selector<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x48</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 准备调用门提权</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> cLdtr <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t<span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b=%d\\n\"</span><span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>dwLDT <span class=\"token operator\">+</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x0000ffff</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>dwLDT <span class=\"token operator\">+</span> <span class=\"token number\">0xc</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00cff300</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"windbg execute eq 8003f048 %04xec00`0008%04x\\n\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t\t<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>Func <span class=\"token operator\">>></span> <span class=\"token number\">0x10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xffff</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t\t<span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>Func <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xffff</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"dwLDT Address:%#010X\\n\"</span><span class=\"token punctuation\">,</span> dwLDT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t<span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t__asm <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t\tsgdt GDTAddress<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t\tpush fs<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t\tcall fword ptr Selector<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\t\tsldt cLdtr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>\t\tpop fs<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\t\tmov ax<span class=\"token punctuation\">,</span> <span class=\"token number\">0x0f</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\t\tmov ds<span class=\"token punctuation\">,</span> ax<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\t\tmov eax<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\t\tmov b<span class=\"token punctuation\">,</span> eax<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b=%d\\n\"</span><span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\t<span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>调试过程中的截图</p>\n<p>程序执行完 <code>mov dword ptr ds : [eax] , ebx</code>  后，各寄存器的值与内存中 <code>0x8003f090</code>  处的数据</p>\n<p><img data-src=\"image004.png\" alt=\"\" /></p>\n<p>成功执行</p>\n<p><img data-src=\"image005.png\" alt=\"\" /></p>\n<p>修改一下 LDT 表中段描述符的 DPL<br />\n <code>*((unsigned int*)(dwLDT + 0xc)) = 0x00cff300;</code></p>\n<p>==&gt;&gt;</p>\n<p><code>*((unsigned int*)(dwLDT + 0xc)) = 0x00cf9300;</code></p>\n<p>执行结果：</p>\n<p><img data-src=\"image006.png\" alt=\"\" /></p>\n<p>权限异常。</p>\n<p>实验结束！</p>\n",
            "tags": [
                "LDT段描述符",
                "LDT"
            ]
        }
    ]
}