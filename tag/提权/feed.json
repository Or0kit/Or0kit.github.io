{
    "version": "https://jsonfeed.org/version/1",
    "title": "Or0kit • All posts by \"提权\" tag",
    "description": "临渊羡鱼，不如退而结网",
    "home_page_url": "https://Or0kit.github.io",
    "items": [
        {
            "id": "https://or0kit.github.io/Bin/Core/WindowsXp/Protect-Mode/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F-%E9%99%B7%E9%98%B1%E9%97%A8/",
            "url": "https://or0kit.github.io/Bin/Core/WindowsXp/Protect-Mode/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F-%E9%99%B7%E9%98%B1%E9%97%A8/",
            "title": "保护模式-陷阱门",
            "date_published": "2021-08-13T06:40:28.000Z",
            "content_html": "<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<p>Windows 使用了中断门，用于系统调用和调试（比如调试断点）</p>\n<p>IF 位，是标志寄存器 EFLEAG，下标为 9 的位置。</p>\n<p>中断门和陷阱门都不可以传递参数，可能它们的作用被 CPU 制造商规定为辅助作用，但是操作系统怎么使用，就看操作系统的设计者怎么想的。</p>\n<p>它们的段描述符区别在于 TYPE 域，且都是系统段描述符</p>\n<p>这些都是 CPU 层面的概念，操作系统只是使用，然后根据硬件返回出来的值（在硬件方面可能就是电压表示的二进制）进行判断对与错，然后操作系统会提示用户正确或错误。</p>\n<p>转自<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxOTg4NDQ4L2FydGljbGUvZGV0YWlscy8xMDI1OTk5NjE=\"> https://blog.csdn.net/qq_41988448/article/details/102599961</span> 的评论</p>\n<h2 id=\"陷阱门与中断门的区别\"><a class=\"anchor\" href=\"#陷阱门与中断门的区别\">#</a> 陷阱门与中断门的区别</h2>\n<p>中断门执行时，会将 IF 标志位清零，但陷阱门不会</p>\n<p>IF=0 时：程序不再接收可屏蔽中断</p>\n<p>可屏蔽中断：比如程序正在运行时，我们通过键盘敲击了锁屏的快捷键，若 IF 位为 1，CPU 就能够接收到我们敲击键盘的指令并锁屏</p>\n<p>可屏蔽中断：<br />\n简述：保存断点入栈，响应经中断控制器 8259 优先级判断后的中断请求，恢复断点。<br />\nI/O 设备发出的所有中断 (IRQ) 都可以产生可屏蔽中断，受标志位 IF 的影响，根据中断循序标志的设置来判断 CPU 是否响应中断请求。</p>\n<blockquote>\n<p>接口发出中断请求<br />\n当前指令执行完后，CPU 响应中断<br />\n中断类型号 N 送 CPU<br />\n 当前的 EFR CS HE EIP 推入栈<br />\n清除 IF (中断允许标志位，IF=0，禁止 CPU 响应外部中断请求，IF=1，允许响应) 和 TF（跟踪标志，也称单步执行，CPU 按跟踪方式执行）<br />\n由中断类型号，查中断向量表获得中断服务子程序的入口地址<br />\n CPU 执行中断子程序<br />\n开中断<br />\n IRET 指令使 EIP CS HE EFR 弹出栈 ，返回被中断的源程序</p>\n</blockquote>\n<p>不可屏蔽中断：不可阻止的中断请求。如： 当突然断电，CPU 不是立马死掉，CPU 内部有一个电容，断电的时候，还会运行一会儿，用于处理后续工作，这个是不可屏蔽中断。</p>\n<h2 id=\"trap-gate-descriptor\"><a class=\"anchor\" href=\"#trap-gate-descriptor\">#</a> Trap-Gate-Descriptor</h2>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<h2 id=\"实践\"><a class=\"anchor\" href=\"#实践\">#</a> 实践</h2>\n<p>知道了理论，开始实践。<br />\n和中断门一样的流程，只是我们构造的描述符有一点不同： <code>0040EF00`00081020</code>   把中断门的 <code>EE</code>  改为了 <code>EF</code></p>\n<p>代码还是以前的代码，结果也是一样的。<br />\n不再复写一份了（懒）。</p>\n<h1 id=\"reference\"><a class=\"anchor\" href=\"#reference\">#</a> Reference</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1NDI1MjQzL2FydGljbGUvZGV0YWlscy84MzY1NzIwMw==\">https://blog.csdn.net/qq_35425243/article/details/83657203</span></p>\n",
            "tags": [
                "IDT",
                "提权",
                "陷阱门描述符"
            ]
        },
        {
            "id": "https://or0kit.github.io/Bin/Core/WindowsXp/Protect-Mode/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F-%E4%B8%AD%E6%96%AD%E9%97%A8/",
            "url": "https://or0kit.github.io/Bin/Core/WindowsXp/Protect-Mode/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F-%E4%B8%AD%E6%96%AD%E9%97%A8/",
            "title": "保护模式-中断门",
            "date_published": "2021-08-13T06:40:15.000Z",
            "content_html": "<h1 id=\"中断门\"><a class=\"anchor\" href=\"#中断门\">#</a> 中断门</h1>\n<h2 id=\"中断门的作用\"><a class=\"anchor\" href=\"#中断门的作用\">#</a> 中断门的作用</h2>\n<p>先前学习的调用门在实际的 Windows 中并没有被使用，只是操作系统提供了调用门描述符给开发人员使用。相比之下，Windows 使用了中断门，用于：</p>\n<blockquote>\n<p>系统调用（老的 CPU 通过中断门进入 RING（内核）0 层；新的 CPU 使用快速调用）<br />\n调试（常见的 INT3 对应硬编码为 0xCC）</p>\n</blockquote>\n<h2 id=\"中断门执行流程\"><a class=\"anchor\" href=\"#中断门执行流程\">#</a> 中断门执行流程</h2>\n<p>【重点】</p>\n<ul>\n<li>根据 INT XXX 的值 查 IDT（中断描述符表），找到对应的段描述符 这个描述符是一个中断门描述符</li>\n<li>在中断门描述符中存储另一个代码段的选择子</li>\n<li>选择子指向的段 段.Base + 偏移地址 就是真正要执行的地址</li>\n</ul>\n<h2 id=\"idt\"><a class=\"anchor\" href=\"#idt\">#</a> IDT</h2>\n<p>IDT 全称 Interrupt Descriptor Table（中断描述符表）, 同 GDT 一样，IDT 也是由一系列描述符组成的，每个<br />\n描述符占 8 个字节。但要注意的是，IDT 表中的第一个元素不是 NULL。</p>\n<p>IDT 中存储的段描述符都是<ins>系统段描述符</ins></p>\n<p>IDT 可以包含三种门描述符：①任务门描述符；②中断门描述符；③陷阱门描述符</p>\n<p>在 windbg 中查看 IDT 表的基址和长度:</p>\n<p>查看地址： <code>r idtr</code></p>\n<p>查看长度： <code>r idtl</code></p>\n<h2 id=\"中断门描述符\"><a class=\"anchor\" href=\"#中断门描述符\">#</a> 中断门描述符</h2>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<p>当一个段描述符是一个调用门描述符时，有以下特征：</p>\n<ul>\n<li>S 位为 0，表示该段描述符为系统段描述符（中断门描述符属于系统段描述符）</li>\n<li>Type 域为 1110，表示该段描述符为 32 位中断门</li>\n<li>低 16 位到 31 位存储一个段选择子，该段选择子才和代码真正要调用的地址相关</li>\n<li>真正要调用的地址 = 段选择子所指向的段.Base + 32 位的段中偏移 （段中偏移分为两部分：高位 31-16 位和低位 15-0 位）</li>\n<li>段.Base 默认为 0，故真正要调用的地址 = 32 位的段中偏移</li>\n</ul>\n<h2 id=\"调用门描述符和中断门描述符各部分的对比\"><a class=\"anchor\" href=\"#调用门描述符和中断门描述符各部分的对比\">#</a> 调用门描述符和中断门描述符各部分的对比</h2>\n<p><img data-src=\"image002.png\" alt=\"\" /></p>\n<p>可以发现中断门描述符和调用门描述符的结构基本一致，只在 Type 域和参数计数处不同（Type 域是描述符的类型标识；中断门不允许传参）</p>\n<h2 id=\"中断门堆栈变化\"><a class=\"anchor\" href=\"#中断门堆栈变化\">#</a> 中断门堆栈变化</h2>\n<p>使用调用门的方法是 CALL FAR，而使用中断门的方法是  <code>INT N</code> ，其中，N 表示中断门描述符在 IDT 表中的下标。</p>\n<p>和调用门一样，中断门也可以用来提权。不提权时， <code>INT N</code>  会压栈 CS，EFLAG EIP；<br />\n提权时，会依次压栈 SS ESP EFLAG CS EIP。<br />\n需要用堆栈保存 EFLAG 是因为中断门会将 EFLAG 的 IF 位置 0。</p>\n<p><img data-src=\"image006.png\" alt=\"\" /></p>\n<h2 id=\"实践\"><a class=\"anchor\" href=\"#实践\">#</a> 实践</h2>\n<p>知道了理论，开始实践。</p>\n<ol>\n<li>构造 Interrupt Gate Descriptor</li>\n</ol>\n<p><code>0000 0000 0000 0000 1110 1110 0000 0000`0000 0000 0000 1000 0000 0000 0000 0000</code></p>\n<p>段内偏移还不确定，暂时置为 0。<br />\n十六进制为 <code>0000ee00`00080000</code></p>\n<ol start=\"2\">\n<li>测试代码</li>\n</ol>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;windows.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>DWORD dwH2GValue<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">__declspec</span><span class=\"token punctuation\">(</span>naked<span class=\"token punctuation\">)</span> <span class=\"token keyword\">void</span> <span class=\"token function\">GetH2GValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t__asm</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\tpushad</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\tpushfd</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 读高 2G 内存</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\tmov eax<span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">0x8003f00c</span><span class=\"token punctuation\">]</span>  </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\tmov ebx<span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span>eax<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\tmov dwH2GValue<span class=\"token punctuation\">,</span>ebx</pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\tpopfd</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\tpopad</pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\tiretd</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t__asm</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\tINT <span class=\"token number\">0x20</span>      <span class=\"token comment\">// 暂时有疑问，选这个索引是因为有的博客说这个地址没有用上。可是我在 windbg 中看到这个地址也是有值的。</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"dwH2GValue:%#X\"</span><span class=\"token punctuation\">,</span>dwH2GValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>VC 中反汇编查看</p>\n<p><img data-src=\"image003.png\" alt=\"\" /></p>\n<p>我们要跳转的地址为 <code>0x00401020</code></p>\n<p>确定 Interrupt Gate Descriptor 为： <code>0040ee00`00081020</code></p>\n<ol start=\"3\">\n<li>在 windbg 中赋值</li>\n</ol>\n<p>直接在 IDT 表中修改索引为 0x20 的中断门描述符</p>\n<p><code>eq 8003f500 0040ee00`00081020</code></p>\n<ol start=\"4\">\n<li>在调试机中运行代码</li>\n</ol>\n<p>结果：</p>\n<p><img data-src=\"image004.png\" alt=\"\" /></p>\n<p>在 windbg 中确认打印数值无误。</p>\n<p><img data-src=\"image005.png\" alt=\"\" /></p>\n<h1 id=\"reference\"><a class=\"anchor\" href=\"#reference\">#</a> Reference</h1>\n<p>滴水课件<br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuNTJwb2ppZS5jbi90aHJlYWQtMTQ1NTY4NC0xLTEuaHRtbA==\"> https://www.52pojie.cn/thread-1455684-1-1.html</span></p>\n",
            "tags": [
                "中断门描述符",
                "IDT",
                "提权"
            ]
        },
        {
            "id": "https://or0kit.github.io/Bin/Core/WindowsXp/Protect-Mode/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F-%E8%B0%83%E7%94%A8%E9%97%A8%E6%8F%90%E6%9D%83/",
            "url": "https://or0kit.github.io/Bin/Core/WindowsXp/Protect-Mode/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F-%E8%B0%83%E7%94%A8%E9%97%A8%E6%8F%90%E6%9D%83/",
            "title": "保护模式-调用门提权",
            "date_published": "2021-08-09T04:02:20.000Z",
            "content_html": "<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<p>在学习长调用时没有用实例具体分析，因为牵扯到了调用门的知识。</p>\n<h1 id=\"调用门\"><a class=\"anchor\" href=\"#调用门\">#</a> 调用门</h1>\n<h2 id=\"调用门的作用\"><a class=\"anchor\" href=\"#调用门的作用\">#</a> 调用门的作用</h2>\n<p>调用门可以用来提权，通过提权可以实现访问高地址空间等 RING0（内核）层才能进行的操作</p>\n<hr />\n<h2 id=\"调用门和长调用关系\"><a class=\"anchor\" href=\"#调用门和长调用关系\">#</a> 调用门和长调用关系</h2>\n<p>回顾先前的笔记可知：</p>\n<p>长调用 CALL FAR CS:EIP 指令要<strong>调用的地址</strong>是由 CS 段选择子查 GDT 得到的<strong>调用门</strong> 段描述符得来的，后面的 EIP 不发挥作用</p>\n<h2 id=\"调用门执行流程\"><a class=\"anchor\" href=\"#调用门执行流程\">#</a> 调用门执行流程</h2>\n<ol>\n<li>根据 CS 的值 查 GDT，找到对应的段描述符 这个描述符是一个调用门</li>\n<li>在调用门描述符中存储另一个代码段的选择子</li>\n<li>选择子指向的段 段.Base + 偏移地址 就是真正要执行的地址</li>\n</ol>\n<h2 id=\"调用门描述符\"><a class=\"anchor\" href=\"#调用门描述符\">#</a> 调用门描述符</h2>\n<h3 id=\"对比段描述符\"><a class=\"anchor\" href=\"#对比段描述符\">#</a> 对比段描述符</h3>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<p>调用门描述符结构</p>\n<p><img data-src=\"image002.png\" alt=\"\" /></p>\n<hr />\n<p>当一个段描述符是一个调用门描述符时，有以下特征：</p>\n<ul>\n<li>S 位为 0，表示该段描述符为系统段描述符（调用门描述符属于系统段描述符）</li>\n<li>Type 域为 1100，表示该段描述符为 32 位调用门</li>\n<li>低 16 位到 31 位由原本的基地址变为存储一个段选择子，该段选择子才和代码<strong>真正要调用的地址</strong>相关</li>\n<li>真正要调用的地址 = 段选择子所指向的段.Base + 32 位的段中偏移 （段中偏移分为两部分：高位 31-16 位和低位 15-0 位）</li>\n<li>段.Base 默认为 0，故真正要调用的地址 = 32 位的段中偏移</li>\n</ul>\n<hr />\n<p>给出段描述符和调用门描述符各部分的对比：</p>\n<hr />\n<h2 id=\"段描述符\"><a class=\"anchor\" href=\"#段描述符\">#</a> 段描述符</h2>\n<table>\n<thead>\n<tr>\n<th>数据位</th>\n<th>31-24</th>\n<th>23</th>\n<th>22</th>\n<th>21</th>\n<th>20</th>\n<th>19-16</th>\n<th>15</th>\n<th>14-13</th>\n<th>12</th>\n<th>11-8</th>\n<th>7-0</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>含义</td>\n<td>Base</td>\n<td>G</td>\n<td>D/B</td>\n<td>0</td>\n<td>AVL</td>\n<td>Seg.Limit</td>\n<td>P</td>\n<td>DPL</td>\n<td>S</td>\n<td>Type</td>\n<td>Base</td>\n<td></td>\n</tr>\n<tr>\n<td>解释</td>\n<td>基地址</td>\n<td>粒度</td>\n<td>默认操作大小</td>\n<td>固定为 0</td>\n<td>用于系统软件使用</td>\n<td>段大小限制</td>\n<td>有效位</td>\n<td>特权等级</td>\n<td>描述符类型</td>\n<td>段类型</td>\n<td>基地址</td>\n<td></td>\n</tr>\n</tbody>\n<tbody>\n<tr>\n<td>数据位</td>\n<td>31-16</td>\n<td>15</td>\n<td>14-13</td>\n<td>12</td>\n<td>11-8</td>\n<td>7-5</td>\n<td>4-0</td>\n</tr>\n<tr>\n<td>------</td>\n<td>--------</td>\n<td>------</td>\n<td>--------</td>\n<td>-----</td>\n<td>--------</td>\n<td>-------</td>\n<td>-----------</td>\n</tr>\n<tr>\n<td>含义</td>\n<td>offset</td>\n<td>P</td>\n<td>DPL</td>\n<td>S</td>\n<td>Type</td>\n<td>无</td>\n<td>param.count</td>\n</tr>\n<tr>\n<td>解释</td>\n<td>段中偏移</td>\n<td>有效位</td>\n<td>特权等级</td>\n<td>值为 0</td>\n<td>值为 1100</td>\n<td>值为 000</td>\n<td>参数计数</td>\n</tr>\n</tbody>\n</table>\n<hr />\n<h2 id=\"调用门描述符-2\"><a class=\"anchor\" href=\"#调用门描述符-2\">#</a> 调用门描述符</h2>\n<table>\n<thead>\n<tr>\n<th>数据位</th>\n<th>31-16</th>\n<th>15-0</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>含义</td>\n<td>Base Adress</td>\n<td>Segment Limit</td>\n</tr>\n<tr>\n<td>解释</td>\n<td>基地址</td>\n<td>段大小限制</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>数据位</td>\n<td>31-16</td>\n<td>15-0</td>\n</tr>\n<tr>\n<td>含义</td>\n<td>selector</td>\n<td>offset</td>\n</tr>\n<tr>\n<td>解释</td>\n<td>段选择子</td>\n<td>段中偏移</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"构造无参调用门描述符\"><a class=\"anchor\" href=\"#构造无参调用门描述符\">#</a> 构造无参调用门描述符</h2>\n<p>了解了调用门描述符的结构后，尝试自己构造一个无参的调用门描述符，如下：</p>\n<table>\n<thead>\n<tr>\n<th>数据位</th>\n<th>31-16</th>\n<th>15</th>\n<th>14-13</th>\n<th>12</th>\n<th>11-8</th>\n<th>7-5</th>\n<th>4-0</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>含义</td>\n<td>offset</td>\n<td>P</td>\n<td>DPL</td>\n<td>S</td>\n<td>Type</td>\n<td>无</td>\n<td>param</td>\n</tr>\n<tr>\n<td>解释</td>\n<td>段中偏移</td>\n<td>有效位</td>\n<td>特权等级</td>\n<td>值为 0</td>\n<td>值为 1100</td>\n<td>值为 000</td>\n<td>参数</td>\n</tr>\n<tr>\n<td>值（二进制）</td>\n<td>0</td>\n<td>1</td>\n<td>11</td>\n<td>0</td>\n<td>1100</td>\n<td>000</td>\n<td>0000</td>\n</tr>\n</tbody>\n<tbody>\n<tr>\n<td>数据位</td>\n<td>31-16</td>\n<td>15-0</td>\n</tr>\n<tr>\n<td>:-------------</td>\n<td>--------</td>\n<td>--------</td>\n</tr>\n<tr>\n<td>含义</td>\n<td>selector</td>\n<td>offset</td>\n</tr>\n<tr>\n<td>解释</td>\n<td>段选择子</td>\n<td>段中偏移</td>\n</tr>\n<tr>\n<td>值（十六进制）</td>\n<td>0x0008</td>\n<td>0</td>\n</tr>\n</tbody>\n</table>\n<p>得到调用门描述符为：0000EC00`00080000</p>\n<p>段中偏移暂时不明确要调用的代码段，先置 0</p>\n<h3 id=\"示例代码\"><a class=\"anchor\" href=\"#示例代码\">#</a> 示例代码</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">__declspec</span><span class=\"token punctuation\">(</span>naked<span class=\"token punctuation\">)</span> <span class=\"token keyword\">void</span> <span class=\"token function\">callGate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>         _asm<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                 <span class=\"token keyword\">int</span> <span class=\"token number\">3</span>                                <span class=\"token comment\">// 软中断</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                 retf                                <span class=\"token comment\">// 注意这里长调用对应长返回</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>         <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">char</span> buff<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">//*(DWORD*)&amp;buff [0]= 0x12345678;        // 低地址 32 位为 0x12345678，EIP 已废弃，故随便填即可</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">//*(DWORD*)&amp;buff [4]=0x48;                        // 高地址 16 位为 0x48，段选择子</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">// 也可以换作这种写法</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        _asm<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                mov dword ptr ds<span class=\"token operator\">:</span><span class=\"token punctuation\">[</span>buff<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x12345678</span>        <span class=\"token comment\">// 低 32 位赋值废弃 EIP</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                lea eax<span class=\"token punctuation\">,</span>dword ptr ds<span class=\"token operator\">:</span><span class=\"token punctuation\">[</span>buff<span class=\"token punctuation\">]</span>                        <span class=\"token comment\">// 将 buff 地址给 EAX</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                add eax<span class=\"token punctuation\">,</span><span class=\"token number\">4</span>                                                        <span class=\"token comment\">// 地址 + 4，即得到高地址</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                mov word ptr ds<span class=\"token operator\">:</span><span class=\"token punctuation\">[</span>eax<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x48</span>                        <span class=\"token comment\">// 高 16 位赋值段选择子 selector</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token comment\">// 使用 调用门</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        _asm<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                call fword ptr ds<span class=\"token operator\">:</span><span class=\"token punctuation\">[</span>buff<span class=\"token punctuation\">]</span>                        <span class=\"token comment\">//fword 数据宽度为 6 字节</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"代码说明\"><a class=\"anchor\" href=\"#代码说明\">#</a> 代码说明</h3>\n<p>代码十分简单，主要分为两部分：</p>\n<ul>\n<li>callGate：调用门真正要调用的函数，先软中断，然后长返回</li>\n<li>main：先构造一个 CS:EIP，这里为 0x48:0x12345678，然后使用调用门</li>\n</ul>\n<p>当我们发动调用门技能时，程序会跳转到我们构造的调用门描述符中预先设置的地址，并且我们的权限会提升到我们设置的权限！！可以做一些操作系统才能做的事情。</p>\n<h3 id=\"实验过程\"><a class=\"anchor\" href=\"#实验过程\">#</a> 实验过程</h3>\n<p>目前一些重要操作只能手动……</p>\n<ol>\n<li>确定要跳转的函数的地址</li>\n</ol>\n<p><img data-src=\"image003.png\" alt=\"\" /></p>\n<ol start=\"2\">\n<li>构造 Call-Gate 描述符</li>\n</ol>\n<p>要跳转的地址为： <code>0x00401020</code></p>\n<p>Call-Gate Descriptor: <code>0040ec00`00081020</code></p>\n<ol start=\"3\">\n<li>修改 GDT 表</li>\n</ol>\n<p><img data-src=\"image004.png\" alt=\"\" /></p>\n<p>修改 <code>0x8003f048</code>  这个地址，因为这是一个没有被用到的段描述符。</p>\n<p><code>eq 8003f048 0040ec00`00081020</code></p>\n<ol start=\"4\">\n<li>在调试机中执行上面的代码</li>\n</ol>\n<p>如果没有意外的话，调试机会被中断。</p>\n<h2 id=\"构造有参的调用门\"><a class=\"anchor\" href=\"#构造有参的调用门\">#</a> 构造有参的调用门</h2>\n<p>在构造调用门描述符时要说明参数个数，关于这个参数个数，需要注意的是，它的值共 5 位（5 个比特位）。</p>\n<h3 id=\"代码\"><a class=\"anchor\" href=\"#代码\">#</a> 代码</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;windows.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>DWORD x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>DWORD y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>DWORD z<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> <span class=\"token function\">__declspec</span><span class=\"token punctuation\">(</span>naked<span class=\"token punctuation\">)</span> <span class=\"token keyword\">void</span> <span class=\"token function\">callGate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        _asm<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                pushad                        <span class=\"token comment\">// 将所有 32 位通用寄存器压入堆栈</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                pushfd                        <span class=\"token comment\">// 将 32 位标志寄存器 EFLFAGS 压入堆栈</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                mov eax<span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span>esp<span class=\"token operator\">+</span><span class=\"token number\">0x24</span><span class=\"token operator\">+</span><span class=\"token number\">0x8</span><span class=\"token operator\">+</span><span class=\"token number\">0x8</span><span class=\"token punctuation\">]</span>    <span class=\"token comment\">// 从堆栈中取出第一个参数</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                mov dword ptr ds<span class=\"token operator\">:</span><span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>eax      <span class=\"token comment\">// 将取出的参数赋值给全局变量 x</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                mov eax<span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span>esp<span class=\"token operator\">+</span><span class=\"token number\">0x24</span><span class=\"token operator\">+</span><span class=\"token number\">0x8</span><span class=\"token operator\">+</span><span class=\"token number\">0x4</span><span class=\"token punctuation\">]</span>    <span class=\"token comment\">// 从堆栈中取出第二个参数</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                mov dword ptr ds<span class=\"token operator\">:</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>eax      <span class=\"token comment\">// 将取出的参数赋值给全局变量 y</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                mov eax<span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span>esp<span class=\"token operator\">+</span><span class=\"token number\">0x24</span><span class=\"token operator\">+</span><span class=\"token number\">8</span><span class=\"token operator\">+</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>        <span class=\"token comment\">// 从堆栈中取出第三个参数</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                mov dword ptr ds<span class=\"token operator\">:</span><span class=\"token punctuation\">[</span>z<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>eax      <span class=\"token comment\">// 将取出的参数赋值给全局变量 z</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                popfd                         <span class=\"token comment\">// 将所有 32 位通用寄存器出栈</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                popad                         <span class=\"token comment\">// 将所有 32 位标志寄存器 EFLFAGS 出栈</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                retf <span class=\"token number\">0xC</span>                      <span class=\"token comment\">// 注意这里长调用对应长返回，堆栈平衡 0xC=12=3*4 = 参数个数 * 参数的数据宽度（单位字节）</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">char</span> buff<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>DWORD<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>buff <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span> <span class=\"token number\">0x12345678</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// 低地址 32 位为 0x12345678，EIP 已废弃，故随便填即可</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>DWORD<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>buff <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">0x48</span><span class=\"token punctuation\">;</span>                        <span class=\"token comment\">// 高地址 16 位为 0x48，段选择子</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token comment\">// 也可以换作这种写法</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token comment\">//_asm&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token comment\">//        mov dword ptr ds:[buff],0x12345678        // 低 32 位赋值废弃 EIP</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token comment\">//        lea eax,dword ptr ds:[buff]                        // 将 buff 地址给 EAX</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token comment\">//        add eax,4                                                        // 地址 + 4，即得到高地址</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token comment\">//        mov word ptr ds:[eax],0x48                        // 高 16 位赋值段选择子 selector</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token comment\">//&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token comment\">// 使用 调用门</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        _asm<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                push <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                push <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                push <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                call fword ptr<span class=\"token punctuation\">[</span>buff<span class=\"token punctuation\">]</span>                        <span class=\"token comment\">//fword 数据宽度为 6 字节</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%X\\t%X\\t%X\\n\"</span><span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">,</span>z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"代码说明-2\"><a class=\"anchor\" href=\"#代码说明-2\">#</a> 代码说明</h3>\n<p>与构造无参调用门描述符相比，主要变化为：</p>\n<p>在使用调用门前压入了三个参数：1、2、3<br />\n 调用代码作用为：①保护现场（压入所有通用寄存器和标志寄存器）；②从堆栈中取出对应的参数；③将取出的参数赋值给对应的全局变量<br />\n调用代码最后要平衡堆栈，ret 0xC         0xC=12=3*4 = 参数个数 * 参数的数据宽度（单位字节）<br />\n在调用结束后，输出调用后被赋值的全局变量，验证参数是否成功传递</p>\n<h3 id=\"实验过程-2\"><a class=\"anchor\" href=\"#实验过程-2\">#</a> 实验过程</h3>\n<p>与无参基本一样。描述符中记加参数个数。<br />\n注意观察堆栈变化。</p>\n<h2 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h2>\n<p>当通过门，权限不变的时候，只会 PUSH 两个值：①CS（新的 CS 的值由调用门决定） ；②返回地址<br />\n当通过门，权限改变的时候，会 PUSH 四个值：①SS；② ESP；③ CS ；④ 返回地址   （新的 CS 的值由调用门决定  新的 SS 和 ESP 由 TSS 提供）<br />\n通过门调用时，要执行代码的地址由调用门中的选择子决定；使用 RETF 返回时，由堆栈中压入的返回地址决定</p>\n<h1 id=\"reference\"><a class=\"anchor\" href=\"#reference\">#</a> Reference</h1>\n<p>详细参见：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuNTJwb2ppZS5jbi90aHJlYWQtMTQ1NDM1My0xLTEuaHRtbA==\">https://www.52pojie.cn/thread-1454353-1-1.html</span></p>\n",
            "tags": [
                "提权",
                "调用门",
                "调用门描述符"
            ]
        }
    ]
}