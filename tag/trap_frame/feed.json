{
    "version": "https://jsonfeed.org/version/1",
    "title": "Or0kit • All posts by \"trap_frame\" tag",
    "description": "临渊羡鱼，不如退而结网",
    "home_page_url": "https://Or0kit.github.io",
    "items": [
        {
            "id": "https://or0kit.github.io/Bin/Core/WindowsXp/SystemCall/%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8-0%E7%8E%AF%E8%B0%83%E7%94%A8%E5%88%86%E6%9E%90/",
            "url": "https://or0kit.github.io/Bin/Core/WindowsXp/SystemCall/%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8-0%E7%8E%AF%E8%B0%83%E7%94%A8%E5%88%86%E6%9E%90/",
            "title": "系统调用-0环调用分析",
            "date_published": "2021-12-09T02:50:01.000Z",
            "content_html": "<h1 id=\"楔子\"><a class=\"anchor\" href=\"#楔子\">#</a> 楔子</h1>\n<p>上一次分析到 API 函数在  <code>ntdll.dll</code>  中的  <code>KiFastSystemCall</code>  与  <code>KiIntSystemCall</code>  函数。<br />\n补充一下，Windows API 的相关知识。</p>\n<p><code>API</code>  全称为  <code>Application Programming Interface</code> 。</p>\n<p>其中有几个比较重要的  <code>Dll</code> ，很多重要的函数都在这些动态链接库里面：</p>\n<ul>\n<li><code>Kernel32.dll</code> ：最核心的功能模块，比如管理内存、进程和线程相关的函数等。</li>\n<li><code>User32.dll</code> ：是  <code>Windows</code>  用户界面相关应用程序接口，如创建窗口和发送消息等。</li>\n<li><code>GDI32.dll</code> ：全称是  <code>Graphical Device Interface</code> ，即  <code>图形设备接口</code> ，包含用于画图和显示文本的函数。比如要显示一个程序窗口，就调用了其中的函数来画这个窗口。</li>\n<li><code>Ntdll.dll</code> ：大多数  <code>API</code>  都会通过这个  <code>DLL</code>  进入内核（0 环）。</li>\n</ul>\n<p>需要注意的是：并不是所有的  <code>API</code>  都必须要进 0 环的，有些功能完全可以在 3 环实现。</p>\n<p>我们可以知道函数在  <code>ntdll.dll</code>  中进入 R0, 那么它是如何实现的呢，进入 R0 后又做了什么呢？</p>\n<h1 id=\"分析-kifastsystemcall-与-kiintsystemcall\"><a class=\"anchor\" href=\"#分析-kifastsystemcall-与-kiintsystemcall\">#</a> 分析 KiFastSystemCall 与 KiIntSystemCall</h1>\n<h2 id=\"首先分析-kifastsystemcall\"><a class=\"anchor\" href=\"#首先分析-kifastsystemcall\">#</a> 首先分析 KiFastSystemCall</h2>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>_DWORD __stdcall KiFastSystemCall()</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>                public _KiFastSystemCall@0</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>_KiFastSystemCall@0 proc near           ; DATA XREF: .text:off_7C923428↑o</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                mov     edx, esp</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                sysenter</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>_KiFastSystemCall@0 endp</pre></td></tr></table></figure><p>在 KiFastSystemCall 中，先把 R3 的栈顶 esp 存到了 edx 中，然后执行了 sysenter 指令，那这个指令具体是怎么做的呢？</p>\n<h2 id=\"sysenter-指令进0环\"><a class=\"anchor\" href=\"#sysenter-指令进0环\">#</a> sysenter 指令进 0 环</h2>\n<p>如果要进入 R0 必须要指定相关的 CS SS EIP ESP。所以在执行  <code>sysenter</code>  指令之前，操作系统必须指定 0 环的  <code>CS</code> 、 <code>SS</code> 、 <code>EIP</code>  以及  <code>ESP</code> 。<br />\n而它们的值存储在  <code>MSR</code>  寄存器中，它的具体结构并未公开。<br />\n每个  <code>MSR</code>  寄存器都会有一个相应的  <code>ID</code> ，即  <code>MSR Index</code> 。当执行  <code>RDMSR</code>  或者  <code>WRMSR</code>  指令的时候，只要提供  <code>MSR Index</code>  就能让  <code>CPU</code>  知道目标  <code>MSR</code>  寄存器。</p>\n<table>\n<thead>\n<tr>\n<th>MSR</th>\n<th>Index</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>IA32_SYSENTER_CS</td>\n<td>174H</td>\n</tr>\n<tr>\n<td>IA32_SYSENTER_ESP</td>\n<td>175H</td>\n</tr>\n<tr>\n<td>IA32_SYSENTER_EIP</td>\n<td>176H</td>\n</tr>\n</tbody>\n</table>\n<p>其中并没有 SS 的值，这是因为 SS 的值是通过 CS + 0x8 算出来的。</p>\n<p>在 windbg 中查看一下</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kd&gt; rdmsr 174</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>msr[174] &#x3D; 00000000&#96;00000008</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>kd&gt; rdmsr 175</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>msr[175] &#x3D; 00000000&#96;ba4d0000</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>kd&gt; rdmsr 176</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>msr[176] &#x3D; 00000000&#96;805426e0</pre></td></tr></table></figure><p>查看 EIP 指向的函数：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kd&gt; u 805426e0</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>nt!KiFastCallEntry:</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>805426e0 b923000000      mov     ecx,23h</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>805426e5 6a30            push    30h</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>805426e7 0fa1            pop     fs</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>805426e9 8ed9            mov     ds,cx</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>805426eb 8ec1            mov     es,cx</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>805426ed 648b0d40000000  mov     ecx,dword ptr fs:[40h]</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>805426f4 8b6104          mov     esp,dword ptr [ecx+4]</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>805426f7 6a23            push    23h</pre></td></tr></table></figure><p><strong>发现是  <code>KiFastCallEntry</code>  函数</strong></p>\n<h2 id=\"接下来分析-kiintsystemcall\"><a class=\"anchor\" href=\"#接下来分析-kiintsystemcall\">#</a> 接下来分析 KiIntSystemCall</h2>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>_DWORD __stdcall KiIntSystemCall ()</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>                public _KiIntSystemCall@0</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>_KiIntSystemCall@0 proc near            ; DATA XREF: .text:off_7C923428↑o</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                lea     edx, [esp+8] ; 参数指针</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                int     2Eh             ; DOS 2+ internal - EXECUTE COMMAND</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                                        ; DS:SI -&gt; counted CR-terminated command string</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                retn</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>_KiIntSystemCall@0 endp</pre></td></tr></table></figure><p>首先把 esp+8 的地址给了 edx，然后使用中断门，触发中断，中断号是 0x2E，用 windbg 看看 2E 号中断的中断门描述符： <code> 8054ee00`00082611</code>  这个值在不同的计算机上应该都不一样。</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kd&gt; r idtr</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>idtr&#x3D;8003f400</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>kd&gt; dq 8003f400 + 0x2e * 8</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>8003f570  8054ee00&#96;00082611 80548e00&#96;0008590c</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>8003f580  80548e00&#96;00081cd0 80548e00&#96;00081cda</pre></td></tr></table></figure><p>拆分中断门描述符，可以得到新的 CS 是 0008（系统代码段），EIP 是  <code>80542611</code>  ，这个是内核模块的  <code>KiSystemService</code>  函数。</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kd&gt; u 80542611</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>nt!KiSystemService:</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>80542611 6a00            push    0</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>80542613 55              push    ebp</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>80542614 53              push    ebx</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>80542615 56              push    esi</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>80542616 57              push    edi</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>80542617 0fa0            push    fs</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>80542619 bb30000000      mov     ebx,30h</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>8054261e 668ee3          mov     fs,bx</pre></td></tr></table></figure><h2 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h2>\n<p><code>KiIntSystemCall</code>  通过中断门进 0 环：</p>\n<ol>\n<li>固定中断号为 0x2E</li>\n<li>CS/EIP 由门描述符提供   ESP/SS 由 TSS 提供</li>\n<li>进入 0 环后执行的内核函数： <code>NT!KiSystemService</code></li>\n</ol>\n<p><code>KiFastSystemCall</code>  通过 sysenter 指令进 0 环：</p>\n<ol>\n<li>CS/ESP/EIP 由 MSR 寄存器提供 (SS 是算出来的)</li>\n<li>进入 0 环后执行的内核函数： <code>NT!KiFastCallEntry</code></li>\n</ol>\n<h1 id=\"分析-kisystemservice-和-kifastcallentry-函数\"><a class=\"anchor\" href=\"#分析-kisystemservice-和-kifastcallentry-函数\">#</a> 分析 KiSystemService 和 KiFastCallEntry 函数</h1>\n<p>通过 <code>int 2E</code>  或者 <code>sysenter</code>  进入内核后，之后的流程会怎样继续进行呢？</p>\n<p>首先我们得知道这两个结构体  <code>Trap_Frame</code>  和  <code>KPCR</code> 。</p>\n<p>这里有一个小知识，和前面学的可以连起来。</p>\n<p>首先复习一下 TSS 表，TSS 表只有一张，但是系统里有成百上千的线程，线程进 0 环时，假设使用中断门，0 环的 ESP 和 SS 从 TSS 表获取，怎么保证每个线程都有自己的堆栈，不互相冲突呢？答案是，线程切换时会修改 TSS 表，确保每个线程执行时，TSS 里的 ESP,SS 都对应当前线程。</p>\n<p><code>Trap_Frame</code>  和 0 环栈密切相关。用户定义中断进 0 环，涉及提权时，CPU 会把 5 个寄存器的值压入 0 环堆栈，这是我们在中断门的课程里学习过的：</p>\n<p><img data-src=\"image001.png\" alt=\"\" /><br />\n上图是不完整的。</p>\n<p>实际上，完整的 0 环的栈是 Trap_Frame，中断门进 0 环后，新的 ESP 指向偏移 0x068（Eip）处。</p>\n<h2 id=\"trap_frame\"><a class=\"anchor\" href=\"#trap_frame\">#</a> Trap_Frame</h2>\n<p><img data-src=\"image002.png\" alt=\"\" /></p>\n<p>在 windbg 中查看</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kd&gt; dt _KTRAP_FRAME</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>nt!_KTRAP_FRAME</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   +0x000 DbgEbp           : Uint4B</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   +0x004 DbgEip           : Uint4B</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   +0x008 DbgArgMark       : Uint4B</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   +0x00c DbgArgPointer    : Uint4B</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   +0x010 TempSegCs        : Uint4B</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   +0x014 TempEsp          : Uint4B</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   +0x018 Dr0              : Uint4B</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   +0x01c Dr1              : Uint4B</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   +0x020 Dr2              : Uint4B</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   +0x024 Dr3              : Uint4B</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   +0x028 Dr6              : Uint4B</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   +0x02c Dr7              : Uint4B</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   +0x030 SegGs            : Uint4B</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   +0x034 SegEs            : Uint4B</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   +0x038 SegDs            : Uint4B</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   +0x03c Edx              : Uint4B</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   +0x040 Ecx              : Uint4B</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>   +0x044 Eax              : Uint4B</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>   +0x048 PreviousPreviousMode : Uint4B</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>   +0x04c ExceptionList    : Ptr32 _EXCEPTION_REGISTRATION_RECORD</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>   +0x050 SegFs            : Uint4B</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>   +0x054 Edi              : Uint4B</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>   +0x058 Esi              : Uint4B</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>   +0x05c Ebx              : Uint4B</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>   +0x060 Ebp              : Uint4B</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>   +0x064 ErrCode          : Uint4B</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>   +0x068 Eip              : Uint4B</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>   +0x06c SegCs            : Uint4B</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>   +0x070 EFlags           : Uint4B</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>   +0x074 HardwareEsp      : Uint4B</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>   +0x078 HardwareSegSs    : Uint4B</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>   +0x07c V86Es            : Uint4B</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>   +0x080 V86Ds            : Uint4B</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>   +0x084 V86Fs            : Uint4B</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>   +0x088 V86Gs            : Uint4B</pre></td></tr></table></figure><p>_Trap_Frame 结构体，实际上是 windows 对内核栈的使用约定，它约定了不同的偏移分别用来存储什么数据。</p>\n<p>我们待会逆向 KiSystemService 的时候会发现，第一条指令就是 push 0，意思就是设置 ErrCode = 0。</p>\n<p>第一个问题：进 0 环后，原来的寄存器存在哪里？</p>\n<p>看到这个结构，相信你已经有了答案，我们可以通过逆向 KiSystemService 来验证猜想。</p>\n<h2 id=\"_kpcr-_nt_tib-_kprcb\"><a class=\"anchor\" href=\"#_kpcr-_nt_tib-_kprcb\">#</a> _KPCR, _NT_TIB, _KPRCB</h2>\n<p><img data-src=\"image003.png\" alt=\"\" /></p>\n<p>这三个结构体存储了当前 CPU 的信息，其实这三个结构体是一个结构体，只不过抽象成三部分而已。地址固定是 0xffdff000。</p>\n<p><code>_KPCR</code> <br />\nKPCR（Processor Control Region）是 CPU 控制区的意思，每个 CPU 都有一个 KPCR 结构。</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>nt!_KPCR</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   +0x000 NtTib            : _NT_TIB</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   +0x01c SelfPcr          : Ptr32 _KPCR</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   +0x020 Prcb             : Ptr32 _KPRCB</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   +0x024 Irql             : UChar</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   +0x028 IRR              : Uint4B</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   +0x02c IrrActive        : Uint4B</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   +0x030 IDR              : Uint4B</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   +0x034 KdVersionBlock   : Ptr32 Void</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   +0x038 IDT              : Ptr32 _KIDTENTRY</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   +0x03c GDT              : Ptr32 _KGDTENTRY</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   +0x040 TSS              : Ptr32 _KTSS</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   +0x044 MajorVersion     : Uint2B</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   +0x046 MinorVersion     : Uint2B</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   +0x048 SetMember        : Uint4B</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   +0x04c StallScaleFactor : Uint4B</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   +0x050 DebugActive      : UChar</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   +0x051 Number           : UChar</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   +0x052 Spare0           : UChar</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>   +0x053 SecondLevelCacheAssociativity : UChar</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>   +0x054 VdmAlert         : Uint4B</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>   +0x058 KernelReserved   : [14] Uint4B</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>   +0x090 SecondLevelCacheSize : Uint4B</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>   +0x094 HalReserved      : [16] Uint4B</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>   +0x0d4 InterruptMode    : Uint4B</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>   +0x0d8 Spare1           : UChar</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>   +0x0dc KernelReserved2  : [17] Uint4B</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>   +0x120 PrcbData         : _KPRCB</pre></td></tr></table></figure><p><code>_NT_TIB</code> <br />\n 主要存储了 SEH 结构化异常链表和一个指向自己的指针。</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>nt!_NT_TIB</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   +0x000 ExceptionList    : Ptr32 _EXCEPTION_REGISTRATION_RECORD</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   +0x004 StackBase        : Ptr32 Void</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   +0x008 StackLimit       : Ptr32 Void</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   +0x00c SubSystemTib     : Ptr32 Void</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   +0x010 FiberData        : Ptr32 Void</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   +0x010 Version          : Uint4B</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   +0x014 ArbitraryUserPointer : Ptr32 Void</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   +0x018 Self             : Ptr32 _NT_TIB</pre></td></tr></table></figure><p><code>_KPRCB</code></p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>nt!_KPRCB</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   +0x000 MinorVersion     : Uint2B</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   +0x002 MajorVersion     : Uint2B</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   +0x004 CurrentThread    : Ptr32 _KTHREAD</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   +0x008 NextThread       : Ptr32 _KTHREAD</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   +0x00c IdleThread       : Ptr32 _KTHREAD</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   +0x010 Number           : Char</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   +0x011 Reserved         : Char</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   +0x012 BuildType        : Uint2B</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   +0x014 SetMember        : Uint4B</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   +0x018 CpuType          : Char</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   +0x019 CpuID            : Char</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   +0x01a CpuStep          : Uint2B</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   +0x01c ProcessorState   : _KPROCESSOR_STATE</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   +0x33c KernelReserved   : [16] Uint4B</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   +0x37c HalReserved      : [16] Uint4B</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   +0x3bc PrcbPad0         : [92] UChar</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   +0x418 LockQueue        : [16] _KSPIN_LOCK_QUEUE</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   +0x498 PrcbPad1         : [8] UChar</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>   +0x4a0 NpxThread        : Ptr32 _KTHREAD</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>   +0x4a4 InterruptCount   : Uint4B</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>   +0x4a8 KernelTime       : Uint4B</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>   +0x4ac UserTime         : Uint4B</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>   +0x4b0 DpcTime          : Uint4B</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>   +0x4b4 DebugDpcTime     : Uint4B</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>   +0x4b8 InterruptTime    : Uint4B</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>   +0x4bc AdjustDpcThreshold : Uint4B</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>   +0x4c0 PageColor        : Uint4B</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>   +0x4c4 SkipTick         : Uint4B</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>   +0x4c8 MultiThreadSetBusy : UChar</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>   +0x4c9 Spare2           : [3] UChar</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>   +0x4cc ParentNode       : Ptr32 _KNODE</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>   +0x4d0 MultiThreadProcessorSet : Uint4B</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>   +0x4d4 MultiThreadSetMaster : Ptr32 _KPRCB</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>   +0x4d8 ThreadStartCount : [2] Uint4B</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>   +0x4e0 CcFastReadNoWait : Uint4B</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>   +0x4e4 CcFastReadWait   : Uint4B</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>   +0x4e8 CcFastReadNotPossible : Uint4B</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>   +0x4ec CcCopyReadNoWait : Uint4B</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>   +0x4f0 CcCopyReadWait   : Uint4B</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>   +0x4f4 CcCopyReadNoWaitMiss : Uint4B</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>   +0x4f8 KeAlignmentFixupCount : Uint4B</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>   +0x4fc KeContextSwitches : Uint4B</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>   +0x500 KeDcacheFlushCount : Uint4B</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>   +0x504 KeExceptionDispatchCount : Uint4B</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>   +0x508 KeFirstLevelTbFills : Uint4B</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>   +0x50c KeFloatingEmulationCount : Uint4B</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>   +0x510 KeIcacheFlushCount : Uint4B</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>   +0x514 KeSecondLevelTbFills : Uint4B</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>   +0x518 KeSystemCalls    : Uint4B</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>   +0x51c SpareCounter0    : [1] Uint4B</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>   +0x520 PPLookasideList  : [16] _PP_LOOKASIDE_LIST</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>   +0x5a0 PPNPagedLookasideList : [32] _PP_LOOKASIDE_LIST</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>   +0x6a0 PPPagedLookasideList : [32] _PP_LOOKASIDE_LIST</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>   +0x7a0 PacketBarrier    : Uint4B</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>   +0x7a4 ReverseStall     : Uint4B</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>   +0x7a8 IpiFrame         : Ptr32 Void</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>   +0x7ac PrcbPad2         : [52] UChar</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>   +0x7e0 CurrentPacket    : [3] Ptr32 Void</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>   +0x7ec TargetSet        : Uint4B</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>   +0x7f0 WorkerRoutine    : Ptr32     void </pre></td></tr><tr><td data-num=\"62\"></td><td><pre>   +0x7f4 IpiFrozen        : Uint4B</pre></td></tr><tr><td data-num=\"63\"></td><td><pre>   +0x7f8 PrcbPad3         : [40] UChar</pre></td></tr><tr><td data-num=\"64\"></td><td><pre>   +0x820 RequestSummary   : Uint4B</pre></td></tr><tr><td data-num=\"65\"></td><td><pre>   +0x824 SignalDone       : Ptr32 _KPRCB</pre></td></tr><tr><td data-num=\"66\"></td><td><pre>   +0x828 PrcbPad4         : [56] UChar</pre></td></tr><tr><td data-num=\"67\"></td><td><pre>   +0x860 DpcListHead      : _LIST_ENTRY</pre></td></tr><tr><td data-num=\"68\"></td><td><pre>   +0x868 DpcStack         : Ptr32 Void</pre></td></tr><tr><td data-num=\"69\"></td><td><pre>   +0x86c DpcCount         : Uint4B</pre></td></tr><tr><td data-num=\"70\"></td><td><pre>   +0x870 DpcQueueDepth    : Uint4B</pre></td></tr><tr><td data-num=\"71\"></td><td><pre>   +0x874 DpcRoutineActive : Uint4B</pre></td></tr><tr><td data-num=\"72\"></td><td><pre>   +0x878 DpcInterruptRequested : Uint4B</pre></td></tr><tr><td data-num=\"73\"></td><td><pre>   +0x87c DpcLastCount     : Uint4B</pre></td></tr><tr><td data-num=\"74\"></td><td><pre>   +0x880 DpcRequestRate   : Uint4B</pre></td></tr><tr><td data-num=\"75\"></td><td><pre>   +0x884 MaximumDpcQueueDepth : Uint4B</pre></td></tr><tr><td data-num=\"76\"></td><td><pre>   +0x888 MinimumDpcRate   : Uint4B</pre></td></tr><tr><td data-num=\"77\"></td><td><pre>   +0x88c QuantumEnd       : Uint4B</pre></td></tr><tr><td data-num=\"78\"></td><td><pre>   +0x890 PrcbPad5         : [16] UChar</pre></td></tr><tr><td data-num=\"79\"></td><td><pre>   +0x8a0 DpcLock          : Uint4B</pre></td></tr><tr><td data-num=\"80\"></td><td><pre>   +0x8a4 PrcbPad6         : [28] UChar</pre></td></tr><tr><td data-num=\"81\"></td><td><pre>   +0x8c0 CallDpc          : _KDPC</pre></td></tr><tr><td data-num=\"82\"></td><td><pre>   +0x8e0 ChainedInterruptList : Ptr32 Void</pre></td></tr><tr><td data-num=\"83\"></td><td><pre>   +0x8e4 LookasideIrpFloat : Int4B</pre></td></tr><tr><td data-num=\"84\"></td><td><pre>   +0x8e8 SpareFields0     : [6] Uint4B</pre></td></tr><tr><td data-num=\"85\"></td><td><pre>   +0x900 VendorString     : [13] UChar</pre></td></tr><tr><td data-num=\"86\"></td><td><pre>   +0x90d InitialApicId    : UChar</pre></td></tr><tr><td data-num=\"87\"></td><td><pre>   +0x90e LogicalProcessorsPerPhysicalProcessor : UChar</pre></td></tr><tr><td data-num=\"88\"></td><td><pre>   +0x910 MHz              : Uint4B</pre></td></tr><tr><td data-num=\"89\"></td><td><pre>   +0x914 FeatureBits      : Uint4B</pre></td></tr><tr><td data-num=\"90\"></td><td><pre>   +0x918 UpdateSignature  : _LARGE_INTEGER</pre></td></tr><tr><td data-num=\"91\"></td><td><pre>   +0x920 NpxSaveArea      : _FX_SAVE_AREA</pre></td></tr><tr><td data-num=\"92\"></td><td><pre>   +0xb30 PowerState       : _PROCESSOR_POWER_STATE</pre></td></tr></table></figure><h2 id=\"_ethread-_kthread\"><a class=\"anchor\" href=\"#_ethread-_kthread\">#</a> _ETHREAD, _KTHREAD</h2>\n<p>这俩其实也是同一个结构体，刚才介绍的 _KPRCB + 0x04 里用到了 _KTHREAD。这俩结构体存储的是线程相关的信息。</p>\n<p><code>_ETHREAD</code></p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>nt!_ETHREAD</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   +0x000 Tcb              : _KTHREAD</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   +0x1c0 CreateTime       : _LARGE_INTEGER</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   +0x1c0 NestedFaultCount : Pos 0, 2 Bits</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   +0x1c0 ApcNeeded        : Pos 2, 1 Bit</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   +0x1c8 ExitTime         : _LARGE_INTEGER</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   +0x1c8 LpcReplyChain    : _LIST_ENTRY</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   +0x1c8 KeyedWaitChain   : _LIST_ENTRY</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   +0x1d0 ExitStatus       : Int4B</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   +0x1d0 OfsChain         : Ptr32 Void</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   +0x1d4 PostBlockList    : _LIST_ENTRY</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   +0x1dc TerminationPort  : Ptr32 _TERMINATION_PORT</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   +0x1dc ReaperLink       : Ptr32 _ETHREAD</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   +0x1dc KeyedWaitValue   : Ptr32 Void</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   +0x1e0 ActiveTimerListLock : Uint4B</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   +0x1e4 ActiveTimerListHead : _LIST_ENTRY</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   +0x1ec Cid              : _CLIENT_ID</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   +0x1f4 LpcReplySemaphore : _KSEMAPHORE</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   +0x1f4 KeyedWaitSemaphore : _KSEMAPHORE</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>   +0x208 LpcReplyMessage  : Ptr32 Void</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>   +0x208 LpcWaitingOnPort : Ptr32 Void</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>   +0x20c ImpersonationInfo : Ptr32 _PS_IMPERSONATION_INFORMATION</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>   +0x210 IrpList          : _LIST_ENTRY</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>   +0x218 TopLevelIrp      : Uint4B</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>   +0x21c DeviceToVerify   : Ptr32 _DEVICE_OBJECT</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>   +0x220 ThreadsProcess   : Ptr32 _EPROCESS</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>   +0x224 StartAddress     : Ptr32 Void</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>   +0x228 Win32StartAddress : Ptr32 Void</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>   +0x228 LpcReceivedMessageId : Uint4B</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>   +0x22c ThreadListEntry  : _LIST_ENTRY</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>   +0x234 RundownProtect   : _EX_RUNDOWN_REF</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>   +0x238 ThreadLock       : _EX_PUSH_LOCK</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>   +0x23c LpcReplyMessageId : Uint4B</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>   +0x240 ReadClusterSize  : Uint4B</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>   +0x244 GrantedAccess    : Uint4B</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>   +0x248 CrossThreadFlags : Uint4B</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>   +0x248 Terminated       : Pos 0, 1 Bit</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>   +0x248 DeadThread       : Pos 1, 1 Bit</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>   +0x248 HideFromDebugger : Pos 2, 1 Bit</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>   +0x248 ActiveImpersonationInfo : Pos 3, 1 Bit</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>   +0x248 SystemThread     : Pos 4, 1 Bit</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>   +0x248 HardErrorsAreDisabled : Pos 5, 1 Bit</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>   +0x248 BreakOnTermination : Pos 6, 1 Bit</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>   +0x248 SkipCreationMsg  : Pos 7, 1 Bit</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>   +0x248 SkipTerminationMsg : Pos 8, 1 Bit</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>   +0x24c SameThreadPassiveFlags : Uint4B</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>   +0x24c ActiveExWorker   : Pos 0, 1 Bit</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>   +0x24c ExWorkerCanWaitUser : Pos 1, 1 Bit</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>   +0x24c MemoryMaker      : Pos 2, 1 Bit</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>   +0x250 SameThreadApcFlags : Uint4B</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>   +0x250 LpcReceivedMsgIdValid : Pos 0, 1 Bit</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>   +0x250 LpcExitThreadCalled : Pos 1, 1 Bit</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>   +0x250 AddressSpaceOwner : Pos 2, 1 Bit</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>   +0x254 ForwardClusterOnly : UChar</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>   +0x255 DisablePageFaultClustering : UChar</pre></td></tr></table></figure><p><code>_KTHREAD</code></p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>nt!_KTHREAD</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   +0x000 Header           : _DISPATCHER_HEADER</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   +0x010 MutantListHead   : _LIST_ENTRY</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   +0x018 InitialStack     : Ptr32 Void</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   +0x01c StackLimit       : Ptr32 Void</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   +0x020 Teb              : Ptr32 Void</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   +0x024 TlsArray         : Ptr32 Void</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   +0x028 KernelStack      : Ptr32 Void</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   +0x02c DebugActive      : UChar</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   +0x02d State            : UChar</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   +0x02e Alerted          : [2] UChar</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   +0x030 Iopl             : UChar</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   +0x031 NpxState         : UChar</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   +0x032 Saturation       : Char</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   +0x033 Priority         : Char</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   +0x034 ApcState         : _KAPC_STATE</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   +0x04c ContextSwitches  : Uint4B</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   +0x050 IdleSwapBlock    : UChar</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   +0x051 Spare0           : [3] UChar</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>   +0x054 WaitStatus       : Int4B</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>   +0x058 WaitIrql         : UChar</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>   +0x059 WaitMode         : Char</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>   +0x05a WaitNext         : UChar</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>   +0x05b WaitReason       : UChar</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>   +0x05c WaitBlockList    : Ptr32 _KWAIT_BLOCK</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>   +0x060 WaitListEntry    : _LIST_ENTRY</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>   +0x060 SwapListEntry    : _SINGLE_LIST_ENTRY</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>   +0x068 WaitTime         : Uint4B</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>   +0x06c BasePriority     : Char</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>   +0x06d DecrementCount   : UChar</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>   +0x06e PriorityDecrement : Char</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>   +0x06f Quantum          : Char</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>   +0x070 WaitBlock        : [4] _KWAIT_BLOCK</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>   +0x0d0 LegoData         : Ptr32 Void</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>   +0x0d4 KernelApcDisable : Uint4B</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>   +0x0d8 UserAffinity     : Uint4B</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>   +0x0dc SystemAffinityActive : UChar</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>   +0x0dd PowerState       : UChar</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>   +0x0de NpxIrql          : UChar</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>   +0x0df InitialNode      : UChar</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>   +0x0e0 ServiceTable     : Ptr32 Void</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>   +0x0e4 Queue            : Ptr32 _KQUEUE</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>   +0x0e8 ApcQueueLock     : Uint4B</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>   +0x0f0 Timer            : _KTIMER</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>   +0x118 QueueListEntry   : _LIST_ENTRY</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>   +0x120 SoftAffinity     : Uint4B</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>   +0x124 Affinity         : Uint4B</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>   +0x128 Preempted        : UChar</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>   +0x129 ProcessReadyQueue : UChar</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>   +0x12a KernelStackResident : UChar</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>   +0x12b NextProcessor    : UChar</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>   +0x12c CallbackStack    : Ptr32 Void</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>   +0x130 Win32Thread      : Ptr32 Void</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>   +0x134 TrapFrame        : Ptr32 _KTRAP_FRAME</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>   +0x138 ApcStatePointer  : [2] Ptr32 _KAPC_STATE</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>   +0x140 PreviousMode     : Char</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>   +0x141 EnableStackSwap  : UChar</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>   +0x142 LargeStack       : UChar</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>   +0x143 ResourceIndex    : UChar</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>   +0x144 KernelTime       : Uint4B</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>   +0x148 UserTime         : Uint4B</pre></td></tr><tr><td data-num=\"62\"></td><td><pre>   +0x14c SavedApcState    : _KAPC_STATE</pre></td></tr><tr><td data-num=\"63\"></td><td><pre>   +0x164 Alertable        : UChar</pre></td></tr><tr><td data-num=\"64\"></td><td><pre>   +0x165 ApcStateIndex    : UChar</pre></td></tr><tr><td data-num=\"65\"></td><td><pre>   +0x166 ApcQueueable     : UChar</pre></td></tr><tr><td data-num=\"66\"></td><td><pre>   +0x167 AutoAlignment    : UChar</pre></td></tr><tr><td data-num=\"67\"></td><td><pre>   +0x168 StackBase        : Ptr32 Void</pre></td></tr><tr><td data-num=\"68\"></td><td><pre>   +0x16c SuspendApc       : _KAPC</pre></td></tr><tr><td data-num=\"69\"></td><td><pre>   +0x19c SuspendSemaphore : _KSEMAPHORE</pre></td></tr><tr><td data-num=\"70\"></td><td><pre>   +0x1b0 ThreadListEntry  : _LIST_ENTRY</pre></td></tr><tr><td data-num=\"71\"></td><td><pre>   +0x1b8 FreezeCount      : Char</pre></td></tr><tr><td data-num=\"72\"></td><td><pre>   +0x1b9 SuspendCount     : Char</pre></td></tr><tr><td data-num=\"73\"></td><td><pre>   +0x1ba IdealProcessor   : UChar</pre></td></tr><tr><td data-num=\"74\"></td><td><pre>   +0x1bb DisableBoost     : UChar</pre></td></tr></table></figure><h2 id=\"分析-kifastcallentry\"><a class=\"anchor\" href=\"#分析-kifastcallentry\">#</a> 分析 KiFastCallEntry</h2>\n<p>在 IDA 中查看内核函数 KiFastCallEntry，发现有两个：</p>\n<p><img data-src=\"image004.png\" alt=\"\" /></p>\n<p>这是因为，内核函数也是有两套的，一套给用户层用，一套给内核层用。</p>\n<p>提权与不提权的堆栈变化不同。</p>\n<p>我们从 3 环来的，走的是 KiFastCallEntry。</p>\n<p>首先函数修改了 FS 段寄存器的段选择子，使其指向了 KPCR 这个结构。</p>\n<p>这个我们可以根据段选择子查 GDT 表，查看 KPCR 的位置。</p>\n<p><img data-src=\"image005.png\" alt=\"\" /></p>\n<p>在其中 0x120 处的 KPRCB 结构中也可以看 CPU 的厂商，其原理还是用 cpuid 指令查询后写到这里的。</p>\n<p><code>+0x900 VendorString     : [13]  &quot;GenuineIntel&quot;</code></p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>.text:0046A6E0 _KiFastCallEntry proc near              ; DATA XREF: KiLoadFastSyscallMachineSpecificRegisters (x)+24↑o</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>.text:0046A6E0                                         ; _KiTrap01+74↓o</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>.text:0046A6E0                 mov     ecx, 23h ; &#39;#&#39;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>.text:0046A6E5                 push    30h ; &#39;0&#39;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>.text:0046A6E7                 pop     fs              ; 修改 FS 段选择子 0 环的 FS 指向 KPCR 这个结构体 3 环的指向 TEB</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>.text:0046A6E9                 mov     ds, ecx         ; 修改 ds es 段选择子，在 3 环好像也是 0x23</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>.text:0046A6EB                 mov     es, ecx</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>.text:0046A6EB _KiFastCallEntry endp</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>.text:0046A6EB</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>.text:0046A6ED                 mov     ecx, large fs:_KPCR.TSS ; 取 TSS 的地址赋给 ecx</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>.text:0046A6F4                 mov     esp, [ecx+_KTSS.Esp0] ; 取 TSS 中存储的 0 环的 ESP。这个 ESP 指向的是 KTRAP_FRAME 结构，后面的压栈都是往这个结构体重填充数据。</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>.text:0046A6F7                 push    23h ; &#39;#&#39;       ; 系统写死了，这里相结构体中填充的是 3 环的 SS，既修改 3 环的 SS 为 0x23</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>.text:0046A6F9                 push    edx             ; 把 3 环的 esp 压栈</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>.text:0046A6FA                 pushf                   ; 压入 16 位的 flags。esp 会 - 2</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>.text:0046A6FB</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>.text:0046A6FB loc_46A6FB:                             ; CODE XREF: _KiFastCallEntry2+23↑j</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>.text:0046A6FB                 push    2</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>.text:0046A6FD                 add     edx, 8          ; 取参数。esp+8 的位置 是 三环压入的参数的起始位置</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>.text:0046A700                 popf                    ; 修改 EFLAGS 为 2。因为 eflags 的第 1（从 0 开始计数）位默认要为 1。即清空 Eflag</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>.text:0046A701                 or      byte ptr [esp+1], 2 ; 对压入的 16 位 3 环 flags 寄存器的值的第 9（从 0 开始）位进行或操作。既把第 9 位的值置为 1。</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>.text:0046A706                 push    1Bh             ; SegCs</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>.text:0046A708                 push    dword ptr ds:0FFDF0304h ; 返回地址 既结构体 KUSER_SHARED_DATA 中的 SystemCallReturn 成员</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>.text:0046A70E                 push    0               ; ErrorCode</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>.text:0046A710                 push    ebp</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>.text:0046A711                 push    ebx</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>.text:0046A712                 push    esi</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>.text:0046A713                 push    edi</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>.text:0046A714                 mov     ebx, large fs:_KPCR.SelfPcr ; ebx &#x3D; KPCR</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>.text:0046A71B                 push    3Bh ; &#39;;&#39;       ; SegFs。系统写死了是 0x3B, 这说明不论是单核还是多核，在 GDT 中 0x3B 这个位置就是 3 环的 fs</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>.text:0046A71D                 mov     esi, [ebx+_KPCR.PrcbData.CurrentThread] ; esi &#x3D; 当前 CPU 所执行线程的_ETHREAD 结构体</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>.text:0046A723                 push    dword ptr [ebx] ; 压入 3 环的 ExceptionList</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>.text:0046A725                 mov     dword ptr [ebx], 0FFFFFFFFh ; 将 ExceptionList 置 -1（EXCEPTION_CHAIN_END）</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>.text:0046A72B                 mov     ebp, [esi+_ETHREAD.Tcb.InitialStack] ; 线程初始的栈</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>.text:0046A72E                 push    1               ; 存储到 PreviousMode（先前模式）。</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>.text:0046A72E                                         ; 1 表示表示用户态进来</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>.text:0046A730                 sub     esp, 48h        ; 栈顶提升 0x48。指向_KTRAP_FRAME 结构体的第一个成员</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>.text:0046A733                 sub     ebp, 29Ch       ; 减去 0x29c 后指向的与 esp 是同一个位置</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>.text:0046A739                 mov     [esi+_ETHREAD.Tcb.PreviousMode], 1</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>.text:0046A740                 cmp     ebp, esp</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>.text:0046A742                 jnz     short loc_46A6D1 ; 如果不相等，跳入异常</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>.text:0046A744                 and     [ebp+_KTRAP_FRAME.Dr7], 0 ; 把调试相关的寄存器 Dr7（控制寄存器，debug 异常发生的允许条件由 Dr7 控制）设置为 0</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>.text:0046A748                 test    [esi+_ETHREAD.Tcb.DebugActive], 0FFh ; 判断线程是否是在调试的状态</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>.text:0046A74C                 mov     [esi+_ETHREAD.Tcb.TrapFrame], ebp ; 保存当前线程的环境，这样我们的环境就和线程相关联了。</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>.text:0046A752                 jnz     Dr_FastCallDrSave ; 若是调试的话会接着填充 Trap_Frame 结构体中调试相关的成员。</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>.text:0046A758 loc_46A758:                             ; CODE XREF: Dr_FastCallDrSave+10↑j</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>.text:0046A758                                         ; Dr_FastCallDrSave+7C↑j</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>.text:0046A758                 mov     ebx, [ebp+_KTRAP_FRAME._Ebp] ; ebx &#x3D; TrapFrame.Ebp</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>.text:0046A75B                 mov     edi, [ebp+_KTRAP_FRAME._Eip] ; edi &#x3D; TrapFrame.Eip</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>.text:0046A75E                 mov     [ebp+_KTRAP_FRAME.DbgArgPointer], edx ; DbgArgPointer &#x3D; 3 环传来的参数列表</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>.text:0046A761                 mov     [ebp+_KTRAP_FRAME.DbgArgMark], 0BADB0D00h ; DbgArgMark 掩码，现在记住就行</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>.text:0046A768                 mov     [ebp+_KTRAP_FRAME.DbgEbp], ebx ; DbgEbp &#x3D; Trap_Frame.Ebp</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>.text:0046A76B                 mov     [ebp+_KTRAP_FRAME.DbgEip], edi ; DbgEip &#x3D; Trap_Frame.DbgEip</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>.text:0046A76E                 sti                     ; 启用中断，不允许别人打断</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>.text:0046A76F</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>.text:0046A76F loc_46A76F:                             ; CODE XREF: _KiBBTUnexpectedRange+18↑j</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>.text:0046A76F                                         ; _KiSystemService+72↑j</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>.text:0046A76F                 mov     edi, eax        ; 取 3 环传来的服务号</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>.text:0046A771                 shr     edi, 8          ; 右移 8 位</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>.text:0046A774                 and     edi, 30h        ; (（编号 &gt;&gt;8) &amp; 0x30) 确定是哪个表中。也就是说大于 0xFFF 的在另一个表中</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>.text:0046A777                 mov     ecx, edi        ; ecx &#x3D; 表的偏移</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>.text:0046A779                 add     edi, [esi+_ETHREAD.Tcb.ServiceTable] ; edi &#x3D; 服务表。线程初始化的时候 SSDT 表的值就已经放到这里了。</pre></td></tr><tr><td data-num=\"62\"></td><td><pre>.text:0046A77F                 mov     ebx, eax        ; ebx &#x3D; 3 环传来的服务号</pre></td></tr><tr><td data-num=\"63\"></td><td><pre>.text:0046A781                 and     eax, 0FFFh      ; 获取真正的编号</pre></td></tr><tr><td data-num=\"64\"></td><td><pre>.text:0046A786                 cmp     eax, [edi+8]    ; 服务表加 8，服务表里的函数的最大个数。</pre></td></tr><tr><td data-num=\"65\"></td><td><pre>.text:0046A789                 jnb     _KiBBTUnexpectedRange ; 如果超出，说明越界，跳走</pre></td></tr><tr><td data-num=\"66\"></td><td><pre>.text:0046A78F                 cmp     ecx, 10h        ; 判断是否是 UI 表</pre></td></tr><tr><td data-num=\"67\"></td><td><pre>.text:0046A792                 jnz     short loc_46A7AF ; 如果不是 UI 表就跳走</pre></td></tr><tr><td data-num=\"68\"></td><td><pre>.text:0046A794                 mov     ecx, large fs:_KPCR.NtTib.Self ; 取自己</pre></td></tr><tr><td data-num=\"69\"></td><td><pre>.text:0046A79B                 xor     ebx, ebx</pre></td></tr><tr><td data-num=\"70\"></td><td><pre>ext:0046A79D                   ; _DWORD __stdcall loc_46A79D ()</pre></td></tr><tr><td data-num=\"71\"></td><td><pre>.text:0046A79D                   loc_46A79D:                             ; DATA XREF: KiPreprocessAccessViolation (x,x,x)+3D↑o</pre></td></tr><tr><td data-num=\"72\"></td><td><pre>.text:0046A79D 0B 99 70 0F 00 00                 or      ebx, [ecx+0F70h]</pre></td></tr><tr><td data-num=\"73\"></td><td><pre>.text:0046A7A3 74 0A                             jz      short loc_46A7AF</pre></td></tr><tr><td data-num=\"74\"></td><td><pre>.text:0046A7A5 52                                push    edx</pre></td></tr><tr><td data-num=\"75\"></td><td><pre>.text:0046A7A6 50                                push    eax</pre></td></tr><tr><td data-num=\"76\"></td><td><pre>.text:0046A7A7 FF 15 48 57 48 00                 call    ds:_KeGdiFlushUserBatch</pre></td></tr><tr><td data-num=\"77\"></td><td><pre>.text:0046A7AD 58                                pop     eax</pre></td></tr><tr><td data-num=\"78\"></td><td><pre>.text:0046A7AE 5A                                pop     edx</pre></td></tr><tr><td data-num=\"79\"></td><td><pre>.text:0046A7AF</pre></td></tr><tr><td data-num=\"80\"></td><td><pre>.text:0046A7AF                   loc_46A7AF:                             ; CODE XREF: .text:0046A792↑j</pre></td></tr><tr><td data-num=\"81\"></td><td><pre>.text:0046A7AF                                                           ; .text:0046A7A3↑j</pre></td></tr><tr><td data-num=\"82\"></td><td><pre>.text:0046A7AF 64 FF 05 38 06 00+                inc     large dword ptr fs:_KPCR.PrcbData.KeSystemCalls</pre></td></tr><tr><td data-num=\"83\"></td><td><pre>.text:0046A7AF 00</pre></td></tr><tr><td data-num=\"84\"></td><td><pre>.text:0046A7B6 8B F2                             mov     esi, edx        ; esi &#x3D; 指向 3 环函数传递的参数（在堆栈中）</pre></td></tr><tr><td data-num=\"85\"></td><td><pre>.text:0046A7B8 8B 5F 0C                          mov     ebx, [edi+0Ch]  ; SSDT 参数表地址</pre></td></tr><tr><td data-num=\"86\"></td><td><pre>.text:0046A7BB 33 C9                             xor     ecx, ecx</pre></td></tr><tr><td data-num=\"87\"></td><td><pre>.text:0046A7BD 8A 0C 18                          mov     cl, [eax+ebx]   ; 获得调用指定函数的参数表的参数长度</pre></td></tr><tr><td data-num=\"88\"></td><td><pre>.text:0046A7C0 8B 3F                             mov     edi, [edi]      ; 获取函数表</pre></td></tr><tr><td data-num=\"89\"></td><td><pre>.text:0046A7C2 8B 1C 87                          mov     ebx, [edi+eax*4] ; 获取函数</pre></td></tr><tr><td data-num=\"90\"></td><td><pre>.text:0046A7C5 2B E1                             sub     esp, ecx        ; 获取要 copy 的栈</pre></td></tr><tr><td data-num=\"91\"></td><td><pre>.text:0046A7C7 C1 E9 02                          shr     ecx, 2          ; 按照四个字节来 copy 所以 &gt;&gt;2</pre></td></tr><tr><td data-num=\"92\"></td><td><pre>.text:0046A7CA 8B FC                             mov     edi, esp</pre></td></tr><tr><td data-num=\"93\"></td><td><pre>.text:0046A7CC F6 45 72 02                       test    byte ptr [ebp+(_KTRAP_FRAME.EFlags+2)], 2 ; 判断 eflags 的第 1（从 0 开始计数）位是否为 1。KTRAP_FRAME 里保存的是 3 环的数据。</pre></td></tr><tr><td data-num=\"94\"></td><td><pre>.text:0046A7D0 75 06                             jnz     short loc_46A7D8 ; 判断地址是否是 3 环的。就是 0x7fffffff-- 火哥说的</pre></td></tr><tr><td data-num=\"95\"></td><td><pre>.text:0046A7D2 F6 45 6C 01                       test    byte ptr [ebp+_KTRAP_FRAME.SegCs], 1 ; 判断 CS 是不是用户环的</pre></td></tr><tr><td data-num=\"96\"></td><td><pre>.text:0046A7D6 74 0C                             jz      short loc_46A7E4 ; 如果是 0 环的，就不用判断地址是否合法了</pre></td></tr><tr><td data-num=\"97\"></td><td><pre>.text:0046A7D8</pre></td></tr><tr><td data-num=\"98\"></td><td><pre>.text:0046A7D8                   loc_46A7D8:                             ; CODE XREF: .text:0046A7D0↑j</pre></td></tr><tr><td data-num=\"99\"></td><td><pre>.text:0046A7D8 3B 35 34 B1 48 00                 cmp     esi, ds:_MmUserProbeAddress ; 判断地址是否是 3 环的。就是 0x7fffffff-- 火哥说的</pre></td></tr><tr><td data-num=\"100\"></td><td><pre>.text:0046A7DE 0F 83 A8 01 00 00                 jnb     loc_46A98C      ; 地址访问异常</pre></td></tr><tr><td data-num=\"101\"></td><td><pre>.text:0046A7E4</pre></td></tr><tr><td data-num=\"102\"></td><td><pre>.text:0046A7E4                   ; _DWORD __stdcall loc_46A7E4 ()</pre></td></tr><tr><td data-num=\"103\"></td><td><pre>.text:0046A7E4                   loc_46A7E4:                             ; CODE XREF: .text:0046A7D6↑j</pre></td></tr><tr><td data-num=\"104\"></td><td><pre>.text:0046A7E4                                                           ; DATA XREF: KiPreprocessAccessViolation (x,x,x):loc_42BD4B↑o</pre></td></tr><tr><td data-num=\"105\"></td><td><pre>.text:0046A7E4 F3 A5                             rep movsd               ; 拷贝参数</pre></td></tr><tr><td data-num=\"106\"></td><td><pre>.text:0046A7E6 FF D3                             call    ebx             ; 调用函数</pre></td></tr><tr><td data-num=\"107\"></td><td><pre>.text:0046A7E8</pre></td></tr><tr><td data-num=\"108\"></td><td><pre>.text:0046A7E8                   ; _DWORD __stdcall loc_46A7E8 ()</pre></td></tr><tr><td data-num=\"109\"></td><td><pre>.text:0046A7E8                   loc_46A7E8:                             ; CODE XREF: .text:0046A991↓j</pre></td></tr><tr><td data-num=\"110\"></td><td><pre>.text:0046A7E8                                                           ; DATA XREF: KiPreprocessAccessViolation (x,x,x)+59↑o</pre></td></tr><tr><td data-num=\"111\"></td><td><pre>.text:0046A7E8 8B E5                             mov     esp, ebp        ; esp ebp 又指向了 KTRAP_FRAME 结构体</pre></td></tr><tr><td data-num=\"112\"></td><td><pre>.text:0046A7EA</pre></td></tr><tr><td data-num=\"113\"></td><td><pre>.text:0046A7EA                   loc_46A7EA:                             ; CODE XREF: _KiBBTUnexpectedRange+38↑j</pre></td></tr><tr><td data-num=\"114\"></td><td><pre>.text:0046A7EA                                                           ; _KiBBTUnexpectedRange+43↑j</pre></td></tr><tr><td data-num=\"115\"></td><td><pre>.text:0046A7EA 64 8B 0D 24 01 00+                mov     ecx, large fs:_KPCR.PrcbData.CurrentThread ; ecx &#x3D; 当前 CPU 所执行线程的_ETHREAD 结构体</pre></td></tr><tr><td data-num=\"116\"></td><td><pre>.text:0046A7EA 00</pre></td></tr><tr><td data-num=\"117\"></td><td><pre>.text:0046A7F1 8B 55 3C                          mov     edx, [ebp+_KTRAP_FRAME._Edx] ; 取三环的 esp</pre></td></tr><tr><td data-num=\"118\"></td><td><pre>.text:0046A7F4 89 91 34 01 00 00                 mov     [ecx+_KTHREAD.TrapFrame], edx</pre></td></tr><tr><td data-num=\"119\"></td><td><pre>.text:0046A7FA</pre></td></tr><tr><td data-num=\"120\"></td><td><pre>.text:0046A7FA                   loc_46A7FA:                             ; CODE XREF: KiCallUserMode (x,x)+EC↑j</pre></td></tr><tr><td data-num=\"121\"></td><td><pre>.text:0046A7FA                                                           ; NtContinue (x,x)+43↓j ...</pre></td></tr><tr><td data-num=\"122\"></td><td><pre>.text:0046A7FA FA                                cli                     ; 结束中断</pre></td></tr><tr><td data-num=\"123\"></td><td><pre>.text:0046A7FB F7 45 70 00 00 02+                test    [ebp+_KTRAP_FRAME.EFlags], 20000h ; 判断是不是虚拟 8086 模式。eflags 中的 VM 位（第 17 位）。</pre></td></tr><tr><td data-num=\"124\"></td><td><pre>.text:0046A7FB 00</pre></td></tr><tr><td data-num=\"125\"></td><td><pre>.text:0046A802 75 06                             jnz     short loc_46A80A ; ebx &#x3D; 当前 CPU 所执行线程的_ETHREAD 结构体</pre></td></tr><tr><td data-num=\"126\"></td><td><pre>.text:0046A804 F6 45 6C 01                       test    byte ptr [ebp+_KTRAP_FRAME.SegCs], 1 ; 判断是否是用户态</pre></td></tr><tr><td data-num=\"127\"></td><td><pre>.text:0046A808 74 56                             jz      short loc_46A860 ; 取出异常链</pre></td></tr><tr><td data-num=\"128\"></td><td><pre>.text:0046A80A</pre></td></tr><tr><td data-num=\"129\"></td><td><pre>.text:0046A80A                   loc_46A80A:                             ; CODE XREF: .text:0046A802↑j</pre></td></tr><tr><td data-num=\"130\"></td><td><pre>.text:0046A80A                                                           ; .text:0046A85E↓j</pre></td></tr><tr><td data-num=\"131\"></td><td><pre>.text:0046A80A 64 8B 1D 24 01 00+                mov     ebx, large fs:_KPCR.PrcbData.CurrentThread ; ebx &#x3D; 当前 CPU 所执行线程的_ETHREAD 结构体</pre></td></tr><tr><td data-num=\"132\"></td><td><pre>.text:0046A80A 00</pre></td></tr><tr><td data-num=\"133\"></td><td><pre>.text:0046A811 C6 43 2E 00                       mov     [ebx+_ETHREAD.Tcb.Alerted], 0 ; APC 相关的了，还没学，先跳过。</pre></td></tr><tr><td data-num=\"134\"></td><td><pre>.text:0046A815 80 7B 4A 00                       cmp     [ebx+_ETHREAD.Tcb.ApcState.UserApcPending], 0</pre></td></tr><tr><td data-num=\"135\"></td><td><pre>.text:0046A819 74 45                             jz      short loc_46A860 ; 取出异常链</pre></td></tr><tr><td data-num=\"136\"></td><td><pre>.text:0046A81B 8B DD                             mov     ebx, ebp</pre></td></tr><tr><td data-num=\"137\"></td><td><pre>.text:0046A81D 89 43 44                          mov     [ebx+44h], eax</pre></td></tr><tr><td data-num=\"138\"></td><td><pre>.text:0046A820 C7 43 50 3B 00 00+                mov     [ebx+_KTRAP_FRAME.SegFs], 3Bh ; &#39;;&#39;</pre></td></tr><tr><td data-num=\"139\"></td><td><pre>.text:0046A820 00</pre></td></tr><tr><td data-num=\"140\"></td><td><pre>.text:0046A827 C7 43 38 23 00 00+                mov     [ebx+_KTRAP_FRAME.SegDs], 23h ; &#39;#&#39;</pre></td></tr><tr><td data-num=\"141\"></td><td><pre>.text:0046A827 00</pre></td></tr><tr><td data-num=\"142\"></td><td><pre>.text:0046A82E C7 43 34 23 00 00+                mov     [ebx+_KTRAP_FRAME.SegEs], 23h ; &#39;#&#39;</pre></td></tr><tr><td data-num=\"143\"></td><td><pre>.text:0046A82E 00</pre></td></tr><tr><td data-num=\"144\"></td><td><pre>.text:0046A835 C7 43 30 00 00 00+                mov     [ebx+_KTRAP_FRAME.SegGs], 0</pre></td></tr><tr><td data-num=\"145\"></td><td><pre>.text:0046A835 00</pre></td></tr><tr><td data-num=\"146\"></td><td><pre>.text:0046A83C B9 01 00 00 00                    mov     ecx, 1</pre></td></tr><tr><td data-num=\"147\"></td><td><pre>.text:0046A841 FF 15 2C 10 40 00                 call    ds:__imp_@KfRaiseIrql@4 ; KfRaiseIrql (x)</pre></td></tr><tr><td data-num=\"148\"></td><td><pre>.text:0046A847 50                                push    eax</pre></td></tr><tr><td data-num=\"149\"></td><td><pre>.text:0046A848 FB                                sti</pre></td></tr><tr><td data-num=\"150\"></td><td><pre>.text:0046A849 53                                push    ebx</pre></td></tr><tr><td data-num=\"151\"></td><td><pre>.text:0046A84A 6A 00                             push    0</pre></td></tr><tr><td data-num=\"152\"></td><td><pre>.text:0046A84C 6A 01                             push    1</pre></td></tr><tr><td data-num=\"153\"></td><td><pre>.text:0046A84E E8 99 DF FB FF                    call    _KiDeliverApc@12 ; KiDeliverApc (x,x,x)</pre></td></tr><tr><td data-num=\"154\"></td><td><pre>.text:0046A853 59                                pop     ecx</pre></td></tr><tr><td data-num=\"155\"></td><td><pre>.text:0046A854 FF 15 30 10 40 00                 call    ds:__imp_@KfLowerIrql@4 ; KfLowerIrql (x)</pre></td></tr><tr><td data-num=\"156\"></td><td><pre>.text:0046A85A 8B 43 44                          mov     eax, [ebx+44h]</pre></td></tr><tr><td data-num=\"157\"></td><td><pre>.text:0046A85D FA                                cli</pre></td></tr><tr><td data-num=\"158\"></td><td><pre>.text:0046A85E EB AA                             jmp     short loc_46A80A ; ebx &#x3D; 当前 CPU 所执行线程的_ETHREAD 结构体</pre></td></tr><tr><td data-num=\"159\"></td><td><pre>.text:0046A860                   ; ---------------------------------------------------------------------------</pre></td></tr><tr><td data-num=\"160\"></td><td><pre>.text:0046A860</pre></td></tr><tr><td data-num=\"161\"></td><td><pre>.text:0046A860                   loc_46A860:                             ; CODE XREF: .text:0046A808↑j</pre></td></tr><tr><td data-num=\"162\"></td><td><pre>.text:0046A860                                                           ; .text:0046A819↑j</pre></td></tr><tr><td data-num=\"163\"></td><td><pre>.text:0046A860 8B 54 24 4C                       mov     edx, [esp+_KTRAP_FRAME.ExceptionList] ; 取出异常链</pre></td></tr><tr><td data-num=\"164\"></td><td><pre>.text:0046A864 64 8B 1D 50 00 00+                mov     ebx, large fs:_KPCR.DebugActive ; 取出调试状态</pre></td></tr><tr><td data-num=\"165\"></td><td><pre>.text:0046A864 00</pre></td></tr><tr><td data-num=\"166\"></td><td><pre>.text:0046A86B 64 89 15 00 00 00+                mov     large fs:_KPCR, edx ; 把 KTRAP_FRAME 结构中的 ExceptionList 放在了 KPCR 结构成员 ExceptionList。要还原了，恢复数据。</pre></td></tr><tr><td data-num=\"167\"></td><td><pre>.text:0046A86B 00</pre></td></tr><tr><td data-num=\"168\"></td><td><pre>.text:0046A872 8B 4C 24 48                       mov     ecx, [esp+_KTRAP_FRAME.PreviousPreviousMode]</pre></td></tr><tr><td data-num=\"169\"></td><td><pre>.text:0046A876 64 8B 35 24 01 00+                mov     esi, large fs:_KPCR.PrcbData.CurrentThread</pre></td></tr><tr><td data-num=\"170\"></td><td><pre>.text:0046A876 00</pre></td></tr><tr><td data-num=\"171\"></td><td><pre>.text:0046A87D 88 8E 40 01 00 00                 mov     [esi+_ETHREAD.Tcb.PreviousMode], cl ; 把 KTRAP_FRAME 结构中的 PreviousPreviousMode 放在了 KPCR 的结构成员 PreviousMode。把先前模式还原</pre></td></tr><tr><td data-num=\"172\"></td><td><pre>.text:0046A883 F7 C3 FF 00 00 00                 test    ebx, 0FFh       ; 再次判断调试状态</pre></td></tr><tr><td data-num=\"173\"></td><td><pre>.text:0046A889 75 79                             jnz     short loc_46A904 ; 若是调试状态还要，还原一些调试相关的寄存器</pre></td></tr><tr><td data-num=\"174\"></td><td><pre>.text:0046A88B</pre></td></tr><tr><td data-num=\"175\"></td><td><pre>.text:0046A88B                   loc_46A88B:                             ; CODE XREF: .text:0046A914↓j</pre></td></tr><tr><td data-num=\"176\"></td><td><pre>.text:0046A88B                                                           ; .text:0046A943↓j</pre></td></tr><tr><td data-num=\"177\"></td><td><pre>.text:0046A88B F7 44 24 70 00 00+                test    [esp+_KTRAP_FRAME.EFlags], 20000h ; 判读是否是虚拟 8086 模式</pre></td></tr><tr><td data-num=\"178\"></td><td><pre>.text:0046A88B 02 00</pre></td></tr><tr><td data-num=\"179\"></td><td><pre>.text:0046A893 0F 85 FF 08 00 00                 jnz     loc_46B198      ; 如果是的话，走虚拟 8086 的模式退出</pre></td></tr><tr><td data-num=\"180\"></td><td><pre>.text:0046A899 66 F7 44 24 6C F9+                test    word ptr [esp+_KTRAP_FRAME.SegCs], 0FFF9h</pre></td></tr><tr><td data-num=\"181\"></td><td><pre>.text:0046A899 FF</pre></td></tr><tr><td data-num=\"182\"></td><td><pre>.text:0046A8A0 0F 84 B4 00 00 00                 jz      loc_46A95A</pre></td></tr><tr><td data-num=\"183\"></td><td><pre>.text:0046A8A6 66 83 7C 24 6C 1B                 cmp     word ptr [esp+_KTRAP_FRAME.SegCs], 1Bh</pre></td></tr><tr><td data-num=\"184\"></td><td><pre>.text:0046A8AC 66 0F BA 64 24 6C+                bt      word ptr [esp+_KTRAP_FRAME.SegCs], 0</pre></td></tr><tr><td data-num=\"185\"></td><td><pre>.text:0046A8AC 00</pre></td></tr><tr><td data-num=\"186\"></td><td><pre>.text:0046A8B3 F5                                cmc</pre></td></tr><tr><td data-num=\"187\"></td><td><pre>.text:0046A8B4 0F 87 8E 00 00 00                 ja      loc_46A948</pre></td></tr><tr><td data-num=\"188\"></td><td><pre>.text:0046A8BA 66 83 7D 6C 08                    cmp     word ptr [ebp+_KTRAP_FRAME.SegCs], 8</pre></td></tr><tr><td data-num=\"189\"></td><td><pre>.text:0046A8BF 74 05                             jz      short loc_46A8C6</pre></td></tr><tr><td data-num=\"190\"></td><td><pre>.text:0046A8C1</pre></td></tr><tr><td data-num=\"191\"></td><td><pre>.text:0046A8C1                   loc_46A8C1:                             ; CODE XREF: .text:0046A955↓j</pre></td></tr><tr><td data-num=\"192\"></td><td><pre>.text:0046A8C1 8D 65 50                          lea     esp, [ebp+_KTRAP_FRAME.SegFs]</pre></td></tr><tr><td data-num=\"193\"></td><td><pre>.text:0046A8C4 0F A1                             pop     fs              ; 还原 fs</pre></td></tr><tr><td data-num=\"194\"></td><td><pre>.text:0046A8C6                                   assume fs:nothing</pre></td></tr><tr><td data-num=\"195\"></td><td><pre>.text:0046A8C6</pre></td></tr><tr><td data-num=\"196\"></td><td><pre>.text:0046A8C6                   loc_46A8C6:                             ; CODE XREF: .text:0046A8BF↑j</pre></td></tr><tr><td data-num=\"197\"></td><td><pre>.text:0046A8C6 8D 65 54                          lea     esp, [ebp+_KTRAP_FRAME._Edi]</pre></td></tr><tr><td data-num=\"198\"></td><td><pre>.text:0046A8C9 5F                                pop     edi             ; 还原 edi</pre></td></tr><tr><td data-num=\"199\"></td><td><pre>.text:0046A8CA 5E                                pop     esi</pre></td></tr><tr><td data-num=\"200\"></td><td><pre>.text:0046A8CB 5B                                pop     ebx</pre></td></tr><tr><td data-num=\"201\"></td><td><pre>.text:0046A8CC 5D                                pop     ebp             ; 还原 ebp, 此时 esp 指向 ErrorCode</pre></td></tr><tr><td data-num=\"202\"></td><td><pre>.text:0046A8CD 66 81 7C 24 08 80+                cmp     word ptr [esp+8], 80h ; &#39;€&#39; ; 此时 esp+8 指向的是 SegCs</pre></td></tr><tr><td data-num=\"203\"></td><td><pre>.text:0046A8CD 00</pre></td></tr><tr><td data-num=\"204\"></td><td><pre>.text:0046A8D4 0F 87 DA 08 00 00                 ja      loc_46B1B4</pre></td></tr><tr><td data-num=\"205\"></td><td><pre>.text:0046A8DA 83 C4 04                          add     esp, 4          ; 此时 esp 指向 Eip,Eip 中存储的是 KUSER_SHARED_DATA 中的 SystemCallReturn</pre></td></tr><tr><td data-num=\"206\"></td><td><pre>.text:0046A8DD F7 44 24 04 01 00+                test    dword ptr [esp+4], 1 ; esp+4 指向 SegCs</pre></td></tr><tr><td data-num=\"207\"></td><td><pre>.text:0046A8DD 00 00</pre></td></tr><tr><td data-num=\"208\"></td><td><pre>.text:0046A8E5</pre></td></tr><tr><td data-num=\"209\"></td><td><pre>.text:0046A8E5                   loc_46A8E5:                             ; DATA XREF: KiDisableFastSyscallReturn ()+9↑w</pre></td></tr><tr><td data-num=\"210\"></td><td><pre>.text:0046A8E5                                                           ; KiEnableFastSyscallReturn ():loc_4278B0↑r ...</pre></td></tr><tr><td data-num=\"211\"></td><td><pre>.text:0046A8E5 75 05                             jnz     short locret_46A8EC</pre></td></tr><tr><td data-num=\"212\"></td><td><pre>.text:0046A8E7 5A                                pop     edx             ; edx &#x3D; SystemCallReturn</pre></td></tr><tr><td data-num=\"213\"></td><td><pre>.text:0046A8E8 59                                pop     ecx             ; ecx &#x3D; SegCs</pre></td></tr><tr><td data-num=\"214\"></td><td><pre>.text:0046A8E9 9D                                popf                    ; 还原 flags 寄存器</pre></td></tr><tr><td data-num=\"215\"></td><td><pre>.text:0046A8EA FF E2                             jmp     edx</pre></td></tr></table></figure><p>在 windbg 中对 KiFastCallEntry 下了断点后 一步一步跟了一下：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kd&gt; bp KiFastCallEntry</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>kd&gt; g</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Breakpoint 0 hit</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>nt!KiFastCallEntry:</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>805426e0 b923000000      mov     ecx,23h</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>nt!KiFastCallEntry+0x5:</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>805426e5 6a30            push    30h</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>nt!KiFastCallEntry+0x7:</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>805426e7 0fa1            pop     fs</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>nt!KiFastCallEntry+0x9:</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>805426e9 8ed9            mov     ds,cx</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>nt!KiFastCallEntry+0xb:</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>805426eb 8ec1            mov     es,cx</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>nt!KiFastCallEntry+0xd:</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>805426ed 648b0d40000000  mov     ecx,dword ptr fs:[40h]</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>nt!KiFastCallEntry+0x14:</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>805426f4 8b6104          mov     esp,dword ptr [ecx+4]</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>nt!KiFastCallEntry+0x17:</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>805426f7 6a23            push    23h</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>nt!KiFastCallEntry+0x19:</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>805426f9 52              push    edx</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>nt!KiFastCallEntry+0x1a:</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>805426fa 9c              pushfd</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>nt!KiFastCallEntry+0x1b:</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>805426fb 6a02            push    2</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>nt!KiFastCallEntry+0x1d:</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>805426fd 83c208          add     edx,8</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>nt!KiFastCallEntry+0x20:</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>80542700 9d              popfd</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>nt!KiFastCallEntry+0x21:</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>80542701 804c240102      or      byte ptr [esp+1],2</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>nt!KiFastCallEntry+0x26:</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>80542706 6a1b            push    1Bh</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>nt!KiFastCallEntry+0x28:</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>80542708 ff350403dfff    push    dword ptr ds:[0FFDF0304h]</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>nt!KiFastCallEntry+0x2e:</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>8054270e 6a00            push    0</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>nt!KiFastCallEntry+0x30:</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>80542710 55              push    ebp</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>nt!KiFastCallEntry+0x31:</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>80542711 53              push    ebx</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>nt!KiFastCallEntry+0x32:</pre></td></tr><tr><td data-num=\"62\"></td><td><pre>80542712 56              push    esi</pre></td></tr><tr><td data-num=\"63\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"64\"></td><td><pre>nt!KiFastCallEntry+0x33:</pre></td></tr><tr><td data-num=\"65\"></td><td><pre>80542713 57              push    edi</pre></td></tr><tr><td data-num=\"66\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"67\"></td><td><pre>nt!KiFastCallEntry+0x34:</pre></td></tr><tr><td data-num=\"68\"></td><td><pre>80542714 648b1d1c000000  mov     ebx,dword ptr fs:[1Ch]</pre></td></tr><tr><td data-num=\"69\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"70\"></td><td><pre>nt!KiFastCallEntry+0x3b:</pre></td></tr><tr><td data-num=\"71\"></td><td><pre>8054271b 6a3b            push    3Bh</pre></td></tr><tr><td data-num=\"72\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"73\"></td><td><pre>nt!KiFastCallEntry+0x3d:</pre></td></tr><tr><td data-num=\"74\"></td><td><pre>8054271d 8bb324010000    mov     esi,dword ptr [ebx+124h]</pre></td></tr><tr><td data-num=\"75\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"76\"></td><td><pre>nt!KiFastCallEntry+0x43:</pre></td></tr><tr><td data-num=\"77\"></td><td><pre>80542723 ff33            push    dword ptr [ebx]</pre></td></tr><tr><td data-num=\"78\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"79\"></td><td><pre>nt!KiFastCallEntry+0x45:</pre></td></tr><tr><td data-num=\"80\"></td><td><pre>80542725 c703ffffffff    mov     dword ptr [ebx],0FFFFFFFFh</pre></td></tr><tr><td data-num=\"81\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"82\"></td><td><pre>nt!KiFastCallEntry+0x4b:</pre></td></tr><tr><td data-num=\"83\"></td><td><pre>8054272b 8b6e18          mov     ebp,dword ptr [esi+18h]</pre></td></tr><tr><td data-num=\"84\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"85\"></td><td><pre>nt!KiFastCallEntry+0x4e:</pre></td></tr><tr><td data-num=\"86\"></td><td><pre>8054272e 6a01            push    1</pre></td></tr><tr><td data-num=\"87\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"88\"></td><td><pre>nt!KiFastCallEntry+0x50:</pre></td></tr><tr><td data-num=\"89\"></td><td><pre>80542730 83ec48          sub     esp,48h</pre></td></tr><tr><td data-num=\"90\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"91\"></td><td><pre>nt!KiFastCallEntry+0x53:</pre></td></tr><tr><td data-num=\"92\"></td><td><pre>80542733 81ed9c020000    sub     ebp,29Ch</pre></td></tr><tr><td data-num=\"93\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"94\"></td><td><pre>nt!KiFastCallEntry+0x59:</pre></td></tr><tr><td data-num=\"95\"></td><td><pre>80542739 c6864001000001  mov     byte ptr [esi+140h],1</pre></td></tr><tr><td data-num=\"96\"></td><td><pre>kd&gt; r</pre></td></tr><tr><td data-num=\"97\"></td><td><pre>eax&#x3D;00000077 ebx&#x3D;ffdff000 ecx&#x3D;80042000 edx&#x3D;0015f938 esi&#x3D;8a13eda0 edi&#x3D;0015fc70</pre></td></tr><tr><td data-num=\"98\"></td><td><pre>eip&#x3D;80542739 esp&#x3D;b9cc8d64 ebp&#x3D;b9cc8d64 iopl&#x3D;0         nv up di ng nz ac po nc</pre></td></tr><tr><td data-num=\"99\"></td><td><pre>cs&#x3D;0008  ss&#x3D;0010  ds&#x3D;0023  es&#x3D;0023  fs&#x3D;0030  gs&#x3D;0000             efl&#x3D;00000092</pre></td></tr><tr><td data-num=\"100\"></td><td><pre>nt!KiFastCallEntry+0x59:</pre></td></tr><tr><td data-num=\"101\"></td><td><pre>80542739 c6864001000001  mov     byte ptr [esi+140h],1      ds:0023:8a13eee0&#x3D;01</pre></td></tr><tr><td data-num=\"102\"></td><td><pre>kd&gt; dt _KTRAP_FRAME b9cc8d64</pre></td></tr><tr><td data-num=\"103\"></td><td><pre>ntdll!_KTRAP_FRAME</pre></td></tr><tr><td data-num=\"104\"></td><td><pre>   +0x000 DbgEbp           : 0</pre></td></tr><tr><td data-num=\"105\"></td><td><pre>   +0x004 DbgEip           : 0</pre></td></tr><tr><td data-num=\"106\"></td><td><pre>   +0x008 DbgArgMark       : 0x23</pre></td></tr><tr><td data-num=\"107\"></td><td><pre>   +0x00c DbgArgPointer    : 0x23</pre></td></tr><tr><td data-num=\"108\"></td><td><pre>   +0x010 TempSegCs        : 0x15f938</pre></td></tr><tr><td data-num=\"109\"></td><td><pre>   +0x014 TempEsp          : 0x80042000</pre></td></tr><tr><td data-num=\"110\"></td><td><pre>   +0x018 Dr0              : 0x77</pre></td></tr><tr><td data-num=\"111\"></td><td><pre>   +0x01c Dr1              : 0x77</pre></td></tr><tr><td data-num=\"112\"></td><td><pre>   +0x020 Dr2              : 0xffffffff</pre></td></tr><tr><td data-num=\"113\"></td><td><pre>   +0x024 Dr3              : 0x30</pre></td></tr><tr><td data-num=\"114\"></td><td><pre>   +0x028 Dr6              : 0x15fc70</pre></td></tr><tr><td data-num=\"115\"></td><td><pre>   +0x02c Dr7              : 0x8a13eda0</pre></td></tr><tr><td data-num=\"116\"></td><td><pre>   +0x030 SegGs            : 0xffdff000</pre></td></tr><tr><td data-num=\"117\"></td><td><pre>   +0x034 SegEs            : 0xb9cc9000</pre></td></tr><tr><td data-num=\"118\"></td><td><pre>   +0x038 SegDs            : 0</pre></td></tr><tr><td data-num=\"119\"></td><td><pre>   +0x03c Edx              : 0x80542730</pre></td></tr><tr><td data-num=\"120\"></td><td><pre>   +0x040 Ecx              : 8</pre></td></tr><tr><td data-num=\"121\"></td><td><pre>   +0x044 Eax              : 0x102</pre></td></tr><tr><td data-num=\"122\"></td><td><pre>   +0x048 PreviousPreviousMode : 1</pre></td></tr><tr><td data-num=\"123\"></td><td><pre>   +0x04c ExceptionList    : 0xffffffff _EXCEPTION_REGISTRATION_RECORD</pre></td></tr><tr><td data-num=\"124\"></td><td><pre>   +0x050 SegFs            : 0x3b</pre></td></tr><tr><td data-num=\"125\"></td><td><pre>   +0x054 Edi              : 0x15fc70</pre></td></tr><tr><td data-num=\"126\"></td><td><pre>   +0x058 Esi              : 0x1106a0</pre></td></tr><tr><td data-num=\"127\"></td><td><pre>   +0x05c Ebx              : 0</pre></td></tr><tr><td data-num=\"128\"></td><td><pre>   +0x060 Ebp              : 0x15fc40</pre></td></tr><tr><td data-num=\"129\"></td><td><pre>   +0x064 ErrCode          : 0</pre></td></tr><tr><td data-num=\"130\"></td><td><pre>   +0x068 Eip              : 0x7c92e4f4</pre></td></tr><tr><td data-num=\"131\"></td><td><pre>   +0x06c SegCs            : 0x1b</pre></td></tr><tr><td data-num=\"132\"></td><td><pre>   +0x070 EFlags           : 0x246</pre></td></tr><tr><td data-num=\"133\"></td><td><pre>   +0x074 HardwareEsp      : 0x15f930</pre></td></tr><tr><td data-num=\"134\"></td><td><pre>   +0x078 HardwareSegSs    : 0x23</pre></td></tr><tr><td data-num=\"135\"></td><td><pre>   +0x07c V86Es            : 0</pre></td></tr><tr><td data-num=\"136\"></td><td><pre>   +0x080 V86Ds            : 0</pre></td></tr><tr><td data-num=\"137\"></td><td><pre>   +0x084 V86Fs            : 0</pre></td></tr><tr><td data-num=\"138\"></td><td><pre>   +0x088 V86Gs            : 0</pre></td></tr><tr><td data-num=\"139\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"140\"></td><td><pre>nt!KiFastCallEntry+0x60:</pre></td></tr><tr><td data-num=\"141\"></td><td><pre>80542740 3bec            cmp     ebp,esp</pre></td></tr><tr><td data-num=\"142\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"143\"></td><td><pre>nt!KiFastCallEntry+0x62:</pre></td></tr><tr><td data-num=\"144\"></td><td><pre>80542742 758d            jne     nt!KiFastCallEntry2+0x49 (805426d1)</pre></td></tr><tr><td data-num=\"145\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"146\"></td><td><pre>nt!KiFastCallEntry+0x64:</pre></td></tr><tr><td data-num=\"147\"></td><td><pre>80542744 83652c00        and     dword ptr [ebp+2Ch],0</pre></td></tr><tr><td data-num=\"148\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"149\"></td><td><pre>nt!KiFastCallEntry+0x68:</pre></td></tr><tr><td data-num=\"150\"></td><td><pre>80542748 f6462cff        test    byte ptr [esi+2Ch],0FFh</pre></td></tr><tr><td data-num=\"151\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"152\"></td><td><pre>nt!KiFastCallEntry+0x6c:</pre></td></tr><tr><td data-num=\"153\"></td><td><pre>8054274c 89ae34010000    mov     dword ptr [esi+134h],ebp</pre></td></tr><tr><td data-num=\"154\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"155\"></td><td><pre>nt!KiFastCallEntry+0x72:</pre></td></tr><tr><td data-num=\"156\"></td><td><pre>80542752 0f8538feffff    jne     nt!Dr_FastCallDrSave (80542590)</pre></td></tr><tr><td data-num=\"157\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"158\"></td><td><pre>nt!KiFastCallEntry+0x78:</pre></td></tr><tr><td data-num=\"159\"></td><td><pre>80542758 8b5d60          mov     ebx,dword ptr [ebp+60h]</pre></td></tr><tr><td data-num=\"160\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"161\"></td><td><pre>nt!KiFastCallEntry+0x7b:</pre></td></tr><tr><td data-num=\"162\"></td><td><pre>8054275b 8b7d68          mov     edi,dword ptr [ebp+68h]</pre></td></tr><tr><td data-num=\"163\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"164\"></td><td><pre>nt!KiFastCallEntry+0x7e:</pre></td></tr><tr><td data-num=\"165\"></td><td><pre>8054275e 89550c          mov     dword ptr [ebp+0Ch],edx</pre></td></tr><tr><td data-num=\"166\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"167\"></td><td><pre>nt!KiFastCallEntry+0x81:</pre></td></tr><tr><td data-num=\"168\"></td><td><pre>80542761 c74508000ddbba  mov     dword ptr [ebp+8],0BADB0D00h</pre></td></tr><tr><td data-num=\"169\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"170\"></td><td><pre>nt!KiFastCallEntry+0x88:</pre></td></tr><tr><td data-num=\"171\"></td><td><pre>80542768 895d00          mov     dword ptr [ebp],ebx</pre></td></tr><tr><td data-num=\"172\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"173\"></td><td><pre>nt!KiFastCallEntry+0x8b:</pre></td></tr><tr><td data-num=\"174\"></td><td><pre>8054276b 897d04          mov     dword ptr [ebp+4],edi</pre></td></tr><tr><td data-num=\"175\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"176\"></td><td><pre>nt!KiFastCallEntry+0x8e:</pre></td></tr><tr><td data-num=\"177\"></td><td><pre>8054276e fb              sti</pre></td></tr><tr><td data-num=\"178\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"179\"></td><td><pre>nt!KiFastCallEntry+0x8f:</pre></td></tr><tr><td data-num=\"180\"></td><td><pre>8054276f 8bf8            mov     edi,eax</pre></td></tr><tr><td data-num=\"181\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"182\"></td><td><pre>nt!KiFastCallEntry+0x91:</pre></td></tr><tr><td data-num=\"183\"></td><td><pre>80542771 c1ef08          shr     edi,8</pre></td></tr><tr><td data-num=\"184\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"185\"></td><td><pre>nt!KiFastCallEntry+0x94:</pre></td></tr><tr><td data-num=\"186\"></td><td><pre>80542774 83e730          and     edi,30h</pre></td></tr><tr><td data-num=\"187\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"188\"></td><td><pre>nt!KiFastCallEntry+0x97:</pre></td></tr><tr><td data-num=\"189\"></td><td><pre>80542777 8bcf            mov     ecx,edi</pre></td></tr><tr><td data-num=\"190\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"191\"></td><td><pre>nt!KiFastCallEntry+0x99:</pre></td></tr><tr><td data-num=\"192\"></td><td><pre>80542779 03bee0000000    add     edi,dword ptr [esi+0E0h]</pre></td></tr><tr><td data-num=\"193\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"194\"></td><td><pre>nt!KiFastCallEntry+0x9f:</pre></td></tr><tr><td data-num=\"195\"></td><td><pre>8054277f 8bd8            mov     ebx,eax</pre></td></tr><tr><td data-num=\"196\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"197\"></td><td><pre>nt!KiFastCallEntry+0xa1:</pre></td></tr><tr><td data-num=\"198\"></td><td><pre>80542781 25ff0f0000      and     eax,0FFFh</pre></td></tr><tr><td data-num=\"199\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"200\"></td><td><pre>nt!KiFastCallEntry+0xa6:</pre></td></tr><tr><td data-num=\"201\"></td><td><pre>80542786 3b4708          cmp     eax,dword ptr [edi+8]</pre></td></tr><tr><td data-num=\"202\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"203\"></td><td><pre>nt!KiFastCallEntry+0xa9:</pre></td></tr><tr><td data-num=\"204\"></td><td><pre>80542789 0f8333fdffff    jae     nt!KiBBTUnexpectedRange (805424c2)</pre></td></tr><tr><td data-num=\"205\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"206\"></td><td><pre>nt!KiFastCallEntry+0xaf:</pre></td></tr><tr><td data-num=\"207\"></td><td><pre>8054278f 83f910          cmp     ecx,10h</pre></td></tr><tr><td data-num=\"208\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"209\"></td><td><pre>nt!KiFastCallEntry+0xb2:</pre></td></tr><tr><td data-num=\"210\"></td><td><pre>80542792 751b            jne     nt!KiSystemServiceAccessTeb+0x12 (805427af)</pre></td></tr><tr><td data-num=\"211\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"212\"></td><td><pre>nt!KiSystemServiceAccessTeb+0x12:</pre></td></tr><tr><td data-num=\"213\"></td><td><pre>805427af 64ff0538060000  inc     dword ptr fs:[638h]</pre></td></tr><tr><td data-num=\"214\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"215\"></td><td><pre>nt!KiSystemServiceAccessTeb+0x19:</pre></td></tr><tr><td data-num=\"216\"></td><td><pre>805427b6 8bf2            mov     esi,edx</pre></td></tr><tr><td data-num=\"217\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"218\"></td><td><pre>nt!KiSystemServiceAccessTeb+0x1b:</pre></td></tr><tr><td data-num=\"219\"></td><td><pre>805427b8 8b5f0c          mov     ebx,dword ptr [edi+0Ch]</pre></td></tr><tr><td data-num=\"220\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"221\"></td><td><pre>nt!KiSystemServiceAccessTeb+0x1e:</pre></td></tr><tr><td data-num=\"222\"></td><td><pre>805427bb 33c9            xor     ecx,ecx</pre></td></tr><tr><td data-num=\"223\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"224\"></td><td><pre>nt!KiSystemServiceAccessTeb+0x20:</pre></td></tr><tr><td data-num=\"225\"></td><td><pre>805427bd 8a0c18          mov     cl,byte ptr [eax+ebx]</pre></td></tr><tr><td data-num=\"226\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"227\"></td><td><pre>nt!KiSystemServiceAccessTeb+0x23:</pre></td></tr><tr><td data-num=\"228\"></td><td><pre>805427c0 8b3f            mov     edi,dword ptr [edi]</pre></td></tr><tr><td data-num=\"229\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"230\"></td><td><pre>nt!KiSystemServiceAccessTeb+0x25:</pre></td></tr><tr><td data-num=\"231\"></td><td><pre>805427c2 8b1c87          mov     ebx,dword ptr [edi+eax*4]</pre></td></tr><tr><td data-num=\"232\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"233\"></td><td><pre>nt!KiSystemServiceAccessTeb+0x28:</pre></td></tr><tr><td data-num=\"234\"></td><td><pre>805427c5 2be1            sub     esp,ecx</pre></td></tr><tr><td data-num=\"235\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"236\"></td><td><pre>nt!KiSystemServiceAccessTeb+0x2a:</pre></td></tr><tr><td data-num=\"237\"></td><td><pre>805427c7 c1e902          shr     ecx,2</pre></td></tr><tr><td data-num=\"238\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"239\"></td><td><pre>nt!KiSystemServiceAccessTeb+0x2d:</pre></td></tr><tr><td data-num=\"240\"></td><td><pre>805427ca 8bfc            mov     edi,esp</pre></td></tr><tr><td data-num=\"241\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"242\"></td><td><pre>nt!KiSystemServiceAccessTeb+0x2f:</pre></td></tr><tr><td data-num=\"243\"></td><td><pre>805427cc f6457202        test    byte ptr [ebp+72h],2</pre></td></tr><tr><td data-num=\"244\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"245\"></td><td><pre>nt!KiSystemServiceAccessTeb+0x33:</pre></td></tr><tr><td data-num=\"246\"></td><td><pre>805427d0 7506            jne     nt!KiSystemServiceAccessTeb+0x3b (805427d8)</pre></td></tr><tr><td data-num=\"247\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"248\"></td><td><pre>nt!KiSystemServiceAccessTeb+0x35:</pre></td></tr><tr><td data-num=\"249\"></td><td><pre>805427d2 f6456c01        test    byte ptr [ebp+6Ch],1</pre></td></tr><tr><td data-num=\"250\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"251\"></td><td><pre>nt!KiSystemServiceAccessTeb+0x39:</pre></td></tr><tr><td data-num=\"252\"></td><td><pre>805427d6 740c            je      nt!KiSystemServiceCopyArguments (805427e4)</pre></td></tr><tr><td data-num=\"253\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"254\"></td><td><pre>nt!KiSystemServiceAccessTeb+0x3b:</pre></td></tr><tr><td data-num=\"255\"></td><td><pre>805427d8 3b3534315680    cmp     esi,dword ptr [nt!MmUserProbeAddress (80563134)]</pre></td></tr><tr><td data-num=\"256\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"257\"></td><td><pre>nt!KiSystemServiceAccessTeb+0x41:</pre></td></tr><tr><td data-num=\"258\"></td><td><pre>805427de 0f83a8010000    jae     nt!KiSystemCallExit2+0x9f (8054298c)</pre></td></tr><tr><td data-num=\"259\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"260\"></td><td><pre>nt!KiSystemServiceCopyArguments:</pre></td></tr><tr><td data-num=\"261\"></td><td><pre>805427e4 f3a5            rep movs dword ptr es:[edi],dword ptr [esi]</pre></td></tr><tr><td data-num=\"262\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"263\"></td><td><pre>nt!KiSystemServiceCopyArguments+0x2:</pre></td></tr><tr><td data-num=\"264\"></td><td><pre>805427e6 ffd3            call    ebx</pre></td></tr><tr><td data-num=\"265\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"266\"></td><td><pre>nt!KiSystemServicePostCall:</pre></td></tr><tr><td data-num=\"267\"></td><td><pre>805427e8 8be5            mov     esp,ebp</pre></td></tr><tr><td data-num=\"268\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"269\"></td><td><pre>nt!KiSystemServicePostCall+0x2:</pre></td></tr><tr><td data-num=\"270\"></td><td><pre>805427ea 648b0d24010000  mov     ecx,dword ptr fs:[124h]</pre></td></tr><tr><td data-num=\"271\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"272\"></td><td><pre>nt!KiSystemServicePostCall+0x9:</pre></td></tr><tr><td data-num=\"273\"></td><td><pre>805427f1 8b553c          mov     edx,dword ptr [ebp+3Ch]</pre></td></tr><tr><td data-num=\"274\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"275\"></td><td><pre>nt!KiSystemServicePostCall+0xc:</pre></td></tr><tr><td data-num=\"276\"></td><td><pre>805427f4 899134010000    mov     dword ptr [ecx+134h],edx</pre></td></tr><tr><td data-num=\"277\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"278\"></td><td><pre>nt!KiServiceExit:</pre></td></tr><tr><td data-num=\"279\"></td><td><pre>805427fa fa              cli</pre></td></tr><tr><td data-num=\"280\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"281\"></td><td><pre>nt!KiServiceExit+0x1:</pre></td></tr><tr><td data-num=\"282\"></td><td><pre>805427fb f7457000000200  test    dword ptr [ebp+70h],20000h</pre></td></tr><tr><td data-num=\"283\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"284\"></td><td><pre>nt!KiServiceExit+0x8:</pre></td></tr><tr><td data-num=\"285\"></td><td><pre>80542802 7506            jne     nt!KiServiceExit+0x10 (8054280a)</pre></td></tr><tr><td data-num=\"286\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"287\"></td><td><pre>nt!KiServiceExit+0xa:</pre></td></tr><tr><td data-num=\"288\"></td><td><pre>80542804 f6456c01        test    byte ptr [ebp+6Ch],1</pre></td></tr><tr><td data-num=\"289\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"290\"></td><td><pre>nt!KiServiceExit+0xe:</pre></td></tr><tr><td data-num=\"291\"></td><td><pre>80542808 7456            je      nt!KiServiceExit+0x66 (80542860)</pre></td></tr><tr><td data-num=\"292\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"293\"></td><td><pre>nt!KiServiceExit+0x66:</pre></td></tr><tr><td data-num=\"294\"></td><td><pre>80542860 8b54244c        mov     edx,dword ptr [esp+4Ch]</pre></td></tr><tr><td data-num=\"295\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"296\"></td><td><pre>nt!KiServiceExit+0x6a:</pre></td></tr><tr><td data-num=\"297\"></td><td><pre>80542864 648b1d50000000  mov     ebx,dword ptr fs:[50h]</pre></td></tr><tr><td data-num=\"298\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"299\"></td><td><pre>nt!KiServiceExit+0x71:</pre></td></tr><tr><td data-num=\"300\"></td><td><pre>8054286b 64891500000000  mov     dword ptr fs:[0],edx</pre></td></tr><tr><td data-num=\"301\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"302\"></td><td><pre>nt!KiServiceExit+0x78:</pre></td></tr><tr><td data-num=\"303\"></td><td><pre>80542872 8b4c2448        mov     ecx,dword ptr [esp+48h]</pre></td></tr><tr><td data-num=\"304\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"305\"></td><td><pre>nt!KiServiceExit+0x7c:</pre></td></tr><tr><td data-num=\"306\"></td><td><pre>80542876 648b3524010000  mov     esi,dword ptr fs:[124h]</pre></td></tr><tr><td data-num=\"307\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"308\"></td><td><pre>nt!KiServiceExit+0x83:</pre></td></tr><tr><td data-num=\"309\"></td><td><pre>8054287d 888e40010000    mov     byte ptr [esi+140h],cl</pre></td></tr><tr><td data-num=\"310\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"311\"></td><td><pre>nt!KiServiceExit+0x89:</pre></td></tr><tr><td data-num=\"312\"></td><td><pre>80542883 f7c3ff000000    test    ebx,0FFh</pre></td></tr><tr><td data-num=\"313\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"314\"></td><td><pre>nt!KiServiceExit+0x8f:</pre></td></tr><tr><td data-num=\"315\"></td><td><pre>80542889 7579            jne     nt!KiSystemCallExit2+0x17 (80542904)</pre></td></tr><tr><td data-num=\"316\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"317\"></td><td><pre>nt!KiServiceExit+0x91:</pre></td></tr><tr><td data-num=\"318\"></td><td><pre>8054288b f744247000000200 test    dword ptr [esp+70h],20000h</pre></td></tr><tr><td data-num=\"319\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"320\"></td><td><pre>nt!KiServiceExit+0x99:</pre></td></tr><tr><td data-num=\"321\"></td><td><pre>80542893 0f85ff080000    jne     nt!KiExceptionExit+0x12c (80543198)</pre></td></tr><tr><td data-num=\"322\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"323\"></td><td><pre>nt!KiServiceExit+0x9f:</pre></td></tr><tr><td data-num=\"324\"></td><td><pre>80542899 66f744246cf9ff  test    word ptr [esp+6Ch],0FFF9h</pre></td></tr><tr><td data-num=\"325\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"326\"></td><td><pre>nt!KiServiceExit+0xa6:</pre></td></tr><tr><td data-num=\"327\"></td><td><pre>805428a0 0f84b4000000    je      nt!KiSystemCallExit2+0x6d (8054295a)</pre></td></tr><tr><td data-num=\"328\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"329\"></td><td><pre>nt!KiServiceExit+0xac:</pre></td></tr><tr><td data-num=\"330\"></td><td><pre>805428a6 66837c246c1b    cmp     word ptr [esp+6Ch],1Bh</pre></td></tr><tr><td data-num=\"331\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"332\"></td><td><pre>nt!KiServiceExit+0xb2:</pre></td></tr><tr><td data-num=\"333\"></td><td><pre>805428ac 660fba64246c00  bt      word ptr [esp+6Ch],0</pre></td></tr><tr><td data-num=\"334\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"335\"></td><td><pre>nt!KiServiceExit+0xb9:</pre></td></tr><tr><td data-num=\"336\"></td><td><pre>805428b3 f5              cmc</pre></td></tr><tr><td data-num=\"337\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"338\"></td><td><pre>nt!KiServiceExit+0xba:</pre></td></tr><tr><td data-num=\"339\"></td><td><pre>805428b4 0f878e000000    ja      nt!KiSystemCallExit2+0x5b (80542948)</pre></td></tr><tr><td data-num=\"340\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"341\"></td><td><pre>nt!KiServiceExit+0xc0:</pre></td></tr><tr><td data-num=\"342\"></td><td><pre>805428ba 66837d6c08      cmp     word ptr [ebp+6Ch],8</pre></td></tr><tr><td data-num=\"343\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"344\"></td><td><pre>nt!KiServiceExit+0xc5:</pre></td></tr><tr><td data-num=\"345\"></td><td><pre>805428bf 7405            je      nt!KiServiceExit+0xcc (805428c6)</pre></td></tr><tr><td data-num=\"346\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"347\"></td><td><pre>nt!KiServiceExit+0xcc:</pre></td></tr><tr><td data-num=\"348\"></td><td><pre>805428c6 8d6554          lea     esp,[ebp+54h]</pre></td></tr><tr><td data-num=\"349\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"350\"></td><td><pre>nt!KiServiceExit+0xcf:</pre></td></tr><tr><td data-num=\"351\"></td><td><pre>805428c9 5f              pop     edi</pre></td></tr><tr><td data-num=\"352\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"353\"></td><td><pre>nt!KiServiceExit+0xd0:</pre></td></tr><tr><td data-num=\"354\"></td><td><pre>805428ca 5e              pop     esi</pre></td></tr><tr><td data-num=\"355\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"356\"></td><td><pre>nt!KiServiceExit+0xd1:</pre></td></tr><tr><td data-num=\"357\"></td><td><pre>805428cb 5b              pop     ebx</pre></td></tr><tr><td data-num=\"358\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"359\"></td><td><pre>nt!KiServiceExit+0xd2:</pre></td></tr><tr><td data-num=\"360\"></td><td><pre>805428cc 5d              pop     ebp</pre></td></tr><tr><td data-num=\"361\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"362\"></td><td><pre>nt!KiServiceExit+0xd3:</pre></td></tr><tr><td data-num=\"363\"></td><td><pre>805428cd 66817c24088000  cmp     word ptr [esp+8],80h</pre></td></tr><tr><td data-num=\"364\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"365\"></td><td><pre>nt!KiServiceExit+0xda:</pre></td></tr><tr><td data-num=\"366\"></td><td><pre>805428d4 0f87da080000    ja      nt!KiExceptionExit+0x148 (805431b4)</pre></td></tr><tr><td data-num=\"367\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"368\"></td><td><pre>nt!KiServiceExit+0xe0:</pre></td></tr><tr><td data-num=\"369\"></td><td><pre>805428da 83c404          add     esp,4</pre></td></tr><tr><td data-num=\"370\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"371\"></td><td><pre>nt!KiServiceExit+0xe3:</pre></td></tr><tr><td data-num=\"372\"></td><td><pre>805428dd f744240401000000 test    dword ptr [esp+4],1</pre></td></tr><tr><td data-num=\"373\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"374\"></td><td><pre>nt!KiSystemCallExitBranch:</pre></td></tr><tr><td data-num=\"375\"></td><td><pre>805428e5 7506            jne     nt!KiSystemCallExit2 (805428ed)</pre></td></tr><tr><td data-num=\"376\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"377\"></td><td><pre>nt!KiSystemCallExitBranch+0x2:</pre></td></tr><tr><td data-num=\"378\"></td><td><pre>805428e7 5a              pop     edx</pre></td></tr><tr><td data-num=\"379\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"380\"></td><td><pre>nt!KiSystemCallExitBranch+0x3:</pre></td></tr><tr><td data-num=\"381\"></td><td><pre>805428e8 59              pop     ecx</pre></td></tr><tr><td data-num=\"382\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"383\"></td><td><pre>nt!KiSystemCallExitBranch+0x4:</pre></td></tr><tr><td data-num=\"384\"></td><td><pre>805428e9 9d              popfd</pre></td></tr><tr><td data-num=\"385\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"386\"></td><td><pre>nt!KiSystemCallExitBranch+0x5:</pre></td></tr><tr><td data-num=\"387\"></td><td><pre>805428ea ffe2            jmp     edx</pre></td></tr><tr><td data-num=\"388\"></td><td><pre>kd&gt; r</pre></td></tr><tr><td data-num=\"389\"></td><td><pre>eax&#x3D;c0000034 ebx&#x3D;00000000 ecx&#x3D;00000008 edx&#x3D;80501681 esi&#x3D;000003e8 edi&#x3D;00000001</pre></td></tr><tr><td data-num=\"390\"></td><td><pre>eip&#x3D;805428ea esp&#x3D;ba4ffd10 ebp&#x3D;ba4ffd68 iopl&#x3D;0         nv up ei pl zr na pe nc</pre></td></tr><tr><td data-num=\"391\"></td><td><pre>cs&#x3D;0008  ss&#x3D;0010  ds&#x3D;0023  es&#x3D;0023  fs&#x3D;0030  gs&#x3D;0000             efl&#x3D;00000246</pre></td></tr><tr><td data-num=\"392\"></td><td><pre>nt!KiSystemCallExitBranch+0x5:</pre></td></tr><tr><td data-num=\"393\"></td><td><pre>805428ea ffe2            jmp     edx &#123;nt!ZwOpenEvent+0x11 (80501681)&#125;</pre></td></tr><tr><td data-num=\"394\"></td><td><pre>kd&gt; t</pre></td></tr><tr><td data-num=\"395\"></td><td><pre>nt!ZwOpenEvent+0x11:</pre></td></tr><tr><td data-num=\"396\"></td><td><pre>80501681 c20c00          ret     0Ch</pre></td></tr><tr><td data-num=\"397\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"398\"></td><td><pre>MountMgr!WorkerThread+0x79:</pre></td></tr><tr><td data-num=\"399\"></td><td><pre>ba0b83c3 85c0            test    eax,eax</pre></td></tr><tr><td data-num=\"400\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"401\"></td><td><pre>MountMgr!WorkerThread+0x7b:</pre></td></tr><tr><td data-num=\"402\"></td><td><pre>ba0b83c5 7d16            jge     MountMgr!WorkerThread+0x93 (ba0b83dd)</pre></td></tr><tr><td data-num=\"403\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"404\"></td><td><pre>MountMgr!WorkerThread+0x7d:</pre></td></tr><tr><td data-num=\"405\"></td><td><pre>ba0b83c7 8d45f4          lea     eax,[ebp-0Ch]</pre></td></tr><tr><td data-num=\"406\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"407\"></td><td><pre>MountMgr!WorkerThread+0x80:</pre></td></tr><tr><td data-num=\"408\"></td><td><pre>ba0b83ca 50              push    eax</pre></td></tr><tr><td data-num=\"409\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"410\"></td><td><pre>MountMgr!WorkerThread+0x81:</pre></td></tr><tr><td data-num=\"411\"></td><td><pre>ba0b83cb 53              push    ebx</pre></td></tr><tr><td data-num=\"412\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"413\"></td><td><pre>MountMgr!WorkerThread+0x82:</pre></td></tr><tr><td data-num=\"414\"></td><td><pre>ba0b83cc 53              push    ebx</pre></td></tr><tr><td data-num=\"415\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"416\"></td><td><pre>MountMgr!WorkerThread+0x83:</pre></td></tr><tr><td data-num=\"417\"></td><td><pre>ba0b83cd 53              push    ebx</pre></td></tr><tr><td data-num=\"418\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"419\"></td><td><pre>MountMgr!WorkerThread+0x84:</pre></td></tr><tr><td data-num=\"420\"></td><td><pre>ba0b83ce 8d45dc          lea     eax,[ebp-24h]</pre></td></tr><tr><td data-num=\"421\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"422\"></td><td><pre>MountMgr!WorkerThread+0x87:</pre></td></tr><tr><td data-num=\"423\"></td><td><pre>ba0b83d1 50              push    eax</pre></td></tr><tr><td data-num=\"424\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"425\"></td><td><pre>MountMgr!WorkerThread+0x88:</pre></td></tr><tr><td data-num=\"426\"></td><td><pre>ba0b83d2 ff15a0880bba    call    dword ptr [MountMgr!_imp__KeWaitForSingleObject (ba0b88a0)]</pre></td></tr><tr><td data-num=\"427\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"428\"></td><td><pre>Breakpoint 0 hit</pre></td></tr><tr><td data-num=\"429\"></td><td><pre>nt!KiFastCallEntry:</pre></td></tr><tr><td data-num=\"430\"></td><td><pre>805426e0 b923000000      mov     ecx,23h</pre></td></tr><tr><td data-num=\"431\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"432\"></td><td><pre>nt!KiFastCallEntry+0x5:</pre></td></tr><tr><td data-num=\"433\"></td><td><pre>805426e5 6a30            push    30h</pre></td></tr></table></figure><p>想知道它是怎么返回三环的，海哥说需要学习 APC 之后的内容了。jmp edx 后面的就不懂了。</p>\n<h2 id=\"分析-kisystemservice\"><a class=\"anchor\" href=\"#分析-kisystemservice\">#</a> 分析 KiSystemService</h2>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>.text:0046A611 _KiSystemService proc near              ; CODE XREF: ZwAcceptConnectPort (x,x,x,x,x,x)+C↑p</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>.text:0046A611                                         ; ZwAccessCheck (x,x,x,x,x,x,x,x)+C↑p ...</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>.text:0046A611</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>.text:0046A611 arg_0           &#x3D; dword ptr  4</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>.text:0046A611</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>.text:0046A611                 push    0               ; 保存系统空间的寄存器到_KTRAP_FRAME +0x064 ErrorCode</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>.text:0046A613                 push    ebp             ; 保存系统空间的寄存器到 +0x060 Ebp</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>.text:0046A614                 push    ebx             ; 保存系统空间的寄存器到 +0x05c Ebx</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>.text:0046A615                 push    esi             ; 保存系统空间的寄存器到 +0x058 Esi</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>.text:0046A616                 push    edi             ; 保存系统空间的寄存器到 +0x054 Edi</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>.text:0046A617                 push    fs              ; 保存系统空间的寄存器到 +0x050 SegFs</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>.text:0046A619                 mov     ebx, 30h ; &#39;0&#39;  ; 永远都用这个值吗？如果是多核也不变吗？</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>.text:0046A61E                 mov     fs, bx          ; Windows 内核有个特殊的基本要求，就是只要 CPU 在内核中运行，就得使</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>.text:0046A61E                                         ; mov ebx,30 &#x2F;&#x2F;0011 0000  所以就是 0 环 GDT 索引 6</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>.text:0046A61E                                         ;</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>.text:0046A61E                                         ; 0 环的 FS.Base 指向 CPU 自己的 KPCR，不是指向当前线程</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>.text:0046A61E                                         ; 选择码，0x30 的结构分析如下：</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>.text:0046A61E                                         ; 1.bit0~bit1:RPL, 要求运行的级别，这里是 0</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>.text:0046A61E                                         ; 2.bit2：找 GDT 还是 IDT，这里是 0，GDT</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>.text:0046A61E                                         ; 3.bit3！bit15，是在 GDT 或者 IDT 的下标</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>.text:0046A61E                                         ; windbg 查看段描述符：834093f2 dc003748</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>.text:0046A61E                                         ; Base:83f2dc00 指向当前的_KPCR</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>.text:0046A621                 assume fs:nothing</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>.text:0046A621                 push    large dword ptr fs:_KPCR ; 保存老的 ExceptionList</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>.text:0046A621                                         ; _KPCR 偏移 + 0x00-&gt;NT_TIB-&gt;ExceptionList</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>.text:0046A628                 mov     large dword ptr fs:0, 0FFFFFFFFh ; 设置新的 ExceptonList 为 - 1，因为 3 环的异常链表，不能用，要进 0 环了</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>.text:0046A633                 mov     esi, large fs:_KPCR.PrcbData.CurrentThread ; esi &#x3D;  当前 CPU 所执行线程的_ETHREAD</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>.text:0046A63A                 push    dword ptr [esi+_ETHREAD.Tcb.PreviousMode] ; 因为 Esi 存的_KTHREAD, 偏移 0x140 存的 PreviousMode,</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>.text:0046A63A                                         ; 就是保存老的先前模式到堆栈</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>.text:0046A63A                                         ; 先前模式就是当调用这些代码时候，原来是几环的数就是几，比如原来 0 环，先前模式就是 0，原来 3 环就是 1</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>.text:0046A63A                                         ; 因为有些内核代码可以从 0 和 3 调用，但是执行内容不一样，通过这个知道执行什么。</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>.text:0046A640                 sub     esp, 48h        ; ESP 提升到_KTRAP_FRAME 结构体第一个成员，也就是这个结构体指针</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>.text:0046A643                 mov     ebx, [esp+_KTRAP_FRAME.SegCs] ; 取出 3 环压入的参数 CS _KTRAP_FRAME + 0x6C</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>.text:0046A647                 and     ebx, 1          ; 0 环的最低位为 0,3 环的最低位为 1</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>.text:0046A64A                 mov     [esi+_ETHREAD.Tcb.PreviousMode], bl ; 保存老的 “先前模式” 到堆栈</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>.text:0046A650                 mov     ebp, esp        ; ESP &#x3D; EBP _KTRAP_FRAME 结构指针</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>.text:0046A652                 mov     ebx, [esi+_ETHREAD.Tcb.TrapFrame] ; _KTHTEAD 中的 TrapFrame 给 ebx</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>.text:0046A658                 mov     [ebp+_KTRAP_FRAME._Edx], ebx ; 将_KTHREAD 中的 Trap_Frame 暂时存在这个位置后面会将这个值取出来，</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>.text:0046A658                                         ; 重新恢复给_KTHREAD 的 Trap_Frame</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>.text:0046A65B                 mov     [esi+_ETHREAD.Tcb.TrapFrame], ebp ; 将堆栈中形成的_KTRAP_FRAME 结构指针复制给_KTHREAD 中的 TRAPFRAME</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>.text:0046A661                 cld</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>.text:0046A662                 mov     ebx, [ebp+_KTRAP_FRAME._Ebp] ; 3 环的 EBP</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>.text:0046A665                 mov     edi, [ebp+_KTRAP_FRAME._Eip] ; 3 环的 EIP</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>.text:0046A668                 mov     [ebp+_KTRAP_FRAME.DbgArgPointer], edx ; edx 存储的是 3 环函数的参数的指针:</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>.text:0046A668                                         ;</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>.text:0046A668                                         ; _KiIntSystemCall：</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>.text:0046A668                                         ;</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>.text:0046A668                                         ; lea     edx, [esp+8] ; 参数指针</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>.text:0046A668                                         ; int     2Eh</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>.text:0046A668                                         ; retn</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>.text:0046A66B                 mov     [ebp+_KTRAP_FRAME.DbgArgMark], 0BADB0D00h ; 这个是操作系统的标志</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>.text:0046A672                 mov     [ebp+_KTRAP_FRAME.DbgEbp], ebx ; 3 环的 ebp 存储到 KTRAP_FRAME+0x000 DbgEbp 的位置</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>.text:0046A675                 mov     [ebp+_KTRAP_FRAME.DbgEip], edi ; 3 环的 eip 存储到 KTRAP_FRAME+0x004 DbgEip 的位置</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>.text:0046A678                 test    [esi+_KTHREAD.DebugActive], 0FFh ; 判断_KTHREAD 的 +0x02c DebugActive 是否为 - 1</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>.text:0046A67C                 jnz     Dr_kss_a        ; 如果处于调试状态，跳转</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>.text:0046A682</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>.text:0046A682 loc_46A682:                             ; CODE XREF: Dr_kss_a+10↑j</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>.text:0046A682                                         ; Dr_kss_a+7C↑j</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>.text:0046A682                 sti                     ; 关闭中断</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>.text:0046A683                 jmp     loc_46A76F      ; 取 3 环传来的服务号</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>.text:0046A683 _KiSystemService endp</pre></td></tr></table></figure><p>Dr_kss_a:</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>.text:0046A50C Dr_kss_a        proc near               ; CODE XREF: _KiSystemService+6B↓j</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>.text:0046A50C                 test    [ebp+_KTRAP_FRAME.EFlags], 20000h ; 判断 VM 位是否为 1</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>.text:0046A513                 jnz     short loc_46A522</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>.text:0046A515                 test    [ebp+_KTRAP_FRAME.SegCs], 1</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>.text:0046A51C                 jz      loc_46A682      ; 关闭中断</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>.text:0046A522</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>.text:0046A522 loc_46A522:                             ; CODE XREF: Dr_kss_a+7↑j</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>.text:0046A522                 mov     ebx, dr0</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>.text:0046A525                 mov     ecx, dr1</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>.text:0046A528                 mov     edi, dr2</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>.text:0046A52B                 mov     [ebp+_KTRAP_FRAME.Dr0], ebx ; 存储 Dr0 寄存器到 _KTRAP_FRAME +0x18</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>.text:0046A52E                 mov     [ebp+1Ch], ecx  ; 存储 Dr1 寄存器到 _KTRAP_FRAME +0x1C</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>.text:0046A531                 mov     [ebp+20h], edi  ; 存储 Dr2 寄存器到 _KTRAP_FRAME</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>.text:0046A534                 mov     ebx, dr3</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>.text:0046A537                 mov     ecx, dr6</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>.text:0046A53A                 mov     edi, dr7</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>.text:0046A53D                 mov     [ebp+24h], ebx  ; 存储 Dr3 寄存器到 _KTRAP_FRAME</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>.text:0046A540                 mov     [ebp+28h], ecx  ; 存储 Dr6 寄存器到 _KTRAP_FRAME</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>.text:0046A543                 xor     ebx, ebx        ; ebx &#x3D; 0</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>.text:0046A545                 mov     [ebp+2Ch], edi  ; 存储 Dr7 寄存器到 _KTRAP_FRAME</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>.text:0046A548                 mov     dr7, ebx        ; 将 Dr7 清零</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>.text:0046A54B                 mov     edi, large fs:_KPCR.Prcb ; edi &#x3D; _KPRCB 的指针</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>.text:0046A552                 mov     ebx, [edi+_KPRCB.ProcessorState.SpecialRegisters.KernelDr0]</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>.text:0046A558                 mov     ecx, [edi+_KPRCB.ProcessorState.SpecialRegisters.KernelDr1]</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>.text:0046A55E                 mov     dr0, ebx</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>.text:0046A561                 mov     dr1, ecx</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>.text:0046A564                 mov     ebx, [edi+_KPRCB.ProcessorState.SpecialRegisters.KernelDr2]</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>.text:0046A56A                 mov     ecx, [edi+_KPRCB.ProcessorState.SpecialRegisters.KernelDr3]</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>.text:0046A570                 mov     dr2, ebx</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>.text:0046A573                 mov     dr3, ecx</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>.text:0046A576                 mov     ebx, [edi+_KPRCB.ProcessorState.SpecialRegisters.KernelDr6]</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>.text:0046A57C                 mov     ecx, [edi+_KPRCB.ProcessorState.SpecialRegisters.KernelDr7]</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>.text:0046A582                 mov     dr6, ebx</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>.text:0046A585                 mov     dr7, ecx</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>.text:0046A588                 jmp     loc_46A682      ; 关闭中断</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>.text:0046A588 Dr_kss_a        endp</pre></td></tr></table></figure><p>loc_46A76F: 既又跳转到 KiFastCallEntry 里了。</p>\n<h2 id=\"总结-2\"><a class=\"anchor\" href=\"#总结-2\">#</a> 总结</h2>\n<p>逆内核的时候要有一个主线，因为操作系统要考虑的事情太多了。<br />\n我们要带着目的去逆向，不然很容易迷失的。</p>\n<ol>\n<li>\n<p>进 0 环后，原来的寄存器存在哪里？</p>\n</li>\n<li>\n<p>如何根据系统服务号 (eax 中存储) 找到要执行的内核函数？</p>\n</li>\n<li>\n<p>调用时参数是存储到 3 环的堆栈，如何传递给内核函数？</p>\n</li>\n<li>\n<p>2 种调用方式是如何返回到 3 环的？</p>\n</li>\n</ol>\n<p>逆完我们可以知道：<br />\n快速调用与中断门填充完_KTRAP_FRAME 结构后，走的还是同样的代码去调用函数，最后出来的时候也是分开的。<br />\n既两个入口两个出口。</p>\n<p>这里面也涉及反硬件断点调试的操作，修改判断是否处于调试状态的_KTHREAD.DebugActive 的值，就可以让人获取不了 Dr0~Dr7 寄存器的值。</p>\n<p>海哥的视频里说了，如今这个阶段只需要知道如何进的 0 环就行了，至于如何返回的要等学过 APC 后了。</p>\n<h1 id=\"额外的小知识\"><a class=\"anchor\" href=\"#额外的小知识\">#</a> 额外的小知识</h1>\n<p>查看 CPU 数量</p>\n<p><code>kd&gt; dd KeNumberProcessors</code></p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kd&gt; dd KeNumberProcessors</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>80556a60  00000001</pre></td></tr></table></figure><p>查看 KPCR</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kd&gt; dd KiProcessorBlock  L2</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>80554040  ffdff120 00000000\t\t\t\t&#x2F;&#x2F; 如果有 2 个核，那么就会出现 2 个地址</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>kd&gt; dt _kpcr ffdff120-120\t\t\t\t&#x2F;&#x2F; 减去 120 (kpcr 的大小)\t就是 kpcr 的地址\t\t</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>nt!_KPCR</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  +0x000 NtTib            : _NT_TIB\t\t\t\t\t\t\t</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  +0x01c SelfPcr          : 0xffdff000 _KPCR\t\t\t\t\t\t\t</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  +0x020 Prcb             : 0xffdff120 _KPRCB\t\t\t\t\t\t\t</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  +0x024 Irql             : 0 &#39;&#39;\t\t\t\t\t\t\t</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  +0x028 IRR              : 0\t\t\t\t\t\t\t</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  +0x02c IrrActive        : 0\t\t\t\t\t\t\t</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  +0x030 IDR              : 0xffffffff\t\t\t\t\t\t\t</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  +0x034 KdVersionBlock   : 0x80546cb8 Void\t\t\t\t\t\t\t</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  +0x038 IDT              : 0x8003f400 _KIDTENTRY\t\t\t\t\t\t\t</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  +0x03c GDT              : 0x8003f000 _KGDTENTRY\t\t\t\t\t\t\t</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  +0x040 TSS              : 0x80042000 _KTSS\t\t\t\t\t\t\t</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  +0x044 MajorVersion     : 1\t\t\t\t\t\t\t</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  +0x046 MinorVersion     : 1\t\t\t\t\t\t\t</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  +0x048 SetMember        : 1\t\t\t\t\t\t\t</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  +0x04c StallScaleFactor : 0x13b5\t\t\t\t\t\t\t</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  +0x050 DebugActive      : 0 &#39;&#39;\t\t\t\t\t\t\t</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  +0x051 Number           : 0 &#39;&#39;\t\t\t\t\t\t\t</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  +0x052 Spare0           : 0 &#39;&#39;\t\t\t\t\t\t\t</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  +0x053 SecondLevelCacheAssociativity : 0 &#39;&#39;\t\t\t\t\t\t\t</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  +0x054 VdmAlert         : 0\t\t\t\t\t\t\t</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  +0x058 KernelReserved   : [14] 0\t\t\t\t\t\t\t</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  +0x090 SecondLevelCacheSize : 0\t\t\t\t\t\t\t</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  +0x094 HalReserved      : [16] 0\t\t\t\t\t\t\t</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  +0x0d4 InterruptMode    : 0\t\t\t\t\t\t\t</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  +0x0d8 Spare1           : 0 &#39;&#39;\t\t\t\t\t\t\t</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  +0x0dc KernelReserved2  : [17] 0\t\t\t\t\t\t\t</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  +0x120 PrcbData         : _KPRCB</pre></td></tr></table></figure><h1 id=\"reference\"><a class=\"anchor\" href=\"#reference\">#</a> Reference</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0t3YW5zeS9hcnRpY2xlL2RldGFpbHMvMTA5NDI2Njg4\">https://blog.csdn.net/Kwansy/article/details/109426688</span></p>\n",
            "tags": [
                "sysenter指令",
                "KiFastCallEntry函数",
                "KiSystemService函数",
                "Trap_Frame"
            ]
        }
    ]
}