{
    "version": "https://jsonfeed.org/version/1",
    "title": "Or0kit • All posts by \"系统服务表\" tag",
    "description": "临渊羡鱼，不如退而结网",
    "home_page_url": "https://Or0kit.github.io",
    "items": [
        {
            "id": "https://or0kit.github.io/Bin/Core/WindowsXp/SystemCall/%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8-SSDT/",
            "url": "https://or0kit.github.io/Bin/Core/WindowsXp/SystemCall/%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8-SSDT/",
            "title": "系统调用-SSDT",
            "date_published": "2021-12-14T02:38:24.000Z",
            "content_html": "<h1 id=\"楔子\"><a class=\"anchor\" href=\"#楔子\">#</a> 楔子</h1>\n<p>在前两篇的 0/3 环调用分析中，我们知道有两个进入 0 环的方法，一个中断门 利用 <code>int 0x2e</code>  指令，一个是快速调用 利用 <code>sysenter</code>  指令，因为利用中断门进 0 环权限发生切换，会直接向堆栈中压入 5 个值：3 环的 SS、3 环 Eflags、3 环的 CS、3 环的 EIP。而通过快速调用却没有压入这 5 个值，所以会有  <code>KiFastSystemCall 与 KiIntSystemCall</code>  以及  <code>KiSystemService 与 KiFastCallEntry</code>  这四个函数。</p>\n<p><code>KiFastSystemCall 与 KiIntSystemCall</code>  是为了从 3 环进入 0 环，既修改 CS、SS、EIP、ESP。</p>\n<p><code>KiSystemService 与 KiFastCallEntry</code>  它们都是为了填充  <code>KTRAP_FRAME</code>  结构体，从而保存 3 环的环境。</p>\n<p>保存并切换完环境后，就开始调用函数了，这里涉及了一张表，系统服务表（SystemServiceTable)</p>\n<p>进 0 环后，3 环的各种寄存器的值都会保留到 <code>_Trap_Frame</code>  结构体中，如何根据系统服务号（eax 中存储）找到要执行的内核函数？调用时参数是存储到 3 环的堆栈，如何传递给内核函数？</p>\n<h1 id=\"系统服务表\"><a class=\"anchor\" href=\"#系统服务表\">#</a> 系统服务表</h1>\n<h2 id=\"结构\"><a class=\"anchor\" href=\"#结构\">#</a> 结构</h2>\n<p>首先我们得知道一个结构体，用来描述内核函数信息的表：SystemServiceTable，即系统服务表，它不是 SSDT。</p>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<p>系统服务表由 4 部分组成：<br />\n <code>ServiceTable</code>  指向的是函数地址数组，每个成员四个字节；<br />\n <code>Count</code>  表示调用次数；<br />\n <code>ServiceLimit</code>  表示表中函数的个数；<br />\n <code>ArgumentTable</code>  指向对应函数有几个参数，每个成员一个字节。</p>\n<p>Windows 提供了两张表：上面的表是用来处理一般内核函数的，下面这张表是用来处理与图形相关的内核函数。</p>\n<p>这张表里的都是向 3 环开放的内核函数，并不代表整个内核只有这么多函数。</p>\n<h2 id=\"系统服务表在哪\"><a class=\"anchor\" href=\"#系统服务表在哪\">#</a> 系统服务表在哪</h2>\n<p><code>SystemServiceTable</code>  系统服务表在哪？ 在 <code>_KTHREAD + 0xE0</code>  的位置</p>\n<p><img data-src=\"image002.png\" alt=\"\" /></p>\n<h2 id=\"判断要调用的函数在哪个表\"><a class=\"anchor\" href=\"#判断要调用的函数在哪个表\">#</a> 判断要调用的函数在哪个表</h2>\n<p><img data-src=\"image003.png\" alt=\"\" /></p>\n<h2 id=\"找到要执行的函数与参数个数\"><a class=\"anchor\" href=\"#找到要执行的函数与参数个数\">#</a> 找到要执行的函数与参数个数</h2>\n<p><img data-src=\"image004.png\" alt=\"\" /></p>\n<p>用查找到的函数在 <code>ServiceTable</code>  中的索引 <code>i</code> ，去找在 <code>ArgumentTable</code>  中索引为 <code>i</code>  元素，其值就是该函数的 <strong>参数个数 * 4。</strong></p>\n<h1 id=\"ssdt\"><a class=\"anchor\" href=\"#ssdt\">#</a> SSDT</h1>\n<p>SSDT 的全称是 <code>System Services Descriptor Table</code> ，意为系统服务描述符表。</p>\n<p>SSDT 的每个成员叫做系统服务表<br />\n SSDT 的第一个成员是导出的，声明一下即可使用<br />\n SSDT 的第二个成员是未导出的，需要通过其它方式查找<br />\n在 Windows 中，SSDT 的第三个成员和第四个成员未被使用</p>\n<p>在 32 位 XP 中，我们可以通过 <code>ETHREAD</code>  结构体加偏移的方式进行访问。</p>\n<p>在内核文件中，有一个变量是导出的：  <code>KeServiceDescriptorTable</code>  通过它我们可以访问 SSDT。</p>\n<p><img data-src=\"image005.png\" alt=\"\" /></p>\n<p>在 windbg 中查看一下：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kd&gt; dd KeServiceDescriptorTable</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>8055d700  80505570 00000000 0000011c 805059e4</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>8055d710  00000000 00000000 00000000 00000000</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>8055d720  00000000 00000000 00000000 00000000</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>8055d730  00000000 00000000 00000000 00000000</pre></td></tr></table></figure><p>在 WinDbg 中查看未导出成员：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kd&gt; dd KeServiceDescriptorTableShadow</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>8055d6c0  80505570 00000000 0000011c 805059e4</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>8055d6d0  bf9a6f80 00000000 0000029b bf9a7c90</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>8055d6e0  00000000 00000000 00000000 00000000</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>8055d6f0  00000000 00000000 00000000 00000000</pre></td></tr></table></figure>",
            "tags": [
                "系统服务表",
                "SSDT"
            ]
        }
    ]
}