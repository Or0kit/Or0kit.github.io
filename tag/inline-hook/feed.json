{
    "version": "https://jsonfeed.org/version/1",
    "title": "Or0kit • All posts by \"inline-hook\" tag",
    "description": "临渊羡鱼，不如退而结网",
    "home_page_url": "https://Or0kit.github.io",
    "items": [
        {
            "id": "https://or0kit.github.io/Bin/Win32/INLINE-HOOK/",
            "url": "https://or0kit.github.io/Bin/Win32/INLINE-HOOK/",
            "title": "INLINE-HOOK",
            "date_published": "2021-09-25T02:40:05.000Z",
            "content_html": "<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<pre><code>//执行返回\njmp dwRetAddress;\nret;  图片中多了这个指令，实际上jmp就已经跳走了。\n</code></pre>\n<h1 id=\"inline-hook\"><a class=\"anchor\" href=\"#inline-hook\">#</a> INLINE-HOOK</h1>\n<p>HOOK 函数开头的 5 个字节</p>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<p>编写 Dll</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//dllmain.cpp : 定义 DLL 应用程序的入口点。</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">WIN32_LEAN_AND_MEAN</span>             <span class=\"token comment\">// 从 Windows 头文件中排除极少使用的内容</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// Windows 头文件</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;windows.h></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">//5 个字节</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">PATCH_LENGTH</span> <span class=\"token expression\"><span class=\"token number\">5</span> </span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>DWORD dwHookAddress <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>DWORD dwRetAddress <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>WCHAR szNewText<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> L<span class=\"token string\">\"InlineHook!\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">__declspec</span><span class=\"token punctuation\">(</span>naked<span class=\"token punctuation\">)</span> <span class=\"token function\">NewMessageBox</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t__asm <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t<span class=\"token comment\">// 保存寄存器</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\tpushad<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\tpushfd<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t<span class=\"token comment\">// 修改数据 esp+8</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\tlea eax<span class=\"token punctuation\">,</span> dword ptr ds <span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>szNewText<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\tmov dword ptr ss <span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>esp <span class=\"token operator\">+</span> <span class=\"token number\">0x24</span> <span class=\"token operator\">+</span> <span class=\"token number\">8</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">,</span> eax<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t<span class=\"token comment\">// 恢复寄存器</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\tpopfd<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\tpopad<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t<span class=\"token comment\">// 执行覆盖的代码</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\tmov edi<span class=\"token punctuation\">,</span>edi<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\tpush ebp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\tmov ebp<span class=\"token punctuation\">,</span> esp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t<span class=\"token comment\">// 执行返回</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\tjmp dwRetAddress<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>BOOL <span class=\"token function\">HookMessageBox</span><span class=\"token punctuation\">(</span>BOOL bOpen<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\tBOOL bRet <span class=\"token operator\">=</span> FALSE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\tBYTE byJmpCode<span class=\"token punctuation\">[</span>PATCH_LENGTH<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">0xE9</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\tDWORD dwOldProtect <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t<span class=\"token keyword\">static</span> BYTE byOriginalCode<span class=\"token punctuation\">[</span>PATCH_LENGTH<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t<span class=\"token keyword\">static</span> BOOL bHookFlag <span class=\"token operator\">=</span> FALSE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t<span class=\"token comment\">// 初始化 byJmpCode</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t<span class=\"token function\">memset</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>byJmpCode<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x90</span><span class=\"token punctuation\">,</span> PATCH_LENGTH <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t<span class=\"token comment\">// 存储跳转地址</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>DWORD<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>byJmpCode<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>NewMessageBox <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>dwHookAddress <span class=\"token operator\">-</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// E9 00 00 00 00 90</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t<span class=\"token comment\">// 备份被覆盖的 Code</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t<span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>byOriginalCode<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>LPVOID<span class=\"token punctuation\">)</span>dwHookAddress<span class=\"token punctuation\">,</span> PATCH_LENGTH<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bOpen<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>bHookFlag<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t\t\t<span class=\"token function\">VirtualProtect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>LPVOID<span class=\"token punctuation\">)</span>dwHookAddress<span class=\"token punctuation\">,</span> PATCH_LENGTH<span class=\"token punctuation\">,</span> PAGE_EXECUTE_READWRITE<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>dwOldProtect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t\t\t<span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>LPVOID<span class=\"token punctuation\">)</span>dwHookAddress<span class=\"token punctuation\">,</span> byJmpCode<span class=\"token punctuation\">,</span> PATCH_LENGTH<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t\t\t<span class=\"token function\">VirtualProtect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>LPVOID<span class=\"token punctuation\">)</span>dwHookAddress<span class=\"token punctuation\">,</span> PATCH_LENGTH<span class=\"token punctuation\">,</span> dwOldProtect<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t\t\tbHookFlag <span class=\"token operator\">=</span> TRUE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t\t\tbRet <span class=\"token operator\">=</span> TRUE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bHookFlag<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t\t\t\t<span class=\"token function\">VirtualProtect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>LPVOID<span class=\"token punctuation\">)</span>dwHookAddress<span class=\"token punctuation\">,</span> PATCH_LENGTH<span class=\"token punctuation\">,</span> PAGE_EXECUTE_READWRITE<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>dwOldProtect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t\t\t\t<span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>LPVOID<span class=\"token punctuation\">)</span>dwHookAddress<span class=\"token punctuation\">,</span> byOriginalCode<span class=\"token punctuation\">,</span> PATCH_LENGTH<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\t\t\t\t<span class=\"token function\">VirtualProtect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>LPVOID<span class=\"token punctuation\">)</span>dwHookAddress<span class=\"token punctuation\">,</span> PATCH_LENGTH<span class=\"token punctuation\">,</span> dwOldProtect<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>\t\t\t\tbHookFlag <span class=\"token operator\">=</span> FALSE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\t\t\t\tbRet <span class=\"token operator\">=</span> TRUE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>\t<span class=\"token keyword\">return</span> bRet<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>VOID <span class=\"token function\">setMessageBoxHook</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>\t<span class=\"token comment\">// 获取要 HOOK 的函数地址</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>\tdwHookAddress <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span><span class=\"token function\">GetProcAddress</span><span class=\"token punctuation\">(</span><span class=\"token function\">LoadLibrary</span><span class=\"token punctuation\">(</span>L<span class=\"token string\">\"user32.dll\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"MessageBoxW\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>\tdwRetAddress <span class=\"token operator\">=</span> dwHookAddress <span class=\"token operator\">+</span> PATCH_LENGTH<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>\t<span class=\"token comment\">// 安装或者卸载 HOOK</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>\t<span class=\"token function\">HookMessageBox</span><span class=\"token punctuation\">(</span>TRUE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>BOOL APIENTRY <span class=\"token function\">DllMain</span><span class=\"token punctuation\">(</span>HMODULE hModule<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>\tDWORD  ul_reason_for_call<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>\tLPVOID lpReserved</pre></td></tr><tr><td data-num=\"88\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>\t<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>ul_reason_for_call<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>\t<span class=\"token keyword\">case</span> DLL_PROCESS_ATTACH<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>\t\t<span class=\"token function\">setMessageBoxHook</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>\t<span class=\"token keyword\">case</span> DLL_THREAD_ATTACH<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>\t<span class=\"token keyword\">case</span> DLL_THREAD_DETACH<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>\t<span class=\"token keyword\">case</span> DLL_PROCESS_DETACH<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>\t<span class=\"token keyword\">return</span> TRUE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>把 DLL 注入到进程中即可。</p>\n<p>结果：</p>\n<p>没有被 INLINE HOOK 的 MessageBoxW</p>\n<p><img data-src=\"image002.png\" alt=\"\" /></p>\n<p>点击运行，程序是正常运行的。</p>\n<p><img data-src=\"image003.png\" alt=\"\" /></p>\n<p>接下来远程线程开始执行了，再次查看</p>\n<p><img data-src=\"image004.png\" alt=\"\" /></p>\n<p>可以发现已经 HOOK MessageBox 了。</p>\n<p><img data-src=\"image005.png\" alt=\"\" /></p>\n<p>最后运行</p>\n<p><img data-src=\"image006.png\" alt=\"\" /></p>\n<h1 id=\"inline-hook改进版\"><a class=\"anchor\" href=\"#inline-hook改进版\">#</a> INLINE-HOOK 改进版</h1>\n<p>上述的 INLINE HOOK 其中要跳转的裸函数内并不能定义局部变量，因为编译器并不会帮我们平衡堆栈，但我们可以在裸函数内用全局变量。这样我们写裸函数会有很多限制，但我们可以定义一个函数，在裸函数中去调用它，这样要调用的函数就没有任何限制了。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//dllmain.cpp : 定义 DLL 应用程序的入口点。</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">WIN32_LEAN_AND_MEAN</span>             <span class=\"token comment\">// 从 Windows 头文件中排除极少使用的内容</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// Windows 头文件</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;windows.h></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">//5 个字节</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">PATCH_LENGTH</span> <span class=\"token expression\"><span class=\"token number\">5</span> </span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>DWORD dwHookAddress <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>DWORD dwRetAddress <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>WCHAR szNewText<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> L<span class=\"token string\">\"InlineHook!\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">MessageBoxProc</span><span class=\"token punctuation\">(</span> HWND hWnd<span class=\"token punctuation\">,</span> LPCWSTR lpText<span class=\"token punctuation\">,</span> LPCWSTR lpCaption<span class=\"token punctuation\">,</span> UINT uType<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token comment\">// 这个函数怎么写都可以，没有限制</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tWCHAR szBuffer<span class=\"token punctuation\">[</span><span class=\"token number\">0x100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token function\">wsprintf</span><span class=\"token punctuation\">(</span>szBuffer<span class=\"token punctuation\">,</span> <span class=\"token string\">\"%x %ws %ws %x\\r\\n\"</span><span class=\"token punctuation\">,</span> hWnd<span class=\"token punctuation\">,</span> lpText<span class=\"token punctuation\">,</span> lpCaption<span class=\"token punctuation\">,</span> uType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token function\">OutputDebugStringW</span><span class=\"token punctuation\">(</span>szBuffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">__declspec</span><span class=\"token punctuation\">(</span>naked<span class=\"token punctuation\">)</span> <span class=\"token function\">NewMessageBox</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t__asm <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t<span class=\"token comment\">// 保存寄存器</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\tpushad<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\tpushfd<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t<span class=\"token comment\">// 调用处理程序</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\tpush dword ptr ss <span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>esp <span class=\"token operator\">+</span> <span class=\"token number\">0x24</span> <span class=\"token operator\">+</span> <span class=\"token number\">0x4</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\tpush dword ptr ss <span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>esp <span class=\"token operator\">+</span> <span class=\"token number\">0x24</span> <span class=\"token operator\">+</span> <span class=\"token number\">0x8</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\tpush dword ptr ss <span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>esp <span class=\"token operator\">+</span> <span class=\"token number\">0x24</span> <span class=\"token operator\">+</span> <span class=\"token number\">0xC</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\tpush dword ptr ss <span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>esp <span class=\"token operator\">+</span> <span class=\"token number\">0x24</span> <span class=\"token operator\">+</span> <span class=\"token number\">0x10</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\tcall MessageBoxProc<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\tadd esp<span class=\"token punctuation\">,</span> <span class=\"token number\">0x10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t<span class=\"token comment\">// 恢复寄存器</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\tpopfd<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\tpopad<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\t<span class=\"token comment\">// 执行覆盖的代码</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\tmov edi<span class=\"token punctuation\">,</span> edi<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\tpush ebp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\tmov ebp<span class=\"token punctuation\">,</span> esp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\t<span class=\"token comment\">// 执行返回</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\tjmp dwRetAddress<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>BOOL <span class=\"token function\">HookMessageBox</span><span class=\"token punctuation\">(</span>BOOL bOpen<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\tBOOL bRet <span class=\"token operator\">=</span> FALSE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\tBYTE byJmpCode<span class=\"token punctuation\">[</span>PATCH_LENGTH<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">0xE9</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\tDWORD dwOldProtect <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t<span class=\"token keyword\">static</span> BYTE byOriginalCode<span class=\"token punctuation\">[</span>PATCH_LENGTH<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t<span class=\"token keyword\">static</span> BOOL bHookFlag <span class=\"token operator\">=</span> FALSE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t<span class=\"token comment\">// 初始化 byJmpCode</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t<span class=\"token function\">memset</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>byJmpCode<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x90</span><span class=\"token punctuation\">,</span> PATCH_LENGTH <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t<span class=\"token comment\">// 存储跳转地址</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>DWORD<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>byJmpCode<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>NewMessageBox <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>dwHookAddress <span class=\"token operator\">-</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// E9 00 00 00 00 90</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t<span class=\"token comment\">// 备份被覆盖的 Code</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t<span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>byOriginalCode<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>LPVOID<span class=\"token punctuation\">)</span>dwHookAddress<span class=\"token punctuation\">,</span> PATCH_LENGTH<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bOpen<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>bHookFlag<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t\t\t<span class=\"token function\">VirtualProtect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>LPVOID<span class=\"token punctuation\">)</span>dwHookAddress<span class=\"token punctuation\">,</span> PATCH_LENGTH<span class=\"token punctuation\">,</span> PAGE_EXECUTE_READWRITE<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>dwOldProtect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\t\t\t<span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>LPVOID<span class=\"token punctuation\">)</span>dwHookAddress<span class=\"token punctuation\">,</span> byJmpCode<span class=\"token punctuation\">,</span> PATCH_LENGTH<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>\t\t\t<span class=\"token function\">VirtualProtect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>LPVOID<span class=\"token punctuation\">)</span>dwHookAddress<span class=\"token punctuation\">,</span> PATCH_LENGTH<span class=\"token punctuation\">,</span> dwOldProtect<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\t\t\tbHookFlag <span class=\"token operator\">=</span> TRUE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\t\t\tbRet <span class=\"token operator\">=</span> TRUE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\t\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bHookFlag<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>\t\t\t\t<span class=\"token function\">VirtualProtect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>LPVOID<span class=\"token punctuation\">)</span>dwHookAddress<span class=\"token punctuation\">,</span> PATCH_LENGTH<span class=\"token punctuation\">,</span> PAGE_EXECUTE_READWRITE<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>dwOldProtect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>\t\t\t\t<span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>LPVOID<span class=\"token punctuation\">)</span>dwHookAddress<span class=\"token punctuation\">,</span> byOriginalCode<span class=\"token punctuation\">,</span> PATCH_LENGTH<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>\t\t\t\t<span class=\"token function\">VirtualProtect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>LPVOID<span class=\"token punctuation\">)</span>dwHookAddress<span class=\"token punctuation\">,</span> PATCH_LENGTH<span class=\"token punctuation\">,</span> dwOldProtect<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>\t\t\t\tbHookFlag <span class=\"token operator\">=</span> FALSE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>\t\t\t\tbRet <span class=\"token operator\">=</span> TRUE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>\t<span class=\"token keyword\">return</span> bRet<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>VOID <span class=\"token function\">setMessageBoxHook</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>\t<span class=\"token comment\">// 获取要 HOOK 的函数地址</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>\tdwHookAddress <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span><span class=\"token function\">GetProcAddress</span><span class=\"token punctuation\">(</span><span class=\"token function\">LoadLibrary</span><span class=\"token punctuation\">(</span>L<span class=\"token string\">\"user32.dll\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"MessageBoxW\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>\tdwRetAddress <span class=\"token operator\">=</span> dwHookAddress <span class=\"token operator\">+</span> PATCH_LENGTH<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>\t<span class=\"token comment\">// 安装或者卸载 HOOK</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>\t<span class=\"token function\">HookMessageBox</span><span class=\"token punctuation\">(</span>TRUE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>BOOL APIENTRY <span class=\"token function\">DllMain</span><span class=\"token punctuation\">(</span>HMODULE hModule<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>\tDWORD  ul_reason_for_call<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>\tLPVOID lpReserved</pre></td></tr><tr><td data-num=\"99\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>\t<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>ul_reason_for_call<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>\t<span class=\"token keyword\">case</span> DLL_PROCESS_ATTACH<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>\t\t<span class=\"token function\">setMessageBoxHook</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>\t<span class=\"token keyword\">case</span> DLL_THREAD_ATTACH<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>\t<span class=\"token keyword\">case</span> DLL_THREAD_DETACH<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>\t<span class=\"token keyword\">case</span> DLL_PROCESS_DETACH<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>\t<span class=\"token keyword\">return</span> TRUE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>结果：</p>\n<p><img data-src=\"image007.png\" alt=\"\" /></p>\n<p><img data-src=\"image008.png\" alt=\"\" /></p>\n<p>代码已经写入了。</p>\n<p>海哥说了代码可以当成模板。当然只是 HOOK 了函数的前五个字节</p>\n<h1 id=\"另一种inline-hook\"><a class=\"anchor\" href=\"#另一种inline-hook\">#</a> 另一种 INLINE HOOK</h1>\n<ul>\n<li>很多时候，防守的一方都会检测 E9 来判断自己的程序是否被 HOOK 了</li>\n<li>将 JMP……JMP 改成 CALL + RET 的方式实现</li>\n</ul>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//dllmain.cpp : 定义 DLL 应用程序的入口点。</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">WIN32_LEAN_AND_MEAN</span>             <span class=\"token comment\">// 从 Windows 头文件中排除极少使用的内容</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// Windows 头文件</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;windows.h></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">//5 个字节</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">PATCH_LENGTH</span> <span class=\"token expression\"><span class=\"token number\">5</span> </span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>DWORD dwHookAddress <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>DWORD dwRetAddress <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>WCHAR szNewText<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> L<span class=\"token string\">\"InlineHook!\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">MessageBoxProc</span><span class=\"token punctuation\">(</span> HWND hWnd<span class=\"token punctuation\">,</span> LPCWSTR lpText<span class=\"token punctuation\">,</span> LPCWSTR lpCaption<span class=\"token punctuation\">,</span> UINT uType<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token comment\">// 这个函数怎么写都可以，没有限制</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tWCHAR szBuffer<span class=\"token punctuation\">[</span><span class=\"token number\">0x100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token function\">wsprintf</span><span class=\"token punctuation\">(</span>szBuffer<span class=\"token punctuation\">,</span> <span class=\"token string\">\"%x %ws %ws %x\\r\\n\"</span><span class=\"token punctuation\">,</span> hWnd<span class=\"token punctuation\">,</span> lpText<span class=\"token punctuation\">,</span> lpCaption<span class=\"token punctuation\">,</span> uType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token function\">OutputDebugStringW</span><span class=\"token punctuation\">(</span>szBuffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">__declspec</span><span class=\"token punctuation\">(</span>naked<span class=\"token punctuation\">)</span> <span class=\"token function\">NewMessageBox</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t__asm <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t<span class=\"token comment\">// 保存寄存器</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\tpushad<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\tpushfd<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t<span class=\"token comment\">// 调用处理程序</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\tpush dword ptr ss <span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>esp <span class=\"token operator\">+</span> <span class=\"token number\">0x24</span> <span class=\"token operator\">+</span> <span class=\"token number\">0x4</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\tpush dword ptr ss <span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>esp <span class=\"token operator\">+</span> <span class=\"token number\">0x24</span> <span class=\"token operator\">+</span> <span class=\"token number\">0x8</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\tpush dword ptr ss <span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>esp <span class=\"token operator\">+</span> <span class=\"token number\">0x24</span> <span class=\"token operator\">+</span> <span class=\"token number\">0xC</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\tpush dword ptr ss <span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>esp <span class=\"token operator\">+</span> <span class=\"token number\">0x24</span> <span class=\"token operator\">+</span> <span class=\"token number\">0x10</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\tcall MessageBoxProc<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\tadd esp<span class=\"token punctuation\">,</span> <span class=\"token number\">0x10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t<span class=\"token comment\">// 恢复寄存器</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\tpopfd<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\tpopad<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\t<span class=\"token comment\">// 执行覆盖的代码</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\tmov edi<span class=\"token punctuation\">,</span> edi<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\tpush ebp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\tmov ebp<span class=\"token punctuation\">,</span> esp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\t<span class=\"token comment\">// 执行返回</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\tretn<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>BOOL <span class=\"token function\">HookMessageBox</span><span class=\"token punctuation\">(</span>BOOL bOpen<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\tBOOL bRet <span class=\"token operator\">=</span> FALSE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\tBYTE byJmpCode<span class=\"token punctuation\">[</span>PATCH_LENGTH<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">0xE8</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\tDWORD dwOldProtect <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t<span class=\"token keyword\">static</span> BYTE byOriginalCode<span class=\"token punctuation\">[</span>PATCH_LENGTH<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t<span class=\"token keyword\">static</span> BOOL bHookFlag <span class=\"token operator\">=</span> FALSE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t<span class=\"token comment\">// 初始化 byJmpCode</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t<span class=\"token function\">memset</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>byJmpCode<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x90</span><span class=\"token punctuation\">,</span> PATCH_LENGTH <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t<span class=\"token comment\">// 存储跳转地址</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>DWORD<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>byJmpCode<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>NewMessageBox <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>dwHookAddress <span class=\"token operator\">-</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// E9 00 00 00 00 90</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t<span class=\"token comment\">// 备份被覆盖的 Code</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t<span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>byOriginalCode<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>LPVOID<span class=\"token punctuation\">)</span>dwHookAddress<span class=\"token punctuation\">,</span> PATCH_LENGTH<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bOpen<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>bHookFlag<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t\t\t<span class=\"token function\">VirtualProtect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>LPVOID<span class=\"token punctuation\">)</span>dwHookAddress<span class=\"token punctuation\">,</span> PATCH_LENGTH<span class=\"token punctuation\">,</span> PAGE_EXECUTE_READWRITE<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>dwOldProtect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\t\t\t<span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>LPVOID<span class=\"token punctuation\">)</span>dwHookAddress<span class=\"token punctuation\">,</span> byJmpCode<span class=\"token punctuation\">,</span> PATCH_LENGTH<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>\t\t\t<span class=\"token function\">VirtualProtect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>LPVOID<span class=\"token punctuation\">)</span>dwHookAddress<span class=\"token punctuation\">,</span> PATCH_LENGTH<span class=\"token punctuation\">,</span> dwOldProtect<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\t\t\tbHookFlag <span class=\"token operator\">=</span> TRUE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\t\t\tbRet <span class=\"token operator\">=</span> TRUE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\t\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bHookFlag<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>\t\t\t\t<span class=\"token function\">VirtualProtect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>LPVOID<span class=\"token punctuation\">)</span>dwHookAddress<span class=\"token punctuation\">,</span> PATCH_LENGTH<span class=\"token punctuation\">,</span> PAGE_EXECUTE_READWRITE<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>dwOldProtect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>\t\t\t\t<span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>LPVOID<span class=\"token punctuation\">)</span>dwHookAddress<span class=\"token punctuation\">,</span> byOriginalCode<span class=\"token punctuation\">,</span> PATCH_LENGTH<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>\t\t\t\t<span class=\"token function\">VirtualProtect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>LPVOID<span class=\"token punctuation\">)</span>dwHookAddress<span class=\"token punctuation\">,</span> PATCH_LENGTH<span class=\"token punctuation\">,</span> dwOldProtect<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>\t\t\t\tbHookFlag <span class=\"token operator\">=</span> FALSE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>\t\t\t\tbRet <span class=\"token operator\">=</span> TRUE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>\t<span class=\"token keyword\">return</span> bRet<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>VOID <span class=\"token function\">setMessageBoxHook</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>\t<span class=\"token comment\">// 获取要 HOOK 的函数地址</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>\tdwHookAddress <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span><span class=\"token function\">GetProcAddress</span><span class=\"token punctuation\">(</span><span class=\"token function\">LoadLibrary</span><span class=\"token punctuation\">(</span>L<span class=\"token string\">\"user32.dll\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"MessageBoxW\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>\tdwRetAddress <span class=\"token operator\">=</span> dwHookAddress <span class=\"token operator\">+</span> PATCH_LENGTH<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>\t<span class=\"token comment\">// 安装或者卸载 HOOK</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>\t<span class=\"token function\">HookMessageBox</span><span class=\"token punctuation\">(</span>TRUE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>BOOL APIENTRY <span class=\"token function\">DllMain</span><span class=\"token punctuation\">(</span>HMODULE hModule<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>\tDWORD  ul_reason_for_call<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>\tLPVOID lpReserved</pre></td></tr><tr><td data-num=\"99\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>\t<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>ul_reason_for_call<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>\t<span class=\"token keyword\">case</span> DLL_PROCESS_ATTACH<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>\t\t<span class=\"token function\">setMessageBoxHook</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>\t<span class=\"token keyword\">case</span> DLL_THREAD_ATTACH<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>\t<span class=\"token keyword\">case</span> DLL_THREAD_DETACH<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>\t<span class=\"token keyword\">case</span> DLL_PROCESS_DETACH<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>\t<span class=\"token keyword\">return</span> TRUE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "INLINE-HOOK"
            ]
        }
    ]
}