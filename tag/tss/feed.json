{
    "version": "https://jsonfeed.org/version/1",
    "title": "Or0kit • All posts by \"tss\" tag",
    "description": "临渊羡鱼，不如退而结网",
    "home_page_url": "https://Or0kit.github.io",
    "items": [
        {
            "id": "https://or0kit.github.io/Bin/Core/WindowsXp/Protect-Mode/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F-%E4%BB%BB%E5%8A%A1%E6%AE%B5/",
            "url": "https://or0kit.github.io/Bin/Core/WindowsXp/Protect-Mode/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F-%E4%BB%BB%E5%8A%A1%E6%AE%B5/",
            "title": "保护模式-任务段",
            "date_published": "2021-08-13T06:40:43.000Z",
            "content_html": "<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<p>当权限发生发生改变时堆栈也会随之发生改变 (如：3 环进 0 环)，由于 CS 的 CPL 发生变化，导致了 SS 也必须切换。<br />\n堆栈段寄存器 SS（Stack Segment），指出当前堆栈的底部地址，即存放堆栈段的段基址。</p>\n<p>当发生权限切换的时候，会有新的 ESP 和 SS（CS 是由中断门或者调用门指定），那么 ESP 和 SS 从何而来呢？</p>\n<p>答案：TSS (Task-state segment)，任务状态段</p>\n<h2 id=\"tsstask-state-segment任务状态段的结构\"><a class=\"anchor\" href=\"#tsstask-state-segment任务状态段的结构\">#</a> TSS (Task-State Segment) 任务状态段的结构</h2>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<p>TSS 是一块内存，大小 104 字节。</p>\n<h2 id=\"tss的作用\"><a class=\"anchor\" href=\"#tss的作用\">#</a> TSS 的作用</h2>\n<p>这关乎于：<ins>Intel 的设计思想</ins>和<ins>操作系统的设计思想</ins></p>\n<p>TSS 里存储了段寄存器，通用寄存器，标志寄存器，EIP，CR3 寄存器，4 个堆栈<br />\n TSS 的设计初衷是任务切换 (线程切换)，当线程切换的时候，同时替换寄存器的值，可是操作系统 (Windows，Linux) 并没有使用 TSS 来切换线程。<br />\n但我们却可以用 TSS 做其他事情。☺</p>\n<p>那我们就要学习 CPU 是如何使用 TSS 的了。</p>\n<h2 id=\"cpu如何找到tss\"><a class=\"anchor\" href=\"#cpu如何找到tss\">#</a> CPU 如何找到 TSS？</h2>\n<p>答案：TR 寄存器</p>\n<p><strong>通过 <code>TR</code>  寄存器的段选择子，查询 <code>GDT</code>  表，找到 <code>TSS</code>  段描述符，然后获取 TR 的 <code>Base</code> , <code>Base</code>  中存储的就是 <code>TSS</code>  的地址， <code>Limit</code>  中存储的是 <code>TSS</code>  的大小</strong></p>\n<p>如图所示:</p>\n<p><img data-src=\"image002.png\" alt=\"\" /></p>\n<h2 id=\"tss段描述符\"><a class=\"anchor\" href=\"#tss段描述符\">#</a> TSS 段描述符</h2>\n<p><img data-src=\"image003.png\" alt=\"\" /></p>\n<ul>\n<li><strong>当 TYPE 位为 9 (1001) 的时候，说明这个段描述符是一个 TSS 段描述符，这个段描述符没有加载到 TR 寄存器中</strong></li>\n<li><strong>当 TYPE 位为 B (1011) 的时候，说明也是 TSS 段描述符，这个段描述符已经加载到了 TR 寄存器中</strong></li>\n</ul>\n<h2 id=\"tr寄存器的读写\"><a class=\"anchor\" href=\"#tr寄存器的读写\">#</a> TR 寄存器的读写</h2>\n<ul>\n<li>将 TSS 段描述符加载到 TR 寄存器</li>\n</ul>\n<p>指令： <code>LTR</code> <br />\n 用 <code>LTR</code>  指令去装载 TR 寄存器，仅仅是改变了 TR 寄存器里面的内容 (96 位)<br />\n 并没有真正改变 TSS，原来的 TSS 还在。</p>\n<p><code>LTR</code>  指令只能在系统层使用</p>\n<p>加载后 TSS 段描述符会 TYPE 位发生改变 1001-&gt;1011，9 变成 B，说明这个段描述符被加载到了 TR 寄存器</p>\n<ul>\n<li>读 TR 寄存器</li>\n</ul>\n<p>指令：STR<br />\n 如果用 STR 去读 TR 寄存器，只能读到 TR 寄存器的 16 位，也就是段选择子，和读普通段寄存器一样，96 位只能读出其中 16 位</p>\n<h2 id=\"修改tr寄存器\"><a class=\"anchor\" href=\"#修改tr寄存器\">#</a> 修改 TR 寄存器</h2>\n<p>在 Ring0 我们可以通过 LTR 指令去修改 TR 寄存器<br />\n在 Ring3 我们可以通过 CALL FAR 或者 JMP FAR 指令来修改</p>\n<p>用 JMP 去访问一个代码段的时候，改变的是 CS 和 EIP ：<br />\nJMP 0x48:0x123456 如果 0x48 是代码段<br />\n执行后：CS-- &gt; 0x48 EIP-- &gt; 0x123456</p>\n<p>用 JMP 去访问一个任务段的时候：<br />\n如果 0x48 是 TSS 段描述符，先修改 TR 寄存器，在用 TR.Base 指向的 TSS 中的值修改当前的寄存器<br />\n JMP 指令会清当前 TR 所使用的的 TSS descriptor 的 Busy 位是当前 TSS descriptor 置为 available 状态</p>\n<p>如果使用 CALL 指令进行调用，将会在新的 TSS 段里的 LINk 域写入原 TSS selector 值。</p>\n<p>使用 CALL 指令进行调用时，Eflags.NT 标志位会被处理器进行置位，指示新的 task 进入 Nested（嵌套）状态。JMP 指令则相反，Eflags.NT 标志位会被进行清位。</p>\n<p>NT=0 IRET 指令 堆栈取返回地址<br />\n NT=1 IRET 指令 返回时会找 TSS 的 LINK 域的值</p>\n<h2 id=\"实践加载自定义tss\"><a class=\"anchor\" href=\"#实践加载自定义tss\">#</a> 实践：加载自定义 TSS</h2>\n<p>知道了原理，我们就可以在这个过程中动些手脚。</p>\n<p>CPU 通过 TR 寄存器来找到 TSS，如果我们使用自己的 TSS 来替换原来的寄存器，就必须要修改 TR 寄存器，TR 寄存器里面的值又是来自 TSS 段描述符。</p>\n<p>首先我们要构建 TSS 段描述符</p>\n<p><strong>G 位为 0，粒度为字节，TSS 以字节为单位</strong><br />\n<strong> <code>Segment Limit</code>  必须得大于等于 <code>67H</code> </strong></p>\n<blockquote>\n<p>BASE+G+AVL+LIMT    +    P+DPL+TYPE    +    BASE     +BASE   +Segment Limit<br />\n00    00              E(1110)+9(1001)       00       0000    0068</p>\n</blockquote>\n<p>暂取 TSS 段描述符为 <code>0000E900`00000068</code>  Base 的值填写的是内存中 tss 结构的地址。</p>\n<p>新的 TSS 段必须要指定要素： <code>EIP</code> 、 <code>ESP</code> 、 <code>CS</code> 、 <code>SS</code>  以及 <code>CR3</code>  的值。</p>\n<p>ESP 的值：定义局部数组作为裸函数的栈，因为我们不知道进入 0 环后哪里的堆栈地址可以使用，所以需要自己指定一个可以使用的地址，传给 TSS [14] 时，应该传数组尾部的指针，因为压栈 ESP 减小，如果传数组首地址，那一压栈就越界了。</p>\n<h3 id=\"使用call去访问一个任务段并能够正确返回\"><a class=\"anchor\" href=\"#使用call去访问一个任务段并能够正确返回\">#</a> 使用 CALL 去访问一个任务段，并能够正确返回</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;Windows.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>DWORD dwOk<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>DWORD dwESP<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>DWORD dwCS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 任务切换后的 EIP</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">__declspec</span><span class=\"token punctuation\">(</span>naked<span class=\"token punctuation\">)</span> <span class=\"token function\">R0Func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t__asm</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\tpushad</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\tpushfd</pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\tpush fs</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> <span class=\"token number\">3</span> <span class=\"token comment\">//int 3 会修改 FS</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\tpop fs</pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\tmov eax<span class=\"token punctuation\">,</span><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\tmov dword ptr ds<span class=\"token operator\">:</span><span class=\"token punctuation\">[</span>dwOk<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>eax</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\tmov eax<span class=\"token punctuation\">,</span>esp</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\tmov dword ptr ds<span class=\"token operator\">:</span><span class=\"token punctuation\">[</span>dwESP<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>eax</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\tmov ax<span class=\"token punctuation\">,</span>cs</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\tmov word ptr ds<span class=\"token operator\">:</span><span class=\"token punctuation\">[</span>dwCS<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>ax</pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\tpopfd</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\tpopad</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\tiretd</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#123;</span>\t</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\tDWORD dwCr3<span class=\"token punctuation\">;</span> <span class=\"token comment\">//windbg 获取</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t<span class=\"token keyword\">char</span> esp<span class=\"token punctuation\">[</span><span class=\"token number\">0x1000</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 任务切换后的栈</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t<span class=\"token comment\">// 此数组的地址就是 TSS 描述符中的 Base</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\tDWORD TSS<span class=\"token punctuation\">[</span><span class=\"token number\">26</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t<span class=\"token comment\">// 也可以直接开辟一块私有内存</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t<span class=\"token comment\">//DWORD *TSS = (DWORD*)VirtualAlloc(NULL,104,MEM_COMMIT,PAGE_READWRITE);</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t<span class=\"token comment\">//if (TSS == NULL)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t<span class=\"token comment\">//&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t<span class=\"token comment\">//\tprintf (\"VirtualAlloc 失败，% d\\n\", GetLastError ());</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t<span class=\"token comment\">//\tgetchar();</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t<span class=\"token comment\">//\treturn -1;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t<span class=\"token comment\">//&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请在windbg执行: eq 8003f048 %02x00e9%02x`%04x0068\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>TSS<span class=\"token operator\">>></span><span class=\"token number\">24</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x000000FF</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>TSS<span class=\"token operator\">>></span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x000000FF</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>WORD<span class=\"token punctuation\">)</span>TSS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请在windbg中执行!process 0 0，复制进程DirBase的值，并输入.\\nCR3: \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%x\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>dwCr3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 注意是 % x</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Previous Task Link CPU 填充，表示上一个任务的选择子</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ESP0</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// SS0</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ESP1</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// SS1</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ESP2</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// SS2</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> dwCr3<span class=\"token punctuation\">;</span> \t <span class=\"token comment\">// CR3 学到页就知道是啥了</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>R0Func<span class=\"token punctuation\">;</span> <span class=\"token comment\">// EIP</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// EFLAGS</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// EAX</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">11</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ECX</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">12</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// EDX</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">13</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// EBX</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">14</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>esp<span class=\"token operator\">+</span><span class=\"token number\">0x1000</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">15</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// EBP</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">16</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ESI</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">17</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// EDI</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">18</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000023</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ES</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">19</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000008</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// CS</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000010</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// SS</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">21</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// DS</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">22</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// FS</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">23</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// GS</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">24</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// LDT Segment Selector</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">25</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x20ac0000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// I/O Map Base Address</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>\t<span class=\"token keyword\">char</span> buff<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x48</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\t</pre></td></tr><tr><td data-num=\"83\"></td><td><pre>\t__asm</pre></td></tr><tr><td data-num=\"84\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>\t\tcall fword ptr<span class=\"token punctuation\">[</span>buff<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ok: %d\\nESP: %x\\nCS: %x\\n\"</span><span class=\"token punctuation\">,</span> dwOk<span class=\"token punctuation\">,</span> dwESP<span class=\"token punctuation\">,</span> dwCS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"image004.png\" alt=\"\" /></p>\n<h3 id=\"使用jmp去访问一个任务段并能够正确返回\"><a class=\"anchor\" href=\"#使用jmp去访问一个任务段并能够正确返回\">#</a> 使用 JMP 去访问一个任务段，并能够正确返回</h3>\n<p>和 CALL FAR 对比，NT 位不会置 1，TSS  <code>previous task link</code>  也不会填充旧的 TR，因此想要返回，可以先保存旧的 TR，然后 JMP FAR 回去。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;Windows.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>DWORD dwOk<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>DWORD dwESP<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>DWORD dwCS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>BYTE PrevTr<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 旧 TR，供裸函数返回</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 任务切换后的 EIP</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">__declspec</span><span class=\"token punctuation\">(</span>naked<span class=\"token punctuation\">)</span> <span class=\"token function\">R3Func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t__asm</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\tpushad</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\tpushfd</pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\tpush fs</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> <span class=\"token number\">3</span> <span class=\"token comment\">//int 3 会修改 FS</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\tpop fs</pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\tmov eax<span class=\"token punctuation\">,</span><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\tmov dword ptr ds<span class=\"token operator\">:</span><span class=\"token punctuation\">[</span>dwOk<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>eax</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\tmov eax<span class=\"token punctuation\">,</span>esp</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\tmov dword ptr ds<span class=\"token operator\">:</span><span class=\"token punctuation\">[</span>dwESP<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>eax</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\tmov ax<span class=\"token punctuation\">,</span>cs</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\tmov word ptr ds<span class=\"token operator\">:</span><span class=\"token punctuation\">[</span>dwCS<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>ax</pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\tpopfd</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\tpopad</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\tjmp fword ptr ds<span class=\"token operator\">:</span><span class=\"token punctuation\">[</span>PrevTr<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token punctuation\">&#123;</span>\t</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\tDWORD dwCr3<span class=\"token punctuation\">;</span> <span class=\"token comment\">//windbg 获取</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t<span class=\"token keyword\">char</span> esp<span class=\"token punctuation\">[</span><span class=\"token number\">0x1000</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 任务切换后的栈，数组名就是 ESP</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t<span class=\"token comment\">// 此数组的地址就是 TSS 描述符中的 Base</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\tDWORD <span class=\"token operator\">*</span>TSS <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>DWORD<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">VirtualAlloc</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span><span class=\"token number\">104</span><span class=\"token punctuation\">,</span>MEM_COMMIT<span class=\"token punctuation\">,</span>PAGE_READWRITE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>TSS <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"VirtualAlloc 失败，%d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">GetLastError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t\t<span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请在windbg执行: eq 8003f048 %02x00e9%02x`%04x0068\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>TSS<span class=\"token operator\">>></span><span class=\"token number\">24</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x000000FF</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>TSS<span class=\"token operator\">>></span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x000000FF</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>WORD<span class=\"token punctuation\">)</span>TSS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请在windbg中执行!process 0 0，复制进程DirBase的值，并输入.\\nCR3: \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%x\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>dwCr3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 注意是 % x</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Previous Task Link CPU 填充，表示上一个任务的选择子</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ESP0</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// SS0</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ESP1</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// SS1</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ESP2</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// SS2</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> dwCr3<span class=\"token punctuation\">;</span> <span class=\"token comment\">// CR3 学到页就知道是啥了</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>R3Func<span class=\"token punctuation\">;</span> <span class=\"token comment\">// EIP</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// EFLAGS</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// EAX</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">11</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ECX</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">12</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// EDX</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">13</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// EBX</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">14</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>esp<span class=\"token operator\">+</span><span class=\"token number\">0x1000</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"68\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">15</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// EBP</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">16</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ESI</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">17</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// EDI</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">18</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000023</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ES</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">19</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000008</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// CS</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000010</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// SS</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">21</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// DS</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">22</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// FS</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">23</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// GS</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">24</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// LDT Segment Selector</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">25</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x20ac0000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// I/O Map Base Address</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>\t<span class=\"token keyword\">char</span> buff<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x48</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\t</pre></td></tr><tr><td data-num=\"81\"></td><td><pre>\t__asm</pre></td></tr><tr><td data-num=\"82\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>\t\tstr ax</pre></td></tr><tr><td data-num=\"84\"></td><td><pre>\t\tlea edi<span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span>PrevTr<span class=\"token operator\">+</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>\t\tmov <span class=\"token punctuation\">[</span>edi<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>ax</pre></td></tr><tr><td data-num=\"86\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"87\"></td><td><pre>\t\tjmp fword ptr<span class=\"token punctuation\">[</span>buff<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ok: %d\\nESP: %x\\nCS: %x\\n\"</span><span class=\"token punctuation\">,</span> dwOk<span class=\"token punctuation\">,</span> dwESP<span class=\"token punctuation\">,</span> dwCS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>\t<span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"image005.png\" alt=\"\" /></p>\n<p>由这个例子我们可以发现系统的 TSS 描述符为 <code>80008b04`200020ab</code> （TR 的段选择子为 0x28）</p>\n<p><img data-src=\"image006.png\" alt=\"\" /></p>\n<p>系统 TSS 的地址为： <code>80042000</code> ，查看一下。</p>\n<p><img data-src=\"image007.png\" alt=\"\" /></p>\n<h1 id=\"reference\"><a class=\"anchor\" href=\"#reference\">#</a> Reference</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0t3YW5zeS9hcnRpY2xlL2RldGFpbHMvMTA4ODkwNTg2\">https://blog.csdn.net/Kwansy/article/details/108890586</span><br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vcmV2ZXJjYy9wLzE0NDY4MzMwLmh0bWw=\">https://www.cnblogs.com/revercc/p/14468330.html</span></p>\n",
            "tags": [
                "TSS"
            ]
        }
    ]
}