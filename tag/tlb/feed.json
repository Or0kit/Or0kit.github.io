{
    "version": "https://jsonfeed.org/version/1",
    "title": "Or0kit • All posts by \"tlb\" tag",
    "description": "临渊羡鱼，不如退而结网",
    "home_page_url": "https://Or0kit.github.io",
    "items": [
        {
            "id": "https://or0kit.github.io/Bin/Core/WindowsXp/Protect-Mode/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F-PWT%E4%B8%8EPCD%E5%B1%9E%E6%80%A7/",
            "url": "https://or0kit.github.io/Bin/Core/WindowsXp/Protect-Mode/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F-PWT%E4%B8%8EPCD%E5%B1%9E%E6%80%A7/",
            "title": "保护模式-PWT与PCD属性",
            "date_published": "2021-09-03T14:45:30.000Z",
            "content_html": "<h1 id=\"楔子\"><a class=\"anchor\" href=\"#楔子\">#</a> 楔子</h1>\n<p>在学习 PDE 与 PTE 的属性时，我们对两个位做了 <strong>保留</strong> ，并没有说明其作用，那就是今天要学习的<strong> PWT 位</strong>与<strong> PCD 位</strong></p>\n<h2 id=\"cpu缓存\"><a class=\"anchor\" href=\"#cpu缓存\">#</a> CPU 缓存</h2>\n<p>描述：</p>\n<ol>\n<li>CPU 缓存是位于<strong> CPU</strong> 与<strong>物理内存</strong>之间的 <strong>临时存储器</strong> ，它的 <strong>容量比内存小的多</strong> ，但是<strong>交换速度（读写速度）比内存要快得多</strong></li>\n<li>CPU 缓存可以做的很大，有几 K、几十 K、几百 K、甚至上 M，这决定于<strong> CPU 的版本</strong></li>\n</ol>\n<h3 id=\"cpu缓存与tlb的区别\"><a class=\"anchor\" href=\"#cpu缓存与tlb的区别\">#</a> CPU 缓存与 TLB 的区别</h3>\n<p>TLB：</p>\n<blockquote>\n<p>存储了  <code>线性地址</code> 与  <code>物理地址</code> 之间的对应关系</p>\n</blockquote>\n<p>CPU 缓存：</p>\n<blockquote>\n<p>存储了  <code>物理地址</code> 与  <code>内容</code> 之间的对应关系</p>\n</blockquote>\n<p>有了 CPU 缓存，当 CPU 再去<strong>查找 / 读取</strong>某一个线性地址对应的物理页时，就可以：</p>\n<ol>\n<li>先查 <strong>TLB</strong> ，找到它的<strong>物理地址</strong></li>\n<li>再找 <strong>CPU 缓存</strong> ，找到它的<strong>内容</strong></li>\n</ol>\n<p>CPU 缓存的大小决定了 CPU 的执行速度（ <strong>CPU 缓存越大，速度越快</strong> ，当然也会越贵）</p>\n<p><strong>注意</strong> ：</p>\n<ol>\n<li>更多关于 CPU 缓存的细节请参考<strong> Intel 白皮书第三卷第 11 章</strong></li>\n<li>不同的版本，章节顺序可能不一样，请参考章节标题</li>\n</ol>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<h2 id=\"pwtpage-write-through\"><a class=\"anchor\" href=\"#pwtpage-write-through\">#</a> PWT（Page Write Through）</h2>\n<p><code>PWT=1</code> ：写<strong> Cache</strong> 的时候也要将<strong>数据</strong>写入<strong>内存</strong>中<br />\n <code>PWT=0</code> ：写<strong> Cache</strong> 的时候就只是写 Cache，是否要映射到内存由<strong> CPU 缓存控制器</strong>自己决定</p>\n<h2 id=\"pcdpage-cache-disable\"><a class=\"anchor\" href=\"#pcdpage-cache-disable\">#</a> PCD（Page Cache Disable）</h2>\n<p><code>PCD=1</code> ：禁止某个页写入缓存（直接写入内存）<br />\n<strong>比如</strong> ：做页表用的页，已经存储在 TLB 中，可能就不需要再做缓存，而它的 PCD 一定为 1</p>\n<h1 id=\"reference\"><a class=\"anchor\" href=\"#reference\">#</a> Reference</h1>\n<p>滴水课件<br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxOTg4NDQ4L2FydGljbGUvZGV0YWlscy8xMDI3NjM4OTE=\"> https://blog.csdn.net/qq_41988448/article/details/102763891</span></p>\n",
            "tags": [
                "PWT",
                "PDT",
                "TLB",
                "CPU缓存"
            ]
        },
        {
            "id": "https://or0kit.github.io/Bin/Core/WindowsXp/Protect-Mode/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F-TLB/",
            "url": "https://or0kit.github.io/Bin/Core/WindowsXp/Protect-Mode/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F-TLB/",
            "title": "保护模式-TLB",
            "date_published": "2021-09-03T14:42:24.000Z",
            "content_html": "<h1 id=\"地址解析\"><a class=\"anchor\" href=\"#地址解析\">#</a> 地址解析</h1>\n<p>当我们通过一个线性地址访问一个物理页（比如：MOV EAX,[0x12345678]）时，实际上 CPU 未必只读了 4 个字节。</p>\n<ul>\n<li>10-10-12 分页</li>\n</ul>\n<blockquote>\n<p>CPU 先通过线性地址找到对应的 PDE：4 个字节<br />\n CPU 再通过 PDE 和线性地址找到 PTE：4 个字节<br />\n最后再通过 PTE 找到对应物理页：4 个字节<br />\n一共访问了 12 个字节，如果跨页可能更多。</p>\n</blockquote>\n<ul>\n<li>2-9-9-12 分页</li>\n</ul>\n<blockquote>\n<p>找到 PDPTE：8 个字节<br />\n找到 PDE：8 个字节<br />\n找到 PTE：8 个字节<br />\n最后找到物理页：4 个字节<br />\n一共访问了 20 个字节，如果跨页可能更多。</p>\n</blockquote>\n<p>为了提高访问效率，只能对线性地址与其对应的物理地址做记录。<br />\nCPU 内部做了一张表，用来记录这些东西。它的效率和寄存器一样快，名字叫做 TLB（Translation Lookaside Buffer）。<br />\n由于 TLB 的效率很快，因此它的大小不能太大，少则几十条，多则也只有上百条。</p>\n<p>思考：在一个进程的 4GB 空间中，有无数个线性地址，但是一个 TLB 最多只能记录上百条记录，那么这张表真的有意义吗？</p>\n<h1 id=\"tlb\"><a class=\"anchor\" href=\"#tlb\">#</a> TLB</h1>\n<h2 id=\"tlb结构\"><a class=\"anchor\" href=\"#tlb结构\">#</a> TLB 结构</h2>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<p><code>ATTR：</code> 属性<br />\n在 10-10-12 分页模式下：ATTR = PDE 属性 &amp; PTE 属性<br />\n在 2-9-9-12 分页模式下：ATTR = PDPTE 属性 &amp; PDE 属性 &amp; PTE 属性</p>\n<p><code>LRU：</code> 统计信息<br />\n由于 TLB 的大小有限，因此当 TLB 被写满、又有新的地址即将写入时，TLB 就会根据统计信息来判断哪些地址是不常用的，从而将不常用的记录从 TLB 中移除。</p>\n<p>注意：</p>\n<p>不同的 CPU，TLB 大小不同<br />\n只要 Cr3 发生变化，TLB 立即刷新，一核一套 TLB<br />\n 由于操作系统的高 2G 映射基本不变，因此如果 Cr3 改了，TLB 刷新的话，重建高 2G 以上很浪费。<br />\n所以 PDE 和 PTE 中有个 G 标志位（当 PDE 为大页时，G 标志位才起作用），如果 G 位为 1，刷新 TLB 时将不会刷新 PDE/PTE<br />\nG 位为 1 的页，当 TLB 写满时，CPU 根据统计信息将不常用的地址废弃，保留最常用的地址</p>\n<h2 id=\"tlb种类\"><a class=\"anchor\" href=\"#tlb种类\">#</a> TLB 种类</h2>\n<p>TLB 在 X86 体系的 CPU 中的实际应用最早是从 Intel 的 486CPU 开始的，在 X86 体系的 CPU 中，一般都设有如下 4 组 TLB:</p>\n<blockquote>\n<p>第一组：缓存一般页表（4K 字节页面）的指令页表缓存（Instruction-TLB）；<br />\n第二组：缓存一般页表（4K 字节页面）的数据页表缓存（Data-TLB）；<br />\n第三组：缓存大尺寸页表（2M/4M 字节页面）的指令页表缓存（Instruction-TLB）；<br />\n第四组：缓存大尺寸页表（2M/4M 字节页面）的数据页表缓存（Data-TLB）</p>\n</blockquote>\n<h1 id=\"全局页\"><a class=\"anchor\" href=\"#全局页\">#</a> 全局页</h1>\n<p>G=1，即为全局页，进程（CR3）切换时，TLB 中的记录不会被刷新。</p>\n<h1 id=\"实验\"><a class=\"anchor\" href=\"#实验\">#</a> 实验</h1>\n<h2 id=\"编写代码实现修改页属性实现应用层读写高2g内存地址\"><a class=\"anchor\" href=\"#编写代码实现修改页属性实现应用层读写高2g内存地址\">#</a> 编写代码实现修改页属性，实现应用层读写高 2G 内存地址</h2>\n<p>改 U/S 位，和 PTE 的 G 位<br />\n G=1 时，程序会崩，只有 G=0 才能成功。<br />\n简单解释一下 G 位：<br />\nPDE 中，只有 PS=1（大页）时，G 才有效。<br />\nG 位是全局页的意思，G=1 时，这个线性地址对应的页是全局页，进程切换时，对应的 TLB 不会改变。多个进程的高 2G 数据大部分都是相同的，我们不希望在切换进程时对这部分 TLB 做多余的刷新，所以需要设置 G=1 以提高效率。</p>\n<p>回到本文，我们已经知道 PDE 的 PS=0，所以我们不用管 PDE 的 G。关键是 PTE 的 G，为什么要改成 0 呢？因为线性地址 0x8003f048 默认是 G=1，它在 CPU 中有 TLB 缓存。<br />\n2-9-9-12 模式下获取 PDPTI-PDI-PTI-OFFSET</p>\n<p>公式：</p>\n<blockquote>\n<p>pPDE = 0xc0600000 + (PDPTI*4KB) + (PDI*8)\t\t\t\t\t<br />\npPTE = 0xc0000000 + (PDPTI*2MB) + (PDI*4KB) + (PTI*8)</p>\n</blockquote>\n<p>更高效的公式（MmIsAddressValid 是这么干的）</p>\n<blockquote>\n<p>pPDE = 0xc0600000 + ((addr &gt;&gt; 18) &amp; 0x3ff8)\t<br />\npPTE = 0xc0000000 + ((addr &gt;&gt; 9) &amp; 0x7ffff8)</p>\n</blockquote>\n<p>代码转自<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0t3YW5zeS9hcnRpY2xlL2RldGFpbHMvMTA4OTY1MTk2\"> https://blog.csdn.net/Kwansy/article/details/108965196</span></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;windows.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">//2-9-9-12</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">//PDPTI-PDI-PTI-OFFSET</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>DWORD <span class=\"token operator\">*</span><span class=\"token function\">GetPDE</span><span class=\"token punctuation\">(</span>DWORD addr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token comment\">//return (DWORD *)(0xc0600000 + ((addr >> 18) &amp; 0x3ff8));</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tDWORD PDPTI <span class=\"token operator\">=</span> addr <span class=\"token operator\">>></span> <span class=\"token number\">30</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tDWORD PDI <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>addr <span class=\"token operator\">>></span> <span class=\"token number\">21</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x000001FF</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tDWORD PTI <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>addr <span class=\"token operator\">>></span> <span class=\"token number\">12</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x000001FF</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xC0600000</span> <span class=\"token operator\">+</span> PDPTI <span class=\"token operator\">*</span> <span class=\"token number\">0x1000</span> <span class=\"token operator\">+</span> PDI <span class=\"token operator\">*</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>DWORD <span class=\"token operator\">*</span><span class=\"token function\">GetPTE</span><span class=\"token punctuation\">(</span>DWORD addr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token comment\">//return (DWORD *)(0xc0000000 + ((addr >> 9) &amp; 0x7ffff8));</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\tDWORD PDPTI <span class=\"token operator\">=</span> addr <span class=\"token operator\">>></span> <span class=\"token number\">30</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\tDWORD PDI <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>addr <span class=\"token operator\">>></span> <span class=\"token number\">21</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x000001FF</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\tDWORD PTI <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>addr <span class=\"token operator\">>></span> <span class=\"token number\">12</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x000001FF</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xC0000000</span> <span class=\"token operator\">+</span> PDPTI <span class=\"token operator\">*</span> <span class=\"token number\">0x200000</span> <span class=\"token operator\">+</span> PDI <span class=\"token operator\">*</span> <span class=\"token number\">0x1000</span> <span class=\"token operator\">+</span> PTI <span class=\"token operator\">*</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">__declspec</span><span class=\"token punctuation\">(</span>naked<span class=\"token punctuation\">)</span> <span class=\"token function\">R0Function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t__asm</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\tpush ebp</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\tmov ebp<span class=\"token punctuation\">,</span>esp</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\tsub esp<span class=\"token punctuation\">,</span><span class=\"token number\">0x1000</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\tpushad</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\tpushfd\t\t</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t__asm push fs</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token comment\">//__asm int 3</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t<span class=\"token comment\">// 修改 8003f048 的 U/S 位</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token operator\">*</span><span class=\"token function\">GetPDE</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x8003f048</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|=</span> <span class=\"token number\">0x00000004</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t<span class=\"token operator\">*</span><span class=\"token function\">GetPTE</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x8003f048</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|=</span> <span class=\"token number\">0x00000004</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t<span class=\"token comment\">// 修改 PTE 的 G 位</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t<span class=\"token operator\">*</span><span class=\"token function\">GetPTE</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x8003f048</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;=</span> <span class=\"token number\">0xFFFFFEFF</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t<span class=\"token comment\">//__asm int 3</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t__asm pop fs</pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t__asm</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t\tpopfd</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t\tpopad</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t\tadd esp<span class=\"token punctuation\">,</span><span class=\"token number\">0x1000</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t\tmov esp<span class=\"token punctuation\">,</span>ebp</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t\tpop ebp</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t\tiretd</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"在IDT表构建中断门，请在windbg中执行下面的指令：\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"eq 8003f500 %04xee00`0008%04x\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>R0Function<span class=\"token operator\">>></span><span class=\"token number\">16</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>R0Function <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x0000FFFF</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t<span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t__asm <span class=\"token keyword\">int</span> <span class=\"token number\">0x20</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"0x8003f048 U/S,G位修改成功.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*(PDWORD)0x8003f048 = %08x\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>PDWORD<span class=\"token punctuation\">)</span><span class=\"token number\">0x8003f048</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 读</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>PDWORD<span class=\"token punctuation\">)</span><span class=\"token number\">0x8003f048</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x12345678</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 写</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*(PDWORD)0x8003f048 = %08x\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>PDWORD<span class=\"token punctuation\">)</span><span class=\"token number\">0x8003f048</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 读</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t<span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>结果：</p>\n<p><img data-src=\"image017.png\" alt=\"\" /></p>\n<h2 id=\"体验tlb的存在\"><a class=\"anchor\" href=\"#体验tlb的存在\">#</a> 体验 TLB 的存在</h2>\n<p>火哥的思路是：</p>\n<p>挂上物理页后，修改一下数据，再挂上另外一个物理页，然后在读取这个线性地址，查看数值是以前的还是后面挂上物理页的，由此推测 TLB 是否存在。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;Windows.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>DWORD g_Value <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">//DWORD pPDE, pPTE;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">__declspec</span><span class=\"token punctuation\">(</span>naked<span class=\"token punctuation\">)</span> <span class=\"token function\">CallGate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t__asm <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\tpush <span class=\"token number\">0x30</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\tpop fs<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\tpushad<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\tpushfd<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t<span class=\"token comment\">// 获取 p1 的 PTE</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\tmov eax<span class=\"token punctuation\">,</span><span class=\"token number\">0x600000</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\tshr eax<span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\tand eax<span class=\"token punctuation\">,</span> <span class=\"token number\">0x7FFFF8</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\tsub eax<span class=\"token punctuation\">,</span> <span class=\"token number\">0x40000000</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\tmov ecx<span class=\"token punctuation\">,</span> eax<span class=\"token punctuation\">;</span><span class=\"token comment\">//ecx 指向 p1 的 PTE</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t<span class=\"token comment\">//0 地址一般都是有 PDE 的，直接更换它的 PTE</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\tmov eax<span class=\"token punctuation\">,</span> <span class=\"token number\">0xC0000000</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\tmov ecx<span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span>ecx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t<span class=\"token comment\">//or ecx,0x100;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\tmov<span class=\"token punctuation\">[</span>eax<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> ecx<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\tmov dword ptr ds<span class=\"token operator\">:</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x12345678</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\t<span class=\"token comment\">// 获取 p2 的 PTE</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\tmov eax<span class=\"token punctuation\">,</span><span class=\"token number\">0x700000</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\tshr eax<span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\tand eax<span class=\"token punctuation\">,</span> <span class=\"token number\">0x7FFFF8</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\tsub eax<span class=\"token punctuation\">,</span> <span class=\"token number\">0x40000000</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\tmov ecx<span class=\"token punctuation\">,</span> eax<span class=\"token punctuation\">;</span><span class=\"token comment\">//ecx 指向 p1 的 PTE</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\t<span class=\"token comment\">//0 地址一般都是有 PDE 的，直接更换它的 PTE</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\tmov eax<span class=\"token punctuation\">,</span> <span class=\"token number\">0xC0000000</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\tmov ecx<span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span>ecx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\tmov<span class=\"token punctuation\">[</span>eax<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> ecx<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t\t<span class=\"token comment\">// 刷新 CR3</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t\t<span class=\"token comment\">//mov eax,cr3;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t\t<span class=\"token comment\">//mov cr3,eax;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t\t<span class=\"token comment\">//invlpg dword ptr ds:[0];</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t\tmov eax<span class=\"token punctuation\">,</span> dword ptr ds <span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t\tmov g_Value<span class=\"token punctuation\">,</span> eax<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t\tpopfd<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t\tpopad<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t\tretf<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t<span class=\"token keyword\">char</span> buf<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x48</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t<span class=\"token keyword\">void</span><span class=\"token operator\">*</span> p1 <span class=\"token operator\">=</span> <span class=\"token function\">VirtualAlloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x600000</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x1000</span><span class=\"token punctuation\">,</span> MEM_COMMIT <span class=\"token operator\">|</span> MEM_RESERVE<span class=\"token punctuation\">,</span> PAGE_EXECUTE_READWRITE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\t<span class=\"token keyword\">void</span><span class=\"token operator\">*</span> p2 <span class=\"token operator\">=</span> <span class=\"token function\">VirtualAlloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x700000</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x1000</span><span class=\"token punctuation\">,</span> MEM_COMMIT <span class=\"token operator\">|</span> MEM_RESERVE<span class=\"token punctuation\">,</span> PAGE_EXECUTE_READWRITE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p1 <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p2 <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token function\">VirtualFree</span><span class=\"token punctuation\">(</span>p2<span class=\"token punctuation\">,</span> <span class=\"token number\">0x1000</span><span class=\"token punctuation\">,</span> MEM_COMMIT <span class=\"token operator\">|</span> MEM_RESERVE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"virtual failed p1\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p2 <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>\t\t<span class=\"token function\">VirtualFree</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">,</span> <span class=\"token number\">0x1000</span><span class=\"token punctuation\">,</span> MEM_COMMIT <span class=\"token operator\">|</span> MEM_RESERVE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"virtual failed p2\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>\t<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>DWORD<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>p1<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>\t<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>DWORD<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>p2<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x200</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"windbg execute eq 8003f048 %04xec00`0008%04x\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>CallGate <span class=\"token operator\">>></span> <span class=\"token number\">0x10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xffff</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>CallGate <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xffff</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>\t<span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>\t__asm <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>\t\tcall fword ptr buf<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>\t\tpush <span class=\"token number\">0x3b</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>\t\tpop fs<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>\t<span class=\"token comment\">//printf(\"%#010X\\n\", pPDE);</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>\t<span class=\"token comment\">//printf(\"%#010X\\n\", pPDE);</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"g_Value=%#010X\\n\"</span><span class=\"token punctuation\">,</span> g_Value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>\t<span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>\t<span class=\"token function\">VirtualFree</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">,</span> <span class=\"token number\">0x1000</span><span class=\"token punctuation\">,</span> MEM_COMMIT <span class=\"token operator\">|</span> MEM_RESERVE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>\t<span class=\"token function\">VirtualFree</span><span class=\"token punctuation\">(</span>p2<span class=\"token punctuation\">,</span> <span class=\"token number\">0x1000</span><span class=\"token punctuation\">,</span> MEM_COMMIT <span class=\"token operator\">|</span> MEM_RESERVE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>or ecx,0x100</code>  ecx 中存储的是 PDE，进行或运算，使 G 位为 1，即开起全局页，这样进程（CR3）切换时，TLB 中的记录不会被刷新</p>\n<p><code>mov eax,cr3;</code>   <code>mov cr3,eax;</code>  刷新 CR3。</p>\n<p><code>INVLPG:</code>  使 TLB 数据失效。<br />\n这个指令与直接加载 CR3 的区别在于 CR3 是整个 TLB 都失效，并重新加载。<br />\nINVLPG 则是指定去失效某个页的 TLB。它是一个更细粒度的控制。</p>\n<h3 id=\"实验结果\"><a class=\"anchor\" href=\"#实验结果\">#</a> 实验结果</h3>\n<ul>\n<li><strong>不开启全局页，不刷新 CR3</strong></li>\n</ul>\n<p><img data-src=\"image002.png\" alt=\"\" /></p>\n<ul>\n<li><strong>不开启全局页，刷新 CR3</strong></li>\n</ul>\n<p><img data-src=\"image003.png\" alt=\"\" /></p>\n<ul>\n<li><strong>开启全局页，刷新 CR3</strong></li>\n</ul>\n<p><img data-src=\"image004.png\" alt=\"\" /></p>\n<ul>\n<li><strong>开启全局页，刷新 CR3，使用 INVLPG 指令</strong></li>\n</ul>\n<p><img data-src=\"image005.png\" alt=\"\" /></p>\n<h2 id=\"shadowwalker\"><a class=\"anchor\" href=\"#shadowwalker\">#</a> ShadowWalker</h2>\n<p>一种利用 TLB 机制实现内存隐藏的方式 ——ShadowWalker。这种技术利用了 TLB 会缓存线性地址到物理地址映射的特性，当 CRC 线程检查某段代码时，它使用的线性地址会缓存到 TLB 的数据页表缓存（Data-TLB）中。而当 EIP 运行到这段代码时，又会把代码的线性地址缓存到 TLB 的指令页表缓存（Instruction-TLB）中。这样 CPU 中就缓存了同一个地址的两份记录，CRC 线程从数据页表缓存中读取物理地址，EIP 执行流从指令页表缓存中读取物理地址，这两个物理地址是相同的。</p>\n<p>ShadowWalker 技术的核心就在于修改指令页表缓存中的物理地址，让 CRC 线程读取原来的代码，而程序真正执行的时候则跳转到其他代码。</p>\n<p>这种方式在 3 环是不稳定的，原因是 TLB 经常刷新。</p>\n<p>复现暂时先鸽了。</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vbGVpYnNvLWN5L3AvMTE3MTkyODEuaHRtbA==\">https://www.cnblogs.com/leibso-cy/p/11719281.html</span></p>\n<h1 id=\"reference\"><a class=\"anchor\" href=\"#reference\">#</a> Reference</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxOTg4NDQ4L2FydGljbGUvZGV0YWlscy8xMDI3MzYwNjI=\">https://blog.csdn.net/qq_41988448/article/details/102736062</span><br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0t3YW5zeS9hcnRpY2xlL2RldGFpbHMvMTA4OTY1MTk2\">https://blog.csdn.net/Kwansy/article/details/108965196</span><br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0t3YW5zeS9hcnRpY2xlL2RldGFpbHMvMTA5MDEzMTUy\">https://blog.csdn.net/Kwansy/article/details/109013152</span></p>\n",
            "tags": [
                "TLB",
                "INVLPG指令",
                "全局页",
                "ShadowWalker"
            ]
        }
    ]
}