{
    "version": "https://jsonfeed.org/version/1",
    "title": "Or0kit • All posts by \"消息机制\" tag",
    "description": "临渊羡鱼，不如退而结网",
    "home_page_url": "https://Or0kit.github.io",
    "items": [
        {
            "id": "https://or0kit.github.io/Bin/Win32/Win%E6%B6%88%E6%81%AF%E6%9C%BA%E5%88%B6%E5%92%8C%E6%B6%88%E6%81%AF%E7%B1%BB%E5%9E%8B/",
            "url": "https://or0kit.github.io/Bin/Win32/Win%E6%B6%88%E6%81%AF%E6%9C%BA%E5%88%B6%E5%92%8C%E6%B6%88%E6%81%AF%E7%B1%BB%E5%9E%8B/",
            "title": "Win消息机制和消息类型",
            "date_published": "2021-07-05T14:48:49.000Z",
            "content_html": "<h1 id=\"事件和消息\"><a class=\"anchor\" href=\"#事件和消息\">#</a> 事件和消息</h1>\n<p>Windows 中的事件是一个 &quot;动作&quot;，这个动作可能是用户操作应用程序产生的，也可能是 Windows 自己产生的.<br />\n 而消息，就是用来描述这些 &quot;动作&quot; 的，比如：</p>\n<p>1 这个动作是什么时候产生的？<br />\n2 哪个应用程序产生的？<br />\n3 在什么位置产生的？<br />\n等等。。。</p>\n<h2 id=\"事件驱动消息-消息封装事件\"><a class=\"anchor\" href=\"#事件驱动消息-消息封装事件\">#</a> 事件驱动消息 消息封装事件</h2>\n<p>Windows 为了能够准确的描述这些信息，提供了一个结构体：MSG，该结构体里面记录的事件的详细信息。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">tagMSG</span> <span class=\"token punctuation\">&#123;</span>    </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>            HWND hwnd<span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 窗口句柄</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>            UINT message<span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 消息类型</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            WPARAM wParam<span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 对消息类型进一步描述</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            LPARAM lParam<span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 同上</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            DWORD time<span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 动作发生时间</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            POINT pt<span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 坐标，结构体封装了，内部是 x，y</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span> MSG<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>PMSG<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>说明：</p>\n<blockquote>\n<p>1、hwnd<br />\n 表示消息所属的窗口<br />\n一个消息一般都是与某个窗口相关联的<br />\n在 Windows 中 HWND 类型的变量通常用来标识窗口。</p>\n</blockquote>\n<blockquote>\n<p>2、message<br />\n 在 Windows 中，消息是由一个数值来表示的<br />\n但是由于数值不便于记忆，所以 Windows 将消息对应的数值定义为 WM_XXX 宏（WM == Window Message）<br />\n鼠标左键按下 WM_LBUTTONDOWN        键盘按下 WM_KEYDOWN</p>\n</blockquote>\n<blockquote>\n<p>3、wParam 和 lParam<br />\n32 位消息的特定附加信息，具体表示什么处决于 message</p>\n</blockquote>\n<blockquote>\n<p>4、time<br />\n 消息创建时的时间</p>\n</blockquote>\n<blockquote>\n<p>5、消息创建时的鼠标位置</p>\n</blockquote>\n<p>具体来说：如下图，用户输入后，封装成消息，加入系统的消息队列，然后应用程序那还有队列</p>\n<p>用来存储自己的消息队列，所以系统队列到应用程序队列是分流而治的过程。</p>\n<p><img data-src=\"image004.png\" alt=\"\" /></p>\n<p>从队列中取出消息，使用的是循环机制，就是不停的取出消息，而后面的判断消息类型是不是我们关心的意思其实是</p>\n<p>我们是否写了该消息下的响应函数，或者说回调函数。</p>\n<p>具体流程如下图：</p>\n<p><img data-src=\"image005.png\" alt=\"\" /></p>\n<h1 id=\"消息机制\"><a class=\"anchor\" href=\"#消息机制\">#</a> 消息机制</h1>\n<p>我们了解了窗口其实是绘制出来的，而且是不断绘制的过程，所以窗口的本质是绘制， 但是我们现在看到的窗口程序，都可以点击关闭按钮 使用鼠标点击会有反应.</p>\n<p>而我们要怎么实现呢？</p>\n<p>其实鼠标点击是产生了一个消息。window 把这个消息封装成了消息结构体。 发送给了我们的窗口程序。</p>\n<p>那么 windows 怎么知道你点击的那个窗口呢？</p>\n<p>是这样的 当我们点击的时候 会记录点击坐标。消息。等等 windows 系统会接受到 然后遍历内核中的 WINOBJ 结构 而这个结构中存储着窗口对象 窗口对象对应着消息线程.</p>\n<p>所以 windows 一层一层的遍历。则找到了对应的窗口以及窗口对应的线程。然后发送给我们的应用程序</p>\n<p>上面说的我们需要了解 要知道消息怎么产生的 怎么传递的。那么下面编程就明白了.</p>\n<p>例如下图:</p>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<p>每个应用程序都有一个线程对象 而这个线程对象如果创建窗口。那么内核中就有这个窗口对象.</p>\n<p>如果我们有鼠标点击的消息。键盘消息等等。操作系统都会遍历窗口对象 而窗口对象也会保存着创建这个窗口对象对应的线程对象 而这个线程对象中则有消息队列.</p>\n<p>这样的话操作系统则会封装消息发送给我们窗口对象</p>\n<h1 id=\"消息类型\"><a class=\"anchor\" href=\"#消息类型\">#</a> 消息类型</h1>\n<p>我们回调中有我们的消息类型，我们可以判断消息类型进行我们不同的操作。</p>\n<p>比如菜单消息</p>\n<p><code>WM_COMMAND</code> ， 如果是这个消息。那么回调函数的 <code>wparam</code>  等附加信息就是 <code>WM_COMMAND</code>  的附加消息了 我们可以取低位得出操作的菜单 ID. 进而进行消息处理.</p>\n<p><code>WM_PAINT</code>  这个消息是绘制的消息。我们知道。窗口是不断绘制的。所以绘制消息会一直来.</p>\n<p><code>WM_DESTROY</code>   窗口关闭消息 如果接受到这个消息。则调用 API 往消息队列中 (MSG) 中传递退出消息 此时外层主线程就会结束.</p>\n<p>具体 API:<br />\n <code>postQuitMessage(0);</code></p>\n<p>当前具体的消息还要查询 MSDN, 因为消息种类很多.</p>\n<p>windows 消息都是 WM 开头的</p>\n<p>比如查询 <code>WM_COMMAND</code>  消息</p>\n<p><img data-src=\"image003.png\" alt=\"\" /></p>\n<p>可以清楚的看到它会告诉你如果是 <code>WM_COMMAND</code>  消息来了那么回调函数的参数分别代表的是什么意思。</p>\n<h1 id=\"窗口类结构\"><a class=\"anchor\" href=\"#窗口类结构\">#</a> 窗口类结构</h1>\n<p>创建窗口程序</p>\n<h2 id=\"进行窗口编程需要注意的问题\"><a class=\"anchor\" href=\"#进行窗口编程需要注意的问题\">#</a> 进行窗口编程需要注意的问题</h2>\n<p>在 Windows 中进行窗口编程，入口点已经改成 WinMain 了 有四个参数</p>\n<p>如以下代码所示</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> APIENTRY <span class=\"token function\">wWinMain</span><span class=\"token punctuation\">(</span>_In_ HINSTANCE hInstance<span class=\"token punctuation\">,</span>               <span class=\"token comment\">// 窗口的实例句柄 hinstance 代表模块意思 HWND 代表窗口意思 HANDLE 代表内核对象 HDC 设备上下文</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>                     _In_opt_ HINSTANCE hPrevInstance<span class=\"token punctuation\">,</span>        <span class=\"token comment\">// 父窗口句柄   已淘汰</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                     _In_ LPWSTR    lpCmdLine<span class=\"token punctuation\">,</span>                <span class=\"token comment\">// 命令行参数</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                     _In_ <span class=\"token keyword\">int</span>       nCmdShow<span class=\"token punctuation\">)</span>                 <span class=\"token comment\">// 命令 最大化命令还是最小化命令</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>wWinMain</code>  因为有 <code>UNICODE</code>  跟 <code>ASCII</code>  区别，所以 <code>UNICODE</code>  使用 <code>wWinMain</code> ， <code>ASCII</code>  版就是用 <code>WinMain</code></p>\n<p>这里我上网上查了一下</p>\n<p>其实并不是程序中有中文时就必须用 <code>Unicode</code>  字符集，当 <code>windows</code>  系统语言为中文时，不管你选择哪个字符集都是可以正常显示中文的，但是系统语言不为中文时就会出现乱码了。所以如果你的软件需要适应多语言的 <code>windows</code>  系统的话就得用 <code>Unicode</code>  字符集。</p>\n<p>另外需要说明的是，当字符集为 <code>Unicode</code>  时，向 api 函数传递的一个字符串的时候应该将该字符串转换为 <code>Unicode</code>  编码的，可用 L 转换：<br />\n <code>CreateWindow(wndClass, L&quot;这是窗口标题&quot;, ......);</code></p>\n<h2 id=\"进行windows编程的调试手法\"><a class=\"anchor\" href=\"#进行windows编程的调试手法\">#</a> 进行 Windows 编程的调试手法</h2>\n<p>在 Windows 中我们调试程序不能简单的使用 printf 进行调试。或者打印输出了 我们可以使用两个 API 进行操作.</p>\n<p>1  <code>wsprintf()</code>  格式化字符串</p>\n<p>2  <code>OutPutDebugString()</code>  输出调试字符串</p>\n<p>详细参见百科：<br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS93c3ByaW50Zg==\">https://baike.baidu.com/item/wsprintf</span><br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS9PdXRwdXREZWJ1Z1N0cmluZw==\">https://baike.baidu.com/item/OutputDebugString</span></p>\n<p>因为 <code>OutPutDebugString()</code>  只能打印固定字符串</p>\n<p>所以使用 wsprintf 进行格式化字符串，如下面代码</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> APIENTRY <span class=\"token function\">wWinMain</span><span class=\"token punctuation\">(</span>_In_ HINSTANCE hInstance<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    _In_opt_ HINSTANCE hPrevInstance<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    _In_ LPWSTR    lpCmdLine<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    _In_ <span class=\"token keyword\">int</span>       nCmdShow<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    TCHAR str<span class=\"token punctuation\">[</span><span class=\"token number\">30</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token constant\">NULL</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">wsprintf</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span> L<span class=\"token string\">\"%s\"</span><span class=\"token punctuation\">,</span> L<span class=\"token string\">\"HelloWin32\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">//MessageBox (0, str, 0, MB_OK);// 也可以弹个窗</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">OutputDebugString</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>我们编译出程序之后，可以使用 DebugView 这款工具查看，也可以在编译器的调试窗口看</p>\n<p><img data-src=\"image002.png\" alt=\"\" /></p>\n<h2 id=\"窗口编程的步骤\"><a class=\"anchor\" href=\"#窗口编程的步骤\">#</a> 窗口编程的步骤</h2>\n<p>1 创建窗口类<br />\n windows 提供的窗口样式。我们需要给定.</p>\n<p>2 注册窗口类<br />\n创建了窗口我们需要注册到 windows 系统中.</p>\n<p>3 创建窗口</p>\n<p>如果注册窗口成功。那么我们需要创建出来这个窗口。并且显示跟更新.</p>\n<p>4 消息处理</p>\n<h2 id=\"窗口编程需要的主要结构\"><a class=\"anchor\" href=\"#窗口编程需要的主要结构\">#</a> 窗口编程需要的主要结构</h2>\n<p>窗口的创建 Windows 已经为我们提供了，这个结构就是 <code>WNDCLASSEX</code>  结构</p>\n<p>看下这个结构中的内容吧</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_WNDCLASSEX</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    UINT       cbSize<span class=\"token punctuation\">;</span>                   扩展的大小 既自己WndClass本身大小<span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    UINT       style<span class=\"token punctuation\">;</span>                    风格</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    WNDPROC    lpfnWndProc<span class=\"token punctuation\">;</span>              窗口回调<span class=\"token punctuation\">.</span>消息都要进入这个回调</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span>        cbClsExtra<span class=\"token punctuation\">;</span>              </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">int</span>        cbWndExtra<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    HINSTANCE  hInstance<span class=\"token punctuation\">;</span>                实例句柄</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    HICON      hIcon<span class=\"token punctuation\">;</span>                    图标</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    HCURSOR    hCursor<span class=\"token punctuation\">;</span>                  光标</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    HBRUSH     hbrBackground<span class=\"token punctuation\">;</span>            背景</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    LPCTSTR    lpszMenuName<span class=\"token punctuation\">;</span>             菜单名称</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    LPCTSTR    lpszClassName<span class=\"token punctuation\">;</span>            类名称</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    HICON      hIconSm<span class=\"token punctuation\">;</span>                  最小化图标</pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span> WNDCLASSEX<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>PWNDCLASSEX<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>你的窗口是什么样式、 大小、是否有图标、 消息处理函数在哪里等等，需要我们给指定。<br />\n还有一个 <code>WNDCLASS</code>  结构，这个是兼容老版本的。如今一般用 <code>WNDCLASSEX</code></p>\n<p>详细见<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxMjQzMDY1L2FydGljbGUvZGV0YWlscy84MzUxMzc5NQ==\"> https://blog.csdn.net/qq_31243065/article/details/83513795</span></p>\n<h1 id=\"创建一个窗口程序的详细步骤\"><a class=\"anchor\" href=\"#创建一个窗口程序的详细步骤\">#</a> 创建一个窗口程序的详细步骤</h1>\n<blockquote>\n<p>步骤 1：创建 Windows 应用程序 选择空项目<br />\n步骤 2：在新建项窗口中选 C++ 代码文件 创建一个新的 cpp 文件<br />\n步骤 3：在新的 cpp 文件中添加: <code>#include &lt;Windows.h&gt;</code> <br />\n 并添加入口函数：</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> CALLBACK <span class=\"token function\">WinMain</span><span class=\"token punctuation\">(</span>                 <span class=\"token comment\">// CALLBACK 是一个宏  #define CALLBACK __stdcall   所有的 Win32 API 函数都遵循该约定 此外 #define WINAPI __stdcall  #define APIENTRY    WINAPI        </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>            _In_ HINSTANCE hInstance<span class=\"token punctuation\">,</span>  <span class=\"token comment\">// 应用程序当前实例的句柄</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>            _In_ HINSTANCE hPrevInstance<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            _In_ LPSTR lpCmdLine<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            _In_ <span class=\"token keyword\">int</span> nCmdShow</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>步骤 4：设计窗口类<br />\n既能用 <code>WNDCLASS</code>  也能用 <code>WNDCLASSEX</code> <br />\n 例：</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 窗口的类名    </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>TCHAR className<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"My First Window\"</span><span class=\"token punctuation\">;</span>     </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 创建窗口类的对象     </span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>WNDCLASS wndclass <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// 一定要先将所有值赋值</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>wndclass<span class=\"token punctuation\">.</span>hbrBackground <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>HBRUSH<span class=\"token punctuation\">)</span>COLOR_MENU<span class=\"token punctuation\">;</span>        <span class=\"token comment\">// 窗口的背景色    </span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>wndclass<span class=\"token punctuation\">.</span>lpfnWndProc <span class=\"token operator\">=</span> WindowProc<span class=\"token punctuation\">;</span>        <span class=\"token comment\">// 窗口过程函数 也叫回调函数   </span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>wndclass<span class=\"token punctuation\">.</span>lpszClassName <span class=\"token operator\">=</span> className<span class=\"token punctuation\">;</span>        <span class=\"token comment\">// 窗口类的名字    </span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>wndclass<span class=\"token punctuation\">.</span>hInstance <span class=\"token operator\">=</span> hInstance<span class=\"token punctuation\">;</span>        <span class=\"token comment\">// 标识该窗口所在的实例</span></pre></td></tr></table></figure><blockquote>\n<p>步骤 5：注册窗口类    (这是什么？哈哈哈，就是把结构体赋值后传参调用)</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">RegisterClass</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>wndclass<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>步骤 6：创建窗口</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 创建窗口     </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>HWND hwnd <span class=\"token operator\">=</span> <span class=\"token function\">CreateWindow</span><span class=\"token punctuation\">(</span>     </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>            className<span class=\"token punctuation\">,</span>                    <span class=\"token comment\">// 类名    </span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token function\">TEXT</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我的第一个窗口\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>        <span class=\"token comment\">// 窗口标题    </span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            WS_OVERLAPPEDWINDOW<span class=\"token punctuation\">,</span>          <span class=\"token comment\">// 窗口外观样式     </span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token number\">10</span><span class=\"token punctuation\">,</span>                           <span class=\"token comment\">// 相对于父窗口的 X 坐标    </span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token number\">10</span><span class=\"token punctuation\">,</span>                           <span class=\"token comment\">// 相对于父窗口的 Y 坐标    </span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token number\">600</span><span class=\"token punctuation\">,</span>                          <span class=\"token comment\">// 窗口的宽度     </span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token number\">300</span><span class=\"token punctuation\">,</span>                          <span class=\"token comment\">// 窗口的高度     </span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span>                         <span class=\"token comment\">// 父窗口句柄，为 NULL     </span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span>                         <span class=\"token comment\">// 菜单句柄，为 NULL     </span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            hInstance<span class=\"token punctuation\">,</span>                    <span class=\"token comment\">// 当前应用程序的句柄     </span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token constant\">NULL</span>                          <span class=\"token comment\">// 附加数据一般为 NULL</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>hwnd <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tTCHAR str<span class=\"token punctuation\">[</span><span class=\"token number\">30</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token constant\">NULL</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token function\">wsprintf</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span> L<span class=\"token string\">\"%s\"</span><span class=\"token punctuation\">,</span> L<span class=\"token string\">\"HelloWin32\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token function\">OutputDebugString</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>步骤 7：显示窗口</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 显示窗口</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">ShowWindow</span><span class=\"token punctuation\">(</span>hwnd<span class=\"token punctuation\">,</span> SW_SHOW<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>步骤 8：消息循环<br />\n GetMessage 函数说明：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS9HZXRNZXNzYWdl\">https://baike.baidu.com/item/GetMessage</span></p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>MSG msg<span class=\"token punctuation\">;</span>   </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>BOOL bRet<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>bRet<span class=\"token operator\">=</span><span class=\"token function\">GetMessage</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>msg<span class=\"token punctuation\">,</span>hwnd<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">//TranslateMessage (&amp;msg);      // 键盘消息转换为小写.</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">DispatchMessage</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// 分发消息。将我们的消息传递给我们的回调函数处理 重要函数。此消息会将 Windows 的消息。发送给我们 定义窗口类的时候给的回调函数。这样我们就可以根据消息执行我们代码了.    </span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>步骤 9：回调函数<br />\n例：</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*                        </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>窗口消息处理程序 窗口回调函数：            </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>1、窗口回调函数处理过的消息，必须传回 0.        </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>2、窗口回调不处理的消息，由 DefWindowProc 来处理.    </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">//  函数: WndProc (HWND, UINT, WPARAM, LPARAM)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">//  目的：处理主窗口的消息。</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">//  WM_COMMAND  - 处理应用程序菜单</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">//  WM_PAINT    - 绘制主窗口</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">//  WM_DESTROY  - 发送退出消息并返回</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>LRESULT CALLBACK <span class=\"token function\">WindowProc</span><span class=\"token punctuation\">(</span>         </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            IN HWND hwnd<span class=\"token punctuation\">,</span>     </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            IN UINT uMsg<span class=\"token punctuation\">,</span>     </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            IN WPARAM wParam<span class=\"token punctuation\">,</span>     </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            IN LPARAM lParam     </pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>uMsg<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t\t<span class=\"token comment\">// 窗口消息</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t<span class=\"token keyword\">case</span> WM_COMMAND<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>                           <span class=\"token comment\">// 菜单消息类型</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t\t<span class=\"token keyword\">int</span> wmId <span class=\"token operator\">=</span> <span class=\"token function\">LOWORD</span><span class=\"token punctuation\">(</span>wParam<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>           <span class=\"token comment\">// 取低两位为菜单 ID. 根据菜单 ID 可以进行操作我们的窗口</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t\t<span class=\"token comment\">// 分析菜单选择:</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t\t<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>wmId<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">case</span> IDM_EXIT<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t\t\t\t<span class=\"token function\">DestroyWindow</span><span class=\"token punctuation\">(</span>hWnd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">default</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">DefWindowProc</span><span class=\"token punctuation\">(</span>hWnd<span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">,</span> wParam<span class=\"token punctuation\">,</span> lParam<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 如果不处理。则必须调用这个函数教给默认的窗口回调处理</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\t<span class=\"token keyword\">case</span> WM_CREATE<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\t\t<span class=\"token function\">DbgPrintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"WM_CREATE %d %d\\n\"</span><span class=\"token punctuation\">,</span>wParam<span class=\"token punctuation\">,</span>lParam<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\t\tCREATESTRUCT<span class=\"token operator\">*</span> createst <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>CREATESTRUCT<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>lParam<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t\t\t<span class=\"token function\">DbgPrintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"CREATESTRUCT %s\\n\"</span><span class=\"token punctuation\">,</span>createst<span class=\"token operator\">-></span>lpszClass<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t\t<span class=\"token keyword\">case</span> WM_MOVE<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t\t\t<span class=\"token function\">DbgPrintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"WM_MOVE %d %d\\n\"</span><span class=\"token punctuation\">,</span>wParam<span class=\"token punctuation\">,</span>lParam<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t\t\tPOINTS points <span class=\"token operator\">=</span> <span class=\"token function\">MAKEPOINTS</span><span class=\"token punctuation\">(</span>lParam<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t\t\t<span class=\"token function\">DbgPrintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"X Y %d %d\\n\"</span><span class=\"token punctuation\">,</span>points<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span>points<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\t\t<span class=\"token keyword\">case</span> WM_SIZE<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\t\t\t<span class=\"token function\">DbgPrintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"WM_SIZE %d %d\\n\"</span><span class=\"token punctuation\">,</span>wParam<span class=\"token punctuation\">,</span>lParam<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>\t\t\t<span class=\"token keyword\">int</span> newWidth <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">short</span><span class=\"token punctuation\">)</span> <span class=\"token function\">LOWORD</span><span class=\"token punctuation\">(</span>lParam<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\t\t\t<span class=\"token keyword\">int</span> newHeight <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">short</span><span class=\"token punctuation\">)</span> <span class=\"token function\">HIWORD</span><span class=\"token punctuation\">(</span>lParam<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>\t\t\t<span class=\"token function\">DbgPrintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"WM_SIZE %d %d\\n\"</span><span class=\"token punctuation\">,</span>newWidth<span class=\"token punctuation\">,</span>newHeight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"83\"></td><td><pre>\t\t<span class=\"token keyword\">case</span> WM_DESTROY<span class=\"token operator\">:</span>    <span class=\"token comment\">// 销毁</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>\t\t\t<span class=\"token function\">DbgPrintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"WM_DESTROY %d %d\\n\"</span><span class=\"token punctuation\">,</span>wParam<span class=\"token punctuation\">,</span>lParam<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>\t\t\t<span class=\"token function\">PostQuitMessage</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>        <span class=\"token comment\">// 键盘消息</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>\t\t<span class=\"token keyword\">case</span> WM_KEYUP<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>\t\t\t<span class=\"token function\">DbgPrintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"WM_KEYUP %d %d\\n\"</span><span class=\"token punctuation\">,</span>wParam<span class=\"token punctuation\">,</span>lParam<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"106\"></td><td><pre>\t\t<span class=\"token keyword\">case</span> WM_KEYDOWN<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>\t\t\t<span class=\"token function\">DbgPrintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"WM_KEYDOWN %d %d\\n\"</span><span class=\"token punctuation\">,</span>wParam<span class=\"token punctuation\">,</span>lParam<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>        <span class=\"token comment\">// 鼠标消息</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"118\"></td><td><pre>\t\t<span class=\"token keyword\">case</span> WM_LBUTTONDOWN<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>\t\t\t<span class=\"token function\">DbgPrintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"WM_LBUTTONDOWN %d %d\\n\"</span><span class=\"token punctuation\">,</span>wParam<span class=\"token punctuation\">,</span>lParam<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>\t\t\tPOINTS points <span class=\"token operator\">=</span> <span class=\"token function\">MAKEPOINTS</span><span class=\"token punctuation\">(</span>lParam<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>\t\t\t<span class=\"token function\">DbgPrintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"WM_LBUTTONDOWN %d %d\\n\"</span><span class=\"token punctuation\">,</span>points<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span>points<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre></pre></td></tr><tr><td data-num=\"132\"></td><td><pre><span class=\"token comment\">//default:</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre><span class=\"token comment\">//       return DefWindowProc (hWnd, message, wParam, lParam);// 扔给 windows 处理其他消息</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token function\">DefWindowProc</span><span class=\"token punctuation\">(</span>hwnd<span class=\"token punctuation\">,</span>uMsg<span class=\"token punctuation\">,</span>wParam<span class=\"token punctuation\">,</span>lParam<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 扔给 windows 处理其他消息</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre></pre></td></tr><tr><td data-num=\"138\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>MFC 就是基于此封装</p>\n<h1 id=\"reference\"><a class=\"anchor\" href=\"#reference\">#</a> Reference</h1>\n<p>滴水逆向课件<br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vaUJpbmFyeS9wLzk1ODAyNjguaHRtbA==\"> https://www.cnblogs.com/iBinary/p/9580268.html</span><br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2RmZzA4MjMvYXJ0aWNsZS9kZXRhaWxzLzEwMTk2NDQyMw==\">https://blog.csdn.net/dfg0823/article/details/101964423</span><br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1p6MjIzMzMvYXJ0aWNsZS9kZXRhaWxzLzg5MDg0NTYy\">https://blog.csdn.net/Zz22333/article/details/89084562</span></p>\n",
            "tags": [
                "窗口程序",
                "消息机制",
                "消息类型"
            ]
        }
    ]
}