{
    "version": "https://jsonfeed.org/version/1",
    "title": "Or0kit • All posts by \"自旋锁\" tag",
    "description": "临渊羡鱼，不如退而结网",
    "home_page_url": "https://Or0kit.github.io",
    "items": [
        {
            "id": "https://or0kit.github.io/Bin/Core/WindowsXp/MultiCoreSynchronization/%E5%A4%9A%E6%A0%B8%E5%90%8C%E6%AD%A5-01%E4%B8%B4%E7%95%8C%E5%8C%BA%E4%B8%8E%E8%87%AA%E6%97%8B%E9%94%81/",
            "url": "https://or0kit.github.io/Bin/Core/WindowsXp/MultiCoreSynchronization/%E5%A4%9A%E6%A0%B8%E5%90%8C%E6%AD%A5-01%E4%B8%B4%E7%95%8C%E5%8C%BA%E4%B8%8E%E8%87%AA%E6%97%8B%E9%94%81/",
            "title": "多核同步-01临界区与自旋锁",
            "date_published": "2022-03-13T12:35:28.000Z",
            "content_html": "<h1 id=\"楔子\"><a class=\"anchor\" href=\"#楔子\">#</a> 楔子</h1>\n<p>并发执行的定义是，多个程序在一段重叠的时间段中开始、运行与结束，但这些程序并没有在任何一个时刻同时在执行。<br />\n并行执行，则意味着在同一个时刻，存在两个以上任务在同时运行。</p>\n<p>单核（是分时执行，不是真正的同时）</p>\n<p>多核（在某一个时刻，会同时有多个线程再执行）</p>\n<p>同步则是保证在并发执行的环境中各个线程可以有序的执行为了实现</p>\n<p><strong>只要提到并发就是多个线程操纵同一个资源的问题。</strong><br />\n有些指令是可以在多核下执行的，并不会影响什么，如读的操作，但是写就不行了，必须得保证有序。</p>\n<p>疑问：单核同步与多核同步一样吗？</p>\n<h1 id=\"临界区\"><a class=\"anchor\" href=\"#临界区\">#</a> 临界区</h1>\n<p>为什么要引入临界区呢？看一下以下代码</p>\n<h2 id=\"演示代码\"><a class=\"anchor\" href=\"#演示代码\">#</a> 演示代码</h2>\n<p><code>DWORD  dwVal = 0;</code> \t// 全局变量</p>\n<p>线程中的代码：</p>\n<p><code>dwVal ++;</code> \t// 只有一行  安全吗？</p>\n<p>对应的汇编代码：</p>\n<pre><code>mov\teax,[0x12345678]\nadd\teax,1\nmov\t[0x12345678],eax\n</code></pre>\n<p>上面的汇编代码是不安全的，不论是单核还是多核，在多线程下，不同的线程抢占时间片，以上代码就会出现执行顺序的错乱。</p>\n<h2 id=\"原子操作\"><a class=\"anchor\" href=\"#原子操作\">#</a> 原子操作</h2>\n<p><strong>所谓原子操作是指不会被线程调度机制打断的操作；</strong><br />\n<strong>这种操作一旦开始，就一直运行到结束，中间不会有任何 context switch （切换到另一个线程）。</strong></p>\n<p>LOCK 指令可以将将指令转换为原子指令。</p>\n<p><code>INC DWORD PTR DS:[0x12345678]</code> \t一行汇编代码，安全吗？</p>\n<p>这样一行指令在单核下是安全的，在多核下并不安全。</p>\n<p>改成</p>\n<p><code>LOCK INC DWORD PTR DS:[0x12345678]</code></p>\n<p>这样，这行指令就变成的原子指令，当一个核正在读取这个指令时其他核就不能读取这条指令了。</p>\n<p>查看 kernel32 中的  <code>InterlockedIncrement</code></p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>LONG __stdcall InterlockedIncrement (volatile LONG *lpAddend)</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>public _InterlockedIncrement@4</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>_InterlockedIncrement@4 proc near       ; </pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>lpAddend        &#x3D; dword ptr  4</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>mov     ecx, [esp+lpAddend] ; 获取加数变量的指针</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>mov     eax, 1          ; 设置增量值</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>lock xadd [ecx], eax    ; interlocked increment    联锁增量</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>inc     eax             ; 调整返回值</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>retn    4</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>_InterlockedIncrement@4 endp</pre></td></tr></table></figure><p><strong>xadd 指令将第一个操作数 (目标操作数) 与第二个操作数 (源操作数) 交换，然后将两个值的和加载到目标操作数中，该指令可以与 LOCK 前缀一起使用，允许该指令以原子方式执行。</strong></p>\n<p>原子操作相关的 API：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>InterlockedIncrement</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>InterlockedExchangeAdd</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>InterlockedDecrement</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>InterlockedFlushSList</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>InterlockedExchange</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>InterlockedPopEntrySList</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>InterlockedCompareExchange</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>InterlockedPushEntrySList</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr></table></figure><p><strong>什么时候加锁：我们只有一行代码是担心多核同时访问的，其他的代码多核访问并不影响！</strong></p>\n<h2 id=\"自己实现临界区\"><a class=\"anchor\" href=\"#自己实现临界区\">#</a> 自己实现临界区</h2>\n<p>如果执行多行原子指令安全吗？如下的场景：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>关键代码A\t<span class=\"token comment\">//N 行代码要求原子操作</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>关键代码B\t<span class=\"token comment\">// 单独加 LOCK 可以吗？</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>关键代码C</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr></table></figure><p>其实也不安全，当执行完第一行指令后，线程是可以被切换的，还是无法保证其执行的顺序。</p>\n<p>如何保证执行完这些代码后才让其他核继续执行呢？</p>\n<p>这就要设计一个临界区了。</p>\n<p><strong>临界区：一次只允许一个线程进入直到离开。</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>DWORD dwFlag <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 实现临界区的方式就是加锁</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>                  <span class=\"token comment\">// 锁：全局变量  进去加一 出去减一</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>dwFlag  <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\t\t<span class=\"token comment\">// 进入临界区\t</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span>\t</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tdwFlag   <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\t</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tdwFlag   <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\t<span class=\"token comment\">// 离开临界区</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这样设计也不是安全的，因为是先判断再修改的 dwFlag ，进入临界区后在还没有修改 dwflag 为 1 时线程被切走了，就不行了，另一个线程也可以进入临界区了等等，会造成一些列问题。</p>\n<p>之前利用互斥体、事件、信号量等等在多核的情况下也是安全的因为把线程都挂起了，只是效率不高罢了。</p>\n<p>临界区是只要保证一次就只有一个线程进入就行，怎么实现的都行！</p>\n<p>在单核的情况下实现临界区：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>全局变量：Flag &#x3D; 0</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>进入临界区：\t\t</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Lab：</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tmov eax,1</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\txadd [Flag],eax</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tcmp eax,0</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tjz endLab</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tdec [Flag]</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t&#x2F;&#x2F; 线程等待 Sleep..</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>endLab:</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tret</pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>离开临界区：</pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>dec [Flag]</pre></td></tr></table></figure><p>以上代码在单核下是安全的，想要在多核下也是安全的，就要加 lock 指令了：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>全局变量：Flag &#x3D; 0</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>进入临界区：\t\t</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Lab：</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tmov eax,1</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tlock xadd [Flag],eax</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tcmp eax,0</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tjz endLab</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tdec [Flag]</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t&#x2F;&#x2F; 线程等待 Sleep..</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>endLab:</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tret</pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>离开临界区：</pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>lock dec [Flag]</pre></td></tr></table></figure><h2 id=\"代码实现临界区\"><a class=\"anchor\" href=\"#代码实现临界区\">#</a> 代码实现临界区</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;Windows.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 实现临界区</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">bool</span> g_lock <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">__declspec</span><span class=\"token punctuation\">(</span>naked<span class=\"token punctuation\">)</span> __fastcall <span class=\"token function\">Enter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">bool</span><span class=\"token operator\">*</span> Lock<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t__asm <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t__Start<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\tmov eax<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\tlock xadd dword ptr <span class=\"token punctuation\">[</span>ecx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> eax<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\tcmp eax<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\tjnz __Waiting<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\tretn<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t__Waiting<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\tlock dec <span class=\"token punctuation\">[</span>ecx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\tpush ecx<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\tpush <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\tpush <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\tcall SleepEx<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\tpop ecx<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\tjmp __Start<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">__declspec</span><span class=\"token punctuation\">(</span>naked<span class=\"token punctuation\">)</span> __fastcall <span class=\"token function\">Leave</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">bool</span><span class=\"token operator\">*</span> Lock<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t__asm <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\tlock dec <span class=\"token punctuation\">[</span>ecx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\tretn<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Func1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>size_t i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">1000000</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\t<span class=\"token function\">Enter</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>g_lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\tx<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\t<span class=\"token function\">Leave</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>g_lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span>\t</pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Func2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>size_t i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">1000000</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t\t<span class=\"token function\">Enter</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>g_lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t\tx<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t\t<span class=\"token function\">Leave</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>g_lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre> </pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t<span class=\"token function\">CreateThread</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>LPTHREAD_START_ROUTINE<span class=\"token punctuation\">)</span>Func1<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t<span class=\"token function\">CreateThread</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>LPTHREAD_START_ROUTINE<span class=\"token punctuation\">)</span>Func2<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t<span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>不加临界区：</p>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<p>加临界区：</p>\n<p><img data-src=\"image002.png\" alt=\"\" /></p>\n<p>这个临界区的设计还是有问题的，就是如果我们执行完 SleepEx 后，进入临界区的线程还没有出来就有问题了。</p>\n<h2 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h2>\n<p>xadd 这种指令解决了我们哪些问题？</p>\n<p>为什么要这样设计？</p>\n<p>如果我们用</p>\n<p>LOCK INC DWORD PTR DS:[Flag]<br />\ncmp [Flag],0</p>\n<p>这样是不行了，如果在执行完 inc 后被线程被切换，另一个线程又执行了一遍，，我们是无法保证只有一个线程访问临界区的。</p>\n<p>但如果我们用上面的代码：</p>\n<p>一个线程进来了执行了  <code>xadd</code>  后  <code>eax=0</code>   <code>flag=1</code>  ，假设这个时候被切走了，又一个线程执行这段代码，再次执行  <code>xadd</code>  这时  <code>eax=1</code>  ，也就无法执行后面的代码了，只能在临界区中等待，保证了只有一个线程进入临界区。</p>\n<p>这个等待时间我们自己设置，那么等待多久好呢？等待结束后，还是进不去临界区怎么办呢？或者在等待期间，临界区已经可以进入了，但我们仍处于等待阶段怎么办呢？</p>\n<p>这些问题学完后面的知识就可以解决了。</p>\n<h1 id=\"自旋锁\"><a class=\"anchor\" href=\"#自旋锁\">#</a> 自旋锁</h1>\n<p>上面我们确保临界区的方法是把其他的线程休眠，也就是线程切换，我们了解过线程切换的本质，线程切换是不是太浪费效率了呢？有没有一种轻量级的实现方法呢？</p>\n<p>Windows 设计了自旋锁，查看其 API：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>__fastcall KiAcquireSpinLock (x)</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        public @KiAcquireSpinLock@4</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        lock bts dword ptr [ecx], 0 ; ecx &#x3D; 参数</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                                    ; bts 指令：</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                                    ; 取 [ecx] 二进制比特位的第 0 位，存在 cf 标志位中</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                                    ; 将 [ecx] 二进制比特位的第 0 位设置为 1</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        jb      short loc_469B98 ; cf&#x3D;1 时跳转</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        retn</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>loc_469B98:  </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        test    dword ptr [ecx], 1 ; 判断参数是否又为 0 了，既判断进入了临界区的线程是否离开了临界区。</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        jz      short @KiAcquireSpinLock@4 </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        pause</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        jmp     short loc_469B98</pre></td></tr></table></figure><p>模拟一下其流程：</p>\n<p><strong>注意是 fastcall 传参。</strong><br />\n<strong>线程第一次执行这个函数时，假设参数是 0，那么执行完  <code>bts</code>  指令后，  <code>CF = 0</code>   参数  <code>x=1</code>  不会跳转，然后线程进入临界。</strong><br />\n<strong>如果在这个线程进入临界区后，其他核的线程又开始执行这个函数，那么此时这个参数就是 1（因为是全局变量），这个时候再执行  <code>bts</code>  指令后  <code>CF=1</code>   <code>x=1</code>  这时会跳转，然后判断参数是否又为 0 了，既判断进入了临界区的线程是否离开了临界区，如果离开了临界区则重新调用该函数，如果没有则执行  <code>pause</code>  指令，该指令会让 cpu 空转一会儿，具体是多少我没找到相关资料，在滴水的视频中，有人说是 20 纳秒，然后就循环判断了，直到可以进入临界区。</strong></p>\n<h2 id=\"自旋锁的优点和缺点\"><a class=\"anchor\" href=\"#自旋锁的优点和缺点\">#</a> 自旋锁的优点和缺点</h2>\n<p>在多核的环境中效率很高，但在单核的环境中不行。</p>\n<h2 id=\"作业\"><a class=\"anchor\" href=\"#作业\">#</a> 作业</h2>\n<p><strong>在内核环境下如何对一个高并发的函数进行 HOOK 而不会出错？</strong></p>\n<p>这个问题的关键是，hook 后一般是 e8 /e9 后跟 4 字节，总共 5 字节，但没办法一次性改 5 个字节，可能改了第一个字节，正要改后 4 个字节时，别的线程进来了，就会出错。</p>\n<p>之前学习的 INLINE HOOK 修改字节的方法是使用  <code>memcpy</code>  这样在内核中 HOOK 一个高并发的函数有很大的几率出错，可能会直接蓝屏。</p>\n<p>在网上看到三种办法：</p>\n<p>短跳中转 利用  <code>EB</code>  指令修改前 2 字节跳到某个长跳的方式。<br />\n中断门 中断门也是只用改两个字节，需要先构造中断门。<br />\n找一条一次性修改 8 字节的指令，这个指令就是  <code>cmpxchg8b</code>  .</p>\n<p>代码实现 INLINE Hook 线程交换的函数  <code>SwapContext</code>  ：</p>\n<p>在  <code>Windbg</code>  中  <code>u SwapContext</code>  得到  <code>SwapContext</code>  函数的地址是   <code>80546bc0</code></p>\n<p>本次 Hook 要用  <code>cmpxchg8b</code>  指令一次性修改 8 个字节，而  <code>SwapContext</code>  函数的前 8 个字节为：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>0: kd&gt; u SwapContext</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>nt!SwapContext:</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>80546bc0 0ac9            or      cl,cl</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>80546bc2 26c6462d02      mov     byte ptr es:[esi+2Dh],2</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>80546bc7 9c              pushfd</pre></td></tr></table></figure><p>既：  <code>0a c9 26 c6 46 2d 02 9c</code></p>\n<p>而我们要使其改为  <code>jmp xxxxxxxx</code>  --&gt;   <code>E9 xxxxxxxx</code></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>* 在多核的环境下 Hook xp sp3 的 SwapContext  函数</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>**/</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;ntddk.h></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>ULONG SwapContextAddress <span class=\"token operator\">=</span> <span class=\"token number\">0x80546bc0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>ULONG NextAddress <span class=\"token operator\">=</span> <span class=\"token number\">0x80546bc8</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>ULONG OldCode<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// 关闭内存页写入保护</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">_declspec</span><span class=\"token punctuation\">(</span>naked<span class=\"token punctuation\">)</span> <span class=\"token function\">disablePageWriteProtect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    _asm</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        push eax<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        mov eax<span class=\"token punctuation\">,</span> cr0<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token operator\">and</span> eax<span class=\"token punctuation\">,</span> <span class=\"token operator\">~</span><span class=\"token number\">0x10000</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        mov cr0<span class=\"token punctuation\">,</span> eax<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        pop eax<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        ret<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\">// 开启内存页写入保护</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">_declspec</span><span class=\"token punctuation\">(</span>naked<span class=\"token punctuation\">)</span> <span class=\"token function\">enablePageWriteProtect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    _asm</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        push eax<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        mov eax<span class=\"token punctuation\">,</span> cr0<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token operator\">or</span> eax<span class=\"token punctuation\">,</span> <span class=\"token number\">0x10000</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        mov cr0<span class=\"token punctuation\">,</span> eax<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        pop eax<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        ret<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token comment\">// 打印新线程和老线程的 ETHREAD </span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token comment\">// </span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>VOID <span class=\"token function\">__declspec</span><span class=\"token punctuation\">(</span>naked<span class=\"token punctuation\">)</span> <span class=\"token function\">MySwapContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t__asm sub esp<span class=\"token punctuation\">,</span> <span class=\"token number\">0x50</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 提升堆栈，提高容错性。</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\tULONG NewThread<span class=\"token punctuation\">,</span> OldThread<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t__asm <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t\tmov NewThread<span class=\"token punctuation\">,</span> esi<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t\tmov OldThread<span class=\"token punctuation\">,</span> edi<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>NewThread <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span> <span class=\"token operator\">||</span> OldThread <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"New Thread ETHREAD Address:%X,Old Thread ETHREAD Address:%X\\t\\n\"</span><span class=\"token punctuation\">,</span> NewThread<span class=\"token punctuation\">,</span> OldThread<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t__asm add esp<span class=\"token punctuation\">,</span> <span class=\"token number\">0x50</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t<span class=\"token comment\">// 执行被覆盖的 SwapContext 的代码</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t__asm <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t\t<span class=\"token operator\">or</span> cl<span class=\"token punctuation\">,</span> cl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t\tmov  byte ptr es <span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>esi <span class=\"token operator\">+</span> <span class=\"token number\">0x2D</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t\tpushfd<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t\tjmp NextAddress<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre></pre></td></tr><tr><td data-num=\"68\"></td><td><pre></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>VOID <span class=\"token function\">DriverUnload</span><span class=\"token punctuation\">(</span>PDRIVER_OBJECT pDriver<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    <span class=\"token comment\">// 0a c9 26 c6 46 2d 02 9c</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>    OldCode<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0xC626C90A</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    OldCode<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x9C022D46</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    <span class=\"token function\">disablePageWriteProtect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>    _asm <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>        pushad<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>        pushfd<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>        mov esi<span class=\"token punctuation\">,</span> <span class=\"token number\">0x805428E0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>        mov edx<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>esi<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>        mov eax<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>esi <span class=\"token operator\">+</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>        mov ebx<span class=\"token punctuation\">,</span> OldCode<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>        mov ecx<span class=\"token punctuation\">,</span> OldCode<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 这个必须得填 4</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>        lock CMPXCHG8B<span class=\"token punctuation\">[</span>esi<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>        popfd<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>        popad<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>    <span class=\"token function\">enablePageWriteProtect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是驱动，我卸载了\\t\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>NTSTATUS <span class=\"token function\">DriverEntry</span><span class=\"token punctuation\">(</span>PDRIVER_OBJECT pDriver<span class=\"token punctuation\">,</span> PUNICODE_STRING pRegPath<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>\tpDriver<span class=\"token operator\">-></span>DriverUnload <span class=\"token operator\">=</span> DriverUnload<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是驱动,我运行了\\t\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>\t<span class=\"token comment\">// 在 Windbg 中 u SwapContext 得到 SwapContext 函数的地址是  80546bc0</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>\t<span class=\"token comment\">//jmpCode  =  目标地址 - 当前地址 - 当前指令长度</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"99\"></td><td><pre>    <span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"HookSwapContext:%p\\n\"</span><span class=\"token punctuation\">,</span> MySwapContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>    ULONG JmpCode <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>ULONG<span class=\"token punctuation\">)</span>MySwapContext <span class=\"token operator\">-</span> SwapContextAddress <span class=\"token operator\">-</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"103\"></td><td><pre>    <span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"JmpCode:%X\\n\"</span><span class=\"token punctuation\">,</span> JmpCode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>    ULONG Code<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">0xE9</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre></pre></td></tr><tr><td data-num=\"106\"></td><td><pre> </pre></td></tr><tr><td data-num=\"107\"></td><td><pre>    PUCHAR pCode <span class=\"token operator\">=</span> Code<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>    <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>pCode<span class=\"token operator\">+</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x90</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>    <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>ULONG<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>pCode<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> JmpCode<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>    <span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Code[0]:%X\\n\"</span><span class=\"token punctuation\">,</span> Code<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>    <span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Code[1]:%X\\n\"</span><span class=\"token punctuation\">,</span> Code<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>    <span class=\"token function\">disablePageWriteProtect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>    __asm <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>        pushad<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>        pushfd<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>        mov esi<span class=\"token punctuation\">,</span> SwapContextAddress<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>        mov eax<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>esi<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>        mov edx<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>esi <span class=\"token operator\">+</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>        mov ebx<span class=\"token punctuation\">,</span> Code<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>        mov ecx<span class=\"token punctuation\">,</span> Code<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 这个必须得填 4</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>        <span class=\"token keyword\">int</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>        lock CMPXCHG8B<span class=\"token punctuation\">[</span>esi<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"126\"></td><td><pre>        CMPXCHG8B 的用法</pre></td></tr><tr><td data-num=\"127\"></td><td><pre>        该指令判断指定内存中的 8 字节内容和 EDX:EAX （edx 高 32 位，eax, 低 32 位）中的 64 字节内容是否相同，</pre></td></tr><tr><td data-num=\"128\"></td><td><pre>        如果相同，就把 ECX : EBX（ecx 高 32 位，ebx, 低 32 位）中的内容替换到指定内存。</pre></td></tr><tr><td data-num=\"129\"></td><td><pre>        如果不相同，就把指定内存中的值替换到 ECX : EBX 中。</pre></td></tr><tr><td data-num=\"130\"></td><td><pre>        */</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>        popfd<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>        popad<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>    <span class=\"token function\">enablePageWriteProtect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>    <span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"高并发HOOK成功!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>\t<span class=\"token keyword\">return</span> STATUS_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在 Windbg 中查看：</p>\n<p><img data-src=\"image003.png\" alt=\"\" /></p>\n<p>如果打印的话虚拟机就会卡住，winbdg 中会一直显示打印系信息。</p>\n<p>一步步调试查看是否修改成功。</p>\n<p><img data-src=\"image004.png\" alt=\"\" /></p>\n<p><img data-src=\"image005.png\" alt=\"\" /></p>\n<p>没问题！</p>\n<h1 id=\"reference\"><a class=\"anchor\" href=\"#reference\">#</a> Reference</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNDkwODczL2FydGljbGUvZGV0YWlscy8xMDU4ODIyNjg=\">https://blog.csdn.net/qq_41490873/article/details/105882268</span><br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NoYXJlbmZpc2gvYXJ0aWNsZS9kZXRhaWxzLzEyMTYyNTEwNg==\">https://blog.csdn.net/sharenfish/article/details/121625106</span><br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0t3YW5zeS9hcnRpY2xlL2RldGFpbHMvMTA5OTk1MTk2\">https://blog.csdn.net/Kwansy/article/details/109995196</span></p>\n",
            "tags": [
                "自旋锁",
                "临界区"
            ]
        },
        {
            "id": "https://or0kit.github.io/Bin/Core/Drive-Development/%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91-%E5%86%85%E6%A0%B8%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80plus/",
            "url": "https://or0kit.github.io/Bin/Core/Drive-Development/%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91-%E5%86%85%E6%A0%B8%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80plus/",
            "title": "驱动开发-内核编程基础plus",
            "date_published": "2021-12-06T14:08:01.000Z",
            "content_html": "<h1 id=\"楔子\"><a class=\"anchor\" href=\"#楔子\">#</a> 楔子</h1>\n<p>学习一下常用的驱动编程机制。</p>\n<h1 id=\"上下文环境\"><a class=\"anchor\" href=\"#上下文环境\">#</a> 上下文环境</h1>\n<p>应用层 EXE 有独立进程的概念。当这个 EXE 运行的时候，开发者可以很清楚地知道程序的定运行在哪一个线程中。对于内核驱动开发来说，进程的概念啊显得相当模糊，初学者往往不清楚自己的驱动代码具体运行在什么进程或线程中。</p>\n<p>这就是需要了解的上下文 (Context) 概念，上下文泛指 CPU 在执行代码时，该代码所处的环境与状态。通俗来讲，这些环境包括（不仅限）：当前代码所属线程、中断请求级别、CPU 寄存器各状态。</p>\n<p>这里可以做一个小实验，写代码验证一下。<br />\n写一个简单的驱动代码，测试驱动入口函数和驱动卸载函数在执行时是属于哪一个进程的，只要在这两个函数中调用  <code>PsGetCurrentProcessId</code>  函数获取当前进程 ID 就行。</p>\n<p>这里我就直接说结果了。</p>\n<p>无论是驱动入口函数还是驱动卸载函数，都隶属于进程 ID 为 4 的进程，也就是 SYSTEM 进程。</p>\n<p>SYSTEM 进程其实是操作系统虚拟出来的一个进程，代表系统内核。一般来说内核代码都处于 SYSTEM 进程空间中，但驱动对象（DRIVER_OBJECT）的派遣例程一般工作在发起请求的进程中。</p>\n<p><strong>地址空间</strong>，对 32 位系统来说，应用层程序有独立的 2GB 低地址虚拟内存空间，而高地址的 2GB 是内核共享的地址空间。<br />\n在 64 位 Windows 中，虚拟地址空间的理论大小为 2 的 64 次方字节，但实际使用的仅一小部分，范围从  <code>0x000`00000000</code>  至  <code>0x7FF`FFFFFFFF</code>  的 8TB 用于应用层空间，范围从  <code>0xFFFF0800`00000000</code>  至  <code>0xFFFFFFFF`FFFFFFFF</code>  的 248TB 用于内核空间。</p>\n<h1 id=\"中断请求级别\"><a class=\"anchor\" href=\"#中断请求级别\">#</a> 中断请求级别</h1>\n<h1 id=\"链表\"><a class=\"anchor\" href=\"#链表\">#</a> 链表</h1>\n<p>链表作为内核</p>\n<h1 id=\"自旋锁\"><a class=\"anchor\" href=\"#自旋锁\">#</a> 自旋锁</h1>\n<h1 id=\"注册表\"><a class=\"anchor\" href=\"#注册表\">#</a> 注册表</h1>\n<p>注册表是 Windows 系统中最重要的数据配置存储结构，存储着系统绝大部分的核心配置信息。注册表实际上也是一种文件。这些文件大多数存储在<strong>系统盘</strong> system32\\config 目录下。</p>\n<p>在资源管理器中我没有权限访问，懒得更改了，我在 cmd 中查看如下：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>C:\\Windows\\System32\\config&gt;dir</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>C:\\Windows\\System32\\config 的目录</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>2022&#x2F;05&#x2F;09  13:09    &lt;DIR&gt;          .</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>2022&#x2F;05&#x2F;09  13:09    &lt;DIR&gt;          ..</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>2022&#x2F;05&#x2F;06  00:57           524,288 BBI</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>2022&#x2F;01&#x2F;26  16:46            28,672 BCD-Template</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>2022&#x2F;05&#x2F;09  18:04        38,797,312 COMPONENTS</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>2022&#x2F;05&#x2F;06  00:57           786,432 DEFAULT</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>2022&#x2F;05&#x2F;09  17:31         8,118,272 DRIVERS</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>2022&#x2F;01&#x2F;26  18:14            32,768 ELAM</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>2022&#x2F;01&#x2F;26  16:37    &lt;DIR&gt;          Journal</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>2022&#x2F;01&#x2F;26  16:37    &lt;DIR&gt;          RegBack</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>2022&#x2F;05&#x2F;06  00:57           131,072 SAM</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>2022&#x2F;05&#x2F;06  00:57            65,536 SECURITY</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>2022&#x2F;05&#x2F;06  00:57       118,489,088 SOFTWARE</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>2022&#x2F;05&#x2F;06  00:57        24,903,680 SYSTEM</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>2022&#x2F;01&#x2F;26  16:37    &lt;DIR&gt;          systemprofile</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>2022&#x2F;01&#x2F;26  16:37    &lt;DIR&gt;          TxR</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>2022&#x2F;01&#x2F;26  16:40             8,192 userdiff</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>              11 个文件    191,885,312 字节</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>               6 个目录 50,612,371,456 可用字节</pre></td></tr></table></figure><p>可以看到  <code>SOFTWARE</code>  、  <code>SYSTEM</code>  、  <code>SAM</code>  、等文件，这些文件被以<strong>内存映射</strong>的方式映射到内核空间，然后以一种被称为 “HIVE&quot; 的方式组织起来、注册表 API 实际上操作的是这份 HIVE 内存数据，对 HIVE 数据的改动，最终会被回写到 config 目录下对应的文件中。</p>\n<p>如果只是想单纯的使用注册表做数据读取或存储，可以没有必要深入去研究内核对注册表的实现方式。</p>\n<h2 id=\"注册表的打开与关闭\"><a class=\"anchor\" href=\"#注册表的打开与关闭\">#</a> 注册表的打开与关闭</h2>\n<h2 id=\"注册表的修改\"><a class=\"anchor\" href=\"#注册表的修改\">#</a> 注册表的修改</h2>\n<h2 id=\"注册表的读取\"><a class=\"anchor\" href=\"#注册表的读取\">#</a> 注册表的读取</h2>\n<h2 id=\"作业\"><a class=\"anchor\" href=\"#作业\">#</a> 作业</h2>\n<h3 id=\"注册表实现驱动的自启\"><a class=\"anchor\" href=\"#注册表实现驱动的自启\">#</a> 注册表实现驱动的自启</h3>\n<p>驱动文件的转移</p>\n<h1 id=\"文件操作\"><a class=\"anchor\" href=\"#文件操作\">#</a> 文件操作</h1>\n<h2 id=\"文件的打开与关闭\"><a class=\"anchor\" href=\"#文件的打开与关闭\">#</a> 文件的打开与关闭</h2>\n<h2 id=\"文件的读写\"><a class=\"anchor\" href=\"#文件的读写\">#</a> 文件的读写</h2>\n<h2 id=\"文件的删除\"><a class=\"anchor\" href=\"#文件的删除\">#</a> 文件的删除</h2>\n<p>强行删除<br />\n文件的保护</p>\n<h2 id=\"作业-2\"><a class=\"anchor\" href=\"#作业-2\">#</a> 作业</h2>\n<p>在内核中实现文件的拷贝</p>\n<h1 id=\"线程与事件\"><a class=\"anchor\" href=\"#线程与事件\">#</a> 线程与事件</h1>\n<h2 id=\"使用系统线程\"><a class=\"anchor\" href=\"#使用系统线程\">#</a> 使用系统线程</h2>\n<h2 id=\"使用同步事件\"><a class=\"anchor\" href=\"#使用同步事件\">#</a> 使用同步事件</h2>\n",
            "tags": [
                "上下文环境",
                "中断请求级别",
                "链表",
                "自旋锁",
                "注册表",
                "地址空间",
                "文件操作",
                "线程与事件"
            ]
        }
    ]
}