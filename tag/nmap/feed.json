{
    "version": "https://jsonfeed.org/version/1",
    "title": "Or0kit • All posts by \"nmap\" tag",
    "description": "临渊羡鱼，不如退而结网",
    "home_page_url": "https://Or0kit.github.io",
    "items": [
        {
            "id": "https://or0kit.github.io/PenetrationTest/Web-Security/Nmap%E9%80%9F%E6%9F%A5%E6%89%8B%E5%86%8C/",
            "url": "https://or0kit.github.io/PenetrationTest/Web-Security/Nmap%E9%80%9F%E6%9F%A5%E6%89%8B%E5%86%8C/",
            "title": "Nmap速查手册",
            "date_published": "2021-03-09T08:14:20.000Z",
            "content_html": "<h1 id=\"reference\"><a class=\"anchor\" href=\"#reference\">#</a> Reference</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuMmN0by5jb20vQXJ0aWNsZS8yMDE0MTIvMzYyMTg4Lmh0bWw=\">https://www.2cto.com/Article/201412/362188.html</span></p>\n<h1 id=\"nmap-简介\"><a class=\"anchor\" href=\"#nmap-简介\">#</a> Nmap 简介</h1>\n<p>Nmap 是 Network Mapper 的简称<br />\n Nmap 是一款开源免费的网络发现（Network Discovery）和安全审计（Security Auditing）工具<br />\n 1997 年由 Fyodor 创建</p>\n<p>Nmap 四项基本功能：</p>\n<p>1. 主机发现（Host Discovery）<br />\n2. 端口扫描（Port Scanning）<br />\n3. 版本侦测（Version Detection）<br />\n4. 操作系统侦测（Operating System Detection）</p>\n<p>这四项功能之间，又存在大致的依赖关系（通常情况下的顺序关系，但特殊应用另外考虑），首先需要进行主机发现，随<br />\n后确定端口状况，然后确定端口上运行具体应用程序与版本信息，然后可以进行操作系统的侦测。而在四项基本功能的基<br />\n础上，Nmap 提供防火墙与 IDS（IntrusionDetection System, 入侵检测系统）的规避技巧，可以综合应用到四个基本功<br />\n能的各个阶段；另外 Nmap 提供强大的 NSE（Nmap Scripting Language）脚本引擎功能，脚本可以对基本功能进行补充<br />\n和扩展。</p>\n<p><span class=\"label info\">大致功能为:</span></p>\n<ol>\n<li>主机存活检测</li>\n<li>端口探测</li>\n<li>服务识别</li>\n<li>操作系统识别</li>\n<li>硬件地址检测</li>\n<li>服务版本识别</li>\n<li>漏洞扫描，使用 nmap 自带脚本</li>\n</ol>\n<h1 id=\"nmap参数详解\"><a class=\"anchor\" href=\"#nmap参数详解\">#</a> Nmap 参数详解</h1>\n<h2 id=\"nmap支持主机名ip网段的表示方式\"><a class=\"anchor\" href=\"#nmap支持主机名ip网段的表示方式\">#</a> Nmap 支持主机名，ip, 网段的表示方式</h2>\n<p>例如:blah.highon.coffee, <span class=\"exturl\" data-url=\"aHR0cDovL25hbXAub3JnLzI0\">namp.org/24</span>, 192.168.0.1;10.0.0-25.1-254</p>\n<p>-iL filename                    从文件中读取待检测的目标，文件中的表示方法支持机名，ip, 网段<br />\n - iR hostnum                     随机选取，进行扫描。如果 - iR 指定为 0, 则是无休止的扫描<br />\n --exclude host1 [, host2]        从扫描任务中需要排除的主机<br />\n --exculdefile exclude_file      排除文件中的 IP, 格式和 - iL 指定扫描文件的格式相同</p>\n<h2 id=\"0x00-主机发现\"><a class=\"anchor\" href=\"#0x00-主机发现\">#</a> 0x00 主机发现</h2>\n<p>-sL                     仅仅是显示，扫描的 IP 数目，不会进行任何扫描<br />\n - sn                     ping 扫描，即主机发现<br />\n - Pn                     不检测主机存活<br />\n - PS/PA/PU/PY [portlist]  TCP SYN Ping/TCP ACK Ping/UDP Ping 发现<br />\n - PE/PP/PM               使用 ICMP echo, timestamp and netmask 请求包发现主机<br />\n - PO [prococol list]      使用 IP 协议包探测对方主机是否开启<br />\n - n/-R                   不对 IP 进行域名反向解析 / 为所有的 IP 都进行域名的反响解析</p>\n<h2 id=\"0x01-扫描技巧\"><a class=\"anchor\" href=\"#0x01-扫描技巧\">#</a> 0x01 扫描技巧</h2>\n<p>-sS/sT/sA/sW/sM                 TCP SYN/TCP connect ()/ACK/TCP 窗口扫描 / TCP Maimon 扫描<br />\n - sU                             UDP 扫描<br />\n - sN/sF/sX                       TCP Null，FIN，and Xmas 扫描<br />\n --scanflags                     自定义 TCP 包中的 flags<br />\n-sI zombie host[:probeport]     Idlescan<br />\n-sY/sZ                          SCTP INIT/COOKIE-ECHO 扫描<br />\n - sO                             使用 IP protocol 扫描确定目标机支持的协议类型<br />\n - b “FTP relay host” 使用 FTP bounce scan</p>\n<h2 id=\"0x02-指定端口和扫描顺序\"><a class=\"anchor\" href=\"#0x02-指定端口和扫描顺序\">#</a> 0x02 指定端口和扫描顺序</h2>\n<p>-p                      特定的端口 -p80,443 或者 -p1-65535<br />\n-p U:PORT               扫描 udp 的某个端口，-p U:53<br />\n-F                      快速扫描模式，比默认的扫描端口还少<br />\n - r                      不随机扫描端口，默认是随机扫描的<br />\n --top-ports &quot;number&quot;    扫描开放概率最高的 number 个端口，出现的概率需要参考 nmap-services 文件，ubuntu 中该文件位于 /usr/share/nmap.nmap 默认扫前 1000 个<br />\n --port-ratio &quot;ratio&quot;    扫描指定频率以上的端口</p>\n<h2 id=\"0x03-服务版本识别\"><a class=\"anchor\" href=\"#0x03-服务版本识别\">#</a> 0x03 服务版本识别</h2>\n<p>-sV                             开放版本探测，可以直接使用 - A 同时打开操作系统探测和版本探测<br />\n --version-intensity &quot;level&quot;     设置版本扫描强度，强度水平说明了应该使用哪些探测报文。数值越高，服务越有可能被正确识别。默认是 7<br />\n--version-light                 打开轻量级模式，为 --version-intensity 2 的别名<br />\n --version-all                   尝试所有探测，为 --version-intensity 9 的别名<br />\n --version-trace                 显示出详细的版本侦测过程信息</p>\n<h2 id=\"0x04-脚本扫描\"><a class=\"anchor\" href=\"#0x04-脚本扫描\">#</a> 0x04 脚本扫描</h2>\n<p>-sC                             根据端口识别的服务，调用默认脚本<br />\n --script=”Lua scripts”          调用的脚本名<br />\n --script-args=n1=v1,[n2=v2]     调用的脚本传递的参数<br />\n --script-args-file=filename     使用文本传递参数<br />\n --script-trace                  显示所有发送和接收到的数据<br />\n --script-updatedb               更新脚本的数据库<br />\n --script-help=”Lua script”      显示指定脚本的帮助</p>\n<h2 id=\"0x05-os识别\"><a class=\"anchor\" href=\"#0x05-os识别\">#</a> 0x05 OS 识别</h2>\n<p>-O              启用操作系统检测，-A 来同时启用操作系统检测和版本检测<br />\n --osscan-limit  针对指定的目标进行操作系统检测 (至少需确知该主机分别有一个 open 和 closed 的端口)<br />\n--osscan-guess  推测操作系统检测结果，当 Nmap 无法确定所检测的操作系统时，会尽可能地提供最相近的匹配，Nmap 默认进行这种匹配</p>\n<h2 id=\"0x06-防火墙ids躲避和欺骗\"><a class=\"anchor\" href=\"#0x06-防火墙ids躲避和欺骗\">#</a> 0x06 防火墙 / IDS 躲避和欺骗</h2>\n<p>-f; --mtu value                 指定使用分片、指定数据包的 MTU.<br />\n-D decoy1,decoy2,ME             使用诱饵隐蔽扫描<br />\n - S IP-ADDRESS                   源地址欺骗<br />\n - e interface                    使用指定的接口<br />\n - g/--source-port PROTNUM       使用指定源端口<br />\n --proxies url1,[url2],...       使用 HTTP 或者 SOCKS4 的代理</p>\n<p>--data-length NUM               填充随机数据让数据包长度达到 NUM<br />\n--ip-options OPTIONS            使用指定的 IP 选项来发送数据包<br />\n --ttl VALUE                     设置 IP time-to-live 域<br />\n --spoof-mac ADDR/PREFIX/VEBDOR  MAC 地址伪装<br />\n --badsum                        使用错误的 checksum 来发送数据包</p>\n<h2 id=\"0x07-输出\"><a class=\"anchor\" href=\"#0x07-输出\">#</a> 0x07 输出</h2>\n<p>-oN                     将标准输出直接写入指定的文件<br />\n - oX                     输出 xml 文件<br />\n - oS                     将所有的输出都改为大写<br />\n - oG                     输出便于通过 bash 或者 perl 处理的格式，非 xml<br />\n-oA BASENAME            可将扫描结果以标准格式、XML 格式和 Grep 格式一次性输出<br />\n - v                      提高输出信息的详细度<br />\n - d level                设置 debug 级别，最高是 9<br />\n--reason                显示端口处于带确认状态的原因<br />\n --open                  只输出端口状态为 open 的端口<br />\n --packet-trace          显示所有发送或者接收到的数据包<br />\n --iflist                显示路由信息和接口，便于调试<br />\n --log-errors            把日志等级为 errors/warings 的日志输出<br />\n --append-output         追加到指定的文件<br />\n --resume FILENAME       恢复已停止的扫描<br />\n --stylesheet PATH/URL   设置 XSL 样式表，转换 XML 输出<br />\n --webxml                从 namp.org 得到 XML 的样式<br />\n --no-sytlesheet         忽略 XML 声明的 XSL 样式表</p>\n<h2 id=\"0x08-其他选项\"><a class=\"anchor\" href=\"#0x08-其他选项\">#</a> 0x08 其他选项</h2>\n<p>-6                      开启 IPv6<br />\n-A                      OS 识别，版本探测，脚本扫描和 traceroute<br />\n--datedir DIRNAME       说明用户 Nmap 数据文件位置<br />\n --send-eth /--send-ip  使用原以太网帧发送 / 在原 IP 层发送<br />\n --privileged            假定用户具有全部权限<br />\n --unprovoleged          假定用户不具有全部权限，创建原始套接字需要 root 权限<br />\n - V                      打印版本信息<br />\n - h                      输出帮助</p>\n<h1 id=\"nmap-例子\"><a class=\"anchor\" href=\"#nmap-例子\">#</a> nmap 例子</h1>\n<p>使用 ping 检测 10.0.0.0/24 这个网段</p>\n<p><code>nmap -sP 10.0.0.0/24</code></p>\n<p>使用 SYN 的方法对全端口进行扫描，在 aggressive (4) 的时间模板下，同时对开放的端口进行端口识别</p>\n<p><code>nmap -p1-65535 -sV -sS -T4 target</code></p>\n<p>PS: -T 代表的是扫描的时候，一些控制选项 (TCP 的延迟时间，探测报文之间的间隔等) 的集合，具体的 man nmap 一下就知道了</p>\n<p>使用 SYN 扫描，在 aggressive (4) 的时间模板下，探测操作系统的类型和版本，还有显示 traceroute 的结果，结果输出较为详细</p>\n<p><code>nmap -v -sS -A -T4 target</code></p>\n<p>使用 SYN 扫描，在 insane (5) 的时间模板下，探测操作系统的类型和版本，还有显示 traceroute 的结果，结果输出较为详细</p>\n<p><code>nmap -v -sS -A -T5 target</code></p>\n<p>使用 SYN 扫描，在 insane (5) 的时间模板下，探测操作系统的类型，还有显示 traceroute 的结果，操作系统的类型，结果输出较为详细</p>\n<p><code>nmap -v -sV -O -sS -T5 target</code></p>\n<p>使用 SYN 的方法对全端口进行扫描，同时对开放的端口进行端口识别，在 aggressive (4) 的时间模板下，探测操作系统的类型还有显示 traceroute 的结果，结果输出较为详细</p>\n<p><code>nmap -v -p 1-65535 -sV -O -sS -T4 target</code></p>\n<p>用 SYN 的方法对全端口进行扫描，同时对开放的端口进行端口识别，在 insane (5) 的时间模板下，探测操作系统的类型，还有显示 traceroute 的结果，结果输出较为详细</p>\n<p><code>nmap -v -p 1-65535 -sV -O -sS -T5 target</code></p>\n<p>从文件中读取需要扫描的 IP 列表</p>\n<p><code>nmap -iL ip-address.txt</code></p>\n<p>Nmap 输出格式</p>\n<ol>\n<li>扫描的结果输出到屏幕，同时会存储一份到 grep-output.txt</li>\n</ol>\n<p><code>nmap -sV -p 139,445 -oG grep-output.txt 10.0.1.0/24</code></p>\n<ol start=\"2\">\n<li>扫描结果输出为 html</li>\n</ol>\n<p><code>nmap -sS -sV -T5 10.0.1.99 --webxml -oX - | xsltproc --output file.html</code></p>\n<p>Nmap 扫描 Netbios</p>\n<ol>\n<li>在子网中发现开放 netbios 的 IP</li>\n</ol>\n<p><code>nmap -sV -v -p139,445 10.0.0.1/24</code></p>\n<ol start=\"2\">\n<li>扫描指定 netbios 的名称</li>\n</ol>\n<p><code>nmap -sU --script nbstat.nse -p 137 target</code></p>\n<p>扫描指定的目标，同时检测相关漏洞</p>\n<p><code>nmap --script-args=unsafe=1 --script smb-check-vulns.nse -p 445 target</code></p>\n<p>将 nmap 的 80 端口的扫描结果，通过管道交给 nikto 进行扫描</p>\n<p><code>Nmap Nikto Scan nmap -p80 10.0.1.0/24 -oG - | nikto.pl -h -</code></p>\n<p>将 nmap 的 80,443 端口的扫描结果，通过管道交给 nikto 进行扫描</p>\n<p><code>nmap -p80,443 10.0.1.0/24 -oG - | nikto.pl -h -</code></p>\n",
            "tags": [
                "Nmap"
            ]
        }
    ]
}