{
    "version": "https://jsonfeed.org/version/1",
    "title": "Or0kit • All posts by \"dll注入\" tag",
    "description": "临渊羡鱼，不如退而结网",
    "home_page_url": "https://Or0kit.github.io",
    "items": [
        {
            "id": "https://or0kit.github.io/Bin/Win32/Win%E8%BF%9C%E7%A8%8B%E7%BA%BF%E7%A8%8B%E6%B3%A8%E5%85%A5/",
            "url": "https://or0kit.github.io/Bin/Win32/Win%E8%BF%9C%E7%A8%8B%E7%BA%BF%E7%A8%8B%E6%B3%A8%E5%85%A5/",
            "title": "Win远程线程注入",
            "date_published": "2021-07-19T07:56:02.000Z",
            "content_html": "<h1 id=\"1-什么是注入\"><a class=\"anchor\" href=\"#1-什么是注入\">#</a> 1、什么是注入？</h1>\n<p>所谓注入就是在第三方进程不知道或者不允许的情况下将模块或者代码写入对方进程空间，并设法执行的技术。</p>\n<p>在安全领域，“注入” 是非常重要的一一种技术手段，注入与反注入也一直处于不断变化的，而且也愈来愈激烈的对抗当中。</p>\n<p>己知的注入方式:<br />\n 远程线程注入、APC 注入、消息钩子注入、注册表注入、导入表注入、输入法注入等等。</p>\n<h1 id=\"2-远程线程注入的实现\"><a class=\"anchor\" href=\"#2-远程线程注入的实现\">#</a> 2、远程线程注入的实现</h1>\n<h2 id=\"楔子\"><a class=\"anchor\" href=\"#楔子\">#</a> 楔子</h2>\n<p>利用  <code>CreateRemoteThread</code>  函数我们能创建一个远程线程，并且在这个远程线程中运行一个满足  <code>ThreadProc</code>  格式的线程函数。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//ThreadProc 函数格式</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>DWORD WINAPI <span class=\"token function\">ThreadProc</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  __in  LPVOID lpParameter</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这个远程线程函数的格式是有局限的，有 4 个字节类型的返回值、一个参数。且必须在被创建远程线程的程序进程中，还要知道这个函数在这个程序进程中的地址。</p>\n<p>这就引出了我们的关键函数  <code>LoadLibary</code></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>HMODULE WINAPI <span class=\"token function\">LoadLibrary</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  __in  LPCTSTR lpFileName</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>看下这张图立马就明白了</p>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<p>既让远程线程执行  <code>LoadLibrary</code>  函数去加载一个 dll（模块）。</p>\n<p>这也就是所谓的 DLL 注入。</p>\n<p>还有一个很重要的问题，我们知道不同进程中，地址空间是隔离的，那么我在注入的进程中传入 LoadLibrary 函数的地址，这算是一个硬编码的地址，它在目标进程中是否是一样的呢？答案是，二者的地址是一样的，这是由于 kernel32.dll 在 32 位程序中加载的基地址是一样的，而 LoadLibrary 在 kernel32.dll 中的偏移是一定的（只要不同的进程加载的是同一份 kernel32.dll）那么不同进程中的 LoadLibrary 函数的地址是一样的。其实不光是 LoadLibrary 函数，只要是 kernel32.dll 中导出的函数，在不同进程中的地址都是一样的。注意这里只是 32 位，如果想要使用 32 位程序往 64 位目标程序中注入，可能需要考虑地址转换的问题，只要知道 kernel32.dll 在 64 位中的偏移，就可以计算出对应函数的地址了。</p>\n<h2 id=\"dll注入\"><a class=\"anchor\" href=\"#dll注入\">#</a> DLL 注入</h2>\n<p>这是网上收集的一些概念。</p>\n<ol>\n<li>dll 注入是指向运行中的其它进程强制插入特定的 dll 文件。从技术细节来说，DLL 注入命令其他进程自行调用 LoadLibrary () API，加载用户指定的 dll 文件。</li>\n<li>当 dll 被加载到进程中以后，就拥有了访问进程内存的权限。(用户可以通过这个来修复程序 bug 或增加功能等)。</li>\n<li>dll 被加载到进程后会自动运行 DllMain 函数。</li>\n<li>使用 LoadLibrary () API 加载某个 DLL 时，该 DLL 中的 DllMain 函数就会被自动执行。DLL 注入的工作原理就是从外部促使目标进程调用 LoadLibrary () API，所以会强制掉用执行 DLL 的 DllMain () 函数。</li>\n</ol>\n<h1 id=\"实例\"><a class=\"anchor\" href=\"#实例\">#</a> 实例</h1>\n<h2 id=\"将会使用到的函数\"><a class=\"anchor\" href=\"#将会使用到的函数\">#</a> 将会使用到的函数</h2>\n<h3 id=\"getmodulefilename\"><a class=\"anchor\" href=\"#getmodulefilename\">#</a> <strong>GetModuleFileName</strong></h3>\n<p>获取当前进程已加载模块的文件的完整路径，该模块必须由当前进程加载。</p>\n<p>如果想要获取另一个已加载模块的文件路径，可以使用 GetModuleFileNameEx 函数。</p>\n<p>函数原型：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>DWORD WINAPI <span class=\"token function\">GetModuleFileName</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    _In_opt_  HMODULE hModule<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    _Out_     LPTSTR lpFilename<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    _In_      DWORD nSize</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li><em>hModule</em>： 一个模块的句柄。可以是一个 DLL 模块，或者是一个应用程序的实例句柄。如果该参数为 NULL，该函数返回该应用程序全路径。</li>\n<li><em>lpFileName</em>: 指定一个字符串缓冲区，要在其中容纳文件的用 NULL 字符中止的路径名，hModule 模块就是从这个文件装载进来的。</li>\n<li><em>nSize</em>： 装载到缓冲区 lpFileName 的最大字符数。</li>\n</ul>\n<p>返回值：</p>\n<p>如果返回为成功，将在 lpFileName 的<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTclQkMlOTMlRTUlODYlQjIlRTUlOEMlQkE=\">缓冲区</span>当中返回相应模块的路径，如果所设的 nSize 过小，那么返回仅按所设置缓冲区大小返回相应字符串内容。如果函数失败，返回值将为 0，利用 GetLastError 可获得异常代码。</p>\n<h3 id=\"_tcsrchr\"><a class=\"anchor\" href=\"#_tcsrchr\">#</a> <strong>_tcsrchr</strong></h3>\n<p><strong>函数功能</strong> ：查找一个字符串中<strong>最后</strong>一次出现的指定字符。</p>\n<p><strong>函数原型</strong> ：<br />\nchar *strrchr( const char *string, int c);<br />\nchar *wcsrchr( const wchar_t *string, int c );<br />\n<strong> 参数说明</strong> ：<br />\n第一个参数：字符串<br />\n第二个参数：需要查找的字符<br />\n<strong>功能</strong> ：查找一个字符串中最后出现的指定字符。<br />\n<strong>返回值</strong> ：找出字符串中最后一个出现查找字符的地址，然后将该字符出现的地址返回。</p>\n<p>(注：_tcsrchr 支持 ANSI 和 UNICODE，ANSI 使用 strrchr，UNICODE 使用 wcsrchr。)</p>\n<h3 id=\"_tcscpy_s\"><a class=\"anchor\" href=\"#_tcscpy_s\">#</a> <strong>_tcscpy_s</strong></h3>\n<p>字符拷贝函数，使用的如果是 UNICODE 编码，则采用 wcscpy_s () 函数，如果是多字节编码，则采用 strcpy_s () 函数。</p>\n<p>功能：字符串拷贝</p>\n<p>后缀_s 表示使用安全的字符串拷贝函数，防止缓冲区不够大而引起错误。</p>\n<h3 id=\"urldownloadtofile\"><a class=\"anchor\" href=\"#urldownloadtofile\">#</a> <strong>URLDownloadToFile</strong></h3>\n<p>URLDownloadToFile，指从指定 URL 地址读取内容并将读取到的内容保存到特定的文件里的实现方法。</p>\n<p>函数原型：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>HRESULT <span class=\"token function\">URLDownloadToFile</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    LPUNKNOWN pCaller<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    LPCTSTR szURL<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    LPCTSTR szFileName<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    DWORD dwReserved<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    LPBINDSTATUSCALLBACK lpfnCB</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>参数</p>\n<ul>\n<li><em>pCaller</em><br />\n 指向调用 ActiveX 组件的控制<span class=\"exturl\" data-url=\"aHR0cHM6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9tczY4MDUwOQ==\"> IUnknown</span> 接口的指针，如果调用者是 ActiveX 组件。如果调用应用程序不是 ActiveX 组件，则可以将此值设置为 <strong>NULL</strong> 。否则，调用方是包含在另一个组件中的 COM 对象，例如 HTML 页面上下文中的 ActiveX 控件。此参数表示调用组件的最外层 IUnknown。该函数在 ActiveX 客户端框架的上下文中尝试下载，并允许调用者容器接收有关下载进度的回调。</li>\n<li><em>szURL</em><br />\n 指向包含要下载的 URL 的字符串值的指针。不能设置为 <strong>NULL</strong> 。如果 URL 无效，则返回 INET_E_DOWNLOAD_FAILURE。</li>\n<li><em>szFileName</em><br />\n 指向包含要为下载创建的文件的名称或完整路径的字符串值的指针。如果<em> szFileName</em> 包含路径，则目标目录必须已经存在。</li>\n<li><em>dwReserved</em><br />\n 保留。必须设置为 0。</li>\n<li><em>lpfnCB</em><br />\n 指向调用者<a href=\"https://docs.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/platform-apis/ms775060(v=vs.85)\"><strong> IBindStatusCallback</strong></a> 接口的指针。通过使用<a href=\"https://docs.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/platform-apis/ms775064(v=vs.85)\"><strong> IBindStatusCallback::OnProgress</strong></a>，调用者可以接收下载状态。<a href=\"https://docs.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/platform-apis/ms775123(v=vs.85)\"><strong>URLDownloadToFile</strong></a> 在接收到数据时调用<strong> IBindStatusCallback::OnProgress</strong> 和<a href=\"https://docs.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/platform-apis/ms775061(v=vs.85)\"><strong> IBindStatusCallback::OnDataAvailable</strong></a> 方法。下载操作可以通过从任何回调返回 E_ABORT 来取消。如果不需要状态，可以将此参数设置为 <strong>NULL</strong> 。</li>\n</ul>\n<p>返回值</p>\n<p>此函数可以返回这些值之一。</p>\n<table>\n<thead>\n<tr>\n<th>返回码</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>S_OK</strong></td>\n<td>下载成功开始。</td>\n</tr>\n<tr>\n<td><strong>E_OUTOFMEMORY</strong></td>\n<td>缓冲区长度无效，或内存不足，无法完成操作。</td>\n</tr>\n<tr>\n<td><strong>INET_E_DOWNLOAD_FAILURE</strong></td>\n<td>指定的资源或回调接口无效。</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"程序\"><a class=\"anchor\" href=\"#程序\">#</a> 程序</h2>\n<p>DLL 文件，环境是 VS2019。<br />\n只是简单的弹个窗，在并把百度首页保存到 dll 所在目录。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//dllmain.cpp : 定义 DLL 应用程序的入口点。</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"pch.h\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;urlmon.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;tchar.h></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\"><span class=\"token function\">comment</span><span class=\"token punctuation\">(</span>lib<span class=\"token punctuation\">,</span> </span><span class=\"token string\">\"urlmon.lib\"</span><span class=\"token expression\"><span class=\"token punctuation\">)</span>  </span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">DEF_FILE_NAME</span> <span class=\"token expression\"><span class=\"token punctuation\">(</span>L</span><span class=\"token string\">\"DllInject.html\"</span><span class=\"token expression\"><span class=\"token punctuation\">)</span> </span><span class=\"token comment\">//define 我们保存的网页的文件名</span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 自动下载到 dll 所在的目录下</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>DWORD WINAPI <span class=\"token function\">ThreadProc</span><span class=\"token punctuation\">(</span>LPVOID lpParameter<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    HMODULE g_hMod <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    TCHAR szPath<span class=\"token punctuation\">[</span>_MAX_PATH<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 定义一个数组来储存路径</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token function\">GetModuleFileName</span><span class=\"token punctuation\">(</span>g_hMod<span class=\"token punctuation\">,</span> szPath<span class=\"token punctuation\">,</span> MAX_PATH<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 获取当前模块的路径</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    TCHAR<span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> <span class=\"token function\">_tcsrchr</span><span class=\"token punctuation\">(</span>szPath<span class=\"token punctuation\">,</span> <span class=\"token string\">'\\\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// 在 szPath 储存的路径中从右到左寻找字符 \\\\ 并返回字符串指针</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token function\">_tcscpy_s</span><span class=\"token punctuation\">(</span>p <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> _MAX_PATH<span class=\"token punctuation\">,</span> DEF_FILE_NAME<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 生成文件保存的路径，将 DllInject.html 保存在 szPath 路径最后的 '\\' 字符之后</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token function\">URLDownloadToFile</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> L<span class=\"token string\">\"https://www.baidu.com\"</span><span class=\"token punctuation\">,</span> szPath<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 下载文件保存到 szPath 所描述的文件中</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>BOOL APIENTRY <span class=\"token function\">DllMain</span><span class=\"token punctuation\">(</span> HMODULE hModule<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                       DWORD  ul_reason_for_call<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                       LPVOID lpReserved</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                     <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>ul_reason_for_call<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">case</span> DLL_PROCESS_ATTACH<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        HANDLE hTread <span class=\"token operator\">=</span> <span class=\"token function\">CreateThread</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> ThreadProc<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hTread<span class=\"token operator\">==</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token function\">MessageBox</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> L<span class=\"token string\">\"CreateThread Error!!\"</span><span class=\"token punctuation\">,</span> L<span class=\"token string\">\"Or0kit\"</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token function\">MessageBox</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> L<span class=\"token string\">\"Inject Success!!\"</span><span class=\"token punctuation\">,</span> L<span class=\"token string\">\"Or0kit\"</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token function\">CloseHandle</span><span class=\"token punctuation\">(</span>hTread<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token keyword\">case</span> DLL_THREAD_ATTACH<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token keyword\">case</span> DLL_THREAD_DETACH<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token keyword\">case</span> DLL_PROCESS_DETACH<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token keyword\">return</span> TRUE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>主程序</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;Windows.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;TlHelp32.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;assert.h></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;tchar.h></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">DllPath</span> <span class=\"token expression\">L</span><span class=\"token string\">\"F:\\\\000Users\\\\Desktop\\\\Dll2021-7-19.dll\"</span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 获取进程 name 的 ID</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>DWORD <span class=\"token function\">getPid</span><span class=\"token punctuation\">(</span>LPTSTR name<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    HANDLE hProcSnap <span class=\"token operator\">=</span> <span class=\"token function\">CreateToolhelp32Snapshot</span><span class=\"token punctuation\">(</span>TH32CS_SNAPPROCESS<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 获取进程快照句柄</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>hProcSnap <span class=\"token operator\">!=</span> INVALID_HANDLE_VALUE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    PROCESSENTRY32 pe32<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    pe32<span class=\"token punctuation\">.</span>dwSize <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>PROCESSENTRY32<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    BOOL flag <span class=\"token operator\">=</span> <span class=\"token function\">Process32First</span><span class=\"token punctuation\">(</span>hProcSnap<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>pe32<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 获取列表的第一个进程</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">_tcscmp</span><span class=\"token punctuation\">(</span>pe32<span class=\"token punctuation\">.</span>szExeFile<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token function\">CloseHandle</span><span class=\"token punctuation\">(</span>hProcSnap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token keyword\">return</span> pe32<span class=\"token punctuation\">.</span>th32ProcessID<span class=\"token punctuation\">;</span><span class=\"token comment\">//pid</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        flag <span class=\"token operator\">=</span> <span class=\"token function\">Process32Next</span><span class=\"token punctuation\">(</span>hProcSnap<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>pe32<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 获取下一个进程</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token function\">CloseHandle</span><span class=\"token punctuation\">(</span>hProcSnap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token comment\">// 远程线程注入</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>bool <span class=\"token function\">RemoteThreadInject</span><span class=\"token punctuation\">(</span>LPTSTR ProcName<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    DWORD dwPid <span class=\"token operator\">=</span> <span class=\"token function\">getPid</span><span class=\"token punctuation\">(</span>ProcName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token comment\">//1. 使用 PID 打开进程获取权限</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    HANDLE hProcess <span class=\"token operator\">=</span> <span class=\"token function\">OpenProcess</span><span class=\"token punctuation\">(</span>PROCESS_ALL_ACCESS<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> dwPid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token comment\">//2. 申请内存，写入 DLL 路径</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token keyword\">int</span> nLen <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>WCHAR<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token function\">wcslen</span><span class=\"token punctuation\">(</span>DllPath<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    LPVOID pBuf <span class=\"token operator\">=</span> <span class=\"token function\">VirtualAllocEx</span><span class=\"token punctuation\">(</span>hProcess<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> nLen<span class=\"token punctuation\">,</span> MEM_RESERVE <span class=\"token operator\">|</span> MEM_COMMIT<span class=\"token punctuation\">,</span> PAGE_READWRITE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>pBuf<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"申请内存失败！\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token comment\">//3. 写入内存</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    DWORD dwWrite <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">WriteProcessMemory</span><span class=\"token punctuation\">(</span>hProcess<span class=\"token punctuation\">,</span> pBuf<span class=\"token punctuation\">,</span> DllPath<span class=\"token punctuation\">,</span> nLen<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>dwWrite<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"写入内存失败！\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token comment\">//4. 创建远程线程，让对方调用 LoadLibrary</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    HANDLE hRemoteThread <span class=\"token operator\">=</span> <span class=\"token function\">CreateRemoteThread</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        hProcess<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        <span class=\"token punctuation\">(</span>LPTHREAD_START_ROUTINE<span class=\"token punctuation\">)</span>LoadLibrary<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        pBuf<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token comment\">//5. 等待线程结束返回，释放资源</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token function\">WaitForSingleObject</span><span class=\"token punctuation\">(</span>hRemoteThread<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token function\">CloseHandle</span><span class=\"token punctuation\">(</span>hRemoteThread<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    <span class=\"token function\">VirtualFreeEx</span><span class=\"token punctuation\">(</span>hProcess<span class=\"token punctuation\">,</span> pBuf<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> MEM_FREE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    <span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre></pre></td></tr><tr><td data-num=\"69\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    <span class=\"token function\">RemoteThreadInject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>LPTSTR<span class=\"token punctuation\">)</span><span class=\"token function\">TEXT</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Win2021-7-19.exe\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span>；</pre></td></tr><tr><td data-num=\"72\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>首先这是我们没注入前的桌面</p>\n<p><img data-src=\"image002.png\" alt=\"\" /></p>\n<p>运行我们的受害者</p>\n<p><img data-src=\"image003.png\" alt=\"\" /></p>\n<p>运行我们的注入程序</p>\n<p><img data-src=\"image004.png\" alt=\"\" /></p>\n<p>结果</p>\n<p><img data-src=\"image005.png\" alt=\"\" /><br />\n<img data-src=\"image006.png\" alt=\"\" /></p>\n<p>不过我这里出了点问题，不过程序还是跑起来了……</p>\n<p><img data-src=\"image007.png\" alt=\"\" /></p>\n<p>等有时间了再调试吧。</p>\n<p><img data-src=\"image008.png\" alt=\"\" /></p>\n<h1 id=\"reference\"><a class=\"anchor\" href=\"#reference\">#</a> Reference</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYnMucGVkaXkuY29tL3RocmVhZC0yNjY5MDEuaHRt\">https://bbs.pediy.com/thread-266901.htm</span><br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3doYXRkYXkvYXJ0aWNsZS9kZXRhaWxzLzg5NzU5MzA=\">https://blog.csdn.net/whatday/article/details/8975930</span></p>\n",
            "tags": [
                "远程线程",
                "DLL注入",
                "DLL注入相关函数"
            ]
        }
    ]
}