{
    "version": "https://jsonfeed.org/version/1",
    "title": "Or0kit • All posts by \"重定位表\" tag",
    "description": "临渊羡鱼，不如退而结网",
    "home_page_url": "https://Or0kit.github.io",
    "items": [
        {
            "id": "https://or0kit.github.io/Bin/WindowsPE/%E9%87%8D%E5%AE%9A%E4%BD%8D%E8%A1%A8/",
            "url": "https://or0kit.github.io/Bin/WindowsPE/%E9%87%8D%E5%AE%9A%E4%BD%8D%E8%A1%A8/",
            "title": "重定位表",
            "date_published": "2021-05-08T13:50:11.000Z",
            "content_html": "<h1 id=\"程序加载的过程\"><a class=\"anchor\" href=\"#程序加载的过程\">#</a> 程序加载的过程</h1>\n<p>程序从 FileBuffer 转换成 ImageBuffer.</p>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<p>特别说明：</p>\n<p>1、由于一般情况.exe 运行时被第一个加载，所以 exe 文件一般没有重定位表，但是不代表所有 exe 都没有重定位表.</p>\n<p>2、为了提高搜索的速度，模块间地址也是要对齐的 模块地址对齐为 10000H 也就是 64K</p>\n<h1 id=\"何为重定位\"><a class=\"anchor\" href=\"#何为重定位\">#</a> 何为重定位</h1>\n<p>重定位的意思就是修正偏移的意思。如一个地址位 0x401234 ,Imagebase = 0x400000 . 那么 RVA 就是 1234.  如果 Imagebase 变了成了 0x300000, 那么修正之后就是 ImageBase + RVA = 0X300000+1234 = 0x301234</p>\n<p>首先我们知道。一个 EXE 文件。会调用很多 DLL (PE) 有多个 PE 文件组成.</p>\n<p>exe 文件启动的基址 (ImageBase) 是 0x40000. 假设我们调用三个 DLL  A B C</p>\n<p>A DLL 在 EXE 展开的基址位置是 0x10000000</p>\n<p>那么恰巧 B DLL 展开的位置也是 0x1000000 两个 DLL 位置展开地方是一样的。那么就出现问题了<br />\n如下图：</p>\n<p><img data-src=\"image002.png\" alt=\"\" /></p>\n<p>这时候操作系统就会给我们进行修正。将 B　DLL 换个内存位置，进行展开。</p>\n<p>如下图: B DLL 从 0x2000000 展开了，规避了使用相同地址</p>\n<p><img data-src=\"image003.png\" alt=\"\" /></p>\n<p>虽然这样解决了入口基址不一样。内存展开不一样。但是我们知道.PE 文件中有很多 RVA .RVA 是相对于 ImageBase 的偏移进行存放的。如果 PE 文件中都是 RVA 那就好办了.</p>\n<p>但是不一定呀.</p>\n<p>打开一个程序，观察一下全局变量的反汇编</p>\n<pre><code class=\"language-s\">00401D58 A1 44 CA 42 00       mov         eax,[x (0042ca44)]\n00401D5D 50                   push        eax\n00401D5E 68 EC 91 42 00       push        offset string &quot;%d\\n&quot; (004291ec)\n00401D63 E8 28 62 00 00       call        printf (00407f90)\n</code></pre>\n<p>编译时生成的地址 = ImageBase + RVA</p>\n<p>这个地址在程序编译完成后，已经写入文件了。</p>\n<p>那假设，程序在加载的时候，没有按照预定的 400000 载入到指定的位置</p>\n<p>但程序执行的时候，仍然会按照 0042ca44 和 004291ec 的地址去使用这个值！</p>\n<p>1、也就是说，如果程序能够按照预定的 ImageBase 来加载的话，那么就不需要重定位表<br />\n这也是为什么 exe 很少有重定位表，而 DLL 大多都有重定位表的原因</p>\n<p>2、一旦某个模块没有按照 ImageBase 进行加载，那么所有类似上面中的地址就都需要修正，否则，引用的地址就是无效的.</p>\n<p>3、一个 EXE 中，需要修正的地方会很多，那我们如何来记录都有哪些地方需要修正呢？</p>\n<p>答案就是重定位表</p>\n<h1 id=\"为什么要用重定位表\"><a class=\"anchor\" href=\"#为什么要用重定位表\">#</a> 为什么要用重定位表</h1>\n<p>上面的例子已经解释的很清楚了，总述一下。</p>\n<p>程序编译时每个模块有一个优先加载地址 ImageBase, 这个值是连接器给出的，因此连接器生成的指令中的地址是在假设模块被加载到 ImageBase 前提之下生成的，那么一旦程序没有将模块加载到 ImageBase 时，那么程序中 的指令地址就需要重新定位。<br />\n例如：假设一个可执行文件，基址是 0x400000, 在这个 image 偏移 0x1234 处是一个指针，指向一个字符串，字符串始于实际地址 0x404002 处，所以指针应该是 0x404002, 加载文件时，由于种种原因，加载器决定把他加载到 0x600000 处，连接器假设的地址和实际的地址之差成为 delta, 上例 delta 为 0x200000，整个位置提高了 0x200000, 那么字符串位置应该为 0x604002, 原来指向字符串的指针就错误了，所以要把 delta 加到指针值中，为了让加载器有这样的能力做调整，可执行文件内含许多个【基址重定位项】，给那些存放指针的位置使用，加载器必须把 delta 加载到各个基址上。<br />\n本例中应该把 0x200000 加给原来的指针值，0x404002, 并将 0x604002 写回原处。</p>\n<h1 id=\"重定位表解析\"><a class=\"anchor\" href=\"#重定位表解析\">#</a> 重定位表解析</h1>\n<h2 id=\"重定位表位置\"><a class=\"anchor\" href=\"#重定位表位置\">#</a> 重定位表位置</h2>\n<p>数据目录项的第 6 个结构，就是重定位表.</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_IMAGE_DATA_DIRECTORY</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    DWORD   VirtualAddress<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    DWORD   Size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span> IMAGE_DATA_DIRECTORY<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>PIMAGE_DATA_DIRECTORY<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 上面 VirtualAddress 存储的地址 指向的就是_IMAGE_BASE_RELOCATION 结构体</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_IMAGE_BASE_RELOCATION</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    DWORD   VirtualAddress<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    DWORD   SizeOfBlock<span class=\"token punctuation\">;</span>          <span class=\"token comment\">// 表示了一个重定位块有多大</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span> IMAGE_BASE_RELOCATION<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">typedef</span> IMAGE_BASE_RELOCATION ，<span class=\"token operator\">*</span> PIMAGE_BASE_RELOCATION<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>看着重定位表就两个成员。其实非常复杂。我们设 VirtualAddress 为 X 设 SizeofBlock 为 Y</p>\n<p>如下图所示，一个格子为 1 个字节.</p>\n<p><img data-src=\"image004.png\" alt=\"\" /></p>\n<p>第一行四个字节为 X, 也就是 Virtualaddress。<br />\n第二行则是 Y，SizeOfBlock 的值。</p>\n<p>我们知道一个 PE 文件需要很多地方进行重定位的。比如记录重定位块多大的 SizeOfBlock 的大小为 16. 也就是两个重定位块，那么第一个重定位表的大小就是如下图</p>\n<p><img data-src=\"image005.png\" alt=\"\" /></p>\n<p>第二个重定位表如果 SzieofBlock 大小为 20 个字节。那么重定位表大小就是 20 个字节</p>\n<p><img data-src=\"image007.png\" alt=\"\" /></p>\n<p>由于重定位表的 SizeOfBlock 大小不确定，新的 Block 的重定位信息的结构体接着上一个 Block4 字节对齐后开始，而当出现一个_IMAGE_BASE_RELOCATION 结构体的值全为 0 时，表明重定位表结束。</p>\n<p><img data-src=\"image008.png\" alt=\"\" /></p>\n<h2 id=\"重定位表的结构\"><a class=\"anchor\" href=\"#重定位表的结构\">#</a> 重定位表的结构</h2>\n<p>在 SizeBlock 后面紧跟着的就是一个 TypeOffset 数组，一个大小是 2 字节，其中高 4 位代表修正的类型，低 12 位是修正的偏移。它的大小与 VirtualAddress 相加就是要修正的 RVA 地址。当出现一个_IMAGE_BASE_RELOCATION 结构体的值全为 0 时，表明重定位表结束。</p>\n<p>TypeOffset 高 4 位的可能取值：</p>\n<p><img data-src=\"image009.png\" alt=\"\" /></p>\n<p>需要首先进行说明的是，重定位表的 RVA 指向的位置是一个数组，里面的元素都是 IMAGE_BASE_RELOCATION，每个 IMAGE_BASE_RELOCATION 只负责 4KB 大小分页内的重定位信息。因此结构中的 VirtualAddress 总是 0x1000 的倍数。</p>\n<p>因为 16 位的二进制数就可以表示一个分页（4KB）的任何位置，而 WORD 恰好就是 16 位</p>\n<p>真正的重定位表结构</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_IMAGE_BASE_RELOCATION</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    DWORD VirtualAddress<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    DWORD SizeOfBlock<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token comment\">//WORD TypeOffset[1];</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span>IMAGE_BASE_RELOCATION<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">struct</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span>   </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    WORD Offset<span class=\"token operator\">:</span><span class=\"token number\">12</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 这是表示 Offset 有 12 位</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    WORD Type<span class=\"token operator\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 这是表示 Type 有 4 位</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span>TypeOffset<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">//Offset: 低 12 位，上面介绍过，它跟 VirtualAddress 相加就是完整的重定位 RVA</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">//Type: 重定位信息的类型，有如下类型:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">IMAGE_REL_BASED_ABSOLUTE</span>              <span class=\"token expression\"><span class=\"token number\">0</span>    </span><span class=\"token comment\">// 无重定位操作，用于 4 字节对齐</span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">IMAGE_REL_BASED_HIGH</span>                  <span class=\"token expression\"><span class=\"token number\">1</span>    </span><span class=\"token comment\">// 重定位指向位置的高 2 个字节需要被修正</span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">IMAGE_REL_BASED_LOW</span>                   <span class=\"token expression\"><span class=\"token number\">2</span>    </span><span class=\"token comment\">// 重定位指向位置的低 2 个字节需要被修正</span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">IMAGE_REL_BASED_HIGHLOW</span>               <span class=\"token expression\"><span class=\"token number\">3</span>    </span><span class=\"token comment\">// 重定位指向位置的全部 4 个字节需要被修正（绝大多数都是这种情况）</span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">IMAGE_REL_BASED_HIGHADJ</span>               <span class=\"token expression\"><span class=\"token number\">4</span>    </span><span class=\"token comment\">// 需要两个 TypeOffset 配合完成索引</span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">IMAGE_REL_BASED_MACHINE_SPECIFIC_5</span>    <span class=\"token expression\"><span class=\"token number\">5</span>    </span><span class=\"token comment\">//...</span></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">IMAGE_REL_BASED_RESERVED</span>              <span class=\"token expression\"><span class=\"token number\">6</span>    </span><span class=\"token comment\">// 保留</span></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">IMAGE_REL_BASED_MACHINE_SPECIFIC_7</span>    <span class=\"token expression\"><span class=\"token number\">7</span>    </span><span class=\"token comment\">//...</span></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">IMAGE_REL_BASED_MACHINE_SPECIFIC_8</span>    <span class=\"token expression\"><span class=\"token number\">8</span>    </span><span class=\"token comment\">//...</span></span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">IMAGE_REL_BASED_MACHINE_SPECIFIC_9</span>    <span class=\"token expression\"><span class=\"token number\">9</span>    </span><span class=\"token comment\">//...</span></span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">IMAGE_REL_BASED_DIR64</span>                 <span class=\"token expression\"><span class=\"token number\">10</span>    </span><span class=\"token comment\">// 重定位指向位置的 8 个字节需要被修正</span></span></pre></td></tr></table></figure><h2 id=\"计算重定位后的地址\"><a class=\"anchor\" href=\"#计算重定位后的地址\">#</a> 计算重定位后的地址</h2>\n<p><code>重定位后的地址 = (加载基址 - ImageBase) + 重定位前的地址</code></p>\n<h2 id=\"定位数据的公式\"><a class=\"anchor\" href=\"#定位数据的公式\">#</a> 定位数据的公式</h2>\n<h3 id=\"需要重定位的数据位置\"><a class=\"anchor\" href=\"#需要重定位的数据位置\">#</a> 需要重定位的数据位置</h3>\n<p>有如下公式：</p>\n<p><code>需要重定位的数据位置 = ImageBase + VirtualAddress + TypeOffset低12位</code></p>\n<p><span class=\"label\">实例</span></p>\n<p><img data-src=\"image010.png\" alt=\"\" /></p>\n<p>如图，其中程序的 ImageBase 是 0x10000000，VirtualAddress 是 0x1000, 低 12 位 Offset 是 0x11F，高四位 Type 是 0x3.</p>\n<p>需要重定位的数据位置 = 0x10000000 + 0x1000 + 0x11F = 0x1000111F</p>\n<h3 id=\"重定位表中记录的重定位信息的个数\"><a class=\"anchor\" href=\"#重定位表中记录的重定位信息的个数\">#</a> 重定位表中记录的重定位信息的个数</h3>\n<p>可以通过下面的公式进行计算：</p>\n<p><code>重定位个数 = (SizeOfBlock - 8(IMAGE_BASE_RELOCATION的大小)) / 2(每个TypeOffset是2个字节)</code> <br />\n <code>总重定位个数 = 所有IMAGE_BASE_RELOCATION结构体相加后的重定位个数</code></p>\n<p>还是以上图为例</p>\n<p>重定位个数 = (0x118 - 8) / 2 = 0x88 = 136 (十进制)</p>\n<h2 id=\"滴水课件\"><a class=\"anchor\" href=\"#滴水课件\">#</a> 滴水课件</h2>\n<p>解析说明：</p>\n<p>1、通过 IMAGE_DATA_DIRECTORY 结构的 VirtualAddress<br />\n 属性 找到第一个 IMAGE_BASE_RELOCATION</p>\n<p>2、判断一共有几块数据：</p>\n<p>最后一个结构的 VirtualAddress 与 SizeOfBlock 都为 0</p>\n<p>3、具体项 宽度：2 字节</p>\n<p>也就是这个数据</p>\n<p>内存中的页大小是 1000H 也就是说 2 的 12 次方 就可以表示<br />\n一个页内所有的偏移地址 具体项的宽度是 16 字节 高四位<br />\n代表类型：值为 3 代表的是需要修改的数据 值为 0 代表的是<br />\n用于数据对齐的数据，可以不用修改。也就是说 我们只关注<br />\n高 4 位的值为 3 的就可以了.</p>\n<p>4、VirtualAddress 宽度：4 字节</p>\n<p>当前这一个块的数据，每一个低 12 位的值 + VirtualAddress 才是<br />\n真正需要修复的数据的 RVA</p>\n<p>真正的 RVA = VirtualAddress + 具体项的低 12 位</p>\n<p>5、SizeOfBlock 宽度：4 字节</p>\n<p>当前块的总大小</p>\n<p>具体项的数量 = (SizeOfBlock - 8)/2</p>\n<h1 id=\"重定位表的利用\"><a class=\"anchor\" href=\"#重定位表的利用\">#</a> 重定位表的利用</h1>\n<ol>\n<li>破解</li>\n</ol>\n<blockquote>\n<p>壳 写加密壳的时候，要先把重定位表移走。数据目录中的表是分散在各个节里的，如果对节进行加密，操作系统找不到表，就无法加载程序。因此加密前要先把表移动到新的节里。</p>\n</blockquote>\n<ol start=\"2\">\n<li>辅助</li>\n</ol>\n<blockquote>\n<p>对抗 HOOK，内核重载时。</p>\n</blockquote>\n<h1 id=\"reference\"><a class=\"anchor\" href=\"#reference\">#</a> Reference</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vaUJpbmFyeS9wLzk3NDI2NzAuaHRtbA==\">https://www.cnblogs.com/iBinary/p/9742670.html</span><br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Fwb2xsb25fa3JqL2FydGljbGUvZGV0YWlscy83NzM3MDQ1Mg==\">https://blog.csdn.net/Apollon_krj/article/details/77370452</span><br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwODkwNzU2L2FydGljbGUvZGV0YWlscy85MDA4MDg4MA==\">https://blog.csdn.net/qq_40890756/article/details/90080880</span><br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3R1dHVjb28vYXJ0aWNsZS9kZXRhaWxzLzgzODI4NzEz\">https://blog.csdn.net/tutucoo/article/details/83828713</span></p>\n",
            "tags": [
                "重定位表"
            ]
        }
    ]
}