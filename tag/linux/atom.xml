<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://Or0kit.github.io</id>
    <title>Or0kit • Posts by &#34;linux&#34; tag</title>
    <link href="https://Or0kit.github.io" />
    <updated>2021-04-20T14:26:01.000Z</updated>
    <category term="Algolia" />
    <category term="Drozer" />
    <category term="同义词替换" />
    <category term="xpath" />
    <category term="win32api" />
    <category term="WOW64" />
    <category term="windows消息机制" />
    <category term="虚拟内存" />
    <category term="jsDelivr" />
    <category term="First blog" />
    <category term="markdown 学习" />
    <category term="Android" />
    <category term="替换密钥" />
    <category term="数论基础" />
    <category term="ADB" />
    <category term="雷电模拟器" />
    <category term="Hadoop" />
    <category term="IDA" />
    <category term="Windows逆向" />
    <category term="SSH隧道" />
    <category term="url" />
    <category term="http" />
    <category term="应急响应" />
    <category term="Nginx" />
    <category term="Linux" />
    <category term="CentOS7配置vsftp" />
    <category term="Psad" />
    <category term="fwsnort" />
    <category term="x86汇编指令" />
    <category term="动态分析技术基础" />
    <category term="静态分析基础" />
    <category term="逆向" />
    <category term="IDA学习" />
    <category term="恶意代码分析实战入门" />
    <category term="加壳" />
    <category term="脱壳" />
    <category term="C++壳" />
    <category term="ESP寻址" />
    <category term="定位Win32窗口回调函数" />
    <category term="HOOK攻防" />
    <category term="瞬时HOOK过检测" />
    <category term="INLINE-HOOK" />
    <category term="IAT HOOK" />
    <category term="INLINE HOOK" />
    <category term="进程监控" />
    <category term="模块隐藏" />
    <category term="进程通信" />
    <category term="tlhelp32.h" />
    <category term="进程遍历" />
    <category term="模块遍历" />
    <category term="外挂原理" />
    <category term="DLL注入之进程间通信" />
    <category term="TEB" />
    <category term="PEB" />
    <category term="R3层断链" />
    <category term="Win临界区" />
    <category term="Win事件" />
    <category term="线程同步" />
    <category term="Win互斥体" />
    <category term="内存映射文件" />
    <category term="内存映射共享" />
    <category term="写拷贝" />
    <category term="Win子窗口控件" />
    <category term="win32文件函数" />
    <category term="代码注入" />
    <category term="窗口程序" />
    <category term="消息机制" />
    <category term="消息类型" />
    <category term="私有内存" />
    <category term="共享内存" />
    <category term="设备对象" />
    <category term="DC设备上下文" />
    <category term="图形对象" />
    <category term="创建线程" />
    <category term="线程控制" />
    <category term="线程相关API" />
    <category term="线程上下文" />
    <category term="CONTEXT结构体" />
    <category term="物理内存" />
    <category term="Windows进程" />
    <category term="句柄表" />
    <category term="远程线程函数" />
    <category term="远程线程" />
    <category term="DLL注入" />
    <category term="DLL注入相关函数" />
    <category term="WinMain函数" />
    <category term="调用约定" />
    <category term="我的GetProcAddress" />
    <category term="资源文件" />
    <category term="消息断点" />
    <category term="PE课后作业" />
    <category term="通用控件" />
    <category term="WM_NOTIFY消息类型" />
    <category term="MFC" />
    <category term="PE查看器" />
    <category term="RVA与FOA" />
    <category term="PE结构" />
    <category term="DOS头属性说明" />
    <category term="标准PE头属性说明" />
    <category term="扩展PE头属性说明" />
    <category term="节表属性说明" />
    <category term="空白区添加代码" />
    <category term="合并节" />
    <category term="导入表" />
    <category term="注入" />
    <category term="导入表注入" />
    <category term="导出表" />
    <category term="扩大节" />
    <category term="新增节" />
    <category term="移动NT头" />
    <category term="移动导出表" />
    <category term="移动重定位表" />
    <category term="重定位表" />
    <category term="静态链接库" />
    <category term="动态链接库" />
    <category term="句柄" />
    <category term="CobaltStrike" />
    <category term="RedTeam" />
    <category term="Apeache" />
    <category term="php" />
    <category term="Nmap" />
    <category term="guestbook" />
    <category term="SQLmap" />
    <category term="apache" />
    <category term="log" />
    <category term="mysql主键" />
    <category term="CSRF" />
    <category term="SSRF" />
    <category term="业务逻辑漏洞" />
    <category term="xss" />
    <category term="webshell流量特征" />
    <category term="虚拟网卡" />
    <category term="button" />
    <category term="单选框" />
    <category term="复选框件" />
    <category term="Edit" />
    <category term="Combo Box" />
    <category term="Tab" />
    <category term="ListCtrl" />
    <category term="MFC的本质" />
    <category term="MFC的层次结构图" />
    <category term="手动创建一个MFC程序" />
    <category term="MFC的初始化过程" />
    <category term="MFC运行时类型识别" />
    <category term="关键字static" />
    <category term="关键字const" />
    <category term="MFC动态创建" />
    <category term="MFC消息映射" />
    <category term="结构体AFX_MSGMAP_ENTRY" />
    <category term="结构体AFX_MSGM" />
    <category term="MFC的三大类消息" />
    <category term="数据传输" />
    <category term="ini文件的读写" />
    <category term="python" />
    <category term="SSH" />
    <category term="python文件读取" />
    <category term="数据分析" />
    <category term="socket" />
    <category term="数据库编程" />
    <category term="python内置属性" />
    <category term="multiprocessing" />
    <category term="threading" />
    <category term="scrapy" />
    <category term="测试" />
    <category term="BHP" />
    <category term="Python的import功能" />
    <category term="木马" />
    <category term="非可变序列算法" />
    <category term="可变序列算法" />
    <category term="排序算法" />
    <category term="迭代器" />
    <category term="使用自定义对象" />
    <category term="0环与3环的通信（常规方法）" />
    <category term="内核空间" />
    <category term="内核模块" />
    <category term="遍历内核模块" />
    <category term="定位未导出函数PspTiminateProcess" />
    <category term="内核编程基础" />
    <category term="ANSI_STRING" />
    <category term="UNICODE_STRING" />
    <category term="内核内存" />
    <category term="上下文环境" />
    <category term="中断请求级别" />
    <category term="链表" />
    <category term="自旋锁" />
    <category term="注册表" />
    <category term="地址空间" />
    <category term="文件操作" />
    <category term="线程与事件" />
    <category term="内核重载" />
    <category term="配置VS2019+WDK10" />
    <category term="第一个驱动程序" />
    <category term="驱动调试" />
    <category term="调试驱动程序" />
    <category term="OpenSCManager" />
    <category term="CreateService" />
    <category term="APC的本质" />
    <category term="APC的备用队列" />
    <category term="线性地址的管理" />
    <category term="VAD树" />
    <category term="_MMVAD" />
    <category term="_MMVAD_FLAGS" />
    <category term="共享物理页" />
    <category term="共享文件" />
    <category term="LoadLibrary的本质" />
    <category term="VirtualAlloc" />
    <category term="MEM_COMMIT与MEM_RESERVE" />
    <category term="malloc" />
    <category term="堆内存" />
    <category term="栈内存" />
    <category term="全局区内存" />
    <category term="MmAddPhysicalMemoryEx" />
    <category term="缺页异常" />
    <category term="消息队列" />
    <category term="PsConvertToGuiThread" />
    <category term="win32k.sys" />
    <category term="GUI线程" />
    <category term="窗口程序的创建" />
    <category term="消息循环" />
    <category term="临界区" />
    <category term="KPCR结构体" />
    <category term="模拟线程切换" />
    <category term="模拟挂起与恢复函数" />
    <category term="等待链表" />
    <category term="调度链表" />
    <category term="ETHREAD" />
    <category term="KTHREAD" />
    <category term="进程的创建" />
    <category term="获取当前进程" />
    <category term="EPROCESS" />
    <category term="KPROCESS" />
    <category term="2-9-9-12分页" />
    <category term="PAE" />
    <category term="PDPTE" />
    <category term="PDE" />
    <category term="PTE" />
    <category term="XD标志位" />
    <category term="逆向分析MmIsAddressValid函数(2-9-9-12)" />
    <category term="TLB" />
    <category term="INVLPG指令" />
    <category term="全局页" />
    <category term="ShadowWalker" />
    <category term="PWT" />
    <category term="PDT" />
    <category term="CPU缓存" />
    <category term="中断" />
    <category term="异常" />
    <category term="CLI指令" />
    <category term="STI指令" />
    <category term="INT2" />
    <category term="INT8" />
    <category term="中断门描述符" />
    <category term="IDT" />
    <category term="提权" />
    <category term="跨段跳转流程" />
    <category term="JMP FAR指令" />
    <category term="TSS" />
    <category term="任务门" />
    <category term="LDT段描述符" />
    <category term="LDT" />
    <category term="CR0" />
    <category term="CR2" />
    <category term="CR4" />
    <category term="CRL" />
    <category term="DPL" />
    <category term="RPL" />
    <category term="段寄存器结构" />
    <category term="段描述符" />
    <category term="段选择子" />
    <category term="GDT表" />
    <category term="调用门" />
    <category term="调用门描述符" />
    <category term="逆向分析MmIsAddressValid函数" />
    <category term="error C2143" />
    <category term="error C2275" />
    <category term="CALL与CALL FAR" />
    <category term="陷阱门描述符" />
    <category term="10-10-12分页" />
    <category term="页目录表基址" />
    <category term="页表的基址" />
    <category term="0地址执行ShellCode" />
    <category term="PDE_PTE" />
    <category term="物理页" />
    <category term="SSDT HOOK" />
    <category term="OpenProcess" />
    <category term="系统服务表" />
    <category term="SSDT" />
    <category term="SSDT HOOK隐藏" />
    <category term="API进出内核" />
    <category term="系统调用阶段总结" />
    <category term="网络安全法" />
    <category term="ASCII" />
    <category term="GBK" />
    <category term="ANSI" />
    <category term="Unicode" />
    <category term="UTF-8" />
    <category term="URL 编码/解码" />
    <category term="十进制" />
    <category term="二进制" />
    <category term="十六进制" />
    <category term="内存" />
    <category term="x64" />
    <category term="编写ShellCode实现IAT HOOK" />
    <category term="ShellCode原则" />
    <category term="傀儡进程加密壳" />
    <category term="ZwUnmapViewOfSection函数" />
    <category term="加载图标" />
    <category term="提取图标" />
    <category term="资源表" />
    <category term="HTML" />
    <category term="文件包含" />
    <category term="sql注入" />
    <category term="MFC命令传递" />
    <category term="远控界面编写" />
    <category term="STL" />
    <category term="Vector容器" />
    <category term="Deque容器" />
    <category term="List容器" />
    <category term="Set容器" />
    <category term="Multiset容器" />
    <category term="Map容器" />
    <category term="Multimap容器" />
    <category term="Stack容器" />
    <category term="Queue容器" />
    <category term="priority_queue容器" />
    <category term="经典定长指令" />
    <category term="经典变长指令" />
    <category term="指令前缀" />
    <category term="串口" />
    <category term="过滤" />
    <category term="键盘过滤" />
    <category term="KAPC" />
    <category term="QueueUserAPC" />
    <category term="NtQueueApcThread" />
    <category term="KeInitializeApc" />
    <category term="KeInsertQueueApc" />
    <category term="KiInsertQueueApc" />
    <category term="进程句柄表" />
    <category term="全局句柄表" />
    <category term="消息队列与线程" />
    <category term="Windows线程切换" />
    <category term="KiSwapContext" />
    <category term="SwapContext" />
    <category term="时钟中断" />
    <category term="时间片管理" />
    <category term="线程切换与TSS" />
    <category term="线程切换与FS" />
    <category term="线程切换与线程优先级" />
    <category term="快速调用" />
    <category term="中断调用" />
    <category term="分析ReadProcessMemory" />
    <category term="KiFastSystemCall" />
    <category term="KiIntSystemCall" />
    <category term="重写3环" />
    <category term="文件上传" />
    <category term="隐藏驱动" />
    <category term="IopLoadDriver" />
    <category term="延迟过程调用" />
    <category term="进程挂靠" />
    <category term="跨进程读写内存" />
    <category term="APC" />
    <category term="逆向分析NtReadVirtualMemory" />
    <category term="逆向分析NtWriteVIrtualMemory" />
    <category term="AD-Attack-Defense" />
    <category term="payload" />
    <category term="sysenter指令" />
    <category term="KiFastCallEntry函数" />
    <category term="KiSystemService函数" />
    <category term="Trap_Frame" />
    <category term="web安全" />
    <category term="Pentest" />
    <category term="磁盘虚拟" />
    <category term="PDO" />
    <category term="Windows中从击键到内核的过程" />
    <category term="KEYBOARD_INPUT_DATA结构" />
    <category term="IRP完成回调函数" />
    <category term="DriverEntry函数的定义" />
    <category term="WDF_DRIVER_CONFIG结构" />
    <category term="EvtDriverDeviceAdd函数" />
    <category term="FAT12/16磁盘卷" />
    <category term="磁盘的过滤" />
    <category term="具有还原功能的磁盘卷过滤驱动" />
    <category term="文件系统" />
    <category term="Minifilter" />
    <category term="boot驱动" />
    <category term="bitmap" />
    <entry>
        <id>https://or0kit.github.io/Linux/Linux%E4%B8%AD%E7%9A%84su%E4%B8%8Esu-%E5%91%BD%E4%BB%A4%E7%9A%84%E5%8C%BA%E5%88%AB/</id>
        <title>Linux中的su与su -命令的区别</title>
        <link rel="alternate" href="https://or0kit.github.io/Linux/Linux%E4%B8%AD%E7%9A%84su%E4%B8%8Esu-%E5%91%BD%E4%BB%A4%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
        <content type="html">&lt;h1 id=&#34;reference&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#reference&#34;&gt;#&lt;/a&gt; Reference&lt;/h1&gt;
&lt;p&gt;详情见&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3d3dy5oYTk3LmNvbS80MDAxLmh0bWw=&#34;&gt; http://www.ha97.com/4001.html&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;区别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#区别&#34;&gt;#&lt;/a&gt; 区别&lt;/h2&gt;
&lt;p&gt;su 命令和 su - 命令最大的本质区别就是：前者只是切换了 root 身份，但 Shell 环境仍然是普通用户的 Shell；而后者连用户和 Shell 环境一起切换成 root 身份了。只有切换了 Shell 环境才不会出现 PATH 环境变量错误。su 切换成 root 用户以后，pwd 一下，发现工作目录仍然是普通用户的工作目录；而用 su - 命令切换以后，工作目录变成 root 的工作目录了。用 echo $PATH 命令看一下 su 和 su - 以后的环境变量有何不同。以此类推，要从当前用户切换到其它用户也一样，应该使用 su - 命令。&lt;/p&gt;
</content>
        <category term="Linux" />
        <updated>2021-04-20T14:26:01.000Z</updated>
    </entry>
    <entry>
        <id>https://or0kit.github.io/Linux/linux%E8%BF%9B%E9%98%B6/</id>
        <title>linux进阶学习</title>
        <link rel="alternate" href="https://or0kit.github.io/Linux/linux%E8%BF%9B%E9%98%B6/"/>
        <content type="html">&lt;h1 id=&#34;网络配置&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#网络配置&#34;&gt;#&lt;/a&gt; 网络配置&lt;/h1&gt;
&lt;h2 id=&#34;ifconfig-详解&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ifconfig-详解&#34;&gt;#&lt;/a&gt; ifconfig 详解&lt;/h2&gt;
&lt;p&gt;ifconfig 命令可以显示或配置网络设备 (网络接口卡) , 也可以修改这些配置。&lt;br /&gt;
用 ifconfig 命令配置的网卡信息，在网卡重启后机器重启后，配置就不存在。要想将上述的配置信息永久保存，那就要修改网卡的配置文件了。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image001.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;DEVICE=“ens33” 　　# 网卡名称&lt;br /&gt;
 // UP：表示 “接口已启用”。&lt;br /&gt;
// BROADCAST ：表示 “主机支持广播”。&lt;br /&gt;
// RUNNING：表示 “接口在工作中”。&lt;br /&gt;
// MULTICAST：表示 “主机支持多播”。&lt;br /&gt;
// MTU:1500（最大传输单元）：1500 字节&lt;br /&gt;
 //inet ：网卡的 IP 地址。&lt;br /&gt;
//netmask ：网络掩码。&lt;br /&gt;
//broadcast ：广播地址。&lt;br /&gt;
// 网卡的 IPv6 地址&lt;br /&gt;
 // 连接类型：Ethernet (以太网) HWaddr (硬件 mac 地址)&lt;br /&gt;
//txqueuelen (网卡设置的传送队列长度)&lt;br /&gt;
// RX packets 接收时，正确的数据包数。&lt;br /&gt;
// RX bytes 接收的数据量。&lt;br /&gt;
// RX errors 接收时，产生错误的数据包数。&lt;br /&gt;
// RX dropped 接收时，丢弃的数据包数。&lt;br /&gt;
// RX overruns 接收时，由于速度过快而丢失的数据包数。&lt;br /&gt;
// RX frame 接收时，发生 frame 错误而丢失的数据包数。&lt;br /&gt;
// TX packets 发送时，正确的数据包数。&lt;br /&gt;
// TX bytes 发送的数据量。&lt;br /&gt;
// TX errors 发送时，产生错误的数据包数。&lt;br /&gt;
// TX dropped 发送时，丢弃的数据包数。&lt;br /&gt;
// TX overruns 发送时，由于速度过快而丢失的数据包数。&lt;br /&gt;
// TX carrier 发送时，发生 carrier 错误而丢失的数据包数。&lt;br /&gt;
//collisions 冲突信息包的数目。&lt;/p&gt;
&lt;p&gt;lo: 表示主机的回坏地址，这个一般是用来测试一个网络程序，但又不想让局域网或外网的用户能够查看，只能在此台主机上运行和查看所用的网络接口。&lt;/p&gt;
&lt;p&gt;ifconfig 的配置针对当前起作用，, 当服务器进行重启启动，配置的 IP 和掩码等信息都会丢失因为 ifconfig 的没有把配置写入到配置文件，当系统重新启动中，会重新加载网络配置文件，因此配置会丢失&lt;/p&gt;
&lt;p&gt;ifconfig 命令 参数具体见&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9saW51eC9saW51eC1jb21tLWlmY29uZmlnLmh0bWw=&#34;&gt; https://www.runoob.com/linux/linux-comm-ifconfig.html&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;网络配置文件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#网络配置文件&#34;&gt;#&lt;/a&gt; 网络配置文件&lt;/h2&gt;
&lt;p&gt;网络接口配置文件均存放在 /etc/sysconfig/network-scripts/ 目录下&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;span&gt;h&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;root@node ~&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;# cat /etc/sysconfig/network-scripts/ifcfg-ens33 &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token assign-left variable&#34;&gt;TYPE&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;Ethernet&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token assign-left variable&#34;&gt;PROXY_METHOD&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;none&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token assign-left variable&#34;&gt;BROWSER_ONLY&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;no&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token assign-left variable&#34;&gt;BOOTPROTO&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;none&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token assign-left variable&#34;&gt;DEFROUTE&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;yes&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token assign-left variable&#34;&gt;IPV4_FAILURE_FATAL&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;no&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token assign-left variable&#34;&gt;IPV6INIT&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;yes&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token assign-left variable&#34;&gt;IPV6_AUTOCONF&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;yes&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token assign-left variable&#34;&gt;IPV6_DEFROUTE&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;yes&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token assign-left variable&#34;&gt;IPV6_FAILURE_FATAL&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;no&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token assign-left variable&#34;&gt;IPV6_ADDR_GEN_MODE&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;stable-privacy&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token assign-left variable&#34;&gt;NAME&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;ens33&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token assign-left variable&#34;&gt;UUID&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;3693f084-6c9a-4b4e-82ef-62377f4c3502&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token assign-left variable&#34;&gt;DEVICE&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;ens33&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token assign-left variable&#34;&gt;ONBOOT&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;yes&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token assign-left variable&#34;&gt;IPADDR&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;192.168&lt;/span&gt;.10.100&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token assign-left variable&#34;&gt;PREFIX&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;24&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token assign-left variable&#34;&gt;GATEWAY&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;192.198&lt;/span&gt;.10.1&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#################################&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;下面介绍改配置文件中的每一行的含义。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#################################&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token assign-left variable&#34;&gt;DEVICE&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;:网卡设备名&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token assign-left variable&#34;&gt;HWADDR&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;:网卡的物理地址&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token assign-left variable&#34;&gt;TYPE&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;:网卡的类型&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token assign-left variable&#34;&gt;UUID&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;:网卡的UUID&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token assign-left variable&#34;&gt;IPADDR&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;:IP地址&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token assign-left variable&#34;&gt;NETMASK&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;:子网掩码&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token assign-left variable&#34;&gt;GATEWAY&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;:网关&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token assign-left variable&#34;&gt;DNS1&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;:DNS&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token assign-left variable&#34;&gt;ONBOOT&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;:该网卡是否激活&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token assign-left variable&#34;&gt;NM_CONTROLLED&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;:网络是否由NetworkManager进行管理&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;34&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token assign-left variable&#34;&gt;BOOTPROTO&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;：启动远程协议为静态设置&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;路由的查看及配置&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#路由的查看及配置&#34;&gt;#&lt;/a&gt; 路由的查看及配置&lt;/h2&gt;
&lt;p&gt;路由 (route) 就是分组在因特网上从一台计算机传输到另一台计算机的实际路径。&lt;br /&gt;
因特网上的每个路由器都存储有一张表，称为路由表 (routing table), 路由器正是依据路由表的内容将各个 IP 分组转发到正确的去处。&lt;/p&gt;
&lt;p&gt;路由，路由器，路由表的区别:&lt;/p&gt;
&lt;p&gt;路由：既可以指计算机之间的传输路径，又可以指传输这一动态过程&lt;br /&gt;
路由器：设备，即完成路由这一动态过程的设备&lt;br /&gt;
路由表：信息，是储存在路由器中的用来路由的信息&lt;/p&gt;
&lt;p&gt;查看路由命令：&lt;br /&gt;
 &lt;code&gt;netstat -r&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;route -n&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image002.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;查看本机路由信息&lt;br /&gt;
 &lt;code&gt;route -n&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;添加一条默认路由，临时生效 (重启后就会失效)&lt;br /&gt;
 &lt;code&gt;route add default qw 192.168.10.1&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;删除一条默认路由&lt;br /&gt;
 &lt;code&gt;route del default gw 192.168.10.1&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;添加一条静态路由，发往 192.168.8.62 这个网段的全部要经过网关 192.168.1.1&lt;br /&gt;
 &lt;code&gt;route add-net 192.168.8.0 netmask 255.255.255.0 gw 192.168.1.1&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;删除一条静态路由，删除的时候可以不写网关&lt;br /&gt;
 &lt;code&gt;route del -net 192.168.8.0 netmask 255.255.255.0 gw 192.168.1.1&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;设置包转发功能:&lt;/p&gt;
&lt;p&gt;开启 Liunx 的路由转发功能:&lt;br /&gt;
 编辑 /etc/sysctl.conf 设置 net.pv4.p forward=1&lt;/p&gt;
&lt;p&gt;临时配置：&lt;br /&gt;
 &lt;code&gt;echo &amp;quot;1&amp;quot; &amp;gt; /proc/sys/net/ipv4/ip_forward&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;dns&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#dns&#34;&gt;#&lt;/a&gt; DNS&lt;/h2&gt;
&lt;p&gt;Linux 下查看本地的 DNS:&lt;br /&gt;
1.cat /etc/resolv.conf&lt;br /&gt;
2.nslookup &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3d3dy5iYWlkdS5jb20=&#34;&gt;www.baidu.com&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image003.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;dns-查询工具&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#dns-查询工具&#34;&gt;#&lt;/a&gt; DNS 查询工具&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;nslookup 是一个能够查询互联网域名服务器信息的程序。&lt;br /&gt;
他有两种工作模式，即 &amp;quot;交互模式&amp;quot; 和 &amp;quot;非交互模式&amp;quot;&lt;br /&gt;
在&amp;quot; 交互模式 &amp;quot; 下，用户可以向域名服务器查询各类主机、域名的信息，或者输出域名中的主机列表。&lt;br /&gt;
而在 “非交互模式 &amp;quot; 下，用户可以针对一个主机或域名仅仅获取特定的名称或所需信息。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Dig 是一个在类 Unix 命令行模式下查询 DNS 包括 NSi 录，A 记录，MX 记录等相关信息的工具。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;dig 命令:&lt;br /&gt;
 查询一台主机，但是默认情况下，Dig 的输出信息很详细&lt;br /&gt;
最常用的查询是 A 记录，TXT (文本注释) , MXi 录，NS 记录&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image004.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;dns域名解析中添加的各项解析记录&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#dns域名解析中添加的各项解析记录&#34;&gt;#&lt;/a&gt; DNS 域名解析中添加的各项解析记录&lt;/h3&gt;
&lt;p&gt;A 记录： 将域名指向一个 IPv4 地址（例如：100.100.100.100），需要增加 A 记录&lt;/p&gt;
&lt;p&gt;CNAME 记录： 如果将域名指向一个域名，实现与被指向域名相同的访问效果，需要增加 CNAME 记录。这个域名一般是主机服务商提供的一个域名&lt;/p&gt;
&lt;p&gt;MX 记录： 建立电子邮箱服务，将指向邮件服务器地址，需要设置 MX 记录。建立邮箱时，一般会根据邮箱服务商提供的 MX 记录填写此记录&lt;/p&gt;
&lt;p&gt;NS 记录： 域名解析服务器记录，如果要将子域名指定某个域名服务器来解析，需要设置 NS 记录&lt;/p&gt;
&lt;p&gt;TXT 记录： 可任意填写，可为空。一般做一些验证记录时会使用此项，如：做 SPF（反垃圾邮件）记录&lt;/p&gt;
&lt;p&gt;AAAA 记录： 将主机名（或域名）指向一个 IPv6 地址（例如：ff03:0:0:0:0:0:0:c1），需要添加 AAAA 记录&lt;/p&gt;
&lt;p&gt;SRV 记录： 添加服务记录服务器服务记录时会添加此项，SRV 记录了哪台计算机提供了哪个服务。格式为：服务的名字。协议的类型（例如：_example-server._tcp）。&lt;/p&gt;
&lt;p&gt;SOA 记录： SOA 叫做起始授权机构记录，NS 用于标识多台域名解析服务器，SOA 记录用于在众多 NS 记录中那一台是主服务器&lt;/p&gt;
&lt;p&gt;PTR 记录： PTR 记录是 A 记录的逆向记录，又称做 IP 反查记录或指针记录，负责将 IP 反向解析为域名&lt;/p&gt;
&lt;p&gt;显性 URL 转发记录： 将域名指向一个 http (s) 协议地址，访问域名时，自动跳转至目标地址。例如：将 www.liuht.cn 显性转发到 www.itbilu.com 后，访问 www.liuht.cn 时，地址栏显示的地址为：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3d3dy5pdGJpbHUuY29t&#34;&gt;www.itbilu.com&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;隐性 UR 转发记录 L： 将域名指向一个 http (s) 协议地址，访问域名时，自动跳转至目标地址，隐性转发会隐藏真实的目标地址。例如：将 www.liuht.cn 显性转发到 www.itbilu.com 后，访问 www.liuht.cn 时，地址栏显示的地址仍然是：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3d3dy5saXVodC5jbg==&#34;&gt;www.liuht.cn&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Reference:&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vYmx1ZXN0b3JtL3AvMTAzNDUzMzQuaHRtbA==&#34;&gt;https://www.cnblogs.com/bluestorm/p/10345334.html&lt;/span&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h1 id=&#34;iptables详解&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#iptables详解&#34;&gt;#&lt;/a&gt; iptables 详解&lt;/h1&gt;
&lt;h2 id=&#34;防火墙类型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#防火墙类型&#34;&gt;#&lt;/a&gt; 防火墙类型&lt;/h2&gt;
&lt;h3 id=&#34;包过滤防火墙&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#包过滤防火墙&#34;&gt;#&lt;/a&gt; 包过滤防火墙&lt;/h3&gt;
&lt;p&gt;在 Linux 系统下，包过滤功能是内建于核心的 (作为一个核心模块，或者直接内建) , 同时还有一些可以运用于数据包之上的技巧，不过最常用的依然是查看包头以决定包的命运。包过滤防火墙将对每一个接收到的包做出允许或拒绝的决定。具体地讲，它针对每一个数据包的包头，按照包过滤规则进行判定，与规则相匹配的包依据路由信息继续转发，否则就丢弃。包过滤是在 IP 层实现的，包过滤根据数据包的源 P 地址、目的 IP 地址、协议类型 (TCP 包 UDP 包、ICMP 包)、源端口、目的端口等包头信息及数据包传输方向等信息来判断是否允许数据包通过。 包过滤也包括与服务相关的过滤，这是指基于特定的服务进行包过滤，由于绝大多数服务的监听都驻留在特定 TCP/UDP 端口，因此，为阻断所有进入特定服务的链接，防火墙只需将所有包含特定 TCP/UDP 目的端口的包丢弃即可&lt;/p&gt;
&lt;h3 id=&#34;状态检测防火墙&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#状态检测防火墙&#34;&gt;#&lt;/a&gt; 状态检测防火墙&lt;/h3&gt;
&lt;p&gt;状态检测防火墙在网络层有一个检查引擎截获数据包并抽取出与应用层状态有关的信息，并以此为依据决定对该连接是接受还是拒绝。这种技术提供了高度安全的解决方案，同时具有较好的适应性和扩展性。状态检测防火墙基本保持了简单包过滤防火墙的优点，性能比较好，同时对应用是透明的，在此基础上，对于安全性有了大幅提升。这种防火墙摒弃了简单包过滤防火墙仅仅考察进出网络的数据包，不关心数据包状态的缺点，在防火墙的核心部分建立状态连接表，维护了连接，将进出网络的数据当成一个个的事件来处理。可以这样说，状态检测包过滤防火墙规范了网络层和传输层行为，而应用代理型防火墙则是规范了特定的应用协议上的行为。&lt;/p&gt;
&lt;h2 id=&#34;iptables介绍&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#iptables介绍&#34;&gt;#&lt;/a&gt; iptables 介绍&lt;/h2&gt;
&lt;p&gt;netfilter/iptables (简称为 iptables) 组成 Linux 平台下的包过滤防火墙，与大多数的 Linux 软件一样，这个包过滤防火墙是免费的，它可以代替昂贵的商业防火墙解决方案，完成封包过滤、封包重定向和网络地址转换 (NAT) 等功能。&lt;/p&gt;
&lt;p&gt;其实 iptables 服务不是真正的防火墙，只是用来定义防火墙规则功能的 &amp;quot;防火墙管理工具&amp;quot;, 将定义好的规则交由内核中的 netfilter 即网络过滤器来读取，从而真正实现防火墙功能。&lt;/p&gt;
&lt;h2 id=&#34;iptables基本信息&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#iptables基本信息&#34;&gt;#&lt;/a&gt; iptables 基本信息&lt;/h2&gt;
&lt;p&gt;规则 (rules) 其实就是网络管理员预定义的条件，规则一般的定义为 &amp;quot;如果数据包头符合这样的条件，就这样处理这个数据包&amp;quot;&lt;/p&gt;
&lt;p&gt;规则存储在内核空间的信息包过滤表中，这些规则分别指定了源地址、目的地址、传输协议 (如 TCP, UDP,ICMP) 和服务类型 (如 HTTP, FTP 和 SMTP) 等。&lt;/p&gt;
&lt;p&gt;当数据包与规则匹配时，iptables 就根据规则所定义的方法来处理这些数据包，如放行 (accept) 、拒绝 (reject) 和丢弃 (drop) 等。&lt;/p&gt;
&lt;p&gt;配置防火墙的主要工作就是添加、修改和删除这些规则。&lt;/p&gt;
&lt;h2 id=&#34;表与链介绍&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#表与链介绍&#34;&gt;#&lt;/a&gt; 表与链介绍&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;表 (tables) 提供特定的功能，iptables 内置了 4 个表，即 filter 表、nat 表、mangle 表和 raw 表，分别用于实现包过滤，网络地址转换、包重构 (修改) 和数据跟踪处理，这些表具有一定的优先级: raw--&amp;gt;mangle--&amp;gt;nat--&amp;gt;filter&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;链 (chains) 是数据包传播的路径，每一条链其实就是众多规则中的一个检查清单，每一条链中可以有一条或数条规则。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;规则链&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#规则链&#34;&gt;#&lt;/a&gt; 规则链&lt;/h2&gt;
&lt;h3 id=&#34;一些需要知道的规则链&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#一些需要知道的规则链&#34;&gt;#&lt;/a&gt; 一些需要知道的规则链&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;INPUT - 进来的数据包应用此规则链中的策略&lt;/li&gt;
&lt;li&gt;OUTPUT - 外出的数据包应用此规则链中的策略&lt;/li&gt;
&lt;li&gt;FORWARD - 转发数据包时应用此规则链中的策略&lt;/li&gt;
&lt;li&gt;PREROUTING - 对数据包作路由选择前应用此链中的规则 (记住！所有的数据包进来的时候都先由这个链处理)&lt;/li&gt;
&lt;li&gt;POSTROUTING - 对数据包作路由选择后应用此链中的规则 (所有的数据包出来的时候都先由这个链处理)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;span class=&#34;label&#34;&gt;完整的规则链&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image005.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;规则表的先后顺序:&lt;br /&gt;
raw-&amp;gt;mangle-&amp;gt;nat-&amp;gt;filter&lt;/p&gt;
&lt;p&gt;规则链的先后顺序:&lt;br /&gt;
 入站顺序 PREROUTING-&amp;gt;INPUT&lt;br /&gt;
 出站顺序：OUTPUT-&amp;gt;POSTROUTING&lt;br /&gt;
 转发顺序：PREROUTING-&amp;gt;FORWARD-&amp;gt;POSTROUTING&lt;/p&gt;
&lt;h2 id=&#34;iptables传输数据包的过程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#iptables传输数据包的过程&#34;&gt;#&lt;/a&gt; iptables 传输数据包的过程&lt;/h2&gt;
&lt;p&gt;当一个数据包进入网卡时，它首先进入 PREROUTING 链，内核根据数据包目的 IP 判断是否需要转送出去。&lt;/p&gt;
&lt;p&gt;如果数据包就是进入本机的，它就会向下移动，到达 INPUT 链。数据包到了 INPUT 链后，任何进程都会收到它。本机上运行的程序可以发送数据包，这些数据包会经过 OUTPUT 链，然后到达 POSTROUTING 链输出。&lt;/p&gt;
&lt;p&gt;如果数据包是要转发出去的，且内核允许转发，数据包就会经过 FORWARD 链，然后到达 POSTROUTING 链输出。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image006.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;iptables命令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#iptables命令&#34;&gt;#&lt;/a&gt; iptables 命令&lt;/h2&gt;
&lt;p&gt;iptables 格式:&lt;br /&gt;
iptables [-t 表名] 选项 [链名] [条件] [-j 控制类型]&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image007.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;详细解释见&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vdmF0aGUvcC82OTczNjU2Lmh0bWw=&#34;&gt; https://www.cnblogs.com/vathe/p/6973656.html&lt;/span&gt;&lt;br /&gt;
 有人总结的挺全的就不造轮子了（懒）。&lt;/p&gt;
&lt;h2 id=&#34;iptables常识与常用命令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#iptables常识与常用命令&#34;&gt;#&lt;/a&gt; iptables 常识与常用命令&lt;/h2&gt;
&lt;p&gt;CentOS7 默认的防火墙不是 iptables, 而是 firewalle.&lt;br /&gt;
 如果你没有安装 iptables 的话，你可以使用以下命令进行安装&lt;br /&gt;
 systemctl stop firewalld&lt;br /&gt;
systemctl disable firewalld&lt;br /&gt;
systemctl mask firewalld&lt;br /&gt;
 上面的意思是先屏蔽掉原有的 firewall 防火墙，下面我们就开始安装 iptables，至于为什么要安装 IPtables 我就不讲了&lt;br /&gt;
 yum install iptables iptables-services -y&lt;/p&gt;
&lt;p&gt;设置规则&lt;br /&gt;
 #查看 iptables 现有规则&lt;br /&gt;
 iptables -L -n&lt;br /&gt;
# 先允许所有，不然有可能会杯具&lt;br /&gt;
 iptables -P INPUT ACCEPT&lt;br /&gt;
# 清空所有默认规则&lt;br /&gt;
 iptables -F&lt;br /&gt;
# 清空所有自定义规则&lt;br /&gt;
 iptables -X&lt;br /&gt;
# 所有计数器归 0&lt;br /&gt;
iptables -Z&lt;br /&gt;
# 允许来自于 lo 接口的数据包 (本地访问)&lt;br /&gt;
iptables -A INPUT -i lo -j ACCEPT&lt;br /&gt;
# 开放 22 端口&lt;br /&gt;
 iptables -A INPUT -p tcp --dport 22 -j ACCEPT&lt;br /&gt;
# 开放 21 端口 (FTP)&lt;br /&gt;
iptables -A INPUT -p tcp --dport 21 -j ACCEPT&lt;br /&gt;
# 开放 80 端口 (HTTP)&lt;br /&gt;
iptables -A INPUT -p tcp --dport 80 -j ACCEPT&lt;br /&gt;
# 开放 443 端口 (HTTPS)&lt;br /&gt;
iptables -A INPUT -p tcp --dport 443 -j ACCEPT&lt;br /&gt;
# 允许 ping&lt;br /&gt;
iptables -A INPUT -p icmp --icmp-type 8 -j ACCEPT&lt;br /&gt;
# 允许接受本机请求之后的返回数据 RELATED, 是为 FTP 设置的&lt;br /&gt;
 iptables -A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT&lt;br /&gt;
# 其他入站一律丢弃&lt;br /&gt;
 iptables -P INPUT DROP&lt;br /&gt;
# 所有出站一律绿灯&lt;br /&gt;
 iptables -P OUTPUT ACCEPT&lt;br /&gt;
# 所有转发一律丢弃&lt;br /&gt;
 iptables -P FORWARD DROP&lt;/p&gt;
&lt;p&gt;其他规则设定&lt;br /&gt;
 #如果要添加内网 ip 信任（接受其所有 TCP 请求）&lt;br /&gt;
iptables -A INPUT -p tcp -s 45.96.174.68 -j ACCEPT&lt;br /&gt;
# 过滤所有非以上规则的请求&lt;br /&gt;
 iptables -P INPUT DROP&lt;br /&gt;
# 要封停一个 IP，使用下面这条命令：&lt;br /&gt;
iptables -I INPUT -s ... -j DROP&lt;br /&gt;
# 要解封一个 IP，使用下面这条命令:&lt;br /&gt;
iptables -D INPUT -s ... -j DROP&lt;/p&gt;
&lt;p&gt;#保存上述规则&lt;br /&gt;
 service iptables save&lt;br /&gt;
 开启 iptables 服务&lt;br /&gt;
 #注册 iptables 服务&lt;br /&gt;
 #相当于以前的 chkconfig iptables on&lt;br /&gt;
systemctl enable iptables.service&lt;br /&gt;
# 开启服务&lt;br /&gt;
 systemctl start iptables.service&lt;br /&gt;
# 查看状态&lt;br /&gt;
 systemctl status iptables.service&lt;/p&gt;
&lt;h1 id=&#34;linux进程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#linux进程&#34;&gt;#&lt;/a&gt; Linux 进程&lt;/h1&gt;
&lt;p&gt;推荐一篇博客，《&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9saW51eC5jbi9hcnRpY2xlLTg0NTEtMS5odG1s&#34;&gt;关于 Linux 进程你所需要知道的一起&lt;/span&gt;》&lt;/p&gt;
&lt;h2 id=&#34;top命令实时的查看进程的状态&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#top命令实时的查看进程的状态&#34;&gt;#&lt;/a&gt; top 命令：实时的查看进程的状态&lt;/h2&gt;
&lt;p&gt;top 是一个前台程序，所以是可以交互的&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;常用交互命令&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;解释&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;q&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;退出程序&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;l&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;切换显示平均负载和启动时间的信息&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;P&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;根据 CPU 使用百分比大小进行排序&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;M&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;根据驻留内存大小进行排序&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;i&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;忽略闲置和僵死的进程，这是一个开关式命令&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;k&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;终止一个进程，系统提示输入 PID 及发送的信号值。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;ps命令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ps命令&#34;&gt;#&lt;/a&gt; ps 命令&lt;/h2&gt;
&lt;p&gt;ps -ef 显示所有进程的详细信息&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image008.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;UID&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;PID&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;PPID&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;C&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;STIME&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;TTY&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;CMD&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;用户 ID&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;进程的 ID&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;父进程 ID&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;进程占用 CPU 的百分比&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;进程启动的时间&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;该进程在那个终端上运行。若与终端无关，则显示？若为 pts/0 等，则表示由网络连和参数接主机进程。&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;命令的名称和参数&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;ps -aux 显示所有进程信息&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image009.png&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
&lt;img data-src=&#34;image010.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;ps -A 显示所有的进程信息&lt;br /&gt;
 ps -u root 显示指定用户的进程信息&lt;br /&gt;
 ps -l 显示目前属于本次登陆得 PID 相关信息&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ps -ef|grep sshd|grep -v &amp;quot;grep&amp;quot;&lt;/code&gt;  配合管道符与 grep，显示 sshd 的进程信息。&lt;/p&gt;
&lt;h2 id=&#34;kill-命令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#kill-命令&#34;&gt;#&lt;/a&gt; kill 命令&lt;/h2&gt;
&lt;p&gt;kill 命令：用于删除执行的程序或工作，通过向进程发送指定的信号来结束进程。&lt;/p&gt;
&lt;p&gt;用法：kill  [信号] PID&lt;/p&gt;
&lt;p&gt;常用信号：&lt;br /&gt;
2  结束进程，不是强制性的，&amp;quot;Ctrl + C&amp;quot; 发出的就是 kill -2 信号&lt;br /&gt;
 3  退出&lt;br /&gt;
 9  杀死进程，强制结束进程。&lt;/p&gt;
&lt;h1 id=&#34;端口&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#端口&#34;&gt;#&lt;/a&gt; 端口&lt;/h1&gt;
&lt;p&gt;在 Linux 操作系统下，系统共定义了 65536 个可用的端口。&lt;br /&gt;
对于 0-1023 端口，都需要 root 身份才能启用，这些端口主要用于系统一些常见的通信服务中。比如: 21 ftp 服务、22 ssh 服务、80 http 服务等...&lt;br /&gt;
 端口的开启和关闭也就是软件服务的启动和关闭&lt;/p&gt;
&lt;h2 id=&#34;chkconfig命令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#chkconfig命令&#34;&gt;#&lt;/a&gt; chkconfig 命令&lt;/h2&gt;
&lt;p&gt;chkconfig 来判断服务是开启还是关闭状态&lt;br /&gt;
例如 chkconfig --list sshd&lt;/p&gt;
&lt;h2 id=&#34;netstat命令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#netstat命令&#34;&gt;#&lt;/a&gt; netstat 命令&lt;/h2&gt;
&lt;p&gt;netstat 命令：用于显示 tcp, udp 的端口和进程情况&lt;br /&gt;
用法:&lt;br /&gt;
netstat [选项]&lt;br /&gt;
-a 显示所有&lt;br /&gt;
 - t 仅显示 tcp 相关选项&lt;br /&gt;
 - u 仅显示 udp 相关选项&lt;br /&gt;
 - n 拒绝显示别名，能显示数字的全部转化为数字&lt;br /&gt;
 - l 仅列出在 Listen (监听) 的服务状态&lt;br /&gt;
 - p 显示建立相关链接的程序名&lt;/p&gt;
&lt;p&gt;常用命令:&lt;br /&gt;
netstat-antlp // 查看当前所有 tcp 端口&lt;br /&gt;
 netstat-antulp|grep 80 // 查看所有 80 端口使用情况&lt;/p&gt;
&lt;h1 id=&#34;linux计划任务&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#linux计划任务&#34;&gt;#&lt;/a&gt; linux 计划任务&lt;/h1&gt;
&lt;p&gt;计划任务，就是在约定好的时间执行已经计划好的工作。&lt;br /&gt;
未来的某时间点执行一次某任务或者周期性的运行某个任务，执行结果会通过邮形式发送给用户。&lt;/p&gt;
&lt;h2 id=&#34;安全与计划任务&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#安全与计划任务&#34;&gt;#&lt;/a&gt; 安全与计划任务&lt;/h2&gt;
&lt;p&gt;挖矿病毒：&lt;br /&gt;
使用 top 查看 CPU，显示进程占 cpu99% 以上。杀掉进程后，到了晚上还是会自动运行进程。&lt;br /&gt;
检测定时任务，发现有一个异常的定时任务&lt;/p&gt;
&lt;h2 id=&#34;at命令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#at命令&#34;&gt;#&lt;/a&gt; at 命令&lt;/h2&gt;
&lt;p&gt;at 命令 一次性计划任务&lt;br /&gt;
默认自带 at&lt;br /&gt;
 &lt;code&gt;yum install at -y&lt;/code&gt;     下载 at&lt;/p&gt;
&lt;p&gt;开启服务:&lt;br /&gt;
service atd start&lt;/p&gt;
&lt;p&gt;用法:&lt;br /&gt;
at (选项)&lt;br /&gt;
 选项&lt;br /&gt;
 - f: 指定包含具体指令的任务文件；&lt;br /&gt;
-q: 指定新任务的队列名称；&lt;br /&gt;
-l: 显示待执行任务的列表；&lt;br /&gt;
-d: 删除指定的待执行任务；&lt;br /&gt;
-m: 任务执行完成后向用户发送 E-mail;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;label&#34;&gt;实例&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;at 10:00    确切时间&lt;br /&gt;
 at now +10 minutes  十分钟后执行&lt;br /&gt;
 at 17:04 04/04/2018  2018483817:04 执行&lt;br /&gt;
 at 17:04 04/04/2018  2018483817:04 执行&lt;/p&gt;
&lt;p&gt;at 1am tomorrow 明天上午一点运行作业&lt;br /&gt;
 at-c id    根据作业 ID 查看执行细节&lt;br /&gt;
 atq        查看待处理的任务&lt;br /&gt;
 atrm id    删除 id 的任务&lt;/p&gt;
&lt;h2 id=&#34;crondtab命令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#crondtab命令&#34;&gt;#&lt;/a&gt; crondtab 命令&lt;/h2&gt;
&lt;p&gt;crondtab 命令 周期性计划任务&lt;/p&gt;
&lt;p&gt;crond 是 linux 下用来周期性的执行某种任务或等待处理某些事件的一个守护进程。&lt;/p&gt;
&lt;p&gt;Linux 系统上系统服务是默认启动的，使用者控制计划任务命令:crontab 命令。&lt;/p&gt;
&lt;p&gt;crontab 其实是一个命令，用来读取和修改名为 crontab 的文件。/etc/crontab 文件包含了要定时执行的程序列表。&lt;/p&gt;
&lt;p&gt;安装 crontab: 默认自带&lt;br /&gt;
 &lt;code&gt;yum install crontabs&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;服务命令:&lt;/p&gt;
&lt;p&gt;service crond start // 启动服务 service crond stop // 关闭服务 service crond restart// 重启服务 service crond reload // 重新载入配置&lt;/p&gt;
&lt;p&gt;crontab 命令 周期性计划任务&lt;/p&gt;
&lt;p&gt;1、命令格式:&lt;/p&gt;
&lt;p&gt;crontab [-u user] file&lt;br /&gt;
crontab [-u user] 【选项】&lt;/p&gt;
&lt;p&gt;常用选项:&lt;/p&gt;
&lt;p&gt;-e: 编辑计划任务 edit&lt;br /&gt;
-l: 查看计划任务 display&lt;br /&gt;
-u: 指定用户&lt;/p&gt;
&lt;p&gt;常用命令:&lt;/p&gt;
&lt;p&gt;crontab -l 列出当前用户的计划任务&lt;br /&gt;
 crontab -r 删除当前用户所有的计划任务&lt;br /&gt;
 crontab -e 编辑当前用户的计划任务&lt;br /&gt;
 crontab-e -u root 编辑 root 用户的计划任务&lt;/p&gt;
&lt;p&gt;第一列：分钟 (0-59)&lt;br /&gt;
 第二列：小时 (0-23)&lt;br /&gt;
 第三列：天 (1-31)&lt;br /&gt;
 第四列：月 (1-12)&lt;br /&gt;
 第五列：周 (0-6) 0 表示周日&lt;/p&gt;
&lt;p&gt;&amp;quot;&lt;em&gt;&amp;quot; 表示所有的取值，就是&lt;/em&gt; / 1&amp;quot;&lt;br /&gt;
&amp;quot;/&amp;quot; 表示每的意思&lt;br /&gt;
 */5&amp;quot; 表示每 5 个单位&lt;br /&gt;
 &amp;quot;-&amp;quot; 表示从某个数字到某个数字&lt;br /&gt;
 &amp;quot;,&amp;quot; 表示分散的数字&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;crontab.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;label&#34;&gt;实例&lt;/span&gt;&lt;br /&gt;
&lt;img data-src=&#34;image011.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h1 id=&#34;日志服务&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#日志服务&#34;&gt;#&lt;/a&gt; 日志服务&lt;/h1&gt;
&lt;h2 id=&#34;基础信息&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#基础信息&#34;&gt;#&lt;/a&gt; 基础信息&lt;/h2&gt;
&lt;p&gt;在 CentOS 6.x 中，日志服务已经由 rsyslogd 取代了原先的 syslogd.&lt;br /&gt;
rsyslogd 相比 syslogd 具有一些新的特点:&lt;br /&gt;
 基于 TCP 网络协议传输日志信息。&lt;br /&gt;
更安全的网络传输方式。&lt;br /&gt;
有日志信息的即时分析框架。&lt;br /&gt;
后台数据库。&lt;br /&gt;
在配置文件中可以写简单的逻辑判断。&lt;br /&gt;
与 syslog 配置文件相兼容。&lt;/p&gt;
&lt;p&gt;查看 rsyslogd 服务是否启动&lt;br /&gt;
 &lt;code&gt;ps aux|grep &amp;quot;rsyslogd&amp;quot;|grep -v &amp;quot;grep&amp;quot;&lt;/code&gt; &lt;br /&gt;
 查询 rsyslogd 服务的自启动状态&lt;br /&gt;
 &lt;code&gt;chkconfig --list|grep &amp;quot;rsyslog&amp;quot;&lt;/code&gt; &lt;br /&gt;
 &lt;code&gt;systemctl list-unit-files|grep &amp;quot;rsyslog&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;在 Linux 系统中有一部分日志不是由 rsyslogd 服务来管理的，比如 apache 服务，它的日志是由 Apache 软件自己产生并记录的，并没有调用 rsyslogd 服务，但是 apache 日志文件的格式和系统默认日志的格式是一致的。&lt;/p&gt;
&lt;p&gt;在 Linux 系统中有一部分日志不是由 rsyslogd 服务来管理的，比如 apache 服务，它的日志是由 Apache 软件自己产生并记录的，并没有调用 rsyslogd 服务，但是 apache 日志文件的格式和系统默认日志的格式是一致的。&lt;/p&gt;
&lt;p&gt;日志文件是重要的系统信息文件，其中记录了许多重要的系统事件，包括用户的登录信息、系统的启动信息、系统的安全信息、邮件相关信息、各种服务相关信息等。这些信息有些非常敏感，所以在 Linux 中这些日志文件只有 root 用户可以读取。&lt;br /&gt;
系统日志文件的保存位置是 /var/log/ 目录&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image012.png&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
&lt;img data-src=&#34;image013.png&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
&lt;img data-src=&#34;image014.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;日志服务 rsyslogd 记录的日志文件格式包含以下 4 列:&lt;/p&gt;
&lt;p&gt;1. 事件产生的时间。&lt;br /&gt;
2. 产生事件的服务器的主机名。&lt;br /&gt;
3. 产生事件的服务名或程序名。&lt;br /&gt;
4. 事件的具体信息。&lt;/p&gt;
&lt;p&gt;/var/log/secure 日志文件内容:&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image015.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;/var/log/secure 记录验证和授权方面的倍息，只要涉及账户和密码的程序都会记录，比如系统的登录、ssh 的登录、su 切换用户，sudo 授权，甚至添加用户和修改用户密码都会记录在这个日志文件中&lt;/p&gt;
&lt;p&gt;/var/log/wtmp 永久记录所有用户的登陆、注销信息，同时记录系统的后动、重启、关机事件&lt;/p&gt;
&lt;p&gt;/var/tun/ulmp 记录当前已经登录的用户的信息。这个文件会随着用户的登录和注销而不断变化，只记录当前登录用户的信息。&lt;/p&gt;
&lt;h2 id=&#34;rsyslogd配置文件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#rsyslogd配置文件&#34;&gt;#&lt;/a&gt; rsyslogd 配置文件&lt;/h2&gt;
&lt;p&gt;rsyslogd 服务的配置文件是 /etc/rsyslog.conf , 其中主要定义了服务的名称、日志等级和日志记录位置。&lt;/p&gt;
&lt;p&gt;该配置文件的基本格式如下所示:&lt;/p&gt;
&lt;p&gt;authpriv.*                  /var/log/secure&lt;br /&gt;
# 服务名称 [连接符号] 日志等级   日志记录位置&lt;/p&gt;
&lt;h2 id=&#34;日志等级&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#日志等级&#34;&gt;#&lt;/a&gt; 日志等级&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;image016.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;详细见&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9jbmJsb2dzLmNvbS9rbGI1NjEvcC8xMjAxNDI2OC5odG1s&#34;&gt; https://cnblogs.com/klb561/p/12014268.html&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;连接符&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#连接符&#34;&gt;#&lt;/a&gt; 连接符&lt;/h2&gt;
&lt;p&gt;连接符号:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&amp;quot;.&amp;quot; 代表只要比后面的等级高的 (包含该等级) 日志都记录。比如，&amp;quot;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2Nyb24uaW5mbw==&#34;&gt;cron.info&lt;/span&gt;&amp;quot; 代表 cron 服务产生的日志，只要日志等级大于等于 info 级别，就记录。&lt;/li&gt;
&lt;li&gt;&amp;quot;.=&amp;quot; 代表只记录所需等级的日志，其他等级的日志都不记录。比如，&amp;quot;*.=emerg&amp;quot; 代表人和日志服务产生的日志，只要等级是 emerg 等级，就记录。这种用法极少见，了解就好。&lt;/li&gt;
&lt;li&gt;&amp;quot;.!&amp;quot; 代表不等于，也就是除该等级的日志外，其他等级的日志都记录。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;日志记录位置&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#日志记录位置&#34;&gt;#&lt;/a&gt; 日志记录位置&lt;/h2&gt;
&lt;p&gt;日志记录位置：当前日志输出到哪个日志文件中保存&lt;/p&gt;
&lt;p&gt;日志文件的绝对路径。例如: &amp;quot;/ar/log/secure&amp;quot;&lt;/p&gt;
&lt;p&gt;系统设备文件。如 &amp;quot;/dev/lpo&amp;quot; 代表第一台打印机，如果日志保存位置是打印机设备，当有日志时就会在打印机上打印。&lt;/p&gt;
&lt;p&gt;用户名。如果是 &amp;quot;root&amp;quot; , 把日志发送给 root 用户 (用户要在线) &amp;quot;*&amp;quot; 代表发送给所有在线用户，如 &amp;quot;mail**&amp;quot; 就会把 mail 服务产生的所有级别的日志发送给所有在线用户。发给多个在线用户，则用户名之间用 &amp;quot;,&amp;quot; 分隔。&lt;/p&gt;
&lt;p&gt;忽略或丢弃日志。如果接收日志的对象是 &amp;quot;~&amp;quot; , 则代表这个日志不会被记录，而被直接丢弃。如 &amp;quot;local3.*~&amp;quot; 代表忽略 local3 服务类型所有的日志都不记录。&lt;/p&gt;
&lt;h2 id=&#34;日志管理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#日志管理&#34;&gt;#&lt;/a&gt; 日志管理&lt;/h2&gt;
&lt;p&gt;日志管理:&lt;/p&gt;
&lt;p&gt;日志维护的最主要的工作就是把旧的日志文件删除，从而腾出空间保存新的日志文件。&lt;/p&gt;
&lt;p&gt;logrotate 就是用来进行日志轮替的，就是把旧的日志文件移动并改名，同时创建一个新的空日志文件用来记录新日志，当旧日志文件超出保存的范围时就删除。&lt;/p&gt;
&lt;p&gt;日志文件的命名规则:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;服务加日期&lt;/li&gt;
&lt;li&gt;服务加数字&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;查看日志备份文件&lt;br /&gt;
 ls /var/log&lt;/p&gt;
&lt;p&gt;logrotate 令可以进行日志转储 (轮替)&lt;/p&gt;
&lt;p&gt;logrotate 命令会依据 /etc/logrotate.conf 配置文件的配置，来判断配置文件中的日志是否符合日志轮替的条件 (比如，日志备份时间已经满一周) , 如果符合，日志就会进行轮替。&lt;/p&gt;
&lt;p&gt;/etc/logrotate.conf 配置文件的&lt;br /&gt;
 cat /etc/logrotate.conf&lt;br /&gt;
 详细讲解&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2MuYmlhbmNoZW5nLm5ldC92aWV3LzExMDYuaHRtbA==&#34;&gt;http://c.biancheng.net/view/1106.html&lt;/span&gt;&lt;/p&gt;
&lt;h1 id=&#34;系统服务&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#系统服务&#34;&gt;#&lt;/a&gt; 系统服务&lt;/h1&gt;
&lt;p&gt;什么是系统服务？&lt;br /&gt;
 服务是在后台运行的应用程序，并且可以提供一些本地系统或网络的功能。&lt;br /&gt;
我们把这些应用程序称作服务，也就是 Service.&lt;br /&gt;
Linux 中常见的服务有那些，这些服务怎么分类，服务如何启动，服务如何自启动，服务如何查看？&lt;/p&gt;
&lt;p&gt;服务 Service, Daemon 这个词也经常伴随着出现。&lt;br /&gt;
Daemon 翻 i 成 &amp;quot;守护进程&amp;quot;&lt;br /&gt;
 守护进程：就是为了实现服务、功能的进程。&lt;br /&gt;
比如，apache 服务就是服务 (Service) , 它是用来实现 Web 服务的。&lt;br /&gt;
那么，启动 apache 服务的进程是哪个进程呢？&lt;br /&gt;
httpd 这个守护进程 (Daemon) 。&lt;br /&gt;
在 Linux 中就是通过启动 httpd 进程来启动 apache 服务的。&lt;br /&gt;
也就是说，守护进程就是服务在后台运行的真实进程。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image017.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Linux 中的服务按照安装方法不同可以分为 RPM 包默认安装的服务和源码包安装的服务两大类。&lt;/p&gt;
&lt;p&gt;区别:&lt;/p&gt;
&lt;p&gt;RPM 包安装到系统默认位置，可以被服务管理命令识别；但是源码包安装到手工指定位置，当然就不能被服务管理命令识别了 (可以手工修改为被服务管理命令识别)。&lt;/p&gt;
&lt;h2 id=&#34;启动服务&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#启动服务&#34;&gt;#&lt;/a&gt; 启动服务&lt;/h2&gt;
&lt;p&gt;启动服务方式:&lt;/p&gt;
&lt;p&gt;1) 使用 /etc/init.d/ 目录中的启动脚本来启动独立的服务&lt;/p&gt;
&lt;p&gt;2) 使用 service 命令来启动独立的服务&lt;/p&gt;
&lt;p&gt;1) 使用 /etc/init.d/ 目录中的启动脚本来启动独立的服务&lt;/p&gt;
&lt;p&gt;所有独立服务的启动脚本都存放在 /etc/init.d/ 目录中，调用脚本就可以启动独立的服务了。&lt;/p&gt;
&lt;p&gt;命令格式如下:&lt;/p&gt;
&lt;p&gt;/etc/init.d/ 独立服务名参数参数:&lt;/p&gt;
&lt;p&gt;start: 启动服务；&lt;br /&gt;
stop: 停止服务；&lt;br /&gt;
status: 查看服务状态；&lt;br /&gt;
restart: 重启动服务；&lt;/p&gt;
&lt;p&gt;2) 使用 service 命令来启动独立的服务&lt;/p&gt;
&lt;p&gt;在 CentOS 系统中，我们还可以依赖 service 命令来启动独立的服务。service 命令实际上只是一个脚本，这个脚本仍然需要调用 /etc/init.d/ 中的启动脚本来启动独立的服务。&lt;/p&gt;
&lt;p&gt;service 命令格式如下:&lt;/p&gt;
&lt;p&gt;service 独立服务名 start|stop|restart|..&lt;/p&gt;
&lt;p&gt;&lt;code&gt;service --status-all 查看所有服务&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;服务的自启动&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#服务的自启动&#34;&gt;#&lt;/a&gt; 服务的自启动&lt;/h2&gt;
&lt;p&gt;使用 chkconfig 服务自启动管理命令&lt;/p&gt;
&lt;p&gt;格式:&lt;/p&gt;
&lt;p&gt;查看所有服务的自启动状态&lt;br /&gt;
 chkconfig -list&lt;/p&gt;
&lt;p&gt;设置某服务的自启动状态&lt;/p&gt;
&lt;p&gt;chkconfig [--level 运行级别][独立服务名][on|off]&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image018.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;想把某个已经安装了的服务添加为系统服务，可以执行以下命令：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;chkconfig --add 服务名称&lt;/code&gt;           (首先，添加为系统服务，注意 add 前面有两个横杠)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;chkconfig -leve 启动级别 服务名 on&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&#34;下载与安装&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#下载与安装&#34;&gt;#&lt;/a&gt; 下载与安装&lt;/h1&gt;
&lt;h2 id=&#34;wget&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#wget&#34;&gt;#&lt;/a&gt; wget&lt;/h2&gt;
&lt;p&gt;wget 是一个下载文件的工具，它用在命令行下&lt;/p&gt;
&lt;p&gt;语法：wget [选项] url&lt;/p&gt;
&lt;p&gt;选项：&lt;/p&gt;
&lt;p&gt;-V 显示 wget 版本信息并退出。&lt;br /&gt;
-h 打印此帮助&lt;br /&gt;
 - O 指定下载文件的别名。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image019.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;rpm&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#rpm&#34;&gt;#&lt;/a&gt; rpm&lt;/h2&gt;
&lt;p&gt;Linux rpm 命令用于管理套件，增强了程序安装卸载的管理。&lt;/p&gt;
&lt;p&gt;RPM 的功能：打包、安装、查询、升级、卸载...&lt;/p&gt;
&lt;p&gt;缺点: RPM 无法解决软件包的依赖关系&lt;/p&gt;
&lt;p&gt;RPM 包的命名规范: name-version-release.os.arch.rpm&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image020.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;!{}(image021.png)&lt;/p&gt;
&lt;h2 id=&#34;yum&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#yum&#34;&gt;#&lt;/a&gt; yum&lt;/h2&gt;
&lt;p&gt;yum 基于 RPM 包管理，能够从指定的服务器自动下载 RPM 包和安装&lt;/p&gt;
&lt;p&gt;优点：可以自动处理关联关系，并且一次安装所有依赖的软件包，无须繁琐地一次下载，安装。&lt;/p&gt;
&lt;p&gt;语法 ：&lt;br /&gt;
yum [选项] [包……]&lt;/p&gt;
&lt;p&gt;选项：&lt;br /&gt;
-h 帮助&lt;br /&gt;
 - y 当安装过程中提示选择全部为 “yes”&lt;br /&gt;
-q 不显示安装过程&lt;/p&gt;
&lt;p&gt;检测有没有安装 yum&lt;br /&gt;
yum -h&lt;br /&gt;
rpm -qa | grep yum&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;span class=&#34;label info&#34;&gt;相关命令&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;1・列出所有可更新的软件清单命令: yum check-update&lt;br /&gt;
2 更新所有软件命令: yum update&lt;br /&gt;
3 仅安装指定的软件命令: yum install 包名称&lt;br /&gt;
 4 仅更新指定的软件命令: yum update 包名称&lt;br /&gt;
 5 列出所有可安装的软件清单命令: yum list&lt;br /&gt;
6 删除删除命令: yum remove 包名称&lt;br /&gt;
 7 清除缓存命令:&lt;br /&gt;
 清除缓存目录 (/var/cache/yum) 下的软件包&lt;br /&gt;
命令：yum clean packages&lt;/p&gt;
&lt;p&gt;清除缓存目录 (/var/cache/yum) 下的 headers&lt;br /&gt;
 命令：yum clean headers&lt;/p&gt;
&lt;p&gt;清除缓存目录 (/var/cache/yum) 下旧的 headers&lt;br /&gt;
 命令：yum clean oldheaders&lt;/p&gt;
&lt;p&gt;清除缓存目录 (/var/cache/yum) 下的软件包及旧的 headers&lt;br /&gt;
 命令：yum clean, yum clean all (= yum clean packages; yum clean oldheaders)&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;span class=&#34;label info&#34;&gt;yum list 相关命令&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;iamge022.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;安装应用程序&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;语法: yum [-y] install 包 1 包 2…… 包 n&lt;br /&gt;
yum install wget    使用安装 wget&lt;/p&gt;
&lt;p&gt;升级软件包&lt;/p&gt;
&lt;p&gt;命令格式: yum update 包 1 包 2…… 包 n&lt;br /&gt;
yum check-update 检测可升级的包&lt;/p&gt;
&lt;p&gt;卸载软件包&lt;/p&gt;
&lt;p&gt;命令格式: yum remove 包 1 包 2…… 包 n&lt;br /&gt;
 注意：卸载时注意依赖关系&lt;/p&gt;
&lt;h1 id=&#34;文件打包和解压缩&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#文件打包和解压缩&#34;&gt;#&lt;/a&gt; 文件打包和解压缩&lt;/h1&gt;
&lt;p&gt;linux 中常用的五种压缩格式: .zip .gz .tar.gz .bz2 .tar.bz2&lt;/p&gt;
&lt;p&gt;打包和压缩:&lt;/p&gt;
&lt;p&gt;打包是指将一大堆文件或目录什么的变成一个总的文件&lt;br /&gt;
压缩则是将一个大的文件通过一些压缩算法变成一个小文件&lt;/p&gt;
&lt;h2 id=&#34;tar命令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#tar命令&#34;&gt;#&lt;/a&gt; tar 命令&lt;/h2&gt;
&lt;p&gt;Linux 中的很多压缩程序只能针对一个文件进行压缩，这样当你想要压缩一大堆文件时，你就得先借助另它的工具将这一大堆文件先打成一个包，然后再就原来的压缩程序进行压缩。&lt;/p&gt;
&lt;p&gt;Liunx 下最常用的打包命令是 tar, 使用 tar 程序打出来的包我们常称为 tar 包，tar 包文件的命通常都是以.tar 结尾的。&lt;br /&gt;
生成 tar 包后，就可以用其它的程序来进行压缩了，所以首先就来讲讲 tar 命令的基本用法&lt;/p&gt;
&lt;p&gt;语法:&lt;br /&gt;
tar 【选项】 打包文件包 源文件&lt;br /&gt;
选项:&lt;br /&gt;
-c: 打包&lt;br /&gt;
 - v: 显示详细过程&lt;br /&gt;
 - x: 解打包 / 压缩&lt;br /&gt;
 - z: 通过 gzip 压缩 / 解压文件&lt;br /&gt;
 - j: 通过 bz2 压缩 / 解压文件&lt;br /&gt;
 - C: 解压到指定目录&lt;br /&gt;
 - f filename: 指定打包后的文件名 (必选，这个参数是最后一个参数，后面只能接文件名)&lt;/p&gt;
&lt;p&gt;常用命令:&lt;br /&gt;
tar -cf all.tar *.jpg  #将所有.jpg 的文件打成一个名为 all.tar 的包&lt;br /&gt;
 tar -xvf all.tar  #解出 all.tar 包中所有文件，-x 是解开的意思&lt;/p&gt;
&lt;p&gt;为了方便用户在打包解包的同时可以压缩或解压文件，tar 提供了一种特殊的功能 -- 就是 tar 可以在打包或解包的同时调用其它的压缩程序，比如调用 gzip.bzip2 等。&lt;/p&gt;
&lt;h2 id=&#34;解压缩与压缩&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#解压缩与压缩&#34;&gt;#&lt;/a&gt; &lt;span class=&#34;label info&#34;&gt;解压缩与压缩&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;image022.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;zip&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#zip&#34;&gt;#&lt;/a&gt; zip&lt;/h2&gt;
&lt;p&gt;zip 【选项】 【压缩文件】&lt;/p&gt;
&lt;p&gt;选项:&lt;br /&gt;
-m 将文件压缩并加入压缩文件后，删除原始文件，即把文件移到压缩文件中。&lt;br /&gt;
-q 不显示指令执行过程。&lt;br /&gt;
-r 递归处理，将指定目录下的所有文件和子目录一并处理。&lt;br /&gt;
-v 显示指令执行过程或显示版本信息。&lt;/p&gt;
&lt;p&gt;实例&lt;/p&gt;
&lt;p&gt;将 /home/html/ 这个目录下所有文件和文件夹打包为当前目录下的 html.zip:&lt;/p&gt;
&lt;p&gt;zip-qr html.zip /home/html&lt;/p&gt;
&lt;h2 id=&#34;unzip&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#unzip&#34;&gt;#&lt;/a&gt; unzip&lt;/h2&gt;
&lt;p&gt;unzip 【选项】 【压缩文件】&lt;/p&gt;
&lt;p&gt;选项:&lt;/p&gt;
&lt;p&gt;-l 显示压缩文件内所包含的文件 - V 执行是时显示详细的信息。&lt;br /&gt;
-q 执行时不显示任何信息。&lt;br /&gt;
-d &amp;lt;目录&amp;gt; 指定文件解压缩后所要存储的目录。&lt;/p&gt;
&lt;p&gt;实例&lt;/p&gt;
&lt;p&gt;解压文件&lt;br /&gt;
 &lt;code&gt;unzip abc.zip&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;查看压缩文件中包含的文件:&lt;br /&gt;
 &lt;code&gt;unzip-l abc.zip&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;gzip&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#gzip&#34;&gt;#&lt;/a&gt; gzip&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;tar 调用 gzipgzip 是 GNU 组织开发的一个压缩程序，.gz 结尾的文件就是 gzip 压缩的结果。与 gzip 相对的解压程序是 gunzip.&lt;br /&gt;
tar 中使用 - z 这个参数来调用 gzip 常用命令:&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;tar-czf all.tar.gz *.jpg&lt;/code&gt;   #将所有.jpg 的文件打成一个 tar 包，并且将其用 gzip 压缩，生成一个 gzip 压缩过的包 all.tar.gz&lt;/p&gt;
&lt;p&gt;&lt;code&gt;tar-xzf all.tar.gz&lt;/code&gt;   #将包 all.tar.z 解开&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;tar 调用 bzip2bzip2 是一个压缩能力更强的压缩程序，.bz2 结尾的文件就是 bzip2 压缩的结果。与 bzip2 相对的解压程序是 bunzip&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;tar 中使用 - j 这个参数来调用 bzip2&lt;/p&gt;
&lt;p&gt;常用命令:&lt;/p&gt;
&lt;p&gt;tar -cjfall.tar.bz2 *.jpg #将所有.jpg 的文件打成一个 tar 包，并且将其用 bzip2 压缩，生成一个 bzip2 压缩过的包，包名为 all.tar.bz2&lt;/p&gt;
&lt;p&gt;tar -xjf all.tar.bz2  #将上面产生的包解开&lt;/p&gt;
</content>
        <category term="Linux" />
        <updated>2021-02-19T06:54:11.000Z</updated>
    </entry>
    <entry>
        <id>https://or0kit.github.io/Linux/Linux-Reviewing/</id>
        <title>初学Linux</title>
        <link rel="alternate" href="https://or0kit.github.io/Linux/Linux-Reviewing/"/>
        <content type="html">&lt;h1 id=&#34;基础&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#基础&#34;&gt;#&lt;/a&gt; 基础&lt;/h1&gt;
&lt;h2 id=&#34;linux是谁开发的-是用什么语言开发的-unix的开源精神&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#linux是谁开发的-是用什么语言开发的-unix的开源精神&#34;&gt;#&lt;/a&gt; Linux 是谁开发的、是用什么语言开发的、Unix 的开源精神&lt;/h2&gt;
&lt;p&gt;1991 年 Linus Torvalds（林纳斯。托瓦兹）写出 Linux 内核的第一个版本；&lt;br /&gt;
1992 年第一个发行版出现；&lt;br /&gt;
GNU/Linux 系统 = Linux 内核 + GNU；发行版有：Red Hat,Debain,Suse,Mandrake,Redflag...&lt;br /&gt;
GNU：即革奴计划，由理查德。斯托曼发起，目标是创建一套完全自由的操作系统；&lt;br /&gt;
其他：EMACS、Copyleft&lt;/p&gt;
&lt;h2 id=&#34;mbr简介&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#mbr简介&#34;&gt;#&lt;/a&gt; MBR 简介&lt;/h2&gt;
&lt;p&gt;一块硬盘最多拥有 4 个主分区 (包括扩展分区)。这是&lt;/p&gt;
&lt;p&gt;ps: 44 页前&lt;/p&gt;
&lt;h1 id=&#34;linux下的shell相关的操作&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#linux下的shell相关的操作&#34;&gt;#&lt;/a&gt; Linux 下的 shell 相关的操作&lt;/h1&gt;
&lt;p&gt;shell 是 Linux 系统的一个重要组成部分。在 Linux 系统中，shell 就是一组介于用户与 Linux 内核之间的系统程序。shell 是用户与 Linux 内核之间的接口。&lt;/p&gt;
&lt;h2 id=&#34;shell的分类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#shell的分类&#34;&gt;#&lt;/a&gt; shell 的分类&lt;/h2&gt;
&lt;p&gt;hell 有着不同的分类，比如 Bourne shell（sh），Korn shell（ksh）、C shell （csh）、Bourne-again shell（bash）、tcsh。其中最常用的有 csh 和 bash，其提示符如下：&lt;br /&gt;
sh–Bash ：#root $user&lt;br /&gt;
csh–:#root %user&lt;/p&gt;
&lt;h2 id=&#34;简单的shell命令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#简单的shell命令&#34;&gt;#&lt;/a&gt; 简单的 shell 命令&lt;/h2&gt;
&lt;p&gt;Linux 命令又称 shell 命令。&lt;/p&gt;
&lt;h3 id=&#34;语法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#语法&#34;&gt;#&lt;/a&gt; 语法&lt;/h3&gt;
&lt;p&gt;命令名 【选项】 【参数】&lt;/p&gt;
&lt;p&gt;命令行输入的第一个字必须是一个命令的名字，第二个字是明明令的选项或参数，命令行中的每个字必须有空格隔开。【选项】的方括号表示语法上选项是可有可无的。选项旺旺包括一个或多个英文字母，在字母前面必须有一个减号【减号是必须的，Linux 用它来区分选项和参数，参数是不带减号的】&lt;/p&gt;
&lt;h3 id=&#34;pwd&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#pwd&#34;&gt;#&lt;/a&gt; pwd&lt;/h3&gt;
&lt;p&gt;格式：pwd（print work directory 缩写）&lt;/p&gt;
&lt;p&gt;功能：显示当前目录的绝对路径。&lt;/p&gt;
&lt;h3 id=&#34;cd&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cd&#34;&gt;#&lt;/a&gt; cd&lt;/h3&gt;
&lt;p&gt;格式：cd 【目录】&lt;br /&gt;
功能：切换到指定目录。&lt;/p&gt;
&lt;p&gt;‘change directory’的缩写&lt;/p&gt;
&lt;p&gt;cd ../   返回到上一级目录&lt;br /&gt;
 cd      不带任何参数表示返回到家目录&lt;br /&gt;
 cd -    &lt;em&gt;&lt;strong&gt;返回上一个目录&lt;/strong&gt;&lt;/em&gt;。&lt;/p&gt;
&lt;h3 id=&#34;ls&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ls&#34;&gt;#&lt;/a&gt; ls&lt;/h3&gt;
&lt;p&gt;格式：ls 【选项】 【文件 | 目录】&lt;br /&gt;
功能：显示指定目录下的内容。内容包括该目录下的文件和子目录。当不指定目录时，默认显示当前面目录下中的文件和子目录信息。‘list’的缩写。&lt;/p&gt;
&lt;p&gt;主要选项：&lt;br /&gt;
-a 显示所有文件和子目录，包括隐藏文件和隐藏自子目录。Linux 下的隐藏文件和隐藏子目录以‘.’开头。&lt;br /&gt;
-l 显示文件和子目录详细信息，即以长格式显示，包括文件类型、权限、拥有人和拥有组、文件大小、最近一次修改时间、文件名等信息。&lt;br /&gt;
-d 参数应该是目录，只显示目录的信息，而不显示其中所包含的文件机子目录的信息，该选项通常与‘-l’一起使用，后接目录名，功能是以长格式显示目录信息。&lt;br /&gt;
-R 不仅显示指定目录下的文件和子目录信息，而且还递归地显示各子路录下的文件和子目录信息。&lt;br /&gt;
-t 按照时间顺序显示文件，新的文件排在前面。ls 命令默认按照字母顺序排列。&lt;br /&gt;
--help 查看帮助信息。&lt;/p&gt;
&lt;h3 id=&#34;date&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#date&#34;&gt;#&lt;/a&gt; date&lt;/h3&gt;
&lt;p&gt;格式：date【+FORMAT】 或 date 【MMDDhhmm【YY】【YYYY】】&lt;br /&gt;
功能：查看或修改系统时间。&lt;/p&gt;
&lt;p&gt;date 命令显示的内容依次是星期、月份、小时、分钟、秒、时区和年份。&lt;/p&gt;
&lt;h3 id=&#34;cal&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cal&#34;&gt;#&lt;/a&gt; cal&lt;/h3&gt;
&lt;p&gt;格式：cal【YYYY】&lt;br /&gt;
功能：显示日历&lt;br /&gt;
显示本月的日历。若参数为年份，则显示该年的日历。&lt;/p&gt;
&lt;h3 id=&#34;who&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#who&#34;&gt;#&lt;/a&gt; who&lt;/h3&gt;
&lt;p&gt;格式：who&lt;br /&gt;
 功能：显示当前已登录到系统的所有用户名及其终端名和登录到系统的时间。&lt;/p&gt;
&lt;h3 id=&#34;clear&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#clear&#34;&gt;#&lt;/a&gt; clear&lt;/h3&gt;
&lt;p&gt;格式：clear&lt;br /&gt;
 功能：清楚当前终端的屏幕内容。&lt;br /&gt;
也可以使用快捷组合键 Ctrl + L&lt;/p&gt;
&lt;h2 id=&#34;获取帮助&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#获取帮助&#34;&gt;#&lt;/a&gt; 获取帮助&lt;/h2&gt;
&lt;h3 id=&#34;whatis&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#whatis&#34;&gt;#&lt;/a&gt; whatis&lt;/h3&gt;
&lt;p&gt;格式：whatis 命令名&lt;br /&gt;
功能： 查询某命令的简单功能。&lt;/p&gt;
&lt;p&gt;但该命令信息量较少，且该命令是基于数据库的查询，对于刚安装的命令则查询不到，等到系统更新后才能查到。若要立即查询，则使用 makewhatis 立即生效更新数据库，然后再用该命令进行查询。&lt;/p&gt;
&lt;h3 id=&#34;-help&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#-help&#34;&gt;#&lt;/a&gt; --help&lt;/h3&gt;
&lt;p&gt;格式： 命令名 --help&lt;br /&gt;
 功能：显示指定命令的帮助信息。&lt;/p&gt;
&lt;h3 id=&#34;man&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#man&#34;&gt;#&lt;/a&gt; man&lt;/h3&gt;
&lt;p&gt;格式：man 命令名&lt;br /&gt;
功能：显示指定命令的手册页帮助信息。&lt;/p&gt;
&lt;h3 id=&#34;info&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#info&#34;&gt;#&lt;/a&gt; info&lt;/h3&gt;
&lt;p&gt;格式：info 命令名&lt;br /&gt;
功能：查询命令的用法合作文件的格式。&lt;/p&gt;
&lt;h3 id=&#34;usrsharedoc&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#usrsharedoc&#34;&gt;#&lt;/a&gt; /usr/share/doc&lt;/h3&gt;
&lt;p&gt;帮助文档就位于 /usr/share/doc 目录下。&lt;/p&gt;
&lt;p&gt;以上获取帮助的方法，man 命令是最常使用的。&lt;/p&gt;
&lt;h2 id=&#34;bash变量&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#bash变量&#34;&gt;#&lt;/a&gt; bash 变量&lt;/h2&gt;
&lt;h3 id=&#34;变量的设置与引用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#变量的设置与引用&#34;&gt;#&lt;/a&gt; 变量的设置与引用&lt;/h3&gt;
&lt;p&gt;变量名 = 值&lt;/p&gt;
&lt;p&gt;引用格式为 “&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mtext&gt;变量名”或者“&lt;/mtext&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;变量名”或者“&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.69444em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;变&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;量&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;名&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;”&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;或&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;者&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;“&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;{变量名}”，一般情况下可以不用加大括号，但有些情况下必须要加大括号。&lt;/p&gt;
&lt;p&gt;echo $Atest  将 Atest 当作一个变量；&lt;br /&gt;
echo ${A} test  test 将在变量 A 之后。&lt;/p&gt;
&lt;h3 id=&#34;环境变量&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#环境变量&#34;&gt;#&lt;/a&gt; 环境变量&lt;/h3&gt;
&lt;p&gt;系统中影响到 bash 环境的变量被称为环境变量。可以使用 env 或 export 来查阅系统默认的环境变量。&lt;/p&gt;
&lt;p&gt;常用的环境变量&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;PS1: 系统提示符环境变量。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;HISTSIZE: 默认保存的历史记录数。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;PATH: 执行文件查找的路径。&lt;br /&gt;
PATH 的值都是一些目录，目录与目录之间以冒号（:）分隔，由于文件的查找是依序有 PATH 变量内的目录来查找的，所以目录的顺序也很重要。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;USER: 当前登录的用户。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;HOME: 当前用户的家目录。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;EUID: 当前用户的 UID&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;与shell有关的配置文件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#与shell有关的配置文件&#34;&gt;#&lt;/a&gt; 与 shell 有关的配置文件&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;/etc/profile 文件、这是系统最重要的 shell 配置文件，也是用户登录系统最先检查的文件，系统的环境变量多定义在此文件中，主要包括 PATH、USER、LANG、MAIL、HOSTNAME、HISTSIZE 和 INPUTRC。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;~/.bash_profile 文件。每个用户的 bash 环境配置文件，存在于用户目录的家目录下，当系统运行 /etc/profile/ 后，将读取此文件的内容，此文件定义了 USER、EUID、HOME、PATH 等环境变量，此处的 PATH 包括了用户自己定义的路径以及用户的 “bin” 路径&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;~/.bashrc 文件。 前两个文件仅在系统登录时读取。此文件在每次运行 bash 是读取，此文件主要定义的是一些终端设置以及 Shell 提示符等。而不定义环境变量等内容。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;~/.bash_history 文件。该文件保存了用户的历史记录。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;历史记录命令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#历史记录命令&#34;&gt;#&lt;/a&gt; 历史记录命令&lt;/h2&gt;
&lt;p&gt;可以利用上下方向键调出已经执行过的 Shell 命令。&lt;/p&gt;
&lt;p&gt;还可以用 history 命令查看 Shell 命令的历史记录&lt;/p&gt;
&lt;p&gt;格式：history【数字】&lt;br /&gt;
功能：查看 Shell 命令的历史记录。如果指定参数则查看最近执行过的指定个数的 Shell 命令&lt;/p&gt;
&lt;p&gt;还有 &#39;!&#39; 也可以调出一执行过的 Shell 命令。&lt;br /&gt;
格式：! 序号&lt;br /&gt;
功能：执行指定序号的 Shell 命令，‘!’ 后面也可以跟字符串来调用已执行过的以该字符串开头的 Shell 命令。&lt;/p&gt;
&lt;p&gt;~&lt;br /&gt;
&lt;font color=&#34;red&#34;&gt;在 ContOS7 上不知道为什么不能用 &#39;!&#39; 命令，man 命令提示没有 &#39;!&#39; 命令手册&lt;/font&gt;&lt;br /&gt;
~&lt;br /&gt;
 原来是感叹号与后面的的序号之间没有空格。&lt;/p&gt;
&lt;p&gt;!! 是执行上一条命令&lt;/p&gt;
&lt;h2 id=&#34;通配符&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#通配符&#34;&gt;#&lt;/a&gt; 通配符&lt;/h2&gt;
&lt;p&gt;* : 通配 0 个或多个字符&lt;/p&gt;
&lt;p&gt;？ ：通配任意单个字符&lt;/p&gt;
&lt;p&gt;&lt;code&gt;* ？ [] - !&lt;/code&gt;  可以组成字符组。&lt;/p&gt;
&lt;p&gt;例子：&lt;/p&gt;
&lt;p&gt;ls *.png 列出所有 PNG 图片&lt;/p&gt;
&lt;p&gt;ls a?    列出首字母是 a, 文件名只有两个字符的所有文件&lt;/p&gt;
&lt;p&gt;ls [abc]* 列出首字母是 a、b、c 的所有文件&lt;/p&gt;
&lt;h2 id=&#34;别名&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#别名&#34;&gt;#&lt;/a&gt; 别名&lt;/h2&gt;
&lt;p&gt;格式： alinas 【别名 =‘标准 Shell 命令行’】&lt;br /&gt;
功能：查看和设置别名&lt;/p&gt;
&lt;p&gt;不加参数时查看别名。&lt;/p&gt;
&lt;h2 id=&#34;去除特殊符号的意义&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#去除特殊符号的意义&#34;&gt;#&lt;/a&gt; 去除特殊符号的意义&lt;/h2&gt;
&lt;p&gt;Linux 系统中有许多符号具有特殊的含义。如！表示去历史记录，$ 表示取变量的值，`` 反引号表示取命令的执行结果，等等。&lt;/p&gt;
&lt;p&gt;三种方法可以去除特殊符号的意义&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;反斜杠 \&lt;/li&gt;
&lt;li&gt;单引号 (&#39;&#39;) 使任何特殊字符都不转义，原样输出。&lt;/li&gt;
&lt;li&gt;双引号 (&amp;quot;&amp;quot;) 只有以下四种情况下会转义：&lt;br /&gt;
$(美元符号)-- 取变量的值；&lt;br /&gt;
``(反引号)-- 命令替换；&lt;br /&gt;
\(反斜杠)-- 单个字符禁止（转义）；&lt;br /&gt;
!(感叹号)-- 历史命令替换。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;重定向&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#重定向&#34;&gt;#&lt;/a&gt; 重定向&lt;/h2&gt;
&lt;p&gt;Linux 系统中通常利用键盘输入数据，命令执行结果输出到屏幕上。也就是说 Linux 的默认标准输入时键盘，默认标准输出和标准错误输出都是屏幕。&lt;br /&gt;
Shell 中，不使用系统默认的输入输出端口，而是重新指定至文件的情况称为重定向。&lt;/p&gt;
&lt;h3 id=&#34;输出重定向&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#输出重定向&#34;&gt;#&lt;/a&gt; 输出重定向&lt;/h3&gt;
&lt;p&gt;输出重定向就是命令的执行结果不显示在标准输出（屏幕）上，而是保存到某一文件中的操作，利用符号 “&amp;gt;” 来显示。&lt;/p&gt;
&lt;p&gt;但命令的错误输出信息还是会显示在屏幕上，正确输出会在文件中。&lt;/p&gt;
&lt;h3 id=&#34;附加输出重定向&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#附加输出重定向&#34;&gt;#&lt;/a&gt; 附加输出重定向&lt;/h3&gt;
&lt;p&gt;与输出重定向相比附加重定向将内容追加到原有内容之后，不会覆盖原内容。利用符号 “&amp;gt;&amp;gt;” 来实现。&lt;/p&gt;
&lt;h3 id=&#34;错误输出重定向&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#错误输出重定向&#34;&gt;#&lt;/a&gt; 错误输出重定向&lt;/h3&gt;
&lt;p&gt;Shell 中的标准输出与错误输出是两个独立的操作。错误输出也可以进行重定向。利用符号 “2&amp;gt;” 来实现。&lt;/p&gt;
&lt;h3 id=&#34;组合输出重定向&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#组合输出重定向&#34;&gt;#&lt;/a&gt; 组合输出重定向&lt;/h3&gt;
&lt;p&gt;若要将正确输出和错误输出重定向至某个文件，而屏幕上不显示任何内容，则可以利用符号 “&amp;amp;&amp;gt;” 来实现组合输出重定向功能。&lt;/p&gt;
&lt;h3 id=&#34;输入重定向&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#输入重定向&#34;&gt;#&lt;/a&gt; 输入重定向&lt;/h3&gt;
&lt;p&gt;输入重定向是从某个文件读入数据，用 “&amp;lt;” 符号来实现。由于大多数命令都已参数的形式在命令行上指定输入文件，所以并不常用。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;符号&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;command &amp;lt;file&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;将 file 文件中的内容作为 command 的输入。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;command &amp;lt;&amp;lt;END&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;从标准输入（键盘）中读取数据，直到遇见分界符 END 才停止（分界符可以是任意的字符串，用户自己定义）。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;command &lt;file1 &gt;file2&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;将 file1 作为 command 的输入，并将 command 的处理结果输出到 file2。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;管道&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#管道&#34;&gt;#&lt;/a&gt; 管道&lt;/h2&gt;
&lt;p&gt;学习管道之前我们先了解一下 linux 的命令执行顺序&lt;/p&gt;
&lt;h3 id=&#34;命令执行顺序控制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#命令执行顺序控制&#34;&gt;#&lt;/a&gt; 命令执行顺序控制&lt;/h3&gt;
&lt;p&gt;通常情况下，我们在终端只能执行一条命令，然后按下回车执行，那么如何执行多条命令呢？&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;span&gt;h&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;顺序执行多条命令：command1&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;command2&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;command3&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;简单的顺序指令可以通过 &lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;来实现&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;有条件的执行多条命令：which command1 &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; command2 &lt;span class=&#34;token operator&#34;&gt;||&lt;/span&gt; command3 &lt;span class=&#34;token comment&#34;&gt;## which 命令用于查找文件。&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;token builtin class-name&#34;&gt;:&lt;/span&gt; 如果前一条命令执行成功则执行下一条命令，如果command1执行成功（返回0）,则执行command2&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;||&lt;/span&gt; :与&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;命令相反，执行不成功时执行这个命令&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token variable&#34;&gt;$?&lt;/span&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;:&lt;/span&gt; 存储上一次命令的返回结果&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;管道命令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#管道命令&#34;&gt;#&lt;/a&gt; 管道命令&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;管道是一种通信机制，通常用于进程间的通信（也可通过 socket 进行网络通信），它表现出来的形式将前面每一个进程的输出（stdout）直接作为下一个进程的输入（stdin）。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;管道命令使用 | 作为界定符号，管道命令与上面说的连续执行命令不一样。&lt;/p&gt;
&lt;p&gt;管道命令仅能处理 standard output, 对于 standard error output 会予以忽略。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;less,more,head,tail...都是可以接受standard input的命令，所以他们是管道命令&lt;/code&gt; &lt;br /&gt;
 &lt;code&gt;ls,cp,mv并不会接受standard input的命令，所以他们就不是管道命令了。&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;管道命令必须要能够接受来自前一个命令的数据成为 standard input 继续处理才行。&lt;/p&gt;
&lt;p&gt;第一个管道命令&lt;br /&gt;
 &lt;code&gt;$ ls -al /etc | less&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;通过管道将 ls -al 的输出作为 下一个命令 less 的输入，方便浏览。&lt;/p&gt;
&lt;h2 id=&#34;文本处理工具&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#文本处理工具&#34;&gt;#&lt;/a&gt; 文本处理工具&lt;/h2&gt;
&lt;h3 id=&#34;提取文本&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#提取文本&#34;&gt;#&lt;/a&gt; 提取文本&lt;/h3&gt;
&lt;h4 id=&#34;查看文件内容&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#查看文件内容&#34;&gt;#&lt;/a&gt; 查看文件内容&lt;/h4&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;cat&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;格式：cat 【选项】 文件列表&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;功能：显示文本文件内容&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;选项说明：-n  表示在每一行前面显示行号。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;more&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;格式：more 文件&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;功能： 分屏显示文本文件的内容。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;只能向后翻阅&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;less&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;与more命令非常相似，也能分屏显示文本文件的内容。用户可以用上下箭头、Enter键、Space键前后翻阅文本内容。使用Q键退出命令。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;less比more命令更方便。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&#34;产看文件摘录&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#产看文件摘录&#34;&gt;#&lt;/a&gt; 产看文件摘录&lt;/h4&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;head&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;格式：head 【选项】 文件&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;功能：显示文本文件的开头部分，默认显示文件的前十行&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;主要选项说明： &lt;span class=&#34;token string&#34;&gt;&#39;-n 数字&#39;&lt;/span&gt; 表示指定显示的行数&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;tail&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;与head命令非常相似，用于显示文件的结尾部分，默认显示最后10行，也可以用&lt;span class=&#34;token string&#34;&gt;&#39;-n 数字&#39;&lt;/span&gt;选项&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;还可以用&lt;span class=&#34;token string&#34;&gt;&#39;-f&#39;&lt;/span&gt;选项表示跟进文件后续增加，通常用于监控日志文件，便于网络服务的排错处理。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&#34;按关键字提取文本&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#按关键字提取文本&#34;&gt;#&lt;/a&gt; 按关键字提取文本&lt;/h4&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;grep&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;按照关键字进行文本的提取及过滤出含有某个关键字的行。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;grep命令通常与管道配合使用，通常的选项及含义如下：&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;-i 忽略大小写&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;-n 行号显示&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;-v 取反&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;相对的结果&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;^  以……开头&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;$  以……结尾&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;-r 以递归方式搜索目录&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;-AX 包括每个匹配项的后X行&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;-BX 包括每个匹配项的前X行&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;--color 以颜色突出显示匹配项&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;-w 精确匹配某个单词&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;img data-src=&#34;image010.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;正则匹配模式&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image011.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;实例&lt;br /&gt;
&lt;img data-src=&#34;image012.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;按列或字段提取文本&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#按列或字段提取文本&#34;&gt;#&lt;/a&gt; 按列或字段提取文本&lt;/h4&gt;
&lt;p&gt;按列或字段提取文本的命令常用的包括 cut 和 awk，通常与管道配合使用。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;cut&lt;br /&gt;
 格式：cut -d 字符 -f 数字 file&lt;br /&gt;
 功能：提取文件 file 中以某字符未分割符的某列（或某字段）。其中 - d 后面的字符表示分隔符，-f 后面的数字表示提取的列数。&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;root@node ~&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;# cat /etc/passwd | cut -d : -f 1,3&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;root:0&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;bin:1&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;daemon:2&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;adm:3&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;lp:4&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;sync:5&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;shutdown:6&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;halt:7&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;mail:8&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;operator:11&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;games:12&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;ftp:14&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;【略】&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;显示文件/etc/passwd中以‘:’作为分隔符的第一列和第三列&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;cut 命令还可以接 - c 选项，表示义字符个数截取。&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;root@node ~&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;# cat /etc/passwd | cut -c 1-3&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;roo&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;bin&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;dae&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;adm&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;lp:&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;syn&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;shu&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;【略】&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;表示截取 /etc/passwd 文件中的第 1~3 个字符&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;awk&lt;br /&gt;
awk 是一种很棒的语言，它适合文本处理和报表生成，其语法较为常见，借鉴了某些语言的一些精华，如 C 语言等。在 Linux 系统日常处理工作中，发挥很重要的作用，掌握了 awk 将会使你的工作变的高大上。awk 是三剑客的老大，利剑出鞘，必会不同凡响。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;简单来说，awk 是把文件逐行的读入，以空格为默认分隔符将每行切片，切开的部分再进行各种分析处理。&lt;/p&gt;
&lt;p&gt;awk &#39;{pattern + action}&#39; {filename}&lt;br /&gt;
 其中 pattern 表示 AWK 在数据中查找的内容，而 action 是在找到匹配内容时所执行的一系列命令。&lt;br /&gt;
filename 的 {} 实际是不用写的。&lt;br /&gt;
awk 语言的最基本功能是在文件或者字符串中基于指定规则浏览和抽取信息，awk 抽取信息后，才能进行其他文本操作。完整的 awk 脚本通常用来格式化文本文件中的信息。&lt;br /&gt;
通常，awk 是以文件的一行为处理单位的。awk 每接收文件的一行，然后执行相应的命令，来处理文本。&lt;/p&gt;
&lt;p&gt;awk [选项]&#39; 脚本命令文件名&lt;/p&gt;
&lt;p&gt;常用选项:&lt;/p&gt;
&lt;p&gt;-F 指定输入分隔符，默认分割符是空格，如 - F:&lt;br /&gt;
-f file 从脚本文件中读取 awk 脚本指令&lt;/p&gt;
&lt;p&gt;以：为分隔符，显示第 1 和 5 列&lt;br /&gt;
 awk -F : &#39;{printf $1,$5}&#39; /etc/passwd&lt;/p&gt;
&lt;p&gt;awk 内置变量:&lt;/p&gt;
&lt;p&gt;FILENAME 文件名&lt;br /&gt;
 FNR  浏览文件的记录数&lt;br /&gt;
 NF  浏览记录的域的个数 (列数)&lt;br /&gt;
 NR  已读的记录数 (行数)&lt;br /&gt;
$n  $0 变量是指整条记录。&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mtext&gt;表示当前行的第一域&lt;/mtext&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mtext&gt;列&lt;/mtext&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;.&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;.&lt;/mi&gt;&lt;mtext&gt;以此类推&lt;/mtext&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;1表示当前行的第一域(列) ..以此类推
&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;表&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;示&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;当&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;前&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;行&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;的&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;第&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;一&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;域&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;列&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;以&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;此&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;类&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;推&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;NF  表示最后一列的信息&lt;/p&gt;
&lt;p&gt;案例&lt;br /&gt;
&lt;img data-src=&#34;image015.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;分析文本&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#分析文本&#34;&gt;#&lt;/a&gt; 分析文本&lt;/h3&gt;
&lt;h4 id=&#34;统计文本信息&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#统计文本信息&#34;&gt;#&lt;/a&gt; 统计文本信息&lt;/h4&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;wc&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;格式：wc 【选项】 文件&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;功能：显示文本文件的行数、字数和字符数&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;主要选项说明：&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;-c      仅显示问价的字节数&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;-l      仅显示问价的行数&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;-w      仅显示文件的单词数&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;root@node ~&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;# wc /etc/passwd&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token number&#34;&gt;44&lt;/span&gt;  &lt;span class=&#34;token number&#34;&gt;88&lt;/span&gt;  &lt;span class=&#34;token number&#34;&gt;2302&lt;/span&gt;   /etc/passwd&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;wc命令依次显示文件的行数、单词数、字节数及文件名。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&#34;排序命令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#排序命令&#34;&gt;#&lt;/a&gt; 排序命令&lt;/h4&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;sort&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;sort&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;-fbMnrtuk&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;file or stdin&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;参数&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;-f ：忽略大小写的差异，例如A 与a 视为编码相同&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;-b ：忽略最前面的空格部分&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;-M ：以月份的名字来排序，例如JAN, DEC 等等的排序方法&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;-n ：使用『纯数字』进行排序默认是以文字型态来排序的&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;-r ：反向排序&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;-u ：就是uniq ，相同的资料中，仅出现一行代表&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;-t ：分隔符号，预设是用&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;tab&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; 键来分隔&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;-k ：以那个区间&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;field&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; 来进行排序的意思&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;处理文本&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#处理文本&#34;&gt;#&lt;/a&gt; 处理文本&lt;/h3&gt;
&lt;h4 id=&#34;转换字符&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#转换字符&#34;&gt;#&lt;/a&gt; 转换字符&lt;/h4&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;tr&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Linux &lt;span class=&#34;token function&#34;&gt;tr&lt;/span&gt; 命令用于转换或删除文件中的字符。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;tr&lt;/span&gt; 指令从标准输入设备读取数据，经过字符串转译后，将结果输出到标准输出设备。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;语法&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;tr&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;-cdst&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;--help&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;--version&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;第一字符集&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;第二字符集&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;  &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;tr&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;OPTION&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;…SET1&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;SET2&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;参数说明：&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;-c, --complement：反选设定字符。也就是符合 SET1 的部份不做处理，不符合的剩余部份才进行转换&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;-d, --delete：删除指令字符&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;-s, --squeeze-repeats：缩减连续重复的字符成指定的单个字符&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;-t, --truncate-set1：削减 SET1 指定范围，使之与 SET2 设定长度相等&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;--help：显示程序用法信息&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;--version：显示程序本身的版本信息&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;字符集合的范围：&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;NNN 八进制值的字符 NNN &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; to &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt; 为八进制值的字符&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt; 反斜杠&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;a Ctrl-G 铃声&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;b Ctrl-H 退格符&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;f Ctrl-L 走行换页&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;n Ctrl-J 新行&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;r Ctrl-M 回车&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;t Ctrl-I tab键&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;v Ctrl-X 水平制表符&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;CHAR1-CHAR2 ：字符范围从 CHAR1 到 CHAR2 的指定，范围的指定以 ASCII 码的次序为基础，只能由小到大，不能由大到小。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;CHAR*&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; ：这是 SET2 专用的设定，功能是重复指定的字符到与 SET1 相同长度为止&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;CHAR*REPEAT&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; ：这也是 SET2 专用的设定，功能是重复指定的字符到设定的 REPEAT 次数为止&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;REPEAT 的数字采 &lt;span class=&#34;token number&#34;&gt;8&lt;/span&gt; 进位制计算，以 &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt; 为开始&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;:alnum:&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; ：所有字母字符与数字&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;:alpha:&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; ：所有字母字符&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;34&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;:blank:&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; ：所有水平空格&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;35&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;:cntrl:&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; ：所有控制字符&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;36&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;:digit:&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; ：所有数字&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;37&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;:graph:&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; ：所有可打印的字符&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;不包含空格符&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;38&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;:lower:&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; ：所有小写字母&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;39&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;:print:&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; ：所有可打印的字符&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;包含空格符&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;40&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;:punct:&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; ：所有标点字符&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;41&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;:space:&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; ：所有水平与垂直空格符&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;42&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;:upper:&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; ：所有大写字母&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;43&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;:xdigit:&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; ：所有 &lt;span class=&#34;token number&#34;&gt;16&lt;/span&gt; 进位制的数字&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;44&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;CHAR&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; ：所有符合指定的字符&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;等号里的 CHAR，代表你可自订的字符&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;45&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;实例&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;46&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;将文件testfile中的小写字母全部转换成大写字母，此时，可使用如下命令：&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;47&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;48&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;cat&lt;/span&gt; testfile &lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;tr&lt;/span&gt; a-z A-Z &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;49&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;testfile文件中的内容如下：&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;50&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;51&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;$ &lt;span class=&#34;token function&#34;&gt;cat&lt;/span&gt; testfile         &lt;span class=&#34;token comment&#34;&gt;#testfile 原来的内容  &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;52&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Linux networks are becoming &lt;span class=&#34;token function&#34;&gt;more&lt;/span&gt; and &lt;span class=&#34;token function&#34;&gt;more&lt;/span&gt; common, &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;53&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;but scurity is often an overlooked  &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;54&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;issue. Unfortunately, &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; today’s environment all networks &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;55&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;are potential hacker targets,  &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;56&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;fro0m tp-secret military research networks to small home LANs.  &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;57&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Linux Network Securty focuses on securing Linux &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; a &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;58&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;networked environment, where the  &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;59&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;security of the entire network needs to be considered&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;60&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;rather than just isolated machines.  &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;61&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;It uses a mix of theory and practicl techniques to &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;62&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;teach administrators how to &lt;span class=&#34;token function&#34;&gt;install&lt;/span&gt; and  &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;63&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;use security applications, as well as how the &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;64&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;applcations work and why they are necesary. &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;65&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;使用 &lt;span class=&#34;token function&#34;&gt;tr&lt;/span&gt; 命令大小写转换后，得到如下输出结果：&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;66&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;67&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;$ &lt;span class=&#34;token function&#34;&gt;cat&lt;/span&gt; testfile &lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;tr&lt;/span&gt; a-z A-Z &lt;span class=&#34;token comment&#34;&gt;#转换后的输出  &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;68&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;LINUX NETWORKS ARE BECOMING MORE AND MORE COMMON, BUT SCURITY IS OFTEN AN OVERLOOKED  &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;69&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;ISSUE. UNFORTUNATELY, IN TODAY’S ENVIRONMENT ALL NETWORKS ARE POTENTIAL HACKER TARGETS,  &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;70&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;FROM TP-SECRET MILITARY RESEARCH NETWORKS TO SMALL &lt;span class=&#34;token environment constant&#34;&gt;HOME&lt;/span&gt; LANS.  &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;71&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;LINUX NETWORK SECURTY FOCUSES ON SECURING LINUX IN A NETWORKED ENVIRONMENT, WHERE THE  &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;72&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;SECURITY OF THE ENTIRE NETWORK NEEDS TO BE CONSIDERED RATHER THAN JUST ISOLATED MACHINES.  &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;73&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;IT USES A MIX OF THEORY AND PRACTICL TECHNIQUES TO TEACH ADMINISTRATORS HOW TO INSTALL AND  &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;74&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;USE SECURITY APPLICATIONS, AS WELL AS HOW THE APPLCATIONS WORK AND WHY THEY ARE NECESARY. &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;75&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;大小写转换，也可以通过&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;:lower&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;:upper&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;参数来实现。例如使用如下命令：&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;76&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;77&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;cat&lt;/span&gt; testfile &lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;tr&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;:lower:&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;:upper:&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;78&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;输出结果如下：&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;79&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;80&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;$ &lt;span class=&#34;token function&#34;&gt;cat&lt;/span&gt; testfile &lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;tr&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;:lower:&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;:upper:&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;#转换后的输出  &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;81&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;LINUX NETWORKS ARE BECOMING MORE AND MORE COMMON, BUT SCURITY IS OFTEN AN OVERLOOKED  &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;82&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;ISSUE. UNFORTUNATELY, IN TODAY’S ENVIRONMENT ALL NETWORKS ARE POTENTIAL HACKER TARGETS,  &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;83&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;FROM TP-SECRET MILITARY RESEARCH NETWORKS TO SMALL &lt;span class=&#34;token environment constant&#34;&gt;HOME&lt;/span&gt; LANS.  &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;84&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;LINUX NETWORK SECURTY FOCUSES ON SECURING LINUX IN A NETWORKED ENVIRONMENT, WHERE THE  &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;85&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;SECURITY OF THE ENTIRE NETWORK NEEDS TO BE CONSIDERED RATHER THAN JUST ISOLATED MACHINES.  &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;86&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;IT USES A MIX OF THEORY AND PRACTICL TECHNIQUES TO TEACH ADMINISTRATORS HOW TO INSTALL AND  &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;87&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;USE SECURITY APPLICATIONS, AS WELL AS HOW THE APPLCATIONS WORK AND WHY THEY ARE NECESARY.&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&#34;查找替换&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#查找替换&#34;&gt;#&lt;/a&gt; 查找替换&lt;/h4&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;sed&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;stream editor的缩写，用于对文本流进行查找替换操作，不改变源文件。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Linux &lt;span class=&#34;token function&#34;&gt;sed&lt;/span&gt; 命令是利用脚本来处理文本文件。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;sed&lt;/span&gt; 可依照脚本的指令来处理、编辑文本文件。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Sed 主要用来自动编辑一个或多个文件、简化对文件的反复操作、编写转换程序等。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;语法&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;sed&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;-hnV&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;-e&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;script&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;-f&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;script文件&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;文本文件&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;参数说明：&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;-e&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;script&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;或--expression&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;script&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; 以选项中指定的script来处理输入的文本文件。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;-f&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;script文件&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;或--file&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;script文件&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; 以选项中指定的script文件来处理输入的文本文件。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;-h或--help 显示帮助。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;-n或--quiet或--silent 仅显示script处理后的结果。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;-V或--version 显示版本信息。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;动作说明：&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;a ：新增， a 的后面可以接字串，而这些字串会在新的一行出现&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;目前的下一行&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;～&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;c ：取代， c 的后面可以接字串，这些字串可以取代 n1,n2 之间的行！&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;d ：删除，因为是删除啊，所以 d 后面通常不接任何咚咚；&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;i ：插入， i 的后面可以接字串，而这些字串会在新的一行出现&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;目前的上一行&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;；&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;p ：打印，亦即将某个选择的数据印出。通常 p 会与参数 &lt;span class=&#34;token function&#34;&gt;sed&lt;/span&gt; -n 一起运行～&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;s ：取代，可以直接进行取代的工作哩！通常这个 s 的动作可以搭配正规表示法！例如 &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;,20s/old/new/g 就是啦！&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;实例&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;在testfile文件的第四行后添加一行，并将结果输出到标准输出，在命令行提示符下输入如下命令：&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;sed&lt;/span&gt; -e 4a&lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;newLine testfile &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;首先查看testfile中的内容如下：&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;34&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;35&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;$ &lt;span class=&#34;token function&#34;&gt;cat&lt;/span&gt; testfile &lt;span class=&#34;token comment&#34;&gt;#查看 testfile 中的内容  &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;36&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;HELLO LINUX&lt;span class=&#34;token operator&#34;&gt;!&lt;/span&gt;  &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;37&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Linux is a &lt;span class=&#34;token function&#34;&gt;free&lt;/span&gt; unix-type opterating system.  &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;38&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;This is a linux testfile&lt;span class=&#34;token operator&#34;&gt;!&lt;/span&gt;  &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;39&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Linux &lt;span class=&#34;token builtin class-name&#34;&gt;test&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;40&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;使用sed命令后，输出结果如下：&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;41&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;42&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;$ &lt;span class=&#34;token function&#34;&gt;sed&lt;/span&gt; -e 4a&lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;newline testfile &lt;span class=&#34;token comment&#34;&gt;#使用 sed 在第四行后添加新字符串  &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;43&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;HELLO LINUX&lt;span class=&#34;token operator&#34;&gt;!&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;#testfile 文件原有的内容  &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;44&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Linux is a &lt;span class=&#34;token function&#34;&gt;free&lt;/span&gt; unix-type opterating system.  &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;45&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;This is a linux testfile&lt;span class=&#34;token operator&#34;&gt;!&lt;/span&gt;  &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;46&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Linux &lt;span class=&#34;token builtin class-name&#34;&gt;test&lt;/span&gt;  &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;47&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;newline&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;img data-src=&#34;image013.png&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
&lt;img data-src=&#34;image014.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;linux中的shell如何切换&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#linux中的shell如何切换&#34;&gt;#&lt;/a&gt; Linux 中的 shell 如何切换&lt;/h2&gt;
&lt;p&gt;转载自&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2plcnJ5XzExMjYvYXJ0aWNsZS9kZXRhaWxzLzg1MjI0NzM3&#34;&gt; https://blog.csdn.net/jerry_1126/article/details/85224737&lt;/span&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;方法一: chsh -s /bin/ksh&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;root@host ~&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;# chsh -s /bin/ksh           # 修改用户默认的 shell 为 ksh&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Changing shell &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; root.&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Shell not changed.&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;root@host ~&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;# egrep &#39;root&#39; /etc/passwd   # 查看修改是否成功，按 CTRL+D 退出下次生效&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;root:x:0:0:root:/root:/bin/ksh &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;方法二: &lt;span class=&#34;token function&#34;&gt;usermod&lt;/span&gt; -s /bin/ksh root&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;root@host ~&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;# usermod -s /bin/ksh root&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;其他命令或者相互操作:&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;查看当前使用的shell&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;root@host ~&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;# echo $SHELL&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;/bin/bash&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 或者&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;root@host ~&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;# egrep &#39;root&#39; /etc/passwd&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;root:x:0:0:root:/root:/bin/bash &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;查看所有可用的shell&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;root@host ~&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;# cat /etc/shells&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;/bin/sh&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;/bin/bash&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;/bin/ksh&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;/bin/zsh&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;/bin/csh&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;..&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;..&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;..&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 或者&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;34&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;35&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;root@host ~&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;# chsh -l&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;36&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;/bin/sh&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;37&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;/bin/bash&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;38&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;/bin/ksh&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;39&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;/bin/zsh&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;40&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;/bin/csh&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;vi编辑器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#vi编辑器&#34;&gt;#&lt;/a&gt; vi 编辑器&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;image001.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h1 id=&#34;用户-组和权限&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#用户-组和权限&#34;&gt;#&lt;/a&gt; 用户、组和权限&lt;/h1&gt;
&lt;p&gt;转载自&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vemhvbmdndWl5YW8vcC85MTY1OTE3Lmh0bWw=&#34;&gt; https://www.cnblogs.com/zhongguiyao/p/9165917.html&lt;/span&gt; 超级详细&lt;/p&gt;
&lt;p&gt;Linux 系统是一个多用户操作系统，从本机或远程登录的多个用户能共同使用同一计算机，同时访问同一设备。&lt;br /&gt;
Linux 系统进行用户和组管理的目的在于保证系统中数据与文件的安全。&lt;/p&gt;
&lt;h2 id=&#34;用户账户管理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#用户账户管理&#34;&gt;#&lt;/a&gt; 用户账户管理&lt;/h2&gt;
&lt;p&gt;Linux/Unix 是一个用户、多任务的操作系统；在讲 Linux 账号及账户组管理之前，先简单了解一下多用户、多任务操作系统的基本概念。&lt;/p&gt;
&lt;h3 id=&#34;linux的单用户多任务&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#linux的单用户多任务&#34;&gt;#&lt;/a&gt; Linux 的单用户多任务&lt;/h3&gt;
&lt;p&gt;在 Linux 下，当你登录后，你也可以同时开启很多的服务任务和进程，而各自服务都会跑的很好却对其他任务没有任何影响，这种登录一个用户登录系统执行多个服务任务和进程的情况，就称为单用户多任务。&lt;/p&gt;
&lt;h3 id=&#34;linux的多用户多任务&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#linux的多用户多任务&#34;&gt;#&lt;/a&gt; Linux 的多用户多任务&lt;/h3&gt;
&lt;p&gt;有时可能是很多用户同时用同一个系统，如公司几十个运维人员，每台机器都可以和被若干个运维人员登录部署或解决相关故障问题，但并不是所有的运维人员都要做同一件事，所以就有了多任务、多用户的情况。&lt;/p&gt;
&lt;p&gt;值得注意的是：多用户、多任务并不是大家同时挤到一起，在一台机器的键盘和显示器前来操作机器，多用户可能是通过 SSH 客户端工具等远程工具等远程登录服务器来进行，比如对服务器的运程控制，只要具有相关用户的权限，任何人都是可以上去操作访问服务器。&lt;/p&gt;
&lt;h2 id=&#34;linux系统用户角色划分&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#linux系统用户角色划分&#34;&gt;#&lt;/a&gt; linux 系统用户角色划分&lt;/h2&gt;
&lt;p&gt;用户在系统中是分角色的，在 Linux 系统中，由于角色的不同，权限和所完成的任务也不同；值得注意的是用户的角色是通过 UID 和 GID 识别的；特别是 UID，在运维工作中，一个 UID 是唯一标识一个系统用户的账号。&lt;/p&gt;
&lt;p&gt;用户账户：&lt;/p&gt;
&lt;p&gt;超级用户 root（0）&lt;br /&gt;
程序用户（1~499）&lt;br /&gt;
普通用户（500~65535）&lt;/p&gt;
&lt;p&gt;超级用户：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;默认是root用户，其UID和GID均为0。在每台unix/linux操作系统中都是唯一且真实存在的，通过它可以登录系统，可以操作系统中任何文件
和命令，
拥有最高的管理权限。在生产环境，一般禁止root账号远程登录SSH连接服务器，以加强系统安全。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;普通用户：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;这类用户一般是由具备系统管理员root的权限的运维人员添加的。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;程序用户：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;与真实用户区分开来，这类用户的最大特点是安装系统后默认就会存在的，且默认情况不能登录系统，它们是系统正常运行
必不可少的，他们的存在主要是方便系统管理，满足相应的系统进程都文件属主的要求。例如系统默认的bin、adm、nodoby、mail用户等。
由于服务器角色的不同，有部分用不到的系统服务被禁止开机执行，因此，在做系统安全优化时，被禁止开机启动了的服务对应的虚拟用户
也是可以处理掉的(删除或注释)。
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;用户及用户组配置文件介绍&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#用户及用户组配置文件介绍&#34;&gt;#&lt;/a&gt; 用户及用户组配置文件介绍&lt;/h2&gt;
&lt;p&gt;Linux 系统中下的账户文件主要有 /etc/passwd、/etc/shadow、/etc/group、/etc/gshadow 四个文件。&lt;/p&gt;
&lt;h3 id=&#34;与用户相关的配置文件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#与用户相关的配置文件&#34;&gt;#&lt;/a&gt; 与用户相关的配置文件&lt;/h3&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;/etc/passwd:  &lt;span class=&#34;token comment&#34;&gt;#用户的配置文件， 保存用户账户的基本信息&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;/etc/shadow  &lt;span class=&#34;token comment&#34;&gt;#用户影子口令文件&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;用户的配置文件 /etc/passwd&lt;br /&gt;
/etc/passwd 文件中每行定义一个用户账号，有多少行就表示多少个账号，在一行中可以清晰的看出，各内容之间又通过”:” 号划分了 7 个字段，这 7 个字段分别定义了账号的不同属性，passwd 文件实际内容如下:&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;root@Web ~&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;# head -5 /etc/passwd&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;root:x:0:0:root:/root:/bin/bash&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;bin:x:1:1:bin:/bin:/sbin/nologin&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;daemon:x:2:2:daemon:/sbin:/sbin/nologin&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;adm:x:3:4:adm:/var/adm:/sbin/nologin&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;在 passwd 文件中，第一行内容就是超级用户 root 行，可以看到它的 uid 和 gid 都为 0. 为了方便理解，下面是各字段的描述：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;字段1：帐号名，这是用户登陆时使用的账户名称，在系统中是唯一的，不能重名&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;字段2：密码占位符x；早期的unix系统中，该字段是存放账户和密码的，由于安全原因，后来把这个密码字段内容移到/etc/shadow中了。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;　　　　　　这里可以看到一个字母x，表示该用户的密码是/etc/shadow文件中保护的。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;字段3：&lt;span class=&#34;token environment constant&#34;&gt;UID&lt;/span&gt;；范围是0-65535&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;字段4：GID；范围是0-65535；当添加用户时，默认情况下会同时建立一个与用户同名且&lt;span class=&#34;token environment constant&#34;&gt;UID&lt;/span&gt;和GID相同的组。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;字段5：用户说明；这个字段是对这个账户的说明&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;字段6：宿主目录；用户登陆后首先进入的目录，一般与&lt;span class=&#34;token string&#34;&gt;&#34;/home/用户名&#34;&lt;/span&gt;这样的目录&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;字段7：登录Shell   当前用户登陆后所使用的shell，在centos/rhel系统中，默认的shell是bash；如果不希望用户登陆系统，可以通过usermod&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;　　　　　　或者手动修改passwd设置，将该字段设置为/sbin/nologin 即可。大多数内置系统账户都是/sbin/nologin,这表示禁止登陆系统。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;　　　　　　这是出于安全考虑的。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&#34;passwd中有关uid的限制说明&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#passwd中有关uid的限制说明&#34;&gt;#&lt;/a&gt; passwd 中有关 UID 的限制说明&lt;/h4&gt;
&lt;p&gt;0：当用户的 UID 为 0 时，表示这个账户为超级用户；如果要增加一个系统管理员账户的话，只需将该账户的 UID 改为 0 即可。不建议&lt;br /&gt;
 1~499：这个范围是保留给系统用户使用的 UID&lt;br /&gt;
500~65535：普通账户 UID&lt;br /&gt;
 最后，来看一下 /etc/passwd 的权限：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;root@Web ~&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;# ls -l /etc/passwd&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;-rw-r--r--. &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; root root &lt;span class=&#34;token number&#34;&gt;1665&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;月  &lt;span class=&#34;token number&#34;&gt;11&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;14&lt;/span&gt;:13 /etc/passwd&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;因为每个用户登录时都需要取得 UID 和 GID 来判断权限问题，所以 /etc/passwd 的权限为 644，这样一来就会带来安全问题，即所有的用户都可以都 /etc/passwd 文件，即使文件内的密码是加密的，但还是存在一定的被攻击破解的安全隐患。因此，就有了 /etc/shadow 文件。&lt;/p&gt;
&lt;h4 id=&#34;用户的影子口令文件etcshadow&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#用户的影子口令文件etcshadow&#34;&gt;#&lt;/a&gt; 用户的影子口令文件 /etc/shadow&lt;/h4&gt;
&lt;p&gt;由于 passwd 文件必须要被所有的用户读，所以会带来安全隐患。而 shadow 文件就是为了解决这个安全隐患而增加的。&lt;/p&gt;
&lt;p&gt;来看一下 /etc/shadow 的权限：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;root@Web ~&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;# ls -l /etc/shadow&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;----------. &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; root root &lt;span class=&#34;token number&#34;&gt;1059&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;月  &lt;span class=&#34;token number&#34;&gt;11&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;14&lt;/span&gt;:13 /etc/shadow&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;其文件内容为：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;root@Web ~&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;# head -5 /etc/shadow&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;root:&lt;span class=&#34;token variable&#34;&gt;$6&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$jmM2rFzPCFbmqBkf&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$oz3AUooR3qaV5uXU67HcXlYiE3hNf0sSsunk1eBTDPrGUOM1xYCyesGoj&lt;/span&gt;.ZLTIzdiXEdrnnqNyC5g8SsRnxQm.:16338:0:99999:7:::&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;bin:*:15615:0:99999:7:::&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;daemon:*:15615:0:99999:7:::&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;adm:*:15615:0:99999:7:::&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;lp:*:15615:0:99999:7:::&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;和 /etc/passwd 一样，shadow 文件的每一行内容，也是以冒号 (:) 作为分隔符，共 9 个字段，其各个字段的意义如下表：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;字段1：帐号名称&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;字段2：加密的密码&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;字段3：最近更改密码的时间；从1970/1/1到上次修改密码的天数&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;字段4：禁止修改密码的天数；从1970/1/1开始，多少天之内不能修改密码，默认值为0&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;字段5：用户必须更改口令的天数；密码的最长有效天数，默认值为99999&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;字段6：警告更改密码的期限；密码过期之前警告天数，默认值为7；在用户密码过期前多少天提醒用户更改密码&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;字段7：不活动时间；密码过期之后账户宽限时间 &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;+5；在用户密码过期之后到禁用账户的天数&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;字段8：帐号失效时间，默认值为空；从1970/1/1日起，到用户被禁用的天数&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;字段9：保留字段（未使用），标志&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;密码过期：一旦超过密码过期日期，用户成功登陆，Linux 会强迫用户设置一个新密码，设置完成后才开启 Shell 程序&lt;br /&gt;
账户过期：若超过账户过期日期，Linux 会禁止用户登陆系统，即使输入正确密码，也无法登陆&lt;/p&gt;
&lt;h3 id=&#34;与用户组相关的配置文件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#与用户组相关的配置文件&#34;&gt;#&lt;/a&gt; 与用户组相关的配置文件&lt;/h3&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;/etc/group  &lt;span class=&#34;token comment&#34;&gt;#用户组配置文件&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;/etc/gshadow  &lt;span class=&#34;token comment&#34;&gt;#用户组的影子文件&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&#34;用户组配置文件etcgroup&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#用户组配置文件etcgroup&#34;&gt;#&lt;/a&gt; 用户组配置文件 /etc/group&lt;/h4&gt;
&lt;p&gt;/etc/group 文件是用户组的配置文件，内容包括用户与用户组，并且能显示用户归属哪个用户组，因为一个用户可以归属一个或多个不同的用户组；同一用户组的用户之间具有相似的特性。如果某个用户下有对系统管理有最重要的内容，最好让用户拥有独立的用户组，或者是把用户下的文件的权限设置为完全私有；另外 root 用户组一般不要轻易把普通用户加入进入。&lt;/p&gt;
&lt;p&gt;/etc/group 文件就是记录 GID 与用户组的文件。/etc/group 文件同 /etc/passwd 类似，其文件权限也是 644：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;root@Web ~&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;# ls -l /etc/group&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;-rw-r--r--. &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; root root &lt;span class=&#34;token number&#34;&gt;832&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;月  &lt;span class=&#34;token number&#34;&gt;11&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;14&lt;/span&gt;:13 /etc/group&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;/etc/group 的文件内容为：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;root@Web ~&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;# head -5 /etc/group&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;root:x:0:&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;bin:x:1:bin,daemon&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;daemon:x:2:bin,daemon&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;sys:x:3:bin,adm&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;adm:x:4:adm,daemon&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;group 文件各个字段的详细说明：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;字段1：组账户名称&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;字段2：密码占位符x；通常不需要设置该密码，由于安全原因，该密码被记录在/etc/gshadow中，因此显示为&lt;span class=&#34;token string&#34;&gt;&#39;x&#39;&lt;/span&gt;。这类似/etc/shadow&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;字段3：组账户GID号,用户组ID&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;字段4：本组的成员用户列表；加入这个组的所有用户账号&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&#34;用户组的影子文件etcgshadow&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#用户组的影子文件etcgshadow&#34;&gt;#&lt;/a&gt; 用户组的影子文件 /etc/gshadow&lt;/h4&gt;
&lt;p&gt;/etc/gshaow 是 /etc/group 的加密文件，比如用户组的管理密码就是存放在这个文件。/etc/group 和 /etc/gshadow 是互补的两个文件；比如大型服务器，针对很多用户和用户组，定制一些关系结构比较复杂的额权限模型，设置用户组密码是极有必要的。比如不想让一些非用户组成员永久拥有用户组的权限和特性，这时就可以通过密码验证的方式来让某些用户临时拥有一些用户组特性，这时就要用到用户组密码；/etc/gshadow 格式如下，每个用户组独占一行；&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;root@Web ~&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;# ls -l /etc/gshadow&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;----------. &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; root root &lt;span class=&#34;token number&#34;&gt;682&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;月  &lt;span class=&#34;token number&#34;&gt;11&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;14&lt;/span&gt;:13 /etc/gshadow&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;root@Web ~&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;# head -5 /etc/gshadow&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;root:::&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;bin:::bin,daemon&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;daemon:::bin,daemon&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;sys:::bin,adm&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;adm:::adm,daemon&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;gshadow 文件中各个字段详细说明：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;字段1：组账号的名称&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;字段2：加密后的密码字符串，这个字段可以空的或者&lt;span class=&#34;token operator&#34;&gt;!&lt;/span&gt;；如果是空的或有！，表示没有密码&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;字段3：本组的管理员列表；这个字段也可为空；如果有多个用户组管理员，用,号分隔&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;字段4：本组的成员列表；加入这个组的所有用户账户；列表中多个用户通过&lt;span class=&#34;token string&#34;&gt;&#34;,&#34;&lt;/span&gt;分隔&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;常用命令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#常用命令&#34;&gt;#&lt;/a&gt; 常用命令&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;su [-] username (后面可以跟 -, 也可以不跟)&lt;br /&gt;
 省略 username 就切换到 root 用户，需要输入 root 的密码。&lt;br /&gt;
当由 root 切换到普通用户时，不需要输入密码当 su 命令加上 - 后，会初始化当前用户的各种环境变量。&lt;br /&gt;
如果不加 - 切换到 root 用户时，当前目录没有变化；而如果加上 - 切换到 root 账户时，当前目录为 root 账户的家目录。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;sudo 命令&lt;br /&gt;
使用 su 切换身份需要知道 root 账号的密码，这样并不安全。为了提高安全性，我们可以使用 sudo 来执行需要 root 权限的功能。&lt;br /&gt;
sudo 由 root 指定，指定后用户只需输入自己账号的密码就能申请到 root 权限，而无需告诉任何人 root 密码，因此安全了不少。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;whoami 命令和 who am i 命令是不同的 2 个命令，whoami 命令：当前执行操作的用户名 who ami 命令：打印登陆当前 Linux 系统的用户名 真实登陆的用户名&lt;/p&gt;
&lt;p&gt;登陆账号 root 使用 su 命令切换到 hello 用户执行一遍命令，就可以看到区别了。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image009.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;附上思维导图&lt;br /&gt;
&lt;img data-src=&#34;image002.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h1 id=&#34;文件系统&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#文件系统&#34;&gt;#&lt;/a&gt; 文件系统&lt;/h1&gt;
&lt;h2 id=&#34;目录&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#目录&#34;&gt;#&lt;/a&gt; 目录&lt;/h2&gt;
&lt;p&gt;/: 根目录，一般根目录下只存放目录，不要存放文件&lt;br /&gt;
 /boot: 放置 linux 系统启动时用到的一些文件&lt;br /&gt;
 /dev: 存放 linux 系统下的设备文件&lt;br /&gt;
 /etc: 系统配置文件存放的目录&lt;br /&gt;
 /home: 系统默认的用户家目录，新增用户账号时，用户的家目录都存放在此目录下，～表示当前用户的家目录&lt;br /&gt;
 /usr: 应用程序存放目录&lt;br /&gt;
 /var: 放置系统执行过程中经常变化的文件，如随时更改的日志文件 /var/log&lt;/p&gt;
&lt;h2 id=&#34;linux文件目录详细信息&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#linux文件目录详细信息&#34;&gt;#&lt;/a&gt; Linux 文件目录详细信息&lt;/h2&gt;
&lt;h3 id=&#34;文件属主和属组&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#文件属主和属组&#34;&gt;#&lt;/a&gt; 文件属主和属组&lt;/h3&gt;
&lt;p&gt;为了保护系统的安全性，Linux 系统对不同的用户访问同一文件 (包括目录文件) 的权限做了不同的规定。&lt;br /&gt;
在 Linux 系统中，用户是按组分类的，一个用户属于一个或多个组。&lt;br /&gt;
对于文件来说，它都有一个特定的所有者，对该文件具有所有权的用户。&lt;br /&gt;
因此，Linux 系统按文件所有者、文件所有者同组用户和其他用户来规定了不同的文件访问权限。&lt;/p&gt;
&lt;p&gt;使用命令 ll (ls -l 的缩写) 即可查看目录详细信息&lt;/p&gt;
&lt;p&gt;如图，目录详细信息介绍&lt;br /&gt;
&lt;img data-src=&#34;image004.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;文件类型：&lt;br /&gt;
&lt;img data-src=&#34;image006.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;文件权限&lt;br /&gt;
&lt;img data-src=&#34;image007.png&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
&lt;img data-src=&#34;image008.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;details class=&#34;success&#34;&gt;&lt;summary&gt;Example(点击展开)&lt;/summary&gt;&lt;div&gt;
&lt;p&gt;drwxr-xr-x&lt;br /&gt;
d: 目录&lt;br /&gt;
文件属主，可读可写可执行；用户组可读可执行；其他用户可读可执行。&lt;/p&gt;
&lt;/div&gt;&lt;/details&gt;
&lt;p&gt;硬链接：&lt;br /&gt;
&lt;img data-src=&#34;image005.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;相关命令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#相关命令&#34;&gt;#&lt;/a&gt; 相关命令&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;chmod: 修改文件的属性 (九个属性)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Linux 文件属性有两种设置方法，一种是数字，一种是符号。&lt;/p&gt;
&lt;p&gt;1. 数字类型改变权限 Linux 文件的基本属性就有九个，分别是 owner/group/others 组别的 read/write/execute 属性，-rwxrwxrwx 可以使用数字来代表各个属性:&lt;br /&gt;
r:4&lt;br /&gt;
w:2&lt;br /&gt;
x:1&lt;br /&gt;
 每种身份 (owner/group/others) 各自的三个权限 (r/w/x) 分数是需要累加的，例如 a.txt 的权限为: 【-rwxrwx---】 :&lt;br /&gt;
owner = rwx = 4+2+1 =7&lt;br /&gt;
group =rwx =4+2+1=7&lt;br /&gt;
others=---= 0+0+0 =0&lt;br /&gt;
 所以该文件的权限就是 770&lt;/p&gt;
&lt;p&gt;例如：设置 aaa 的文件权限 &lt;code&gt;chmod 777 aaa&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;2. 符号类型改变权限&lt;br /&gt;
九个属性分别是 user,group、others&lt;br /&gt;
 三个群体使用 u, g, o 来代表各自，a 则代表 all 即全部&lt;br /&gt;
读写的属性就可以写成了 r,w,x&lt;/p&gt;
&lt;p&gt;操作符&lt;/p&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;th&gt;Operator&lt;/th&gt;
&lt;th&gt;说明
&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;tt&gt;+&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;为指定的用户类型增加权限
&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;tt&gt;-&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;去除指定用户类型的权限
&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;tt&gt;=&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;设置指定用户权限的设置，即将用户类型的所有权限重新设置
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;分析一个文件的属性为 [-rwxr-xr-x] 时，基本上就是:&lt;br /&gt;
user (u): 具有可读、可写、可执行的权限；&lt;br /&gt;
group 与 others (g/o): 具有可读与执行的权限。&lt;br /&gt;
使用方法:&lt;br /&gt;
 &lt;code&gt;chmod u=rwx,go=rx test.txt&lt;/code&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;chgrp: 更改文件属组&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;语法:&lt;br /&gt;
chgrp [-R] 属组名文件名&lt;br /&gt;
参数选项 - R: 递归更改文件属组，就是在更改某个目录文件的属组时，如果加上 - R 的参数，那么该目录下的所有文件的属组都会更改。&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;chown: 更改文件属主，也可以同时更改文件属组&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;语法:&lt;br /&gt;
chown [-R] 属主名文件名&lt;br /&gt;
 chown [-R] 属主名：属组名文件名&lt;/p&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;文件默认权限&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;umask 就是指定当前用户在建立文件或者目录时候的权限默认值&lt;br /&gt;
查看 umask 值:&lt;br /&gt;
umask // 以数字类型显示&lt;br /&gt;
 umask-S // 以符号类型显示&lt;/p&gt;
&lt;p&gt;umask 值默认是 022&lt;br /&gt;
 建立文件，最高权限是 666: -rw-w-rw-&lt;br /&gt;
 建立目录，最高权限是 777: drwxrwxrwx&lt;/p&gt;
&lt;p&gt;umask 的数字指的是该默认值需要减掉的权限，创建一个新的文件权限是 644 (666-022) , 创建一个新的目录权限是 755 (777-022)&lt;/p&gt;
&lt;h1 id=&#34;shell脚本&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#shell脚本&#34;&gt;#&lt;/a&gt; Shell 脚本&lt;/h1&gt;
&lt;p&gt;Shell 脚本设计就是根据程序设计的三种基本结构，即顺序、选择和循环，以及 Shell 脚本的语法规则来来编写 Shell 脚本。&lt;/p&gt;
&lt;p&gt;为了能在不同的 Shell 环境下都解释执行 Shell 脚本的第一行最好为： &lt;code&gt;#!/bin/bash&lt;/code&gt;  申明该脚本有 bash 来解释，便于移植到其他系统上也以 bash 来解释。&lt;/p&gt;
&lt;h2 id=&#34;三种执行方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#三种执行方法&#34;&gt;#&lt;/a&gt; 三种执行方法&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;sh 命令&lt;br /&gt;
这种方法不需要把编辑好的脚本权设置为可执行。只需要在当前目录下输入 “sh 脚本名”，回车即可。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;./ 脚本名&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;添加可执行权限，然后在当前面目录下键入./ 脚本名，回车即可。&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;脚本名&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;首先需要添加可执行权限，然后把脚本所在目录添加到搜索路径（./bash_profile 文件）中。&lt;/p&gt;
&lt;p&gt;此后无论在哪里直接执行脚本名就可。&lt;/p&gt;
&lt;h2 id=&#34;shell命令的执行顺序&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#shell命令的执行顺序&#34;&gt;#&lt;/a&gt; Shell 命令的执行顺序&lt;/h2&gt;
&lt;h3 id=&#34;顺序执行&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#顺序执行&#34;&gt;#&lt;/a&gt; 顺序执行&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;顺序分隔符 (😉&lt;br /&gt;
多条命令可以在一行中输出，但各命令应以分号 (;) 隔开。&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;root@node ~&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;# cd /home;ifconfig &gt; 1.txt;echo 666&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;666&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;root@node home&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;# ls&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;.txt  hadoop&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;管道 (|)&lt;br /&gt;
 管道也是顺序执行&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;root@node home&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;# cat /etc/passwd |wc -l&gt; 1.txt&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;root@node home&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;# cat 1.txt &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;43&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;逻辑与和逻辑或&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#逻辑与和逻辑或&#34;&gt;#&lt;/a&gt; 逻辑与和逻辑或&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;逻辑与 (&amp;amp;&amp;amp;)&lt;br /&gt;
 逻辑与 (&amp;amp;&amp;amp;) 可以把两个或两个以上命令联系在一起。&lt;br /&gt;
 &lt;code&gt;command1&amp;amp;&amp;amp;command2&amp;amp;&amp;amp;....&amp;amp;&amp;amp;command&lt;/code&gt; &lt;br /&gt;
 功能：先运行 1，如果 1 成功则运行 2，否则不运行 2，依次类推。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;逻辑或 (||)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;逻辑或 (||) &lt;code&gt;command1||command2||....||command&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;先运行命令 1 如果运行不成功则运行命令 2，否则不运行命令 2，依次类推。&lt;/p&gt;
&lt;h2 id=&#34;脚本中的变量&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#脚本中的变量&#34;&gt;#&lt;/a&gt; 脚本中的变量&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;等号&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;两个注意点：等号前后不能有空格；当需要将一个带有空格的字符串赋给变量时要用单引号括起来。&lt;/p&gt;
&lt;p&gt;要改变变量的值，可以再次赋值。如要把它设置为只读，可在变量前面加上 readonly&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;root@node home&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;# readonly ct=$(date)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;root@node home&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;# ct=1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;bash: ct: 只读变量&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;read&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;read&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;格式：read 【选项】 变量名&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;功能：从标准输入设备读入变量的值&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;主要选项说明：&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;-p “提示语句”  屏幕上输出的语句&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;实例&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;root@node ~&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;# ./test.sh &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;hello world&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;2geshuzhi22 &lt;span class=&#34;token number&#34;&gt;33&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;22&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;33&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;root@node ~&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;# cat test.sh &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#!/bin/bash&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;hello world&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;read&lt;/span&gt; -p &lt;span class=&#34;token string&#34;&gt;&#34;2geshuzhi&#34;&lt;/span&gt; a b&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;$a&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;$b&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;引用命令执行结果&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;变量名&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;&lt;span class=&#34;token variable&#34;&gt;`&lt;/span&gt;命令&lt;span class=&#34;token variable&#34;&gt;`&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;两个反引号&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  或  变量名&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;&lt;span class=&#34;token variable&#34;&gt;$(&lt;/span&gt;命令&lt;span class=&#34;token variable&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;引用（访问）变量与 echo 命令&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;任何变量的引用都是变量前加上‘$’&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;echo&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;选项&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;显示的信息&#34;&lt;/span&gt; 或 $变量&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;-n 显示后并不自动换行&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;位置变量与 shift 命令&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;0,1&lt;/span&gt;,2,3&lt;span class=&#34;token punctuation&#34;&gt;..&lt;/span&gt;.9 程序名赋给了0&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;shift&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;格式：shift 【n】&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;功能：是第一个命令行参数无效，并把位置变量2的值移给位置变量1，把位置变量3的值移给位置变量2，&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;依次类推。不会改变位置参数0的值&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;ol start=&#34;6&#34;&gt;
&lt;li&gt;其他 shell 变量&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#变量&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;该变量存放传递给shell脚本命令行参数的个数。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;root@node ~&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;# cat test.sh &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#!/bin/bash&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;hello world&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;read&lt;/span&gt; -p &lt;span class=&#34;token string&#34;&gt;&#34;2geshuzhi&#34;&lt;/span&gt; a b&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;$a&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;$b&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;$#&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;root@node ~&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;# ./test.sh &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;hello world&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;2geshuzhi &lt;span class=&#34;token number&#34;&gt;6666&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;77&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;6666&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;77&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;?变量&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;该变量里存放Shell脚本中最后一条命令的返回码。Linux中每条命令执行完后都会返回一个值，&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;这个值称为返回码。一般执行成功返回0，不成功返回非0的值。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;*&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;@&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;变量&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;该变量存放所有输入的命令行参数，并且每个参数之间用空格隔开。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;在Linux系统中使用*或@变量是等价的。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;流程控制语句&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#流程控制语句&#34;&gt;#&lt;/a&gt; 流程控制语句&lt;/h2&gt;
&lt;h3 id=&#34;if语句&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#if语句&#34;&gt;#&lt;/a&gt; if 语句&lt;/h3&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;两路分支（若没有else则变成一路分支）&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;  判断条件&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;then&lt;/span&gt; 命令1&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt; 命令2&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;fi&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;多路分支&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;  判断条件1&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;then&lt;/span&gt; 命令1&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;elif&lt;/span&gt; 判断条件1&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;then&lt;/span&gt; 命令2&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;..&lt;/span&gt;.&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt; 命令n&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;fi&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;测试语句&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#测试语句&#34;&gt;#&lt;/a&gt; 测试语句&lt;/h3&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;测试语句计算一个表达式的值并返回‘真’或‘假’。该语句有两种语法格式，一种是使用关键字test&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;，另一种是使用方括号。格式如下：&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;格式1：&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;test&lt;/span&gt; expression&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;格式2&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;expression&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;case语句&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#case语句&#34;&gt;#&lt;/a&gt; case 语句&lt;/h3&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Shell case语句为多选择语句。可以用case语句匹配一个值与一个模式，如果匹配成功，&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;执行相匹配的命令。case语句格式如下：&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;case&lt;/span&gt; 值 &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;模式1&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    command1&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    command2&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;..&lt;/span&gt;.&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    commandN&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;模式2）&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    command1&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    command2&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;..&lt;/span&gt;.&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    commandN&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;esac&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;case工作方式如上所示。取值后面必须为单词in，每一模式必须以右括号结束。取值可以为变量或常数。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;匹配发现取值符合某一模式后，其间所有命令开始执行直至 &lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;取值将检测匹配的每一个模式。一旦模式匹配，则执行完匹配模式相应命令后不再继续其他模式。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;如果无一匹配模式，使用星号 * 捕获该值，再执行后面的命令。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;下面的脚本提示输入1到4，与每一种模式进行匹配：&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;实例&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;输入 1 到 4 之间的数字:&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;你输入的数字为:&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;read&lt;/span&gt; aNum&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;$aNum&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token builtin class-name&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;你选择了 1&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;34&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token builtin class-name&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;你选择了 2&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;35&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;36&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token builtin class-name&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;你选择了 3&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;37&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;38&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token builtin class-name&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;你选择了 4&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;39&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;40&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    *&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token builtin class-name&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;你没有输入 1 到 4 之间的数字&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;41&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;42&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;esac&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;43&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;输入不同的内容，会有不同的结果，例如：&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;44&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;45&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;输入 &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; 到 &lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt; 之间的数字:&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;46&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;你输入的数字为:&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;47&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;48&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;你选择了 &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;for语句&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#for语句&#34;&gt;#&lt;/a&gt; for 语句&lt;/h3&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;for循环一般格式为：&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;token for-or-select variable&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; item1 item2 &lt;span class=&#34;token punctuation&#34;&gt;..&lt;/span&gt;. itemN&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;do&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    command1&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    command2&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;..&lt;/span&gt;.&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    commandN&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;done&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;实例&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;token for-or-select variable&#34;&gt;loop&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;do&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token builtin class-name&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;The value is: &lt;span class=&#34;token variable&#34;&gt;$loop&lt;/span&gt;&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;done&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;输出结果：&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;The value is: &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;The value is: &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;The value is: &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;The value is: &lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;The value is: &lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;while语句&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#while语句&#34;&gt;#&lt;/a&gt; while 语句&lt;/h3&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;while循环用于不断执行一系列命令，也用于从输入文件中读取数据；命令通常为测试条件。其格式为：&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt; condition&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;do&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token builtin class-name&#34;&gt;command&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;done&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;以下是一个基本的while循环，测试条件是：如果int小于等于5，那么条件返回真。int从0开始，每次循环处理时，int加1。运行上述脚本，返回数字1到5，然后终止。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;实例&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#!/bin/bash&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token assign-left variable&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;((&lt;/span&gt; $int&lt;span class=&#34;token operator&#34;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;))&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;do&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token builtin class-name&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;$int&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token builtin class-name&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;int++&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;done&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;运行脚本，输出：&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;以上实例使用了 Bash &lt;span class=&#34;token builtin class-name&#34;&gt;let&lt;/span&gt; 命令，它用于执行一个或多个表达式，变量计算中不需要加上 $ 来表示变量。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;无限循环&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#无限循环&#34;&gt;#&lt;/a&gt; 无限循环&lt;/h3&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;无限循环&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;无限循环语法格式：&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;token builtin class-name&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;do&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token builtin class-name&#34;&gt;command&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;done&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;或者&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;do&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token builtin class-name&#34;&gt;command&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;done&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;或者&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;((&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;))&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;until-语句&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#until-语句&#34;&gt;#&lt;/a&gt; until 语句&lt;/h3&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;until&lt;/span&gt; 循环执行一系列命令直至条件为 &lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt; 时停止。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;until&lt;/span&gt; 循环与 &lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt; 循环在处理方式上刚好相反。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;一般 &lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt; 循环优于 &lt;span class=&#34;token keyword&#34;&gt;until&lt;/span&gt; 循环，但在某些时候—也只是极少数情况下，until 循环更加有用。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;until&lt;/span&gt; 语法格式:&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;until&lt;/span&gt; condition&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;do&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token builtin class-name&#34;&gt;command&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;done&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;condition 一般为条件表达式，如果返回值为 false，则继续执行循环体内的语句，否则跳出循环。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;以下实例我们使用 &lt;span class=&#34;token keyword&#34;&gt;until&lt;/span&gt; 命令来输出 &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt; ~ &lt;span class=&#34;token number&#34;&gt;9&lt;/span&gt; 的数字：&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;实例&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#!/bin/bash&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token assign-left variable&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;until&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;!&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;$a&lt;/span&gt; -lt &lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;do&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   &lt;span class=&#34;token builtin class-name&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;$a&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   &lt;span class=&#34;token assign-left variable&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;&lt;span class=&#34;token variable&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;expr&lt;/span&gt; $a + &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;done&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#### expr 表达式 表示求表达式的值&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;运行结果：&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;输出结果为：&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;34&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;35&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;36&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;37&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;38&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;39&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;40&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;6&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;41&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;7&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;42&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;8&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;43&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;9&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h1 id=&#34;附上思维导图&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#附上思维导图&#34;&gt;#&lt;/a&gt; 附上思维导图&lt;/h1&gt;
&lt;p&gt;右键新标签页查看&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image003.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
</content>
        <category term="Linux" />
        <updated>2020-12-31T11:23:08.000Z</updated>
    </entry>
    <entry>
        <id>https://or0kit.github.io/Linux/linux%E5%91%BD%E4%BB%A4scp--%E8%BF%9C%E7%A8%8B%E6%8B%B7%E8%B4%9D%E6%96%87%E4%BB%B6%E3%80%90%E8%BD%AC%E3%80%91/</id>
        <title>linux命令scp--远程拷贝文件【转】</title>
        <link rel="alternate" href="https://or0kit.github.io/Linux/linux%E5%91%BD%E4%BB%A4scp--%E8%BF%9C%E7%A8%8B%E6%8B%B7%E8%B4%9D%E6%96%87%E4%BB%B6%E3%80%90%E8%BD%AC%E3%80%91/"/>
        <content type="html">&lt;p&gt;转载自&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3lha3NheW9vLmJsb2cuNTFjdG8uY29tLzUxMDkzOC8xNzU3MTk=&#34;&gt; http://yaksayoo.blog.51cto.com/510938/175719&lt;/span&gt;&lt;/p&gt;
&lt;h1 id=&#34;linux下scp的用法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#linux下scp的用法&#34;&gt;#&lt;/a&gt; Linux 下 scp 的用法&lt;/h1&gt;
&lt;p&gt;scp 就是 secure copy，一个在 linux 下用来进行远程拷贝文件的命令。&lt;br /&gt;
有时我们需要获得远程服务器上的某个文件，该服务器既没有配置 ftp 服务器，也没有做共享，无法通过常规途径获得文件时，只需要通过简单的 scp 命令便可达到目的。&lt;/p&gt;
&lt;h1 id=&#34;一-将本机文件复制到远程服务器上&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#一-将本机文件复制到远程服务器上&#34;&gt;#&lt;/a&gt; 一、将本机文件复制到远程服务器上&lt;/h1&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#scp /home/administrator/news.txt root@192.168.6.129:/etc/squid&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;/home/administrator/      本地文件的绝对路径&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;news.txt                          要复制到服务器上的本地文件&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;root                                 通过root用户登录到远程服务器（也可以使用其他拥有同等权限的用户）&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;192.168&lt;/span&gt;.6.129                远程服务器的ip地址（也可以使用域名或机器名）&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;/etc/squid                       将本地文件复制到位于远程服务器上的路径&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;如图通过 root 用户登录远程服务器，输入 yes 表示同意建立 ssh 连接&lt;/p&gt;
&lt;p&gt;按提示输入 root 用户的密码&lt;/p&gt;
&lt;p&gt;如图所示建立连接后开始传输文件，显示百分比、实际时间和传送速度等信息&lt;/p&gt;
&lt;h1 id=&#34;二-将远程服务器上的文件复制到本机&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#二-将远程服务器上的文件复制到本机&#34;&gt;#&lt;/a&gt; 二、将远程服务器上的文件复制到本机&lt;/h1&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#scp remote@www.abc.com:/usr/local/sin.sh /home/administrator&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;remote                       通过remote用户登录到远程服务器（也可以使用其他拥有同等权限的用户）&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;www.abc.com              远程服务器的域名（当然也可以使用该服务器ip地址）&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;/usr/local/sin.sh           欲复制到本机的位于远程服务器上的文件&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;/home/administrator  将远程文件复制到本地的绝对路径&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;注意两点：&lt;br /&gt;
1. 如果远程服务器防火墙有特殊限制，scp 便要走特殊端口，具体用什么端口视情况而定，命令格式如下：&lt;br /&gt;
 &lt;code&gt;#scp -p 4588 remote@www.abc.com:/usr/local/sin.sh /home/administrator&lt;/code&gt; &lt;br /&gt;
2. 使用 scp 要注意所使用的用户是否具有可读取远程服务器相应文件的权限。&lt;/p&gt;
</content>
        <category term="Linux" />
        <updated>2020-12-20T14:57:06.000Z</updated>
    </entry>
</feed>
