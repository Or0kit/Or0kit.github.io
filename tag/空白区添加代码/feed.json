{
    "version": "https://jsonfeed.org/version/1",
    "title": "Or0kit • All posts by \"空白区添加代码\" tag",
    "description": "临渊羡鱼，不如退而结网",
    "home_page_url": "https://Or0kit.github.io",
    "items": [
        {
            "id": "https://or0kit.github.io/Bin/WindowsPE/%E4%BB%BB%E6%84%8F%E4%BB%A3%E7%A0%81%E7%A9%BA%E7%99%BD%E5%8C%BA%E6%B7%BB%E5%8A%A0%E4%BB%A3%E7%A0%81/",
            "url": "https://or0kit.github.io/Bin/WindowsPE/%E4%BB%BB%E6%84%8F%E4%BB%A3%E7%A0%81%E7%A9%BA%E7%99%BD%E5%8C%BA%E6%B7%BB%E5%8A%A0%E4%BB%A3%E7%A0%81/",
            "title": "任意代码空白区添加代码",
            "date_published": "2021-05-02T08:58:59.000Z",
            "content_html": "<h1 id=\"空白区添加代码\"><a class=\"anchor\" href=\"#空白区添加代码\">#</a> 空白区添加代码</h1>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">TestAddCode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> FileBuffer<span class=\"token punctuation\">,</span> <span class=\"token class-name\">size_t</span> n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">char</span> ShellCode<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token number\">0x6a</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x6a</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x6a</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x6a</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token number\">0xe8</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token number\">0xe9</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> pImageBuffer <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    pImageBuffer <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">CreateImageBuffer</span><span class=\"token punctuation\">(</span>FileBuffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    PIMAGE_DOS_HEADER pDosHeader <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PIMAGE_DOS_HEADER<span class=\"token punctuation\">)</span>pImageBuffer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    PIMAGE_NT_HEADERS pNTHeader <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PIMAGE_NT_HEADERS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>pDosHeader <span class=\"token operator\">+</span> pDosHeader<span class=\"token operator\">-></span>e_lfanew<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    PIMAGE_FILE_HEADER pFileHeader <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PIMAGE_FILE_HEADER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>pDosHeader <span class=\"token operator\">+</span> pDosHeader<span class=\"token operator\">-></span>e_lfanew <span class=\"token operator\">+</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    PIMAGE_OPTIONAL_HEADER32 pOptionHeader <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PIMAGE_OPTIONAL_HEADER32<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>pFileHeader <span class=\"token operator\">+</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>IMAGE_FILE_HEADER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    PIMAGE_SECTION_HEADER pSectionHeader <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PIMAGE_SECTION_HEADER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>pOptionHeader <span class=\"token operator\">+</span> pFileHeader<span class=\"token operator\">-></span>SizeOfOptionalHeader<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">// 判断总节区数目是否小于 n</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pFileHeader<span class=\"token operator\">-></span>NumberOfSections <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"超过最大节区数\\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>FileBuffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>pImageBuffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    pSectionHeader <span class=\"token operator\">=</span> pSectionHeader <span class=\"token operator\">+</span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token comment\">// 判断空白区是否足够存储 ShellCode 代码</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>pSectionHeader<span class=\"token operator\">-></span>SizeOfRawData <span class=\"token operator\">-</span> pSectionHeader<span class=\"token operator\">-></span>Misc<span class=\"token punctuation\">.</span>VirtualSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>ShellCode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"空白区不够！\\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>FileBuffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>pImageBuffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token comment\">// 将代码复制到空白区</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    PBYTE CodeBegin <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PBYTE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>pImageBuffer <span class=\"token operator\">+</span> pSectionHeader<span class=\"token operator\">-></span>VirtualAddress <span class=\"token operator\">+</span> pSectionHeader<span class=\"token operator\">-></span>Misc<span class=\"token punctuation\">.</span>VirtualSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>CodeBegin<span class=\"token punctuation\">,</span> ShellCode<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>ShellCode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token comment\">// 修复 E8</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>DWORD<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>CodeBegin<span class=\"token punctuation\">[</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>MessageBoxW <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>pOptionHeader<span class=\"token operator\">-></span>ImageBase  <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>CodeBegin <span class=\"token operator\">+</span> <span class=\"token number\">8</span> <span class=\"token operator\">+</span> <span class=\"token number\">5</span> <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>pImageBuffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token comment\">// 修复 E9</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>DWORD<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>CodeBegin<span class=\"token punctuation\">[</span><span class=\"token number\">0xE</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>pOptionHeader<span class=\"token operator\">-></span>ImageBase <span class=\"token operator\">+</span> pOptionHeader<span class=\"token operator\">-></span>AddressOfEntryPoint<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>pOptionHeader<span class=\"token operator\">-></span>ImageBase <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>CodeBegin <span class=\"token operator\">+</span> <span class=\"token number\">8</span> <span class=\"token operator\">+</span> <span class=\"token number\">5</span> <span class=\"token operator\">+</span> <span class=\"token number\">5</span> <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>pImageBuffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token comment\">// 修复 OEP</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    pOptionHeader<span class=\"token operator\">-></span>AddressOfEntryPoint <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>CodeBegin <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>pImageBuffer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token comment\">// 修复节区</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    pSectionHeader<span class=\"token operator\">-></span>Misc<span class=\"token punctuation\">.</span>VirtualSize <span class=\"token operator\">=</span> pSectionHeader<span class=\"token operator\">-></span>Misc<span class=\"token punctuation\">.</span>VirtualSize <span class=\"token operator\">+</span> <span class=\"token number\">0x12</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token function\">WritePeFile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">CreateNewFileBuffer</span><span class=\"token punctuation\">(</span>pImageBuffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"插入代码成功\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"步骤\"><a class=\"anchor\" href=\"#步骤\">#</a> 步骤：</h2>\n<ol>\n<li>准备一段 ShellCode</li>\n</ol>\n<blockquote>\n<p>char ShellCode[] = {<br />\n0x6a,0,0x6a,0,0x6a,0,0x6a,0,<br />\n0xe8,0,0,0,0,<br />\n0xe9,0,0,0,0<br />\n};</p>\n</blockquote>\n<ol start=\"2\">\n<li>\n<p>判断节区后的空白区是否足够放下 ShellCode</p>\n<p>if (((pSectionHeader-&gt;SizeOfRawData - pSectionHeader-&gt;Misc.VirtualSize)) &lt; sizeof(ShellCode))<br />\n{<br />\nprintf (&quot;空白区不够！\\r\\n&quot;);<br />\nfree(FileBuffer);<br />\nfree(pImageBuffer);<br />\n}<br />\n 判断此节在磁盘中的体积 (SizeOfRawData，已经按照文件页对齐后的值) 减去此节的实际大小 (VirtualSize, 未做对齐处理前的大小) 是否小于 ShellCode 的大小。</p>\n</li>\n<li>\n<p>将代码复制到空白区</p>\n<p>PBYTE CodeBegin = (PBYTE)((DWORD)pImageBuffer + pSectionHeader-&gt;VirtualAddress + pSectionHeader-&gt;Misc.VirtualSize);<br />\nmemcpy(CodeBegin, ShellCode, sizeof(ShellCode));<br />\n 找到此节的空白区：ImageBase + 此节在内存中加载的地址 VirtualAddress + 此节的实际大小 VirtualSize</p>\n</li>\n<li>\n<p>修复 E8</p>\n<p><em>(DWORD</em>)&amp;CodeBegin[9] = (DWORD)MessageBoxW - (pOptionHeader-&gt;ImageBase  + (DWORD)CodeBegin + 8 + 5 - (DWORD)pImageBuffer);<br />\n 硬编码 E8 后的值应为：要跳转的地址 - 下一行指令的地址。<br />\n要跳转的地址：MessageBox 函数的地址，在我的电脑上 MessageBoxW 的地址为 0x753439C0<br />\n 下一行地址：程序被加载到内存中后其基址为 ImageBase，因此我们要算出此 E8 这条指令的 RVA，既 CodeBegin 的地址 + 8（4 个 push 0 : 0x6A 00） + 5 (E8 指令的长度，加上这个后就是下一条指令的地址了)  - pImageBuffer（在此程序内存中的基址）。</p>\n</li>\n<li>\n<p>修复 E9</p>\n<p><em>(DWORD</em>)&amp;CodeBegin[0xE] = (pOptionHeader-&gt;ImageBase + pOptionHeader-&gt;AddressOfEntryPoint) - (pOptionHeader-&gt;ImageBase + (DWORD)CodeBegin + 8 + 5 + 5 - (DWORD)pImageBuffer);<br />\n 硬编码 E9 后的值应为：要跳转的地址 - 下一行指令的地址。<br />\n与 E8 同理。</p>\n</li>\n<li>\n<p>修复 OEP</p>\n<p>pOptionHeader-&gt;AddressOfEntryPoint = (DWORD)CodeBegin - (DWORD)pImageBuffer;<br />\nAddressOfEntryPoint 是个 RVA 我们用 CodeBegin 减去 pImageBuffer 即可得出</p>\n</li>\n<li>\n<p>修复节区</p>\n<p>pSectionHeader-&gt;Misc.VirtualSize = pSectionHeader-&gt;Misc.VirtualSize + 0x12;</p>\n</li>\n</ol>\n<p>改一下节的大小使得转换成 FileBuffer 时，可以把我们的 ShellCode 一起转换过去。</p>\n<p>注意：</p>\n<blockquote>\n<p>添加的函数 MessageBox 是 user32.dll 中的，如果 PE 文件本身没有加载这个 dll，就算 ShellCode 添加成功也无法执行。</p>\n</blockquote>\n",
            "tags": [
                "空白区添加代码"
            ]
        },
        {
            "id": "https://or0kit.github.io/Bin/WindowsPE/%E5%9C%A8%E7%A9%BA%E7%99%BD%E5%8C%BA%E6%B7%BB%E5%8A%A0%E4%BB%A3%E7%A0%81/",
            "url": "https://or0kit.github.io/Bin/WindowsPE/%E5%9C%A8%E7%A9%BA%E7%99%BD%E5%8C%BA%E6%B7%BB%E5%8A%A0%E4%BB%A3%E7%A0%81/",
            "title": "在空白区添加代码",
            "date_published": "2021-05-02T08:58:55.000Z",
            "content_html": "<h1 id=\"在代码空白区添加代码手动\"><a class=\"anchor\" href=\"#在代码空白区添加代码手动\">#</a> 在代码空白区添加代码 (手动)</h1>\n<p><code>添加的是硬编码</code></p>\n<p>1、获取 MessageBox 地址，构造 ShellCode 代码</p>\n<p>2、E8 E9 计算公式</p>\n<p>3、在代码区手动添加代码</p>\n<p>4、修改入口地址，指向 ShellCode<br />\n 入口地址:xxxx</p>\n<p>call 0x12345678 \t\t\tCall 0x77E5425F</p>\n<p>E8 53 FE FF FF</p>\n<p>jmp 0x2345678</p>\n<p>E9 2B 2B 00 00</p>\n<p>真正要跳转的地址 = E8 这条指令的下一行地址 + X</p>\n<p>X = 真正要跳转的地址 - E8 这条指令的下一行地址</p>\n<p>X = 00401050 - 004011FD</p>\n<p>X = 00403b80 - 00401055</p>\n<p>要跳转的地方 = E8 当前的地址 + 5 + X</p>\n<p>X = 要跳转的地址 - (E8 的地址 + 5)</p>\n<p>6A 00 6A 00 6A 00 6A 00 E8 00 00 00 00 E9 00 00 00 00</p>\n<h1 id=\"实战\"><a class=\"anchor\" href=\"#实战\">#</a> 实战</h1>\n<p>OD 查找 MessageBox 位置。</p>\n<p>显示模块窗口。</p>\n<p>找到 USER32.dll, 双击进入后， <code>Ctrl+N</code>  打开当前模块的名称（标签）列表。在里面查找 MessageBox。</p>\n<p>MessageBox:0x76321930<br />\nMessageBox - ImageBase -508 - 5 =  75F2 1423<br />\n401000<br />\n3F FAEE<br />\n6A 00 6A 00 6A 00 6A 00 E8 23 14 F2 75 E9 EE FA 3F 00<br />\n00007FFDA9672180</p>\n<p>成功了，开始时失败了好多次，原因为：在 xp 虚拟机中寻找的 MessageBox 函数地址在 win10 物理中中用了，当然不行了……</p>\n",
            "tags": [
                "空白区添加代码"
            ]
        }
    ]
}