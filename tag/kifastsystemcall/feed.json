{
    "version": "https://jsonfeed.org/version/1",
    "title": "Or0kit • All posts by \"kifastsystemcall\" tag",
    "description": "临渊羡鱼，不如退而结网",
    "home_page_url": "https://Or0kit.github.io",
    "items": [
        {
            "id": "https://or0kit.github.io/Bin/Core/WindowsXp/SystemCall/%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8-3%E7%8E%AF%E8%B0%83%E7%94%A8%E5%88%86%E6%9E%90/",
            "url": "https://or0kit.github.io/Bin/Core/WindowsXp/SystemCall/%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8-3%E7%8E%AF%E8%B0%83%E7%94%A8%E5%88%86%E6%9E%90/",
            "title": "系统调用-3环调用分析",
            "date_published": "2021-12-07T00:20:27.000Z",
            "content_html": "<h1 id=\"分析3环api-readprocessmemory\"><a class=\"anchor\" href=\"#分析3环api-readprocessmemory\">#</a> 分析 3 环 API ReadProcessMemory</h1>\n<p>用 IDA 分析 kernel32.dll, 找到  <code>ReadProcessMemory</code>  函数，因为这个函数会进入 R0，所以我们对其分析 API 的调用过程。</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>.text:7C8021D0 ; BOOL __stdcall ReadProcessMemory(HANDLE hProcess, LPCVOID lpBaseAddress, LPVOID lpBuffer, SIZE_T nSize, SIZE_T *lpNumberOfBytesRead)</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>.text:7C8021D0                 public _ReadProcessMemory@20</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>.text:7C8021D0 _ReadProcessMemory@20 proc near         ; CODE XREF: GetProcessVersion(x)+2F18B↓p</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>.text:7C8021D0                                         ; GetProcessVersion(x)+2F1AA↓p ...</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>.text:7C8021D0</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>.text:7C8021D0 hProcess        &#x3D; dword ptr  8</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>.text:7C8021D0 lpBaseAddress   &#x3D; dword ptr  0Ch</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>.text:7C8021D0 lpBuffer        &#x3D; dword ptr  10h</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>.text:7C8021D0 nSize           &#x3D; dword ptr  14h</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>.text:7C8021D0 lpNumberOfBytesRead&#x3D; dword ptr  18h</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>.text:7C8021D0</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>.text:7C8021D0                 mov     edi, edi</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>.text:7C8021D2                 push    ebp</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>.text:7C8021D3                 mov     ebp, esp</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>.text:7C8021D5                 lea     eax, [ebp+nSize]</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>.text:7C8021D8                 push    eax             ; NumberOfBytesRead</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>.text:7C8021D9                 push    [ebp+nSize]     ; NumberOfBytesToRead</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>.text:7C8021DC                 push    [ebp+lpBuffer]  ; Buffer</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>.text:7C8021DF                 push    [ebp+lpBaseAddress] ; BaseAddress</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>.text:7C8021E2                 push    [ebp+hProcess]  ; ProcessHandle</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>.text:7C8021E5                 call    ds:__imp__NtReadVirtualMemory@20 ; NtReadVirtualMemory(x,x,x,x,x)</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>.text:7C8021EB                 mov     ecx, [ebp+lpNumberOfBytesRead]</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>.text:7C8021EE                 test    ecx, ecx</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>.text:7C8021F0                 jnz     short loc_7C8021FD</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>.text:7C8021F2</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>.text:7C8021F2 loc_7C8021F2:                           ; CODE XREF: ReadProcessMemory(x,x,x,x,x)+32↓j</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>.text:7C8021F2                 test    eax, eax</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>.text:7C8021F4                 jl      short loc_7C802204</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>.text:7C8021F6                 xor     eax, eax</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>.text:7C8021F8                 inc     eax</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>.text:7C8021F9</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>.text:7C8021F9 loc_7C8021F9:                           ; CODE XREF: ReadProcessMemory(x,x,x,x,x)+3C↓j</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>.text:7C8021F9                 pop     ebp</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>.text:7C8021FA                 retn    14h</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>.text:7C8021FD ; ---------------------------------------------------------------------------</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>.text:7C8021FD</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>.text:7C8021FD loc_7C8021FD:                           ; CODE XREF: ReadProcessMemory(x,x,x,x,x)+20↑j</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>.text:7C8021FD                 mov     edx, [ebp+nSize]</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>.text:7C802200                 mov     [ecx], edx</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>.text:7C802202                 jmp     short loc_7C8021F2</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>.text:7C802204 ; ---------------------------------------------------------------------------</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>.text:7C802204</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>.text:7C802204 loc_7C802204:                           ; CODE XREF: ReadProcessMemory(x,x,x,x,x)+24↑j</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>.text:7C802204                 push    eax             ; Status</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>.text:7C802205                 call    _BaseSetLastNTError@4 ; BaseSetLastNTError(x)</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>.text:7C80220A                 xor     eax, eax</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>.text:7C80220C                 jmp     short loc_7C8021F9</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>.text:7C80220C _ReadProcessMemory@20 endp</pre></td></tr></table></figure><p>由  <code>.text:7C8021E5                 call    ds:__imp__NtReadVirtualMemory@20 ; NtReadVirtualMemory(x,x,x,x,x)</code>  可知函数  <code>ReadProcessMemory</code>  调用了导入函数  <code>NtReadVirtualMemory</code></p>\n<p>查看导入表： <code>7C80141C\tNtReadVirtualMemory\tntdll</code> <br />\n 得知这个函数在 ntdll.dll 中</p>\n<p>用 IDA 打开 ntdll.dll, 查找 NtReadVirtualMemory 函数</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">.</span>text<span class=\"token operator\">:</span><span class=\"token number\">7</span>C92D9E0 <span class=\"token punctuation\">;</span> __stdcall <span class=\"token function\">NtReadVirtualMemory</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">.</span>text<span class=\"token operator\">:</span><span class=\"token number\">7</span>C92D9E0                 public _NtReadVirtualMemory@<span class=\"token number\">20</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">.</span>text<span class=\"token operator\">:</span><span class=\"token number\">7</span>C92D9E0 _NtReadVirtualMemory@<span class=\"token number\">20</span> proc near       <span class=\"token punctuation\">;</span> CODE XREF<span class=\"token operator\">:</span> <span class=\"token function\">LdrFindCreateProcessManifest</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span>CC↓p</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">.</span>text<span class=\"token operator\">:</span><span class=\"token number\">7</span>C92D9E0                                         <span class=\"token punctuation\">;</span> <span class=\"token function\">LdrCreateOutOfProcessImage</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">7</span>C↓p <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">.</span>text<span class=\"token operator\">:</span><span class=\"token number\">7</span>C92D9E0                 mov     eax<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span>BAh       <span class=\"token punctuation\">;</span> NtReadVirtualMemory</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">.</span>text<span class=\"token operator\">:</span><span class=\"token number\">7</span>C92D9E5                 mov     edx<span class=\"token punctuation\">,</span> <span class=\"token number\">7FF</span>E0300h</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">.</span>text<span class=\"token operator\">:</span><span class=\"token number\">7</span>C92D9EA                 call    dword ptr <span class=\"token punctuation\">[</span>edx<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">.</span>text<span class=\"token operator\">:</span><span class=\"token number\">7</span>C92D9EC                 retn    <span class=\"token number\">14</span>h</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">.</span>text<span class=\"token operator\">:</span><span class=\"token number\">7</span>C92D9EC _NtReadVirtualMemory@<span class=\"token number\">20</span> endp</pre></td></tr></table></figure><p>可以看到这个函数只有短短几行汇编代码：给 eax 赋个值，然后给 edx 个地址，然后 call 一下 edx 指向的地址，然后就平栈（由于 STDCALL 调用约定）返回了。<br />\n但要看懂这几行代码，必须要了解一些知识。</p>\n<h1 id=\"_kuser_shared_data-结构体\"><a class=\"anchor\" href=\"#_kuser_shared_data-结构体\">#</a> _KUSER_SHARED_DATA 结构体</h1>\n<p>在 R3 和 R0 分别定义了一个_KUSER_SHARED_DATA 结构区域，用于 R3 和 R0 共享某些数据。<br />\n它们在同一个物理页上被映射到不同的虚拟地址，_KUSER_SHARED_DATA 结构在 R3 地址为 0x7ffe0000，在 R0 地址为 0xffdf0000。</p>\n<p>其结构如下所示：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kd<span class=\"token operator\">></span> dt _KUSER_SHARED_DATA</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>nt<span class=\"token operator\">!</span>_KUSER_SHARED_DATA</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x000</span> TickCountLow     <span class=\"token operator\">:</span> Uint4B</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x004</span> TickCountMultiplier <span class=\"token operator\">:</span> Uint4B</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x008</span> InterruptTime    <span class=\"token operator\">:</span> _KSYSTEM_TIME</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x014</span> SystemTime       <span class=\"token operator\">:</span> _KSYSTEM_TIME</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x020</span> TimeZoneBias     <span class=\"token operator\">:</span> _KSYSTEM_TIME</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x02c</span> ImageNumberLow   <span class=\"token operator\">:</span> Uint2B</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x02e</span> ImageNumberHigh  <span class=\"token operator\">:</span> Uint2B</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x030</span> NtSystemRoot     <span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">260</span><span class=\"token punctuation\">]</span> Uint2B</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x238</span> MaxStackTraceDepth <span class=\"token operator\">:</span> Uint4B</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x23c</span> CryptoExponent   <span class=\"token operator\">:</span> Uint4B</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x240</span> TimeZoneId       <span class=\"token operator\">:</span> Uint4B</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x244</span> Reserved2        <span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span> Uint4B</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x264</span> NtProductType    <span class=\"token operator\">:</span> _NT_PRODUCT_TYPE</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x268</span> ProductTypeIsValid <span class=\"token operator\">:</span> UChar</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x26c</span> NtMajorVersion   <span class=\"token operator\">:</span> Uint4B</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x270</span> NtMinorVersion   <span class=\"token operator\">:</span> Uint4B</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x274</span> ProcessorFeatures <span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">64</span><span class=\"token punctuation\">]</span> UChar</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x2b4</span> Reserved1        <span class=\"token operator\">:</span> Uint4B</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x2b8</span> Reserved3        <span class=\"token operator\">:</span> Uint4B</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x2bc</span> TimeSlip         <span class=\"token operator\">:</span> Uint4B</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x2c0</span> AlternativeArchitecture <span class=\"token operator\">:</span> _ALTERNATIVE_ARCHITECTURE_TYPE</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x2c8</span> SystemExpirationDate <span class=\"token operator\">:</span> _LARGE_INTEGER</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x2d0</span> SuiteMask        <span class=\"token operator\">:</span> Uint4B</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x2d4</span> KdDebuggerEnabled <span class=\"token operator\">:</span> UChar</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x2d5</span> NXSupportPolicy  <span class=\"token operator\">:</span> UChar</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x2d8</span> ActiveConsoleId  <span class=\"token operator\">:</span> Uint4B</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x2dc</span> DismountCount    <span class=\"token operator\">:</span> Uint4B</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x2e0</span> ComPlusPackage   <span class=\"token operator\">:</span> Uint4B</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x2e4</span> LastSystemRITEventTickCount <span class=\"token operator\">:</span> Uint4B</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x2e8</span> NumberOfPhysicalPages <span class=\"token operator\">:</span> Uint4B</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x2ec</span> SafeBootMode     <span class=\"token operator\">:</span> UChar</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x2f0</span> TraceLogging     <span class=\"token operator\">:</span> Uint4B</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x2f8</span> TestRetInstruction <span class=\"token operator\">:</span> Uint8B</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x300</span> SystemCall       <span class=\"token operator\">:</span> Uint4B</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x304</span> SystemCallReturn <span class=\"token operator\">:</span> Uint4B</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x308</span> SystemCallPad    <span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> Uint8B</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x320</span> TickCount        <span class=\"token operator\">:</span> _KSYSTEM_TIME</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x320</span> TickCountQuad    <span class=\"token operator\">:</span> Uint8B</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x330</span> Cookie           <span class=\"token operator\">:</span> Uint4B</pre></td></tr></table></figure><p>虽然它们指向的是同一个物理页，但通过分页机制使其在 R3 是只读的，在 R0 是可读可写的，以保证安全性。</p>\n<p>其中相对结构体偏移 0x300 处的成员就是 3 环 API 进入内核的入口函数。</p>\n<p>查看其内容：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kd&gt; .process 89aad020  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Implicit process is now 89aad020</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>WARNING: .cache forcedecodeuser is not enabled</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>kd&gt; dd 0x7ffe0000</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>7ffe0000  000a01e6 0fa00000 dc0bc1e4 00000017</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>7ffe0010  00000017 ae23657c 01d7ec22 01d7ec22</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>7ffe0020  f1dcc000 ffffffbc ffffffbc 014c014c</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>7ffe0030  003a0043 0057005c 004e0049 004f0044</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>7ffe0040  00530057 00000000 00000000 00000000</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>7ffe0050  00000000 00000000 00000000 00000000</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>7ffe0060  00000000 00000000 00000000 00000000</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>7ffe0070  00000000 00000000 00000000 00000000</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>kd&gt; dd ffdf0000</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>ffdf0000  000a01e6 0fa00000 dc0bc1e4 00000017</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>ffdf0010  00000017 ae23657c 01d7ec22 01d7ec22</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>ffdf0020  f1dcc000 ffffffbc ffffffbc 014c014c</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>ffdf0030  003a0043 0057005c 004e0049 004f0044</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>ffdf0040  00530057 00000000 00000000 00000000</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>ffdf0050  00000000 00000000 00000000 00000000</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>ffdf0060  00000000 00000000 00000000 00000000</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>ffdf0070  00000000 00000000 00000000 00000000</pre></td></tr></table></figure><p>可以发现 7ffe0000 与 ffdf0000 处的数据相同。</p>\n<p>我们先看看 0xffdf0300 这个地址里面存的是什么，先 dd 一下，在查看其存储的地址的反汇编：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kd<span class=\"token operator\">></span> dd ffdf0300</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>ffdf0300  <span class=\"token number\">7</span>c92e4f0 <span class=\"token number\">7</span>c92e4f4 <span class=\"token number\">00000000</span> <span class=\"token number\">00000000</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>ffdf0310  <span class=\"token number\">00000000</span> <span class=\"token number\">00000000</span> <span class=\"token number\">00000000</span> <span class=\"token number\">00000000</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>ffdf0320  <span class=\"token number\">00000000</span> <span class=\"token number\">00000000</span> <span class=\"token number\">00000000</span> <span class=\"token number\">00000000</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>ffdf0330  dc76a788 <span class=\"token number\">00000000</span> <span class=\"token number\">00000000</span> <span class=\"token number\">00000000</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>ffdf0340  <span class=\"token number\">00000000</span> <span class=\"token number\">00000000</span> <span class=\"token number\">00000000</span> <span class=\"token number\">00000000</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>ffdf0350  <span class=\"token number\">00000000</span> <span class=\"token number\">00000000</span> <span class=\"token number\">00000000</span> <span class=\"token number\">00000000</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>ffdf0360  <span class=\"token number\">00000000</span> <span class=\"token number\">00000000</span> <span class=\"token number\">00000000</span> <span class=\"token number\">00000000</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>ffdf0370  <span class=\"token number\">00000000</span> <span class=\"token number\">00000000</span> <span class=\"token number\">00000000</span> <span class=\"token number\">00000000</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>kd<span class=\"token operator\">></span> uf <span class=\"token number\">7</span>c92e4f0</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>ntdll<span class=\"token operator\">!</span>KiFastSystemCall<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token number\">7</span>c92e4f0 <span class=\"token number\">8</span>bd4            mov     edx<span class=\"token punctuation\">,</span>esp</pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token number\">7</span>c92e4f2 <span class=\"token number\">0f</span><span class=\"token number\">34</span>            sysenter</pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token number\">7</span>c92e4f4 c3              ret</pre></td></tr></table></figure><p>由 windbg 的符号表可以发现，调用了  <code>KiFastSystemCall</code>  函数，这个函数也就三行汇编代码：把 esp 的值交给了 edx，然后调用 sysenter。</p>\n<p>这个函数就是快速调用。</p>\n<h1 id=\"快速调用与中断调用\"><a class=\"anchor\" href=\"#快速调用与中断调用\">#</a> 快速调用与中断调用</h1>\n<p>学了前面的保护模式后，我们知道如果想要提权，少不了更改 4 个值：CS/SS/ESP/EIP。所以不管是哪一种调用，其目的都是获取这四个值。</p>\n<p>中断调用是通过中断门进 0 环，此过程需要查 IDT 表和 TSS 表，涉及内存寻址。</p>\n<p>快速调用则是使用  <code>sysenter</code>  指令进 0 环，这种方式不需要查内存，而是直接从 CPU 的 MSR 寄存器中获取所需数据，相对中断调用更快，所以称为快速调用。</p>\n<hr />\n<p>中断门进 0 环，需要的 CS、EIP 在 IDT 表中，需要查内存（SS 与 ESP 由 TSS 提供），而 CPU 如果支持 sysenter 指令时，操作系统会提前将 CS/SS/ESP/EIP 的值存储在 MSR 寄存器中，sysenter 指令执行时，CPU 会将 MSR 寄存器中的值直接写入相关寄存器，没有读内存的过程，所以叫快速调用，但本质是一样的。</p>\n<p>其实，快速调用并不是一直存在的，在比较古老的 CPU 是不支持快速调用的。<br />\n它们进入内核的方式很简单粗暴，就是使用中断门。</p>\n<p>CPU 如何知道是否支持快速调用呢？当通过 eax=1 来执行 cpuid 指令时，处理器的特征信息被放在 ecx 和 edx 寄存器中，其中 edx 包含了一个 SEP 位（11 位），该位指明了当前处理器知否支持 sysenter/sysexit 指令，具体细节可以查看白皮书。</p>\n<h1 id=\"kifastsystemcall-与-kiintsystemcall\"><a class=\"anchor\" href=\"#kifastsystemcall-与-kiintsystemcall\">#</a> KiFastSystemCall 与 KiIntSystemCall</h1>\n<p>通过逆向汇编代码可以看出，不管 CPU 是否支持快速调用，它都是调用该地址。</p>\n<p>这就说明操作系统在初始化该结构体的时候必须先判断支不支持，然后填入适当的值。</p>\n<p>如果 CPU 支持快速调用，操作系统就会填入 KiFastSystemCall 函数的地址，我们可以看一下：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>_DWORD __stdcall KiFastSystemCall()</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>                public _KiFastSystemCall@0</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>_KiFastSystemCall@0 proc near           ; DATA XREF: .text:off_7C923428↑o</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                mov     edx, esp</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                sysenter</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>_KiFastSystemCall@0 endp</pre></td></tr></table></figure><p>如果 CPU 不支持快速调用，操作系统就会填入 KiIntSystemCall 函数的地址，我们可以看一下：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>_DWORD __stdcall KiIntSystemCall ()</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>                public _KiIntSystemCall@0</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>_KiIntSystemCall@0 proc near            ; DATA XREF: .text:off_7C923428↑o</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>arg_4           &#x3D; byte ptr  8</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                lea     edx, [esp+arg_4] ; 参数指针</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                int     2Eh             ; DOS 2+ internal - EXECUTE COMMAND</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                                        ; DS:SI -&gt; counted CR-terminated command string</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                retn</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t\t\t</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>_KiIntSystemCall@0 endp</pre></td></tr></table></figure><h1 id=\"重写-readprocessmemory-和-writeprocessmemory\"><a class=\"anchor\" href=\"#重写-readprocessmemory-和-writeprocessmemory\">#</a> 重写 ReadProcessMemory 和 WriteProcessMemory</h1>\n<p>首先分析一下这两个函数的调用流程</p>\n<h2 id=\"readprocessmemory-3环调用流程\"><a class=\"anchor\" href=\"#readprocessmemory-3环调用流程\">#</a> ReadProcessMemory 3 环调用流程</h2>\n<p>在 kernel32.dll 中</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>.text:7C8021D0 ; BOOL __stdcall ReadProcessMemory(HANDLE hProcess, LPCVOID lpBaseAddress, LPVOID lpBuffer, SIZE_T nSize, SIZE_T *lpNumberOfBytesRead)</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>.text:7C8021D0                 public _ReadProcessMemory@20</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>.text:7C8021D0 _ReadProcessMemory@20 proc near         ; CODE XREF: GetProcessVersion(x)+2F18B↓p</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>.text:7C8021D0                                         ; GetProcessVersion(x)+2F1AA↓p ...</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>.text:7C8021D0</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>.text:7C8021D0 hProcess        &#x3D; dword ptr  8</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>.text:7C8021D0 lpBaseAddress   &#x3D; dword ptr  0Ch</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>.text:7C8021D0 lpBuffer        &#x3D; dword ptr  10h</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>.text:7C8021D0 nSize           &#x3D; dword ptr  14h</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>.text:7C8021D0 lpNumberOfBytesRead&#x3D; dword ptr  18h</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>.text:7C8021D0</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>.text:7C8021D0                 mov     edi, edi</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>.text:7C8021D2                 push    ebp</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>.text:7C8021D3                 mov     ebp, esp</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>.text:7C8021D5                 lea     eax, [ebp+nSize]</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>.text:7C8021D8                 push    eax             ; NumberOfBytesRead</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>.text:7C8021D9                 push    [ebp+nSize]     ; NumberOfBytesToRead</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>.text:7C8021DC                 push    [ebp+lpBuffer]  ; Buffer</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>.text:7C8021DF                 push    [ebp+lpBaseAddress] ; BaseAddress</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>.text:7C8021E2                 push    [ebp+hProcess]  ; ProcessHandle</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>.text:7C8021E5                 call    ds:__imp__NtReadVirtualMemory@20 ; NtReadVirtualMemory(x,x,x,x,x)</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>.text:7C8021EB                 mov     ecx, [ebp+lpNumberOfBytesRead]</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>.text:7C8021EE                 test    ecx, ecx</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>.text:7C8021F0                 jnz     short loc_7C8021FD</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>.text:7C8021F2</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>.text:7C8021F2 loc_7C8021F2:                           ; CODE XREF: ReadProcessMemory(x,x,x,x,x)+32↓j</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>.text:7C8021F2                 test    eax, eax</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>.text:7C8021F4                 jl      short loc_7C802204</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>.text:7C8021F6                 xor     eax, eax</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>.text:7C8021F8                 inc     eax</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>.text:7C8021F9</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>.text:7C8021F9 loc_7C8021F9:                           ; CODE XREF: ReadProcessMemory(x,x,x,x,x)+3C↓j</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>.text:7C8021F9                 pop     ebp</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>.text:7C8021FA                 retn    14h</pre></td></tr></table></figure><p>发现其调用了 ntdll.dll 中的 NtReadVirtualMemory 函数</p>\n<p>查看 ntdll.dll 中的 NtReadVirtualMemory</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>.text:7C92D9E0 ; __stdcall NtReadVirtualMemory(x, x, x, x, x)</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>.text:7C92D9E0                 public _NtReadVirtualMemory@20</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>.text:7C92D9E0 _NtReadVirtualMemory@20 proc near       ; CODE XREF: LdrFindCreateProcessManifest(x,x,x,x,x)+1CC↓p</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>.text:7C92D9E0                                         ; LdrCreateOutOfProcessImage(x,x,x,x)+7C↓p ...</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>.text:7C92D9E0                 mov     eax, 0BAh       ; NtReadVirtualMemory</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>.text:7C92D9E5                 mov     edx, 7FFE0300h</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>.text:7C92D9EA                 call    dword ptr [edx]</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>.text:7C92D9EC                 retn    14h</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>.text:7C92D9EC _NtReadVirtualMemory@20 endp</pre></td></tr></table></figure><p>其堆栈变化为：</p>\n<p><img data-src=\"image004.png\" alt=\"\" /></p>\n<h2 id=\"rewriter3apicpp\"><a class=\"anchor\" href=\"#rewriter3apicpp\">#</a> RewriteR3API.cpp</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span>  <span class=\"token macro-name\">_CRT_SECURE_NO_WARNINGS</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;Windows.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 读进程内存（中断门调用）</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>BOOL WINAPI <span class=\"token function\">HbgReadProcessMemory_INT</span><span class=\"token punctuation\">(</span>HANDLE hProcess<span class=\"token punctuation\">,</span> LPCVOID lpBaseAddress<span class=\"token punctuation\">,</span> LPVOID lpBuffer<span class=\"token punctuation\">,</span> DWORD nSize<span class=\"token punctuation\">,</span> LPDWORD lpNumberOfBytesRead<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tLONG NtStatus<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t__asm</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token comment\">// 直接模拟 KiIntSystemCall</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\tlea edx<span class=\"token punctuation\">,</span> hProcess<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 要求 edx 存储最后入栈的参数</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\tmov eax<span class=\"token punctuation\">,</span> <span class=\"token number\">0xBA</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> <span class=\"token number\">0x2E</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\tmov NtStatus<span class=\"token punctuation\">,</span> eax<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lpNumberOfBytesRead <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t<span class=\"token operator\">*</span>lpNumberOfBytesRead <span class=\"token operator\">=</span> nSize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token comment\">// 错误检查</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>NtStatus <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> FALSE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token keyword\">return</span> TRUE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\">// 读进程内存（快速调用）</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>BOOL WINAPI <span class=\"token function\">HbgReadProcessMemory_FAST</span><span class=\"token punctuation\">(</span>HANDLE hProcess<span class=\"token punctuation\">,</span> LPCVOID lpBaseAddress<span class=\"token punctuation\">,</span> LPVOID lpBuffer<span class=\"token punctuation\">,</span> DWORD nSize<span class=\"token punctuation\">,</span> LPDWORD lpNumberOfBytesRead<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\tLONG NtStatus<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t__asm</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\t<span class=\"token comment\">// 模拟 ReadProcessMemory</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\tlea eax<span class=\"token punctuation\">,</span> nSize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\tpush eax<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\tpush nSize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\tpush lpBuffer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\tpush lpBaseAddress<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\tpush hProcess<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\tsub esp<span class=\"token punctuation\">,</span> <span class=\"token number\">0x04</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 模拟 ReadProcessMemory 里的 CALL NtReadVirtualMemory</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\t<span class=\"token comment\">// 模拟 NtReadVirtualMemory</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\tmov eax<span class=\"token punctuation\">,</span> <span class=\"token number\">0xBA</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\tpush NtReadVirtualMemoryReturn<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 模拟 NtReadVirtualMemory 函数里的 CALL [0x7FFE0300]</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t\t<span class=\"token comment\">// 模拟 KiFastSystemCall</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t\tmov edx<span class=\"token punctuation\">,</span> esp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t\t_emit <span class=\"token number\">0x0F</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// sysenter </span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t\t_emit <span class=\"token number\">0x34</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\tNtReadVirtualMemoryReturn<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t\tadd esp<span class=\"token punctuation\">,</span> <span class=\"token number\">0x18</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 模拟 NtReadVirtualMemory 返回到 ReadProcessMemory 时的 RETN 0x14</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t\tmov NtStatus<span class=\"token punctuation\">,</span> eax<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lpNumberOfBytesRead <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t\t<span class=\"token operator\">*</span>lpNumberOfBytesRead <span class=\"token operator\">=</span> nSize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t<span class=\"token comment\">// 错误检查</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>NtStatus <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> FALSE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t<span class=\"token keyword\">return</span> TRUE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre></pre></td></tr><tr><td data-num=\"66\"></td><td><pre><span class=\"token comment\">// 写进程内存（中断门调用）</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>BOOL WINAPI <span class=\"token function\">HbgWriteProcessMemory_INT</span><span class=\"token punctuation\">(</span>HANDLE hProcess<span class=\"token punctuation\">,</span> LPCVOID lpBaseAddress<span class=\"token punctuation\">,</span> LPVOID lpBuffer<span class=\"token punctuation\">,</span> DWORD nSize<span class=\"token punctuation\">,</span> LPDWORD lpNumberOfBytesWritten<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\tLONG NtStatus<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\t__asm</pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\t\tlea edx<span class=\"token punctuation\">,</span> hProcess<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>\t\tmov eax<span class=\"token punctuation\">,</span> <span class=\"token number\">0x115</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> <span class=\"token number\">0x2E</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\t\tmov NtStatus<span class=\"token punctuation\">,</span> eax<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lpNumberOfBytesWritten <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>\t\t<span class=\"token operator\">*</span>lpNumberOfBytesWritten <span class=\"token operator\">=</span> nSize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>\t<span class=\"token comment\">// 错误检查</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>NtStatus <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> FALSE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>\t<span class=\"token keyword\">return</span> TRUE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre></pre></td></tr><tr><td data-num=\"89\"></td><td><pre><span class=\"token comment\">// 写进程内存（快速调用）</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>BOOL WINAPI <span class=\"token function\">HbgWriteProcessMemory_FAST</span><span class=\"token punctuation\">(</span>HANDLE hProcess<span class=\"token punctuation\">,</span> LPCVOID lpBaseAddress<span class=\"token punctuation\">,</span> LPVOID lpBuffer<span class=\"token punctuation\">,</span> DWORD nSize<span class=\"token punctuation\">,</span> LPDWORD lpNumberOfBytesWritten<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>\tLONG NtStatus<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>\t__asm</pre></td></tr><tr><td data-num=\"94\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>\t\t<span class=\"token comment\">// 模拟 WriteProcessMemory</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>\t\tlea eax<span class=\"token punctuation\">,</span> nSize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>\t\tpush eax<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>\t\tpush nSize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>\t\tpush lpBuffer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>\t\tpush lpBaseAddress<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>\t\tpush hProcess<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>\t\tsub esp<span class=\"token punctuation\">,</span> <span class=\"token number\">0x04</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 模拟 WriteProcessMemory 里的 CALL NtWriteVirtualMemory</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>\t\t<span class=\"token comment\">// 模拟 NtWriteVirtualMemory</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>\t\tmov eax<span class=\"token punctuation\">,</span> <span class=\"token number\">0x115</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>\t\tpush NtWriteVirtualMemoryReturn<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 模拟 NtWriteVirtualMemory 函数里的 CALL [0x7FFE0300]</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>\t\t<span class=\"token comment\">// 模拟 KiFastSystemCall</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>\t\tmov edx<span class=\"token punctuation\">,</span> esp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>\t\t_emit <span class=\"token number\">0x0F</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// sysenter </span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>\t\t_emit <span class=\"token number\">0x34</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>\tNtWriteVirtualMemoryReturn<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>\t\tadd esp<span class=\"token punctuation\">,</span> <span class=\"token number\">0x18</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 模拟 NtWriteVirtualMemory 返回到 WriteProcessMemory 时的 RETN 0x14</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>\t\tmov NtStatus<span class=\"token punctuation\">,</span> eax<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lpNumberOfBytesWritten <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>\t\t<span class=\"token operator\">*</span>lpNumberOfBytesWritten <span class=\"token operator\">=</span> nSize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>\t<span class=\"token comment\">// 错误检查</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>NtStatus <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> FALSE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>\t<span class=\"token keyword\">return</span> TRUE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre></pre></td></tr><tr><td data-num=\"126\"></td><td><pre><span class=\"token comment\">// 提权函数：提升为 DEBUG 权限</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>BOOL <span class=\"token function\">EnableDebugPrivilege</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>\tHANDLE hToken<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>\tBOOL fOk <span class=\"token operator\">=</span> FALSE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">OpenProcessToken</span><span class=\"token punctuation\">(</span><span class=\"token function\">GetCurrentProcess</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> TOKEN_ADJUST_PRIVILEGES<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>hToken<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>\t\tTOKEN_PRIVILEGES tp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>\t\ttp<span class=\"token punctuation\">.</span>PrivilegeCount <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>\t\t<span class=\"token function\">LookupPrivilegeValue</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> SE_DEBUG_NAME<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>tp<span class=\"token punctuation\">.</span>Privileges<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>Luid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>\t\ttp<span class=\"token punctuation\">.</span>Privileges<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>Attributes <span class=\"token operator\">=</span> SE_PRIVILEGE_ENABLED<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>\t\t<span class=\"token function\">AdjustTokenPrivileges</span><span class=\"token punctuation\">(</span>hToken<span class=\"token punctuation\">,</span> FALSE<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>tp<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>tp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>\t\tfOk <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token function\">GetLastError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> ERROR_SUCCESS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>\t\t<span class=\"token function\">CloseHandle</span><span class=\"token punctuation\">(</span>hToken<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>\t<span class=\"token keyword\">return</span> fOk<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre></pre></td></tr><tr><td data-num=\"146\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>\t<span class=\"token function\">EnableDebugPrivilege</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre></pre></td></tr><tr><td data-num=\"150\"></td><td><pre>\tDWORD pid<span class=\"token punctuation\">,</span> addr<span class=\"token punctuation\">,</span> dwRead<span class=\"token punctuation\">,</span> dwWritten<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"151\"></td><td><pre>\t<span class=\"token keyword\">char</span> buff<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"依次输入PID和要读的线性地址（均为16进制）...\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"153\"></td><td><pre>\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%x %x\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>pid<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"154\"></td><td><pre>\t<span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"155\"></td><td><pre></pre></td></tr><tr><td data-num=\"156\"></td><td><pre>\t<span class=\"token comment\">// 测试两个版本的 ReadProcessMemory</span></pre></td></tr><tr><td data-num=\"157\"></td><td><pre>\t<span class=\"token function\">HbgReadProcessMemory_INT</span><span class=\"token punctuation\">(</span><span class=\"token function\">OpenProcess</span><span class=\"token punctuation\">(</span>PROCESS_ALL_ACCESS<span class=\"token punctuation\">,</span> FALSE<span class=\"token punctuation\">,</span> pid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>LPCVOID<span class=\"token punctuation\">)</span>addr<span class=\"token punctuation\">,</span> buff<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>dwRead<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"158\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"读取了%d个字节，内容是: \\\"%s\\\"\\n\"</span><span class=\"token punctuation\">,</span> dwRead<span class=\"token punctuation\">,</span> buff<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"159\"></td><td><pre>\t<span class=\"token function\">HbgReadProcessMemory_FAST</span><span class=\"token punctuation\">(</span><span class=\"token function\">OpenProcess</span><span class=\"token punctuation\">(</span>PROCESS_ALL_ACCESS<span class=\"token punctuation\">,</span> FALSE<span class=\"token punctuation\">,</span> pid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>LPCVOID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>addr <span class=\"token operator\">+</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> buff<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>dwRead<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"160\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"读取了%d个字节，内容是: \\\"%s\\\"\\n\"</span><span class=\"token punctuation\">,</span> dwRead<span class=\"token punctuation\">,</span> buff<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"161\"></td><td><pre></pre></td></tr><tr><td data-num=\"162\"></td><td><pre>\t<span class=\"token comment\">// 测试两个版本的 WriteProcessMemory</span></pre></td></tr><tr><td data-num=\"163\"></td><td><pre>\t<span class=\"token function\">HbgWriteProcessMemory_INT</span><span class=\"token punctuation\">(</span><span class=\"token function\">OpenProcess</span><span class=\"token punctuation\">(</span>PROCESS_ALL_ACCESS<span class=\"token punctuation\">,</span> FALSE<span class=\"token punctuation\">,</span> pid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>LPCVOID<span class=\"token punctuation\">)</span>addr<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>LPVOID<span class=\"token punctuation\">)</span><span class=\"token string\">\"##\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>dwWritten<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"164\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"写入了%d字节.\\n\"</span><span class=\"token punctuation\">,</span> dwWritten<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"165\"></td><td><pre>\t<span class=\"token function\">HbgWriteProcessMemory_FAST</span><span class=\"token punctuation\">(</span><span class=\"token function\">OpenProcess</span><span class=\"token punctuation\">(</span>PROCESS_ALL_ACCESS<span class=\"token punctuation\">,</span> FALSE<span class=\"token punctuation\">,</span> pid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>LPCVOID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>addr <span class=\"token operator\">+</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>LPVOID<span class=\"token punctuation\">)</span><span class=\"token string\">\"**\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>dwWritten<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"166\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"写入了%d字节.\\n\"</span><span class=\"token punctuation\">,</span> dwWritten<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"167\"></td><td><pre></pre></td></tr><tr><td data-num=\"168\"></td><td><pre>\t<span class=\"token comment\">// 再次读取，验证写入是否成功</span></pre></td></tr><tr><td data-num=\"169\"></td><td><pre>\t<span class=\"token function\">HbgReadProcessMemory_INT</span><span class=\"token punctuation\">(</span><span class=\"token function\">OpenProcess</span><span class=\"token punctuation\">(</span>PROCESS_ALL_ACCESS<span class=\"token punctuation\">,</span> FALSE<span class=\"token punctuation\">,</span> pid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>LPCVOID<span class=\"token punctuation\">)</span>addr<span class=\"token punctuation\">,</span> buff<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>dwRead<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"170\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"读取了%d个字节，内容是: \\\"%s\\\"\\n\"</span><span class=\"token punctuation\">,</span> dwRead<span class=\"token punctuation\">,</span> buff<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"171\"></td><td><pre>\t<span class=\"token function\">HbgReadProcessMemory_FAST</span><span class=\"token punctuation\">(</span><span class=\"token function\">OpenProcess</span><span class=\"token punctuation\">(</span>PROCESS_ALL_ACCESS<span class=\"token punctuation\">,</span> FALSE<span class=\"token punctuation\">,</span> pid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>LPCVOID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>addr <span class=\"token operator\">+</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> buff<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>dwRead<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"172\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"读取了%d个字节，内容是: \\\"%s\\\"\\n\"</span><span class=\"token punctuation\">,</span> dwRead<span class=\"token punctuation\">,</span> buff<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"173\"></td><td><pre></pre></td></tr><tr><td data-num=\"174\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bye!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"175\"></td><td><pre>\t<span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"176\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"177\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"testrewriter3apicpp\"><a class=\"anchor\" href=\"#testrewriter3apicpp\">#</a> TestRewriteR3API.cpp</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;windows.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;Tlhelp32.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span>   </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 获取进程自身的 PID</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    HANDLE hSnapshot <span class=\"token operator\">=</span> <span class=\"token function\">CreateToolhelp32Snapshot</span><span class=\"token punctuation\">(</span>TH32CS_SNAPPROCESS<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>INVALID_HANDLE_VALUE <span class=\"token operator\">==</span> hSnapshot<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    PROCESSENTRY32 pi<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    pi<span class=\"token punctuation\">.</span>dwSize <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>PROCESSENTRY32<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 第一次使用必须初始化成员</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    BOOL bRet <span class=\"token operator\">=</span> <span class=\"token function\">Process32First</span><span class=\"token punctuation\">(</span>hSnapshot<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>pi<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>bRet<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">strcmp</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"TestReWriteR3API.exe\"</span><span class=\"token punctuation\">,</span> pi<span class=\"token punctuation\">.</span>szExeFile<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"进程ID = %X \\r\\n\"</span><span class=\"token punctuation\">,</span> pi<span class=\"token punctuation\">.</span>th32ProcessID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        bRet <span class=\"token operator\">=</span> <span class=\"token function\">Process32Next</span><span class=\"token punctuation\">(</span>hSnapshot<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>pi<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token function\">CloseHandle</span><span class=\"token punctuation\">(</span>hSnapshot<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">char</span> str<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"菜就多练练\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%p--%s\\n\"</span><span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>结果：</p>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<p>并且查看导入表中并没有 ReadProcessMemory 和 WriteProcessMemory。</p>\n<p><img data-src=\"image002.png\" alt=\"\" /></p>\n<p><img data-src=\"image003.png\" alt=\"\" /></p>\n<h1 id=\"reference\"><a class=\"anchor\" href=\"#reference\">#</a> Reference</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0t3YW5zeS9hcnRpY2xlL2RldGFpbHMvMTA5MzQxNzk0\">https://blog.csdn.net/Kwansy/article/details/109341794</span></p>\n",
            "tags": [
                "快速调用",
                "中断调用",
                "分析ReadProcessMemory",
                "KiFastSystemCall",
                "KiIntSystemCall",
                "重写3环",
                "_KUSER_SHARED_DATA"
            ]
        }
    ]
}