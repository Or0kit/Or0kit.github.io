{
    "version": "https://jsonfeed.org/version/1",
    "title": "Or0kit • All posts by \"socket\" tag",
    "description": "临渊羡鱼，不如退而结网",
    "home_page_url": "https://Or0kit.github.io",
    "items": [
        {
            "id": "https://or0kit.github.io/Programming/Python/py-socket-experiment/",
            "url": "https://or0kit.github.io/Programming/Python/py-socket-experiment/",
            "title": "Python-socket编程",
            "date_published": "2020-11-26T13:18:04.000Z",
            "content_html": "<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<p>计算机双语实验写 |ू･ω･` ) 的。</p>\n<h2 id=\"tcp\"><a class=\"anchor\" href=\"#tcp\">#</a> TCP</h2>\n<blockquote>\n<p>当初看了李华峰的《Python 渗透测试编程技术 方法与实践》里面就介绍了 socket 编程用客户端去控制服务端的的简单远程操控脚本。于是就准备自己写一个，可是写了之后发现自己写的很 Low，于是就想到前辈们常说的 “不要重复造轮子” ，就去网上找了一个，这个还不错。忘记原作者的地址，转载自 CSDN。</p>\n</blockquote>\n<h3 id=\"tcp-服务端server\"><a class=\"anchor\" href=\"#tcp-服务端server\">#</a> TCP 服务端（server）</h3>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> socket<span class=\"token punctuation\">,</span> os</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>server <span class=\"token operator\">=</span> socket<span class=\"token punctuation\">.</span>socket<span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span>AF_INET<span class=\"token punctuation\">,</span> socket<span class=\"token punctuation\">.</span>SOCK_STREAM<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 指的是 tcp 协议</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>server<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"localhost\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9999</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>server<span class=\"token punctuation\">.</span>listen<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"开始等待连接!!!\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    conn<span class=\"token punctuation\">,</span> addr <span class=\"token operator\">=</span> server<span class=\"token punctuation\">.</span>accept<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"客户端地址：\"</span><span class=\"token punctuation\">,</span> addr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"端口：\"</span><span class=\"token punctuation\">,</span> addr<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"客户端连接成功\\n\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"开始工作\"</span><span class=\"token punctuation\">.</span>center<span class=\"token punctuation\">(</span><span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"-\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"等待新指令：\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            msg <span class=\"token operator\">=</span> conn<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 接收客户端信息并解码，默认为 UTF-8 编码</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> msg<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                <span class=\"token keyword\">continue</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token keyword\">elif</span> msg <span class=\"token operator\">==</span> <span class=\"token string\">\"bye\"</span> <span class=\"token keyword\">or</span> msg <span class=\"token operator\">==</span> <span class=\"token string\">\"exit\"</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"客户端[%s:%s]已断开连接！！！\\n\"</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>addr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> addr<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                <span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"执行新指令：%s\"</span> <span class=\"token operator\">%</span> msg<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                <span class=\"token comment\"># 接受字符串，相当于在 dos 命令界面，执行命令</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                cmd_res <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>popen<span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                <span class=\"token comment\"># 将命令的结果编译成 \\xx\\xx\\xx, 再进行统计字符数，因为结果中有汉字，编码后的一个汉字</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                <span class=\"token comment\">#为三个字符，所以客户端接收的时候也要统计 bytes 类型的字符数</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                cmd_size <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>cmd_res<span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">\"utf-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                    </pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                <span class=\"token keyword\">if</span> cmd_size <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 如果执行的是错误的命令，数据大小就为 0，就执行下面的语句</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                    <span class=\"token comment\"># 发送一个 0 给客户端，客户端接收的是个字符串 0 就表示命令有误，可以重新输入</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                    conn<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span><span class=\"token string\">\"0\"</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">\"utf-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                    <span class=\"token keyword\">continue</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                <span class=\"token comment\"># 发送响应数据的大小（全部是变为 bytes 类型后统计的字符数）    </span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                conn<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>cmd_size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">\"utf-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                cli_res <span class=\"token operator\">=</span> conn<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>cli_res<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                conn<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>cmd_res<span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">\"utf-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 发送真实的数据</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"all send done。。。。。。\\n\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token comment\"># 客户端轻强制断开时，服务端会报这个错误，利用断言来捕获异常        </span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token keyword\">except</span> ConnectionResetError <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>  </pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            <span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token triple-quoted-string string\">'''</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>TCP黏包问题：</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>面向流的通信特点和Nagle算法：</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>TCP（transport control protocol，传输控制协议）是面向连接的，面向流的，提供高可靠性服务。</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>收发两端（客户端和服务器端）都要有一一成对的socket，因此，发送端为了将多个发往接收端的包，更有效的发</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>到对方，使用了优化方法（Nagle算法），</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>将多次间隔较小且数据量小的数据，合并成一个大的数据块，然后进行封包。</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>这样，接收端，就难于分辨出来了，必须提供科学的拆包机制。 即面向流的通信是无消息保护边界的。</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>对于空消息：tcp是基于数据流的，于是收发的消息不能为空，这就需要在客户端和服务端都添加空消息的处理机</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>制，防止程序卡住，而udp是基于数据报的，</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>即便是你输入的是空内容（直接回车），也可以被发送，udp协议会帮你封装上消息头发送过去。</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>可靠黏包的tcp协议：tcp的协议数据不会丢，没有收完包，下次接收，会继续上次继续接收，己端总是在收到ack</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>时才会清除缓冲区内容。数据是可靠的，</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>但是会粘包。</pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>黏包有两种：</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>一种是因为发送数据包时，每次发送的包小，因为系统进行优化算法，就将两次的包放在一起发送，减少了资源的</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>重复占用。多次发送会经历多次网络延迟，</pre></td></tr><tr><td data-num=\"62\"></td><td><pre>一起发送会减少网络延迟的次数。因此在发送小数据时会将两次数据一起发送，而客户端接收时，则会一并接收。</pre></td></tr><tr><td data-num=\"63\"></td><td><pre>#即出现多次send会出现黏包</pre></td></tr><tr><td data-num=\"64\"></td><td><pre></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>第二种是因为接收数据时，又多次接收，第一次接收的数据量小，导致数据还没接收完，就停下了，剩余的数据会</pre></td></tr><tr><td data-num=\"66\"></td><td><pre>缓存在内存中，然后等到下次接收时和下</pre></td></tr><tr><td data-num=\"67\"></td><td><pre>一波数据一起接收。</pre></td></tr><tr><td data-num=\"68\"></td><td><pre></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>发送方问题：</pre></td></tr><tr><td data-num=\"70\"></td><td><pre>发送端需要等缓冲区满才发送出去，造成粘包（发送数据时间间隔很短，数据了很小，会合到一起，产生粘包）</pre></td></tr><tr><td data-num=\"71\"></td><td><pre></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>接收方问题：</pre></td></tr><tr><td data-num=\"73\"></td><td><pre>接收方不及时接收缓冲区的包，造成多个包接收（客户端发送了一段数据，服务端只收了一小部分，服务端下次再</pre></td></tr><tr><td data-num=\"74\"></td><td><pre>收的时候还是从缓冲区拿上次遗留的数据，</pre></td></tr><tr><td data-num=\"75\"></td><td><pre>产生粘包）</pre></td></tr><tr><td data-num=\"76\"></td><td><pre>'''</span></pre></td></tr></table></figure><h3 id=\"tcp-客户端client\"><a class=\"anchor\" href=\"#tcp-客户端client\">#</a> TCP 客户端（client）</h3>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n </span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> socket</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>client <span class=\"token operator\">=</span> socket<span class=\"token punctuation\">.</span>socket<span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span>AF_INET<span class=\"token punctuation\">,</span> socket<span class=\"token punctuation\">.</span>SOCK_STREAM<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>client<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"localhost\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9999</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    msg <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\">>>:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>strip<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> msg<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">continue</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    client<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">\"utf-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 发送命令</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">if</span> msg <span class=\"token operator\">==</span> <span class=\"token string\">\"bye\"</span> <span class=\"token keyword\">or</span> msg <span class=\"token operator\">==</span> <span class=\"token string\">\"exit\"</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    cmd_size <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 接收响应数据的大小，此时接收的数据为 bytes 类型</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">if</span> cmd_size<span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 如果等于字符串 0 就表示命令有误</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"执行无结果，可能命令错误，请重新输入\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">continue</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"数据总大小为：\"</span><span class=\"token punctuation\">,</span> cmd_size<span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\"># 将结果解码，如果不解码，打印的结果中前面会多一个 “b” 例如：b\"593\"</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    client<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span><span class=\"token string\">\"已收到发的数据。\"</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">\"utf-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>     <span class=\"token comment\"># 防止黏包，只有 TCP 有粘包现象，UDP 永远不会粘包</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    data_size <span class=\"token operator\">=</span> <span class=\"token number\">0</span>  <span class=\"token comment\"># 数据的起始值</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    data_total <span class=\"token operator\">=</span> <span class=\"token string\">b\"\"</span>  <span class=\"token comment\"># 空值，用于和后面接收的数据拼接起来，形成完整的响应数据</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">while</span> data_size <span class=\"token operator\">!=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>cmd_size<span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  </pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token comment\"># 判断服务端发送的大小和客户端接收的大小是否一致，一致表示全部接收，不一致时一直循环接收数据</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        data <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 接收的是 bytes 类型</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        data_size <span class=\"token operator\">+=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token comment\"># 接收的数据大小，这里的汉字也变成了 bytes 类型，一个汉字为 3 个字符，和服务端一致</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        data_total <span class=\"token operator\">+=</span> data  <span class=\"token comment\"># 这里不能解码，因为拼接的类型就是 bytes 类型</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"实际接收的大小：\"</span><span class=\"token punctuation\">,</span> data_size<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 实际接收的总数据大小</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>data_total<span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 将所有接收到的结果进行解码，得到可见的结果</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"recv done ......\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>client<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"udp\"><a class=\"anchor\" href=\"#udp\">#</a> UDP</h2>\n<p>这仅仅是一个简单的 socket 通信脚本</p>\n<h3 id=\"udp服务端server\"><a class=\"anchor\" href=\"#udp服务端server\">#</a> UDP 服务端（server）</h3>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token triple-quoted-string string\">'''</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>UDP 服务端</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>accept()和connect()方法都不需要</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre># 接收客户端传来的数据 recvfrom接收客户端的数据，默认是阻塞的，直到有客户端传来数据</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        # recvfrom 参数的意义，表示最大能接收多少数据，单位是字节</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        # recvfrom返回值说明</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        # receive_data表示接受到的传来的数据,是bytes类型</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        # client  表示传来数据的客户端的身份信息，客户端的ip和端口，元组</pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre># 创建一个套接字socket对象，用于进行通讯</pre></td></tr><tr><td data-num=\"13\"></td><td><pre># # socket.AF_INET 指明使用INET地址集，进行网间通讯</pre></td></tr><tr><td data-num=\"14\"></td><td><pre># # socket.SOCK_DGRAM 指明使用数据协议，即使用传输层的udp协议</pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>'''</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">import</span> socket  </pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">import</span> time  </pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\"># server 接收端</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>server_socket <span class=\"token operator\">=</span> socket<span class=\"token punctuation\">.</span>socket<span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span>AF_INET<span class=\"token punctuation\">,</span> socket<span class=\"token punctuation\">.</span>SOCK_DGRAM<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>address <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"127.0.0.1\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9977</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>server_socket<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">(</span>address<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>server_socket<span class=\"token punctuation\">.</span>settimeout<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 设置一个时间提示，如果 10 秒钟没接到数据进行提示</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ヽ(ー_ー)ノ启动socket服务，等待客户端连接...'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        now <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 获取当前时间</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        receive_data<span class=\"token punctuation\">,</span> client <span class=\"token operator\">=</span> server_socket<span class=\"token punctuation\">.</span>recvfrom<span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        server_socket<span class=\"token punctuation\">.</span>sendto<span class=\"token punctuation\">(</span><span class=\"token string\">\"服务器已收到你的信息la(๑╹ヮ╹๑)ﾉ \"</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> client<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token keyword\">if</span> receive_data<span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"exit\"</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            exit<span class=\"token punctuation\">(</span><span class=\"token string\">\"结束通讯 (￢_￢)瞄\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>strftime<span class=\"token punctuation\">(</span><span class=\"token string\">'%Y-%m-%d %H:%M:%S'</span><span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">.</span>localtime<span class=\"token punctuation\">(</span>now<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 以指定格式显示时间</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"收到(*￣︶￣)来自客户端&#123;&#125;端口为&#123;&#125;,发送的\\n*********\\n&#123;&#125;\\n*********\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>client<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> client<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> receive_data<span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">except</span> socket<span class=\"token punctuation\">.</span>timeout<span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 如果 10 秒钟没有接收数据进行提示</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"10秒没理我la(^_−)☆\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"udp客户端client\"><a class=\"anchor\" href=\"#udp客户端client\">#</a> UDP 客户端（client）</h3>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token triple-quoted-string string\">'''</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>UDP</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>客户端</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>创建套接字，连接远端地址</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>连接后发送数据和接受数据</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>传输完毕，关闭套接字</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>'''</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">import</span> socket</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">import</span> time</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\"># client 发送端</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>client_socket <span class=\"token operator\">=</span> socket<span class=\"token punctuation\">.</span>socket<span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span>AF_INET<span class=\"token punctuation\">,</span> socket<span class=\"token punctuation\">.</span>SOCK_DGRAM<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>server_address <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"127.0.0.1\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9977</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 接收方 服务器的 ip 地址和端口号</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    start <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>strftime<span class=\"token punctuation\">(</span><span class=\"token string\">'%Y-%m-%d %H:%M:%S'</span><span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">.</span>localtime<span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 以指定格式显示当前时间</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    msg <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"(*^▽^*)客户端，请输入要发送的内容：\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    client_socket<span class=\"token punctuation\">.</span>sendto<span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> server_address<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 将 msg 内容发送给指定接收方</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">if</span> msg <span class=\"token operator\">==</span> <span class=\"token string\">\"exit\"</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        exit<span class=\"token punctuation\">(</span><span class=\"token string\">\"结束通讯 (￢_￢)瞄\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    receive_data<span class=\"token punctuation\">,</span> server <span class=\"token operator\">=</span> client_socket<span class=\"token punctuation\">.</span>recvfrom<span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"(︶.̮︶✽)接收到来自&#123;&#125;端口为&#123;&#125;的信息:\\n**********\\n&#123;&#125;\\n**********\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>server<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> server<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> receive_data<span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure>",
            "tags": [
                "socket"
            ]
        }
    ]
}