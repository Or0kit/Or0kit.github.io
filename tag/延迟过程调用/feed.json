{
    "version": "https://jsonfeed.org/version/1",
    "title": "Or0kit • All posts by \"延迟过程调用\" tag",
    "description": "临渊羡鱼，不如退而结网",
    "home_page_url": "https://Or0kit.github.io",
    "items": [
        {
            "id": "https://or0kit.github.io/Bin/Core/WindowsXp/Process-Thread/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B-%E5%BB%B6%E8%BF%9F%E8%BF%87%E7%A8%8B%E8%B0%83%E7%94%A8-DPC/",
            "url": "https://or0kit.github.io/Bin/Core/WindowsXp/Process-Thread/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B-%E5%BB%B6%E8%BF%9F%E8%BF%87%E7%A8%8B%E8%B0%83%E7%94%A8-DPC/",
            "title": "进程与线程-延迟过程调用(DPC)",
            "date_published": "2022-02-21T07:30:24.000Z",
            "content_html": "<h1 id=\"楔子\"><a class=\"anchor\" href=\"#楔子\">#</a> 楔子</h1>\n<p>这是中断相关的知识，先了解中断请求级别（IRQL）</p>\n<div class=\"note primary\">\n<p><strong>软件 IRQL (Software IRQL)</strong></p>\n<p>PASSIVE_LEVEL 0 // Passive release level<br />\nLOW_LEVEL 0 // Lowest interrupt level<br />\nAPC_LEVEL 1 // APC interrupt level<br />\nDISPATCH_LEVEL 2 // Dispatch level</p>\n<p><strong>硬件 IRQL (Hardware IRQL)</strong></p>\n<p>DIRQL: from 3 to 26 for device ISR<br />\nPROFILE_LEVEL 27, 0x1B // Timer used for profiling.<br />\nCLOCK1_LEVEL 28, 0x1C // Interval clock 1 level - not used on x86<br />\nCLOCK2_LEVEL 28, 0x1C // Interval clock 2 level<br />\nSYNCH_LEVEL 28, 0x1C // Synchronization level<br />\nIPI_LEVEL 29, 0x1D // Interprocessor interrupt level<br />\nPOWER_LEVEL 30, 0x1E // Power failure level<br />\nHIGH_LEVEL 31, 0x1F // Highest interrupt level</p>\n</div>\n<p>数值越大代表其 IRQL 的优先级越高。</p>\n<h1 id=\"延迟过程调用dpc\"><a class=\"anchor\" href=\"#延迟过程调用dpc\">#</a> 延迟过程调用（DPC）</h1>\n<p>DPC 是 &quot;Deferred Procedure Call&quot; 的缩写。<br />\n简单介绍一下 DPC：DPC 是为了减少处于高  <code>IRQL</code>  的硬件中断处理的时间。<br />\n由于低  <code>IRQL</code>  的硬件中断不能中断高  <code>IRQL</code>  的硬件中断处理。而可能<strong>有些硬件的中断处理代码量比较大，花的时间比较多，会造成其他硬件中断的响应会等的时间比较长</strong>。</p>\n<div class=\"note primary\">\n<p>DPC 运行在  <code>DISPATCH_LEVEL</code>  上，低于任何一个硬件中断的  <code>IRQL</code>  ，所以 DPC 在执行的时候不会屏蔽任何硬件中断，但由于它高于或等于任何软件中断的  <code>IRQL</code>  ，所以它有优于任何线程的执行，也屏蔽了线程调度。可以说，DPC 是介于硬件中断和线程调度之间的一个 <code>IRQL</code> ，他可以打断当前线程的执行，凌驾于线程调度器纸上，但又不屏蔽任何硬件中断。</p>\n</div>\n<h2 id=\"dpc-队列\"><a class=\"anchor\" href=\"#dpc-队列\">#</a> DPC 队列</h2>\n<p>对单 cpu 的系统，整个系统只有一个 DPC 队列，对于多 cpu 系统有可能是一个 cpu 一个，这里我把 xp 虚拟机设置为了多核，查看了其每个核的  <code>KPRCB</code>  中  <code>+0x860 DpcListHead      : _LIST_ENTRY</code>  处的值，都不一样。</p>\n<p>所有的 DPC 都链在这个链上，这个队列是个  <code>LIST_ENTRY</code>  链表。</p>\n<p>链上的每项都是个  <code>KDPC</code>  结构。</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kd&gt; dt _KDPC</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>nt!_KDPC</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   +0x000 Type             : Int2B</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   +0x002 Number           : UChar  &#x2F;&#x2F; 优先级也可以称为紧迫程度分别为 0 1 2</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   +0x003 Importance       : UChar  &#x2F;&#x2F; 指明目标处理器</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   +0x004 DpcListEntry     : _LIST_ENTRY  &#x2F;&#x2F; 当前结构体在 DPC 请求队列中的链表节点</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   +0x00c DeferredRoutine  : Ptr32 void   &#x2F;&#x2F; 指向具体的 DPC 函数</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   +0x010 DeferredContext  : Ptr32 Void   &#x2F;&#x2F; 执行 DPC 函数时的上下文</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   +0x014 SystemArgument1  : Ptr32 Void   &#x2F;&#x2F; 执行 DPC 函数时的参数</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   +0x018 SystemArgument2  : Ptr32 Void</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   +0x01c Lock             : Ptr32 Uint4B &#x2F;&#x2F;DPC 的锁</pre></td></tr></table></figure><p>在  <code>KPRCB</code>  中挂着，等待触发时机。其中的  <code>DeferredRoutine</code>  是必须的，有没有上下文和参数都可以。具体的应该逆向函数。</p>\n<h2 id=\"dpc-的初始化\"><a class=\"anchor\" href=\"#dpc-的初始化\">#</a> DPC 的初始化</h2>\n<p>在 IDA 中查看  <code>KeInitializeDpc</code>  函数:</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>; void __stdcall KeInitializeDpc(PRKDPC Dpc, PKDEFERRED_ROUTINE DeferredRoutine, PVOID DeferredContext)</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>.text:00422EEE                 public _KeInitializeDpc@12</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>.text:00422EEE _KeInitializeDpc@12 proc near           ; CODE XREF: IopInitializeIrpStackProfiler()+29↑p</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>.text:00422EEE                                         ; VdmpDelayInterrupt(x)+26B↓p ...</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>.text:00422EEE</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>.text:00422EEE Dpc             &#x3D; dword ptr  8</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>.text:00422EEE DeferredRoutine &#x3D; dword ptr  0Ch</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>.text:00422EEE DeferredContext &#x3D; dword ptr  10h</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>.text:00422EEE</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>.text:00422EEE                 mov     edi, edi</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>.text:00422EF0                 push    ebp</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>.text:00422EF1                 mov     ebp, esp</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>.text:00422EF3                 mov     eax, [ebp+Dpc]</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>.text:00422EF6                 mov     ecx, [ebp+DeferredRoutine]</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>.text:00422EF9                 and     [eax+_KDPC.Lock], 0</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>.text:00422EFD                 mov     [eax+_KDPC.DeferredRoutine], ecx</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>.text:00422F00                 mov     ecx, [ebp+DeferredContext]</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>.text:00422F03                 mov     [eax+_KDPC.Type], 13h</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>.text:00422F08                 mov     [eax+_KDPC.Number], 0</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>.text:00422F0C                 mov     [eax+_KDPC.Importance], 1</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>.text:00422F10                 mov     [eax+_KDPC.DeferredContext], ecx</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>.text:00422F13                 pop     ebp</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>.text:00422F14                 retn    0Ch</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>.text:00422F14 _KeInitializeDpc@12 endp</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>.text:00422F14</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>.text:00422F14 ; ---------------------------------------------------------------------------</pre></td></tr></table></figure><p>就是填充结构体。</p>\n<p>参考以下代码：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>VOID</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">KeInitializeDpc</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    IN PRKDPC Dpc<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    IN PKDEFERRED_ROUTINE DeferredRoutine<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    IN PVOID DeferredContext</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">/*++</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>Routine Description:</pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    This function initializes a kernel DPC object. The deferred routine</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    and context parameter are stored in the DPC object.</pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>Arguments:</pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    Dpc - Supplies a pointer to a control object of type DPC.</pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    DeferredRoutine - Supplies a pointer to a function that is called when</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        the DPC object is removed from the current processor's DPC queue.</pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    DeferredContext - Supplies a pointer to an arbitrary data structure which is</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        to be passed to the function specified by the DeferredRoutine parameter.</pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>Return Value:</pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    None.</pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>--*/</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token comment\">// Initialize standard control object header.</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    Dpc<span class=\"token operator\">-></span>Type <span class=\"token operator\">=</span> DpcObject<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    Dpc<span class=\"token operator\">-></span>Number <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    Dpc<span class=\"token operator\">-></span>Importance <span class=\"token operator\">=</span> MediumImportance<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token comment\">// Initialize deferred routine address and deferred context parameter.</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    Dpc<span class=\"token operator\">-></span>DeferredRoutine <span class=\"token operator\">=</span> DeferredRoutine<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    Dpc<span class=\"token operator\">-></span>DeferredContext <span class=\"token operator\">=</span> DeferredContext<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    Dpc<span class=\"token operator\">-></span>Lock <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"dpc-队列的插入\"><a class=\"anchor\" href=\"#dpc-队列的插入\">#</a> DPC 队列的插入</h2>\n<p>逆向分析  <code>KeInsertQueueDpc</code>  函数</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>.text:00422F5A ; BOOLEAN __stdcall KeInsertQueueDpc (PRKDPC Dpc, PVOID SystemArgument1, PVOID SystemArgument2)</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>.text:00422F5A                 public _KeInsertQueueDpc@12</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>.text:00422F5A _KeInsertQueueDpc@12 proc near          ; CODE XREF: KeSetTimerEx (x,x,x,x,x)+7F↑p</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>.text:00422F5A                                         ; KiCalibrateTimeAdjustment (x)+52↓p ...</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>.text:00422F5A</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>.text:00422F5A var_8           &#x3D; dword ptr -8</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>.text:00422F5A NewIrql         &#x3D; byte ptr -1</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>.text:00422F5A Dpc             &#x3D; dword ptr  8</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>.text:00422F5A SystemArgument1 &#x3D; dword ptr  0Ch</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>.text:00422F5A SystemArgument2 &#x3D; dword ptr  10h</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>.text:00422F5A</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>.text:00422F5A                 mov     edi, edi</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>.text:00422F5C                 push    ebp</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>.text:00422F5D                 mov     ebp, esp</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>.text:00422F5F                 push    ecx</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>.text:00422F60                 push    ecx</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>.text:00422F61                 push    esi</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>.text:00422F62                 push    edi             ; 保存寄存器环境</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>.text:00422F63                 mov     cl, 1Fh         ; 提升 IRQL 等级。提升到了 31 了，谁也不能打断了</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>.text:00422F65                 call    ds:__imp_@KfRaiseIrql@4 ; KfRaiseIrql (x)</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>.text:00422F6B                 mov     [ebp+NewIrql], al</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>.text:00422F6E                 db      3Eh             ; eax 存储这 KPRCB 的地址</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>.text:00422F6E                 mov     eax, ds:0FFDFF020h</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>.text:00422F74                 mov     edi, [ebp+Dpc]  ; edi 指向 KDPC 结构</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>.text:00422F77                 mov     esi, eax</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>.text:00422F79                 lea     eax, [esi+_KPRCB.DpcLock]</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>.text:00422F7F                 mov     [ebp-8], eax    ; ebp-8 的位置存储着 _KPRCB.DpcLock</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>.text:00422F82                 lea     eax, [edi+_KDPC.Lock]</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>.text:00422F85                 mov     [ebp+8], eax    ; ebp + 8 存储着 _KDPC.Lock</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>.text:00422F88                 mov     eax, 0</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>.text:00422F8D                 mov     ecx, [ebp+8]    ; ecx 存储着 _KDPC.Lock</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>.text:00422F90                 mov     edx, [ebp-8]    ; edx 存储着 _KPRCB.DpcLock</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>.text:00422F93                 cmpxchg [ecx], edx      ; cmpxchg 指令介绍：</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>.text:00422F93                                         ; 将 AL、AX、EAX 或 RAX 寄存器中的值与第一个操作数（目标操作数）进行比较。</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>.text:00422F93                                         ; 如果这两个值相等，则将第二个操作数（源操作数）加载到目标操作数中。</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>.text:00422F93                                         ; 否则，目标操作数将被加载到 AL、AX、EAX 或 RAX 寄存器中。</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>.text:00422F93                                         ;</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>.text:00422F93                                         ; 如果 ecx &#x3D; 0 则 ecx &#x3D; edx</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>.text:00422F93                                         ; 如果 ecx !&#x3D; 0 则 eax &#x3D; edx</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>.text:00422F93                                         ; ----------</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>.text:00422F96                 test    eax, eax        ; 判断 eax 是否为 0</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>.text:00422F98                 mov     [ebp+8], eax</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>.text:00422F9B                 jnz     loc_42302A      ; 如果不等于 0 程序结束。</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>.text:00422F9B                                         ; 所以上面 cmpxchg 指令的目的就是使_KDPC.Lock &#x3D; _KPRCB.DpcLock</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>.text:00422FA1                 inc     [esi+_KPRCB.DpcCount]</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>.text:00422FA7                 add     [esi+_KPRCB.DpcQueueDepth], 1</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>.text:00422FAE                 cmp     [edi+_KDPC.Importance], 2 ; 查看优先级是否是最高级</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>.text:00422FB2                 mov     eax, [ebp+SystemArgument1]</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>.text:00422FB5                 mov     [edi+_KDPC.SystemArgument1], eax ; 填充 KDPC 结构体的参数成员</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>.text:00422FB8                 mov     eax, [ebp+SystemArgument2]</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>.text:00422FBB                 mov     [edi+_KDPC.SystemArgument2], eax</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>.text:00422FBE                 lea     ecx, [esi+_KPRCB.DpcListHead] ; ecx &#x3D; DpcListHead</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>.text:00422FC4                 lea     eax, [edi+_KDPC.DpcListEntry] ; eax &#x3D; 当前结构体在 DPC 请求队列中的链表节点</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>.text:00422FC7                 jnz     short loc_422FD7 ; 如果优先级不是最高则跳转</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>.text:00422FC7                                         ;</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>.text:00422FC7                                         ; 以下是链表操作，加到队头</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>.text:00422FC9                 mov     edx, [ecx+_LIST_ENTRY.Flink] ; edx &#x3D; DpcListHead</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>.text:00422FCB                 mov     [eax+_LIST_ENTRY.Flink], edx ; 把当前节点的前面指向链表的首部</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>.text:00422FCD                 mov     [eax+_LIST_ENTRY.Blink], ecx ; 把当前节点的后一个指向链表首部的前一个</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>.text:00422FD0                 mov     [edx+_LIST_ENTRY.Blink], eax ; edx &#x3D; 当前节点的 后一个_LIST_ENTRY.Blink</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>.text:00422FD3                 mov     [ecx+_LIST_ENTRY.Flink], eax ; 更新_KPRCB.DpcListHead 的值</pre></td></tr><tr><td data-num=\"62\"></td><td><pre>.text:00422FD5                 jmp     short loc_422FE4 ; 判断当前有没有要执行的 DPC</pre></td></tr><tr><td data-num=\"63\"></td><td><pre>.text:00422FD7 ; ---------------------------------------------------------------------------</pre></td></tr><tr><td data-num=\"64\"></td><td><pre>.text:00422FD7</pre></td></tr><tr><td data-num=\"65\"></td><td><pre>.text:00422FD7 loc_422FD7:                             ; CODE XREF: KeInsertQueueDpc (x,x,x)+6D↑j</pre></td></tr><tr><td data-num=\"66\"></td><td><pre>.text:00422FD7                 mov     edx, [ecx+4]    ; 以下是链表操作，加到队尾</pre></td></tr><tr><td data-num=\"67\"></td><td><pre>.text:00422FDA                 mov     [eax], ecx</pre></td></tr><tr><td data-num=\"68\"></td><td><pre>.text:00422FDC                 mov     [eax+4], edx</pre></td></tr><tr><td data-num=\"69\"></td><td><pre>.text:00422FDF                 mov     [edx], eax</pre></td></tr><tr><td data-num=\"70\"></td><td><pre>.text:00422FE1                 mov     [ecx+4], eax</pre></td></tr><tr><td data-num=\"71\"></td><td><pre>.text:00422FE4</pre></td></tr><tr><td data-num=\"72\"></td><td><pre>.text:00422FE4 loc_422FE4:                             ; CODE XREF: KeInsertQueueDpc (x,x,x)+7B↑j</pre></td></tr><tr><td data-num=\"73\"></td><td><pre>.text:00422FE4                 cmp     [esi+_KPRCB.DpcRoutineActive], 0 ; 判断当前有没有要执行的 DPC</pre></td></tr><tr><td data-num=\"74\"></td><td><pre>.text:00422FEB                 jnz     short loc_42302A ; 有的话就退出了，不插入队列</pre></td></tr><tr><td data-num=\"75\"></td><td><pre>.text:00422FED                 cmp     [esi+_KPRCB.DpcInterruptRequested], 0 ; 判断有没有中断的 DPC</pre></td></tr><tr><td data-num=\"76\"></td><td><pre>.text:00422FF4                 jnz     short loc_42302A</pre></td></tr><tr><td data-num=\"77\"></td><td><pre>.text:00422FF6                 cmp     [edi+_KDPC.Importance], 0 ; 查看优先级是否为 0</pre></td></tr><tr><td data-num=\"78\"></td><td><pre>.text:00422FFA                 jnz     short loc_423018 ; 优先级不为 0 则跳转开始触发 DPC</pre></td></tr><tr><td data-num=\"79\"></td><td><pre>.text:00422FFC                 mov     eax, [esi+_KPRCB.DpcQueueDepth]</pre></td></tr><tr><td data-num=\"80\"></td><td><pre>.text:00423002                 cmp     eax, [esi+_KPRCB.MaximumDpcQueueDepth] ; 比较 DPC 队列深度是否小于最大队列深度</pre></td></tr><tr><td data-num=\"81\"></td><td><pre>.text:00423008                 jnb     short loc_423018 ; 如果不小于则跳转</pre></td></tr><tr><td data-num=\"82\"></td><td><pre>.text:0042300A                 mov     eax, [esi+_KPRCB.DpcRequestRate]</pre></td></tr><tr><td data-num=\"83\"></td><td><pre>.text:00423010                 cmp     eax, [esi+_KPRCB.MinimumDpcRate]</pre></td></tr><tr><td data-num=\"84\"></td><td><pre>.text:00423016                 jnb     short loc_42302A ; 如果不小于则直接返回。</pre></td></tr><tr><td data-num=\"85\"></td><td><pre>.text:00423018</pre></td></tr><tr><td data-num=\"86\"></td><td><pre>.text:00423018 loc_423018:                             ; CODE XREF: KeInsertQueueDpc (x,x,x)+A0↑j</pre></td></tr><tr><td data-num=\"87\"></td><td><pre>.text:00423018                                         ; KeInsertQueueDpc (x,x,x)+AE↑j</pre></td></tr><tr><td data-num=\"88\"></td><td><pre>.text:00423018                 mov     cl, 2           ; 设置中断等级为 2</pre></td></tr><tr><td data-num=\"89\"></td><td><pre>.text:0042301A                 mov     [esi+_KPRCB.DpcInterruptRequested], 1</pre></td></tr><tr><td data-num=\"90\"></td><td><pre>.text:00423024                 call    ds:__imp_@HalRequestSoftwareInterrupt@4 ; 请求软件中断</pre></td></tr><tr><td data-num=\"91\"></td><td><pre>.text:0042302A</pre></td></tr><tr><td data-num=\"92\"></td><td><pre>.text:0042302A loc_42302A:                             ; CODE XREF: KeInsertQueueDpc (x,x,x)+41↑j</pre></td></tr><tr><td data-num=\"93\"></td><td><pre>.text:0042302A                                         ; KeInsertQueueDpc (x,x,x)+91↑j ...</pre></td></tr><tr><td data-num=\"94\"></td><td><pre>.text:0042302A                 mov     cl, [ebp+NewIrql] ; 把原来的 IRQL 还原</pre></td></tr><tr><td data-num=\"95\"></td><td><pre>.text:0042302D                 call    ds:__imp_@KfLowerIrql@4 ; KfLowerIrql (x)</pre></td></tr><tr><td data-num=\"96\"></td><td><pre>.text:00423033                 xor     eax, eax</pre></td></tr><tr><td data-num=\"97\"></td><td><pre>.text:00423035                 cmp     [ebp+8], eax</pre></td></tr><tr><td data-num=\"98\"></td><td><pre>.text:00423038                 pop     edi</pre></td></tr><tr><td data-num=\"99\"></td><td><pre>.text:00423039                 setz    al              ; 汇编指令 SETZ (SETE) SETNZ (SETNE)</pre></td></tr><tr><td data-num=\"100\"></td><td><pre>.text:00423039                                         ; 取标志寄存器中 ZF 的值，放到 AL 中。</pre></td></tr><tr><td data-num=\"101\"></td><td><pre>.text:00423039                                         ; SETNE 取得 ZF 值后，取反，再放到 AL 中。</pre></td></tr><tr><td data-num=\"102\"></td><td><pre>.text:0042303C                 pop     esi</pre></td></tr><tr><td data-num=\"103\"></td><td><pre>.text:0042303D                 leave</pre></td></tr><tr><td data-num=\"104\"></td><td><pre>.text:0042303E                 retn    0Ch</pre></td></tr><tr><td data-num=\"105\"></td><td><pre>.text:0042303E _KeInsertQueueDpc@12 endp</pre></td></tr><tr><td data-num=\"106\"></td><td><pre>.text:0042303E</pre></td></tr><tr><td data-num=\"107\"></td><td><pre>.text:0042303E ; ---------------------------------------------------------------------------</pre></td></tr></table></figure><p>参考以下代码：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">ASSERT_DPC</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>E<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>             </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token expression\"><span class=\"token function\">ASSERT</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>E<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>Type <span class=\"token operator\">==</span> DpcObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token expression\"><span class=\"token punctuation\">&#125;</span></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>BOOLEAN</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">KeInsertQueueDpc</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    IN PRKDPC Dpc<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    IN PVOID SystemArgument1<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    IN PVOID SystemArgument2</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">/*++</pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>Routine Description:</pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    This function inserts a DPC object into the DPC queue. If the DPC object</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    is already in the DPC queue, then no operation is performed. Otherwise,</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    the DPC object is inserted in the DPC queue and a dispatch interrupt is</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    requested.</pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>Arguments:</pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    Dpc - Supplies a pointer to a control object of type DPC.</pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    SystemArgument1, SystemArgument2  - Supply a set of two arguments that</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        contain untyped data provided by the executive.</pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>Return Value:</pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    If the DPC object is already in a DPC queue, then a value of FALSE is</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    returned. Otherwise a value of TRUE is returned.</pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>--*/</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    ULONG Index<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    PKSPIN_LOCK Lock<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    KIRQL OldIrql<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    PKPRCB Prcb<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    ULONG Processor<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token function\">ASSERT_DPC</span><span class=\"token punctuation\">(</span>Dpc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token comment\">// Disable interrupts.</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token function\">KeRaiseIrql</span><span class=\"token punctuation\">(</span>HIGH_LEVEL<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>OldIrql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token comment\">// Acquire the DPC queue lock for the specified target processor.</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\"><span class=\"token operator\">!</span><span class=\"token function\">defined</span><span class=\"token punctuation\">(</span>NT_UP<span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Dpc<span class=\"token operator\">-></span>Number <span class=\"token operator\">>=</span> MAXIMUM_PROCESSORS<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        Processor <span class=\"token operator\">=</span> Dpc<span class=\"token operator\">-></span>Number <span class=\"token operator\">-</span> MAXIMUM_PROCESSORS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        Prcb <span class=\"token operator\">=</span> KiProcessorBlock<span class=\"token punctuation\">[</span>Processor<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        Prcb <span class=\"token operator\">=</span> <span class=\"token function\">KeGetCurrentPrcb</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    <span class=\"token function\">KiAcquireSpinLock</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>Prcb<span class=\"token operator\">-></span>DpcLock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre></pre></td></tr><tr><td data-num=\"67\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">else</span></span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    Prcb <span class=\"token operator\">=</span> <span class=\"token function\">KeGetCurrentPrcb</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre></pre></td></tr><tr><td data-num=\"71\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    <span class=\"token comment\">// If the DPC object is not in a DPC queue, then store the system</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    <span class=\"token comment\">// arguments, insert the DPC object in the DPC queue, increment the</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>    <span class=\"token comment\">// number of DPCs queued to the target processor, increment the DPC</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>    <span class=\"token comment\">// queue depth, set the address of the DPC target DPC spinlock, and</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    <span class=\"token comment\">// request a dispatch interrupt if appropriate.</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>Lock <span class=\"token operator\">=</span> <span class=\"token function\">InterlockedCompareExchangePointer</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>Dpc<span class=\"token operator\">-></span>Lock<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>Prcb<span class=\"token operator\">-></span>DpcLock<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>        Prcb<span class=\"token operator\">-></span>DpcCount <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>        Prcb<span class=\"token operator\">-></span>DpcQueueDepth <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>        Dpc<span class=\"token operator\">-></span>SystemArgument1 <span class=\"token operator\">=</span> SystemArgument1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>        Dpc<span class=\"token operator\">-></span>SystemArgument2 <span class=\"token operator\">=</span> SystemArgument2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>        <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>        <span class=\"token comment\">// If the DPC is of high importance, then insert the DPC at the</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>        <span class=\"token comment\">// head of the DPC queue. Otherwise, insert the DPC at the end</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>        <span class=\"token comment\">// of the DPC queue.</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>        <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Dpc<span class=\"token operator\">-></span>Importance <span class=\"token operator\">==</span> HighImportance<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>            <span class=\"token function\">InsertHeadList</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>Prcb<span class=\"token operator\">-></span>DpcListHead<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>Dpc<span class=\"token operator\">-></span>DpcListEntry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>            <span class=\"token function\">InsertTailList</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>Prcb<span class=\"token operator\">-></span>DpcListHead<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>Dpc<span class=\"token operator\">-></span>DpcListEntry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>        <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>        <span class=\"token comment\">// A memory barrier is required here to synchronize with retire DPC</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>        <span class=\"token comment\">// list, which clears DpcRoutineActive and DpcInterruptRequested</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>        <span class=\"token comment\">// without owning the dispatcher lock.</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>        <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre></pre></td></tr><tr><td data-num=\"105\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\"><span class=\"token function\">defined</span><span class=\"token punctuation\">(</span>_ALPHA_<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token function\">defined</span><span class=\"token punctuation\">(</span>NT_UP<span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>        <span class=\"token function\">__MB</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre></pre></td></tr><tr><td data-num=\"109\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>        <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>        <span class=\"token comment\">// If a DPC routine is not active on the target processor, then</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>        <span class=\"token comment\">// request a dispatch interrupt if appropriate.</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>        <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>Prcb<span class=\"token operator\">-></span>DpcRoutineActive <span class=\"token operator\">==</span> FALSE<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>            <span class=\"token punctuation\">(</span>Prcb<span class=\"token operator\">-></span>DpcInterruptRequested <span class=\"token operator\">==</span> FALSE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>            <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>            <span class=\"token comment\">// Request a dispatch interrupt on the current processor if</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>            <span class=\"token comment\">// the DPC is not of low importance, the length of the DPC</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>            <span class=\"token comment\">// queue has exceeded the maximum threshold, or if the DPC</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>            <span class=\"token comment\">// request rate is below the minimum threshold.</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>            <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre></pre></td></tr><tr><td data-num=\"126\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\"><span class=\"token function\">defined</span><span class=\"token punctuation\">(</span>NT_UP<span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>Dpc<span class=\"token operator\">-></span>Importance <span class=\"token operator\">!=</span> LowImportance<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>                <span class=\"token punctuation\">(</span>Prcb<span class=\"token operator\">-></span>DpcQueueDepth <span class=\"token operator\">>=</span> Prcb<span class=\"token operator\">-></span>MaximumDpcQueueDepth<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>                <span class=\"token punctuation\">(</span>Prcb<span class=\"token operator\">-></span>DpcRequestRate <span class=\"token operator\">&lt;</span> Prcb<span class=\"token operator\">-></span>MinimumDpcRate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>                Prcb<span class=\"token operator\">-></span>DpcInterruptRequested <span class=\"token operator\">=</span> TRUE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>                <span class=\"token function\">KiRequestSoftwareInterrupt</span><span class=\"token punctuation\">(</span>DISPATCH_LEVEL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>            <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>            <span class=\"token comment\">// If the DPC is being queued to another processor and the</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>            <span class=\"token comment\">// DPC is of high importance, or the length of the other</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>            <span class=\"token comment\">// processor's DPC queue has exceeded the maximum threshold,</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>            <span class=\"token comment\">// then request a dispatch interrupt.</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>            <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre></pre></td></tr><tr><td data-num=\"142\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">else</span></span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Prcb <span class=\"token operator\">!=</span> <span class=\"token function\">KeGetCurrentPrcb</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>Dpc<span class=\"token operator\">-></span>Importance <span class=\"token operator\">==</span> HighImportance<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre>                     <span class=\"token punctuation\">(</span>Prcb<span class=\"token operator\">-></span>DpcQueueDepth <span class=\"token operator\">>=</span> Prcb<span class=\"token operator\">-></span>MaximumDpcQueueDepth<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>                    Prcb<span class=\"token operator\">-></span>DpcInterruptRequested <span class=\"token operator\">=</span> TRUE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>                    <span class=\"token function\">KiIpiSend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>KAFFINITY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> Processor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> IPI_DPC<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre></pre></td></tr><tr><td data-num=\"151\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre></pre></td></tr><tr><td data-num=\"153\"></td><td><pre>                <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"154\"></td><td><pre>                <span class=\"token comment\">// Request a dispatch interrupt on the current processor if</span></pre></td></tr><tr><td data-num=\"155\"></td><td><pre>                <span class=\"token comment\">// the DPC is not of low importance, the length of the DPC</span></pre></td></tr><tr><td data-num=\"156\"></td><td><pre>                <span class=\"token comment\">// queue has exceeded the maximum threshold, or if the DPC</span></pre></td></tr><tr><td data-num=\"157\"></td><td><pre>                <span class=\"token comment\">// request rate is below the minimum threshold.</span></pre></td></tr><tr><td data-num=\"158\"></td><td><pre>                <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"159\"></td><td><pre></pre></td></tr><tr><td data-num=\"160\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>Dpc<span class=\"token operator\">-></span>Importance <span class=\"token operator\">!=</span> LowImportance<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span></pre></td></tr><tr><td data-num=\"161\"></td><td><pre>                    <span class=\"token punctuation\">(</span>Prcb<span class=\"token operator\">-></span>DpcQueueDepth <span class=\"token operator\">>=</span> Prcb<span class=\"token operator\">-></span>MaximumDpcQueueDepth<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span></pre></td></tr><tr><td data-num=\"162\"></td><td><pre>                    <span class=\"token punctuation\">(</span>Prcb<span class=\"token operator\">-></span>DpcRequestRate <span class=\"token operator\">&lt;</span> Prcb<span class=\"token operator\">-></span>MinimumDpcRate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"163\"></td><td><pre>                    Prcb<span class=\"token operator\">-></span>DpcInterruptRequested <span class=\"token operator\">=</span> TRUE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"164\"></td><td><pre>                    <span class=\"token function\">KiRequestSoftwareInterrupt</span><span class=\"token punctuation\">(</span>DISPATCH_LEVEL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"165\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"166\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"167\"></td><td><pre></pre></td></tr><tr><td data-num=\"168\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"169\"></td><td><pre></pre></td></tr><tr><td data-num=\"170\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"171\"></td><td><pre>     <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"172\"></td><td><pre></pre></td></tr><tr><td data-num=\"173\"></td><td><pre>     <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"174\"></td><td><pre>     <span class=\"token comment\">// Release the DPC lock, enable interrupts, and return whether the</span></pre></td></tr><tr><td data-num=\"175\"></td><td><pre>     <span class=\"token comment\">// DPC was queued or not.</span></pre></td></tr><tr><td data-num=\"176\"></td><td><pre>     <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"177\"></td><td><pre></pre></td></tr><tr><td data-num=\"178\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\"><span class=\"token operator\">!</span><span class=\"token function\">defined</span><span class=\"token punctuation\">(</span>NT_UP<span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"179\"></td><td><pre></pre></td></tr><tr><td data-num=\"180\"></td><td><pre>     <span class=\"token function\">KiReleaseSpinLock</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>Prcb<span class=\"token operator\">-></span>DpcLock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"181\"></td><td><pre></pre></td></tr><tr><td data-num=\"182\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"183\"></td><td><pre></pre></td></tr><tr><td data-num=\"184\"></td><td><pre>     <span class=\"token function\">KeLowerIrql</span><span class=\"token punctuation\">(</span>OldIrql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"185\"></td><td><pre>     <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>Lock <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"186\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"dpc-移除队列\"><a class=\"anchor\" href=\"#dpc-移除队列\">#</a> DPC 移除队列</h2>\n<p>逆向  <code>KeRemoveQueueDpc</code></p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>.text:00424954 ; BOOLEAN __stdcall KeRemoveQueueDpc (PRKDPC Dpc)</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>.text:00424954                 public _KeRemoveQueueDpc@4</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>.text:00424954 _KeRemoveQueueDpc@4 proc near           ; CODE XREF: ExTimerRundown ()+90↓p</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>.text:00424954                                         ; NtCancelTimer (x,x)+AD↓p ...</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>.text:00424954</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>.text:00424954 Dpc             &#x3D; dword ptr  8</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>.text:00424954</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>.text:00424954                 mov     edi, edi</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>.text:00424956                 push    ebp</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>.text:00424957                 mov     ebp, esp</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>.text:00424959                 push    esi</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>.text:0042495A                 push    edi</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>.text:0042495B                 cli</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>.text:0042495C                 mov     esi, [ebp+Dpc]</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>.text:0042495F                 mov     edi, [esi+_KDPC.Lock]</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>.text:00424962                 test    edi, edi</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>.text:00424964                 jz      short loc_42498C</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>.text:00424966                 mov     ecx, edi</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>.text:00424968                 call    @KiAcquireSpinLock@4 ; KiAcquireSpinLock (x)</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>.text:0042496D                 cmp     edi, [esi+_KDPC.Lock]</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>.text:00424970                 jnz     short loc_424985</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>.text:00424972                 sub     dword ptr [edi-30h], 1</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>.text:00424976                 mov     eax, [esi+_KDPC.DpcListEntry.Flink] ; 链表操作，从队列中移除</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>.text:00424979                 mov     ecx, [esi+_KDPC.DpcListEntry.Blink]</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>.text:0042497C                 mov     [ecx+_LIST_ENTRY.Flink], eax</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>.text:0042497E                 mov     [eax+_LIST_ENTRY.Blink], ecx</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>.text:00424981                 and     [esi+_KDPC.Lock], 0 ; Lock &#x3D; 0</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>.text:00424985</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>.text:00424985 loc_424985:                             ; CODE XREF: KeRemoveQueueDpc (x)+1C↑j</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>.text:00424985                 mov     ecx, edi</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>.text:00424987                 call    @KiReleaseSpinLock@4 ; KiReleaseSpinLock (x)</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>.text:0042498C</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>.text:0042498C loc_42498C:                             ; CODE XREF: KeRemoveQueueDpc (x)+10↑j</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>.text:0042498C                 sti</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>.text:0042498D                 xor     eax, eax</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>.text:0042498F                 test    edi, edi</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>.text:00424991                 pop     edi</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>.text:00424992                 setnz   al</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>.text:00424995                 pop     esi</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>.text:00424996                 pop     ebp</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>.text:00424997                 retn    4</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>.text:00424997 _KeRemoveQueueDpc@4 endp</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>.text:00424997</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>.text:00424997 ; ---------------------------------------------------------------------------</pre></td></tr></table></figure><p>参考以下代码：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">ASSERT_DPC</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>E<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>             </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token expression\"><span class=\"token function\">ASSERT</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>E<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>Type <span class=\"token operator\">==</span> DpcObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token expression\"><span class=\"token punctuation\">&#125;</span></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>BOOLEAN</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">KeRemoveQueueDpc</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    IN PRKDPC Dpc</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">/*++</pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>Routine Description:</pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    This function removes a DPC object from the DPC queue. If the DPC object</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    is not in the DPC queue, then no operation is performed. Otherwise, the</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    DPC object is removed from the DPC queue and its inserted state is set</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    FALSE.</pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>Arguments:</pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    Dpc - Supplies a pointer to a control object of type DPC.</pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>Return Value:</pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    If the DPC object is not in the DPC queue, then a value of FALSE is</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    returned. Otherwise a value of TRUE is returned.</pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>--*/</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    PKSPIN_LOCK Lock<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    PKPRCB Prcb<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token function\">ASSERT_DPC</span><span class=\"token punctuation\">(</span>Dpc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token comment\">// If the DPC object is in the DPC queue, then remove it from the queue</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token comment\">// and set its inserted state to FALSE.</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token function\">_disable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    Lock <span class=\"token operator\">=</span> Dpc<span class=\"token operator\">-></span>Lock<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Lock <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token comment\">// Acquire the DPC lock of the target processor.</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\"><span class=\"token operator\">!</span><span class=\"token function\">defined</span><span class=\"token punctuation\">(</span>NT_UP<span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token function\">KiAcquireSpinLock</span><span class=\"token punctuation\">(</span>Lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token comment\">// If the specified DPC is still in the DPC queue, then remove</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        <span class=\"token comment\">// it.</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        <span class=\"token comment\">// N.B. It is possible for specified DPC to be removed from the</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        <span class=\"token comment\">//      specified DPC queue before the DPC lock is obtained.</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Lock <span class=\"token operator\">==</span> Dpc<span class=\"token operator\">-></span>Lock<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>            Prcb <span class=\"token operator\">=</span> <span class=\"token function\">CONTAINING_RECORD</span><span class=\"token punctuation\">(</span>Lock<span class=\"token punctuation\">,</span> KPRCB<span class=\"token punctuation\">,</span> DpcLock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>            Prcb<span class=\"token operator\">-></span>DpcQueueDepth <span class=\"token operator\">-=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>            <span class=\"token function\">RemoveEntryList</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>Dpc<span class=\"token operator\">-></span>DpcListEntry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre></pre></td></tr><tr><td data-num=\"70\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\"><span class=\"token function\">defined</span><span class=\"token punctuation\">(</span>_ALPHA_<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token function\">defined</span><span class=\"token punctuation\">(</span>NT_UP<span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>            <span class=\"token function\">__MB</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre></pre></td></tr><tr><td data-num=\"74\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>            Dpc<span class=\"token operator\">-></span>Lock <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>        <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>        <span class=\"token comment\">// Release the DPC lock of the target processor.</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>        <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre></pre></td></tr><tr><td data-num=\"83\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\"><span class=\"token operator\">!</span><span class=\"token function\">defined</span><span class=\"token punctuation\">(</span>NT_UP<span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>        <span class=\"token function\">KiReleaseSpinLock</span><span class=\"token punctuation\">(</span>Lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre></pre></td></tr><tr><td data-num=\"87\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>    <span class=\"token comment\">// Enable interrupts and return whether the DPC was removed from a DPC</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>    <span class=\"token comment\">// queue.</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>    <span class=\"token function\">_enable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>Lock <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"dpc的执行\"><a class=\"anchor\" href=\"#dpc的执行\">#</a> DPC 的执行</h2>\n<p>之前分析的  <code>KiDispatchInterrupt</code>  函数的开头，就有处理 DPC 的片段。</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>.text:0046EAE0 _KiDispatchInterrupt@0 proc near</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>.text:0046EAE0</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>.text:0046EAE0 var_C           &#x3D; dword ptr -0Ch</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>.text:0046EAE0 var_8           &#x3D; dword ptr -8</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>.text:0046EAE0 var_4           &#x3D; dword ptr -4</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>.text:0046EAE0</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>.text:0046EAE0                 mov     ebx, large fs:1Ch ; ebx: KPCR</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>.text:0046EAE7</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>.text:0046EAE7 loc_46EAE7:                             ; CODE XREF: KiDispatchInterrupt ()+B9↓j</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>.text:0046EAE7                 lea     eax, [ebx+_KPCR.PrcbData.DpcListHead]</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>.text:0046EAED                 cli                     ; 屏蔽中断</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>.text:0046EAEE                 cmp     eax, [eax]      ; check if DPC List is empty</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>.text:0046EAF0                 jz      short loc_46EB0F ;  if eq, list is empty</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>.text:0046EAF2                 push    ebp             ;  save register</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>.text:0046EAF3                 push    [ebx+_KPCR.NtTib.ExceptionList] ; DPC 中发生的异常与中断线程中的任何异常处理程序无关。</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>.text:0046EAF5                 mov     [ebx+_KPCR.NtTib.ExceptionList], 0FFFFFFFFh ; 终止异常列表。</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>.text:0046EAFB                 mov     edx, esp</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>.text:0046EAFD                 mov     esp, [ebx+_KPCR.PrcbData.DpcStack] ; 切换到此处理器的 DPC 堆栈。</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>.text:0046EB03                 push    edx</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>.text:0046EB04                 mov     ebp, eax        ; 设置 DPC Listhead 的地址</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>.text:0046EB06                 call    KiRetireDpcList ; 处理当前 DPC 列表</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>.text:0046EB0B                 pop     esp             ; 切换回当前线程堆栈，恢复异常列表和保存的 EBP。</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>.text:0046EB0C                 pop     dword ptr [ebx]</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>.text:0046EB0E                 pop     ebp</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>.text:0046EB0F</pre></td></tr></table></figure><p>可以看到  <code>KiDispatchInterrupt</code>  调用了  <code>KiRetireDpcList</code>  来处理 DPC 队列。</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>.text:0046EF3E ; &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; S U B R O U T I N E &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>.text:0046EF3E</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>.text:0046EF3E</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>.text:0046EF3E KiRetireDpcList proc near               ; CODE XREF: KiDispatchInterrupt ()+26↑p</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>.text:0046EF3E                                         ; KiIdleLoop ()+23↑p</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>.text:0046EF3E</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>.text:0046EF3E var_24          &#x3D; dword ptr -24h</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>.text:0046EF3E var_14          &#x3D; dword ptr -14h</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>.text:0046EF3E var_10          &#x3D; dword ptr -10h</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>.text:0046EF3E var_C           &#x3D; dword ptr -0Ch</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>.text:0046EF3E var_8           &#x3D; dword ptr -8</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>.text:0046EF3E</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>.text:0046EF3E                 push    esi</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>.text:0046EF3F                 lea     esi, [ebx+_KPCR.PrcbData.DpcLock] ; get DPC lock address</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>.text:0046EF45                 push    0</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>.text:0046EF47                 sub     esp, 0Ch</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>.text:0046EF4A                 cmp     ds:_PPerfGlobalGroupMask, 0</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>.text:0046EF51                 jnz     loc_46EFDC</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>.text:0046EF57</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>.text:0046EF57 loc_46EF57:                             ; CODE XREF: KiRetireDpcList+85↓j</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>.text:0046EF57                                         ; KiRetireDpcList+A6↓j ...</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>.text:0046EF57                 mov     large fs:_KPCR.PrcbData.DpcRoutineActive, esp ; 设置 DPC 例程激活</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>.text:0046EF5E</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>.text:0046EF5E loc_46EF5E:                             ; CODE XREF: KiRetireDpcList+6C↓j</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>.text:0046EF5E                 lock bts dword ptr [esi], 0 ; BTS 指令的作用：</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>.text:0046EF5E                                         ; 两件事:</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>.text:0046EF5E                                         ; 一、</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>.text:0046EF5E                                         ;  取 esi 比特位的第 0 位存在 CF 标志位中。</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>.text:0046EF5E                                         ; 二、</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>.text:0046EF5E                                         ;  lock bts dword ptr [esi],0</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>.text:0046EF5E                                         ;  将 dword ptr [esi] 指向的内存地址的第 0 位置 1</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>.text:0046EF63                 jb      short loc_46EFCF ; CF &#x3D; 1 则跳转</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>.text:0046EF65                 cmp     ebp, [ebp+_LIST_ENTRY.Flink] ; check if DPC list is empty</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>.text:0046EF68                 jz      short loc_46EFCA ; DPC 的锁置为 0</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>.text:0046EF6A                 mov     edx, [ebp+_LIST_ENTRY.Flink]</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>.text:0046EF6D                 mov     ecx, [edx+_LIST_ENTRY.Flink]</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>.text:0046EF6F                 mov     [ebp+_LIST_ENTRY.Flink], ecx</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>.text:0046EF72                 mov     [ecx+_LIST_ENTRY.Blink], ebp</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>.text:0046EF75                 sub     edx, 4          ; -0x4 获得 DPC 对象 KDPC 结构的首地址</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>.text:0046EF78                 mov     ecx, [edx+_KDPC.DeferredRoutine]</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>.text:0046EF7B                 push    [edx+_KDPC.SystemArgument2]</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>.text:0046EF7E                 push    [edx+_KDPC.SystemArgument1]</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>.text:0046EF81                 push    [edx+_KDPC.DeferredContext]</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>.text:0046EF84                 push    edx</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>.text:0046EF85                 mov     [edx+_KDPC.Lock], 0 ; 清除 DPC 插入状态</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>.text:0046EF8C                 dec     [ebx+_KPCR.PrcbData.DpcQueueDepth] ; 递减深度</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>.text:0046EF92                 mov     byte ptr [esi], 0 ; 释放 DPC 锁</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>.text:0046EF95                 sti                     ; enable interrupts</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>.text:0046EF96                 cmp     dword ptr [esp+1Ch], 0 ; 这里有待调试分析</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>.text:0046EF9B                 jnz     short loc_46F004</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>.text:0046EF9D</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>.text:0046EF9D loc_46EF9D:                             ; CODE XREF: KiRetireDpcList+DD↓j</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>.text:0046EF9D                 call    ecx</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>.text:0046EF9F                 cmp     [esp+14h+var_8], 0 ; 若不为 0 会分析 log 相关的</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>.text:0046EFA4                 jnz     short loc_46F01D</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>.text:0046EFA6</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>.text:0046EFA6 loc_46EFA6:                             ; CODE XREF: KiRetireDpcList+98↓j</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>.text:0046EFA6                                         ; KiRetireDpcList+F1↓j</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>.text:0046EFA6                 cli</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>.text:0046EFA7                 cmp     ebp, [ebp+_LIST_ENTRY.Flink] ; check if DPC list is empty</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>.text:0046EFAA                 jnz     short loc_46EF5E ; BTS 指令的作用：</pre></td></tr><tr><td data-num=\"62\"></td><td><pre>.text:0046EFAA                                         ; 两件事:</pre></td></tr><tr><td data-num=\"63\"></td><td><pre>.text:0046EFAA                                         ; 一、</pre></td></tr><tr><td data-num=\"64\"></td><td><pre>.text:0046EFAA                                         ;  取 esi 比特位的第 0 位存在 CF 标志位中。</pre></td></tr><tr><td data-num=\"65\"></td><td><pre>.text:0046EFAA                                         ; 二、</pre></td></tr><tr><td data-num=\"66\"></td><td><pre>.text:0046EFAA                                         ;  lock bts dword ptr [esi],0</pre></td></tr><tr><td data-num=\"67\"></td><td><pre>.text:0046EFAA                                         ;  将 dword ptr [esi] 指向的内存地址的第 0 位置 1</pre></td></tr><tr><td data-num=\"68\"></td><td><pre>.text:0046EFAC</pre></td></tr><tr><td data-num=\"69\"></td><td><pre>.text:0046EFAC loc_46EFAC:                             ; CODE XREF: KiRetireDpcList+8F↓j</pre></td></tr><tr><td data-num=\"70\"></td><td><pre>.text:0046EFAC                 mov     [ebx+_KPCR.PrcbData.DpcRoutineActive], 0</pre></td></tr><tr><td data-num=\"71\"></td><td><pre>.text:0046EFB6                 mov     [ebx+_KPCR.PrcbData.DpcInterruptRequested], 0</pre></td></tr><tr><td data-num=\"72\"></td><td><pre>.text:0046EFC0                 cmp     ebp, [ebp+_LIST_ENTRY.Flink] ; check if DPC list is empty</pre></td></tr><tr><td data-num=\"73\"></td><td><pre>.text:0046EFC3                 jnz     short loc_46EF57 ; DPC 列表不为空，则继续执行 DPC</pre></td></tr><tr><td data-num=\"74\"></td><td><pre>.text:0046EFC5                 add     esp, 10h</pre></td></tr><tr><td data-num=\"75\"></td><td><pre>.text:0046EFC8                 pop     esi</pre></td></tr><tr><td data-num=\"76\"></td><td><pre>.text:0046EFC9                 retn</pre></td></tr><tr><td data-num=\"77\"></td><td><pre>.text:0046EFCA ; ---------------------------------------------------------------------------</pre></td></tr><tr><td data-num=\"78\"></td><td><pre>.text:0046EFCA</pre></td></tr><tr><td data-num=\"79\"></td><td><pre>.text:0046EFCA loc_46EFCA:                             ; CODE XREF: KiRetireDpcList+2A↑j</pre></td></tr><tr><td data-num=\"80\"></td><td><pre>.text:0046EFCA                 mov     byte ptr [esi], 0 ; DPC 的锁置为 0</pre></td></tr><tr><td data-num=\"81\"></td><td><pre>.text:0046EFCD                 jmp     short loc_46EFAC ; 返回</pre></td></tr><tr><td data-num=\"82\"></td><td><pre>.text:0046EFCF ; ---------------------------------------------------------------------------</pre></td></tr><tr><td data-num=\"83\"></td><td><pre>.text:0046EFCF</pre></td></tr><tr><td data-num=\"84\"></td><td><pre>.text:0046EFCF loc_46EFCF:                             ; CODE XREF: KiRetireDpcList+25↑j</pre></td></tr><tr><td data-num=\"85\"></td><td><pre>.text:0046EFCF                 sti</pre></td></tr><tr><td data-num=\"86\"></td><td><pre>.text:0046EFD0</pre></td></tr><tr><td data-num=\"87\"></td><td><pre>.text:0046EFD0 loc_46EFD0:                             ; CODE XREF: KiRetireDpcList+9C↓j</pre></td></tr><tr><td data-num=\"88\"></td><td><pre>.text:0046EFD0                 test    dword ptr [esi], 1</pre></td></tr><tr><td data-num=\"89\"></td><td><pre>.text:0046EFD6                 jz      short loc_46EFA6</pre></td></tr><tr><td data-num=\"90\"></td><td><pre>.text:0046EFD8                 pause</pre></td></tr><tr><td data-num=\"91\"></td><td><pre>.text:0046EFDA                 jmp     short loc_46EFD0</pre></td></tr><tr><td data-num=\"92\"></td><td><pre>.text:0046EFDC ; ---------------------------------------------------------------------------</pre></td></tr><tr><td data-num=\"93\"></td><td><pre>.text:0046EFDC</pre></td></tr><tr><td data-num=\"94\"></td><td><pre>.text:0046EFDC loc_46EFDC:                             ; CODE XREF: KiRetireDpcList+13↑j</pre></td></tr><tr><td data-num=\"95\"></td><td><pre>.text:0046EFDC                 mov     eax, ds:_PPerfGlobalGroupMask</pre></td></tr><tr><td data-num=\"96\"></td><td><pre>.text:0046EFE1                 cmp     eax, 0</pre></td></tr><tr><td data-num=\"97\"></td><td><pre>.text:0046EFE4                 jz      loc_46EF57      ; 设置 DPC 例程激活</pre></td></tr><tr><td data-num=\"98\"></td><td><pre>.text:0046EFEA                 test    dword ptr [eax+4], 80h</pre></td></tr><tr><td data-num=\"99\"></td><td><pre>.text:0046EFF1                 jz      loc_46EF57      ; 设置 DPC 例程激活</pre></td></tr><tr><td data-num=\"100\"></td><td><pre>.text:0046EFF7                 mov     [esp+14h+var_8], 1</pre></td></tr><tr><td data-num=\"101\"></td><td><pre>.text:0046EFFF                 jmp     loc_46EF57      ; 设置 DPC 例程激活</pre></td></tr><tr><td data-num=\"102\"></td><td><pre>.text:0046F004 ; ---------------------------------------------------------------------------</pre></td></tr><tr><td data-num=\"103\"></td><td><pre>.text:0046F004</pre></td></tr><tr><td data-num=\"104\"></td><td><pre>.text:0046F004 loc_46F004:                             ; CODE XREF: KiRetireDpcList+5D↑j</pre></td></tr><tr><td data-num=\"105\"></td><td><pre>.text:0046F004                 push    ecx</pre></td></tr><tr><td data-num=\"106\"></td><td><pre>.text:0046F005                 call    ds:_WmiGetCpuClock ; WmipGetSystemTime ()</pre></td></tr><tr><td data-num=\"107\"></td><td><pre>.text:0046F00B                 pop     ecx</pre></td></tr><tr><td data-num=\"108\"></td><td><pre>.text:0046F00C                 mov     [esp+24h+var_14], eax</pre></td></tr><tr><td data-num=\"109\"></td><td><pre>.text:0046F010                 mov     [esp+24h+var_10], edx</pre></td></tr><tr><td data-num=\"110\"></td><td><pre>.text:0046F014                 mov     edx, [esp+24h+var_24]</pre></td></tr><tr><td data-num=\"111\"></td><td><pre>.text:0046F017                 mov     [esp+24h+var_C], ecx</pre></td></tr><tr><td data-num=\"112\"></td><td><pre>.text:0046F01B                 jmp     short loc_46EF9D</pre></td></tr><tr><td data-num=\"113\"></td><td><pre>.text:0046F01D ; ---------------------------------------------------------------------------</pre></td></tr><tr><td data-num=\"114\"></td><td><pre>.text:0046F01D</pre></td></tr><tr><td data-num=\"115\"></td><td><pre>.text:0046F01D loc_46F01D:                             ; CODE XREF: KiRetireDpcList+66↑j</pre></td></tr><tr><td data-num=\"116\"></td><td><pre>.text:0046F01D                 mov     eax, [esp+14h+var_14]</pre></td></tr><tr><td data-num=\"117\"></td><td><pre>.text:0046F020                 mov     edx, [esp+14h+var_10]</pre></td></tr><tr><td data-num=\"118\"></td><td><pre>.text:0046F024                 push    edx</pre></td></tr><tr><td data-num=\"119\"></td><td><pre>.text:0046F025                 push    eax</pre></td></tr><tr><td data-num=\"120\"></td><td><pre>.text:0046F026                 mov     ecx, [esp+1Ch+var_C]</pre></td></tr><tr><td data-num=\"121\"></td><td><pre>.text:0046F02A                 call    @PerfInfoLogDpc@12 ; PerfInfoLogDpc (x,x,x)</pre></td></tr><tr><td data-num=\"122\"></td><td><pre>.text:0046F02F                 jmp     loc_46EFA6</pre></td></tr><tr><td data-num=\"123\"></td><td><pre>.text:0046F02F KiRetireDpcList endp</pre></td></tr><tr><td data-num=\"124\"></td><td><pre>.text:0046F02F</pre></td></tr><tr><td data-num=\"125\"></td><td><pre>.text:0046F034</pre></td></tr><tr><td data-num=\"126\"></td><td><pre>.text:0046F034 ; &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; S U B R O U T I N E &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</pre></td></tr></table></figure><p>可以参考以下代码：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>VOID</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">KiRetireDpcList</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    PKPRCB Prcb</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">/*++</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>Routine Description:</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    This function processes the DPC list for the specified processor.</pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    N.B. This function is entered with interrupts disabled and exits with</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>         interrupts disabled.</pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>Arguments:</pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    Prcb - Supplies the address of the processor block.</pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>Return Value:</pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    None.</pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>--*/</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    PKDPC Dpc<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    PVOID DeferredContext<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    PKDEFERRED_ROUTINE DeferredRoutine<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    PLIST_ENTRY Entry<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    PLIST_ENTRY ListHead<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    PVOID SystemArgument1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    PVOID SystemArgument2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    ULONG TimerHand<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token comment\">// Loop processing DPC list entries until the specified DPC list is empty.</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token comment\">// N.B. This following code appears to have a redundant loop, but it does</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token comment\">//      not. The point of this code is to avoid as many dispatch interrupts</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token comment\">//      as possible.</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    ListHead <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>Prcb<span class=\"token operator\">-></span>DpcListHead<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token keyword\">do</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        Prcb<span class=\"token operator\">-></span>DpcRoutineActive <span class=\"token operator\">=</span> TRUE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token comment\">// If the timer hand value is nonzero, then process expired timers.</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>TimerHand <span class=\"token operator\">=</span> Prcb<span class=\"token operator\">-></span>TimerHand<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>            Prcb<span class=\"token operator\">-></span>TimerHand <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>            <span class=\"token function\">_enable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>            <span class=\"token function\">KiTimerExpiration</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token function\">UlongToHandle</span><span class=\"token punctuation\">(</span>TimerHand <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>            <span class=\"token function\">_disable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        <span class=\"token comment\">// If the DPC list is not empty, then process the DPC list.</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Prcb<span class=\"token operator\">-></span>DpcQueueDepth <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>            <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>            <span class=\"token comment\">// Acquire the DPC lock for the current processor and check if</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>            <span class=\"token comment\">// the DPC list is empty. If the DPC list is not empty, then</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>            <span class=\"token comment\">// remove the first entry from the DPC list, capture the DPC</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>            <span class=\"token comment\">// parameters, set the DPC inserted state false, decrement the</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>            <span class=\"token comment\">// DPC queue depth, release the DPC lock, enable interrupts, and</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>            <span class=\"token comment\">// call the specified DPC routine. Otherwise, release the DPC</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>            <span class=\"token comment\">// lock and enable interrupts.</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>            <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>            <span class=\"token keyword\">do</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>                <span class=\"token function\">KeAcquireSpinLockAtDpcLevel</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>Prcb<span class=\"token operator\">-></span>DpcLock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>                Entry <span class=\"token operator\">=</span> Prcb<span class=\"token operator\">-></span>DpcListHead<span class=\"token punctuation\">.</span>Flink<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Entry <span class=\"token operator\">!=</span> ListHead<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>                    <span class=\"token function\">RemoveEntryList</span><span class=\"token punctuation\">(</span>Entry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>                    Dpc <span class=\"token operator\">=</span> <span class=\"token function\">CONTAINING_RECORD</span><span class=\"token punctuation\">(</span>Entry<span class=\"token punctuation\">,</span> KDPC<span class=\"token punctuation\">,</span> DpcListEntry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>                    DeferredRoutine <span class=\"token operator\">=</span> Dpc<span class=\"token operator\">-></span>DeferredRoutine<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>                    DeferredContext <span class=\"token operator\">=</span> Dpc<span class=\"token operator\">-></span>DeferredContext<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>                    SystemArgument1 <span class=\"token operator\">=</span> Dpc<span class=\"token operator\">-></span>SystemArgument1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>                    SystemArgument2 <span class=\"token operator\">=</span> Dpc<span class=\"token operator\">-></span>SystemArgument2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>                    Dpc<span class=\"token operator\">-></span>Lock <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>                    Prcb<span class=\"token operator\">-></span>DpcQueueDepth <span class=\"token operator\">-=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>                    <span class=\"token function\">KeReleaseSpinLockFromDpcLevel</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>Prcb<span class=\"token operator\">-></span>DpcLock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>                    <span class=\"token function\">_enable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>                    <span class=\"token punctuation\">(</span>DeferredRoutine<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>Dpc<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>                                      DeferredContext<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>                                      SystemArgument1<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>                                      SystemArgument2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>                    <span class=\"token function\">ASSERT</span><span class=\"token punctuation\">(</span><span class=\"token function\">KeGetCurrentIrql</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> DISPATCH_LEVEL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>                    <span class=\"token function\">_disable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>                    <span class=\"token function\">ASSERT</span><span class=\"token punctuation\">(</span>Prcb<span class=\"token operator\">-></span>DpcQueueDepth <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>                    <span class=\"token function\">KeReleaseSpinLockFromDpcLevel</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>Prcb<span class=\"token operator\">-></span>DpcLock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>ListHead <span class=\"token operator\">!=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>PLIST_ENTRY <span class=\"token keyword\">volatile</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>ListHead<span class=\"token operator\">-></span>Flink<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>        Prcb<span class=\"token operator\">-></span>DpcRoutineActive <span class=\"token operator\">=</span> FALSE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>        Prcb<span class=\"token operator\">-></span>DpcInterruptRequested <span class=\"token operator\">=</span> FALSE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>ListHead <span class=\"token operator\">!=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>PLIST_ENTRY <span class=\"token keyword\">volatile</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>ListHead<span class=\"token operator\">-></span>Flink<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h2>\n<p>从上述的逆向分析可以得知，DPC 优先于线程切换，必须得先把 DPC 执行完，才能执行线程。验证了上述概念。</p>\n<h2 id=\"写代码验证dpc\"><a class=\"anchor\" href=\"#写代码验证dpc\">#</a> 写代码验证 DPC</h2>\n<p>代码很简单：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;ntddk.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>KDPC dpc <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>VOID <span class=\"token function\">DriverUnload</span><span class=\"token punctuation\">(</span>PDRIVER_OBJECT pDriver<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是驱动，我卸载了\\t\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>VOID <span class=\"token function\">dpcCall</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token comment\">//_In_ struct _KDPC* Dpc,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t_In_opt_ PVOID DeferredContext<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t_In_opt_ PVOID SystemArgument1<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t_In_opt_ PVOID SystemArgument2</pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Dpc执行了\\t\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>NTSTATUS <span class=\"token function\">DriverEntry</span><span class=\"token punctuation\">(</span>PDRIVER_OBJECT pDriver<span class=\"token punctuation\">,</span> PUNICODE_STRING pRegPath<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\tpDriver<span class=\"token operator\">-></span>DriverUnload <span class=\"token operator\">=</span> DriverUnload<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是驱动,我运行了\\t\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token function\">KeInitializeDpc</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>dpc<span class=\"token punctuation\">,</span> dpcCall<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token function\">KeInsertQueueDpc</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>dpc<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token keyword\">return</span> STATUS_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>截图：</p>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<h1 id=\"reference\"><a class=\"anchor\" href=\"#reference\">#</a> Reference</h1>\n<p>windows 泄露的源码<br />\n《Windows 内核原理与实现》<br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ltcXVlc3Rpb24vYXJ0aWNsZS9kZXRhaWxzLzEyODY2NDE=\">https://blog.csdn.net/imquestion/article/details/1286641</span></p>\n",
            "tags": [
                "延迟过程调用"
            ]
        }
    ]
}