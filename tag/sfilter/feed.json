{
    "version": "https://jsonfeed.org/version/1",
    "title": "Or0kit • All posts by \"sfilter\" tag",
    "description": "临渊羡鱼，不如退而结网",
    "home_page_url": "https://Or0kit.github.io",
    "items": [
        {
            "id": "https://or0kit.github.io/Bin/Core/Drive-Development/%E6%96%87%E4%BB%B6%E8%BF%87%E6%BB%A4%E9%A9%B1%E5%8A%A8%E6%80%BB%E7%BB%93%E4%B8%8E%E6%89%A9%E5%B1%95/",
            "url": "https://or0kit.github.io/Bin/Core/Drive-Development/%E6%96%87%E4%BB%B6%E8%BF%87%E6%BB%A4%E9%A9%B1%E5%8A%A8%E6%80%BB%E7%BB%93%E4%B8%8E%E6%89%A9%E5%B1%95/",
            "title": "文件过滤驱动总结与扩展",
            "date_published": "2023-01-14T09:11:30.000Z",
            "content_html": "<h1 id=\"分层驱动框架\"><a class=\"anchor\" href=\"#分层驱动框架\">#</a> 分层驱动框架</h1>\n<ul>\n<li>NT 驱动框架：<strong>单层</strong>驱动，只能接受自己进程的 IRP</li>\n<li>Sfilter 驱动框架：<strong>多层</strong>驱动，接受所有进程的 IRP\n<ul>\n<li>过滤：分层驱动中<strong>再加一层</strong>而不影响它的上下层，以过滤它们之间的数据，对数据或行为进行安全控制。过滤是通过设备绑定实现的 (有多少个文件卷设备就生成多少个文件过滤驱动设备对象一一绑定，这样，发给各个卷设备对象的 IRP 都会被监控到)。</li>\n</ul>\n</li>\n<li>磁盘过滤驱动：用于文件还原</li>\n</ul>\n<h1 id=\"绑定与过滤\"><a class=\"anchor\" href=\"#绑定与过滤\">#</a> 绑定与过滤</h1>\n<ul>\n<li><code>设备栈绑定的形式</code> ：驱动自己生成一个设备 ( <code>过滤设备</code> ), 调用系统提供的绑定 API，绑定到自标设备上，并  <code>返回</code> 一个在  <code>未绑定</code> 之前目标设备所在设备栈的  <code>最顶层设备</code> 。这样发往下层的 IRP 或者发往土层的数据都会被过滤设备截获。</li>\n<li><code>绑定的API</code> :\n<ul>\n<li>loAttachDevice()</li>\n<li>loAttachDeviceToDeviceStackSafe (2000 SP4 以及 XP 以上)</li>\n<li>loAttachDeviceToDeviceStack()</li>\n</ul>\n</li>\n</ul>\n<p>1111111 设备栈的理解</p>\n<h2 id=\"ioattachdevicetodevicestack绑定\"><a class=\"anchor\" href=\"#ioattachdevicetodevicestack绑定\">#</a> IoAttachDeviceToDeviceStack (绑定)</h2>\n<p>函数原型：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/// AttachedDevice 需要记录在 DEVICE_EXTENSION 中，以便调用 IoCallDriver () 继续下发 IRP</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">/// 返回一个在未绑定之前目标设备所在设备栈的最顶层设备，</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/// 目的是为了 IRP 继续往下发，所以需要备份下一层的设备对象，即未绑定之前目标设备所在设备栈的最顶层设备</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>PDEVICE_OBJECT <span class=\"token function\">IoAttachDeviceToDeviceStack</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> IN PDEVICE_OBJECT SourceDevice<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> IN PDEVICE_OBJECT TargetDevice</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>windbg 查看设备栈:</p>\n<p><code>!devobj</code>  查看设备对象信息<br />\n <code>!drvobj</code>  查看驱动对象信息<br />\n <code>!devstack</code>  查看设备栈<br />\n <code>!devnode 0 1</code>  系统设备树</p>\n<h2 id=\"设备对象\"><a class=\"anchor\" href=\"#设备对象\">#</a> 设备对象</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_DEVICE</span> _OBJECT</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  SHORT Type<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  WORD Size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  LONG ReferenceCount<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  PORITER OBIECT DriverObject<span class=\"token punctuation\">;</span> <span class=\"token comment\">///&lt; 生成该设备对象的驱动对象</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  DEVICE OBTECT NextDevice<span class=\"token punctuation\">;</span> <span class=\"token comment\">///&lt; 驱动对象生成的所有设备对象通过 NextDevice 指针组织在 1 个链表里</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  PDEVICE OBTECT AttachedDevice<span class=\"token punctuation\">;</span> <span class=\"token comment\">///&lt; 被哪个设备所绑定</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  PIRP CurrentIrp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  PIO TIMER Timer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  LONG Flags<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  LONG Characteristics<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  PUPB Vpb<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  VOID DeviceExtension<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  LONG DeviceType<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  CHAR StackSize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  BYTE Queue <span class=\"token punctuation\">[</span><span class=\"token number\">40</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  LONG AlignmentRequirement<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  DEVICE QUEUE DeviceQueue<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  KDPC Dpc<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  LONG ActiveThreadCount<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  VOID SecurityDescriptor<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  EVENT DeviceLock<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  WORD SectorSize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  WORD Sparel<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  PDEVOBT _EXTENSION DeviceObjectExtension<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  VOID Reserved<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span>DEVICE OBJECT<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>PDEVICE_OBJECT<span class=\"token operator\">:</span></pre></td></tr></table></figure><p><strong>可以利用  <code>AttachedDevice</code>  成员遍历目标设备的设备栈</strong>。由此判断目标设备是否被我们绑定。</p>\n<h2 id=\"对设备对象作不同处理过滤\"><a class=\"anchor\" href=\"#对设备对象作不同处理过滤\">#</a> 对设备对象作不同处理 (过滤)</h2>\n<ol>\n<li><strong>控制设备对象</strong></li>\n</ol>\n<ul>\n<li>DriverEntry 中创建的设备对象</li>\n<li>用来接收自己客户端的 IRP</li>\n</ul>\n<ol start=\"2\">\n<li><strong>过滤设备对象</strong></li>\n</ol>\n<ul>\n<li>绑定时候创建的设备对象</li>\n<li>用来接收其它 R3 程序的 IRP</li>\n</ul>\n<ol start=\"3\">\n<li>分发函数将接收各进程 IRP</li>\n</ol>\n<ul>\n<li>设备对象分控制设备对象和过滤设备对象，但用来接受 Irp 分发函数<strong>只有一个</strong>。</li>\n<li>比如 FilterCreate (PDEVICE_OBJECT DeviceObject,PIRP plrp)，既接收自己进程的 IRP (发给 <strong>控制设备对象</strong>)，也用来接受其他进程 IRP (发给 <strong>过滤设备对象</strong>)</li>\n</ul>\n<ol start=\"4\">\n<li>如何区分 IRP 是自己进程下发的 (发给控制设备对象)，还是别的进程下发的 (发给过滤设备对象)？</li>\n</ol>\n<p>首先认识以下两个宏：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/// 宏定义 判断设备对象是否是过滤设备对象:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">/// 1. 过滤设备对象不为空</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/// 2. 过滤设备对象是由驱动对象创建</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">/// 3. 如果是过滤设备对象，DeviceExtension 保存着下一层的设备对象</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">IS_MY_DEVICE</span> <span class=\"token expression\"><span class=\"token function\">OBJECT</span><span class=\"token punctuation\">(</span>_devObj<span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_devObj<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span></span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> <span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_devObj<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>DriverObject <span class=\"token operator\">==</span> gSfilterDriverObject<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;&amp;</span></span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> <span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>devObj<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>DeviceExtension <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> </span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">/// 宏定义 判断设备对象是否是控制设备对象:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">/// 1.gSfilterControlDeviceObject 指针保存的是在 DriverEntry 创建的控制设备对象的地址</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">/// 2. 控制设备对象是由驱动对象创建</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">/// 3. 如果是控制设备对象，DeviceExtension 为空</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">IS_MY_CONTROL_DEVICE_OBJECT</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>_devObj<span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre> <span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_devObj<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> gSfilterControlDeviceObject<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span></span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre> <span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token function\">ASSERT</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_devObj<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>DriverObject <span class=\"token operator\">==</span> gSfilterDriverObject<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre> <span class=\"token expression\"><span class=\"token punctuation\">(</span>_devObj<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>DeviceExtension <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>TRUE<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>FALSE<span class=\"token punctuation\">)</span></span></span></pre></td></tr></table></figure><p>在过滤分发函数的处理：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">///xxx 表示任意的过滤分发函数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>NTSTATUS <span class=\"token function\">FilterXXX</span><span class=\"token punctuation\">(</span>IN PDEVICE_OBJECT DeviceObject<span class=\"token punctuation\">,</span> IN PIRP Irp<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    NTSTATUS status<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">PAGED_CODE</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 判断是否是控制设备。</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">IS_MY_CONTROL_DEVICE_OBJECT</span><span class=\"token punctuation\">(</span>DeviceObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        Irp<span class=\"token operator\">-></span>IoStatus<span class=\"token punctuation\">.</span>Status <span class=\"token operator\">=</span> STATUS_INVALID_DEVICE_REQUEST<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        Irp<span class=\"token operator\">-></span>IoStatus<span class=\"token punctuation\">.</span>Information <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token function\">IoCompleteRequest</span><span class=\"token punctuation\">(</span>Irp<span class=\"token punctuation\">,</span> IO_NO_INCREMENT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">//return STATUS_INVALID_DEVICE_REQUEST;        // 这样写的后果是：我们用 CreateFile 函数在 Ring3 下打开此控制设备符号链接的时候会失败</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">return</span> STATUS_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">// 判断是否是文件系统的其他设备</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">IS_MY_DEVICE_OBJECT</span><span class=\"token punctuation\">(</span>DeviceObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token comment\">// 不是我们关心的设备，直接下发</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token function\">IoSkipCurrentIrpStackLocation</span><span class=\"token punctuation\">(</span>Irp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token function\">IoCallDriver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>PSFILTER_DEVICE_EXTENSION<span class=\"token punctuation\">)</span>DeviceObject<span class=\"token operator\">-></span>DeviceExtension<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>AttachedToDeviceObject<span class=\"token punctuation\">,</span> Irp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token comment\">// 接下来就是处理来自卷设备 IRP 的 xxx 操作了</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    ……</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    ……</pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"文件系统过滤框架\"><a class=\"anchor\" href=\"#文件系统过滤框架\">#</a> 文件系统过滤框架</h1>\n<ul>\n<li>Sfilter</li>\n<li>Minifilter</li>\n</ul>\n<h2 id=\"sfilter\"><a class=\"anchor\" href=\"#sfilter\">#</a> Sfilter</h2>\n<p>sfilter 是微软的文件过滤驱动样例。</p>\n<h3 id=\"sfilter-代码通读分析\"><a class=\"anchor\" href=\"#sfilter-代码通读分析\">#</a> Sfilter 代码通读分析</h3>\n<ul>\n<li>\n<p>框架代码 <strong>不要钻牛角尖</strong>，把握整体流程即可，不求把每行代码每个变量都扣的清楚。(上万行代码)</p>\n<ul>\n<li>除了过滤分发函数，其他代码理解即可，不需要做改动。</li>\n<li>所以在 Minifilter 中就把这部分代码给封装隐藏了，只需要注册回调函数即可</li>\n</ul>\n</li>\n</ul>\n<p>代码过长，我就放到 github 了，里面有我详细的注释。</p>\n<p>自己画的流程图：</p>\n<p>11111111</p>\n<p>运行效果：</p>\n<p>11111 gif</p>\n<h3 id=\"过滤驱动与irp处理方式\"><a class=\"anchor\" href=\"#过滤驱动与irp处理方式\">#</a> 过滤驱动与 IRP 处理方式</h3>\n<p>1. <code>IoCopyxxX+完成例程</code> 下发</p>\n<ul>\n<li><code>IoCopyCurrentlrpStackLocationToNext</code> + <code>完成例程</code> ：把 IRP 下发之后，上层驱动在某个事件上进行等待。下一层驱动把 IRP 完成之后就会调用完成例程设置事件为有事件状态来通知上层驱动</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/// 拿到当前 IRP 的栈</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">/// 拿到下一层 IRP 的栈</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/// 把当前 IRP 的栈拷贝到下一层 IRP 的栈上，因为当前 IRP 还没下发，所以下一层 IRP 的栈是空的，所以不存在下层 IRP 栈原来有数据被覆盖的问题</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">IoCopycurrentIrpStackLocationToNext</span> <span class=\"token expression\"><span class=\"token punctuation\">(</span>Irp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token expression\">PIO_STACK_LOCATION __irpSp<span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token expression\">PI0_STACK_LOCATION __nextIrpSp<span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> <span class=\"token expression\">__irpsp <span class=\"token operator\">=</span> <span class=\"token function\">IoGetcurrentIrpstackLocation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>Irp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> <span class=\"token expression\">__nextIrpSp <span class=\"token operator\">=</span><span class=\"token function\">IoGetNextIrpstackLocation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>Irp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> <span class=\"token expression\"><span class=\"token function\">RtlCopyMemory</span><span class=\"token punctuation\">(</span> __nextIrpSp<span class=\"token punctuation\">,</span>__irpSp<span class=\"token punctuation\">,</span><span class=\"token function\">FIELD__OFFSET</span><span class=\"token punctuation\">(</span>IO_STACK_IOCATIONCompletionRoutine<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> <span class=\"token expression\">nextIrpSp<span class=\"token operator\">-></span>control <span class=\"token operator\">=</span> O<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span></span></span></pre></td></tr></table></figure><p>2. <code>IoSkip+IoCall</code>  直接下发</p>\n<ul>\n<li><code>IoSkipCurrentIrpStackLocation</code> ，下层设备拿到的 IO_STACKLOCATION 和当前的一样</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">IoskipcurrentIrpStackLocation</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>Irp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token expression\"><span class=\"token punctuation\">(</span>Irp<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>currentLocation<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token expression\"><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token comment\">/// 相互抵消，相当于 IRP 栈没有发生变化，下一层驱动对应的 IRP 栈和当前驱动用的是同一个栈，好像 IRP 从来没有到达过当前的驱动层一样</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token comment\">/// 为什么不用像第一种方式一样需要拷贝栈数据？是因为当前驱动不需要知道下一层的 IRP 结果，就不需要保存当前驱动对应 IRP 栈的的空间了</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token comment\">/// 为什么不直接不加不减？因为下发必然会减 (IoCallDriver)，为保持下一层使用当前驱动对应的 IRP 栈，所以需要先加</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre> <span class=\"token function\">IoskipcurrentIrpstackLocation</span><span class=\"token punctuation\">(</span>Irp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//location+1</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> <span class=\"token function\">IoCallDriver</span><span class=\"token punctuation\">(</span>deviceExtension<span class=\"token operator\">-></span>nextLower<span class=\"token punctuation\">,</span>Irp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//location-1</span></pre></td></tr></table></figure><p>3. <code>结束IRP</code>  不下发</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/// 一般用于拒绝的时候</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>PIO_STACK_LOCATION irpStack<span class=\"token operator\">=</span> <span class=\"token function\">IoGetCurrentlrpStackLocation</span><span class=\"token punctuation\">(</span>Irp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Irp<span class=\"token operator\">-></span>loStatus<span class=\"token punctuation\">.</span>Status <span class=\"token operator\">=</span> STATUS_ACCESS_DENIED<span class=\"token punctuation\">;</span><span class=\"token comment\">//STATUS_ACCESS_DENIED</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>irp<span class=\"token operator\">-></span>loStatus<span class=\"token punctuation\">.</span>Information <span class=\"token operator\">=</span> O</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">IoCompleteRequest</span><span class=\"token punctuation\">(</span>lrp<span class=\"token punctuation\">,</span> IO_NO_INCREMENT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"irp完成例程注意事项\"><a class=\"anchor\" href=\"#irp完成例程注意事项\">#</a> IRP 完成例程注意事项</h4>\n<ol>\n<li>\n<p>在驱动程序将 IRP 传递个下一个驱动之后，就不再拥有这个 IRP，并且不能试图再去访问它。否则会导致系统崩溃（蓝屏）。</p>\n<ul>\n<li>那个 IRP 会被其它的驱动或者线程  <code>释放或完成</code> 。</li>\n<li>如果驱动需要访问一个已经在栈里传下去的 IRP, 这个驱动必须实现并设置  <code>IoCompletion</code>  例程。</li>\n<li>当 I/O 管理器调用  <code>IoCompletion</code>  例程时，这个驱动就能够在  <code>IoCompletion 例程执行期间</code> 重新获得对这一 IRP 的所有权。如此，loCompletion 例程就能够访问 IRP 中的域。</li>\n</ul>\n</li>\n<li>\n<p>若是驱动的分发例程也还需要在 IRP 被后面的驱动处理完成之后再处理它，这个 IoCompletion 例程必须返回  <code>STATUS_MORE_PROCESSING_REQUIRED</code> ，以将 IRP 的所有权返回给  <code>分发例程</code> 。</p>\n<ul>\n<li>如此一来，I/O 管理器会停止 IRP 的处理，将最终完成 IRP 的任务留给分发例程。分发例程能够在之后调用  <code>IoCompleteRequest</code>  来完成这个 IRP, 或者还能将这个 IRP 标记为等候进一步处理。</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"iocopyxxx完成例程下发\"><a class=\"anchor\" href=\"#iocopyxxx完成例程下发\">#</a>  <code>IoCopyxxX+完成例程</code> 下发</h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/// IoCopyxxX + 完成例程 下发</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/// 分发例程</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>KEVENT event<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">KelnitializeEvent</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>event<span class=\"token punctuation\">,</span> NotificationEvent<span class=\"token punctuation\">,</span>FALSE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">///&lt; 设置一个事件</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">IoCopyCurrentlrpStackLocationToNext</span><span class=\"token punctuation\">(</span>Irp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/// 把当前驱动对应的 IRP 栈数据拷贝到下一层驱动上 IRP 栈上</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">/// 为当前 IRP 设置一个完成例程</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">/// 驱动需要访问一个已经在栈里传下去的 IRP, 这个驱动必须实现并设置 `IoCompletion` 例程。</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token function\">IoSetCompletionRoutine</span><span class=\"token punctuation\">(</span>Irp<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> IoCompRoutine<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> <span class=\"token operator\">&amp;</span>event<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre> TRUE<span class=\"token punctuation\">,</span>TRUE<span class=\"token punctuation\">,</span>TRUE</pre></td></tr><tr><td data-num=\"13\"></td><td><pre> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">/// 将 IRP 往下发</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>status <span class=\"token operator\">=</span> <span class=\"token function\">IoCallDriver</span><span class=\"token punctuation\">(</span>DeviceObject<span class=\"token punctuation\">,</span>Irp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">/// 如果 IRP 处于 pending 状态，就在这个事件上等待</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>status <span class=\"token operator\">==</span> STATUS_PENDING<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre> status <span class=\"token operator\">=</span> <span class=\"token function\">KeWaitForSingleObject</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>event<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  Executive<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  KernelMode<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  FALSE<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token constant\">NULL</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre> </pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token function\">ASSERT</span><span class=\"token punctuation\">(</span><span class=\"token function\">NT_SUCCESS</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\">/// 驱动的分发例程也还需要在 IRP 被后面的驱动处理完成之后再处理它，一般在驱动程序将 IRP 传递个下一个驱动之后，就不再拥有这个 IRP，并且不能试图再去访问它。否则会导致系统崩溃。因为那个 IRP 会被其它的驱动或者线程 `释放或完成`。这里可以访问是因为设置了完成例程，并且这个 IoCompletion 例程返回了 `STATUS_MORE_PROCESSING_REQUIRED`</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>status <span class=\"token operator\">=</span> Irp<span class=\"token operator\">-></span>IoStatus<span class=\"token punctuation\">.</span>Status<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token function\">IoFreelrp</span><span class=\"token punctuation\">(</span>Irp<span class=\"token punctuation\">)</span> <span class=\"token comment\">///&lt; 原本有完成例程负责 Irp 的销毁，这时候就需要交给分发例程来做了</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token comment\">/// 完成例程</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>NTSTATUS <span class=\"token function\">IoCompRoutine</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre> IN PDEVICE_OBJECT DeviceObject<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre> IN PIRP Irp<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre> IN PVOID Context</pre></td></tr><tr><td data-num=\"38\"></td><td><pre> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre> PKEVENT event <span class=\"token operator\">=</span> Context<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre> <span class=\"token comment\">/// 当 I/O 管理器调用 `IoCompletion` 例程时，这个驱动就能够在 IoCompletion `例程执行期间` 重新获得对这一 IRP 的所有权。</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre> <span class=\"token comment\">/// 如此，IoCompletion 例程就能够访问 IRP 中的域。</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre> Irp<span class=\"token operator\">-></span>UserIosb<span class=\"token operator\">-></span>Status <span class=\"token operator\">=</span> Irp<span class=\"token operator\">-></span>IoStatus<span class=\"token punctuation\">.</span>Status<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre> Irp<span class=\"token operator\">-></span>UserIosb<span class=\"token operator\">-></span>Infomation <span class=\"token operator\">=</span> Irp<span class=\"token operator\">-></span>IoStatus<span class=\"token punctuation\">.</span>Information<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre> <span class=\"token function\">KeSetEvent</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">,</span>IO_NO_INCREMENT<span class=\"token punctuation\">,</span> FALSE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre> <span class=\"token comment\">//IoFreelrp (Irp) ///&lt; 原本有完成例程负责 Irp 的销毁，这时候就需要交给分发例程来做了</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre> <span class=\"token keyword\">return</span> STATUS_MORE_PROCESSING_REQUIRED<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre> <span class=\"token comment\">/// 返回 STATUS_MORE_PROCESSING_REQUIRED，以将 IRP 的所有权返回给 `分发例程`</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre> <span class=\"token comment\">/// I/O 管理器会停止 IRP 的处理，将最终完成 IRP 的在务留给分发例程。分发例程能够在之后调用 `IoCompleteRequest` 来完成这个 IRP, 或者还能将这个 IRP 标记为等候进一步处理。</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"ioskipiocall直接下发\"><a class=\"anchor\" href=\"#ioskipiocall直接下发\">#</a>  <code>IoSkip+IoCall</code>  直接下发</h4>\n<ul>\n<li>对 IRP 没有任何改动的时候，比如放行</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>PDEVICE_EXTENSION deviceExtension<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">IoSkipCurrentlrpstackLocation</span><span class=\"token punctuation\">(</span>lrp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/// 拿到保存在设备扩展里的下层设备 deviceExtension</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">(</span>PDEVICE_EXTENSION<span class=\"token punctuation\">)</span> DeviceObject<span class=\"token operator\">-></span>DeviceExtension<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">/// 下发</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">/// 在驱动程序将 IRP 传递个下一个驱动之后，就不再拥有这个 IRP，并且不能试图再去访问它。否则会导致系统崩溃。</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">/// 因为这个 IRP 会被其它的驱动或者线程 `释放或完成`。</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">return</span> <span class=\"token function\">IoCallDriver</span><span class=\"token punctuation\">(</span>deviceExtension<span class=\"token operator\">-></span>TargetDeviceObject<span class=\"token punctuation\">,</span>Irp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"错误的下发方式\"><a class=\"anchor\" href=\"#错误的下发方式\">#</a> 错误的下发方式:</h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/// 没有设置完成例程（并且在完成例程中返回 STATUS_MORE_PROCESSING_REQUIRED，以将 IRP 的所有权返回给 `分发例程`）</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// Forward request to next driver</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">IoCopyCurrentlrpStackLocationToNext</span><span class=\"token punctuation\">(</span>Irp<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// Send the lRP down</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>status <span class=\"token function\">IoCallDriver</span><span class=\"token punctuation\">(</span>nextDevice<span class=\"token punctuation\">,</span>Irp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// The following is an error because thisdriver</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// no longer owns the IRP</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>status <span class=\"token operator\">==</span> STATUS_PENDING<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> <span class=\"token function\">IoMarklrpPending</span><span class=\"token punctuation\">(</span>Irp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 错误，无权操作 Irp 了</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// Return the lower driver's status</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">return</span> status<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"基于sfilter的hips\"><a class=\"anchor\" href=\"#基于sfilter的hips\">#</a> 基于 Sfilter 的 HIPS</h2>\n<ul>\n<li>监控敏感目录 (全盘监控效率低)</li>\n<li>防勒索工具</li>\n</ul>\n<h3 id=\"过滤分发函数\"><a class=\"anchor\" href=\"#过滤分发函数\">#</a> 过滤分发函数</h3>\n<p>过滤分发函数中所需要做的事情：</p>\n<ul>\n<li>\n<p><code>FilterCreate</code> （创建)</p>\n<ul>\n<li>病毒和木马进入系统肯定会生成一些文件，比如释放  <code>.sys</code> , <code>.dll</code>  文件或者一个  <code>链接</code> 等等都属于文件创建操作</li>\n<li>全局监控太耗性能，只监控一些敏感的区域比较好</li>\n</ul>\n</li>\n<li>\n<p><code>FilterRead</code>  (一般不拦，加解密处理)</p>\n<ul>\n<li>读操作不会修改文件，但是如果作为  <code>隐私保护器</code> ，那需要拦截，防止别人读取文件</li>\n<li>加解密中也要拦截， 读操作这时候是解密</li>\n</ul>\n</li>\n<li>\n<p><code>FilterWrite</code> （修改，小心加解密处理)</p>\n<ul>\n<li>修改文件肯定要拦截</li>\n<li>加解密中也要拦截， 写操作这时候是加密</li>\n</ul>\n</li>\n<li>\n<p><code>FilterSetInfo</code>  (删，重命名)</p>\n<ul>\n<li>删，重命名对应 IRP_MJ_SET_INFORMATION 下的次功能号，所以也需要拦</li>\n</ul>\n</li>\n<li>\n<p><code>FilterClose</code>  (一般不拦)</p>\n</li>\n<li>\n<p><code>FilterClean</code> （写关闭等)</p>\n<ul>\n<li>写关闭：写操作完成之后关闭，要拦截。</li>\n<li>比如，一个病毒特征码是  <code>foul</code> , 要把病毒写到文件中去，直接写  <code>foul</code> , 在写的时候就会被杀毒软件匹配并拦截到。但每次写的时候只写一部分，第 1 次写  <code>f</code> ，第 2 次写  <code>o</code> ，第 3 次写  <code>u</code> ，第 4 次写  <code>l</code> ，写完之后文件保存就是  <code>foul</code> ，绕过了杀毒软件的查杀。所以要在每次写完的关闭之前都需要扫描一遍文件是不是匹配病毒特征码，所以写关闭是需要拦截的。</li>\n<li>写关闭有时候无法直接区分，因为打开文件再关闭， <code>关闭之前不知道是读还是写</code> ，在 xp 里面，关闭的时候 information 是 2 则表示是写，win7 及以后版本则没有了这些标志。</li>\n<li>所以在 Sfilter 里面，往往是通过文件的修改时间来判断，如果是在  <code>1min</code>  之内则认为是写关闭。</li>\n<li>Minifilter 里面有  <code>上下文</code> ，写操作在打开文件的时候我们是知道的，因为打开文件的时候带写权限，把信息记录下来通过上下文的形式传给关闭操作的。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"代码详解\"><a class=\"anchor\" href=\"#代码详解\">#</a> 代码详解</h3>\n<h2 id=\"minifilter\"><a class=\"anchor\" href=\"#minifilter\">#</a> Minifilter</h2>\n<h3 id=\"minifilter与legacy-filtersfilter区别\"><a class=\"anchor\" href=\"#minifilter与legacy-filtersfilter区别\">#</a> Minifilter 与 legacy filter (Sfilter) 区别</h3>\n<ul>\n<li>\n<p>新一代的文件过滤驱动框架: Minifilter</p>\n</li>\n<li>\n<p>比 sfilter  <code>加载顺序更易控制</code> 。 <code>altitude</code>  被绑定到合适的位置。</p>\n</li>\n<li>\n<p><code>可卸载</code> 能力。</p>\n<ul>\n<li>系统不重启的情况下，HOOK 不支持卸载，卸载可能会蓝屏，是因为有的 IRP 可能没有立即返回，会被  <code>pending</code>  起来，如果这时候把 hook 的函数卸载，当重新回来执行的时候，函数的地址就失效了，内存无效，蓝屏。</li>\n<li>解决方法：引用计数</li>\n<li>minifiler 驱动是向 minifiler 框架注册的，minifilter 驱动卸载了，框架还在，就不会造成类似 HOOK 函数卸载后的问题</li>\n</ul>\n</li>\n<li>\n<p>Callback 模型  <code>仅需处理必要操作</code> 的能力 (pre_create,post create)</p>\n<ul>\n<li>相当于把 Sfilter 的分发函数分为两部分： <code>pre_create</code>  (IRP 下发之前), <code>post create</code>  (IRP 处理完之后)</li>\n<li>如果不想处理 IRP 就不需要注册对应的回调函数 (如果是 Sfilter 则需要为不处理的 IRP 注册一个  <code>通用</code> 的过滤分发函数)</li>\n<li>绑定过滤设备对象动作  <code>被隐藏</code></li>\n</ul>\n</li>\n<li>\n<p><code>兼容性</code> 更好</p>\n<ul>\n<li>hook 会打架，谁后生成谁优先</li>\n<li>Sfiler 不可卸载</li>\n<li>Minifilter 都没有上述问题</li>\n</ul>\n</li>\n<li>\n<p><code>名字处理</code> 更容易</p>\n<ul>\n<li>Minifilter 拿文件名只需直接调用函数就可以了</li>\n</ul>\n</li>\n<li>\n<p>安装方式 (.inf 或者用代码动态加载)</p>\n<ul>\n<li>动态安装，创建几个与之相关的注册表的键即可</li>\n</ul>\n</li>\n<li>\n<p>通信方式 (port)</p>\n<ul>\n<li>基于端口通信，效率非常高，应用层可以多个线程处理内核层发送的请求，每个线程也可以处理多个请求。</li>\n</ul>\n</li>\n<li>\n<p>同样遵循 IRQL, 锁等内核开发通用机制</p>\n</li>\n<li>\n<p>FltCreateFile/ZwCreateFile</p>\n<ul>\n<li>Minifilter 中不建议使用  <code>Zw*</code>  函数，而是使用  <code>Flt*</code>  函数，避免  <code>重入</code>  (死循环)</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"minifilter框架\"><a class=\"anchor\" href=\"#minifilter框架\">#</a> Minifilter 框架</h3>\n<h4 id=\"minifilter-2\"><a class=\"anchor\" href=\"#minifilter-2\">#</a> Minifilter</h4>\n<p>下图显示了一个简化的 I/O 堆栈，其中包含过滤管理器和三个微型过滤驱动程序。</p>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<ul>\n<li><code>I/O Nanager</code> : 负责把应用层的 IO 请求封装成 IRP 包，发送给  <code>Filter Manager</code></li>\n<li><code>Filter Manager Frame</code> : 把 IRP 重新组装成  <code>FLT_CALLBACK_DATA</code>  结构体，把这个结构体传给逐层传给 Minifilter 驱动 A，B，C (Altitude 值不一样，每次加载的时候相对关系是固定的，值大的在上层，越优先处理)，即 Minifilter 中没有 IRP 这一说法了，处理 IO 数据的时候都是从  <code>FLT_CALLBACK_DATA</code>  结构体中拿数据。</li>\n</ul>\n<h4 id=\"minifilter与sfilter共存\"><a class=\"anchor\" href=\"#minifilter与sfilter共存\">#</a> Minifilter 与 Sfilter 共存</h4>\n<p>下图显示了一个简化的 I/O 堆栈，其中包含两个过滤管理器帧、微型过滤驱动程序实例和旧过滤驱动程序。</p>\n<p><img data-src=\"image002.png\" alt=\"\" /></p>\n<ul>\n<li>Legacy Filter Driver：指的是  <code>Sfilter</code>  驱动，虽然夹在两个  <code>Filter Manager Frame</code> , 但 Sfilter 驱动是  <code>没有高度</code> 的。Sfilter 驱动可以在  <code>Filter Manager Frame</code>  的上面也可以在下面，二者之间没有说谁的级别比谁的级别高。</li>\n</ul>\n<h4 id=\"altitude值\"><a class=\"anchor\" href=\"#altitude值\">#</a> Altitude 值</h4>\n<ul>\n<li>\n<p>20000-429999</p>\n</li>\n<li>\n<p>每一个  <code>minifilter驱动</code> 必须有一个叫做  <code>altitude</code>  的  <code>唯一标识符</code> 。一个 minifilter 驱动的 altitude 定义了它加载时在 I/O 栈中相对其他 minifilter 驱动的位置。值越小，栈中位置就越低。</p>\n</li>\n<li>\n<p>FSFilter Anti-Virus 320000-329999</p>\n<ul>\n<li>此组包括在文件 I/O 期间探测并杀毒的过滤驱动。</li>\n<li><code>反病毒在加解密之前</code> 是合理的，如果加解密在前面，把文件加密了，反病毒就无法识别病毒特征码了。</li>\n</ul>\n</li>\n<li>\n<p>FSFilter Encryption 140000-149999</p>\n<ul>\n<li>此组包括在文件 I/O 期间  <code>加密</code> 和  <code>解密</code> 数据的过滤驱动。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"minifilter中的结构和定义\"><a class=\"anchor\" href=\"#minifilter中的结构和定义\">#</a> Minifilter 中的结构和定义</h3>\n<ul>\n<li><code>FLT_REGISTRATION</code>  的定义</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// https://docs.microsoft.com/en-us/windows-hardware/drivers/ifs/managing-contexts-in-a-minifilter-driver</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> FLT_REGISTRATION fileMonitorRegistration <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span> FLT_REGISTRATION<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">///&lt; Size</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> FELT_REGISTRATION_VERSION<span class=\"token punctuation\">,</span> <span class=\"token comment\">///&lt; Version</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>                         <span class=\"token comment\">///&lt; Flags</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> ContextRegistration<span class=\"token punctuation\">,</span>       <span class=\"token comment\">///&lt; ContextRegistration</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> fileMonitorCallbacks<span class=\"token punctuation\">,</span>      <span class=\"token comment\">///&lt; Operation callbacks, 结构体数组，每一个结构体封装了 IRP 和与之对应的回调函数，注册的回调函数就是放在这个结构体数组里</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> fileMonUnload<span class=\"token punctuation\">,</span>             <span class=\"token comment\">///&lt; FilterUnload, 在 Minifilter 卸载时调用，做一些清理工作</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> fileMonInstanceSetup<span class=\"token punctuation\">,</span>      <span class=\"token comment\">///&lt; InstanceSetup，instance 类似 Sfilter 中的过滤设备对象，有多少的卷设备就生成多个实例与之绑定，生成的过程是不可见的（看不到生成实例的代码，是由框架去做的），instance 的数量和卷设备对象的数量相等的，一一对应。</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> <span class=\"token comment\">///&lt; 调用时机：把 Minifilter 的实例绑定到卷设备对象上会调用这个函数</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre> <span class=\"token comment\">///&lt; 作用：可以记录下 instance 对应卷设备的一些属性，比如说是 C 盘还是 D 盘，文件类型是 FAT32 还是 NTFS，卷的扇区大小是 512B 还是 4KB。存到一个上下文里面（是个缓存），下次用到的时候，之间从缓存里面拿数据既可以了，提高效率。</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span>                      <span class=\"token comment\">///&lt; InstanceQuery Teardown</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre> fileMonInstanceTeardownStart<span class=\"token punctuation\">,</span> <span class=\"token comment\">///&lt; InstanceTeardownStart</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span>                         <span class=\"token comment\">///&lt; InstanceTeardownComplete</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span>                         <span class=\"token comment\">///&lt; GenerateFileName</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span>                         <span class=\"token comment\">///&lt; GenerateDestinationFileName</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre> <span class=\"token constant\">NULL</span>                          <span class=\"token comment\">///&lt; NormalizeNameComponent</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li><code>fileMonitorCallbacks</code>  结构体数组的定义</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> FLT_OPERATION_REGISTRATION fileMonitorCallbacks<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  IRP_MJ_CREATE<span class=\"token punctuation\">,</span> <span class=\"token comment\">/// 表示创建或者打开 IRP 的回调函数</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  FLTFL_OPERATION_REGISTRATION_SKIP_PAGlNG_IO<span class=\"token punctuation\">,</span> <span class=\"token comment\">// Flag，忽略掉 paging_io</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  HOOK_PreNtCreateFile<span class=\"token punctuation\">,</span> <span class=\"token comment\">/// 可以缺省其中一个 </span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  HOOK_PostNtCreateFile <span class=\"token comment\">/// 可以缺省其中一个</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  IRP_MJCLEANUP<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token number\">0</span>，</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  HOOK_PreNtCleanup<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token constant\">NULL</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  IRP_MJ_WRITE<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  HOOK_PreNtWriteFile<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  HOOK_PostNtWriteFile</pre></td></tr><tr><td data-num=\"20\"></td><td><pre> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  lRP_MJ_SETLINF ORMATION<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  HOOK_PreNtSetInformationFile<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  HOOK_PostNtSetInformationFile</pre></td></tr><tr><td data-num=\"26\"></td><td><pre> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  IRPZMJ_ORERATION_END</pre></td></tr><tr><td data-num=\"28\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>\n<p>文件带缓存 IO:</p>\n<ul>\n<li>预先读入文件和延迟写入文件。在读 / 写文件的时候，为了提高效率，文件带缓冲进行 IO 操作，读的时候提前读入目标旁边的数据，写的时候会延迟写 ( <code>集中起来一次性写入</code> )，因为磁盘是低速设备，减少 IO 次数是能提高效率的。</li>\n<li>当 ReadFile 时，会调用 NtReadFile () 系统调用，它会构造一个 IRP 下发到 FSD，FSD 会检查这个 IRP 看是不是可以缓存的，是的话，如果还没有为此文件建立缓存的话，就会调用 CclnitializeCacheMap () 函数建立缓存，它里面会调用内存管理器 (VMM）函数建立一个节对象。</li>\n<li>当用到时，会把这个节对象 (和文件关联) 映射到内核空间。如果 IRP 是可缓存的，则调用 CcCopyRead 函数进行从缓存中读入文件。</li>\n<li>如果此文件还没有在内存中，则会产生页面错误，交给 MmAccessFault () 函教处理，它会调用 loPageRead iO 分配一个不缓存的 IRP (IRP_PAGING_lO)，但是它会走 FSD，不会调用缓存的函数，而是最终调用磁盘驱动进行真实的磁盘读写读入到内存。</li>\n<li>之后 CcCopyRead () 再不会产生错误了，会从缓存复制到用户 Buffer 中</li>\n</ul>\n</li>\n<li>\n<p>IRP_PAGING_IO:</p>\n<ul>\n<li>情况 1. <code>IRP_NOCACHE</code>  &amp;&amp; 非  <code>IRP_XXX_ PAGING _IO</code> , 也就是用户程序设置 FILE_NO_INTERMEDIATE_BUFFERING, 流程是 App-&gt;IO-&gt;FSD-&gt;DISK</li>\n<li>情况 2. <code>IRP_CACHE</code> &amp;&amp; 非  <code>IRP_XXX_PAGING_IO</code> , 也就是用户程序默认设置，流程是 APP-&gt;IO-&gt;FSD-CC (Cache Manger)-&gt;MM (-&gt;FSD-DISK)</li>\n<li><code>IRP_PAGING_IO</code> : 在情况 2 中：MM 会发起一个 IRP 并标记为  <code>IRP_XXX_PAGING_IO</code> , 流程是 MM-&gt;FSD-&gt;DISK (on behalt of vm), 所以  <code>IRP_PAGING_IO</code>  不是由用户程序发起的，而是由  <code>内存管理器</code> 发起的，所以不需要监控。</li>\n<li>如果设置了 IRP_XXX_PAGING_IO, 那就是 MM 内部用的 IRP,CACHE 标记此时没有意义 (on behalft of vmn)</li>\n<li>发给磁盘的机会:</li>\n<li>1. <code>FILE_NO_INTERMEDIATE_BUFFERING</code> &amp;&amp; 非  <code>IRR_XXX_PAGING_IO</code>  的时候会发给 DISK，即 App-&gt;IO-&gt;FSD-&gt;DISK</li>\n<li>2. <code>IRP_XXX_PAGING_IO</code>  时候会发给 DISK，即 MM-&gt;FSD-&gt;DISK</li>\n</ul>\n</li>\n<li>\n<p>预操作回调函数和后操作回调函数的定义</p>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/// 以 create 操作为例</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">///create 执行之前调用</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>FLT_PREOP_CALLBACK_STATUS <span class=\"token function\">HOOK_PreNtCreateFile</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> PFLTCALLBACK_DATA Data<span class=\"token punctuation\">,</span> <span class=\"token comment\">///Filter Manager Frame 将 IRP 重新组装成 `FLT_CALLBACK_DATA` 结构体</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> PCFLT_RELATED_OBJECTS FltObjects<span class=\"token punctuation\">,</span> <span class=\"token comment\">/// 与 Minifilter 相关的对象</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> PVOID <span class=\"token operator\">*</span>CompletionContext <span class=\"token comment\">/// 分配的一个 context 资源，可以传给 Post 函数处理，然后在 Post 函数释放掉 context 资源</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> <span class=\"token comment\">//sandbox</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> <span class=\"token comment\">// 主防</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> <span class=\"token comment\">// 杀毒引擎</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre> <span class=\"token comment\">// 加解密</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> <span class=\"token keyword\">return</span> xxx<span class=\"token punctuation\">;</span> <span class=\"token comment\">/// 这个返回值是返回给 Minifilter 管理器的，拿到返回值之后再决定要不要把操作继续往下发给 Mnifilter 驱动或者 Sfilter 驱动</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre> <span class=\"token comment\">/// Data->IoStatus.Status = STATUS_ACCESS_DENIED; 这个才是返回给 IO 管理器的，即应用层</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token comment\">/// PRE-OP 的返回值：(和 sfilter 比较)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre> <span class=\"token comment\">/// FLT_PREOP_SUCCESS_WITH_CALLBACK // 告诉 Minifilte 管理器要把操作往下发，结束之后要调用 Post, 类似 Sfilter 中 `IoCopyxxX + 完成例程` 将 IRP 下发</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre> <span class=\"token comment\">/// FLTPREOP_SUCCESS_NO_CALLBACK // 告诉 Minifilte 管理器要把操作往下发，结束之后但不需要调用 Post, 类似 Sfilter 中 `IoSkip+IoCall` 直接下发</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre> <span class=\"token comment\">/// FLT_PREOP_PENDING  // 挂起</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre> <span class=\"token comment\">/// FLT PREOP DISALLOW_FASTIO // 禁用 fastio</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre> <span class=\"token comment\">/// FLT_PREOP_COMPLETE // 告诉 Minifilte 管理器要把操作完成之后不下发了，当前为止，不下发有拒绝 (STATUS_ACCESS_DENIED), 成功完成 (STATUS_ACCESS)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre> <span class=\"token comment\">/// FLT_PREOP_SYNCHRONIZE // 同步</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">///create 完成之后创建 </span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>FLT_POSTOP_CALLBACK_STATUS <span class=\"token function\">HOOK_PostNtCreateFile</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre> PFLT_CALLBACK_DATA Data<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre> PCFLT RELATED_OBJECTS FltObjects<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre> PVOID completionContext， <span class=\"token comment\">// 在 PRE-OP 里返回 FLT_PREOPsuCcEss_wITH_CALLBACK 时获取里面的上下文，并最后释放 Context 资源</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre> FLT_POST_OPERATION_FLAGS Flags</pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre> <span class=\"token keyword\">return</span> xxx<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre> <span class=\"token comment\">// POST-OP 的返回值:</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre> <span class=\"token comment\">// FLT_POSTOP_FINISHED_PROCESSING // 最终完成处理</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre> <span class=\"token comment\">// FLT_POSTOP_MORE_PROCESSING_REQUIRED //post 处理完之后，还需要更多处理，一般发生在 Post 里面，如果 Irql 比较高，比如处于 DISPATCH_LEVEL，这样需要做一些操作的时候，是需要开一个工作者线程去做，这时候就需要返回一个 FLT_POSTOP_MORE_PROCESSING_REQUIRED</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>FltObjects<span class=\"token operator\">-></span>volume<span class=\"token punctuation\">,</span>FltObjects<span class=\"token operator\">-></span>Instance<span class=\"token punctuation\">,</span>FltObjects<span class=\"token operator\">-></span>FileObject<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>FltObjects<span class=\"token operator\">-></span>FileObject<span class=\"token operator\">-></span>DeviceObject</pre></td></tr></table></figure><ul>\n<li><code>判断Data是什么操作的宏</code></li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>FLT_IS_IRP_OPERATION  <span class=\"token comment\">/// 应用下发的 IRP</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>FLT_IS_FASTIO_OPERATION <span class=\"token comment\">/// 走缓存</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>FLJ IS_FS_FILTER_OPERATION <span class=\"token comment\">/// 其他 Minifilter 或者 Sfilter 下发的</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">//eg：禁用 fastio</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">FLT_IS_FASTIO_OPERATION</span><span class=\"token punctuation\">(</span>Data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">/// 为真则是 Fasdtio 操作</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> ntStatus STATUS_FLT DISALLOW_FAST_I0<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> Data<span class=\"token operator\">-></span>loStatus<span class=\"token punctuation\">.</span>status <span class=\"token operator\">=</span> ntStatus<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> Data<span class=\"token operator\">-></span>loStatus<span class=\"token punctuation\">.</span>Information <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> <span class=\"token keyword\">return</span> FLT_PREOR_DISALLOW_FASTIO<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li><code>参数数据的获取</code></li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>PFLT_CALLBACK_DATA Data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>PEPROCESS processObject <span class=\"token operator\">=</span> Data<span class=\"token operator\">-></span>Thread <span class=\"token operator\">?</span> <span class=\"token function\">loThreadToProcess</span><span class=\"token punctuation\">(</span>Data<span class=\"token operator\">-></span>Thread<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">PsGetCurrentProcess</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/// 把 Thread 转换成 Exprocess 结构</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">HandleToUlong</span><span class=\"token punctuation\">(</span><span class=\"token function\">PsGetProcessld</span><span class=\"token punctuation\">(</span>processObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">/// 通过 Eprocess 结构拿到 PID</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Data<span class=\"token operator\">-></span>IoStatus<span class=\"token punctuation\">.</span>Status <span class=\"token operator\">=</span> ntStatus<span class=\"token punctuation\">;</span> <span class=\"token comment\">///pIrp->loStatus.Status=ntStatus;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>Data<span class=\"token operator\">-></span>IoStatus<span class=\"token punctuation\">.</span>Information <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/// 跟 IRP 类似</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>FltObjects<span class=\"token operator\">-></span>Volume<span class=\"token punctuation\">,</span> <span class=\"token comment\">/// 卷设备对象</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>FltObjects<span class=\"token operator\">-></span>Instance<span class=\"token punctuation\">,</span> <span class=\"token comment\">/// 实例对象和 Volume 一一对应</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>FltObjects<span class=\"token operator\">-></span>FileObject<span class=\"token punctuation\">,</span> <span class=\"token comment\">/// 要被操作目标文件的内核对象</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>FltObjects<span class=\"token operator\">-</span>FileObject<span class=\"token operator\">-></span>DeviceObject <span class=\"token comment\">/// 文件所在的设备对象</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre> </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>PMDE pReadMdl <span class=\"token operator\">=</span> Data<span class=\"token operator\">-></span>lopb<span class=\"token operator\">-></span>Parameters<span class=\"token punctuation\">.</span>Read<span class=\"token punctuation\">.</span>MdlAddress<span class=\"token punctuation\">;</span> <span class=\"token comment\">///MdlAddress!=NULL 使用的是 direct io</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>PVOID pReadBuffer <span class=\"token operator\">=</span> Data<span class=\"token operator\">-></span>Iopb<span class=\"token operator\">-></span>Parameters<span class=\"token punctuation\">.</span>ReadBuffer<span class=\"token punctuation\">;</span><span class=\"token comment\">///MdlAddress==NULL 使用的是 readbuffer</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>ULONG uReadLength <span class=\"token operator\">=</span> Data<span class=\"token operator\">-></span>lopb<span class=\"token operator\">-></span>Parameters<span class=\"token punctuation\">.</span>Read<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">;</span> <span class=\"token comment\">/// 读数据的长度</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>Data<span class=\"token operator\">-></span>Iopb<span class=\"token operator\">-></span>Parameters<span class=\"token punctuation\">.</span>create<span class=\"token punctuation\">.</span>SecurityContext<span class=\"token operator\">-></span>DesiredAccess <span class=\"token comment\">/// 如果是创建，创建的一些操作可以拿到，比如说以写的方式，读的方式还是读写的方式等</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre> </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>PVOID pQueryBuffer</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>Data<span class=\"token operator\">></span>Iopb<span class=\"token operator\">-></span>Parameters<span class=\"token punctuation\">.</span>DirectoryControl<span class=\"token punctuation\">.</span>QueryDirectory<span class=\"token punctuation\">.</span>DineectoryBuffer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">/// 查询文件夹的 buffer</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>ULONG uQueryBuffersize <span class=\"token operator\">=</span> Data<span class=\"token operator\">-></span>lopb<span class=\"token operator\">-></span>Parameters<span class=\"token punctuation\">.</span>DirectoryControl<span class=\"token punctuation\">.</span>QueryDirectory<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">;</span> <span class=\"token comment\">/// 查询文件夹的 buffer 长度</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">/// 返回</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>Data<span class=\"token operator\">-></span>IoStatus<span class=\"token punctuation\">.</span>Status <span class=\"token operator\">=</span> STATUS_ACCESS_DENIED<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>Data<span class=\"token operator\">-></span>IoStatus<span class=\"token punctuation\">.</span>Information <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">return</span> FLT_PREOP_COMPLETE<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li><code>启动mifilter</code></li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/// 注册</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">/// 自己封装的一个 initFileMonitor</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>NTSTATUS <span class=\"token function\">initFileMonitor</span><span class=\"token punctuation\">(</span>PDRIVER_OBJECT DriverObject <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token comment\">//fileMonitorRegistration 结构体传给 FltRegisterFilter 函数进行注册，得到句柄 g_pFilter</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token keyword\">return</span> <span class=\"token function\">FltRegisterFilter</span><span class=\"token punctuation\">(</span> DriverObject<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token operator\">&amp;</span>fileMonitorRegistration<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token operator\">&amp;</span>g_pFilter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">/// 启动</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>NTSTATUS <span class=\"token function\">startFileMonitor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>g_pFilter<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token comment\">// 启动 Minifilter 驱动，以后所有与 Write，READ，SET_INFORMATION 等相关的 IO 操作依次会被 _Pre* 和 _Pos * 函数拦截</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token function\">FltStartFiltering</span><span class=\"token punctuation\">(</span>g_pFilter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre> <span class=\"token keyword\">return</span> STATUS_INSUFFICIENT_RESOURCES<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">/// 卸载</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>VOID <span class=\"token function\">stopFileMonitor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>g_pFilter<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre> </pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token function\">FltUnregisterFilter</span><span class=\"token punctuation\">(</span>g_pFilter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 卸载时会调用 fileMonitorRegistration.fileMonUnload 来释放一些资源</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  g_pFilter <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"minifilter的安装方式\"><a class=\"anchor\" href=\"#minifilter的安装方式\">#</a> Minifilter 的安装方式</h3>\n<h4 id=\"inf格式安装\"><a class=\"anchor\" href=\"#inf格式安装\">#</a>  <code>.inf</code>  格式安装</h4>\n<p>当我们创建 Minifilter 项目的时候 VS 编译器会自动给我们生成一个格式。我们只需要修改一下几个关键点就可以了，其中也有微软的注释。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span> xxxx 是驱动项目的名字</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">[</span>Version<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>Signature   <span class=\"token operator\">=</span> <span class=\"token string\">\"$Windows NT$\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">;</span> TODO <span class=\"token operator\">-</span> Change the Class <span class=\"token operator\">and</span> ClassGuid to match the Load Order Group value<span class=\"token punctuation\">,</span> see https<span class=\"token operator\">:</span><span class=\"token comment\">//msdn.microsoft.com/en-us/windows/hardware/gg462963</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">;</span> Class       <span class=\"token operator\">=</span> <span class=\"token string\">\"ActivityMonitor\"</span>                         <span class=\"token punctuation\">;</span>This is determined by the work <span class=\"token keyword\">this</span> filter driver does</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">;</span> ClassGuid   <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>b86dff51<span class=\"token operator\">-</span>a31e<span class=\"token operator\">-</span><span class=\"token number\">4</span>bac<span class=\"token operator\">-</span>b3cf<span class=\"token operator\">-</span>e8cfe75c9fc2<span class=\"token punctuation\">&#125;</span>    <span class=\"token punctuation\">;</span>This value is determined by the Load Order Group value</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>Class <span class=\"token operator\">=</span> <span class=\"token string\">\"ActivityMonitor\"</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>ClassGuid <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>b86dff51<span class=\"token operator\">-</span>a31e<span class=\"token operator\">-</span><span class=\"token number\">4</span>bac<span class=\"token operator\">-</span>b3cf<span class=\"token operator\">-</span>e8cfe75c9fc2<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>Provider    <span class=\"token operator\">=</span> <span class=\"token operator\">%</span>ManufacturerName<span class=\"token operator\">%</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>DriverVer   <span class=\"token operator\">=</span> </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>CatalogFile <span class=\"token operator\">=</span> xxxx<span class=\"token punctuation\">.</span>cat</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>PnpLockDown<span class=\"token operator\">=</span><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">[</span>DestinationDirs<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>DefaultDestDir          <span class=\"token operator\">=</span> <span class=\"token number\">12</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>MiniFilter<span class=\"token punctuation\">.</span>DriverFiles  <span class=\"token operator\">=</span> <span class=\"token number\">12</span>            <span class=\"token punctuation\">;</span><span class=\"token operator\">%</span>windir<span class=\"token operator\">%</span>\\system32\\drivers</pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span> Default install sections</pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">[</span>DefaultInstall<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>OptionDesc          <span class=\"token operator\">=</span> <span class=\"token operator\">%</span>ServiceDescription<span class=\"token operator\">%</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>CopyFiles           <span class=\"token operator\">=</span> MiniFilter<span class=\"token punctuation\">.</span>DriverFiles</pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">[</span>DefaultInstall<span class=\"token punctuation\">.</span>Services<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>AddService          <span class=\"token operator\">=</span> <span class=\"token operator\">%</span>ServiceName<span class=\"token operator\">%</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">,</span>MiniFilter<span class=\"token punctuation\">.</span>Service</pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span> Default uninstall sections</pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">[</span>DefaultUninstall<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>DelFiles   <span class=\"token operator\">=</span> MiniFilter<span class=\"token punctuation\">.</span>DriverFiles</pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">[</span>DefaultUninstall<span class=\"token punctuation\">.</span>Services<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>DelService <span class=\"token operator\">=</span> <span class=\"token operator\">%</span>ServiceName<span class=\"token operator\">%</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x200</span>      <span class=\"token punctuation\">;</span>Ensure service is stopped before deleting</pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token punctuation\">;</span> Services Section</pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token punctuation\">[</span>MiniFilter<span class=\"token punctuation\">.</span>Service<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>DisplayName      <span class=\"token operator\">=</span> <span class=\"token operator\">%</span>ServiceName<span class=\"token operator\">%</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>Description      <span class=\"token operator\">=</span> <span class=\"token operator\">%</span>ServiceDescription<span class=\"token operator\">%</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>ServiceBinary    <span class=\"token operator\">=</span> <span class=\"token operator\">%</span><span class=\"token number\">12</span><span class=\"token operator\">%</span>\\<span class=\"token operator\">%</span>DriverName<span class=\"token operator\">%</span><span class=\"token punctuation\">.</span>sys        <span class=\"token punctuation\">;</span><span class=\"token operator\">%</span>windir<span class=\"token operator\">%</span>\\system32\\drivers\\</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>Dependencies     <span class=\"token operator\">=</span> <span class=\"token string\">\"FltMgr\"</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>ServiceType      <span class=\"token operator\">=</span> <span class=\"token number\">2</span>                            <span class=\"token punctuation\">;</span>SERVICE_FILE_SYSTEM_DRIVER</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>StartType        <span class=\"token operator\">=</span> <span class=\"token number\">3</span>                            <span class=\"token punctuation\">;</span>SERVICE_DEMAND_START</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>ErrorControl     <span class=\"token operator\">=</span> <span class=\"token number\">1</span>                            <span class=\"token punctuation\">;</span>SERVICE_ERROR_NORMAL</pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token punctuation\">;</span> TODO <span class=\"token operator\">-</span> Change the Load Order Group value</pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token punctuation\">;</span> LoadOrderGroup <span class=\"token operator\">=</span> <span class=\"token string\">\"FSFilter Activity Monitor\"</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>LoadOrderGroup <span class=\"token operator\">=</span> <span class=\"token string\">\"_TODO_Change_LoadOrderGroup_appropriately_\"</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>AddReg           <span class=\"token operator\">=</span> MiniFilter<span class=\"token punctuation\">.</span>AddRegistry</pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token punctuation\">;</span> Registry Modifications</pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token punctuation\">[</span>MiniFilter<span class=\"token punctuation\">.</span>AddRegistry<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>HKR<span class=\"token punctuation\">,</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"DebugFlags\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x00010001</span> <span class=\"token punctuation\">,</span><span class=\"token number\">0x0</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>HKR<span class=\"token punctuation\">,</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"SupportedFeatures\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x00010001</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x3</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>HKR<span class=\"token punctuation\">,</span><span class=\"token string\">\"Instances\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"DefaultInstance\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x00000000</span><span class=\"token punctuation\">,</span><span class=\"token operator\">%</span>DefaultInstance<span class=\"token operator\">%</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>HKR<span class=\"token punctuation\">,</span><span class=\"token string\">\"Instances\\\"%Instance1.Name%,\"</span>Altitude\"<span class=\"token punctuation\">,</span><span class=\"token number\">0x00000000</span><span class=\"token punctuation\">,</span><span class=\"token operator\">%</span>Instance1<span class=\"token punctuation\">.</span>Altitude<span class=\"token operator\">%</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>HKR<span class=\"token punctuation\">,</span><span class=\"token string\">\"Instances\\\"%Instance1.Name%,\"</span>Flags\"<span class=\"token punctuation\">,</span><span class=\"token number\">0x00010001</span><span class=\"token punctuation\">,</span><span class=\"token operator\">%</span>Instance1<span class=\"token punctuation\">.</span>Flags<span class=\"token operator\">%</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre></pre></td></tr><tr><td data-num=\"70\"></td><td><pre><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre><span class=\"token punctuation\">;</span> Copy Files</pre></td></tr><tr><td data-num=\"72\"></td><td><pre><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre></pre></td></tr><tr><td data-num=\"74\"></td><td><pre><span class=\"token punctuation\">[</span>MiniFilter<span class=\"token punctuation\">.</span>DriverFiles<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre><span class=\"token operator\">%</span>DriverName<span class=\"token operator\">%</span><span class=\"token punctuation\">.</span>sys</pre></td></tr><tr><td data-num=\"76\"></td><td><pre></pre></td></tr><tr><td data-num=\"77\"></td><td><pre><span class=\"token punctuation\">[</span>SourceDisksFiles<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>xxxx<span class=\"token punctuation\">.</span>sys <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre></pre></td></tr><tr><td data-num=\"80\"></td><td><pre><span class=\"token punctuation\">[</span>SourceDisksNames<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre><span class=\"token number\">1</span> <span class=\"token operator\">=</span> <span class=\"token operator\">%</span>DiskId1<span class=\"token operator\">%</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre></pre></td></tr><tr><td data-num=\"83\"></td><td><pre><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span> String Section</pre></td></tr><tr><td data-num=\"85\"></td><td><pre><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre></pre></td></tr><tr><td data-num=\"87\"></td><td><pre><span class=\"token punctuation\">[</span>Strings<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre><span class=\"token punctuation\">;</span> TODO <span class=\"token operator\">-</span> Add your manufacturer</pre></td></tr><tr><td data-num=\"89\"></td><td><pre>ManufacturerName        <span class=\"token operator\">=</span> <span class=\"token string\">\"Template\"</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>ServiceDescription      <span class=\"token operator\">=</span> <span class=\"token string\">\"xxxx Mini-Filter Driver\"</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>ServiceName             <span class=\"token operator\">=</span> <span class=\"token string\">\"xxxx\"</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>DriverName              <span class=\"token operator\">=</span> <span class=\"token string\">\"xxxx\"</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>DiskId1                 <span class=\"token operator\">=</span> <span class=\"token string\">\"xxxx Device Installation Disk\"</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre></pre></td></tr><tr><td data-num=\"95\"></td><td><pre><span class=\"token punctuation\">;</span>Instances specific information<span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>DefaultInstance         <span class=\"token operator\">=</span> <span class=\"token string\">\"xxxx Instance\"</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>Instance1<span class=\"token punctuation\">.</span>Name          <span class=\"token operator\">=</span> <span class=\"token string\">\"xxxx Instance\"</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre><span class=\"token punctuation\">;</span> TODO <span class=\"token operator\">-</span> Change the altitude value<span class=\"token punctuation\">,</span> see https<span class=\"token operator\">:</span><span class=\"token comment\">//msdn.microsoft.com/en-us/windows/hardware/drivers/ifs/load-order-groups-and-altitudes-for-minifilter-drivers</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>Instance1<span class=\"token punctuation\">.</span>Altitude       <span class=\"token operator\">=</span> <span class=\"token string\">\"370030\"</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>Instance1<span class=\"token punctuation\">.</span>Flags         <span class=\"token operator\">=</span> <span class=\"token number\">0x0</span>              <span class=\"token punctuation\">;</span> Allow all attachments</pre></td></tr></table></figure><ul>\n<li>对于  <code>.inf</code>  文件，可以右键选择安装。</li>\n<li>也可以直接调用 API</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span> 加载</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>SetupCopyOEMlnf</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span> 或者</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">InstallHinfSection</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span><span class=\"token function\">TEXT</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"DefaultInstall128 .\\\\myfilter.inf\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span> 卸载</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">InstallHinfSection</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span><span class=\"token function\">TEXT</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"DefaultUninstall128 .\\\\upfilter.inf\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"动态加载\"><a class=\"anchor\" href=\"#动态加载\">#</a> 动态加载</h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// MinifilterInstall.cpp : Defines the entry point for the console application.</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"stdafx.h\"</span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;windows.h></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;winioctl.h></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;winsvc.h></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;conio.h></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">//#include &lt;fltuser.h></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">//#include &lt;dontuse.h></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">DRIVER_NAME</span> <span class=\"token string\">\"驱动项目名字\"</span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">DRIVER_PATH</span> <span class=\"token string\">\".\\\\驱动项目名字.sys\"</span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">DRIVER_ALTITUDE</span>  <span class=\"token string\">\"370020\"</span> <span class=\"token comment\">// 这里没有使用 UNICODE 编码，导致安装不生效，是因为工程是宽字节的工程，如果是多字节工程那就没问题</span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">// SYS 文件跟程序放在同个目录下</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">// InstallDriver(DRIVER_NAME,DRIVER_PATH,DRIVER_ALTITUDE);</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">// 启动驱动服务 StartDriver (DRIVER_NAME);</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">// 停止驱动服务 StopDriver (DRIVER_NAME);</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">// 卸载服务 DeleteDriver (DRIVER_NAME);</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>BOOL <span class=\"token function\">InstallDriver</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> lpszDriverName<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> lpszDriverPath<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> lpszAltitude<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">char</span>    szTempStr<span class=\"token punctuation\">[</span>MAX_PATH<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    HKEY    hKey<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    DWORD    dwData<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">char</span>    szDriverImagePath<span class=\"token punctuation\">[</span>MAX_PATH<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> <span class=\"token constant\">NULL</span><span class=\"token operator\">==</span>lpszDriverName <span class=\"token operator\">||</span> <span class=\"token constant\">NULL</span><span class=\"token operator\">==</span>lpszDriverPath <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token keyword\">return</span> FALSE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token comment\">// 得到完整的驱动路径</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token function\">GetFullPathName</span><span class=\"token punctuation\">(</span>lpszDriverPath<span class=\"token punctuation\">,</span> MAX_PATH<span class=\"token punctuation\">,</span> szDriverImagePath<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    SC_HANDLE hServiceMgr<span class=\"token operator\">=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// SCM 管理器的句柄</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    SC_HANDLE hService<span class=\"token operator\">=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// NT 驱动程序的服务句柄</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token comment\">// 打开服务控制管理器</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    hServiceMgr <span class=\"token operator\">=</span> <span class=\"token function\">OpenSCManager</span><span class=\"token punctuation\">(</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> SC_MANAGER_ALL_ACCESS <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> hServiceMgr <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span> <span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token comment\">// OpenSCManager 失败</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token function\">CloseServiceHandle</span><span class=\"token punctuation\">(</span>hServiceMgr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token keyword\">return</span> FALSE<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token comment\">// OpenSCManager 成功  </span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token comment\">// 创建驱动所对应的服务</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    hService <span class=\"token operator\">=</span> <span class=\"token function\">CreateService</span><span class=\"token punctuation\">(</span> hServiceMgr<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        lpszDriverName<span class=\"token punctuation\">,</span>             <span class=\"token comment\">// 驱动程序的在注册表中的名字</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        lpszDriverName<span class=\"token punctuation\">,</span>             <span class=\"token comment\">// 注册表驱动程序的 DisplayName 值</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        SERVICE_ALL_ACCESS<span class=\"token punctuation\">,</span>         <span class=\"token comment\">// 加载驱动程序的访问权限</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        SERVICE_FILE_SYSTEM_DRIVER<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 表示加载的服务是文件系统驱动程序</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        SERVICE_DEMAND_START<span class=\"token punctuation\">,</span>       <span class=\"token comment\">// 注册表驱动程序的 Start 值</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        SERVICE_ERROR_IGNORE<span class=\"token punctuation\">,</span>       <span class=\"token comment\">// 注册表驱动程序的 ErrorControl 值</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        szDriverImagePath<span class=\"token punctuation\">,</span>          <span class=\"token comment\">// 注册表驱动程序的 ImagePath 值</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        <span class=\"token string\">\"FSFilter Activity Monitor\"</span><span class=\"token punctuation\">,</span><span class=\"token comment\">// 注册表驱动程序的 Group 值</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        <span class=\"token string\">\"FltMgr\"</span><span class=\"token punctuation\">,</span>                   <span class=\"token comment\">// 注册表驱动程序的 DependOnService 值</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> hService <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span> <span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"70\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> <span class=\"token function\">GetLastError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> ERROR_SERVICE_EXISTS <span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"71\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>            <span class=\"token comment\">// 服务创建失败，是由于服务已经创立过</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>            <span class=\"token function\">CloseServiceHandle</span><span class=\"token punctuation\">(</span>hService<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">// 服务句柄</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>            <span class=\"token function\">CloseServiceHandle</span><span class=\"token punctuation\">(</span>hServiceMgr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// SCM 句柄</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>            <span class=\"token keyword\">return</span> TRUE<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"76\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>        <span class=\"token keyword\">else</span> </pre></td></tr><tr><td data-num=\"78\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>            <span class=\"token function\">CloseServiceHandle</span><span class=\"token punctuation\">(</span>hService<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">// 服务句柄</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>            <span class=\"token function\">CloseServiceHandle</span><span class=\"token punctuation\">(</span>hServiceMgr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// SCM 句柄</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>            <span class=\"token keyword\">return</span> FALSE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>    <span class=\"token function\">CloseServiceHandle</span><span class=\"token punctuation\">(</span>hService<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">// 服务句柄</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>    <span class=\"token function\">CloseServiceHandle</span><span class=\"token punctuation\">(</span>hServiceMgr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// SCM 句柄</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>    <span class=\"token comment\">//-------------------------------------------------------------------------------------------------------</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>    <span class=\"token comment\">// SYSTEM\\\\CurrentControlSet\\\\Services\\\\DriverName\\\\Instances 子健下的键值项 </span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>    <span class=\"token comment\">//-------------------------------------------------------------------------------------------------------</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>    <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>szTempStr<span class=\"token punctuation\">,</span><span class=\"token string\">\"SYSTEM\\\\CurrentControlSet\\\\Services\\\\\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>    <span class=\"token function\">strcat</span><span class=\"token punctuation\">(</span>szTempStr<span class=\"token punctuation\">,</span>lpszDriverName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>    <span class=\"token function\">strcat</span><span class=\"token punctuation\">(</span>szTempStr<span class=\"token punctuation\">,</span><span class=\"token string\">\"\\\\Instances\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">RegCreateKeyEx</span><span class=\"token punctuation\">(</span>HKEY_LOCAL_MACHINE<span class=\"token punctuation\">,</span>szTempStr<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>REG_OPTION_NON_VOLATILE<span class=\"token punctuation\">,</span>KEY_ALL_ACCESS<span class=\"token punctuation\">,</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>hKey<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span>LPDWORD<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>dwData<span class=\"token punctuation\">)</span><span class=\"token operator\">!=</span>ERROR_SUCCESS<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>        <span class=\"token keyword\">return</span> FALSE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>    <span class=\"token comment\">// 注册表驱动程序的 DefaultInstance 值 </span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>    <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>szTempStr<span class=\"token punctuation\">,</span>lpszDriverName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>    <span class=\"token function\">strcat</span><span class=\"token punctuation\">(</span>szTempStr<span class=\"token punctuation\">,</span><span class=\"token string\">\" Instance\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">RegSetValueEx</span><span class=\"token punctuation\">(</span>hKey<span class=\"token punctuation\">,</span><span class=\"token string\">\"DefaultInstance\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>REG_SZ<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span>CONST BYTE<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>szTempStr<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span><span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>szTempStr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!=</span>ERROR_SUCCESS<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>        <span class=\"token keyword\">return</span> FALSE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>    <span class=\"token function\">RegFlushKey</span><span class=\"token punctuation\">(</span>hKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 刷新注册表</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>    <span class=\"token function\">RegCloseKey</span><span class=\"token punctuation\">(</span>hKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre> </pre></td></tr><tr><td data-num=\"107\"></td><td><pre></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>    <span class=\"token comment\">//-------------------------------------------------------------------------------------------------------</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>    <span class=\"token comment\">// SYSTEM\\\\CurrentControlSet\\\\Services\\\\DriverName\\\\Instances\\\\DriverName Instance 子健下的键值项 </span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>    <span class=\"token comment\">//-------------------------------------------------------------------------------------------------------</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>    <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>szTempStr<span class=\"token punctuation\">,</span><span class=\"token string\">\"SYSTEM\\\\CurrentControlSet\\\\Services\\\\\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>    <span class=\"token function\">strcat</span><span class=\"token punctuation\">(</span>szTempStr<span class=\"token punctuation\">,</span>lpszDriverName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>    <span class=\"token function\">strcat</span><span class=\"token punctuation\">(</span>szTempStr<span class=\"token punctuation\">,</span><span class=\"token string\">\"\\\\Instances\\\\\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>    <span class=\"token function\">strcat</span><span class=\"token punctuation\">(</span>szTempStr<span class=\"token punctuation\">,</span>lpszDriverName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>    <span class=\"token function\">strcat</span><span class=\"token punctuation\">(</span>szTempStr<span class=\"token punctuation\">,</span><span class=\"token string\">\" Instance\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">RegCreateKeyEx</span><span class=\"token punctuation\">(</span>HKEY_LOCAL_MACHINE<span class=\"token punctuation\">,</span>szTempStr<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>REG_OPTION_NON_VOLATILE<span class=\"token punctuation\">,</span>KEY_ALL_ACCESS<span class=\"token punctuation\">,</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>hKey<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span>LPDWORD<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>dwData<span class=\"token punctuation\">)</span><span class=\"token operator\">!=</span>ERROR_SUCCESS<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>        <span class=\"token keyword\">return</span> FALSE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>    <span class=\"token comment\">// 注册表驱动程序的 Altitude 值</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>    <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>szTempStr<span class=\"token punctuation\">,</span>lpszAltitude<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">RegSetValueEx</span><span class=\"token punctuation\">(</span>hKey<span class=\"token punctuation\">,</span><span class=\"token string\">\"Altitude\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>REG_SZ<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span>CONST BYTE<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>szTempStr<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span><span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>szTempStr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!=</span>ERROR_SUCCESS<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>        <span class=\"token keyword\">return</span> FALSE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>    <span class=\"token comment\">// 注册表驱动程序的 Flags 值</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>    dwData<span class=\"token operator\">=</span><span class=\"token number\">0x0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">RegSetValueEx</span><span class=\"token punctuation\">(</span>hKey<span class=\"token punctuation\">,</span><span class=\"token string\">\"Flags\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>REG_DWORD<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span>CONST BYTE<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>dwData<span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!=</span>ERROR_SUCCESS<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>        <span class=\"token keyword\">return</span> FALSE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>    <span class=\"token function\">RegFlushKey</span><span class=\"token punctuation\">(</span>hKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 刷新注册表</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>    <span class=\"token function\">RegCloseKey</span><span class=\"token punctuation\">(</span>hKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>    <span class=\"token keyword\">return</span> TRUE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>BOOL <span class=\"token function\">StartDriver</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> lpszDriverName<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>    SC_HANDLE        schManager<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>    SC_HANDLE        schService<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token operator\">==</span>lpszDriverName<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>        <span class=\"token keyword\">return</span> FALSE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>    schManager<span class=\"token operator\">=</span><span class=\"token function\">OpenSCManager</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span>SC_MANAGER_ALL_ACCESS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token operator\">==</span>schManager<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"151\"></td><td><pre>        <span class=\"token function\">CloseServiceHandle</span><span class=\"token punctuation\">(</span>schManager<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre>        <span class=\"token keyword\">return</span> FALSE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"153\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"154\"></td><td><pre>    schService<span class=\"token operator\">=</span><span class=\"token function\">OpenService</span><span class=\"token punctuation\">(</span>schManager<span class=\"token punctuation\">,</span>lpszDriverName<span class=\"token punctuation\">,</span>SERVICE_ALL_ACCESS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"155\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token operator\">==</span>schService<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"156\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"157\"></td><td><pre>        <span class=\"token function\">CloseServiceHandle</span><span class=\"token punctuation\">(</span>schService<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"158\"></td><td><pre>        <span class=\"token function\">CloseServiceHandle</span><span class=\"token punctuation\">(</span>schManager<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"159\"></td><td><pre>        <span class=\"token keyword\">return</span> FALSE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"160\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"161\"></td><td><pre></pre></td></tr><tr><td data-num=\"162\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">StartService</span><span class=\"token punctuation\">(</span>schService<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"163\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"164\"></td><td><pre>        <span class=\"token function\">CloseServiceHandle</span><span class=\"token punctuation\">(</span>schService<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"165\"></td><td><pre>        <span class=\"token function\">CloseServiceHandle</span><span class=\"token punctuation\">(</span>schManager<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"166\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> <span class=\"token function\">GetLastError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> ERROR_SERVICE_ALREADY_RUNNING <span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"167\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span>   </pre></td></tr><tr><td data-num=\"168\"></td><td><pre>            <span class=\"token comment\">// 服务已经开启</span></pre></td></tr><tr><td data-num=\"169\"></td><td><pre>            <span class=\"token keyword\">return</span> TRUE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"170\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"171\"></td><td><pre>        <span class=\"token keyword\">return</span> FALSE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"172\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"173\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"174\"></td><td><pre>    <span class=\"token function\">CloseServiceHandle</span><span class=\"token punctuation\">(</span>schService<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"175\"></td><td><pre>    <span class=\"token function\">CloseServiceHandle</span><span class=\"token punctuation\">(</span>schManager<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"176\"></td><td><pre></pre></td></tr><tr><td data-num=\"177\"></td><td><pre>    <span class=\"token keyword\">return</span> TRUE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"178\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"179\"></td><td><pre></pre></td></tr><tr><td data-num=\"180\"></td><td><pre>BOOL <span class=\"token function\">StopDriver</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> lpszDriverName<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"181\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"182\"></td><td><pre>    SC_HANDLE        schManager<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"183\"></td><td><pre>    SC_HANDLE        schService<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"184\"></td><td><pre>    SERVICE_STATUS    svcStatus<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"185\"></td><td><pre>    <span class=\"token keyword\">bool</span>            bStopped<span class=\"token operator\">=</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"186\"></td><td><pre></pre></td></tr><tr><td data-num=\"187\"></td><td><pre>    schManager<span class=\"token operator\">=</span><span class=\"token function\">OpenSCManager</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span>SC_MANAGER_ALL_ACCESS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"188\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token operator\">==</span>schManager<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"189\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"190\"></td><td><pre>        <span class=\"token keyword\">return</span> FALSE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"191\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"192\"></td><td><pre>    schService<span class=\"token operator\">=</span><span class=\"token function\">OpenService</span><span class=\"token punctuation\">(</span>schManager<span class=\"token punctuation\">,</span>lpszDriverName<span class=\"token punctuation\">,</span>SERVICE_ALL_ACCESS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"193\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token operator\">==</span>schService<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"194\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"195\"></td><td><pre>        <span class=\"token function\">CloseServiceHandle</span><span class=\"token punctuation\">(</span>schManager<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"196\"></td><td><pre>        <span class=\"token keyword\">return</span> FALSE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"197\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"198\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">ControlService</span><span class=\"token punctuation\">(</span>schService<span class=\"token punctuation\">,</span>SERVICE_CONTROL_STOP<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>svcStatus<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>svcStatus<span class=\"token punctuation\">.</span>dwCurrentState<span class=\"token operator\">!=</span>SERVICE_STOPPED<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"199\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"200\"></td><td><pre>        <span class=\"token function\">CloseServiceHandle</span><span class=\"token punctuation\">(</span>schService<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"201\"></td><td><pre>        <span class=\"token function\">CloseServiceHandle</span><span class=\"token punctuation\">(</span>schManager<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"202\"></td><td><pre>        <span class=\"token keyword\">return</span> FALSE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"203\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"204\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"205\"></td><td><pre>    <span class=\"token function\">CloseServiceHandle</span><span class=\"token punctuation\">(</span>schService<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"206\"></td><td><pre>    <span class=\"token function\">CloseServiceHandle</span><span class=\"token punctuation\">(</span>schManager<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"207\"></td><td><pre></pre></td></tr><tr><td data-num=\"208\"></td><td><pre>    <span class=\"token keyword\">return</span> TRUE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"209\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"210\"></td><td><pre></pre></td></tr><tr><td data-num=\"211\"></td><td><pre>BOOL <span class=\"token function\">DeleteDriver</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> lpszDriverName<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"212\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"213\"></td><td><pre>    SC_HANDLE        schManager<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"214\"></td><td><pre>    SC_HANDLE        schService<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"215\"></td><td><pre>    SERVICE_STATUS    svcStatus<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"216\"></td><td><pre></pre></td></tr><tr><td data-num=\"217\"></td><td><pre>    schManager<span class=\"token operator\">=</span><span class=\"token function\">OpenSCManager</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span>SC_MANAGER_ALL_ACCESS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"218\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token operator\">==</span>schManager<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"219\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"220\"></td><td><pre>        <span class=\"token keyword\">return</span> FALSE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"221\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"222\"></td><td><pre>    schService<span class=\"token operator\">=</span><span class=\"token function\">OpenService</span><span class=\"token punctuation\">(</span>schManager<span class=\"token punctuation\">,</span>lpszDriverName<span class=\"token punctuation\">,</span>SERVICE_ALL_ACCESS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"223\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token operator\">==</span>schService<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"224\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"225\"></td><td><pre>        <span class=\"token function\">CloseServiceHandle</span><span class=\"token punctuation\">(</span>schManager<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"226\"></td><td><pre>        <span class=\"token keyword\">return</span> FALSE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"227\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"228\"></td><td><pre>    <span class=\"token function\">ControlService</span><span class=\"token punctuation\">(</span>schService<span class=\"token punctuation\">,</span>SERVICE_CONTROL_STOP<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>svcStatus<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"229\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">DeleteService</span><span class=\"token punctuation\">(</span>schService<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"230\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"231\"></td><td><pre>        <span class=\"token function\">CloseServiceHandle</span><span class=\"token punctuation\">(</span>schService<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"232\"></td><td><pre>        <span class=\"token function\">CloseServiceHandle</span><span class=\"token punctuation\">(</span>schManager<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"233\"></td><td><pre>        <span class=\"token keyword\">return</span> FALSE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"234\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"235\"></td><td><pre>    <span class=\"token function\">CloseServiceHandle</span><span class=\"token punctuation\">(</span>schService<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"236\"></td><td><pre>    <span class=\"token function\">CloseServiceHandle</span><span class=\"token punctuation\">(</span>schManager<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"237\"></td><td><pre></pre></td></tr><tr><td data-num=\"238\"></td><td><pre>    <span class=\"token keyword\">return</span> TRUE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"239\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"240\"></td><td><pre></pre></td></tr><tr><td data-num=\"241\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"242\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"243\"></td><td><pre> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Print any key to install driver\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"244\"></td><td><pre> <span class=\"token function\">getch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"245\"></td><td><pre> <span class=\"token function\">DeleteDriver</span><span class=\"token punctuation\">(</span>DRIVER_NAME<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"246\"></td><td><pre> <span class=\"token comment\">// 安装驱动调用这个函数</span></pre></td></tr><tr><td data-num=\"247\"></td><td><pre> BOOL bRet <span class=\"token operator\">=</span> <span class=\"token function\">InstallDriver</span><span class=\"token punctuation\">(</span>DRIVER_NAME<span class=\"token punctuation\">,</span> DRIVER_PATH<span class=\"token punctuation\">,</span> DRIVER_ALTITUDE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"248\"></td><td><pre> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bRet <span class=\"token operator\">==</span> FALSE<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"249\"></td><td><pre> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"250\"></td><td><pre>  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Driver install failed\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"251\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"252\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"253\"></td><td><pre> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Print any key to start driver\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"254\"></td><td><pre> <span class=\"token function\">getch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"255\"></td><td><pre> <span class=\"token comment\">// 启动驱动调用这个函数</span></pre></td></tr><tr><td data-num=\"256\"></td><td><pre> bRet <span class=\"token operator\">=</span> <span class=\"token function\">StartDriver</span><span class=\"token punctuation\">(</span>DRIVER_NAME<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"257\"></td><td><pre> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bRet <span class=\"token operator\">==</span> FALSE<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"258\"></td><td><pre> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"259\"></td><td><pre>  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"StartDriver failed\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"260\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"261\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"262\"></td><td><pre> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Print any key to stop driver\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"263\"></td><td><pre> <span class=\"token function\">getch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"264\"></td><td><pre> <span class=\"token comment\">// 停止驱动调用这个</span></pre></td></tr><tr><td data-num=\"265\"></td><td><pre> <span class=\"token function\">StopDriver</span><span class=\"token punctuation\">(</span>DRIVER_NAME<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"266\"></td><td><pre> <span class=\"token comment\">// 删除服务调用这个</span></pre></td></tr><tr><td data-num=\"267\"></td><td><pre> <span class=\"token function\">DeleteDriver</span><span class=\"token punctuation\">(</span>DRIVER_NAME<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"268\"></td><td><pre></pre></td></tr><tr><td data-num=\"269\"></td><td><pre> </pre></td></tr><tr><td data-num=\"270\"></td><td><pre> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"271\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"image003.png\" alt=\"\" /></p>\n<h4 id=\"路径获取\"><a class=\"anchor\" href=\"#路径获取\">#</a> 路径获取</h4>\n<ul>\n<li>Minifilter 获取文件路径就是如此简单</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/// 在 postcreate 里获得</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>PFLT_FILE_NAME_INFORMATON pNameInfo <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">///Q: 没有内存的指针，为什么可以直接传给 FltGetFileNameInformation 使用呢？</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">/// A:FltGetFileNameInformation 是带缓存的，如果第一次查询文件的路径，函数会在内部为其分配内存，把文件名放到结构体的内存里面，其他驱动再次查询这个文件路径的时候，如果路径在缓存中，就直接把缓存给它，不再分配新内存。这么多人使用缓存，难以管理，做不到谁分配谁谁释放，所以这里使用了引用计数。</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>ntStatus <span class=\"token operator\">=</span> <span class=\"token function\">FltGetFileNameInformation</span><span class=\"token punctuation\">(</span>Data<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> FLT_FILE_NAME_NORMALIZED <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> FLT_FILE_NAME_QuERY_DEFAULT<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> <span class=\"token operator\">&amp;</span>pNamelnfo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/// 传二级指针或者指针的引用才能分配到内存</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">/// 解析</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token function\">F1tParseFileNamelnformation</span><span class=\"token punctuation\">(</span>pNamelnfo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>pNamelnfo<span class=\"token operator\">-></span>Name <span class=\"token comment\">//\\\\device\\\\harddiskvolume3\\\\doc\\\\x.dat</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>pNamelnfo<span class=\"token operator\">-></span>Volume</pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token function\">FltReleaseFileNameInformation</span><span class=\"token punctuation\">(</span>Namelnfo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 并不是真正释放内存，而是将缓存的引用计数减 1，当减到 0 的时候才释放内存</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">// 重命名路径的获得:</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>PFILE_RENAME_INFORMATION</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>pFileRenamelnfomation <span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>PENLE_RENAME_INFORMATION<span class=\"token punctuation\">)</span>Data<span class=\"token operator\">-></span>IopParameters<span class=\"token punctuation\">.</span>SetFilelnformationInfoBuffer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">// 或者通过这样获得重命名的路径</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>FltGetDestinationFileInation<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"基于minifilter的passthrough\"><a class=\"anchor\" href=\"#基于minifilter的passthrough\">#</a> 基于 Minifilter 的 PASSTHROUGH</h2>\n<h2 id=\"应用监控进程创建\"><a class=\"anchor\" href=\"#应用监控进程创建\">#</a> 应用：监控进程创建</h2>\n<p>思路：</p>\n<ul>\n<li>\n<p>NtCreateSection (进程创建)</p>\n<ul>\n<li>对应的 Irp 是  <code>IRP_MJ ACQUIRE FOR_SECTION_SYNCHRONIZATION</code> ，在  <code>Passthrough</code>  中为这个 Irp 注册回调函数</li>\n<li>监控  <code>Data-&gt;lopb-&gt;Parameters.AcquireForSectionSynchronization.PageProtection ==PAGE_EXECUTE</code> ，如果等于就是在创建进程， <code>return STATS_ACCESS_DENY</code></li>\n</ul>\n</li>\n<li>\n<p>优点：SSDT HOOK 只支持 x86（SSDT HOOK 改内核，会触发  <code>patchguard</code>  机制，除非使用 VT 技术欺骗操作系统），Minifilter 不会触发  <code>patchguard</code>  机制，所以  <code>x86和x64 都支持</code> 。</p>\n</li>\n</ul>\n<h2 id=\"callback-irql\"><a class=\"anchor\" href=\"#callback-irql\">#</a> CallBack IRQL</h2>\n<ul>\n<li>1.a  <code>preoperation</code>  callback routine can be called at  <code>IRQL_PASSIVE_LEVEL</code>  or at  <code>IRQL_APC_LEVELS</code>  Typically it is called at  <code>IRQL_PASSIVE_LEVEL</code></li>\n<li>2.lf a minifilter driver's  <code>preoperation</code>  callback routine returns  <code>FLT_PREOP_SYNCHRONIZE</code>  for an lRP-based l/O operation,the corresponding  <code>postoperation</code>  callback routine is called at l  <code>RQL &lt;= APC_LEVEL</code> , in the same thread context as the  <code>preoperation</code> callback routine.</li>\n<li>3.The  <code>postoperation</code>  callback routine for a  <code>fast I/O</code>  operation is called  <code>IRQL_PASSIVE_LEVEL</code> , in the same thread context as the preoperation callback routine.</li>\n<li>4. <code>Post-create</code>  callback routines are called at  <code>IRQL_PASSIVE_LEVEL</code> in the context of the thread that originated the  <code>IRP_MJ_CREATE</code>  operation.</li>\n<li>总而言之， <code>preoperation</code>  一定处于  <code>IRQL_APC_LEVELS</code>  或者  <code>IRQL_PASSIVE_LEVEL</code>  ；而  <code>postoperation</code>  根据具体情况具体分析：2-4 中情况下，处于  <code>IRQL_PASSIVE_LEVEL</code> ，其他情况就不好说了。</li>\n</ul>\n<h2 id=\"避免重入\"><a class=\"anchor\" href=\"#避免重入\">#</a> 避免重入</h2>\n<ul>\n<li>Minifilter 中不建议使用  <code>Zw*</code>  函数，而是使用  <code>Flt*</code>  函数，避免  <code>重入</code>  (死循环)</li>\n<li>eg：不能使用 zwCreateFile 等函数，可能导致重入。</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>FltCreateFile</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>FltReadFile</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>FltWriteFile</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>FltClose</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>FltQueryXxxFltSetXxXFltGetXxx</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>FltPerformXxx</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>ntStatus <span class=\"token operator\">=</span> <span class=\"token function\">FltCreateFile</span><span class=\"token punctuation\">(</span>pFilter<span class=\"token punctuation\">,</span> <span class=\"token comment\">/// 这个参数是注册 Minifilter 返回的句柄</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> pDstInstance<span class=\"token punctuation\">,</span> <span class=\"token comment\">/// 这个参数是实例的指针，从 FltObjects 中拿，这两个参数是 FltCreateFile 特有的，其他参数和 FltReadFile、FltWriteFile 等都一致</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> <span class=\"token operator\">&amp;</span>hDstFile<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> GENERIC_WRITE <span class=\"token operator\">|</span> SYNCHRONIZE<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre> <span class=\"token operator\">&amp;</span>objDstAttrib<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> <span class=\"token operator\">&amp;</span>ioStatus<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre> FILE_ATTRIBUTE_NORMAL<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre> FILE_SHARE_READ <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre> FILE_SHARE_WRITE <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre> FILE_SHARE DELETE<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre> FILECREATE<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre> CreateOptions<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"上下文\"><a class=\"anchor\" href=\"#上下文\">#</a> 上下文</h2>\n<ul>\n<li>\n<p><code>设备扩展是什么?</code></p>\n<ul>\n<li>进程的创建和监视，曾经把进程的一些信息放入设备扩展里面</li>\n<li>在 Sfilter 创建过滤设备对象的时候，设备对象存放着下层设备对象的指针 (过滤设备所在的栈，未绑定之前的栈顶上的设备对象指针)</li>\n<li>可以理解为设备扩展的 ' 上下文 '。</li>\n</ul>\n</li>\n<li>\n<p><code>context上下文</code> ：其实就是附着在某个对象上的一段内存，这段内存缓存的相关数据由自己定义；</p>\n<ul>\n<li>eg: 1. 对象：人 2. 上下文：口袋 3. 数据：手机 如果人没有口袋，在路上想付款的时候，发现没有身上手机，只能回家去取 (相当于计算机重新获取数据的过程) 如果有口袋，出门之前把手机放口袋里 (一次性把数据查询出来，缓存到上下文里面), 在路上想付款的时候，直接从口袋里里掏出手机 (想要拿数据的时候，直接从上下文中拿数据，上下文可以提高计算机获取数据的效率)</li>\n<li><code>利用缓存提高程序执行的效率</code> 是非常重要的思想，包括在系统架构里面，经常使用 Redis (NOSQL 数据库) 把平时查询的数据库缓存起来，来缓解关系数据库后台执行程序的压力.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"minifilter-上下文\"><a class=\"anchor\" href=\"#minifilter-上下文\">#</a> Minifilter 上下文</h3>\n<ul>\n<li>\n<p><code>和中断、进程上下文区别</code> :</p>\n<ul>\n<li>中断上下文：中断传过来的数据，中断前  <code>进程的上下文</code></li>\n<li>进程上下文：寄存器，栈，堆，描述进程的结构体，</li>\n</ul>\n</li>\n<li>\n<p><code>Minifilter的上下文</code> ：其实就是附着在  <code>Minifilter</code>  中对象上的一段内存，这段内存缓存的相关数据由自己定义 (其实是 Mifnifilter 运行期间的所在环境中的信息)</p>\n<ul>\n<li><code>Minifilter</code>  中常见的对象 FileObject,Instance 等，可以给这些对象分配一块内存，存放自定义的数据</li>\n<li><code>分配上下文</code></li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>FltAllocateContext <span class=\"token comment\">// 分配上下文，可以指定上下文的类型，比如 Stream Context,Stream Handle Context,Instance Contxt 等等</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>FltReleaseContext <span class=\"token comment\">// 释放上下文，其实就是把引用计数减 1, 直到引用计数变为 0 之后才释放</span></pre></td></tr></table></figure><ul>\n<li>\n<p><code>Minifilter上下文的应用</code> ：写关闭</p>\n<ul>\n<li><code>写关闭</code> ：以写的方式打开，得到文件的句柄，往这个文件写入数据，最后把文件关闭掉</li>\n<li>(调用 CteateFile ()-&gt;ReadFile ()-&gt;CloseFile ())</li>\n<li>主防或者反病毒一般不关注读关闭 (读关闭不会造成系统破坏，最多会造成隐私泄漏)</li>\n<li>读 / 写关闭在应用层都是调用  <code>CloseHandle(FileHandle)</code> , 所以单从 FileHanle 这个参数是无法知道是读关闭还是写关闭 (在 XP 系统，IRP_MJ_Clean 这个 IRP 里面  <code>information等于2</code> , 就表示是写关闭，否则就是都关闭；但在 vista 中这个条件就不成立了)</li>\n<li>所以在 Sfilter 里面是根据文件最后修改时间，如果是  <code>1min之内</code> ，则认为是写关闭。</li>\n<li><code>Minifilter则可以使用上下文来记录标记</code> ，比如打开文件文件的时候是可以知道  <code>R/W的</code>  (必须传一个读写的标志)，然后把这个标记信息记录在文件 (FileObject) 的  <code>上下文</code> 里面，Clean 的时候 (调用 CloseHandle (FileHandle) 的时候)，通过 FilerHander 找到对应的 FileObject 的上下文找到打开时记录的  <code>R/W</code>  的标志，如果是写的话，即写关闭就处理它 (扫描一遍该文件，和病毒库的特征码匹配一遍，防止生成病毒)。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"minifilter-上下文的分类\"><a class=\"anchor\" href=\"#minifilter-上下文的分类\">#</a> Minifilter 上下文的分类</h3>\n<ul>\n<li>\n<p>分类依据是什么？</p>\n<ul>\n<li>Minifilter 有很多种对象， <code>根据对象不同</code> 分为不同的类。</li>\n<li>一个文件从磁盘打开加载到内存之后，会产生以下这些</li>\n</ul>\n</li>\n<li>\n<p><code>Stream Context</code>  (流上下文), 绑定到 FCB (File control Block，文件控制块) 的上下文， 文件和 FCB 是一对一的关系。</p>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>FltGetStreamContext <span class=\"token comment\">// 获取对象上的上下文</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>FltSetStreamContext <span class=\"token comment\">// 将缓存重新设置到对象上，比如修改了上下文的数据，使用这个函数把上下文更新到对象上</span></pre></td></tr></table></figure><ul>\n<li><code>Stream Handle Context</code>  (流句柄上下文), 就是常见 FO (FileObjec), 文件和 FileObjec 是多对一的关系。\n<ul>\n<li>写关闭</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>FltGetStreamHandleContext</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>FltSetStreamHandleContext</pre></td></tr></table></figure><ul>\n<li><code>Instance Context</code>  (实例上下文), 也就是过滤驱动在文件系统的设备堆栈上创建的一个过滤器实例；</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>FltGetlnstanceContext <span class=\"token comment\">// 获取对象上的上下文</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>FltSetInstanceC ontext <span class=\"token comment\">// 将缓存重新设置到对象上，比如修改了上下文的数据，使用这个函数把上下文更新到对象上</span></pre></td></tr></table></figure><ul>\n<li><code>volume context</code>  (卷上下文), 卷就是通常看到的 C,D 盘以及网络重定向器，一般情况下一个券对一个对滤器实例对象， <code>在实际应用上经常用Instance Context来代替volume Context。</code> (在启动 Minifilter 的时候有多少卷设备对象就生成多少个 Minigilter 实例，安装到卷设备上，安装的那一刻可以把卷设备的信息查询出来 (卷的名字，卷的文件系统信息，文件系统类型，卷的扇区大小等)) 放到 Instance  Context，以后要想知道卷的信息，直接从 Instance  Context 获取即可。</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>FltGetVolumeContext</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>FltSetvolumeContext</pre></td></tr></table></figure><ul>\n<li><code>文件上下文</code>  (vista 之后)</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>FltGetFileContext</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>FltSetFileContext</pre></td></tr></table></figure><ul>\n<li>其中，  <code>Stream Handle Context</code>  和  <code>Instance Context</code>  使用频率最高</li>\n<li>注册 Minifilter 的时候除了一组用来拦截 Irp 的  <code>fileMonitorCallbacks</code>  数组，还有  <code>一组用来清理Context的回调函数数组</code></li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>PFLT_FILTER g_pFilter <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> FLT_CONTEXT_REGISTRATION ContextRegistration<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token comment\">/// 在释放 context 之前调用，可以在此释放 context 里的内存等</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  FLT_INSTANCE_CONTEXT<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  CtxContextCleanup<span class=\"token punctuation\">,</span> <span class=\"token comment\">/// 每种类型的 Context 都共用同一个 CtxContextCleanup</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> <span class=\"token comment\">///Q：既然有 FltReleaseContext 来释放 Context 了，为什么这里还需要 CtxContextCleanup？</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> <span class=\"token comment\">///A：是为了针对 Minifilter 的 Context 中保存了一些其他资源或者指向其他内存的情况，可以用 CtxContextCleanup 释放掉，比如 Minifilter 的 Context 中存放了文件的句柄、锁、指针，得先用 CtxContextCleanup 释放掉，才可以用 FltReleaseContext 来释放 Context（类似 C++ 中的 delete，释放内存之前调用析构函数把内存中的其他资源释放掉，再释放要内存）</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  CTX_INSTANCE_CONTEXT_SIZE<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  CTX_INSTANCE_CONTEXT_TAG</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  FLT_FILE_CONTEXT<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  CtxContextCleanup<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  CTX_FILE_CONTEXT_SIZE<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  CTX_FILE_CONTEXT_TAG</pre></td></tr><tr><td data-num=\"19\"></td><td><pre> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  FLT_STREAM_CONTEXT<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  CtxContextCleanup<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  CTX_STREAM_CONTEXT_SIZE<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  CTX_STREAM_CONTEXT_TAG</pre></td></tr><tr><td data-num=\"26\"></td><td><pre> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  FLT_STREAMHANDLE_CONTEXT<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  CtxContextCleanup<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  CTX_STREAMHANDLE_CONTEXT_SIZE<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  CTX_STREAMHANDLEICONTEXT_TAG</pre></td></tr><tr><td data-num=\"33\"></td><td><pre> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>  FLT_CONTEXT_END</pre></td></tr><tr><td data-num=\"36\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"context-使用例子\"><a class=\"anchor\" href=\"#context-使用例子\">#</a> Context 使用例子</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/// @Warring 多线环境下记得加锁</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_INSTANCE_CONTEXT</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token comment\">/// 自定义的数据</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span>INSTANCE_CONTEXT，<span class=\"token operator\">*</span>PINSTANCECCONTEXT<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>PINSTANCE_CONTEXT pContext <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">/// 分配与设置 </span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>ntStatus <span class=\"token operator\">=</span> <span class=\"token function\">FltGetInstanceContext</span><span class=\"token punctuation\">(</span>FltObjects<span class=\"token operator\">-></span>Instance<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>pContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/// 拿到上下文</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">NT_SUCCESS</span><span class=\"token punctuation\">(</span>ntStatus<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> FALSE<span class=\"token punctuation\">)</span> <span class=\"token comment\">/// 失败说明还没有为其指定上下文</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre> <span class=\"token comment\">/// 分配上下文，指定上下文的类型</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre> ntStatus <span class=\"token operator\">=</span> <span class=\"token function\">FltAllocateContexti</span><span class=\"token punctuation\">(</span>g_pFilter<span class=\"token punctuation\">,</span> <span class=\"token comment\">///Minifilter 的句柄</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  FLT_INSTANCE_CONTEXT<span class=\"token punctuation\">,</span> <span class=\"token comment\">///Context 类型</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>INSTANCE_CONTEXT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">///Context 大小</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  PagedPool<span class=\"token punctuation\">,</span> <span class=\"token comment\">/// 从 PagedPool 中分配</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token operator\">&amp;</span>pContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">/// 分配的内存的首地址放在这个指针上</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">NT_SUCCESS</span><span class=\"token punctuation\">(</span>Status<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> FALSE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token keyword\">return</span> ntStatus<span class=\"token punctuation\">;</span> <span class=\"token comment\">/// 如果分配失败，该函数直接 return 了</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre> <span class=\"token function\">RtZeroMemory</span><span class=\"token punctuation\">(</span>pContext<span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>INSTANCE_CONTEXT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/// 初始化为 0</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\">/// 结构体里面定义了设备类型和结构体类型</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>pContext<span class=\"token operator\">-></span>m_DeviceType <span class=\"token operator\">=</span> VolumeDeviceType<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>pContext<span class=\"token operator\">-></span>m_FSType <span class=\"token operator\">=</span> volumeFilesystemType<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token function\">FltSetInstanceContext</span><span class=\"token punctuation\">(</span>FltQbjects<span class=\"token operator\">-></span>Instance<span class=\"token punctuation\">,</span>FLT_SET_CONTEXT_TREPLACE_IF_EXISTS<span class=\"token punctuation\">,</span>pContext<span class=\"token punctuation\">,</span>NLLL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/// 把刚分配的上下文绑定到 instance 上去，引用计数 + 1</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pContext<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 如果分配成功，需要对引用计数进行减 1，因为实际上没有新的 Context 产生，为保持引用计数的数量，一加就需要一减</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre> <span class=\"token function\">FltReleaseContext</span><span class=\"token punctuation\">(</span>pContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/// 引用计数 - 1</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token comment\">/// 获取访问</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>PINSTANCE_CONTEXT pContext <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>Status <span class=\"token operator\">=</span> FltGetInstanceContext<span class=\"token punctuation\">&#123;</span>EItObjects<span class=\"token operator\">-></span>Instance<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>pContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/// 引用计数 + 1</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>pContext<span class=\"token operator\">-></span>xxx<span class=\"token operator\">-></span>xxx<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>FltReleaseConte <span class=\"token comment\">// -1</span></pre></td></tr></table></figure><h3 id=\"上下文的应用详解\"><a class=\"anchor\" href=\"#上下文的应用详解\">#</a> 上下文的应用详解</h3>\n<p>在初次接触上下文的时候，不知道在实际场景中需要使用哪种上下文，参阅了其他人的代码后，发现开源的代码中大部分应用场景都使用的流上下文类型。</p>\n<p>甚至也不知道是否需要使用上下文，以及使用上下文能够给自己的程序带来哪些好处。</p>\n<p>不管最终想要通过上下文实现的功能如何，比如不管你是否想要通过判断上下文知道文件是否是特定类型的还是加密的，<strong>在用到上下文的时候多是要解决不想反复判断，想为某个或某类特定文件的文件信息获取一次之后在特定应用场景下就不需要再次获取，从而提升驱动程序效率的办法</strong>。</p>\n<p>鉴于此，上下文主要解决了在程序生命周期中<strong>部分关键信息不想多次获取</strong>或<strong>需要在多个操作中传递信息</strong>的问题。</p>\n<p>前者可以通过多次获取关键信息而不用上下文就可以解决问题，后者有时候不得不使用上下文来传递信息，前者使用上下文的情况，主要应对关键信息获取比较繁琐，使用上下文来减少在不同操作中相同逻辑处理的次数。</p>\n<p>了解了上下文的一些基础场景后，接下来就是看选用哪种类型的上下文了，<strong>最终目标就是创建了上下文能不能在下次操作文件的时候操作上下文，获取上下文的信息，上下文的信息何时销毁</strong>。</p>\n<p>具体实验参见：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ZpbmRfdGhlX2ZlcnJ5L2FydGljbGUvZGV0YWlscy8xMjEzNjA4MTI=\">https://blog.csdn.net/find_the_ferry/article/details/121360812</span></p>\n<p>作者已经写得很清楚了。我这里就直接写结论了。</p>\n<p><code>FLT_STREAM_CONTEXT</code>   <code>FLT_FILE_CONTEXT</code>  都可以跟随驱动或者文件的生命周期内存在，  <code>StreamHanleContext</code>  只有在文件的打开过程中有效，msdn 上有信息表明 FLT_FILE_CONTEXT 在 vista 之后支持。如果要记录文件的一些特殊信息可以在 <code>FLT_STREAM_CONTEXT</code>  上进行，当然也需要在关注的文件信息发生变动时更新上下文信息。</p>\n<h2 id=\"r0-r3通信新途径\"><a class=\"anchor\" href=\"#r0-r3通信新途径\">#</a> R0-R3 通信新途径</h2>\n<ul>\n<li>\n<p>Minifilter 框架提供了  <code>两套API</code> ，一套是在 R3 中调用的，另一套是在 R0 中调用的</p>\n<ul>\n<li>R3：Filterxxx</li>\n<li>R0：Fltxxx</li>\n</ul>\n</li>\n<li>\n<p>这些 API 不只局限于在 Minifilter 中使用，只要当前建立的工程是基于 Minifilter 框架的驱动，如果在 Minifilter 使用了 HOOK 等其他机制，都可以用这套 API 进行通信。</p>\n</li>\n</ul>\n<h3 id=\"r3主动-r0\"><a class=\"anchor\" href=\"#r3主动-r0\">#</a> R3 (主动)-&gt;R0</h3>\n<ul>\n<li>\n<p>在 NT 驱动中：R3 通过  <code>DeviceIoControl</code>  发数据给 R0,R0 通过  <code>DispatchIoctr</code>  来处理 R3 的下发的数据</p>\n</li>\n<li>\n<p>在 Minifilter 中：R3 是通过  <code>FilterSendMessage</code>  发数据给 R0，R0 通过  <code>fnMessageFromClient</code>  处理从 R3 FilterSendMessage 的请求</p>\n<ul>\n<li>没有控制码了怎么办，自己加个控制码，实际上是简化了控制码，想怎么定义就怎么定义，反而更方便了</li>\n</ul>\n</li>\n<li>\n<p><code>R3主动给R0发数据的情景</code> ：</p>\n<ul>\n<li>下规则</li>\n<li>R3 告诉 R0 监控什么位置</li>\n<li>杀一个进程，删一个文件，枚举隐藏的进程，枚举 hook 的函数</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/// R0 创建端口，</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">/// @note 可以指定安全属性，比如可以指定为只允许管理员连接</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> PWSTR ScannerPortName <span class=\"token operator\">=</span> L<span class=\"token string\">\"\\\\ScannerPort\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">//    status = FltBuildDefaultSecurityDescriptor (&amp;sd, FLT_PORT_ALL_ACCESS); /// 创建安全描述符，指定为只允许管理员连接</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">FltCreateCommunicationPort</span><span class=\"token punctuation\">(</span>g_pEilter<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token operator\">&amp;</span>g_pSeryerPort<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> <span class=\"token operator\">&amp;</span>oa<span class=\"token punctuation\">,</span> <span class=\"token comment\">/// 设置 PORT 的名字</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> <span class=\"token comment\">/// 获得 R3 端口 g_pClientPort 等</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> fnConnectFromCRlient<span class=\"token punctuation\">,</span> <span class=\"token comment\">/// 有客户端连接 R0 端口的时候被调用</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> <span class=\"token comment\">// 作用 1：这个函数执行的时候处在应用层当前进程的上下文中，可以记录下进程的信息，比如 pid 和 Exprocess 结构，以后发现由这个客户端发下来的请求，就可以把他放行了</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre> <span class=\"token comment\">// 作用 2：拿到 R3 的端口</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> fnDisconnectFromclient<span class=\"token punctuation\">,</span> <span class=\"token comment\">/// 当客户端断开连接的时候被调用</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre> fnMessageFromClient<span class=\"token punctuation\">,</span> <span class=\"token comment\">/// 处理从 R3 FilterSendMessage 的请求，名字和随便起，只要保证接口一致，注册时一一对应即可</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">/// R3 连接 R0，即 R3 拿到 R0 的端口</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>FilterConnectCommunicationPort </pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">/// R3 主动发请求给 RO</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token function\">FilterSendMessage</span><span class=\"token punctuation\">(</span>Port<span class=\"token punctuation\">,</span> <span class=\"token comment\">/// 拿到的 R0 端口</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      <span class=\"token operator\">&amp;</span>request<span class=\"token punctuation\">,</span> <span class=\"token comment\">///R3 给 R0 发数据的缓存，自定义控制码放在这里</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>REQUEST<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 缓存的大小</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      <span class=\"token operator\">&amp;</span>reply<span class=\"token punctuation\">,</span> <span class=\"token comment\">///R0 处理完数据返回给 R3 的结果</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>REPLY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>      <span class=\"token operator\">&amp;</span>dwRtn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/// 实际上传输的字节数，对应 IRP 中的 IOSTATUS.Information</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token comment\">/// R0 处理从 R3 FilterSendMessage 的请求</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>NTSTATUS <span class=\"token function\">fnMessageFromClient</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre> IN PVOID PortCookie<span class=\"token punctuation\">,</span> <span class=\"token comment\">///Port 相关的私有数据</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre> IN PVOID InputBuffer OPTIONAL<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre> IN ULONG InputBufferLength<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre> OUT PVOLD OutputBuffer OPTIONAL<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre> IN PULONG OutputBufferLength<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre> OUT PULONG ReturnOutputEufferLength <span class=\"token comment\">/// 实际传输的长度</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre> <span class=\"token comment\">/// 这里通信方式使用的是 neither io 需要 ProbeForRead 和 ProbeForWite</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre> <span class=\"token comment\">/// 1. 保证内存对齐，2. 保证地址合法 (保证时用户态的地址，应用层程序没有权限访问内核态的地址)，避免提权</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre> __try</pre></td></tr><tr><td data-num=\"41\"></td><td><pre> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>  <span class=\"token function\">ProbeForRead</span><span class=\"token punctuation\">(</span>InputBuffer<span class=\"token punctuation\">,</span>InputBufferLength<span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>ULONG<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>  <span class=\"token comment\">//GET InputBuffer</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>  <span class=\"token comment\">//Do something:</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>  <span class=\"token function\">ProbeForWite</span><span class=\"token punctuation\">(</span>OutputBuffer<span class=\"token punctuation\">,</span>OutputBufferLength<span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>ULONG<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>  <span class=\"token comment\">//Copy Result to Outputbuffer</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre> <span class=\"token function\">__except</span><span class=\"token punctuation\">(</span>EXCEPTION_EXECUTE_HANDLER<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>  <span class=\"token keyword\">return</span> STATUS_NOT_IMPLEMENTED<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre> </pre></td></tr><tr><td data-num=\"53\"></td><td><pre> <span class=\"token keyword\">return</span> STATUS_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"r0主动-r3-r0弹窗模型\"><a class=\"anchor\" href=\"#r0主动-r3-r0弹窗模型\">#</a> R0 (主动)-&gt;R3-R0 (弹窗模型)</h3>\n<ul>\n<li>R0 监控到数据，R0 通过  <code>FltSendMessage</code>  发数据给 R3 (FltSendMessage 可以设置  <code>超时等待</code> ，比如内核层等待弹窗返回结果 40s 或者无限等待)，R3 开启多个线程 (每个线程都可用来接受 R0 发送的数据)，通过  <code>FilterGetMessage</code>  来处理从 R0 的请求 ( <code>异步读</code> ，不管拿没拿到数据都会返回), 拿到数据处理完之后通过  <code>FilterReplyMessage</code>  返回给 R0</li>\n<li>R0-&gt;R3</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/// 发送消息给 R3</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>timeout<span class=\"token punctuation\">.</span>QuadPart <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>LONGLONG<span class=\"token punctuation\">)</span><span class=\"token number\">40</span><span class=\"token operator\">*</span> <span class=\"token operator\">-</span><span class=\"token number\">10000000</span>i64<span class=\"token punctuation\">;</span> <span class=\"token comment\">///40 seconds，设为 0 不等待，设置为 null 无限等待</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Status <span class=\"token operator\">=</span> <span class=\"token function\">FltSendMessage</span><span class=\"token punctuation\">(</span>g_pFilter<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token operator\">&amp;</span>g_pClientPort<span class=\"token punctuation\">,</span> <span class=\"token comment\">/// 客户端的端口</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token operator\">&amp;</span>request<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>SCANNER_NOTIFICATION<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token operator\">&amp;</span>reply<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      replySize<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token operator\">&amp;</span>timeout<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">/// 关闭端口</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token function\">FItCloseCommunicationPort</span><span class=\"token punctuation\">(</span>g_pServerPort<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>R3-&gt;R0</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/// 响应 R0 的：FltSendMessage ()</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">/// 一般放在后台的工作者线程中去执行，而且可以创建多线程，在多个线程中去处理这个部分代码，提高处理的效率</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">FilterConnectCommunicationPort</span><span class=\"token punctuation\">(</span>ScannerPortName<span class=\"token punctuation\">,</span> <span class=\"token comment\">/// 与 R0 端口名字一致</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>          <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>          <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>          <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>          <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>          <span class=\"token operator\">&amp;</span>Port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">///RO 端口</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">/// 处理从 R0 来的请求，即 R0 调用 FltSendMessage 的请求</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>completion <span class=\"token operator\">=</span> <span class=\"token function\">CreateloCompletionPort</span><span class=\"token punctuation\">(</span>port<span class=\"token punctuation\">,</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/// 创建一个完成端口</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token function\">FilterGetMessage</span><span class=\"token punctuation\">(</span>Port<span class=\"token punctuation\">,</span> <span class=\"token comment\">/// 异步读，拿没拿到数据都不等待，直接返回</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>     <span class=\"token operator\">&amp;</span>message<span class=\"token operator\">-></span>MessagelHleader<span class=\"token punctuation\">,</span> <span class=\"token comment\">/// 数据放在这里</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>     <span class=\"token function\">FIELD_OFFSET</span><span class=\"token punctuation\">(</span>SANDBOX_MESSAGE<span class=\"token punctuation\">,</span>Ovlp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>     <span class=\"token operator\">&amp;</span>message<span class=\"token operator\">-></span>Ovlp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   <span class=\"token function\">GetQueuedCompletionStatus</span><span class=\"token punctuation\">(</span>completion<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>outSize<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>key<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>pOvlp<span class=\"token punctuation\">,</span>INFINITE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/// 在完成端口这里阻塞，一旦 R0 调用 FltSendMessage ()，completion 完成端口有了数据之后，这个函数就会返回</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token comment\">/// 处理数据</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre> </pre></td></tr><tr><td data-num=\"21\"></td><td><pre> <span class=\"token comment\">/// R3 处理结果返回给内核层</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre> <span class=\"token function\">FilterReplyMessage</span><span class=\"token punctuation\">(</span>Port<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">(</span>PEILTER_REPLY_HEADER<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token operator\">&amp;</span>replyMessage<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>replyMessage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre> <span class=\"token comment\">/// 异步读，继续下一个循环</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre> <span class=\"token function\">FilterGetMessaget</span><span class=\"token punctuation\">(</span>Port<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>       <span class=\"token operator\">&amp;</span>message<span class=\"token operator\">-></span>MessageHeader<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>       FIELD_OFFSET_SANDBOXMESSAGE<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>       Ovlp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>       <span class=\"token operator\">&amp;</span>message<span class=\"token operator\">-></span>Ovlp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"深入分析scanner\"><a class=\"anchor\" href=\"#深入分析scanner\">#</a> 深入分析 Scanner</h2>\n<h3 id=\"编译运行\"><a class=\"anchor\" href=\"#编译运行\">#</a> 编译运行</h3>\n<h3 id=\"代码分析\"><a class=\"anchor\" href=\"#代码分析\">#</a> 代码分析</h3>\n<h4 id=\"驱动层\"><a class=\"anchor\" href=\"#驱动层\">#</a> 驱动层</h4>\n<h4 id=\"应用层\"><a class=\"anchor\" href=\"#应用层\">#</a> 应用层</h4>\n<h2 id=\"基于minifilter的sandbox\"><a class=\"anchor\" href=\"#基于minifilter的sandbox\">#</a> 基于 Minifilter 的 SandBox</h2>\n<h3 id=\"重定向reparse\"><a class=\"anchor\" href=\"#重定向reparse\">#</a> 重定向 reparse</h3>\n<h3 id=\"createfile重定向\"><a class=\"anchor\" href=\"#createfile重定向\">#</a> CreateFile 重定向</h3>\n<h3 id=\"deletefile\"><a class=\"anchor\" href=\"#deletefile\">#</a> DeleteFile</h3>\n<h3 id=\"queryfile重定向\"><a class=\"anchor\" href=\"#queryfile重定向\">#</a> QueryFile 重定向</h3>\n<h3 id=\"如何判断自己被沙盒\"><a class=\"anchor\" href=\"#如何判断自己被沙盒\">#</a> 如何判断自己被沙盒</h3>\n<h1 id=\"注册表回调框架\"><a class=\"anchor\" href=\"#注册表回调框架\">#</a> 注册表回调框架</h1>\n",
            "tags": [
                "Minifilter",
                "Sfilter"
            ]
        }
    ]
}