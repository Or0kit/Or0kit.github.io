<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://Or0kit.github.io</id>
    <title>Or0kit • Posts by &#34;段寄存器结构&#34; tag</title>
    <link href="https://Or0kit.github.io" />
    <updated>2021-07-29T13:25:00.000Z</updated>
    <category term="Drozer" />
    <category term="Algolia" />
    <category term="同义词替换" />
    <category term="xpath" />
    <category term="win32api" />
    <category term="WOW64" />
    <category term="windows消息机制" />
    <category term="虚拟内存" />
    <category term="jsDelivr" />
    <category term="First blog" />
    <category term="markdown 学习" />
    <category term="Android" />
    <category term="替换密钥" />
    <category term="数论基础" />
    <category term="ADB" />
    <category term="雷电模拟器" />
    <category term="Hadoop" />
    <category term="IDA" />
    <category term="Windows逆向" />
    <category term="SSH隧道" />
    <category term="url" />
    <category term="http" />
    <category term="Nginx" />
    <category term="Linux" />
    <category term="CentOS7配置vsftp" />
    <category term="Psad" />
    <category term="fwsnort" />
    <category term="应急响应" />
    <category term="x86汇编指令" />
    <category term="逆向" />
    <category term="IDA学习" />
    <category term="恶意代码分析实战入门" />
    <category term="静态分析基础" />
    <category term="动态分析技术基础" />
    <category term="加壳" />
    <category term="脱壳" />
    <category term="C++壳" />
    <category term="ESP寻址" />
    <category term="定位Win32窗口回调函数" />
    <category term="HOOK攻防" />
    <category term="瞬时HOOK过检测" />
    <category term="INLINE-HOOK" />
    <category term="IAT HOOK" />
    <category term="INLINE HOOK" />
    <category term="进程监控" />
    <category term="模块隐藏" />
    <category term="进程通信" />
    <category term="tlhelp32.h" />
    <category term="进程遍历" />
    <category term="模块遍历" />
    <category term="TEB" />
    <category term="PEB" />
    <category term="R3层断链" />
    <category term="外挂原理" />
    <category term="DLL注入之进程间通信" />
    <category term="Win临界区" />
    <category term="Win互斥体" />
    <category term="内存映射文件" />
    <category term="内存映射共享" />
    <category term="写拷贝" />
    <category term="Win事件" />
    <category term="线程同步" />
    <category term="Win子窗口控件" />
    <category term="win32文件函数" />
    <category term="代码注入" />
    <category term="窗口程序" />
    <category term="消息机制" />
    <category term="消息类型" />
    <category term="私有内存" />
    <category term="共享内存" />
    <category term="设备对象" />
    <category term="DC设备上下文" />
    <category term="图形对象" />
    <category term="创建线程" />
    <category term="线程控制" />
    <category term="线程相关API" />
    <category term="线程上下文" />
    <category term="CONTEXT结构体" />
    <category term="物理内存" />
    <category term="Windows进程" />
    <category term="句柄表" />
    <category term="远程线程函数" />
    <category term="远程线程" />
    <category term="DLL注入" />
    <category term="DLL注入相关函数" />
    <category term="WinMain函数" />
    <category term="调用约定" />
    <category term="我的GetProcAddress" />
    <category term="资源文件" />
    <category term="消息断点" />
    <category term="通用控件" />
    <category term="WM_NOTIFY消息类型" />
    <category term="MFC" />
    <category term="PE查看器" />
    <category term="PE课后作业" />
    <category term="RVA与FOA" />
    <category term="PE结构" />
    <category term="DOS头属性说明" />
    <category term="标准PE头属性说明" />
    <category term="扩展PE头属性说明" />
    <category term="节表属性说明" />
    <category term="空白区添加代码" />
    <category term="合并节" />
    <category term="导入表" />
    <category term="注入" />
    <category term="导入表注入" />
    <category term="导出表" />
    <category term="新增节" />
    <category term="移动NT头" />
    <category term="扩大节" />
    <category term="移动导出表" />
    <category term="移动重定位表" />
    <category term="重定位表" />
    <category term="静态链接库" />
    <category term="动态链接库" />
    <category term="句柄" />
    <category term="button" />
    <category term="单选框" />
    <category term="复选框件" />
    <category term="Edit" />
    <category term="Combo Box" />
    <category term="Tab" />
    <category term="ListCtrl" />
    <category term="MFC的本质" />
    <category term="MFC的层次结构图" />
    <category term="手动创建一个MFC程序" />
    <category term="MFC的初始化过程" />
    <category term="MFC运行时类型识别" />
    <category term="关键字static" />
    <category term="关键字const" />
    <category term="MFC动态创建" />
    <category term="MFC消息映射" />
    <category term="结构体AFX_MSGMAP_ENTRY" />
    <category term="结构体AFX_MSGM" />
    <category term="MFC的三大类消息" />
    <category term="数据传输" />
    <category term="ini文件的读写" />
    <category term="python" />
    <category term="SSH" />
    <category term="python文件读取" />
    <category term="数据分析" />
    <category term="socket" />
    <category term="数据库编程" />
    <category term="python内置属性" />
    <category term="multiprocessing" />
    <category term="threading" />
    <category term="scrapy" />
    <category term="测试" />
    <category term="BHP" />
    <category term="Python的import功能" />
    <category term="木马" />
    <category term="STL" />
    <category term="Vector容器" />
    <category term="Deque容器" />
    <category term="List容器" />
    <category term="Set容器" />
    <category term="Multiset容器" />
    <category term="Map容器" />
    <category term="Multimap容器" />
    <category term="Stack容器" />
    <category term="Queue容器" />
    <category term="STL算法" />
    <category term="STL迭代器" />
    <category term="CobaltStrike" />
    <category term="RedTeam" />
    <category term="Apeache" />
    <category term="Nmap" />
    <category term="php" />
    <category term="guestbook" />
    <category term="SQLmap" />
    <category term="apache" />
    <category term="log" />
    <category term="mysql主键" />
    <category term="CSRF" />
    <category term="SSRF" />
    <category term="业务逻辑漏洞" />
    <category term="xss" />
    <category term="webshell流量特征" />
    <category term="虚拟网卡" />
    <category term="0环与3环的通信（常规方法）" />
    <category term="内核空间" />
    <category term="内核模块" />
    <category term="遍历内核模块" />
    <category term="定位未导出函数PspTiminateProcess" />
    <category term="内核编程基础" />
    <category term="ANSI_STRING" />
    <category term="UNICODE_STRING" />
    <category term="内核内存" />
    <category term="上下文环境" />
    <category term="中断请求级别" />
    <category term="链表" />
    <category term="自旋锁" />
    <category term="注册表" />
    <category term="地址空间" />
    <category term="文件操作" />
    <category term="线程与事件" />
    <category term="内核重载" />
    <category term="驱动调试" />
    <category term="配置VS2019+WDK10" />
    <category term="第一个驱动程序" />
    <category term="调试驱动程序" />
    <category term="OpenSCManager" />
    <category term="CreateService" />
    <category term="APC的本质" />
    <category term="APC的备用队列" />
    <category term="消息队列" />
    <category term="PsConvertToGuiThread" />
    <category term="win32k.sys" />
    <category term="GUI线程" />
    <category term="窗口程序的创建" />
    <category term="消息循环" />
    <category term="线性地址的管理" />
    <category term="VAD树" />
    <category term="_MMVAD" />
    <category term="_MMVAD_FLAGS" />
    <category term="VirtualAlloc" />
    <category term="MEM_COMMIT与MEM_RESERVE" />
    <category term="malloc" />
    <category term="堆内存" />
    <category term="栈内存" />
    <category term="全局区内存" />
    <category term="共享物理页" />
    <category term="共享文件" />
    <category term="LoadLibrary的本质" />
    <category term="MmAddPhysicalMemoryEx" />
    <category term="缺页异常" />
    <category term="临界区" />
    <category term="KPCR结构体" />
    <category term="等待链表" />
    <category term="调度链表" />
    <category term="模拟线程切换" />
    <category term="模拟挂起与恢复函数" />
    <category term="进程的创建" />
    <category term="获取当前进程" />
    <category term="ETHREAD" />
    <category term="KTHREAD" />
    <category term="EPROCESS" />
    <category term="KPROCESS" />
    <category term="2-9-9-12分页" />
    <category term="PAE" />
    <category term="PDPTE" />
    <category term="PDE" />
    <category term="PTE" />
    <category term="XD标志位" />
    <category term="逆向分析MmIsAddressValid函数(2-9-9-12)" />
    <category term="PWT" />
    <category term="PDT" />
    <category term="TLB" />
    <category term="CPU缓存" />
    <category term="INVLPG指令" />
    <category term="全局页" />
    <category term="ShadowWalker" />
    <category term="中断" />
    <category term="异常" />
    <category term="CLI指令" />
    <category term="STI指令" />
    <category term="INT2" />
    <category term="INT8" />
    <category term="中断门描述符" />
    <category term="IDT" />
    <category term="提权" />
    <category term="TSS" />
    <category term="跨段跳转流程" />
    <category term="JMP FAR指令" />
    <category term="任务门" />
    <category term="LDT段描述符" />
    <category term="LDT" />
    <category term="CR0" />
    <category term="CR2" />
    <category term="CR4" />
    <category term="CRL" />
    <category term="DPL" />
    <category term="RPL" />
    <category term="段寄存器结构" />
    <category term="段描述符" />
    <category term="段选择子" />
    <category term="GDT表" />
    <category term="调用门" />
    <category term="调用门描述符" />
    <category term="逆向分析MmIsAddressValid函数" />
    <category term="error C2143" />
    <category term="error C2275" />
    <category term="CALL与CALL FAR" />
    <category term="陷阱门描述符" />
    <category term="页目录表基址" />
    <category term="页表的基址" />
    <category term="0地址执行ShellCode" />
    <category term="10-10-12分页" />
    <category term="PDE_PTE" />
    <category term="物理页" />
    <category term="SSDT HOOK" />
    <category term="OpenProcess" />
    <category term="系统服务表" />
    <category term="SSDT" />
    <category term="SSDT HOOK隐藏" />
    <category term="API进出内核" />
    <category term="系统调用阶段总结" />
    <category term="网络安全法" />
    <category term="ASCII" />
    <category term="GBK" />
    <category term="ANSI" />
    <category term="Unicode" />
    <category term="UTF-8" />
    <category term="URL 编码/解码" />
    <category term="十进制" />
    <category term="二进制" />
    <category term="十六进制" />
    <category term="内存" />
    <category term="编写ShellCode实现IAT HOOK" />
    <category term="ShellCode原则" />
    <category term="傀儡进程加密壳" />
    <category term="ZwUnmapViewOfSection函数" />
    <category term="加载图标" />
    <category term="提取图标" />
    <category term="资源表" />
    <category term="MFC命令传递" />
    <category term="远控界面编写" />
    <category term="HTML" />
    <category term="文件包含" />
    <category term="sql注入" />
    <category term="经典定长指令" />
    <category term="经典变长指令" />
    <category term="指令前缀" />
    <category term="进程句柄表" />
    <category term="全局句柄表" />
    <category term="KAPC" />
    <category term="QueueUserAPC" />
    <category term="NtQueueApcThread" />
    <category term="KeInitializeApc" />
    <category term="KeInsertQueueApc" />
    <category term="KiInsertQueueApc" />
    <category term="消息队列与线程" />
    <category term="Windows线程切换" />
    <category term="KiSwapContext" />
    <category term="SwapContext" />
    <category term="时钟中断" />
    <category term="时间片管理" />
    <category term="线程切换与TSS" />
    <category term="线程切换与FS" />
    <category term="线程切换与线程优先级" />
    <category term="快速调用" />
    <category term="中断调用" />
    <category term="分析ReadProcessMemory" />
    <category term="KiFastSystemCall" />
    <category term="KiIntSystemCall" />
    <category term="重写3环" />
    <category term="文件上传" />
    <category term="隐藏驱动" />
    <category term="IopLoadDriver" />
    <category term="延迟过程调用" />
    <category term="进程挂靠" />
    <category term="跨进程读写内存" />
    <category term="APC" />
    <category term="逆向分析NtReadVirtualMemory" />
    <category term="逆向分析NtWriteVIrtualMemory" />
    <category term="AD-Attack-Defense" />
    <category term="payload" />
    <category term="sysenter指令" />
    <category term="KiFastCallEntry函数" />
    <category term="KiSystemService函数" />
    <category term="Trap_Frame" />
    <category term="web安全" />
    <category term="Pentest" />
    <entry>
        <id>https://or0kit.github.io/Bin/Core/WindowsXp/Protect-Mode/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F-%E6%AE%B5%E5%AF%84%E5%AD%98%E5%99%A8%E7%BB%93%E6%9E%84%E3%80%81%E6%AE%B5%E6%8F%8F%E8%BF%B0%E7%AC%A6%E3%80%81%E6%AE%B5%E9%80%89%E6%8B%A9%E5%AD%90/</id>
        <title>保护模式--段寄存器结构、段描述符、段选择子</title>
        <link rel="alternate" href="https://or0kit.github.io/Bin/Core/WindowsXp/Protect-Mode/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F-%E6%AE%B5%E5%AF%84%E5%AD%98%E5%99%A8%E7%BB%93%E6%9E%84%E3%80%81%E6%AE%B5%E6%8F%8F%E8%BF%B0%E7%AC%A6%E3%80%81%E6%AE%B5%E9%80%89%E6%8B%A9%E5%AD%90/"/>
        <content type="html">&lt;h1 id=&#34;段寄存器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#段寄存器&#34;&gt;#&lt;/a&gt; 段寄存器&lt;/h1&gt;
&lt;p&gt;什么是段寄存器，有哪些段寄存器&lt;/p&gt;
&lt;p&gt;当我们用汇编读写某一个地址时： &lt;code&gt;mov dword ptr ds:[0x123456],eax&lt;/code&gt; &lt;br /&gt;
 我们真正读写的地址是： &lt;code&gt;ds.base + 0x123456&lt;/code&gt; &lt;br /&gt;
 &lt;code&gt;ES&lt;/code&gt;   &lt;code&gt;CS&lt;/code&gt;   &lt;code&gt;SS&lt;/code&gt;   &lt;code&gt;DS&lt;/code&gt;   &lt;code&gt;FS&lt;/code&gt;   &lt;code&gt;GS&lt;/code&gt;   &lt;code&gt;LDTR&lt;/code&gt;   &lt;code&gt;TR&lt;/code&gt;  共 8 个&lt;/p&gt;
&lt;p&gt;代码段寄存器 CS（Code Segment）&lt;br /&gt;
存放当前正在运行的程序代码所在段的段基址，表示当前使用的指令代码可以从该段寄存器指定的存储器段中取得，相应的偏移量则由 IP 提供。&lt;/p&gt;
&lt;p&gt;数据段寄存器 DS（Data Segment）&lt;br /&gt;
指出当前程序使用的数据所存放段的最低地址，即存放数据段的段基址。&lt;/p&gt;
&lt;p&gt;堆栈段寄存器 SS（Stack Segment）&lt;br /&gt;
指出当前堆栈的底部地址，即存放堆栈段的段基址。&lt;/p&gt;
&lt;p&gt;附加段寄存器 ES（Extra Segment）&lt;br /&gt;
指出当前程序使用附加数据段的段基址，该段是串操作指令中目的串所在的段。&lt;/p&gt;
&lt;p&gt;FS、GS 是从 80386 开始增加的，没有全称。&lt;/p&gt;
&lt;p&gt;FS,GS 是 80386 起增加的两个辅助段寄存器，在这之前只有一个辅助段寄存器 ES, 增加这两个寄存器是为了减轻 ES 寄存器的负担，并能更好地配合适用于通用寄存器组的基址和变址寄存器。&lt;/p&gt;
&lt;p&gt;寄存器 FS 和 GS 是段寄存器。它们没有处理器定义的目的，而是由操作系统运行它们来赋予目的。&lt;br /&gt;
附加段寄存器，F 为上一个附加段寄存器字母 E 后的字母，没有对应的名称&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;FS&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;指向一种被称为线程信息块（TEB）的结构，这种结构是由内核在创建线程时创建的，用于支持操作系统相关功能、服务和 API&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;GS&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;附加段寄存器，G 为上一个附加段寄存器字母 F 后的字母，没有对应的名称&lt;/p&gt;
&lt;p&gt;在 32 位 Windows 上 GS 保留供将来使用&lt;/p&gt;
&lt;p&gt;在 x64 模式下，FS 和 GS 段寄存器已交换&lt;/p&gt;
&lt;p&gt;Win64 使用 GS 的原因是该 FS 寄存器用于 32 位兼容性层（称为 Wow64）&lt;/p&gt;
&lt;p&gt;32 位应用程序永远不会导致 GS 更改，而 64 位应用程序永远不会导致 FS 更改&lt;/p&gt;
&lt;p&gt;注意，在 Win64 和 Wow64 中 GS 是非零的，这可以用来检测一个 32 位应用程序是否在 64 位 Windows 中运行，在一个 “真正 “的 32 位 Windows 中 GS 总是零&lt;/p&gt;
&lt;h2 id=&#34;段寄存器结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#段寄存器结构&#34;&gt;#&lt;/a&gt; 段寄存器结构&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;image001.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;段寄存器中有 16 位是可见部分，有 80 位是不可见部分，一共 96 位。&lt;br /&gt;
可见部分为 16 位的 Selector 部分&lt;br /&gt;
 16 位的 Attribute 为这个段寄存器的属性，它的意义为：表示该段寄存器是可读还是可写还是可执行的。&lt;br /&gt;
32 位的 Base 表示该段是从哪里开始的。&lt;br /&gt;
32 位的 Limit 表示整个段的长度有多少。&lt;/p&gt;
&lt;h2 id=&#34;段寄存器的读写&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#段寄存器的读写&#34;&gt;#&lt;/a&gt; 段寄存器的读写&lt;/h2&gt;
&lt;p&gt;读段寄存器的时候只能够读 16 位。&lt;br /&gt;
比如： &lt;code&gt;mov ax,es&lt;/code&gt;  只能读 16 位的可见部分&lt;/p&gt;
&lt;p&gt;读写 LDTR 的指令为： &lt;code&gt;SLDT/LLDT&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;读写 TR 的指令为： &lt;code&gt;STR/LTR&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;写段寄存器的时候写的是 96 位。&lt;br /&gt;
比如： &lt;code&gt;mov ds,ax&lt;/code&gt;  写时是写 96 位&lt;/p&gt;
&lt;h2 id=&#34;加载段描述符至段寄存器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#加载段描述符至段寄存器&#34;&gt;#&lt;/a&gt; 加载段描述符至段寄存器&lt;/h2&gt;
&lt;p&gt;除了 MOV 指令，还可以使用 LES、LSS、LDS、LFS、LGS 指令修改段寄存器&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;char&lt;/span&gt; buffer&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;__asm&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  les ecx&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;fword ptr ds&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;buffer&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;// 高 2 个字节给 es, 低四个字节给 ecx&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;段寄存器属性简介&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#段寄存器属性简介&#34;&gt;#&lt;/a&gt; 段寄存器属性简介&lt;/h2&gt;
&lt;p&gt;段寄存器 | Selector | Attribute    | Base       | Limit&lt;/p&gt;
&lt;p&gt;GS 寄存器 Windows 并没有使用。&lt;/p&gt;
&lt;h2 id=&#34;gdt全局描述符表-ldt局部描述符表&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#gdt全局描述符表-ldt局部描述符表&#34;&gt;#&lt;/a&gt; GDT (全局描述符表) LDT (局部描述符表)&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;LDT 表在 Windows 中并没有使用。&lt;/strong&gt;&lt;br /&gt;
当我们执行类似  &lt;code&gt;mov ds,ax&lt;/code&gt;  指令时，CPU 会查表，根据  &lt;code&gt;ax&lt;/code&gt;  的值来决定查找  &lt;code&gt;GDT&lt;/code&gt;  还是  &lt;code&gt;LDT&lt;/code&gt; , 查找表的什么位置，查出多少数据。&lt;br /&gt;
 &lt;code&gt;gdtr&lt;/code&gt;  寄存器中存储了  &lt;code&gt;GDT&lt;/code&gt;  表的起始地址和  &lt;code&gt;gdt&lt;/code&gt;  表中的长度&lt;br /&gt;
 gdtr 是 48 位的寄存器，其中 32 位存储的这张表的位置，16 位存储的这张表的大小。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;在 windbg 中查看&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;r gdtr //gdt表的存储位置
r gdtl //gdt表的大小
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;image002.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;每次从  &lt;code&gt;GDT&lt;/code&gt;  表中查表：每 8 个字节为一个&lt;strong&gt;段描述符&lt;/strong&gt;。&lt;/p&gt;
&lt;h1 id=&#34;段选择子&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#段选择子&#34;&gt;#&lt;/a&gt; 段选择子&lt;/h1&gt;
&lt;p&gt;段选择子是一个 16 位的段描述符，该描述符指向了定义该段的段描述符.&lt;/p&gt;
&lt;h2 id=&#34;段选择子和段寄存器的对应关系&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#段选择子和段寄存器的对应关系&#34;&gt;#&lt;/a&gt; 段选择子和段寄存器的对应关系&lt;/h2&gt;
&lt;p&gt;对应可见部分的 16 位既段寄存器中的 Selector。&lt;/p&gt;
&lt;h2 id=&#34;段选择子的结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#段选择子的结构&#34;&gt;#&lt;/a&gt; 段选择子的结构&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;image009.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;RPL：请求特权级别&lt;br /&gt;
 TI：TI=0 查 GDT 表；TI=1 查 LDT 表&lt;br /&gt;
 Index：处理器将索引值乘以 8 在加上 GDT 或者 LDT 的基地址，就是要加载的段描述符&lt;/p&gt;
&lt;h1 id=&#34;段描述符&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#段描述符&#34;&gt;#&lt;/a&gt; 段描述符&lt;/h1&gt;
&lt;h2 id=&#34;段描述符的结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#段描述符的结构&#34;&gt;#&lt;/a&gt; 段描述符的结构&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;image003.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;16 位的 Attribute 对应段寄存器中高四字节从 8 位开始到第 23 位结束。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;32 位的 Base 包含了三个部分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;高四字节的第 24 位到第 31 部分&lt;/li&gt;
&lt;li&gt;高四字节的第 0 位到第 7 位&lt;/li&gt;
&lt;li&gt;低四字节的第 16 位到 31 位&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;32 位的 Limit 包括两部分一共二十位（最大值为 FFFFF）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;高四字节的 16 位到 19 位&lt;/li&gt;
&lt;li&gt;低四个字节的 0 位到 15 位&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;段描述符的属性&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#段描述符的属性&#34;&gt;#&lt;/a&gt; 段描述符的属性&lt;/h2&gt;
&lt;p&gt;段寄存器的值是通过段描述符填写的，但段描述符只有 64 位，可是要填写的有 80 位，如何从 64 位变成 80 位呢？&lt;/p&gt;
&lt;h3 id=&#34;p位&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#p位&#34;&gt;#&lt;/a&gt; P 位&lt;/h3&gt;
&lt;p&gt;P 位 位于段描述符的高四个字节的第 15 位（下标为 15）的位置.&lt;/p&gt;
&lt;p&gt;P = 1 段描述符有效&lt;br /&gt;
 P = 0 段描述符无效&lt;/p&gt;
&lt;p&gt;当使用指令将段描述符加载至段寄存器的时候，CPU 第一个检测的就是 P 位，当 P 位为 0 时就不做继续的检测了。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image004.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;在段描述符中，只要看这一行的数是否小于 8，若小于 8，则证明 P 位 = 0 段描述符无效。&lt;/p&gt;
&lt;h3 id=&#34;g位&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#g位&#34;&gt;#&lt;/a&gt; G 位&lt;/h3&gt;
&lt;p&gt;G 位 位于段描述符的高四个字节的第 23 位（下标为 23）的位置。&lt;/p&gt;
&lt;p&gt;G=0 的时候：表示 Limit 字段单位（粒度）是字节：最大值就是 limit 域。&lt;br /&gt;
G=1 的时候：表示 Limit 字段单位（粒度）是 4KB：最大值就是 limit 域 * 0x4K + 0xFFF。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image005.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;在段描述符中，只要看这一行的数是否小于 8，若小于 8，则证明 G 位 = 0。&lt;/p&gt;
&lt;h3 id=&#34;s位&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#s位&#34;&gt;#&lt;/a&gt; S 位&lt;/h3&gt;
&lt;p&gt;S 位 位于段描述符的高四个字节的第 12 位（下标为 12）的位置。&lt;/p&gt;
&lt;p&gt;S = 1 时表示： 代码段或者数据段描述符&lt;br /&gt;
 S = 0 时表示： 系统段描述符&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;十六进制下，从右到左看高字节的第五位，若是偶数则 S 位 = 0，若是奇数则 S 位 = 1。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;type域&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#type域&#34;&gt;#&lt;/a&gt; type 域&lt;/h3&gt;
&lt;p&gt;type 域 包含段描述符的高四个字节的 8、9、10、11 共四位。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image006.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;数据段&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数据段&#34;&gt;#&lt;/a&gt; 数据段&lt;/h4&gt;
&lt;p&gt;当 s 位为 1 且当 type 域中的 11 位为 0 时，表示是数据段。&lt;br /&gt;
其中图中的 A、W、E 分别代表不同的意思&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image007.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;E 位表示拓展位，为 0 表示向上拓展，为 1 表示向下拓展。&lt;br /&gt;
向上拓展：有效范围为 &lt;code&gt;fs.Base ~ fs.Base+Limit&lt;/code&gt; &lt;br /&gt;
 向下拓展：有效范围除了 &lt;code&gt;fs.Base ~ fs.Base+Limit&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&#34;代码段&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#代码段&#34;&gt;#&lt;/a&gt; 代码段&lt;/h4&gt;
&lt;p&gt;当 s 位为 1 且当 type 域中的 11 位为 1 时，表示是代码段。&lt;br /&gt;
其中图中的 A、R、C 分别代表不同的意思&lt;/p&gt;
&lt;p&gt;A 代表是否访问过，未访问过为 0，访问过为 1。&lt;br /&gt;
R 代表是否可读位，表示该段是否可以读。&lt;br /&gt;
C 代表一致位：C = 1 表示一致代码段 ，C = 0 表示非一致代码段&lt;/p&gt;
&lt;h4 id=&#34;系统描述符&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#系统描述符&#34;&gt;#&lt;/a&gt; 系统描述符&lt;/h4&gt;
&lt;p&gt;当 s 位为 0 的时候，表示该段描述符为系统描述符。系统描述符有分为以下类型：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image008.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;dpl&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#dpl&#34;&gt;#&lt;/a&gt; DPL&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;描述：&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;DPL 存储在段描述符中，规定了访问所在段描述符所需要的特权级别是多少&lt;br /&gt;
 DPL 数值越大，访问所在段描述符所需要的权限越低&lt;br /&gt;
注意：在 Windows 中，DPL 只会出现两种情况，要么全为 0，要么全为 1&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;十六进制下，从右到左看高字节的第五位，若是 &lt;code&gt;8&lt;/code&gt;  或 &lt;code&gt;9&lt;/code&gt;  则 DPL=0，若是 &lt;code&gt;E&lt;/code&gt;  或 &lt;code&gt;F&lt;/code&gt;  则 DPL=3。&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;例：&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;若 AX 指向的段描述符的 DPL=0，但当前程序的 CPL=3，那么这条指令是不会成功的！&lt;/p&gt;
&lt;h3 id=&#34;db位&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#db位&#34;&gt;#&lt;/a&gt; D\B 位&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;情况 1：对 CS 段的影响&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;D=1：采用 32 位寻址方式&lt;br /&gt;
 D=0：采用 16 位寻址方式&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;情况 2：对 SS 段的影响&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;D=1：隐式堆栈访问指令（如：PUSH POP CALL）使用 32 位堆栈指针寄存器 ESP&lt;br /&gt;
D=0：隐式堆栈访问指令（如：PUSH POP CALL）使用 16 位堆栈指针寄存器 SP&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;情况 3：向下拓展的数据段&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;D=1：段上限为 4GB&lt;br /&gt;
D=0：段上限为 64KB&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image010.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;reference&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#reference&#34;&gt;#&lt;/a&gt; Reference&lt;/h2&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2OTE2MTc5L2FydGljbGUvZGV0YWlscy85MTU1MDYzMQ==&#34;&gt;https://blog.csdn.net/qq_36916179/article/details/91550631&lt;/span&gt;&lt;br /&gt;
&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2OTE2MTc5L2FydGljbGUvZGV0YWlscy85MTYyMTk0Nw==&#34;&gt;https://blog.csdn.net/qq_36916179/article/details/91621947&lt;/span&gt;&lt;br /&gt;
&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxOTg4NDQ4L2FydGljbGUvZGV0YWlscy8xMDI1NjMzMjU=&#34;&gt;https://blog.csdn.net/qq_41988448/article/details/102563325&lt;/span&gt;&lt;/p&gt;
</content>
        <category term="段寄存器结构" />
        <category term="段描述符" />
        <category term="段选择子" />
        <category term="GDT表" />
        <updated>2021-07-29T13:25:00.000Z</updated>
    </entry>
</feed>
