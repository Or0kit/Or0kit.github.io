{
    "version": "https://jsonfeed.org/version/1",
    "title": "Or0kit • All posts by \"资源文件\" tag",
    "description": "临渊羡鱼，不如退而结网",
    "home_page_url": "https://Or0kit.github.io",
    "items": [
        {
            "id": "https://or0kit.github.io/Bin/Win32/%E8%B5%84%E6%BA%90%E6%96%87%E4%BB%B6%E4%B8%8E%E6%B6%88%E6%81%AF%E6%96%AD%E7%82%B9/",
            "url": "https://or0kit.github.io/Bin/Win32/%E8%B5%84%E6%BA%90%E6%96%87%E4%BB%B6%E4%B8%8E%E6%B6%88%E6%81%AF%E6%96%AD%E7%82%B9/",
            "title": "资源文件与消息断点",
            "date_published": "2021-11-07T05:54:23.000Z",
            "content_html": "<h1 id=\"创建资源文件\"><a class=\"anchor\" href=\"#创建资源文件\">#</a> 创建资源文件</h1>\n<p>在 VS 中创建资源文件：</p>\n<blockquote>\n<p>创建 windos 桌面应用程序的空项目（不然 VS 会自动给我们创建一个模板）</p>\n</blockquote>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<blockquote>\n<p>添加资源文件</p>\n</blockquote>\n<p><img data-src=\"image004.png\" alt=\"\" /></p>\n<blockquote>\n<p>右键添加 Dialog (对话框) 资源</p>\n</blockquote>\n<p><img data-src=\"image002.png\" alt=\"\" /></p>\n<blockquote>\n<p>获得如下界面</p>\n</blockquote>\n<p><img data-src=\"image003.png\" alt=\"\" /></p>\n<blockquote>\n<p>随便配置一下</p>\n</blockquote>\n<p><img data-src=\"image005.png\" alt=\"\" /></p>\n<blockquote>\n<p>观察一下  <code>resource.h</code>  (创建资源文件时会自动生成头文件，里面定义着各种宏) 这个头文件是有编译器自动填写的，一般我们不需要修改里面的内容，使用资源的时候需要包含头文件。</p>\n</blockquote>\n<p><img data-src=\"image006.png\" alt=\"\" /></p>\n<h1 id=\"通过dialogbox创建对话框\"><a class=\"anchor\" href=\"#通过dialogbox创建对话框\">#</a> 通过 DialogBox 创建对话框</h1>\n<p>DialogBox 函数介绍</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>INT_PTR <span class=\"token function\">DialogBox</span><span class=\"token punctuation\">(</span>\t\t\t\t\t</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  HINSTANCE hInstance<span class=\"token punctuation\">,</span>  <span class=\"token comment\">// handle to module\t\t\t\t\t</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  LPCTSTR lpTemplate<span class=\"token punctuation\">,</span>   <span class=\"token comment\">// dialog box template\t\t\t\t\t</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  HWND hWndParent<span class=\"token punctuation\">,</span>      <span class=\"token comment\">// handle to owner window\t\t\t\t\t</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  DLGPROC lpDialogFunc  <span class=\"token comment\">// dialog box procedure\t\t\t\t\t</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"定义dialog消息处理函数\"><a class=\"anchor\" href=\"#定义dialog消息处理函数\">#</a> 定义 Dialog 消息处理函数</h1>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>BOOL CALLBACK <span class=\"token function\">DialogProc</span><span class=\"token punctuation\">(</span>\t\t\t\t</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> HWND hwndDlg<span class=\"token punctuation\">,</span>  <span class=\"token comment\">// handle to dialog box\t\t</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> UINT uMsg<span class=\"token punctuation\">,</span>     <span class=\"token comment\">// message\t\t</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> WPARAM wParam<span class=\"token punctuation\">,</span> <span class=\"token comment\">// first message parameter\t\t</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> LPARAM lParam  <span class=\"token comment\">// second message parameter\t\t</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span>\t\t\t\t</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t\t\t</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>uMsg<span class=\"token punctuation\">)</span>\t\t\t</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span>\t\t\t</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">case</span>  WM_INITDIALOG <span class=\"token operator\">:</span>\t\t\t</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t\t\t</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t<span class=\"token function\">MessageBox</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span><span class=\"token function\">TEXT</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"WM_INITDIALOG\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">TEXT</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"INIT\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>MB_OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t\t\t</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> TRUE <span class=\"token punctuation\">;</span>\t\t</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t\t\t</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token keyword\">case</span>  WM_COMMAND <span class=\"token operator\">:</span>\t\t\t</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t\t\t</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span><span class=\"token function\">LOWORD</span> <span class=\"token punctuation\">(</span>wParam<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\t\t</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span>\t\t</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t<span class=\"token keyword\">case</span>   IDC_BUTTON_OK <span class=\"token operator\">:</span>\t\t</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t\t\t</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t\t<span class=\"token function\">MessageBox</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span><span class=\"token function\">TEXT</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"IDC_BUTTON_OK\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">TEXT</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"OK\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>MB_OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t\t\t</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> TRUE<span class=\"token punctuation\">;</span>\t</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t\t\t</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t<span class=\"token keyword\">case</span>   IDC_BUTTON_OUT<span class=\"token operator\">:</span>\t\t</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t\t\t</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t\t<span class=\"token function\">MessageBox</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span><span class=\"token function\">TEXT</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"IDC_BUTTON_OUT\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">TEXT</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"OUT\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>MB_OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t\t\t</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t\t<span class=\"token function\">EndDialog</span><span class=\"token punctuation\">(</span>hwndDlg<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t\t\t</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> TRUE<span class=\"token punctuation\">;</span>\t</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span>\t\t</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\t<span class=\"token keyword\">break</span> <span class=\"token punctuation\">;</span>\t\t</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>\t\t\t\t</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\t\t\t</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token keyword\">return</span> FALSE <span class=\"token punctuation\">;</span>\t\t\t</pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>Dialog 消息处理函数与 Windows 消息处理函数不一样。</p>\n<p>在 Dialog 消息处理函数中：</p>\n<p>1、处理过的消息，返回 TRUE。</p>\n<p>2、不处理的消息，返回 FALSE。</p>\n<p>在 Windows 消息处理函数中：</p>\n<p>1、处理过的消息，返回 FALSE (既 0)。</p>\n<p>2、不处理的消息，调用 DefWindowProc () 处理。</p>\n<h1 id=\"获取文本框内容\"><a class=\"anchor\" href=\"#获取文本框内容\">#</a> 获取文本框内容</h1>\n<p>重新画一个对话框</p>\n<p><img data-src=\"image007.png\" alt=\"\" /></p>\n<p>点击确定的时候就获取文本框内的内容</p>\n<p>1、获取文本框句柄：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>HWND hEditUser &#x3D; GetDlgItem (hDlg,IDC_EDIT_USER);\t</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>hDlg\t对话框句柄</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>IDC_EDIT_USER\t\t编号</pre></td></tr></table></figure><p>2、获取文本框内容</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>TCHAR szUserBuff [0x50];\t</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>GetWindowText (hEditUser,szUserBuff,0x50);\t</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>hEditUser\t文本框句柄</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>szUserBuff\t输出缓冲区</pre></td></tr></table></figure><p>只贴关键部分了</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>switch (LOWORD(wParam))</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t\t&#123;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\tcase   IDC_BUTTON3:</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t\thEditUser &#x3D; GetDlgItem(hwndDlg, IDC_EDIT_UserName);</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t\thEditPass &#x3D; GetDlgItem(hwndDlg, IDC_EDIT_PassWord);</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t\t</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t\tGetWindowText(hEditUser, szUserBuff, 0x50);</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t\tGetWindowText(hEditPass, szPassBuff, 0x50);</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t\tMessageBox(NULL, szUserBuff, szPassBuff, MB_OK);</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t\tMessageBox(NULL, TEXT(&quot;IDC_BUTTON_OK&quot;), TEXT(&quot;OK&quot;), MB_OK);</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t\treturn TRUE;</pre></td></tr></table></figure><p><img data-src=\"image008.png\" alt=\"\" /></p>\n<h1 id=\"消息断点\"><a class=\"anchor\" href=\"#消息断点\">#</a> 消息断点</h1>\n<p>虽然创建 Dialog 对话框避我们创建 Windows 窗口的步骤更简单一些，但其实步骤一点都没有少，我们逆向分析一个 Win32 程序使还是可以找到其消息处理函数。</p>\n<p>但实际上一个窗口程序可能会有非常多的功能，我们找其消息处理函数是非常耗时耗力的，针对这种情况我们可以借助工具。</p>\n<p>在 OD 中点击 <code>W</code>  图标查看窗口</p>\n<p><img data-src=\"image015.png\" alt=\"\" /></p>\n<p>我们发现，函数处理地址都是 7 开头的高位地址，既这些消息处理函数都是系统给我们提供的，但最终都会调用我们的消息处理函数。<br />\n明白了这个流程，我们就可以先在调用系统处理函数那里下断点，然后追回程序自己的消息处理函数。</p>\n<p>我就在 x32dbg 上演示了</p>\n<p>选择窗口</p>\n<p><img data-src=\"image009.png\" alt=\"\" /></p>\n<p>选择消息类型</p>\n<p><img data-src=\"image010.png\" alt=\"\" /></p>\n<p>我们要找到的是子窗口的消息处理函数，发给父窗口的消息是  <code>WM_COMMAND</code>  ，对于按钮控件，无非是鼠标点下去或抬起来，要确定按钮是按下触发消息处理还是松开触发，自己点一下就能确定了。</p>\n<p>鼠标左键抬起的消息类型的宏定义： <code>#define WM_LBUTTONUP                    0x0202</code> 。</p>\n<p>设置消息断点后，我们鼠标点击一下按钮就直接触发断点了：</p>\n<p><img data-src=\"image011.png\" alt=\"\" /></p>\n<p>当程序断在这里的时候我们打开内存布局，在 <code>.text</code>  区段下内存访问断点，这里我们可以选择重复设置。</p>\n<p><img data-src=\"imaeg012.png\" alt=\"\" /></p>\n<p>F9 运行，断在了我们的程序里。</p>\n<p><img data-src=\"image013.png\" alt=\"\" /></p>\n<p><strong>但要注意的是这里断下的消息处理函数可能并不是要处理我们的消息</strong><br />\n注意消息处理函数的堆栈空间看其 <code>ESP+8</code>  的位置，其值并不是  <code>WM_COMMAND</code>  (0x111)</p>\n<p>所以我们的让程序接着跑起来，直到 <code>ESP+8</code>  的值是 0x111，但因下了内存断点，就算是按下 F9 还是一次执行一条指令。</p>\n<p><img data-src=\"image014.png\" alt=\"\" /></p>\n<p>直到确定了 <code>ESP+8</code>  的值是 0x111，这就找到了本次按钮的消息处理函数。</p>\n",
            "tags": [
                "资源文件",
                "消息断点"
            ]
        }
    ]
}