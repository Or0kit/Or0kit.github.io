<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>Or0kit • Posts by &#34;jmp far指令&#34; tag</title>
        <link>https://Or0kit.github.io</link>
        <description>临渊羡鱼，不如退而结网</description>
        <language>zh-CN</language>
        <pubDate>Sun, 08 Aug 2021 13:48:15 +0800</pubDate>
        <lastBuildDate>Sun, 08 Aug 2021 13:48:15 +0800</lastBuildDate>
        <category>Algolia</category>
        <category>Drozer</category>
        <category>同义词替换</category>
        <category>xpath</category>
        <category>win32api</category>
        <category>WOW64</category>
        <category>windows消息机制</category>
        <category>虚拟内存</category>
        <category>jsDelivr</category>
        <category>First blog</category>
        <category>markdown 学习</category>
        <category>Android</category>
        <category>替换密钥</category>
        <category>数论基础</category>
        <category>ADB</category>
        <category>雷电模拟器</category>
        <category>Hadoop</category>
        <category>IDA</category>
        <category>Windows逆向</category>
        <category>SSH隧道</category>
        <category>url</category>
        <category>http</category>
        <category>应急响应</category>
        <category>Nginx</category>
        <category>Linux</category>
        <category>CentOS7配置vsftp</category>
        <category>Psad</category>
        <category>fwsnort</category>
        <category>x86汇编指令</category>
        <category>动态分析技术基础</category>
        <category>静态分析基础</category>
        <category>逆向</category>
        <category>IDA学习</category>
        <category>恶意代码分析实战入门</category>
        <category>加壳</category>
        <category>脱壳</category>
        <category>C++壳</category>
        <category>ESP寻址</category>
        <category>定位Win32窗口回调函数</category>
        <category>HOOK攻防</category>
        <category>瞬时HOOK过检测</category>
        <category>INLINE-HOOK</category>
        <category>IAT HOOK</category>
        <category>INLINE HOOK</category>
        <category>进程监控</category>
        <category>模块隐藏</category>
        <category>进程通信</category>
        <category>tlhelp32.h</category>
        <category>进程遍历</category>
        <category>模块遍历</category>
        <category>外挂原理</category>
        <category>DLL注入之进程间通信</category>
        <category>TEB</category>
        <category>PEB</category>
        <category>R3层断链</category>
        <category>Win临界区</category>
        <category>Win事件</category>
        <category>线程同步</category>
        <category>Win互斥体</category>
        <category>内存映射文件</category>
        <category>内存映射共享</category>
        <category>写拷贝</category>
        <category>Win子窗口控件</category>
        <category>win32文件函数</category>
        <category>代码注入</category>
        <category>窗口程序</category>
        <category>消息机制</category>
        <category>消息类型</category>
        <category>私有内存</category>
        <category>共享内存</category>
        <category>设备对象</category>
        <category>DC设备上下文</category>
        <category>图形对象</category>
        <category>创建线程</category>
        <category>线程控制</category>
        <category>线程相关API</category>
        <category>线程上下文</category>
        <category>CONTEXT结构体</category>
        <category>物理内存</category>
        <category>Windows进程</category>
        <category>句柄表</category>
        <category>远程线程函数</category>
        <category>远程线程</category>
        <category>DLL注入</category>
        <category>DLL注入相关函数</category>
        <category>WinMain函数</category>
        <category>调用约定</category>
        <category>我的GetProcAddress</category>
        <category>资源文件</category>
        <category>消息断点</category>
        <category>PE课后作业</category>
        <category>通用控件</category>
        <category>WM_NOTIFY消息类型</category>
        <category>MFC</category>
        <category>PE查看器</category>
        <category>RVA与FOA</category>
        <category>PE结构</category>
        <category>DOS头属性说明</category>
        <category>标准PE头属性说明</category>
        <category>扩展PE头属性说明</category>
        <category>节表属性说明</category>
        <category>空白区添加代码</category>
        <category>合并节</category>
        <category>导入表</category>
        <category>注入</category>
        <category>导入表注入</category>
        <category>导出表</category>
        <category>扩大节</category>
        <category>新增节</category>
        <category>移动NT头</category>
        <category>移动导出表</category>
        <category>移动重定位表</category>
        <category>重定位表</category>
        <category>静态链接库</category>
        <category>动态链接库</category>
        <category>句柄</category>
        <category>CobaltStrike</category>
        <category>RedTeam</category>
        <category>Apeache</category>
        <category>php</category>
        <category>Nmap</category>
        <category>guestbook</category>
        <category>SQLmap</category>
        <category>apache</category>
        <category>log</category>
        <category>mysql主键</category>
        <category>CSRF</category>
        <category>SSRF</category>
        <category>业务逻辑漏洞</category>
        <category>xss</category>
        <category>webshell流量特征</category>
        <category>虚拟网卡</category>
        <category>button</category>
        <category>单选框</category>
        <category>复选框件</category>
        <category>Edit</category>
        <category>Combo Box</category>
        <category>Tab</category>
        <category>ListCtrl</category>
        <category>MFC的本质</category>
        <category>MFC的层次结构图</category>
        <category>手动创建一个MFC程序</category>
        <category>MFC的初始化过程</category>
        <category>MFC运行时类型识别</category>
        <category>关键字static</category>
        <category>关键字const</category>
        <category>MFC动态创建</category>
        <category>MFC消息映射</category>
        <category>结构体AFX_MSGMAP_ENTRY</category>
        <category>结构体AFX_MSGM</category>
        <category>MFC的三大类消息</category>
        <category>数据传输</category>
        <category>ini文件的读写</category>
        <category>python</category>
        <category>SSH</category>
        <category>python文件读取</category>
        <category>数据分析</category>
        <category>socket</category>
        <category>数据库编程</category>
        <category>python内置属性</category>
        <category>multiprocessing</category>
        <category>threading</category>
        <category>scrapy</category>
        <category>测试</category>
        <category>BHP</category>
        <category>Python的import功能</category>
        <category>木马</category>
        <category>非可变序列算法</category>
        <category>可变序列算法</category>
        <category>排序算法</category>
        <category>迭代器</category>
        <category>使用自定义对象</category>
        <category>0环与3环的通信（常规方法）</category>
        <category>内核空间</category>
        <category>内核模块</category>
        <category>遍历内核模块</category>
        <category>定位未导出函数PspTiminateProcess</category>
        <category>内核编程基础</category>
        <category>ANSI_STRING</category>
        <category>UNICODE_STRING</category>
        <category>内核内存</category>
        <category>上下文环境</category>
        <category>中断请求级别</category>
        <category>链表</category>
        <category>自旋锁</category>
        <category>注册表</category>
        <category>地址空间</category>
        <category>文件操作</category>
        <category>线程与事件</category>
        <category>内核重载</category>
        <category>配置VS2019+WDK10</category>
        <category>第一个驱动程序</category>
        <category>驱动调试</category>
        <category>调试驱动程序</category>
        <category>OpenSCManager</category>
        <category>CreateService</category>
        <category>APC的本质</category>
        <category>APC的备用队列</category>
        <category>线性地址的管理</category>
        <category>VAD树</category>
        <category>_MMVAD</category>
        <category>_MMVAD_FLAGS</category>
        <category>共享物理页</category>
        <category>共享文件</category>
        <category>LoadLibrary的本质</category>
        <category>VirtualAlloc</category>
        <category>MEM_COMMIT与MEM_RESERVE</category>
        <category>malloc</category>
        <category>堆内存</category>
        <category>栈内存</category>
        <category>全局区内存</category>
        <category>MmAddPhysicalMemoryEx</category>
        <category>缺页异常</category>
        <category>消息队列</category>
        <category>PsConvertToGuiThread</category>
        <category>win32k.sys</category>
        <category>GUI线程</category>
        <category>窗口程序的创建</category>
        <category>消息循环</category>
        <category>临界区</category>
        <category>KPCR结构体</category>
        <category>模拟线程切换</category>
        <category>模拟挂起与恢复函数</category>
        <category>等待链表</category>
        <category>调度链表</category>
        <category>ETHREAD</category>
        <category>KTHREAD</category>
        <category>进程的创建</category>
        <category>获取当前进程</category>
        <category>EPROCESS</category>
        <category>KPROCESS</category>
        <category>2-9-9-12分页</category>
        <category>PAE</category>
        <category>PDPTE</category>
        <category>PDE</category>
        <category>PTE</category>
        <category>XD标志位</category>
        <category>逆向分析MmIsAddressValid函数(2-9-9-12)</category>
        <category>TLB</category>
        <category>INVLPG指令</category>
        <category>全局页</category>
        <category>ShadowWalker</category>
        <category>PWT</category>
        <category>PDT</category>
        <category>CPU缓存</category>
        <category>中断</category>
        <category>异常</category>
        <category>CLI指令</category>
        <category>STI指令</category>
        <category>INT2</category>
        <category>INT8</category>
        <category>中断门描述符</category>
        <category>IDT</category>
        <category>提权</category>
        <category>跨段跳转流程</category>
        <category>JMP FAR指令</category>
        <category>TSS</category>
        <category>任务门</category>
        <category>LDT段描述符</category>
        <category>LDT</category>
        <category>CR0</category>
        <category>CR2</category>
        <category>CR4</category>
        <category>CRL</category>
        <category>DPL</category>
        <category>RPL</category>
        <category>段寄存器结构</category>
        <category>段描述符</category>
        <category>段选择子</category>
        <category>GDT表</category>
        <category>调用门</category>
        <category>调用门描述符</category>
        <category>逆向分析MmIsAddressValid函数</category>
        <category>error C2143</category>
        <category>error C2275</category>
        <category>CALL与CALL FAR</category>
        <category>陷阱门描述符</category>
        <category>10-10-12分页</category>
        <category>页目录表基址</category>
        <category>页表的基址</category>
        <category>0地址执行ShellCode</category>
        <category>PDE_PTE</category>
        <category>物理页</category>
        <category>SSDT HOOK</category>
        <category>OpenProcess</category>
        <category>系统服务表</category>
        <category>SSDT</category>
        <category>SSDT HOOK隐藏</category>
        <category>API进出内核</category>
        <category>系统调用阶段总结</category>
        <category>网络安全法</category>
        <category>ASCII</category>
        <category>GBK</category>
        <category>ANSI</category>
        <category>Unicode</category>
        <category>UTF-8</category>
        <category>URL 编码/解码</category>
        <category>十进制</category>
        <category>二进制</category>
        <category>十六进制</category>
        <category>内存</category>
        <category>x64</category>
        <category>编写ShellCode实现IAT HOOK</category>
        <category>ShellCode原则</category>
        <category>傀儡进程加密壳</category>
        <category>ZwUnmapViewOfSection函数</category>
        <category>加载图标</category>
        <category>提取图标</category>
        <category>资源表</category>
        <category>HTML</category>
        <category>文件包含</category>
        <category>sql注入</category>
        <category>MFC命令传递</category>
        <category>远控界面编写</category>
        <category>STL</category>
        <category>Vector容器</category>
        <category>Deque容器</category>
        <category>List容器</category>
        <category>Set容器</category>
        <category>Multiset容器</category>
        <category>Map容器</category>
        <category>Multimap容器</category>
        <category>Stack容器</category>
        <category>Queue容器</category>
        <category>priority_queue容器</category>
        <category>经典定长指令</category>
        <category>经典变长指令</category>
        <category>指令前缀</category>
        <category>串口</category>
        <category>过滤</category>
        <category>键盘过滤</category>
        <category>KAPC</category>
        <category>QueueUserAPC</category>
        <category>NtQueueApcThread</category>
        <category>KeInitializeApc</category>
        <category>KeInsertQueueApc</category>
        <category>KiInsertQueueApc</category>
        <category>进程句柄表</category>
        <category>全局句柄表</category>
        <category>消息队列与线程</category>
        <category>Windows线程切换</category>
        <category>KiSwapContext</category>
        <category>SwapContext</category>
        <category>时钟中断</category>
        <category>时间片管理</category>
        <category>线程切换与TSS</category>
        <category>线程切换与FS</category>
        <category>线程切换与线程优先级</category>
        <category>快速调用</category>
        <category>中断调用</category>
        <category>分析ReadProcessMemory</category>
        <category>KiFastSystemCall</category>
        <category>KiIntSystemCall</category>
        <category>重写3环</category>
        <category>文件上传</category>
        <category>隐藏驱动</category>
        <category>IopLoadDriver</category>
        <category>延迟过程调用</category>
        <category>进程挂靠</category>
        <category>跨进程读写内存</category>
        <category>APC</category>
        <category>逆向分析NtReadVirtualMemory</category>
        <category>逆向分析NtWriteVIrtualMemory</category>
        <category>AD-Attack-Defense</category>
        <category>payload</category>
        <category>sysenter指令</category>
        <category>KiFastCallEntry函数</category>
        <category>KiSystemService函数</category>
        <category>Trap_Frame</category>
        <category>web安全</category>
        <category>Pentest</category>
        <category>磁盘虚拟</category>
        <category>PDO</category>
        <category>Windows中从击键到内核的过程</category>
        <category>KEYBOARD_INPUT_DATA结构</category>
        <category>IRP完成回调函数</category>
        <category>DriverEntry函数的定义</category>
        <category>WDF_DRIVER_CONFIG结构</category>
        <category>EvtDriverDeviceAdd函数</category>
        <category>FAT12/16磁盘卷</category>
        <category>磁盘的过滤</category>
        <category>具有还原功能的磁盘卷过滤驱动</category>
        <category>文件系统</category>
        <category>Minifilter</category>
        <category>boot驱动</category>
        <category>bitmap</category>
        <item>
            <guid isPermalink="true">https://or0kit.github.io/Bin/Core/WindowsXp/Protect-Mode/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F-%E4%BB%A3%E7%A0%81%E8%B7%A8%E6%AE%B5%E8%B7%B3%E8%BD%AC/</guid>
            <title>保护模式-代码跨段跳转</title>
            <link>https://or0kit.github.io/Bin/Core/WindowsXp/Protect-Mode/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F-%E4%BB%A3%E7%A0%81%E8%B7%A8%E6%AE%B5%E8%B7%B3%E8%BD%AC/</link>
            <category>跨段跳转流程</category>
            <category>JMP FAR指令</category>
            <pubDate>Sun, 08 Aug 2021 13:48:15 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;代码跨段跳转&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#代码跨段跳转&#34;&gt;#&lt;/a&gt; 代码跨段跳转&lt;/h1&gt;
&lt;h2 id=&#34;要点回顾&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#要点回顾&#34;&gt;#&lt;/a&gt; 要点回顾&lt;/h2&gt;
&lt;p&gt;段寄存器:&lt;br /&gt;
 &lt;code&gt;ES,CS,SS,DS,FS,GS,LDTR,TR&lt;/code&gt; &lt;br /&gt;
 除 CS 外，其他的段寄存器都可以通过  &lt;code&gt;MOV,LES,LSS,LDS,LFS,LGS&lt;/code&gt;  指令进行修改&lt;/p&gt;
&lt;p&gt;思考：CS 为什么不可以直接修改呢？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;CS 的改变意味着 EIP 的改变，改变 CS 的同时必须修改 EIP, 所以我们无法使用上面的指令来进行修改&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;代码段跳转流程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#代码段跳转流程&#34;&gt;#&lt;/a&gt; 代码段跳转流程&lt;/h2&gt;
&lt;p&gt;段间跳转分为两种情况：&lt;/p&gt;
&lt;p&gt;要跳转的段是一致代码段&lt;br /&gt;
要跳转的段是非一致代码段&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;同时修改 CS 和 EIP 的指令:&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;指令&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;含义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;JMP FAR&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;远跳转&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;CALL FAR&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;远调用&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;RETF(return far)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;远返回&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;INT(interrupt)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;中断&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;IRET(interrupt return)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;执行到中断程序或过程的远返回&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;只改变 EIP 的指令：&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;指令&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;含义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;JMP&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;跳转&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;CALL&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;调用&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;JCC(jump condition code)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;跳转指令状态码 / 条件跳转&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;RET&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;返回&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;执行流程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#执行流程&#34;&gt;#&lt;/a&gt; 执行流程&lt;/h3&gt;
&lt;p&gt;JMP FAR 指令&lt;br /&gt;
指令格式&lt;br /&gt;
 &lt;code&gt;JMP Selector:Offset&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;如： &lt;code&gt;JMP 0x20:0x00452610&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Selector 为段选择子&lt;br /&gt;
 Offset 为要跳转的偏移&lt;/p&gt;
&lt;p&gt;思考：CPU 如何执行  &lt;code&gt;JMP 0x20:0x004183D&lt;/code&gt;  这行指令&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;1）段选择子拆分&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;0x20 二进制：0000 0000 0010 0000 即&lt;br /&gt;
 RPL = 00&lt;br /&gt;
TI = 0&lt;br /&gt;
Index = 4&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;2）查表得到段描述符&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;TI=0：查 GDT 表&lt;br /&gt;
 Index=4：找到对应的段描述符&lt;/p&gt;
&lt;p&gt;四种情况可以跳转：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;代码段&lt;br /&gt;
调用门&lt;br /&gt;
 TSS 任务段&lt;br /&gt;
任务门&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;3）权限检查&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一致代码段：要求  &lt;code&gt;CPL &amp;gt;= DPL&lt;/code&gt; &lt;br /&gt;
 非一致代码段：要求  &lt;code&gt;CPL == DPL&lt;/code&gt;  并且  &lt;code&gt;RPL &amp;lt;= DPL&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;4）加载段描述符&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通过上面的权限检查后，CPU 会将段描述符加载到 CS 段寄存器中&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;5）代码执行&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;CPU 将  &lt;code&gt;CS.Base + Offset&lt;/code&gt;  的值写入 EIP，然后执行 CS:EIP 处的代码&lt;/p&gt;
&lt;p&gt;段间跳转到此结束&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;6）总结&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一致代码段（共享的段）&lt;br /&gt;
特权级高的程序不允许访问特权级低的数据：核心态不允许访问用户态的数据&lt;br /&gt;
特权级低的程序可以访问到特权级高的数据，但特权级不会改变：用户态还是用户态&lt;/p&gt;
&lt;p&gt;非一致代码段（普通代码段）&lt;br /&gt;
只允许同级访问&lt;br /&gt;
绝对禁止不同级别的访问：核心态不是用户态，用户态也不是核心态&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意：直接对代码段进行 JMP 或者 CALL 的操作，无论目标是一致代码段还是非一致代码段，CPL 都不会发生改变。如果要提升 CPL 的权限，只能通过调用门&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;代码跳转实验&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#代码跳转实验&#34;&gt;#&lt;/a&gt; 代码跳转实验&lt;/h2&gt;
&lt;p&gt;验证 JMP FAR 指令执行的结果。自己构造一个段描述符，并使用对应的段选择子进行测试。&lt;/p&gt;
&lt;h3 id=&#34;计算段选择子&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#计算段选择子&#34;&gt;#&lt;/a&gt; 计算段选择子&lt;/h3&gt;
&lt;p&gt;使用 Windbg 找到一处未被使用的段描述符：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image001.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;确定了要被构造的段描述符的地址为： &lt;code&gt;0x8003f048&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;根据 &lt;strong&gt;段描述符地址 = GDT 表首地址 + 索引 × 段描述符长度 = GDT 表首地址 + 索引 × 8&lt;/strong&gt; 可以逆推出&lt;/p&gt;
&lt;p&gt;&lt;code&gt;索引 =（ 段描述符地址 - GDT表首地址）÷ 8&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;即 索引 = (0x8003f048-0x8003f000) ÷ 8 = 0x48 ÷ 8 = 72 ÷ 8 = 9&lt;/p&gt;
&lt;p&gt;既我们的段选择子的索引（Index）为 9，查询（Ti=0）GDT 表，请求特权（RPL=0b11）等级为 3。&lt;/p&gt;
&lt;p&gt;得到： &lt;code&gt;0000 0000 0100 1011&lt;/code&gt;  既  &lt;code&gt;0x4B&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;构造段描述符&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#构造段描述符&#34;&gt;#&lt;/a&gt; 构造段描述符&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;数据位&lt;/th&gt;
&lt;th&gt;31-24&lt;/th&gt;
&lt;th&gt;23&lt;/th&gt;
&lt;th&gt;22&lt;/th&gt;
&lt;th&gt;21&lt;/th&gt;
&lt;th&gt;20&lt;/th&gt;
&lt;th&gt;19-16&lt;/th&gt;
&lt;th&gt;15&lt;/th&gt;
&lt;th&gt;14-13&lt;/th&gt;
&lt;th&gt;12&lt;/th&gt;
&lt;th&gt;11-8&lt;/th&gt;
&lt;th&gt;7-0&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;含义&lt;/td&gt;
&lt;td&gt;Base&lt;/td&gt;
&lt;td&gt;G&lt;/td&gt;
&lt;td&gt;D/B&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;AVL&lt;/td&gt;
&lt;td&gt;Seg.Limit&lt;/td&gt;
&lt;td&gt;P&lt;/td&gt;
&lt;td&gt;DPL&lt;/td&gt;
&lt;td&gt;S&lt;/td&gt;
&lt;td&gt;Type&lt;/td&gt;
&lt;td&gt;Base&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;解释&lt;/td&gt;
&lt;td&gt;基地址&lt;/td&gt;
&lt;td&gt;粒度&lt;/td&gt;
&lt;td&gt;默认操作大小&lt;/td&gt;
&lt;td&gt;固定为 0&lt;/td&gt;
&lt;td&gt;用于系统软件使用&lt;/td&gt;
&lt;td&gt;段大小限制&lt;/td&gt;
&lt;td&gt;有效位&lt;/td&gt;
&lt;td&gt;特权等级&lt;/td&gt;
&lt;td&gt;描述符类型&lt;/td&gt;
&lt;td&gt;段类型&lt;/td&gt;
&lt;td&gt;基地址&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;数值&lt;/td&gt;
&lt;td&gt;00000000&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1111&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;00&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1111&lt;/td&gt;
&lt;td&gt;0000000&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr /&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;数据位&lt;/th&gt;
&lt;th&gt;31-16&lt;/th&gt;
&lt;th&gt;15-0&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;含义&lt;/td&gt;
&lt;td&gt;Base Adress&lt;/td&gt;
&lt;td&gt;Segment Limit&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;解释&lt;/td&gt;
&lt;td&gt;基地址&lt;/td&gt;
&lt;td&gt;段大小限制&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;数值&lt;/td&gt;
&lt;td&gt;0000000000000000&lt;/td&gt;
&lt;td&gt;1111111111111111&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr /&gt;
&lt;p&gt;主要修改了 DPL 为 0；段类型设置为可执行可读，可从较低特权级别调用，可访问的 代码段描述符&lt;/p&gt;
&lt;p&gt;将上面的二进制拼接得到： &lt;code&gt;00cf9f00`0000ffff&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;写入段描述符&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#写入段描述符&#34;&gt;#&lt;/a&gt; 写入段描述符&lt;/h3&gt;
&lt;p&gt;将构造好的段描述符写入&lt;/p&gt;
&lt;p&gt;在 windbg 中使用指令&lt;/p&gt;
&lt;p&gt;&lt;code&gt;eq  8003f048 00cf9f00`0000ffff&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;eq ：edit qword&lt;/code&gt; ，以 qword 的数据宽度编辑修改指定地址的数据&lt;/p&gt;
&lt;p&gt;指令格式为： &lt;code&gt;eq address data&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;修改后再用 windbg 查看&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image002.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;od测试指令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#od测试指令&#34;&gt;#&lt;/a&gt; OD 测试指令&lt;/h3&gt;
&lt;p&gt;使用 OD 随便打开一个软件。选择一个跳转的地址。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;jmp 0x4B:0x0085F472&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image003.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;可以看到 EIP 被修改为了 Offset (偏移)，CS 被修改为了 Selector (段选择子)。EIP 和 CS 同时被修改了。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image004.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;尝试修改cpl&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#尝试修改cpl&#34;&gt;#&lt;/a&gt; 尝试修改 CPL&lt;/h3&gt;
&lt;p&gt;原本的 CPL 为 3，CPL 为当前特权级别，等于 CS 和 SS 的 RPL（请求特权级别）&lt;/p&gt;
&lt;p&gt;前面的其它操作不变，将段选择子的请求特权级别修改为 0&lt;/p&gt;
&lt;p&gt;即将段选择子修改为&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;Index&lt;/th&gt;
&lt;th&gt;TI&lt;/th&gt;
&lt;th&gt;RPL&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;二进制值&lt;/td&gt;
&lt;td&gt;0000 0000 0100 1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;十进制值&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;含义&lt;/td&gt;
&lt;td&gt;索引为 9&lt;/td&gt;
&lt;td&gt;查询 GDT 表&lt;/td&gt;
&lt;td&gt;请求特权等级为 0&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;得到新的段选择子为 &lt;code&gt;0x48&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;使用 OD 执行新的指令&lt;/p&gt;
&lt;p&gt;&lt;code&gt;jmp 0x48:0x0085F47E&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image005.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;可以看到，CS 仍然是 0x4B，CPL 仍然没有发生改变，当前特权等级依旧为 3&lt;/p&gt;
&lt;p&gt;也就是说 CPL 无法通过这种方式改变&lt;/p&gt;
&lt;h1 id=&#34;reference&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#reference&#34;&gt;#&lt;/a&gt; Reference&lt;/h1&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxOTg4NDQ4L2FydGljbGUvZGV0YWlscy8xMDI1Nzk2OTU=&#34;&gt;https://blog.csdn.net/qq_41988448/article/details/102579695&lt;/span&gt;&lt;br /&gt;
&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuNTJwb2ppZS5jbi90aHJlYWQtMTQyMzQ4NC0xLTEuaHRtbA==&#34;&gt;https://www.52pojie.cn/thread-1423484-1-1.html&lt;/span&gt;&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
