{
    "version": "https://jsonfeed.org/version/1",
    "title": "Or0kit • All posts by \"指令前缀\" tag",
    "description": "临渊羡鱼，不如退而结网",
    "home_page_url": "https://Or0kit.github.io",
    "items": [
        {
            "id": "https://or0kit.github.io/Bin/Assembly/HardCode/%E7%A1%AC%E7%BC%96%E7%A0%81-Intel%E6%8C%87%E4%BB%A4%E7%BC%96%E7%A0%81%E7%BB%93%E6%9E%84/",
            "url": "https://or0kit.github.io/Bin/Assembly/HardCode/%E7%A1%AC%E7%BC%96%E7%A0%81-Intel%E6%8C%87%E4%BB%A4%E7%BC%96%E7%A0%81%E7%BB%93%E6%9E%84/",
            "title": "硬编码-Intel指令编码结构",
            "date_published": "2022-04-11T02:24:20.000Z",
            "content_html": "<h1 id=\"楔子\"><a class=\"anchor\" href=\"#楔子\">#</a> 楔子</h1>\n<p>之前看过，不过并没有总结，今天总结一下，以后有时间了，写一个反汇编引擎。<br />\n学习 Intel 的硬编码指令格式主要就是查表了，记住那几张表就好了。</p>\n<h1 id=\"什么是硬编码\"><a class=\"anchor\" href=\"#什么是硬编码\">#</a> 什么是硬编码</h1>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<p>在计算机上程序不过是一堆二进制数字，其想要运行起来，即被 CPU 当成指令执行，是要遵循 Intel 的指令格式。</p>\n<p><img data-src=\"image002.png\" alt=\"\" /></p>\n<p>每一条指令，最短 1 字节，最长 15 字节</p>\n<p>1、Intel 对指令参数的设计了一种表示方式，格式是 Zz 一个大写字母加上一个小写字母。</p>\n<p>2、大写字母表示寻找方式编码（寄存器，ModR/M，跳转相对地址，16:32 地址格式等等），从 A-Z 共 26 种.</p>\n<p>3、小写字母表示操作数的类型（byte，word，dword，fword 等等不定，根据 cpu 模式或改写指令决定）<br />\nz 有大约十几种表示方式。</p>\n<p>4、他们的组合再加上纯寄存器表示了 intel 的所有操作对象。</p>\n<p>具体参见 Intel 开发手卷第 2 卷的 1467 页。有详细的介绍。</p>\n<h1 id=\"经典定长指令\"><a class=\"anchor\" href=\"#经典定长指令\">#</a> 经典定长指令</h1>\n<h2 id=\"会修改寄存器的定长指令\"><a class=\"anchor\" href=\"#会修改寄存器的定长指令\">#</a> 会修改寄存器的定长指令。</h2>\n<ol>\n<li>PUSH/POP</li>\n</ol>\n<p>0x50 \tPUSH EAX<br />\n0x51 \tPUSH ECX<br />\n0x52 \tPUSH EDX<br />\n0x53 \tPUSH EBX<br />\n0x54 \tPUSH ESP<br />\n0x55 \tPUSH EBP<br />\n0x56 \tPUSH ESI<br />\n0x57 \tPUSH EDI</p>\n<p>0x58\tPOP EAX<br />\n0x59\tPOP ECX<br />\n0x5A\tPOP EDX<br />\n0x5B \tPOP EBX<br />\n0x5C \tPOP ESP<br />\n0x5D \tPOP EBP<br />\n0x5E\tPOP ESI<br />\n0x5F \tPOP EDI</p>\n<p><img data-src=\"image003.png\" alt=\"\" /></p>\n<ol start=\"2\">\n<li>INC/DEC：</li>\n</ol>\n<p>0x40 - 0x47\t\tINC ERX<br />\n0x48 - 0x4F\t\tDEC ERX</p>\n<p><img data-src=\"image004.png\" alt=\"\" /></p>\n<ol start=\"3\">\n<li>MOV Rb, Ib</li>\n</ol>\n<p>0xb0 - 0xb7\t\tMOV Rb, Ib</p>\n<ol start=\"4\">\n<li>MOV ERX, Id</li>\n</ol>\n<p>0xb8 - 0xbF\t\tMOV ERX, Id</p>\n<p><img data-src=\"image006.png\" alt=\"\" /></p>\n<ol start=\"5\">\n<li>XCHG EAX, ERX</li>\n</ol>\n<p>0x90 - 0x97\t\tXCHG EAX, ERX</p>\n<p><img data-src=\"image005.png\" alt=\"\" /></p>\n<p>以下的这些知识在 Intel 白皮书上都有，在此做个总结。</p>\n<h3 id=\"特点\"><a class=\"anchor\" href=\"#特点\">#</a> 特点</h3>\n<p>1、记住 32 位、16、8 位的通用寄存器，按照顺序记住.</p>\n<p>EAX ECX EDX EBX ESP EBP ESI EDI<br />\nAX CX DX BX SP BP SI DI<br />\nAL CL DL BL<br />\nAH CH DH BH</p>\n<p>SP BP SI DI 的低 8 位是不能用的，但在 64 位中可以使用分割出的 spl bpl sil dil。</p>\n<p>2、将操作数编码到指令当中</p>\n<h3 id=\"读表\"><a class=\"anchor\" href=\"#读表\">#</a> 读表</h3>\n<p>1、i64/o64/d64</p>\n<p>i64：64 位无效</p>\n<p>o64：只 64 位有效</p>\n<p>d64：64 位模式下，操作数宽度默认为 64 位</p>\n<p>2、关于寄存器</p>\n<p>(1) 当操作码需要使用寄存器做为操作数时，寄存器的名字说明其宽度是 64、32、16、8 位.</p>\n<p>(2) eXX 比如 eAX 可以表示 AX EAX</p>\n<p>(3) rXX 比如 rAX 可以表示 AX EAX RAX</p>\n<h2 id=\"会修改eip的定长指令\"><a class=\"anchor\" href=\"#会修改eip的定长指令\">#</a> 会修改 EIP 的定长指令</h2>\n<ol>\n<li>0x70 - 0x7F</li>\n</ol>\n<p>条件跳转，后跟一个字节立即数的偏移 (有符号)，共两个字节。</p>\n<p>如果条件成立，跳转到 当前指令地址 + 当前指令长度 + Ib</p>\n<p>最大值：向前跳 7f，向后跳 80</p>\n<p>0x70  JO<br />\n0x71\tJNO<br />\n0x72\tJB/JNAE/JC<br />\n0x73\tJNB/JAE/JNC<br />\n0x74\tJZ/JE<br />\n0x75\tJNZ/JNE<br />\n0x76\tJBE/JNA<br />\n0x77\tJNBE/JA<br />\n0x78\tJS<br />\n0x79\tJNS<br />\n0x7A\tJP/JPE<br />\n0x7B\tJNP/JPO<br />\n0x7C\tJL/JNGE<br />\n0x7D\tJNL/JGE<br />\n0x7E\tJLE/JNG<br />\n0x7F\tJNLE/JG</p>\n<p><img data-src=\"image007.png\" alt=\"\" /></p>\n<ol start=\"2\">\n<li>0x0F 0x80 - 0x0F 0x8F</li>\n</ol>\n<p>条件跳转，后跟四个字节立即数的偏移 (有符号)，共五个字节。</p>\n<p>如果条件成立，跳转到 当前指令地址 + 当前指令长度 + Id</p>\n<p>最大值：向前跳 7FFFFFFFF，向后跳 80000000</p>\n<p>0x0F 0x80  \tJO<br />\n0x0F 0x81\t\tJNO<br />\n0x0F 0x82\t\tJB/JNAE/JC<br />\n0x0F 0x83\t\tJNB/JAE/JNC<br />\n0x0F 0x84\t\tJZ/JE<br />\n0x0F 0x85\t\tJNZ/JNE<br />\n0x0F 0x86\t\tJBE/JNA<br />\n0x0F 0x87\t\tJNBE/JA<br />\n0x0F 0x88\t\tJS<br />\n0x0F 0x89\t\tJNS<br />\n0x0F 0x8A\t\tJP/JPE<br />\n0x0F 0x8B\t\tJNP/JPO<br />\n0x0F 0x8C\t\tJL/JNGE<br />\n0x0F 0x8D\t\tJNL/JGE<br />\n0x0F 0x8E\t\tJLE/JNG<br />\n0x0F 0x8F\t\tJNLE/JG</p>\n<p><img data-src=\"image008.png\" alt=\"\" /></p>\n<ol start=\"3\">\n<li>其他指令</li>\n</ol>\n<p>0xE0  \tLOOPNE/LOOPNZ Ib (Jb)\t\t\t共 2 字节<br />\n ECX = ECX - 1  当 ZF = 0 &amp;&amp; ECX!=0 时跳转到 当前指令地址 + 当前指令长度 + Ib</p>\n<p>0XE1     \tLOOPE/LOOPZ Ib (Jb)\t\t\t共 2 字节<br />\n ECX = ECX - 1  当 ZF = 1 &amp;&amp; ECX != 0 时跳转到 当前指令地址 + 当前指令长度 + Ib</p>\n<p>0XE2\tLOOP Ib (Jb)\t\t\t共 2 字节<br />\n ECX = ECX - 1  当 ECX!=0 时跳转到 当前指令地址 + 当前指令长度 + Ib</p>\n<p>0XE3\tJrCXZ Ib (Jb) (在 32 位模式中，rCX 为 ECX)\t\t\t\t\t共 2 字节<br />\n当 ECX = 0 时跳转到 当前指令地址 + 当前指令长度 + Ib<br />\n (自己控制步长)</p>\n<p><img data-src=\"image009.png\" alt=\"\" /></p>\n<p>0xE8\tCALL Id (Jd)  \t\t共 5 字节<br />\n CALL 指令的下一条指令地址入栈后，跳转到 当前指令地址 + 当前指令长度 + Id</p>\n<p>0xE9\tJMP Id (Jd)\t\t共 5 字节<br />\n跳转到 当前指令地址 + 当前指令长度 + Id</p>\n<p><strong>8 个段寄存器： ES CS SS DS FS GS LDTR TR (顺序固定)(段寄存器实际是个结构体，共 96 位，其中仅 16 位是汇编指令可以访问到的）</strong></p>\n<p>0xEA\tJMP Ap （Ap：六字节长度的直接地址）\t\t\t\t共 7 字节<br />\n JMP CS:Id  将 Ap 中的高 2 位赋值给 CS，低 4 位直接赋值给 EIP， 即跳转</p>\n<p>EA 12345678 1B00     JMP FAR 001B:78563412</p>\n<p><img data-src=\"image010.png\" alt=\"\" /></p>\n<p>0xEB\tJMP Ib (Jb) （短跳）<br />\n跳转到 当前指令地址 + 当前指令长度 + Ib</p>\n<p>0xC3 \tRET\t共 1 字节<br />\n EIP 出栈</p>\n<p>0xC2\tRET Iw\t共 3 字节<br />\n EIP 出栈后，ESP = ESP + Iw</p>\n<p>0XCB\tRETF （return far） 共 1 字节<br />\n出栈 8 个字节，低 4 个字节赋值给 EIP, 高 4 个字节中低 2 位赋值给 CS</p>\n<p>0xCA\tRETF Iw\t共 3 字节<br />\n出栈 8 个字节，低 4 个字节赋值给 EIP, 高 4 个字节中低 2 位赋值给 CS 后，ESP = ESP + Iw</p>\n<p>ret  -&gt; pop eip<br />\nretf -&gt; pop eip, pop cs</p>\n<p><img data-src=\"image011.png\" alt=\"\" /></p>\n<h1 id=\"经典变长指令\"><a class=\"anchor\" href=\"#经典变长指令\">#</a> 经典变长指令</h1>\n<h2 id=\"经典变长指令之modrm\"><a class=\"anchor\" href=\"#经典变长指令之modrm\">#</a> 经典变长指令之 ModR/M</h2>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>0x88  MOV Eb, Gb\t\t\tG：通用寄存器</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>0x89\tMOV Ev, Gv\t\t\tE：寄存器 &#x2F; 内存</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>0x8A\tMOV Gb, Eb\t\t\tb：字节</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>0x8B\tMOV Gv, Ev\t\t\tv：Word, doubleword or quadword</pre></td></tr></table></figure><p>当指令中出现内存操作对象的时候，就需要在操作码后面附加一个字节来进行补充说明，这个字节被称为 ModR/M。\t\t\t<br />\n该字节的 8 个比特位被分成了三部分：</p>\n<table>\n<thead>\n<tr>\n<th>7-6</th>\n<th>5-3</th>\n<th>2-0</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Mod</td>\n<td>Reg/Opcode</td>\n<td>R/M</td>\n</tr>\n</tbody>\n</table>\n<p><strong>其中，Reg/Opcode (第 3、4、5 位，共 3 个字节) 描述指令中的 G 部分，即寄存器</strong></p>\n<table>\n<thead>\n<tr>\n<th>寄存器宽度</th>\n<th>000</th>\n<th>001</th>\n<th>010</th>\n<th>011</th>\n<th>100</th>\n<th>101</th>\n<th>110</th>\n<th>111</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>32</td>\n<td>EAX</td>\n<td>ECX</td>\n<td>EDX</td>\n<td>EBX</td>\n<td>ESP</td>\n<td>EBP</td>\n<td>ESI</td>\n<td>EDI</td>\n</tr>\n<tr>\n<td>8</td>\n<td>AL</td>\n<td>CL</td>\n<td>DL</td>\n<td>BL</td>\n<td>AH</td>\n<td>CH</td>\n<td>DH</td>\n<td>BH</td>\n</tr>\n</tbody>\n</table>\n<p><strong>Mod (第 6、7 位) 和 R/M (第 0、1、2 位) 共同描述指令中的 E 部分，即寄存器 / 内存</strong></p>\n<p>那么，这 8 个位具体是如何工作的呢，Inter 操作手册给出了一张表</p>\n<p><img data-src=\"image012.png\" alt=\"\" /></p>\n<p>以下内容就是解释这个表。</p>\n<p>前面我们已经讨论了 Reg/Opcode 部分 (即 3、4、5 位) 是怎样描述寄存器的\t\t<br />\n接下来我们重点说一下 Mod 和 R/M 是怎样合作描述寄存器 / 内存的</p>\n<h3 id=\"mod-00\"><a class=\"anchor\" href=\"#mod-00\">#</a> Mod = 00</h3>\n<p><strong>当 Mod = 00 时，ModR/M 字节通过寄存器直接进行内存寻址</strong></p>\n<p>例如当操作指令为 88 01 时，其对应的汇编为 MOV BYTE PTR DS:[ECX], AL</p>\n<p>88 是操作指令，其后跟随的 01 为 ModR/M</p>\n<p><img data-src=\"image014.png\" alt=\"\" /></p>\n<p>0x88 描述了操作数宽度为 b (byte)，且操作数的顺序为 Eb Gb，所以这条汇编指令为 MOV BYTE PTR DS:[ECX], AL</p>\n<p>同理可以分析出如下操作指令对应的汇编指令</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>8801 | mov byte ptr ds:[ecx],al</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>8901 | mov dword ptr ds:[ecx],eax</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>8A01 | mov al,byte ptr ds:[ecx]</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>8B01 | mov eax,dword ptr ds:[ecx]</pre></td></tr></table></figure><p>需要注意的：<br />\n<strong>ESP 指向栈顶，是浮动的，不确定的，Inter 将这个编码废弃，由另外的格式来说明。</strong>\t<br />\n<strong>EBP 指向栈底，而 [EBP] 通常存储上一个 EBP，所以 [EBP] 无数据操作意义，Inter 将这个编码废弃，改为立即数寻址。</strong></p>\n<p>例如 88 05 12 34 56 78 的汇编指令为 MOV BYTE PTR DS:[78563412], AL</p>\n<p>在 Intel 白皮书中 2-2 的表中可以看到对其有解释当 ModR/M 为 05 0D 15 1D 25 2D 35 3D…… 时，这个指令的后面还会接着取 4 个字节。</p>\n<p>例如：<br />\n882578563412 -&gt; mov byte ptr ds:[0x12345678],ah<br />\n892578563412 -&gt; mov dword ptr ds:[0x12345678],esp</p>\n<h3 id=\"mod-01\"><a class=\"anchor\" href=\"#mod-01\">#</a> Mod = 01</h3>\n<p><strong>当 Mod = 01 时，ModR/M 字节通过寄存器 + I8 进行内存寻址 (I 为立即数，即 8 位立即数)</strong></p>\n<p>例如当操作指令为 88 41 12 时，其对应的汇编为 MOV BYTE PTR DS:[ECX+12],AL<br />\n88 是操作指令，其后跟随的 41 为 ModR/M</p>\n<p><img data-src=\"image015.png\" alt=\"\" /></p>\n<p>所以这条汇编指令为 MOV BYTE PTR DS:[ECX+12],AL</p>\n<p>同理可以分析出如下操作指令对应的汇编指令</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>8841 12 | mov byte ptr ds:[ecx+12],al  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>8941 12 | mov dword ptr ds:[ecx+12],eax</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>8A41 12 | mov al,byte ptr ds:[ecx+12]  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>8B41 12 | mov eax,dword ptr ds:[ecx+12]</pre></td></tr></table></figure><p>当 R/M = 100 时 (即 ESP)，该指令编码废弃，修改为其他含义，既 SIB，后面再一起总结。</p>\n<h3 id=\"mod-10\"><a class=\"anchor\" href=\"#mod-10\">#</a> Mod = 10</h3>\n<p><strong>当 Mod = 10 时，ModR/M 字节通过寄存器 + I32 进行内存寻址</strong></p>\n<p>例如当操作指令为 88 81 12 34 56 78 时，其对应的汇编为 MOV BYTE PTR DS:[ECX+78563412],AL</p>\n<p>88 是操作指令，其后跟随的 81 为 ModR/M</p>\n<p><img data-src=\"image016.png\" alt=\"\" /></p>\n<p>所以这条汇编指令为 MOV BYTE PTR DS:[ECX+78563412],AL</p>\n<p>同理可以分析出如下操作指令对应的汇编指令</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>8881 78563412 | mov byte ptr ds:[ecx+12345678],al  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>8981 78563412 | mov dword ptr ds:[ecx+12345678],eax</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>8A81 78563412 | mov al,byte ptr ds:[ecx+12345678]  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>8B81 78563412 | mov eax,dword ptr ds:[ecx+12345678]</pre></td></tr></table></figure><p>当 R/M = 100 时 (即 ESP)，该指令编码废弃，修改为其他含义，既 SIB，后面再一起总结。</p>\n<h3 id=\"mod-11\"><a class=\"anchor\" href=\"#mod-11\">#</a> Mod = 11</h3>\n<p><strong>当 Mod = 11 时，ModR/M 字节直接操作两个寄存器</strong></p>\n<p>例如当操作指令为 88 C1 时，其对应的汇编为 MOV CL,AL</p>\n<p>88 是操作指令，其后跟随的 C1 为 ModR/M</p>\n<p><img data-src=\"image017.png\" alt=\"\" /></p>\n<p>所以这条汇编指令为 MOV CL,AL</p>\n<p>同理可以分析出如下操作指令对应的汇编指令</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>88C1 | mov cl,al   </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>89C1 | mov ecx,eax </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>8AC1 | mov al,cl   </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>8BC1 | mov eax,ecx</pre></td></tr></table></figure><h2 id=\"经典变长指令-regopcode\"><a class=\"anchor\" href=\"#经典变长指令-regopcode\">#</a> 经典变长指令 Reg/Opcode</h2>\n<table>\n<thead>\n<tr>\n<th>7-6</th>\n<th>5—3</th>\n<th>2-0</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Mod</td>\n<td>Reg/Opcode</td>\n<td>R/M</td>\n</tr>\n</tbody>\n</table>\n<p>在上面，3-5 位用来标识寄存器，Mod 字段 与 R/M 字段共同用来标识寄存器与内存</p>\n<p>但 3-5 字段，并不仅仅用来标识寄存器，有些时候，用来标识 Opcode</p>\n<p>参见 Table A-2 中 ：</p>\n<p><img data-src=\"image018.png\" alt=\"\" /></p>\n<p>80 81 82 83 这几个编码并没有给出具体的操作码。</p>\n<p>这里要注意：<strong>凡是出现 Grp 的，均参见 TableA-6</strong></p>\n<p><img data-src=\"image019.png\" alt=\"\" /></p>\n<p>举例说明：</p>\n<p>80 65 08 FF</p>\n<p>查表步骤：</p>\n<p>1、第一个字节为 80 查 Table-2 表，得到对应结构：Eb,Ib</p>\n<p>2、第二个字节为 ModR/M 字段，所以查分 65:</p>\n<p>01 100 101</p>\n<p>Mod 与 R/M 字段 查 Table2-2 得到对应的结构：[EBP+DIS8]</p>\n<p>3、100 字段 查表 TableA-6 得到对应操作码为：AND</p>\n<p>4、最终的指令格式：</p>\n<p>AND [ebp+dis8],Ib</p>\n<p>AND BYTE PTR SS:[EBP+08],0xFF</p>\n<h2 id=\"经典变长指令之sib字段\"><a class=\"anchor\" href=\"#经典变长指令之sib字段\">#</a> 经典变长指令之 SIB 字段</h2>\n<p>ModR/M 字段是用来进行内存寻址的，可当地址形如 DS:[EAX + ECX*2 + 12345678] 时，仅仅靠 ModR/M 字段，是描述不出来的。\t\t\t\t\t\t\t\t<br />\n这时就在 ModR/M 后面增加一个 SIB 字节，与 ModR/M 字段共同描述。</p>\n<p>下图是前面没有涉及到的三种情况。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Address</th>\n<th style=\"text-align:left\">Mod</th>\n<th style=\"text-align:left\">R/M</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">[--][--]</td>\n<td style=\"text-align:left\">00</td>\n<td style=\"text-align:left\">100</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">[--][--]+disp8</td>\n<td style=\"text-align:left\">01</td>\n<td style=\"text-align:left\">100</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">[--][--]+disp32</td>\n<td style=\"text-align:left\">10</td>\n<td style=\"text-align:left\">100</td>\n</tr>\n</tbody>\n</table>\n<p>这三种情况表示，在 ModR/M 字节后，还紧跟着一个 SIB 字节。SIB 字节的 8 个位被分成了三部分：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">7—6</th>\n<th style=\"text-align:left\">5-3</th>\n<th style=\"text-align:left\">2-0</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">Scale</td>\n<td style=\"text-align:left\">Index</td>\n<td style=\"text-align:left\">Base</td>\n</tr>\n</tbody>\n</table>\n<p>在例子 DS:[EAX + ECX*2 + 12345678] 中， Scale 描述 21， Index 描述 ECX, Base 描述 EAX，而 12345678 由 ModR/M 字段决定。\t\t\t\t\t\t\t\t\t\t<br />\n所以 SIB 字段描述的方式为：</p>\n<p><code>Base + Index*2^Scale</code>  (Scale 描述 2Scale，所以只能为 *1 *2 *4 *8)</p>\n<h3 id=\"例子分析\"><a class=\"anchor\" href=\"#例子分析\">#</a> 例子分析</h3>\n<p>下面我们通过分析指令，来看看 SIB 是怎么工作的</p>\n<p>MOV BYTE PTR DS:[EAX+ECX*2+78563412],AL</p>\n<p>操作码</p>\n<p>这条指令的原型为 MOV Eb Gb, 所以操作码为 0x88。且操作数中有 Eb，所以必然存在 ModR/M 字段</p>\n<p><strong>ModR/M 字节</strong></p>\n<p>1、Gb 为 AL，所以 Reg/Opcode 部分为 000</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Mod</th>\n<th style=\"text-align:center\">Reg/Opcode</th>\n<th style=\"text-align:center\">R/M</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">0 0 0</td>\n<td style=\"text-align:center\"></td>\n</tr>\n</tbody>\n</table>\n<p>2、内存地址为 寄存器 + I32 的格式，所以 Mod 部分为 10，偏移为 78563412</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Mod</th>\n<th style=\"text-align:center\">Reg/Opcode</th>\n<th style=\"text-align:center\">R/M</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1 0</td>\n<td style=\"text-align:center\">000</td>\n<td style=\"text-align:center\"></td>\n</tr>\n</tbody>\n</table>\n<p>3、内存地址中寄存器部分多个寄存器，即在 ModR/M 字节后，还跟着一个 SIB 字节，所以 R/M 部分为 100</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Mod</th>\n<th style=\"text-align:center\">Reg/Opcode</th>\n<th style=\"text-align:center\">R/M</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1 0</td>\n<td style=\"text-align:center\">000</td>\n<td style=\"text-align:center\">1 0 0</td>\n</tr>\n</tbody>\n</table>\n<p>由此，ModR/M 字节为 0x84</p>\n<p><strong>SIB 字节</strong></p>\n<p>1、DS:[EAX+ECX*2+78563412] 中，Base 对应着 EAX，所以 Base 部分为 000</p>\n<table>\n<thead>\n<tr>\n<th>Scale</th>\n<th>Index</th>\n<th style=\"text-align:center\">Base</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td></td>\n<td style=\"text-align:center\">0 0 0</td>\n</tr>\n</tbody>\n</table>\n<p>2、Index 对应着 ECX，所以 Index 部分为 001</p>\n<table>\n<thead>\n<tr>\n<th>Scale</th>\n<th style=\"text-align:center\">Index</th>\n<th style=\"text-align:center\">Base</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td style=\"text-align:center\">0 0 1</td>\n<td style=\"text-align:center\">0 0 0</td>\n</tr>\n</tbody>\n</table>\n<p>3、Scale 对应着 21，所以 Scale 部分为 01</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Scale</th>\n<th style=\"text-align:center\">Index</th>\n<th style=\"text-align:center\">Base</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">0 1 0</td>\n<td style=\"text-align:center\">0 0 1</td>\n<td style=\"text-align:center\">0 0 0</td>\n</tr>\n</tbody>\n</table>\n<p>由此，SIB 字节为 0x48</p>\n<p>以上总结为：</p>\n<p><img data-src=\"image020.png\" alt=\"\" /></p>\n<p>由上，可得出指令编码为 88 84 48， 再加上偏移 12345678，完整的指令编码为 88 84 48 12 34 56 78</p>\n<p>在 xdbg 中查看：</p>\n<p>888448 12345678 | mov byte ptr ds:[eax+ecx*2+78563412],al</p>\n<p>无误！</p>\n<p>SIB 字段的图表如下</p>\n<p><img data-src=\"image013.png\" alt=\"\" /></p>\n<p>1、当 Index = 100b 时，Index 被 0 替代，此时只有 Base 有效</p>\n<p>2、当 Base = 101b 时，Base 被 0 替代，此时只用 Index 有效</p>\n<p>作业：</p>\n<blockquote>\n<p><strong>89 2C 15</strong></p>\n</blockquote>\n<p>89 mov Ev, Gv</p>\n<p>2C --&gt; 00 101 100</p>\n<p>Mod 0 Reg/Opcode 5 R/M 4</p>\n<p>Reg/Opcode 5 --&gt;  mov Ev, ebp</p>\n<p>Mod 0 R/M 4 --&gt; SIB --&gt;  mov [-][-],ebp</p>\n<p>15 --&gt; 00 010 101</p>\n<p>Scale 0 Index 2 Base 5</p>\n<p>Base 5 Mod 0 --&gt; [Scale Index]+ dip32</p>\n<p>[Scale Index] --&gt; Scale 0 Index 2  --&gt; [edx]</p>\n<p>mov [edx+dip32],ebp</p>\n<blockquote>\n<p><strong>89AC15</strong></p>\n</blockquote>\n<p>89 mov Ev, Gv</p>\n<p>AC --&gt; 10 101 100</p>\n<p>Mod 2 Reg/Opcode 5 R/M 4</p>\n<p>Reg/Opcode 5 --&gt;  mov Ev, ebp</p>\n<p>Mod 0 R/M 4 --&gt; SIB --&gt;  mov [-][-],ebp</p>\n<p>15 --&gt; 00 010 101</p>\n<p>Scale 0 Index 2 Base 5</p>\n<p>Base 5 Mod 2 --&gt; [Scale Index] + dip32 + [EBP]</p>\n<p>[Scale Index] --&gt; Scale 0 Index 2  --&gt; [edx]</p>\n<p>mov [edx+ebp+dip32],ebp</p>\n<blockquote>\n<p><strong>898461</strong></p>\n</blockquote>\n<p>89 mov Ev,Gv</p>\n<p>84 --&gt; 10 000 100</p>\n<p>Mod 2 Reg/Opcode 0 R/M 4</p>\n<p>Reg/Opcode 0 --&gt; mov Ev,eax</p>\n<p>Mod 2 R/M 4 --&gt; SIB --&gt; mov SIB+dip32 ,eax</p>\n<p>SIB 的描述为：  <code>Base + Index*2^Scale</code></p>\n<p>61 --&gt; 01 100 001</p>\n<p>Scale 1 Index 4 Base 1</p>\n<p>Base 1 --&gt; ecx</p>\n<p>Scale 1 Index 4 --&gt; none</p>\n<p>所以 SIB 为 ecx</p>\n<p>mov [ecx+dip32],eax</p>\n<h1 id=\"指令前缀\"><a class=\"anchor\" href=\"#指令前缀\">#</a> 指令前缀</h1>\n<ol>\n<li>段前缀：</li>\n</ol>\n<p>段寄存器的作用：早期 8086cpu 寻址范围小，Inter 便通过段寄存器来拓展内存。即通过段寄存器基址 + 偏移的方式来寻址。</p>\n<p>[] 中的地址为有效地址 (Effect Address)，有效地址 + 段寄存器基址才是实际地址 LA (线性地址 Line Address)。</p>\n<p>线性地址 = 段基址 + 有效地址</p>\n<p>在后来的 80386 时，cpu 的寻址范围大大提升，这些段寄存器便被用作了其他用途。但是 DS:[] 类似</p>\n<p>这种寻址格式却被保留了下来。</p>\n<p>实际上操作码已经决定了寻址时使用哪个段寄存器作为基址，不需要其他字节描述。</p>\n<blockquote>\n<p>1、如果没有特别说明，[] 前为 DS，即 DS:[]\t<br />\n2、PUSH POP 指令，以及在 [] 中使用 ESP/EBP 的，使用 SS 段\t<br />\n3、在 [Base + Index*2Scale + I] 中，以 Base 为判断条件，没有特别说明，用 DS。如果 Base 为 ESP/EBP，则用 SS 段.\t<br />\n4、串操作指令一般使用 ES。MOV ES:[EDI] DS:[ESI] 中，目标 EDI 使用 ES 段，其他使用 DS 段.\t<br />\n5、EIP 指向当前指令，EIP 取指令时使用的是 CS 段.\t<br />\n6、如果指令加段寄存器前缀，则该条指令一律用这个段，如果加多个段寄存器前缀，默认只看 op 前的那个.</p>\n</blockquote>\n<p>26 - es<br />\n2e - cs<br />\n36 - ss<br />\n3e - ds<br />\n64 - fs<br />\n65 - gs</p>\n<p>例子：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>| 898461 00000000    | mov dword ptr ds:[ecx],eax</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>| 26:898461 00000000 | mov dword ptr es:[ecx],eax</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>| 2E:898461 00000000 | mov dword ptr cs:[ecx],eax</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>| 36:898461 00000000 | mov dword ptr ss:[ecx],eax</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>| 3E:898461 00000000 | mov dword ptr ds:[ecx],eax</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>| 64:898461 00000000 | mov dword ptr fs:[ecx],eax</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>| 65:898461 00000000 | mov dword ptr gs:[ecx],eax</pre></td></tr></table></figure><ol start=\"2\">\n<li>操作指令前缀</li>\n</ol>\n<p>0x66 \t将操作数改为 16 字节。</p>\n<p>例子 50 为 PUSH EAX, 而 66 50 则为 PUSH AX</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>50    PUSH EAX\t</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>66:50 PUSH AX</pre></td></tr></table></figure><ol start=\"3\">\n<li>操作指令前缀：修改默认寻址方式</li>\n</ol>\n<p>0x67 \t将操作数改为 16 字节。</p>\n<p>例子 50 为 PUSH EAX, 而 66 50 则为 PUSH AX</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>8801          MOV BYTE PTR DS:[ECX],AL\t</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>67:8801       MOV BYTE PTR DS:[BX+DI],AL</pre></td></tr></table></figure><p>指令前缀更多信息参见 Intel 白皮书第 2 卷的 2.1.1</p>\n<h1 id=\"硬编码总结\"><a class=\"anchor\" href=\"#硬编码总结\">#</a> 硬编码总结</h1>\n<p>1、操作码决定后面有没有 ModR/M 字段和立即数</p>\n<p>2、ModR/M 决定后面有没有 SIB 字节和偏移</p>\n<p>3、操作指令中只要包含 Ev/Eb，则指令中一定有 ModR/M 字节</p>\n<p>4、只需要把操作码确定下来，那么后面有什么字段，就都能确定了。即一切由操作码决定。</p>\n<p>5、操作码长度，需要查的对应的表。</p>\n<p>一个字节：00 - FF (TableA-2   0F 除外)</p>\n<p>两个字节：0F 00 - 0F FF (TableA-3)</p>\n<p>三个字节：0F 38 / 0F 3A (TableA-3 TableA-4 TableA-5)</p>\n<p>有一些硬编码不同，但他们实现的汇编指令一样。</p>\n<p>例如：<br />\n8901 与 898461 00000000 都代表着 mov [ecx],eax;</p>\n<h1 id=\"reference\"><a class=\"anchor\" href=\"#reference\">#</a> Reference</h1>\n<p>滴水硬编码课件</p>\n",
            "tags": [
                "经典定长指令",
                "经典变长指令",
                "指令前缀"
            ]
        }
    ]
}