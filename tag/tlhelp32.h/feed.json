{
    "version": "https://jsonfeed.org/version/1",
    "title": "Or0kit • All posts by \"tlhelp32.h\" tag",
    "description": "临渊羡鱼，不如退而结网",
    "home_page_url": "https://Or0kit.github.io",
    "items": [
        {
            "id": "https://or0kit.github.io/Bin/Win32/WinAPI-%E8%BF%9B%E7%A8%8B%E9%81%8D%E5%8E%86%E4%B8%8E%E6%A8%A1%E5%9D%97%E9%81%8D%E5%8E%86/",
            "url": "https://or0kit.github.io/Bin/Win32/WinAPI-%E8%BF%9B%E7%A8%8B%E9%81%8D%E5%8E%86%E4%B8%8E%E6%A8%A1%E5%9D%97%E9%81%8D%E5%8E%86/",
            "title": "WinAPI-进程遍历与模块遍历",
            "date_published": "2021-11-16T08:49:31.000Z",
            "content_html": "<h1 id=\"createtoolhelp32snapshot函数tlhelp32h\"><a class=\"anchor\" href=\"#createtoolhelp32snapshot函数tlhelp32h\">#</a> CreateToolhelp32Snapshot 函数 (tlhelp32.h)</h1>\n<p>CreateToolhelp32Snapshot 可以通过获取进程信息为指定的进程、进程使用的堆 [HEAP]、模块 [MODULE]、线程建立一个快照。说到底，可以获取系统中正在运行的进程信息，线程信息等。</p>\n<h2 id=\"函数原型\"><a class=\"anchor\" href=\"#函数原型\">#</a> 函数原型</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>HANDLE WINAPI <span class=\"token function\">CreateToolhelp32Snapshot</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    DWORD dwFlags<span class=\"token punctuation\">,</span>             <span class=\"token comment\">// 用来指定 “快照” 中需要返回的对象，可以是 TH32CS_SNAPPROCESS 等</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    DWORD th32ProcessID        <span class=\"token comment\">// 一个进程 ID 号，用来指定要获取哪一个进程的快照，当获取系统进程列表或获取 当前进程快照时可以设为 0</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"参数详解\"><a class=\"anchor\" href=\"#参数详解\">#</a> 参数详解</h2>\n<h3 id=\"dwflags\"><a class=\"anchor\" href=\"#dwflags\">#</a> dwFlags</h3>\n<p>要包括在快照中的系统部分。此参数可以是以下一个或多个值。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">值</th>\n<th style=\"text-align:left\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">TH32CS_INHERIT 0x80000000</td>\n<td style=\"text-align:left\">表示快照句柄是可继承的。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">TH32CS_SNAPALL</td>\n<td style=\"text-align:left\">包括系统中的所有进程和线程，以及 th32ProcessID 中指定的进程的堆和模块。等效于使用 OR 运算指定组合的 TH32CS_SNAPHEAPLIST，TH32CS_SNAPMODULE，TH32CS_SNAPPROCESS 和 TH32CS_SNAPTHREAD 值。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">TH32CS_SNAPHEAPLIST 0x00000001</td>\n<td style=\"text-align:left\">包括快照中 th32ProcessID 指定的进程的所有堆。要枚举堆，请参阅 Heap32ListFirst。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">TH32CS_SNAPMODULE 0x00000008</td>\n<td style=\"text-align:left\">包括快照中 th32ProcessID 指定的进程的所有模块。要枚举模块，请参阅 Module32First。如果函数失败并返回 ERROR_BAD_LENGTH，请重试该函数直到成功。64 位 Windows：在 32 位进程中使用此标志包括 th32ProcessID 指定的进程的 32 位模块，而在 64 位进程中使用该进程包括 64 位模块。要包括来自 64 位进程的 th32ProcessID 指定的进程的 32 位模块，请使用 TH32CS_SNAPMODULE32 标志。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">TH32CS_SNAPMODULE32 0x00000010</td>\n<td style=\"text-align:left\">包括从 64 位进程调用时快照中的 th32ProcessID 指定的进程的所有 32 位模块。该标志可以与 TH32CS_SNAPMODULE 或 TH32CS_SNAPALL 组合使用。如果函数失败并返回 ERROR_BAD_LENGTH，请重试该函数直到成功。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">TH32CS_SNAPPROCESS 0x00000002</td>\n<td style=\"text-align:left\">包括快照中系统的所有进程。要枚举进程，请参阅 Process32First。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">TH32CS_SNAPTHREAD 0x00000004</td>\n<td style=\"text-align:left\">包括快照中系统的所有线程。要枚举线程，请参阅 Thread32First。要标识属于特定进程的线程，在枚举线程时将其进程标识符与 THREADENTRY32 结构的 th32OwnerProcessID 成员进行比较。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"th32processid\"><a class=\"anchor\" href=\"#th32processid\">#</a> th32ProcessID</h3>\n<p>要包括在快照中的进程的进程标识符。<br />\n此参数可以为零以指示当前进程。<br />\n当指定  <code>TH32CS_SNAPHEAPLIST</code> ， <code>TH32CS_SNAPMODULE</code> ， <code>TH32CS_SNAPMODULE32</code>  或  <code>TH32CS_SNAPALL</code>  值时，使用此参数。否则，它将被忽略，并且所有进程都包括在快照中。<br />\n如果指定的进程是空闲进程或其中一个 CSRSS 进程，则此函数将失败，并且最后一个错误代码为  <code>ERROR_ACCESS_DENIED</code> ，因为它们的访问限制会阻止用户级代码打开它们。</p>\n<p>如果指定的进程是 64 位进程，并且调用程序是 32 位进程，则此函数失败，最后一个错误代码为  <code>ERROR_PARTIAL_COPY</code> （299）。</p>\n<h2 id=\"返回值\"><a class=\"anchor\" href=\"#返回值\">#</a> 返回值</h2>\n<p>如果函数成功，它将返回一个打开的句柄到指定的快照。</p>\n<p>如果函数失败，则返回  <code>INVALID_HANDLE_VALUE</code> 。要获取扩展错误信息，请调用  <code>GetLastError</code> 。可能的错误代码包括  <code>ERROR_BAD_LENGTH</code> 。</p>\n<h1 id=\"相关函数与结构体\"><a class=\"anchor\" href=\"#相关函数与结构体\">#</a> 相关函数与结构体</h1>\n<h2 id=\"module32first-函数-tlhelp32h\"><a class=\"anchor\" href=\"#module32first-函数-tlhelp32h\">#</a> Module32First 函数 (tlhelp32.h)</h2>\n<p>检索有关与进程关联的第一个模块的信息。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>BOOL <span class=\"token function\">Module32First</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token punctuation\">[</span>in<span class=\"token punctuation\">]</span>      HANDLE          hSnapshot<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token punctuation\">[</span>in<span class=\"token punctuation\">,</span> out<span class=\"token punctuation\">]</span> LPMODULEENTRY32 lpme</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"参数\"><a class=\"anchor\" href=\"#参数\">#</a> 参数</h3>\n<p><code>[in] hSnapshot</code>  从上一次调用 CreateToolhelp32Snapshot 函数返回的快照句柄 。</p>\n<p><code>[in, out] lpme</code>  指向 MODULEENTRY32 结构的指针。</p>\n<h3 id=\"返回值-2\"><a class=\"anchor\" href=\"#返回值-2\">#</a> 返回值</h3>\n<p>如果模块列表的第一个条目已复制到缓冲区，则返回  <code>TRUE</code> ，否则返回  <code>FALSE</code> 。如果不存在模块或快照不包含模块信息，则  <code>GetLastError</code>  函数将返回  <code>ERROR_NO_MORE_FILES</code>  错误值。</p>\n<h2 id=\"module32next-函数-tlhelp32h\"><a class=\"anchor\" href=\"#module32next-函数-tlhelp32h\">#</a> Module32Next 函数 (tlhelp32.h)</h2>\n<p>检索有关与进程或线程关联的下一个模块的信息。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>BOOL <span class=\"token function\">Module32Next</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token punctuation\">[</span>in<span class=\"token punctuation\">]</span>  HANDLE          hSnapshot<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token punctuation\">[</span>out<span class=\"token punctuation\">]</span> LPMODULEENTRY32 lpme</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"参数-2\"><a class=\"anchor\" href=\"#参数-2\">#</a> 参数</h3>\n<p><code>[in] hSnapshot</code>  从上一次调用 CreateToolhelp32Snapshot 函数返回的快照句柄 。</p>\n<p><code>[out] lpme</code>  指向 MODULEENTRY32 结构的指针 。</p>\n<h3 id=\"返回值-3\"><a class=\"anchor\" href=\"#返回值-3\">#</a> 返回值</h3>\n<p>如果模块列表的下一个条目已复制到缓冲区，则返回 TRUE，否则返回 FALSE。如果没有更多模块存在，则 GetLastError 函数将返回  <code>ERROR_NO_MORE_FILES</code>  错误值。</p>\n<h2 id=\"moduleentry32-结构体\"><a class=\"anchor\" href=\"#moduleentry32-结构体\">#</a> MODULEENTRY32 结构体</h2>\n<p>描述属于指定进程的模块列表中的条目。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">tagMODULEENTRY32</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  DWORD   dwSize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  DWORD   th32ModuleID<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  DWORD   th32ProcessID<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  DWORD   GlblcntUsage<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  DWORD   ProccntUsage<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  BYTE    <span class=\"token operator\">*</span>modBaseAddr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  DWORD   modBaseSize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  HMODULE hModule<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">char</span>    szModule<span class=\"token punctuation\">[</span>MAX_MODULE_NAME32 <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">char</span>    szExePath<span class=\"token punctuation\">[</span>MAX_PATH<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span> MODULEENTRY32<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"结构体成员\"><a class=\"anchor\" href=\"#结构体成员\">#</a> 结构体成员</h3>\n<ol>\n<li><code>dwSize</code>  指定结构的长度，以字节为单位。在调用 Module32First 功能，设置这个成员 SIZEOF（MODULEENTRY32）。如果你不初始化的 dwSize，Module32First 将失败。</li>\n<li><code>th32ModuleID</code>  此成员已经不再被使用，通常被设置为 1</li>\n<li><code>th32ProcessID</code>  正在检查的进程标识符。这个成员的内容，可以使用 Win32 API 的元素</li>\n<li><code>GlblcntUsage</code>  全局模块的使用计数，即模块的总载入次数。通常这一项是没有意义的，被设置为 0xFFFF。</li>\n<li><code>ProccntUsage</code>  全局模块的使用计数（与 GlblcntUsage 相同）。通常这一项也是没有意义的，被设置为 0xFFFF。</li>\n<li><code>modBaseAddr</code>  模块的基址，在其所属的进程范围内。</li>\n<li><code>modBaseSize</code>  模块的大小，单位字节。</li>\n<li><code>hModule</code>  所属进程的范围内，模块句柄。</li>\n<li><code>szModule</code>  NULL 结尾的字符串，其中包含模块名。</li>\n<li><code>szExePath</code>  NULL 结尾的字符串，其中包含的位置，或模块的路径。</li>\n</ol>\n<h3 id=\"备注\"><a class=\"anchor\" href=\"#备注\">#</a> 备注</h3>\n<p><code>modBaseAddr</code>  和  <code>hModule</code>  的成员只有在指定的  <code>th32ProcessID</code>  进程中才有效。</p>\n<h2 id=\"process32first-函数-tlhelp32h\"><a class=\"anchor\" href=\"#process32first-函数-tlhelp32h\">#</a> Process32First 函数 (tlhelp32.h)</h2>\n<p>检索有关系统快照中遇到的第一个进程的信息。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>BOOL <span class=\"token function\">Process32First</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token punctuation\">[</span>in<span class=\"token punctuation\">]</span>      HANDLE           hSnapshot<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token punctuation\">[</span>in<span class=\"token punctuation\">,</span> out<span class=\"token punctuation\">]</span> LPPROCESSENTRY32 lppe</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"参数-3\"><a class=\"anchor\" href=\"#参数-3\">#</a> 参数</h3>\n<p><code>[in] hSnapshot</code>  从上一次调用 CreateToolhelp32Snapshot 函数返回的快照句柄 。</p>\n<p><code>[in, out] lppe</code>  指向 PROCESSENTRY32 结构的指针 。它包含进程信息，例如可执行文件的名称、进程标识符和父进程的进程标识符。</p>\n<h3 id=\"返回值-4\"><a class=\"anchor\" href=\"#返回值-4\">#</a> 返回值</h3>\n<p>如果进程列表的下一个条目已复制到缓冲区，则返回 TRUE，否则返回 FALSE。如果没有更多模块存在，则 GetLastError 函数将返回  <code>ERROR_NO_MORE_FILES</code>  错误值。</p>\n<h2 id=\"process32next-函数-tlhelp32h\"><a class=\"anchor\" href=\"#process32next-函数-tlhelp32h\">#</a> Process32Next 函数 (tlhelp32.h)</h2>\n<p>检索有关记录在系统快照中的下一个进程的信息。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>BOOL <span class=\"token function\">Process32Next</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token punctuation\">[</span>in<span class=\"token punctuation\">]</span>  HANDLE           hSnapshot<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token punctuation\">[</span>out<span class=\"token punctuation\">]</span> LPPROCESSENTRY32 lppe</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"参数-4\"><a class=\"anchor\" href=\"#参数-4\">#</a> 参数</h3>\n<p>[in] hSnapshot</p>\n<p>从上一次调用 CreateToolhelp32Snapshot 函数返回的快照句柄 。</p>\n<p>[out] lppe</p>\n<p>指向 PROCESSENTRY32 结构的指针 。</p>\n<h3 id=\"返回值-5\"><a class=\"anchor\" href=\"#返回值-5\">#</a> 返回值</h3>\n<p>如果进程列表的下一个条目已复制到缓冲区，则返回 TRUE，否则返回 FALSE。如果没有更多模块存在，则 GetLastError 函数将返回  <code>ERROR_NO_MORE_FILES</code>  错误值。</p>\n<h2 id=\"processentry32-结构-tlhelp32h\"><a class=\"anchor\" href=\"#processentry32-结构-tlhelp32h\">#</a> PROCESSENTRY32 结构 (tlhelp32.h)</h2>\n<p>描述拍摄快照时驻留在系统地址空间中的进程列表中的条目。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">tagPROCESSENTRY32</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    DWORD dwSize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    DWORD cntUsage<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    DWORD th32ProcessID<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    ULONG_PTR th32DefaultHeapID<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    DWORD th32ModuleID<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    DWORD cntThreads<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    DWORD th32ParentProcessID<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    LONG pcPriClassBase<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    DWORD dwFlags<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    TCHAR szExeFile<span class=\"token punctuation\">[</span>MAX_PATH<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span> PROCESSENTRY32<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>PPROCESSENTRY32<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"结构体成员-2\"><a class=\"anchor\" href=\"#结构体成员-2\">#</a> 结构体成员</h2>\n<p><code>dwSize</code></p>\n<p>结构的大小，以字节为单位。在调用<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vZW4tdXMvd2luZG93cy9kZXNrdG9wL2FwaS90bGhlbHAzMi9uZi10bGhlbHAzMi1wcm9jZXNzMzJmaXJzdA==\"> Process32First</span> 函数之前 ，将此成员设置为  <code>sizeof(PROCESSENTRY32)</code> 。如果不初始化 <strong>dwSize</strong> ， <strong>Process32First 将</strong>失败。</p>\n<p><code>cntUsage</code></p>\n<p>此成员不再使用并且始终设置为零。</p>\n<p><code>th32ProcessID</code></p>\n<p>进程标识符。</p>\n<p><code>th32DefaultHeapID</code></p>\n<p>此成员不再使用并且始终设置为零。</p>\n<p><code>th32ModuleID</code></p>\n<p>此成员不再使用并且始终设置为零。</p>\n<p><code>cntThreads</code></p>\n<p>进程启动的执行线程数。</p>\n<p><code>th32ParentProcessID</code></p>\n<p>创建此进程的进程的标识符（其父进程）。</p>\n<p><code>pcPriClassBase</code></p>\n<p>此进程创建的任何线程的基本优先级。</p>\n<p><code>dwFlags</code></p>\n<p>此成员不再使用并且始终设置为零。</p>\n<p><code>szExeFile</code></p>\n<p>进程的可执行文件的名称。要检索可执行文件的完整路径，请调用<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vZW4tdXMvd2luZG93cy9kZXNrdG9wL2FwaS90bGhlbHAzMi9uZi10bGhlbHAzMi1tb2R1bGUzMmZpcnN0\"> Module32First</span> 函数并检查返回的 MODULEENTRY32 结构的<strong> szExePath</strong> 成员。但是，如果调用进程是 32 位进程，则必须调用 QueryFullProcessImageName 函数来检索 64 位进程的可执行文件的完整路径。</p>\n<h2 id=\"还有线程相关的信息\"><a class=\"anchor\" href=\"#还有线程相关的信息\">#</a> 还有线程相关的信息</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vZW4tdXMvd2luZG93cy93aW4zMi9hcGkvdGxoZWxwMzIvbmYtdGxoZWxwMzItdGhyZWFkMzJmaXJzdA==\">https://docs.microsoft.com/en-us/windows/win32/api/tlhelp32/nf-tlhelp32-thread32first</span></p>\n<h1 id=\"遍历指定进程模块\"><a class=\"anchor\" href=\"#遍历指定进程模块\">#</a> 遍历指定进程模块</h1>\n<h2 id=\"思路\"><a class=\"anchor\" href=\"#思路\">#</a> 思路:</h2>\n<ol>\n<li>获取你想要遍历的进程 ID (可以通过遍历进程，也可以通过通过句柄获得进程 ID)</li>\n<li>创建进程快照，第一个参数传入遍历模块，第二个参数传入你想要遍历进程的 ID</li>\n</ol>\n<h2 id=\"代码\"><a class=\"anchor\" href=\"#代码\">#</a> 代码</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;windows.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;Tlhelp32.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    HANDLE hProcessSnapshot <span class=\"token operator\">=</span> <span class=\"token function\">CreateToolhelp32Snapshot</span><span class=\"token punctuation\">(</span>TH32CS_SNAPPROCESS<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>INVALID_HANDLE_VALUE <span class=\"token operator\">==</span> hProcessSnapshot<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    DWORD dwPid <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    PROCESSENTRY32 pi<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    pi<span class=\"token punctuation\">.</span>dwSize <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>PROCESSENTRY32<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    BOOL Ret <span class=\"token operator\">=</span> <span class=\"token function\">Process32First</span><span class=\"token punctuation\">(</span>hProcessSnapshot<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>pi<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>Ret<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">strcmp</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"QQ.exe\"</span><span class=\"token punctuation\">,</span>pi<span class=\"token punctuation\">.</span>szExeFile<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            dwPid <span class=\"token operator\">=</span> pi<span class=\"token punctuation\">.</span>th32ProcessID<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        Ret <span class=\"token operator\">=</span> <span class=\"token function\">Process32Next</span><span class=\"token punctuation\">(</span>hProcessSnapshot<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>pi<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token function\">CloseHandle</span><span class=\"token punctuation\">(</span>hProcessSnapshot<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    HANDLE hSnapshot <span class=\"token operator\">=</span> <span class=\"token function\">CreateToolhelp32Snapshot</span><span class=\"token punctuation\">(</span>TH32CS_SNAPMODULE<span class=\"token punctuation\">,</span>dwPid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 上面获取了进程 PID, 下面使用即可.</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>INVALID_HANDLE_VALUE <span class=\"token operator\">==</span> hSnapshot<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    MODULEENTRY32 mi<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    mi<span class=\"token punctuation\">.</span>dwSize <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>MODULEENTRY32<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 第一次使用必须初始化成员</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    BOOL  bRet <span class=\"token operator\">=</span> <span class=\"token function\">Module32First</span><span class=\"token punctuation\">(</span>hSnapshot<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>mi<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>bRet<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        循环遍历添加自己的额外代码</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        */</span>    </pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        bRet <span class=\"token operator\">=</span> <span class=\"token function\">Module32Next</span><span class=\"token punctuation\">(</span>hSnapshot<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>mi<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token function\">CloseHandle</span><span class=\"token punctuation\">(</span>hSnapshot<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"遍历进程\"><a class=\"anchor\" href=\"#遍历进程\">#</a> 遍历进程</h1>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;windows.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;Tlhelp32.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    HANDLE hSnapshot <span class=\"token operator\">=</span> <span class=\"token function\">CreateToolhelp32Snapshot</span><span class=\"token punctuation\">(</span>TH32CS_SNAPPROCESS<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>INVALID_HANDLE_VALUE <span class=\"token operator\">==</span> hSnapshot<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    PROCESSENTRY32 pi<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    pi<span class=\"token punctuation\">.</span>dwSize <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>PROCESSENTRY32<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 第一次使用必须初始化成员</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    BOOL bRet <span class=\"token operator\">=</span> <span class=\"token function\">Process32First</span><span class=\"token punctuation\">(</span>hSnapshot<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>pi<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>bRet<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        循环遍历添加自己的额外代码</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        */</span>    </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"进程ID = %d ,进程路径 = %s\\r\\n\"</span><span class=\"token punctuation\">,</span>pi<span class=\"token punctuation\">.</span>th32ProcessID<span class=\"token punctuation\">,</span>pi<span class=\"token punctuation\">.</span>szExeFile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        bRet <span class=\"token operator\">=</span> <span class=\"token function\">Process32Next</span><span class=\"token punctuation\">(</span>hSnapshot<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>pi<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"reference\"><a class=\"anchor\" href=\"#reference\">#</a> Reference</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS9DcmVhdGVUb29saGVscDMyU25hcHNob3QvMTAzNzExODQ=\">https://baike.baidu.com/item/CreateToolhelp32Snapshot/10371184</span><br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vZW4tdXMvd2luZG93cy93aW4zMi9hcGkvdGxoZWxwMzIv\">https://docs.microsoft.com/en-us/windows/win32/api/tlhelp32/</span><br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vaUJpbmFyeS9wLzgxNTk0OTEuaHRtbA==\">https://www.cnblogs.com/iBinary/p/8159491.html</span><br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vaUJpbmFyeS9wLzgxNTk0MjYuaHRtbA==\">https://www.cnblogs.com/iBinary/p/8159426.html</span></p>\n",
            "tags": [
                "tlhelp32.h",
                "进程遍历",
                "模块遍历"
            ]
        }
    ]
}