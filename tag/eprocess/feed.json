{
    "version": "https://jsonfeed.org/version/1",
    "title": "Or0kit • All posts by \"eprocess\" tag",
    "description": "临渊羡鱼，不如退而结网",
    "home_page_url": "https://Or0kit.github.io",
    "items": [
        {
            "id": "https://or0kit.github.io/Bin/Core/WindowsXp/Process-Thread/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B-%E8%BF%9B%E7%A8%8B%E7%BB%93%E6%9E%84%E4%BD%93/",
            "url": "https://or0kit.github.io/Bin/Core/WindowsXp/Process-Thread/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B-%E8%BF%9B%E7%A8%8B%E7%BB%93%E6%9E%84%E4%BD%93/",
            "title": "进程与线程-进程结构体",
            "date_published": "2022-01-01T00:53:20.000Z",
            "content_html": "<h1 id=\"进程\"><a class=\"anchor\" href=\"#进程\">#</a> 进程</h1>\n<p>进程最重要的作用是提供了 CR3，10-10-12 分页下 CR3 指向页目录表，2-9-9-12 分页下 CR3 指向页目录指针表。<br />\n每个进程至少有一个线程。<br />\n本质上，没有进程切换，只有线程切换。线程切换时会判断是否是同一个进程的线程，若不是同一进程则切换 CR3，这样看来进程也就切换了。<br />\n我们说进程是空间概念，进程为它的线程提供了 CR3，那么它的线程访问同一个线性地址时，就能访问到同一个物理页。<br />\nwindbg 中的  <code>attach</code>  和  <code>.process</code>  本质就是切换 CR3。</p>\n<h1 id=\"进程结构体-eproccess\"><a class=\"anchor\" href=\"#进程结构体-eproccess\">#</a> 进程结构体 EPROCCESS</h1>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kd&gt; dt _EPROCESS </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>nt!_EPROCESS</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   +0x000 Pcb              : _KPROCESS</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   +0x06c ProcessLock      : _EX_PUSH_LOCK</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   +0x070 CreateTime       : _LARGE_INTEGER</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   +0x078 ExitTime         : _LARGE_INTEGER</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   +0x080 RundownProtect   : _EX_RUNDOWN_REF</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   +0x084 UniqueProcessId  : Ptr32 Void</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   +0x088 ActiveProcessLinks : _LIST_ENTRY</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   +0x090 QuotaUsage       : [3] Uint4B</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   +0x09c QuotaPeak        : [3] Uint4B</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   +0x0a8 CommitCharge     : Uint4B</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   +0x0ac PeakVirtualSize  : Uint4B</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   +0x0b0 VirtualSize      : Uint4B</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   +0x0b4 SessionProcessLinks : _LIST_ENTRY</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   +0x0bc DebugPort        : Ptr32 Void</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   +0x0c0 ExceptionPort    : Ptr32 Void</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   +0x0c4 ObjectTable      : Ptr32 _HANDLE_TABLE</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   +0x0c8 Token            : _EX_FAST_REF</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>   +0x0cc WorkingSetLock   : _FAST_MUTEX</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>   +0x0ec WorkingSetPage   : Uint4B</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>   +0x0f0 AddressCreationLock : _FAST_MUTEX</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>   +0x110 HyperSpaceLock   : Uint4B</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>   +0x114 ForkInProgress   : Ptr32 _ETHREAD</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>   +0x118 HardwareTrigger  : Uint4B</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>   +0x11c VadRoot          : Ptr32 Void</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>   +0x120 VadHint          : Ptr32 Void</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>   +0x124 CloneRoot        : Ptr32 Void</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>   +0x128 NumberOfPrivatePages : Uint4B</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>   +0x12c NumberOfLockedPages : Uint4B</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>   +0x130 Win32Process     : Ptr32 Void</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>   +0x134 Job              : Ptr32 _EJOB</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>   +0x138 SectionObject    : Ptr32 Void</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>   +0x13c SectionBaseAddress : Ptr32 Void</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>   +0x140 QuotaBlock       : Ptr32 _EPROCESS_QUOTA_BLOCK</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>   +0x144 WorkingSetWatch  : Ptr32 _PAGEFAULT_HISTORY</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>   +0x148 Win32WindowStation : Ptr32 Void</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>   +0x14c InheritedFromUniqueProcessId : Ptr32 Void</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>   +0x150 LdtInformation   : Ptr32 Void</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>   +0x154 VadFreeHint      : Ptr32 Void</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>   +0x158 VdmObjects       : Ptr32 Void</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>   +0x15c DeviceMap        : Ptr32 Void</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>   +0x160 PhysicalVadList  : _LIST_ENTRY</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>   +0x168 PageDirectoryPte : _HARDWARE_PTE</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>   +0x168 Filler           : Uint8B</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>   +0x170 Session          : Ptr32 Void</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>   +0x174 ImageFileName    : [16] UChar</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>   +0x184 JobLinks         : _LIST_ENTRY</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>   +0x18c LockedPagesList  : Ptr32 Void</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>   +0x190 ThreadListHead   : _LIST_ENTRY</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>   +0x198 SecurityPort     : Ptr32 Void</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>   +0x19c PaeTop           : Ptr32 Void</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>   +0x1a0 ActiveThreads    : Uint4B</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>   +0x1a4 GrantedAccess    : Uint4B</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>   +0x1a8 DefaultHardErrorProcessing : Uint4B</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>   +0x1ac LastThreadExitStatus : Int4B</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>   +0x1b0 Peb              : Ptr32 _PEB</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>   +0x1b4 PrefetchTrace    : _EX_FAST_REF</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>   +0x1b8 ReadOperationCount : _LARGE_INTEGER</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>   +0x1c0 WriteOperationCount : _LARGE_INTEGER</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>   +0x1c8 OtherOperationCount : _LARGE_INTEGER</pre></td></tr><tr><td data-num=\"62\"></td><td><pre>   +0x1d0 ReadTransferCount : _LARGE_INTEGER</pre></td></tr><tr><td data-num=\"63\"></td><td><pre>   +0x1d8 WriteTransferCount : _LARGE_INTEGER</pre></td></tr><tr><td data-num=\"64\"></td><td><pre>   +0x1e0 OtherTransferCount : _LARGE_INTEGER</pre></td></tr><tr><td data-num=\"65\"></td><td><pre>   +0x1e8 CommitChargeLimit : Uint4B</pre></td></tr><tr><td data-num=\"66\"></td><td><pre>   +0x1ec CommitChargePeak : Uint4B</pre></td></tr><tr><td data-num=\"67\"></td><td><pre>   +0x1f0 AweInfo          : Ptr32 Void</pre></td></tr><tr><td data-num=\"68\"></td><td><pre>   +0x1f4 SeAuditProcessCreationInfo : _SE_AUDIT_PROCESS_CREATION_INFO</pre></td></tr><tr><td data-num=\"69\"></td><td><pre>   +0x1f8 Vm               : _MMSUPPORT</pre></td></tr><tr><td data-num=\"70\"></td><td><pre>   +0x238 LastFaultCount   : Uint4B</pre></td></tr><tr><td data-num=\"71\"></td><td><pre>   +0x23c ModifiedPageCount : Uint4B</pre></td></tr><tr><td data-num=\"72\"></td><td><pre>   +0x240 NumberOfVads     : Uint4B</pre></td></tr><tr><td data-num=\"73\"></td><td><pre>   +0x244 JobStatus        : Uint4B</pre></td></tr><tr><td data-num=\"74\"></td><td><pre>   +0x248 Flags            : Uint4B</pre></td></tr><tr><td data-num=\"75\"></td><td><pre>   +0x248 CreateReported   : Pos 0, 1 Bit</pre></td></tr><tr><td data-num=\"76\"></td><td><pre>   +0x248 NoDebugInherit   : Pos 1, 1 Bit</pre></td></tr><tr><td data-num=\"77\"></td><td><pre>   +0x248 ProcessExiting   : Pos 2, 1 Bit</pre></td></tr><tr><td data-num=\"78\"></td><td><pre>   +0x248 ProcessDelete    : Pos 3, 1 Bit</pre></td></tr><tr><td data-num=\"79\"></td><td><pre>   +0x248 Wow64SplitPages  : Pos 4, 1 Bit</pre></td></tr><tr><td data-num=\"80\"></td><td><pre>   +0x248 VmDeleted        : Pos 5, 1 Bit</pre></td></tr><tr><td data-num=\"81\"></td><td><pre>   +0x248 OutswapEnabled   : Pos 6, 1 Bit</pre></td></tr><tr><td data-num=\"82\"></td><td><pre>   +0x248 Outswapped       : Pos 7, 1 Bit</pre></td></tr><tr><td data-num=\"83\"></td><td><pre>   +0x248 ForkFailed       : Pos 8, 1 Bit</pre></td></tr><tr><td data-num=\"84\"></td><td><pre>   +0x248 HasPhysicalVad   : Pos 9, 1 Bit</pre></td></tr><tr><td data-num=\"85\"></td><td><pre>   +0x248 AddressSpaceInitialized : Pos 10, 2 Bits</pre></td></tr><tr><td data-num=\"86\"></td><td><pre>   +0x248 SetTimerResolution : Pos 12, 1 Bit</pre></td></tr><tr><td data-num=\"87\"></td><td><pre>   +0x248 BreakOnTermination : Pos 13, 1 Bit</pre></td></tr><tr><td data-num=\"88\"></td><td><pre>   +0x248 SessionCreationUnderway : Pos 14, 1 Bit</pre></td></tr><tr><td data-num=\"89\"></td><td><pre>   +0x248 WriteWatch       : Pos 15, 1 Bit</pre></td></tr><tr><td data-num=\"90\"></td><td><pre>   +0x248 ProcessInSession : Pos 16, 1 Bit</pre></td></tr><tr><td data-num=\"91\"></td><td><pre>   +0x248 OverrideAddressSpace : Pos 17, 1 Bit</pre></td></tr><tr><td data-num=\"92\"></td><td><pre>   +0x248 HasAddressSpace  : Pos 18, 1 Bit</pre></td></tr><tr><td data-num=\"93\"></td><td><pre>   +0x248 LaunchPrefetched : Pos 19, 1 Bit</pre></td></tr><tr><td data-num=\"94\"></td><td><pre>   +0x248 InjectInpageErrors : Pos 20, 1 Bit</pre></td></tr><tr><td data-num=\"95\"></td><td><pre>   +0x248 VmTopDown        : Pos 21, 1 Bit</pre></td></tr><tr><td data-num=\"96\"></td><td><pre>   +0x248 Unused3          : Pos 22, 1 Bit</pre></td></tr><tr><td data-num=\"97\"></td><td><pre>   +0x248 Unused4          : Pos 23, 1 Bit</pre></td></tr><tr><td data-num=\"98\"></td><td><pre>   +0x248 VdmAllowed       : Pos 24, 1 Bit</pre></td></tr><tr><td data-num=\"99\"></td><td><pre>   +0x248 Unused           : Pos 25, 5 Bits</pre></td></tr><tr><td data-num=\"100\"></td><td><pre>   +0x248 Unused1          : Pos 30, 1 Bit</pre></td></tr><tr><td data-num=\"101\"></td><td><pre>   +0x248 Unused2          : Pos 31, 1 Bit</pre></td></tr><tr><td data-num=\"102\"></td><td><pre>   +0x24c ExitStatus       : Int4B</pre></td></tr><tr><td data-num=\"103\"></td><td><pre>   +0x250 NextPageColor    : Uint2B</pre></td></tr><tr><td data-num=\"104\"></td><td><pre>   +0x252 SubSystemMinorVersion : UChar</pre></td></tr><tr><td data-num=\"105\"></td><td><pre>   +0x253 SubSystemMajorVersion : UChar</pre></td></tr><tr><td data-num=\"106\"></td><td><pre>   +0x252 SubSystemVersion : Uint2B</pre></td></tr><tr><td data-num=\"107\"></td><td><pre>   +0x254 PriorityClass    : UChar</pre></td></tr><tr><td data-num=\"108\"></td><td><pre>   +0x255 WorkingSetAcquiredUnsafe : UChar</pre></td></tr><tr><td data-num=\"109\"></td><td><pre>   +0x258 Cookie           : Uint4B</pre></td></tr></table></figure><p>其中第一个成员也是一个结构体 _KPROCESS</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kd&gt; dt _KPROCESS</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>ntdll!_KPROCESS</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   +0x000 Header           : _DISPATCHER_HEADER</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   +0x010 ProfileListHead  : _LIST_ENTRY</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   +0x018 DirectoryTableBase : [2] Uint4B</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   +0x020 LdtDescriptor    : _KGDTENTRY</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   +0x028 Int21Descriptor  : _KIDTENTRY</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   +0x030 IopmOffset       : Uint2B</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   +0x032 Iopl             : UChar</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   +0x033 Unused           : UChar</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   +0x034 ActiveProcessors : Uint4B</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   +0x038 KernelTime       : Uint4B</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   +0x03c UserTime         : Uint4B</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   +0x040 ReadyListHead    : _LIST_ENTRY</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   +0x048 SwapListEntry    : _SINGLE_LIST_ENTRY</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   +0x04c VdmTrapcHandler  : Ptr32 Void</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   +0x050 ThreadListHead   : _LIST_ENTRY</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   +0x058 ProcessLock      : Uint4B</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   +0x05c Affinity         : Uint4B</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>   +0x060 StackCount       : Uint2B</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>   +0x062 BasePriority     : Char</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>   +0x063 ThreadQuantum    : Char</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>   +0x064 AutoAlignment    : UChar</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>   +0x065 State            : UChar</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>   +0x066 ThreadSeed       : UChar</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>   +0x067 DisableBoost     : UChar</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>   +0x068 PowerState       : UChar</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>   +0x069 DisableQuantum   : UChar</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>   +0x06a IdealNode        : UChar</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>   +0x06b Flags            : _KEXECUTE_OPTIONS</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>   +0x06b ExecuteOptions   : UChar</pre></td></tr></table></figure><h2 id=\"kprocess主要成员介绍\"><a class=\"anchor\" href=\"#kprocess主要成员介绍\">#</a> KPROCESS 主要成员介绍</h2>\n<p>内核层的进程对象。K 开头的是内核层的。</p>\n<h3 id=\"0x000-header-_dispatcher_header\"><a class=\"anchor\" href=\"#0x000-header-_dispatcher_header\">#</a> <strong>+0x000 Header           : _DISPATCHER_HEADER</strong></h3>\n<p>分发器对象 （dispatcher object），现在只需知道进程是可以被等待的就行。“可等待” 对象，比如 Mutex 互斥体、Event 事件等（WaitForSingleObject）</p>\n<h3 id=\"0x018-directorytablebase-2-uint4b\"><a class=\"anchor\" href=\"#0x018-directorytablebase-2-uint4b\">#</a> <strong>+0x018 DirectoryTableBase : [2] Uint4B</strong></h3>\n<p>一个只有两项的数组，其中第一项指向该进程的也目录表地址，第二项指向该进程的超空间（hyper space）的页目录表地址。</p>\n<h3 id=\"0x020-ldtdescriptor-_kgdtentry-0x028-int21descriptor-_kidtentry\"><a class=\"anchor\" href=\"#0x020-ldtdescriptor-_kgdtentry-0x028-int21descriptor-_kidtentry\">#</a> <strong>【+0x020 LdtDescriptor    : _KGDTENTRY】、【+0x028 Int21Descriptor  : _KIDTENTRY】</strong></h3>\n<p>历史遗留，16 位 Windows 段选择子不够 每个进程都有一个 LDT 表<br />\n Int21Descriptor  是 DOS 下要用的</p>\n<h3 id=\"0x034-activeprocessors-uint4b\"><a class=\"anchor\" href=\"#0x034-activeprocessors-uint4b\">#</a> <strong>+0x034 ActiveProcessors : Uint4B</strong></h3>\n<p>ActiveProcessors 域记录了当前进程正在哪些处理器上运行。</p>\n<h3 id=\"0x038-kerneltime-uint4b-0x03c-usertime-uint4b\"><a class=\"anchor\" href=\"#0x038-kerneltime-uint4b-0x03c-usertime-uint4b\">#</a> <strong>【+0x038 KernelTime       : Uint4B】、【+0x03c UserTime         : Uint4B】</strong></h3>\n<p>统计信息 记录了一个进程在内核模式 / 用户模式下所花的时间。进程的  <code>KernelTime</code>  和  <code>UserTime</code>  时间值等于所属线程对应的 <code>KernelTime</code>  和  <code>UserTime</code>  值的和。但是，由于仅当一个线程结束时才更新其进程的这两个时间值，所以，若一个进程中尚未有任何一个线程结束，则这两个域中的值为 0。</p>\n<h3 id=\"0x040-readylisthead-_list_entry\"><a class=\"anchor\" href=\"#0x040-readylisthead-_list_entry\">#</a> <strong>+0x040 ReadyListHead    : _LIST_ENTRY</strong></h3>\n<p><code>ReadyListHead</code>  是一个双向链表的表头，该链表记录了这个进程中处于就绪状态但尚未被加入全局就绪链表的线程，这个域的意义在于，当一个进程被换出内存以后，它所属的线程一旦就绪，则被挂到此链表中，并要求换入该进程；以后，当该进程被换入内存时， <code>ReadyListHead</code>  中的所有线程被加入到系统全局的就绪线程链表中。注意， <code>ReadyListHead</code>  链表中的每一项都是一个指向 <code>KTHREAD</code>  对象的 <code>WaitlistEntry</code>  域的地址，所以，从链表中的每一项都可以定位到对应的线程对象。例如，下面的代码片段是从 <code>KilnSwapProcesses</code>  函数中摘录的，从代码中可以看到 <code>ReadyListHead</code>  链表的用法。这段代码的意图是，将链表中的每个线程加入到全局就绪线程链表中（通过调用 <code>KiReadyThread</code>  来完成）。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Process<span class=\"token operator\">-></span>State<span class=\"token operator\">=</span>ProcessInMemory；</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>NextEntry<span class=\"token operator\">=</span>Process<span class=\"token operator\">-></span>ReadyListHead<span class=\"token punctuation\">.</span>Flink<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>NextEntry l<span class=\"token operator\">=</span><span class=\"token operator\">&amp;</span>Process<span class=\"token operator\">-></span>ReadyListHead<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  Thread<span class=\"token operator\">=</span><span class=\"token function\">CONTAINING_RECORD</span><span class=\"token punctuation\">(</span>NextEntry<span class=\"token punctuation\">,</span>KTHREAD<span class=\"token punctuation\">,</span>WaitListEntry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token function\">RemoveEntryList</span><span class=\"token punctuation\">(</span>NextEntry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  Thread<span class=\"token operator\">-></span>ProcessReadyQueue <span class=\"token operator\">=</span>FALSE；</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token function\">KiReadyThread</span><span class=\"token punctuation\">(</span>Thread<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  NextEntry<span class=\"token operator\">=</span>Process<span class=\"token operator\">-></span>ReadyListHead<span class=\"token punctuation\">.</span>Flink<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"0x048-swaplistentry-_single_list_entry\"><a class=\"anchor\" href=\"#0x048-swaplistentry-_single_list_entry\">#</a> <strong>+0x048 SwapListEntry    : _SINGLE_LIST_ENTRY</strong></h3>\n<p>SwapListEntry 域是一个单链表项，当一个进程要被换出内存时，它通过此域加入到以 KiProcessOurSwapListHead 为链头的单链表中；当一个进程要被换入内存时，它通过此域加入到以 KiProcessInSwapListHead 为链头的单链表中。这里，KiProcessOurSwapListHead 和 KiProcessInSwapListHead 是全局变量。</p>\n<h3 id=\"0x05c-affinity-uint4b\"><a class=\"anchor\" href=\"#0x05c-affinity-uint4b\">#</a> <strong>+0x05c Affinity         : Uint4B</strong></h3>\n<p>Affinity 域指定了该进程的线程可以在哪些处理器上运行，其类型是 KAFFINITY, 这是一个 32 位或 64 位整数，其二进制表示的每位分别对应于当前机器上的一个处理器 (或核)。</p>\n<p>规定进程里面的所有线程能在哪个 CPU 上跑，如果值为 1，那这个进程的所以线程只能在 0 号 CPU 上跑 (00000001)\t\t\t\t<br />\n如果值为 3，那这个进程的所以线程能在 0、1 号 CPU 上跑 (000000011)\t<br />\n如果值为 4，那这个进程的所以线程能在 2 号 CPU 上跑 (000000100)\t<br />\n如果值为 5，那这个进程的所以线程能在 0，2 号 CPU 上跑 (000000101)\t<br />\n4 个字节共 32 位  所以最多 32 核 Windows64 位 就 64 核\t\t\t<br />\n如果只有一个 CPU 把这个设置为 4 那么这个进程就死了</p>\n<h3 id=\"0x062-basepriority-char\"><a class=\"anchor\" href=\"#0x062-basepriority-char\">#</a> <strong>+0x062 BasePriority     : Char</strong></h3>\n<p>基础优先级或最低优先级 该进程中的所有线程最起码的优先级.</p>\n<h3 id=\"0x065-state-uchar\"><a class=\"anchor\" href=\"#0x065-state-uchar\">#</a> <strong>+0x065 State            : UChar</strong></h3>\n<p>State 域说明了一个进程是否在内存中，共有六种可能的状态： <code>ProcessInMemory</code> 、 <code>ProcessOutOfMemory</code> 、 <code>ProcessInTransition</code> 、 <code>ProcessOutTransition</code> 、 <code>ProcessInSwap</code>  和 <code>ProcessOutSwap</code> 。所谓一个进程在内存中，或者已被换出，或者正在转移过程中，是指该进程的虚拟地址空间需要占据足够的物理内存，或者虚拟空间中的内容已被换出物理内存，或者正在换入或换出过程之中。</p>\n<h2 id=\"eprocess其他成员\"><a class=\"anchor\" href=\"#eprocess其他成员\">#</a> EPROCESS 其他成员</h2>\n<p>执行体层的进程和线程对象。E 开头的。</p>\n<h3 id=\"0x070-createtime-_large_integer-0x078-exittime-_large_integer\"><a class=\"anchor\" href=\"#0x070-createtime-_large_integer-0x078-exittime-_large_integer\">#</a> <strong>【+0x070 CreateTime       : _LARGE_INTEGER】、【+0x078 ExitTime         : _LARGE_INTEGER】</strong></h3>\n<p>进程的创建 / 退出时间。 没什么用，不准确。</p>\n<h3 id=\"0x084-uniqueprocessid-ptr32-void\"><a class=\"anchor\" href=\"#0x084-uniqueprocessid-ptr32-void\">#</a> <strong>+0x084 UniqueProcessId  : Ptr32 Void</strong></h3>\n<p>进程的编号 任务管理器中的 PID</p>\n<h3 id=\"0x088-activeprocesslinks-_list_entry\"><a class=\"anchor\" href=\"#0x088-activeprocesslinks-_list_entry\">#</a> <strong>+0x088 ActiveProcessLinks : _LIST_ENTRY</strong></h3>\n<p>双向链表 所有的活动进程都连接在一起，构成了一个链表<br />\n PsActiveProcessHead 指向全局链表头</p>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<h3 id=\"0x090-quotausage-3-uint4b-0x09c-quotapeak-3-uint4b\"><a class=\"anchor\" href=\"#0x090-quotausage-3-uint4b-0x09c-quotapeak-3-uint4b\">#</a> <strong>【+0x090 QuotaUsage       : [3] Uint4B】、【+0x09c QuotaPeak        : [3] Uint4B】</strong></h3>\n<p>物理页相关的统计信息</p>\n<h3 id=\"0x0a8-commitcharge-uint4b-0x0ac-peakvirtualsize-uint4b-0x0b0-virtualsize-uint4b\"><a class=\"anchor\" href=\"#0x0a8-commitcharge-uint4b-0x0ac-peakvirtualsize-uint4b-0x0b0-virtualsize-uint4b\">#</a> <strong>【+0x0a8 CommitCharge     : Uint4B】、【+0x0ac PeakVirtualSize  : Uint4B】、【+0x0b0 VirtualSize      : Uint4B】</strong></h3>\n<p>虚拟内存相关的统计信息</p>\n<h3 id=\"0x11c-vadroot-ptr32-void\"><a class=\"anchor\" href=\"#0x11c-vadroot-ptr32-void\">#</a> <strong>+0x11c VadRoot          : Ptr32 Void</strong></h3>\n<p>标识 0-2G 哪些地址被占用了</p>\n<h3 id=\"0x0bc-debugport-ptr32-void-0x0c0-exceptionport-ptr32-void\"><a class=\"anchor\" href=\"#0x0bc-debugport-ptr32-void-0x0c0-exceptionport-ptr32-void\">#</a> <strong>【+0x0bc DebugPort        : Ptr32 Void】、【+0x0c0 ExceptionPort    : Ptr32 Void】</strong></h3>\n<p>调试相关</p>\n<h3 id=\"0x0c4-objecttable-ptr32-_handle_table\"><a class=\"anchor\" href=\"#0x0c4-objecttable-ptr32-_handle_table\">#</a> <strong>+0x0c4 ObjectTable      : Ptr32 _HANDLE_TABLE</strong></h3>\n<p>句柄表</p>\n<h3 id=\"0x174-imagefilename-16-uchar\"><a class=\"anchor\" href=\"#0x174-imagefilename-16-uchar\">#</a> <strong>+0x174 ImageFileName    : [16] UChar</strong></h3>\n<p>进程镜像文件名 最多 16 个字节</p>\n<h3 id=\"0x1a0-activethreads-uint4b\"><a class=\"anchor\" href=\"#0x1a0-activethreads-uint4b\">#</a> <strong>+0x1a0 ActiveThreads    : Uint4B</strong></h3>\n<p>活动线程的数量</p>\n<h3 id=\"0x1b0-peb-ptr32-_peb\"><a class=\"anchor\" href=\"#0x1b0-peb-ptr32-_peb\">#</a> <strong>+0x1b0 Peb              : Ptr32 _PEB</strong></h3>\n<p>PEB ((Process Environment Block 进程环境块)：进程在 3 环的一个结构体，里面包含了进程的模块列表、是否处于调试状态等信息。</p>\n<p>关于 PEB 或者其他成员更加详细的说明：参考 潘爱民老师《Windows 内核原理与实现》 中的第 3 章</p>\n<h1 id=\"本章总结\"><a class=\"anchor\" href=\"#本章总结\">#</a> 本章总结</h1>\n<p>0 环查看当前进程<br />\n通过 KPCR 找当前线程，然后找其 + 0x220 找当前进程。<br />\n后面通过学习进程的创建，来观察进程结构体是如何填充的。</p>\n<h1 id=\"实验练习\"><a class=\"anchor\" href=\"#实验练习\">#</a> 实验练习</h1>\n<blockquote>\n<ol>\n<li>体会 DebugPort 的作用：用调试器（调试器最好没有插件）调试程序，然后把 进程结构体的 DebugPort 清零，在调试器里接着调试，观察会发生什么。</li>\n</ol>\n</blockquote>\n<p>就不写代码更改了，直接用 windbg 修改了。<br />\n调试时 DebugPort 的值：</p>\n<p><img data-src=\"image002.png\" alt=\"\" /></p>\n<p><img data-src=\"image003.png\" alt=\"\" /></p>\n<p>清空这个值后，在调试器里执行单步：</p>\n<p><img data-src=\"image004.png\" alt=\"\" /></p>\n<p>直接报异常了。</p>\n<blockquote>\n<ol start=\"2\">\n<li>0 环进程断链</li>\n</ol>\n</blockquote>\n<p>代码如下：</p>\n<p>没有写恢复的。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;ntddk.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>VOID <span class=\"token function\">DriverUnload</span><span class=\"token punctuation\">(</span>PDRIVER_OBJECT pDriver<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是驱动，我卸载了\\t\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>NTSTATUS <span class=\"token function\">EProcessBreakChain</span><span class=\"token punctuation\">(</span>PUCHAR ProcessName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tULONG Pro<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token comment\">// 由 KPCR+0x124 的位置得到当前 CPU 正在处理的线程的结构体的指针，_KTHREAD + 0x44 的位置能够得到此线程的进程结构体的地址</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t__asm <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\tmov eax<span class=\"token punctuation\">,</span> fs<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0x124</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\tmov ecx<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>eax <span class=\"token operator\">+</span> <span class=\"token number\">0x44</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\tmov Pro<span class=\"token punctuation\">,</span> ecx<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token comment\">// 进程结构体 EPROCESS +0x88 的位置是一个链接所有进程的双向链表</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\tPLIST_ENTRY pListProcess <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PLIST_ENTRY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>Pro <span class=\"token operator\">+</span> <span class=\"token number\">0x88</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token comment\">// 遍历进程</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>pListProcess<span class=\"token operator\">-></span>Flink <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span>PLIST_ENTRY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>Pro <span class=\"token operator\">+</span> <span class=\"token number\">0x88</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t<span class=\"token comment\">//EPROCESS 结构体</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\tULONG NextProcess <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ULONG<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>pListProcess<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">0x88</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">strcmp</span><span class=\"token punctuation\">(</span>ProcessName<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>PCHAR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>NextProcess <span class=\"token operator\">+</span> <span class=\"token number\">0x174</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"FindProcess:%s PEPROCESS:%X\\t\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>PCHAR<span class=\"token punctuation\">)</span>NextProcess <span class=\"token operator\">+</span> <span class=\"token number\">0x174</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> NextProcess<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t\t<span class=\"token comment\">// 断链</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t\tPLIST_ENTRY CurPro <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PLIST_ENTRY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>NextProcess<span class=\"token operator\">+</span> <span class=\"token number\">0x88</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t\tPLIST_ENTRY BlinkPro <span class=\"token operator\">=</span> CurPro<span class=\"token operator\">-></span>Blink<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t\tPLIST_ENTRY FlinkPro <span class=\"token operator\">=</span> CurPro<span class=\"token operator\">-></span>Flink<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t\tBlinkPro<span class=\"token operator\">-></span>Flink <span class=\"token operator\">=</span> FlinkPro<span class=\"token operator\">-></span>Flink<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\t\tFlinkPro<span class=\"token operator\">-></span>Blink <span class=\"token operator\">=</span> BlinkPro<span class=\"token operator\">-></span>Flink<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> STATUS_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\tpListProcess <span class=\"token operator\">=</span> pListProcess<span class=\"token operator\">-></span>Flink<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token keyword\">return</span> STATUS_UNSUCCESSFUL<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>NTSTATUS <span class=\"token function\">DriverEntry</span><span class=\"token punctuation\">(</span>PDRIVER_OBJECT pDriver<span class=\"token punctuation\">,</span> PUNICODE_STRING pRegPath<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\tNTSTATUS ntStatus <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\tpDriver<span class=\"token operator\">-></span>DriverUnload <span class=\"token operator\">=</span> DriverUnload<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是驱动,我运行了\\t\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t<span class=\"token comment\">//r0 进程断链</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t<span class=\"token comment\">// 遍历进程\t 断链</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\tntStatus <span class=\"token operator\">=</span> <span class=\"token function\">EProcessBreakChain</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Dbgview.exe\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">NT_SUCCESS</span><span class=\"token punctuation\">(</span>ntStatus<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"断链失败！！\\t\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> ntStatus<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"断链成功！！\\t\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t<span class=\"token keyword\">return</span> STATUS_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"image001.png\" alt=\"\" /></p>\n<h1 id=\"reference\"><a class=\"anchor\" href=\"#reference\">#</a> Reference</h1>\n<p>潘爱民前辈的《Windows 内核原理与实现》一书。</p>\n",
            "tags": [
                "EPROCESS",
                "KPROCESS"
            ]
        }
    ]
}