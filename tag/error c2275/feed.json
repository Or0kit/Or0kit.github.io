{
    "version": "https://jsonfeed.org/version/1",
    "title": "Or0kit • All posts by \"error c2275\" tag",
    "description": "临渊羡鱼，不如退而结网",
    "home_page_url": "https://Or0kit.github.io",
    "items": [
        {
            "id": "https://or0kit.github.io/Bin/Core/WindowsXp/Protect-Mode/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F-%E9%98%B6%E6%AE%B5%E6%B5%8B%E8%AF%95/",
            "url": "https://or0kit.github.io/Bin/Core/WindowsXp/Protect-Mode/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F-%E9%98%B6%E6%AE%B5%E6%B5%8B%E8%AF%95/",
            "title": "保护模式-阶段测试",
            "date_published": "2021-09-03T14:46:00.000Z",
            "content_html": "<h1 id=\"保护模式阶段测试\"><a class=\"anchor\" href=\"#保护模式阶段测试\">#</a> 保护模式阶段测试</h1>\n<ol>\n<li>\n<p>给定一个线性地址，和长度，读取内容；<br />\nint ReadMemory(OUT BYTE* buffer,IN DWORD dwAddr,IN DWORD dwLeght)<br />\n 要求：<br />\n1) 可以自己指定分页方式。<br />\n2) 页不存在，要提示，不能报错。<br />\n3) 可以正确读取数据。</p>\n</li>\n<li>\n<p>申请长度为 100 的 DWORD 的数组，且每项用该项的地址初始化；<br />\n把这个数组所在的物理页挂到 0x1000 的地址上；<br />\n 定义一个指针，指向 0x1000 这个页里的数组所在的地址，用 0x1000 这个页的线性地址打印出这数组的值；</p>\n</li>\n</ol>\n<p>要求：<br />\n数组所在的物理页，是同一个页；</p>\n<h2 id=\"第一题\"><a class=\"anchor\" href=\"#第一题\">#</a> 第一题</h2>\n<p><strong>所遇问题：</strong></p>\n<p>在运行程序时发现了一个问题，用 VC 6.0 编译 C 语言是 总是提示一个错误：error C2143: syntax error : missing ‘;’ before ‘type’。解决方法如下：把所有变量的声明放在可执行代码之前。</p>\n<p>出现此问题的原因在于：将文件保存成了 .c 格式。如果是 cpp 格式就能正常编译。改成.cpp 就可以正常运行，和你变量声明的位置就没有关系了。*</p>\n<p>一般在 ANSI C 或者 C++ 中，在可执行代码中随时定义变量是允许的，但是在 K&amp;R C 中是不允许的，因此才会出现这个错误。VC6.0 、VS2008 都是用的 K&amp;R C 来实现 C 语言的，因此编译过程中会报错。</p>\n<p><strong>代码：</strong></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;Windows.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">DATALEN</span> <span class=\"token expression\"><span class=\"token number\">0x200</span></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>DWORD somedata<span class=\"token punctuation\">[</span>DATALEN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 数据源</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>DWORD mybuff<span class=\"token punctuation\">[</span>DATALEN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 空白缓冲区</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 2-9-9-12 分页读内存，要判断线性地址有效性，要能正确处理跨页的情况</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>BOOL <span class=\"token function\">ReadMemory</span><span class=\"token punctuation\">(</span>OUT BYTE<span class=\"token operator\">*</span> buffer<span class=\"token punctuation\">,</span> IN DWORD dwAddr<span class=\"token punctuation\">,</span> IN DWORD dwLength<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tDWORD i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token comment\">//__asm int 3;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token comment\">// 以字节为单位读取</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> dwLength<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\tDWORD PDE <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>DWORD<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xc0600000</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>dwAddr <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span> <span class=\"token operator\">>></span> <span class=\"token number\">18</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x3ff8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\tDWORD PTE <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>DWORD<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xc0000000</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>dwAddr <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span> <span class=\"token operator\">>></span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x7ffff8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>PDE <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x00000001</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//&amp; 比 == 的运算级高</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> FALSE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>PTE <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x00000001</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>PTE <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>PTE <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xFFFFFC1F</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">return</span> FALSE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\tbuffer<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>PBYTE<span class=\"token punctuation\">)</span>dwAddr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token keyword\">return</span> TRUE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">__declspec</span><span class=\"token punctuation\">(</span>naked<span class=\"token punctuation\">)</span> <span class=\"token function\">R0Function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t__asm</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\tpushad</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\tpushfd</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t<span class=\"token comment\">// 读 NULL 指针，错误原因：请求零页面</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t<span class=\"token comment\">//ReadMemory((PBYTE)mybuff, 0, 0x1000);</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t<span class=\"token function\">ReadMemory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>PBYTE<span class=\"token punctuation\">)</span>mybuff<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>somedata<span class=\"token punctuation\">,</span>DATALEN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t__asm</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t\tpopfd</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t\tpopad</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t\tiretd</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t<span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t<span class=\"token comment\">// 初始化数据</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> DATALEN<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> somedata<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t<span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>mybuff<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> DATALEN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t<span class=\"token comment\">// 提权到 R0 测试 ReadMemory 函数</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\t<span class=\"token comment\">//DbgPrint = (DBGPRINT) GetProcAddress (LoadLibraryA (\"ntdll.dll\"), \"DbgPrint\"); // 载入函数</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"在IDT表构建中断门，请在windbg中执行下面的指令：\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"eq 8003f500 %04xee00`0008%04x\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>R0Function <span class=\"token operator\">>></span> <span class=\"token number\">16</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>R0Function <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x0000FFFF</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\t<span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\t__asm <span class=\"token keyword\">int</span> <span class=\"token number\">0x20</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">memcmp</span><span class=\"token punctuation\">(</span>mybuff<span class=\"token punctuation\">,</span> somedata<span class=\"token punctuation\">,</span> DATALEN<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"读取失败.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>\t\t<span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"读取成功.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>\t\t<span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"第二题\"><a class=\"anchor\" href=\"#第二题\">#</a> 第二题</h2>\n<p><strong>所遇问题</strong></p>\n<p>将 C 代码在 VC<ins> 中编译，经常会出现 error C2275 错误，结果是变量的定义位置不对，应该在函数块的最前面。<br />\n这是一个编程习惯的问题。<br />\n在移植 c</ins> 代码到 c 的时候，经常会出现一个奇怪的错误：“error C2275: “xxxxx”: 将此类型用作表达式非法”<br />\n 这个错误是由于 c 的编译器要求将变量的申明放在一个函数块的头部，而 c++ 没有这样的要求造成的。<br />\n解决的办法就是把变量的声明全部放在变量的生存块的开始。</p>\n<p>代码：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;Windows.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>DWORD <span class=\"token operator\">*</span>arr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">__declspec</span><span class=\"token punctuation\">(</span>naked<span class=\"token punctuation\">)</span> <span class=\"token function\">R0Function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t__asm</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\tpushad</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\tpushfd</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\tmov eax<span class=\"token punctuation\">,</span> dword ptr<span class=\"token punctuation\">[</span>arr<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\tshr eax<span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\tand eax<span class=\"token punctuation\">,</span> <span class=\"token number\">7FFFF</span><span class=\"token number\">8</span>h<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\tsub eax<span class=\"token punctuation\">,</span> <span class=\"token number\">40000000</span>h<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\tmov ebx<span class=\"token punctuation\">,</span> <span class=\"token number\">0x1000</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\tshr ebx<span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\tand ebx<span class=\"token punctuation\">,</span> <span class=\"token number\">7FFFF</span><span class=\"token number\">8</span>h<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\tsub ebx<span class=\"token punctuation\">,</span> <span class=\"token number\">40000000</span>h<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\tmov eax<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>eax<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\tmov <span class=\"token punctuation\">[</span>ebx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> eax<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\tpopfd</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\tpopad</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\tiretd</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token comment\">// 定义 0x1000 指针</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\tDWORD<span class=\"token operator\">*</span> ptr <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>DWORD<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token number\">0x1000</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token comment\">// 申请数组并初始化</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\tarr <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>DWORD<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">VirtualAlloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x1000</span><span class=\"token punctuation\">,</span> MEM_COMMIT<span class=\"token punctuation\">,</span> PAGE_READWRITE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\tarr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>arr <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t<span class=\"token comment\">// 挂物理页</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"在IDT表构建中断门，请在windbg中执行下面的指令：\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"eq 8003f500 %04xee00`0008%04x\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>R0Function <span class=\"token operator\">>></span> <span class=\"token number\">16</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>R0Function <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x0000FFFF</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t<span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t__asm <span class=\"token keyword\">int</span> <span class=\"token number\">0x20</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t<span class=\"token comment\">// 通过 0x1000 打印数组</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%x\\n\"</span><span class=\"token punctuation\">,</span> ptr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t<span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"reference\"><a class=\"anchor\" href=\"#reference\">#</a> Reference</h1>\n<p>[关于 C++ 程序编译出现 error C2143: syntax error : missing ';' before 'type' 的解决办法]<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xjcl9oYXBweS9hcnRpY2xlL2RldGFpbHMvNTI0Njc2OTM=\">https://blog.csdn.net/lcr_happy/article/details/52467693</span><br />\n [error C2275 将此类型用作表达式非法]<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xxazE5ODUvYXJ0aWNsZS9kZXRhaWxzLzczODkxNTk=\">https://blog.csdn.net/lqk1985/article/details/7389159</span><br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0t3YW5zeS9hcnRpY2xlL2RldGFpbHMvMTA5MDI0NTA0\">https://blog.csdn.net/Kwansy/article/details/109024504</span></p>\n",
            "tags": [
                "error C2143",
                "error C2275"
            ]
        }
    ]
}