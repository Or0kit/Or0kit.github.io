{
    "version": "https://jsonfeed.org/version/1",
    "title": "Or0kit • All posts by \"minifilter\" tag",
    "description": "临渊羡鱼，不如退而结网",
    "home_page_url": "https://Or0kit.github.io",
    "items": [
        {
            "id": "https://or0kit.github.io/Bin/Core/Drive-Development/%E6%96%87%E4%BB%B6%E8%BF%87%E6%BB%A4%E9%A9%B1%E5%8A%A8%E6%80%BB%E7%BB%93%E4%B8%8E%E6%89%A9%E5%B1%95/",
            "url": "https://or0kit.github.io/Bin/Core/Drive-Development/%E6%96%87%E4%BB%B6%E8%BF%87%E6%BB%A4%E9%A9%B1%E5%8A%A8%E6%80%BB%E7%BB%93%E4%B8%8E%E6%89%A9%E5%B1%95/",
            "title": "文件过滤驱动总结与扩展",
            "date_published": "2023-01-14T09:11:30.000Z",
            "content_html": "<h1 id=\"分层驱动框架\"><a class=\"anchor\" href=\"#分层驱动框架\">#</a> 分层驱动框架</h1>\n<ul>\n<li>NT 驱动框架：<strong>单层</strong>驱动，只能接受自己进程的 IRP</li>\n<li>Sfilter 驱动框架：<strong>多层</strong>驱动，接受所有进程的 IRP\n<ul>\n<li>过滤：分层驱动中<strong>再加一层</strong>而不影响它的上下层，以过滤它们之间的数据，对数据或行为进行安全控制。过滤是通过设备绑定实现的 (有多少个文件卷设备就生成多少个文件过滤驱动设备对象一一绑定，这样，发给各个卷设备对象的 IRP 都会被监控到)。</li>\n</ul>\n</li>\n<li>磁盘过滤驱动：用于文件还原</li>\n</ul>\n<h1 id=\"绑定与过滤\"><a class=\"anchor\" href=\"#绑定与过滤\">#</a> 绑定与过滤</h1>\n<ul>\n<li><code>设备栈绑定的形式</code> ：驱动自己生成一个设备 ( <code>过滤设备</code> ), 调用系统提供的绑定 API，绑定到自标设备上，并  <code>返回</code> 一个在  <code>未绑定</code> 之前目标设备所在设备栈的  <code>最顶层设备</code> 。这样发往下层的 IRP 或者发往土层的数据都会被过滤设备截获。</li>\n<li><code>绑定的API</code> :\n<ul>\n<li>loAttachDevice()</li>\n<li>loAttachDeviceToDeviceStackSafe (2000 SP4 以及 XP 以上)</li>\n<li>loAttachDeviceToDeviceStack()</li>\n</ul>\n</li>\n</ul>\n<p>1111111 设备栈的理解</p>\n<h2 id=\"ioattachdevicetodevicestack绑定\"><a class=\"anchor\" href=\"#ioattachdevicetodevicestack绑定\">#</a> IoAttachDeviceToDeviceStack (绑定)</h2>\n<p>函数原型：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/// AttachedDevice 需要记录在 DEVICE_EXTENSION 中，以便调用 IoCallDriver () 继续下发 IRP</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">/// 返回一个在未绑定之前目标设备所在设备栈的最顶层设备，</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/// 目的是为了 IRP 继续往下发，所以需要备份下一层的设备对象，即未绑定之前目标设备所在设备栈的最顶层设备</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>PDEVICE_OBJECT <span class=\"token function\">IoAttachDeviceToDeviceStack</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> IN PDEVICE_OBJECT SourceDevice<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> IN PDEVICE_OBJECT TargetDevice</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>windbg 查看设备栈:</p>\n<p><code>!devobj</code>  查看设备对象信息<br />\n <code>!drvobj</code>  查看驱动对象信息<br />\n <code>!devstack</code>  查看设备栈<br />\n <code>!devnode 0 1</code>  系统设备树</p>\n<h2 id=\"设备对象\"><a class=\"anchor\" href=\"#设备对象\">#</a> 设备对象</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_DEVICE</span> _OBJECT</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  SHORT Type<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  WORD Size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  LONG ReferenceCount<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  PORITER OBIECT DriverObject<span class=\"token punctuation\">;</span> <span class=\"token comment\">///&lt; 生成该设备对象的驱动对象</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  DEVICE OBTECT NextDevice<span class=\"token punctuation\">;</span> <span class=\"token comment\">///&lt; 驱动对象生成的所有设备对象通过 NextDevice 指针组织在 1 个链表里</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  PDEVICE OBTECT AttachedDevice<span class=\"token punctuation\">;</span> <span class=\"token comment\">///&lt; 被哪个设备所绑定</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  PIRP CurrentIrp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  PIO TIMER Timer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  LONG Flags<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  LONG Characteristics<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  PUPB Vpb<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  VOID DeviceExtension<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  LONG DeviceType<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  CHAR StackSize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  BYTE Queue <span class=\"token punctuation\">[</span><span class=\"token number\">40</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  LONG AlignmentRequirement<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  DEVICE QUEUE DeviceQueue<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  KDPC Dpc<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  LONG ActiveThreadCount<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  VOID SecurityDescriptor<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  EVENT DeviceLock<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  WORD SectorSize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  WORD Sparel<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  PDEVOBT _EXTENSION DeviceObjectExtension<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  VOID Reserved<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span>DEVICE OBJECT<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>PDEVICE_OBJECT<span class=\"token operator\">:</span></pre></td></tr></table></figure><p><strong>可以利用  <code>AttachedDevice</code>  成员遍历目标设备的设备栈</strong>。由此判断目标设备是否被我们绑定。</p>\n<h2 id=\"对设备对象作不同处理过滤\"><a class=\"anchor\" href=\"#对设备对象作不同处理过滤\">#</a> 对设备对象作不同处理 (过滤)</h2>\n<ol>\n<li><strong>控制设备对象</strong></li>\n</ol>\n<ul>\n<li>DriverEntry 中创建的设备对象</li>\n<li>用来接收自己客户端的 IRP</li>\n</ul>\n<ol start=\"2\">\n<li><strong>过滤设备对象</strong></li>\n</ol>\n<ul>\n<li>绑定时候创建的设备对象</li>\n<li>用来接收其它 R3 程序的 IRP</li>\n</ul>\n<ol start=\"3\">\n<li>分发函数将接收各进程 IRP</li>\n</ol>\n<ul>\n<li>设备对象分控制设备对象和过滤设备对象，但用来接受 Irp 分发函数<strong>只有一个</strong>。</li>\n<li>比如 FilterCreate (PDEVICE_OBJECT DeviceObject,PIRP plrp)，既接收自己进程的 IRP (发给 <strong>控制设备对象</strong>)，也用来接受其他进程 IRP (发给 <strong>过滤设备对象</strong>)</li>\n</ul>\n<ol start=\"4\">\n<li>如何区分 IRP 是自己进程下发的 (发给控制设备对象)，还是别的进程下发的 (发给过滤设备对象)？</li>\n</ol>\n<p>首先认识以下两个宏：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/// 宏定义 判断设备对象是否是过滤设备对象:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">/// 1. 过滤设备对象不为空</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/// 2. 过滤设备对象是由驱动对象创建</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">/// 3. 如果是过滤设备对象，DeviceExtension 保存着下一层的设备对象</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">IS_MY_DEVICE</span> <span class=\"token expression\"><span class=\"token function\">OBJECT</span><span class=\"token punctuation\">(</span>_devObj<span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_devObj<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span></span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> <span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_devObj<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>DriverObject <span class=\"token operator\">==</span> gSfilterDriverObject<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;&amp;</span></span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> <span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>devObj<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>DeviceExtension <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> </span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">/// 宏定义 判断设备对象是否是控制设备对象:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">/// 1.gSfilterControlDeviceObject 指针保存的是在 DriverEntry 创建的控制设备对象的地址</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">/// 2. 控制设备对象是由驱动对象创建</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">/// 3. 如果是控制设备对象，DeviceExtension 为空</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">IS_MY_CONTROL_DEVICE_OBJECT</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>_devObj<span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre> <span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_devObj<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> gSfilterControlDeviceObject<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span></span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre> <span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token function\">ASSERT</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_devObj<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>DriverObject <span class=\"token operator\">==</span> gSfilterDriverObject<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre> <span class=\"token expression\"><span class=\"token punctuation\">(</span>_devObj<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>DeviceExtension <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>TRUE<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>FALSE<span class=\"token punctuation\">)</span></span></span></pre></td></tr></table></figure><p>在过滤分发函数的处理：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">///xxx 表示任意的过滤分发函数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>NTSTATUS <span class=\"token function\">FilterXXX</span><span class=\"token punctuation\">(</span>IN PDEVICE_OBJECT DeviceObject<span class=\"token punctuation\">,</span> IN PIRP Irp<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    NTSTATUS status<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">PAGED_CODE</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 判断是否是控制设备。</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">IS_MY_CONTROL_DEVICE_OBJECT</span><span class=\"token punctuation\">(</span>DeviceObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        Irp<span class=\"token operator\">-></span>IoStatus<span class=\"token punctuation\">.</span>Status <span class=\"token operator\">=</span> STATUS_INVALID_DEVICE_REQUEST<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        Irp<span class=\"token operator\">-></span>IoStatus<span class=\"token punctuation\">.</span>Information <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token function\">IoCompleteRequest</span><span class=\"token punctuation\">(</span>Irp<span class=\"token punctuation\">,</span> IO_NO_INCREMENT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">//return STATUS_INVALID_DEVICE_REQUEST;        // 这样写的后果是：我们用 CreateFile 函数在 Ring3 下打开此控制设备符号链接的时候会失败</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">return</span> STATUS_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">// 判断是否是文件系统的其他设备</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">IS_MY_DEVICE_OBJECT</span><span class=\"token punctuation\">(</span>DeviceObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token comment\">// 不是我们关心的设备，直接下发</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token function\">IoSkipCurrentIrpStackLocation</span><span class=\"token punctuation\">(</span>Irp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token function\">IoCallDriver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>PSFILTER_DEVICE_EXTENSION<span class=\"token punctuation\">)</span>DeviceObject<span class=\"token operator\">-></span>DeviceExtension<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>AttachedToDeviceObject<span class=\"token punctuation\">,</span> Irp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token comment\">// 接下来就是处理来自卷设备 IRP 的 xxx 操作了</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    ……</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    ……</pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"文件系统过滤框架\"><a class=\"anchor\" href=\"#文件系统过滤框架\">#</a> 文件系统过滤框架</h1>\n<ul>\n<li>Sfilter</li>\n<li>Minifilter</li>\n</ul>\n<h2 id=\"sfilter\"><a class=\"anchor\" href=\"#sfilter\">#</a> Sfilter</h2>\n<p>sfilter 是微软的文件过滤驱动样例。</p>\n<h3 id=\"sfilter-代码通读分析\"><a class=\"anchor\" href=\"#sfilter-代码通读分析\">#</a> Sfilter 代码通读分析</h3>\n<ul>\n<li>\n<p>框架代码 <strong>不要钻牛角尖</strong>，把握整体流程即可，不求把每行代码每个变量都扣的清楚。(上万行代码)</p>\n<ul>\n<li>除了过滤分发函数，其他代码理解即可，不需要做改动。</li>\n<li>所以在 Minifilter 中就把这部分代码给封装隐藏了，只需要注册回调函数即可</li>\n</ul>\n</li>\n</ul>\n<p>代码过长，我就放到 github 了，里面有我详细的注释。</p>\n<p>自己画的流程图：</p>\n<p>11111111</p>\n<p>运行效果：</p>\n<p>11111 gif</p>\n<h3 id=\"过滤驱动与irp处理方式\"><a class=\"anchor\" href=\"#过滤驱动与irp处理方式\">#</a> 过滤驱动与 IRP 处理方式</h3>\n<p>1. <code>IoCopyxxX+完成例程</code> 下发</p>\n<ul>\n<li><code>IoCopyCurrentlrpStackLocationToNext</code> + <code>完成例程</code> ：把 IRP 下发之后，上层驱动在某个事件上进行等待。下一层驱动把 IRP 完成之后就会调用完成例程设置事件为有事件状态来通知上层驱动</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/// 拿到当前 IRP 的栈</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">/// 拿到下一层 IRP 的栈</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/// 把当前 IRP 的栈拷贝到下一层 IRP 的栈上，因为当前 IRP 还没下发，所以下一层 IRP 的栈是空的，所以不存在下层 IRP 栈原来有数据被覆盖的问题</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">IoCopycurrentIrpStackLocationToNext</span> <span class=\"token expression\"><span class=\"token punctuation\">(</span>Irp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token expression\">PIO_STACK_LOCATION __irpSp<span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token expression\">PI0_STACK_LOCATION __nextIrpSp<span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> <span class=\"token expression\">__irpsp <span class=\"token operator\">=</span> <span class=\"token function\">IoGetcurrentIrpstackLocation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>Irp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> <span class=\"token expression\">__nextIrpSp <span class=\"token operator\">=</span><span class=\"token function\">IoGetNextIrpstackLocation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>Irp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> <span class=\"token expression\"><span class=\"token function\">RtlCopyMemory</span><span class=\"token punctuation\">(</span> __nextIrpSp<span class=\"token punctuation\">,</span>__irpSp<span class=\"token punctuation\">,</span><span class=\"token function\">FIELD__OFFSET</span><span class=\"token punctuation\">(</span>IO_STACK_IOCATIONCompletionRoutine<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> <span class=\"token expression\">nextIrpSp<span class=\"token operator\">-></span>control <span class=\"token operator\">=</span> O<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span></span></span></pre></td></tr></table></figure><p>2. <code>IoSkip+IoCall</code>  直接下发</p>\n<ul>\n<li><code>IoSkipCurrentIrpStackLocation</code> ，下层设备拿到的 IO_STACKLOCATION 和当前的一样</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">IoskipcurrentIrpStackLocation</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>Irp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token expression\"><span class=\"token punctuation\">(</span>Irp<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>currentLocation<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token expression\"><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token comment\">/// 相互抵消，相当于 IRP 栈没有发生变化，下一层驱动对应的 IRP 栈和当前驱动用的是同一个栈，好像 IRP 从来没有到达过当前的驱动层一样</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token comment\">/// 为什么不用像第一种方式一样需要拷贝栈数据？是因为当前驱动不需要知道下一层的 IRP 结果，就不需要保存当前驱动对应 IRP 栈的的空间了</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token comment\">/// 为什么不直接不加不减？因为下发必然会减 (IoCallDriver)，为保持下一层使用当前驱动对应的 IRP 栈，所以需要先加</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre> <span class=\"token function\">IoskipcurrentIrpstackLocation</span><span class=\"token punctuation\">(</span>Irp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//location+1</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> <span class=\"token function\">IoCallDriver</span><span class=\"token punctuation\">(</span>deviceExtension<span class=\"token operator\">-></span>nextLower<span class=\"token punctuation\">,</span>Irp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//location-1</span></pre></td></tr></table></figure><p>3. <code>结束IRP</code>  不下发</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/// 一般用于拒绝的时候</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>PIO_STACK_LOCATION irpStack<span class=\"token operator\">=</span> <span class=\"token function\">IoGetCurrentlrpStackLocation</span><span class=\"token punctuation\">(</span>Irp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Irp<span class=\"token operator\">-></span>loStatus<span class=\"token punctuation\">.</span>Status <span class=\"token operator\">=</span> STATUS_ACCESS_DENIED<span class=\"token punctuation\">;</span><span class=\"token comment\">//STATUS_ACCESS_DENIED</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>irp<span class=\"token operator\">-></span>loStatus<span class=\"token punctuation\">.</span>Information <span class=\"token operator\">=</span> O</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">IoCompleteRequest</span><span class=\"token punctuation\">(</span>lrp<span class=\"token punctuation\">,</span> IO_NO_INCREMENT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"irp完成例程注意事项\"><a class=\"anchor\" href=\"#irp完成例程注意事项\">#</a> IRP 完成例程注意事项</h4>\n<ol>\n<li>\n<p>在驱动程序将 IRP 传递个下一个驱动之后，就不再拥有这个 IRP，并且不能试图再去访问它。否则会导致系统崩溃（蓝屏）。</p>\n<ul>\n<li>那个 IRP 会被其它的驱动或者线程  <code>释放或完成</code> 。</li>\n<li>如果驱动需要访问一个已经在栈里传下去的 IRP, 这个驱动必须实现并设置  <code>IoCompletion</code>  例程。</li>\n<li>当 I/O 管理器调用  <code>IoCompletion</code>  例程时，这个驱动就能够在  <code>IoCompletion 例程执行期间</code> 重新获得对这一 IRP 的所有权。如此，loCompletion 例程就能够访问 IRP 中的域。</li>\n</ul>\n</li>\n<li>\n<p>若是驱动的分发例程也还需要在 IRP 被后面的驱动处理完成之后再处理它，这个 IoCompletion 例程必须返回  <code>STATUS_MORE_PROCESSING_REQUIRED</code> ，以将 IRP 的所有权返回给  <code>分发例程</code> 。</p>\n<ul>\n<li>如此一来，I/O 管理器会停止 IRP 的处理，将最终完成 IRP 的任务留给分发例程。分发例程能够在之后调用  <code>IoCompleteRequest</code>  来完成这个 IRP, 或者还能将这个 IRP 标记为等候进一步处理。</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"iocopyxxx完成例程下发\"><a class=\"anchor\" href=\"#iocopyxxx完成例程下发\">#</a>  <code>IoCopyxxX+完成例程</code> 下发</h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/// IoCopyxxX + 完成例程 下发</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/// 分发例程</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>KEVENT event<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">KelnitializeEvent</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>event<span class=\"token punctuation\">,</span> NotificationEvent<span class=\"token punctuation\">,</span>FALSE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">///&lt; 设置一个事件</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">IoCopyCurrentlrpStackLocationToNext</span><span class=\"token punctuation\">(</span>Irp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/// 把当前驱动对应的 IRP 栈数据拷贝到下一层驱动上 IRP 栈上</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">/// 为当前 IRP 设置一个完成例程</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">/// 驱动需要访问一个已经在栈里传下去的 IRP, 这个驱动必须实现并设置 `IoCompletion` 例程。</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token function\">IoSetCompletionRoutine</span><span class=\"token punctuation\">(</span>Irp<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> IoCompRoutine<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> <span class=\"token operator\">&amp;</span>event<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre> TRUE<span class=\"token punctuation\">,</span>TRUE<span class=\"token punctuation\">,</span>TRUE</pre></td></tr><tr><td data-num=\"13\"></td><td><pre> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">/// 将 IRP 往下发</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>status <span class=\"token operator\">=</span> <span class=\"token function\">IoCallDriver</span><span class=\"token punctuation\">(</span>DeviceObject<span class=\"token punctuation\">,</span>Irp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">/// 如果 IRP 处于 pending 状态，就在这个事件上等待</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>status <span class=\"token operator\">==</span> STATUS_PENDING<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre> status <span class=\"token operator\">=</span> <span class=\"token function\">KeWaitForSingleObject</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>event<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  Executive<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  KernelMode<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  FALSE<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token constant\">NULL</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre> </pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token function\">ASSERT</span><span class=\"token punctuation\">(</span><span class=\"token function\">NT_SUCCESS</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\">/// 驱动的分发例程也还需要在 IRP 被后面的驱动处理完成之后再处理它，一般在驱动程序将 IRP 传递个下一个驱动之后，就不再拥有这个 IRP，并且不能试图再去访问它。否则会导致系统崩溃。因为那个 IRP 会被其它的驱动或者线程 `释放或完成`。这里可以访问是因为设置了完成例程，并且这个 IoCompletion 例程返回了 `STATUS_MORE_PROCESSING_REQUIRED`</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>status <span class=\"token operator\">=</span> Irp<span class=\"token operator\">-></span>IoStatus<span class=\"token punctuation\">.</span>Status<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token function\">IoFreelrp</span><span class=\"token punctuation\">(</span>Irp<span class=\"token punctuation\">)</span> <span class=\"token comment\">///&lt; 原本有完成例程负责 Irp 的销毁，这时候就需要交给分发例程来做了</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token comment\">/// 完成例程</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>NTSTATUS <span class=\"token function\">IoCompRoutine</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre> IN PDEVICE_OBJECT DeviceObject<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre> IN PIRP Irp<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre> IN PVOID Context</pre></td></tr><tr><td data-num=\"38\"></td><td><pre> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre> PKEVENT event <span class=\"token operator\">=</span> Context<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre> <span class=\"token comment\">/// 当 I/O 管理器调用 `IoCompletion` 例程时，这个驱动就能够在 IoCompletion `例程执行期间` 重新获得对这一 IRP 的所有权。</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre> <span class=\"token comment\">/// 如此，IoCompletion 例程就能够访问 IRP 中的域。</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre> Irp<span class=\"token operator\">-></span>UserIosb<span class=\"token operator\">-></span>Status <span class=\"token operator\">=</span> Irp<span class=\"token operator\">-></span>IoStatus<span class=\"token punctuation\">.</span>Status<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre> Irp<span class=\"token operator\">-></span>UserIosb<span class=\"token operator\">-></span>Infomation <span class=\"token operator\">=</span> Irp<span class=\"token operator\">-></span>IoStatus<span class=\"token punctuation\">.</span>Information<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre> <span class=\"token function\">KeSetEvent</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">,</span>IO_NO_INCREMENT<span class=\"token punctuation\">,</span> FALSE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre> <span class=\"token comment\">//IoFreelrp (Irp) ///&lt; 原本有完成例程负责 Irp 的销毁，这时候就需要交给分发例程来做了</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre> <span class=\"token keyword\">return</span> STATUS_MORE_PROCESSING_REQUIRED<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre> <span class=\"token comment\">/// 返回 STATUS_MORE_PROCESSING_REQUIRED，以将 IRP 的所有权返回给 `分发例程`</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre> <span class=\"token comment\">/// I/O 管理器会停止 IRP 的处理，将最终完成 IRP 的在务留给分发例程。分发例程能够在之后调用 `IoCompleteRequest` 来完成这个 IRP, 或者还能将这个 IRP 标记为等候进一步处理。</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"ioskipiocall直接下发\"><a class=\"anchor\" href=\"#ioskipiocall直接下发\">#</a>  <code>IoSkip+IoCall</code>  直接下发</h4>\n<ul>\n<li>对 IRP 没有任何改动的时候，比如放行</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>PDEVICE_EXTENSION deviceExtension<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">IoSkipCurrentlrpstackLocation</span><span class=\"token punctuation\">(</span>lrp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/// 拿到保存在设备扩展里的下层设备 deviceExtension</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">(</span>PDEVICE_EXTENSION<span class=\"token punctuation\">)</span> DeviceObject<span class=\"token operator\">-></span>DeviceExtension<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">/// 下发</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">/// 在驱动程序将 IRP 传递个下一个驱动之后，就不再拥有这个 IRP，并且不能试图再去访问它。否则会导致系统崩溃。</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">/// 因为这个 IRP 会被其它的驱动或者线程 `释放或完成`。</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">return</span> <span class=\"token function\">IoCallDriver</span><span class=\"token punctuation\">(</span>deviceExtension<span class=\"token operator\">-></span>TargetDeviceObject<span class=\"token punctuation\">,</span>Irp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"错误的下发方式\"><a class=\"anchor\" href=\"#错误的下发方式\">#</a> 错误的下发方式:</h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/// 没有设置完成例程（并且在完成例程中返回 STATUS_MORE_PROCESSING_REQUIRED，以将 IRP 的所有权返回给 `分发例程`）</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// Forward request to next driver</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">IoCopyCurrentlrpStackLocationToNext</span><span class=\"token punctuation\">(</span>Irp<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// Send the lRP down</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>status <span class=\"token function\">IoCallDriver</span><span class=\"token punctuation\">(</span>nextDevice<span class=\"token punctuation\">,</span>Irp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// The following is an error because thisdriver</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// no longer owns the IRP</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>status <span class=\"token operator\">==</span> STATUS_PENDING<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> <span class=\"token function\">IoMarklrpPending</span><span class=\"token punctuation\">(</span>Irp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 错误，无权操作 Irp 了</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// Return the lower driver's status</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">return</span> status<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"基于sfilter的hips\"><a class=\"anchor\" href=\"#基于sfilter的hips\">#</a> 基于 Sfilter 的 HIPS</h2>\n<ul>\n<li>监控敏感目录 (全盘监控效率低)</li>\n<li>防勒索工具</li>\n</ul>\n<h3 id=\"过滤分发函数\"><a class=\"anchor\" href=\"#过滤分发函数\">#</a> 过滤分发函数</h3>\n<p>过滤分发函数中所需要做的事情：</p>\n<ul>\n<li>\n<p><code>FilterCreate</code> （创建)</p>\n<ul>\n<li>病毒和木马进入系统肯定会生成一些文件，比如释放  <code>.sys</code> , <code>.dll</code>  文件或者一个  <code>链接</code> 等等都属于文件创建操作</li>\n<li>全局监控太耗性能，只监控一些敏感的区域比较好</li>\n</ul>\n</li>\n<li>\n<p><code>FilterRead</code>  (一般不拦，加解密处理)</p>\n<ul>\n<li>读操作不会修改文件，但是如果作为  <code>隐私保护器</code> ，那需要拦截，防止别人读取文件</li>\n<li>加解密中也要拦截， 读操作这时候是解密</li>\n</ul>\n</li>\n<li>\n<p><code>FilterWrite</code> （修改，小心加解密处理)</p>\n<ul>\n<li>修改文件肯定要拦截</li>\n<li>加解密中也要拦截， 写操作这时候是加密</li>\n</ul>\n</li>\n<li>\n<p><code>FilterSetInfo</code>  (删，重命名)</p>\n<ul>\n<li>删，重命名对应 IRP_MJ_SET_INFORMATION 下的次功能号，所以也需要拦</li>\n</ul>\n</li>\n<li>\n<p><code>FilterClose</code>  (一般不拦)</p>\n</li>\n<li>\n<p><code>FilterClean</code> （写关闭等)</p>\n<ul>\n<li>写关闭：写操作完成之后关闭，要拦截。</li>\n<li>比如，一个病毒特征码是  <code>foul</code> , 要把病毒写到文件中去，直接写  <code>foul</code> , 在写的时候就会被杀毒软件匹配并拦截到。但每次写的时候只写一部分，第 1 次写  <code>f</code> ，第 2 次写  <code>o</code> ，第 3 次写  <code>u</code> ，第 4 次写  <code>l</code> ，写完之后文件保存就是  <code>foul</code> ，绕过了杀毒软件的查杀。所以要在每次写完的关闭之前都需要扫描一遍文件是不是匹配病毒特征码，所以写关闭是需要拦截的。</li>\n<li>写关闭有时候无法直接区分，因为打开文件再关闭， <code>关闭之前不知道是读还是写</code> ，在 xp 里面，关闭的时候 information 是 2 则表示是写，win7 及以后版本则没有了这些标志。</li>\n<li>所以在 Sfilter 里面，往往是通过文件的修改时间来判断，如果是在  <code>1min</code>  之内则认为是写关闭。</li>\n<li>Minifilter 里面有  <code>上下文</code> ，写操作在打开文件的时候我们是知道的，因为打开文件的时候带写权限，把信息记录下来通过上下文的形式传给关闭操作的。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"代码详解\"><a class=\"anchor\" href=\"#代码详解\">#</a> 代码详解</h3>\n<h2 id=\"minifilter\"><a class=\"anchor\" href=\"#minifilter\">#</a> Minifilter</h2>\n<h3 id=\"minifilter与legacy-filtersfilter区别\"><a class=\"anchor\" href=\"#minifilter与legacy-filtersfilter区别\">#</a> Minifilter 与 legacy filter (Sfilter) 区别</h3>\n<ul>\n<li>\n<p>新一代的文件过滤驱动框架: Minifilter</p>\n</li>\n<li>\n<p>比 sfilter  <code>加载顺序更易控制</code> 。 <code>altitude</code>  被绑定到合适的位置。</p>\n</li>\n<li>\n<p><code>可卸载</code> 能力。</p>\n<ul>\n<li>系统不重启的情况下，HOOK 不支持卸载，卸载可能会蓝屏，是因为有的 IRP 可能没有立即返回，会被  <code>pending</code>  起来，如果这时候把 hook 的函数卸载，当重新回来执行的时候，函数的地址就失效了，内存无效，蓝屏。</li>\n<li>解决方法：引用计数</li>\n<li>minifiler 驱动是向 minifiler 框架注册的，minifilter 驱动卸载了，框架还在，就不会造成类似 HOOK 函数卸载后的问题</li>\n</ul>\n</li>\n<li>\n<p>Callback 模型  <code>仅需处理必要操作</code> 的能力 (pre_create,post create)</p>\n<ul>\n<li>相当于把 Sfilter 的分发函数分为两部分： <code>pre_create</code>  (IRP 下发之前), <code>post create</code>  (IRP 处理完之后)</li>\n<li>如果不想处理 IRP 就不需要注册对应的回调函数 (如果是 Sfilter 则需要为不处理的 IRP 注册一个  <code>通用</code> 的过滤分发函数)</li>\n<li>绑定过滤设备对象动作  <code>被隐藏</code></li>\n</ul>\n</li>\n<li>\n<p><code>兼容性</code> 更好</p>\n<ul>\n<li>hook 会打架，谁后生成谁优先</li>\n<li>Sfiler 不可卸载</li>\n<li>Minifilter 都没有上述问题</li>\n</ul>\n</li>\n<li>\n<p><code>名字处理</code> 更容易</p>\n<ul>\n<li>Minifilter 拿文件名只需直接调用函数就可以了</li>\n</ul>\n</li>\n<li>\n<p>安装方式 (.inf 或者用代码动态加载)</p>\n<ul>\n<li>动态安装，创建几个与之相关的注册表的键即可</li>\n</ul>\n</li>\n<li>\n<p>通信方式 (port)</p>\n<ul>\n<li>基于端口通信，效率非常高，应用层可以多个线程处理内核层发送的请求，每个线程也可以处理多个请求。</li>\n</ul>\n</li>\n<li>\n<p>同样遵循 IRQL, 锁等内核开发通用机制</p>\n</li>\n<li>\n<p>FltCreateFile/ZwCreateFile</p>\n<ul>\n<li>Minifilter 中不建议使用  <code>Zw*</code>  函数，而是使用  <code>Flt*</code>  函数，避免  <code>重入</code>  (死循环)</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"minifilter框架\"><a class=\"anchor\" href=\"#minifilter框架\">#</a> Minifilter 框架</h3>\n<h4 id=\"minifilter-2\"><a class=\"anchor\" href=\"#minifilter-2\">#</a> Minifilter</h4>\n<p>下图显示了一个简化的 I/O 堆栈，其中包含过滤管理器和三个微型过滤驱动程序。</p>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<ul>\n<li><code>I/O Nanager</code> : 负责把应用层的 IO 请求封装成 IRP 包，发送给  <code>Filter Manager</code></li>\n<li><code>Filter Manager Frame</code> : 把 IRP 重新组装成  <code>FLT_CALLBACK_DATA</code>  结构体，把这个结构体传给逐层传给 Minifilter 驱动 A，B，C (Altitude 值不一样，每次加载的时候相对关系是固定的，值大的在上层，越优先处理)，即 Minifilter 中没有 IRP 这一说法了，处理 IO 数据的时候都是从  <code>FLT_CALLBACK_DATA</code>  结构体中拿数据。</li>\n</ul>\n<h4 id=\"minifilter与sfilter共存\"><a class=\"anchor\" href=\"#minifilter与sfilter共存\">#</a> Minifilter 与 Sfilter 共存</h4>\n<p>下图显示了一个简化的 I/O 堆栈，其中包含两个过滤管理器帧、微型过滤驱动程序实例和旧过滤驱动程序。</p>\n<p><img data-src=\"image002.png\" alt=\"\" /></p>\n<ul>\n<li>Legacy Filter Driver：指的是  <code>Sfilter</code>  驱动，虽然夹在两个  <code>Filter Manager Frame</code> , 但 Sfilter 驱动是  <code>没有高度</code> 的。Sfilter 驱动可以在  <code>Filter Manager Frame</code>  的上面也可以在下面，二者之间没有说谁的级别比谁的级别高。</li>\n</ul>\n<h4 id=\"altitude值\"><a class=\"anchor\" href=\"#altitude值\">#</a> Altitude 值</h4>\n<ul>\n<li>\n<p>20000-429999</p>\n</li>\n<li>\n<p>每一个  <code>minifilter驱动</code> 必须有一个叫做  <code>altitude</code>  的  <code>唯一标识符</code> 。一个 minifilter 驱动的 altitude 定义了它加载时在 I/O 栈中相对其他 minifilter 驱动的位置。值越小，栈中位置就越低。</p>\n</li>\n<li>\n<p>FSFilter Anti-Virus 320000-329999</p>\n<ul>\n<li>此组包括在文件 I/O 期间探测并杀毒的过滤驱动。</li>\n<li><code>反病毒在加解密之前</code> 是合理的，如果加解密在前面，把文件加密了，反病毒就无法识别病毒特征码了。</li>\n</ul>\n</li>\n<li>\n<p>FSFilter Encryption 140000-149999</p>\n<ul>\n<li>此组包括在文件 I/O 期间  <code>加密</code> 和  <code>解密</code> 数据的过滤驱动。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"minifilter中的结构和定义\"><a class=\"anchor\" href=\"#minifilter中的结构和定义\">#</a> Minifilter 中的结构和定义</h3>\n<ul>\n<li><code>FLT_REGISTRATION</code>  的定义</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// https://docs.microsoft.com/en-us/windows-hardware/drivers/ifs/managing-contexts-in-a-minifilter-driver</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> FLT_REGISTRATION fileMonitorRegistration <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span> FLT_REGISTRATION<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">///&lt; Size</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> FELT_REGISTRATION_VERSION<span class=\"token punctuation\">,</span> <span class=\"token comment\">///&lt; Version</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>                         <span class=\"token comment\">///&lt; Flags</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> ContextRegistration<span class=\"token punctuation\">,</span>       <span class=\"token comment\">///&lt; ContextRegistration</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> fileMonitorCallbacks<span class=\"token punctuation\">,</span>      <span class=\"token comment\">///&lt; Operation callbacks, 结构体数组，每一个结构体封装了 IRP 和与之对应的回调函数，注册的回调函数就是放在这个结构体数组里</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> fileMonUnload<span class=\"token punctuation\">,</span>             <span class=\"token comment\">///&lt; FilterUnload, 在 Minifilter 卸载时调用，做一些清理工作</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> fileMonInstanceSetup<span class=\"token punctuation\">,</span>      <span class=\"token comment\">///&lt; InstanceSetup，instance 类似 Sfilter 中的过滤设备对象，有多少的卷设备就生成多个实例与之绑定，生成的过程是不可见的（看不到生成实例的代码，是由框架去做的），instance 的数量和卷设备对象的数量相等的，一一对应。</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> <span class=\"token comment\">///&lt; 调用时机：把 Minifilter 的实例绑定到卷设备对象上会调用这个函数</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre> <span class=\"token comment\">///&lt; 作用：可以记录下 instance 对应卷设备的一些属性，比如说是 C 盘还是 D 盘，文件类型是 FAT32 还是 NTFS，卷的扇区大小是 512B 还是 4KB。存到一个上下文里面（是个缓存），下次用到的时候，之间从缓存里面拿数据既可以了，提高效率。</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span>                      <span class=\"token comment\">///&lt; InstanceQuery Teardown</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre> fileMonInstanceTeardownStart<span class=\"token punctuation\">,</span> <span class=\"token comment\">///&lt; InstanceTeardownStart</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span>                         <span class=\"token comment\">///&lt; InstanceTeardownComplete</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span>                         <span class=\"token comment\">///&lt; GenerateFileName</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span>                         <span class=\"token comment\">///&lt; GenerateDestinationFileName</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre> <span class=\"token constant\">NULL</span>                          <span class=\"token comment\">///&lt; NormalizeNameComponent</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li><code>fileMonitorCallbacks</code>  结构体数组的定义</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> FLT_OPERATION_REGISTRATION fileMonitorCallbacks<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  IRP_MJ_CREATE<span class=\"token punctuation\">,</span> <span class=\"token comment\">/// 表示创建或者打开 IRP 的回调函数</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  FLTFL_OPERATION_REGISTRATION_SKIP_PAGlNG_IO<span class=\"token punctuation\">,</span> <span class=\"token comment\">// Flag，忽略掉 paging_io</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  HOOK_PreNtCreateFile<span class=\"token punctuation\">,</span> <span class=\"token comment\">/// 可以缺省其中一个 </span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  HOOK_PostNtCreateFile <span class=\"token comment\">/// 可以缺省其中一个</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  IRP_MJCLEANUP<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token number\">0</span>，</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  HOOK_PreNtCleanup<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token constant\">NULL</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  IRP_MJ_WRITE<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  HOOK_PreNtWriteFile<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  HOOK_PostNtWriteFile</pre></td></tr><tr><td data-num=\"20\"></td><td><pre> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  lRP_MJ_SETLINF ORMATION<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  HOOK_PreNtSetInformationFile<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  HOOK_PostNtSetInformationFile</pre></td></tr><tr><td data-num=\"26\"></td><td><pre> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  IRPZMJ_ORERATION_END</pre></td></tr><tr><td data-num=\"28\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>\n<p>文件带缓存 IO:</p>\n<ul>\n<li>预先读入文件和延迟写入文件。在读 / 写文件的时候，为了提高效率，文件带缓冲进行 IO 操作，读的时候提前读入目标旁边的数据，写的时候会延迟写 ( <code>集中起来一次性写入</code> )，因为磁盘是低速设备，减少 IO 次数是能提高效率的。</li>\n<li>当 ReadFile 时，会调用 NtReadFile () 系统调用，它会构造一个 IRP 下发到 FSD，FSD 会检查这个 IRP 看是不是可以缓存的，是的话，如果还没有为此文件建立缓存的话，就会调用 CclnitializeCacheMap () 函数建立缓存，它里面会调用内存管理器 (VMM）函数建立一个节对象。</li>\n<li>当用到时，会把这个节对象 (和文件关联) 映射到内核空间。如果 IRP 是可缓存的，则调用 CcCopyRead 函数进行从缓存中读入文件。</li>\n<li>如果此文件还没有在内存中，则会产生页面错误，交给 MmAccessFault () 函教处理，它会调用 loPageRead iO 分配一个不缓存的 IRP (IRP_PAGING_lO)，但是它会走 FSD，不会调用缓存的函数，而是最终调用磁盘驱动进行真实的磁盘读写读入到内存。</li>\n<li>之后 CcCopyRead () 再不会产生错误了，会从缓存复制到用户 Buffer 中</li>\n</ul>\n</li>\n<li>\n<p>IRP_PAGING_IO:</p>\n<ul>\n<li>情况 1. <code>IRP_NOCACHE</code>  &amp;&amp; 非  <code>IRP_XXX_ PAGING _IO</code> , 也就是用户程序设置 FILE_NO_INTERMEDIATE_BUFFERING, 流程是 App-&gt;IO-&gt;FSD-&gt;DISK</li>\n<li>情况 2. <code>IRP_CACHE</code> &amp;&amp; 非  <code>IRP_XXX_PAGING_IO</code> , 也就是用户程序默认设置，流程是 APP-&gt;IO-&gt;FSD-CC (Cache Manger)-&gt;MM (-&gt;FSD-DISK)</li>\n<li><code>IRP_PAGING_IO</code> : 在情况 2 中：MM 会发起一个 IRP 并标记为  <code>IRP_XXX_PAGING_IO</code> , 流程是 MM-&gt;FSD-&gt;DISK (on behalt of vm), 所以  <code>IRP_PAGING_IO</code>  不是由用户程序发起的，而是由  <code>内存管理器</code> 发起的，所以不需要监控。</li>\n<li>如果设置了 IRP_XXX_PAGING_IO, 那就是 MM 内部用的 IRP,CACHE 标记此时没有意义 (on behalft of vmn)</li>\n<li>发给磁盘的机会:</li>\n<li>1. <code>FILE_NO_INTERMEDIATE_BUFFERING</code> &amp;&amp; 非  <code>IRR_XXX_PAGING_IO</code>  的时候会发给 DISK，即 App-&gt;IO-&gt;FSD-&gt;DISK</li>\n<li>2. <code>IRP_XXX_PAGING_IO</code>  时候会发给 DISK，即 MM-&gt;FSD-&gt;DISK</li>\n</ul>\n</li>\n<li>\n<p>预操作回调函数和后操作回调函数的定义</p>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/// 以 create 操作为例</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">///create 执行之前调用</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>FLT_PREOP_CALLBACK_STATUS <span class=\"token function\">HOOK_PreNtCreateFile</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> PFLTCALLBACK_DATA Data<span class=\"token punctuation\">,</span> <span class=\"token comment\">///Filter Manager Frame 将 IRP 重新组装成 `FLT_CALLBACK_DATA` 结构体</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> PCFLT_RELATED_OBJECTS FltObjects<span class=\"token punctuation\">,</span> <span class=\"token comment\">/// 与 Minifilter 相关的对象</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> PVOID <span class=\"token operator\">*</span>CompletionContext <span class=\"token comment\">/// 分配的一个 context 资源，可以传给 Post 函数处理，然后在 Post 函数释放掉 context 资源</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> <span class=\"token comment\">//sandbox</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> <span class=\"token comment\">// 主防</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> <span class=\"token comment\">// 杀毒引擎</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre> <span class=\"token comment\">// 加解密</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> <span class=\"token keyword\">return</span> xxx<span class=\"token punctuation\">;</span> <span class=\"token comment\">/// 这个返回值是返回给 Minifilter 管理器的，拿到返回值之后再决定要不要把操作继续往下发给 Mnifilter 驱动或者 Sfilter 驱动</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre> <span class=\"token comment\">/// Data->IoStatus.Status = STATUS_ACCESS_DENIED; 这个才是返回给 IO 管理器的，即应用层</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token comment\">/// PRE-OP 的返回值：(和 sfilter 比较)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre> <span class=\"token comment\">/// FLT_PREOP_SUCCESS_WITH_CALLBACK // 告诉 Minifilte 管理器要把操作往下发，结束之后要调用 Post, 类似 Sfilter 中 `IoCopyxxX + 完成例程` 将 IRP 下发</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre> <span class=\"token comment\">/// FLTPREOP_SUCCESS_NO_CALLBACK // 告诉 Minifilte 管理器要把操作往下发，结束之后但不需要调用 Post, 类似 Sfilter 中 `IoSkip+IoCall` 直接下发</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre> <span class=\"token comment\">/// FLT_PREOP_PENDING  // 挂起</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre> <span class=\"token comment\">/// FLT PREOP DISALLOW_FASTIO // 禁用 fastio</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre> <span class=\"token comment\">/// FLT_PREOP_COMPLETE // 告诉 Minifilte 管理器要把操作完成之后不下发了，当前为止，不下发有拒绝 (STATUS_ACCESS_DENIED), 成功完成 (STATUS_ACCESS)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre> <span class=\"token comment\">/// FLT_PREOP_SYNCHRONIZE // 同步</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">///create 完成之后创建 </span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>FLT_POSTOP_CALLBACK_STATUS <span class=\"token function\">HOOK_PostNtCreateFile</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre> PFLT_CALLBACK_DATA Data<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre> PCFLT RELATED_OBJECTS FltObjects<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre> PVOID completionContext， <span class=\"token comment\">// 在 PRE-OP 里返回 FLT_PREOPsuCcEss_wITH_CALLBACK 时获取里面的上下文，并最后释放 Context 资源</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre> FLT_POST_OPERATION_FLAGS Flags</pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre> <span class=\"token keyword\">return</span> xxx<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre> <span class=\"token comment\">// POST-OP 的返回值:</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre> <span class=\"token comment\">// FLT_POSTOP_FINISHED_PROCESSING // 最终完成处理</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre> <span class=\"token comment\">// FLT_POSTOP_MORE_PROCESSING_REQUIRED //post 处理完之后，还需要更多处理，一般发生在 Post 里面，如果 Irql 比较高，比如处于 DISPATCH_LEVEL，这样需要做一些操作的时候，是需要开一个工作者线程去做，这时候就需要返回一个 FLT_POSTOP_MORE_PROCESSING_REQUIRED</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>FltObjects<span class=\"token operator\">-></span>volume<span class=\"token punctuation\">,</span>FltObjects<span class=\"token operator\">-></span>Instance<span class=\"token punctuation\">,</span>FltObjects<span class=\"token operator\">-></span>FileObject<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>FltObjects<span class=\"token operator\">-></span>FileObject<span class=\"token operator\">-></span>DeviceObject</pre></td></tr></table></figure><ul>\n<li><code>判断Data是什么操作的宏</code></li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>FLT_IS_IRP_OPERATION  <span class=\"token comment\">/// 应用下发的 IRP</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>FLT_IS_FASTIO_OPERATION <span class=\"token comment\">/// 走缓存</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>FLJ IS_FS_FILTER_OPERATION <span class=\"token comment\">/// 其他 Minifilter 或者 Sfilter 下发的</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">//eg：禁用 fastio</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">FLT_IS_FASTIO_OPERATION</span><span class=\"token punctuation\">(</span>Data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">/// 为真则是 Fasdtio 操作</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> ntStatus STATUS_FLT DISALLOW_FAST_I0<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> Data<span class=\"token operator\">-></span>loStatus<span class=\"token punctuation\">.</span>status <span class=\"token operator\">=</span> ntStatus<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> Data<span class=\"token operator\">-></span>loStatus<span class=\"token punctuation\">.</span>Information <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> <span class=\"token keyword\">return</span> FLT_PREOR_DISALLOW_FASTIO<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li><code>参数数据的获取</code></li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>PFLT_CALLBACK_DATA Data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>PEPROCESS processObject <span class=\"token operator\">=</span> Data<span class=\"token operator\">-></span>Thread <span class=\"token operator\">?</span> <span class=\"token function\">loThreadToProcess</span><span class=\"token punctuation\">(</span>Data<span class=\"token operator\">-></span>Thread<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">PsGetCurrentProcess</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/// 把 Thread 转换成 Exprocess 结构</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">HandleToUlong</span><span class=\"token punctuation\">(</span><span class=\"token function\">PsGetProcessld</span><span class=\"token punctuation\">(</span>processObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">/// 通过 Eprocess 结构拿到 PID</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Data<span class=\"token operator\">-></span>IoStatus<span class=\"token punctuation\">.</span>Status <span class=\"token operator\">=</span> ntStatus<span class=\"token punctuation\">;</span> <span class=\"token comment\">///pIrp->loStatus.Status=ntStatus;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>Data<span class=\"token operator\">-></span>IoStatus<span class=\"token punctuation\">.</span>Information <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/// 跟 IRP 类似</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>FltObjects<span class=\"token operator\">-></span>Volume<span class=\"token punctuation\">,</span> <span class=\"token comment\">/// 卷设备对象</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>FltObjects<span class=\"token operator\">-></span>Instance<span class=\"token punctuation\">,</span> <span class=\"token comment\">/// 实例对象和 Volume 一一对应</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>FltObjects<span class=\"token operator\">-></span>FileObject<span class=\"token punctuation\">,</span> <span class=\"token comment\">/// 要被操作目标文件的内核对象</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>FltObjects<span class=\"token operator\">-</span>FileObject<span class=\"token operator\">-></span>DeviceObject <span class=\"token comment\">/// 文件所在的设备对象</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre> </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>PMDE pReadMdl <span class=\"token operator\">=</span> Data<span class=\"token operator\">-></span>lopb<span class=\"token operator\">-></span>Parameters<span class=\"token punctuation\">.</span>Read<span class=\"token punctuation\">.</span>MdlAddress<span class=\"token punctuation\">;</span> <span class=\"token comment\">///MdlAddress!=NULL 使用的是 direct io</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>PVOID pReadBuffer <span class=\"token operator\">=</span> Data<span class=\"token operator\">-></span>Iopb<span class=\"token operator\">-></span>Parameters<span class=\"token punctuation\">.</span>ReadBuffer<span class=\"token punctuation\">;</span><span class=\"token comment\">///MdlAddress==NULL 使用的是 readbuffer</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>ULONG uReadLength <span class=\"token operator\">=</span> Data<span class=\"token operator\">-></span>lopb<span class=\"token operator\">-></span>Parameters<span class=\"token punctuation\">.</span>Read<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">;</span> <span class=\"token comment\">/// 读数据的长度</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>Data<span class=\"token operator\">-></span>Iopb<span class=\"token operator\">-></span>Parameters<span class=\"token punctuation\">.</span>create<span class=\"token punctuation\">.</span>SecurityContext<span class=\"token operator\">-></span>DesiredAccess <span class=\"token comment\">/// 如果是创建，创建的一些操作可以拿到，比如说以写的方式，读的方式还是读写的方式等</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre> </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>PVOID pQueryBuffer</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>Data<span class=\"token operator\">></span>Iopb<span class=\"token operator\">-></span>Parameters<span class=\"token punctuation\">.</span>DirectoryControl<span class=\"token punctuation\">.</span>QueryDirectory<span class=\"token punctuation\">.</span>DineectoryBuffer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">/// 查询文件夹的 buffer</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>ULONG uQueryBuffersize <span class=\"token operator\">=</span> Data<span class=\"token operator\">-></span>lopb<span class=\"token operator\">-></span>Parameters<span class=\"token punctuation\">.</span>DirectoryControl<span class=\"token punctuation\">.</span>QueryDirectory<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">;</span> <span class=\"token comment\">/// 查询文件夹的 buffer 长度</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">/// 返回</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>Data<span class=\"token operator\">-></span>IoStatus<span class=\"token punctuation\">.</span>Status <span class=\"token operator\">=</span> STATUS_ACCESS_DENIED<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>Data<span class=\"token operator\">-></span>IoStatus<span class=\"token punctuation\">.</span>Information <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">return</span> FLT_PREOP_COMPLETE<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li><code>启动mifilter</code></li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/// 注册</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">/// 自己封装的一个 initFileMonitor</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>NTSTATUS <span class=\"token function\">initFileMonitor</span><span class=\"token punctuation\">(</span>PDRIVER_OBJECT DriverObject <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token comment\">//fileMonitorRegistration 结构体传给 FltRegisterFilter 函数进行注册，得到句柄 g_pFilter</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token keyword\">return</span> <span class=\"token function\">FltRegisterFilter</span><span class=\"token punctuation\">(</span> DriverObject<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token operator\">&amp;</span>fileMonitorRegistration<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token operator\">&amp;</span>g_pFilter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">/// 启动</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>NTSTATUS <span class=\"token function\">startFileMonitor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>g_pFilter<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token comment\">// 启动 Minifilter 驱动，以后所有与 Write，READ，SET_INFORMATION 等相关的 IO 操作依次会被 _Pre* 和 _Pos * 函数拦截</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token function\">FltStartFiltering</span><span class=\"token punctuation\">(</span>g_pFilter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre> <span class=\"token keyword\">return</span> STATUS_INSUFFICIENT_RESOURCES<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">/// 卸载</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>VOID <span class=\"token function\">stopFileMonitor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>g_pFilter<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre> </pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token function\">FltUnregisterFilter</span><span class=\"token punctuation\">(</span>g_pFilter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 卸载时会调用 fileMonitorRegistration.fileMonUnload 来释放一些资源</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  g_pFilter <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"minifilter的安装方式\"><a class=\"anchor\" href=\"#minifilter的安装方式\">#</a> Minifilter 的安装方式</h3>\n<h4 id=\"inf格式安装\"><a class=\"anchor\" href=\"#inf格式安装\">#</a>  <code>.inf</code>  格式安装</h4>\n<p>当我们创建 Minifilter 项目的时候 VS 编译器会自动给我们生成一个格式。我们只需要修改一下几个关键点就可以了，其中也有微软的注释。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span> xxxx 是驱动项目的名字</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">[</span>Version<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>Signature   <span class=\"token operator\">=</span> <span class=\"token string\">\"$Windows NT$\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">;</span> TODO <span class=\"token operator\">-</span> Change the Class <span class=\"token operator\">and</span> ClassGuid to match the Load Order Group value<span class=\"token punctuation\">,</span> see https<span class=\"token operator\">:</span><span class=\"token comment\">//msdn.microsoft.com/en-us/windows/hardware/gg462963</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">;</span> Class       <span class=\"token operator\">=</span> <span class=\"token string\">\"ActivityMonitor\"</span>                         <span class=\"token punctuation\">;</span>This is determined by the work <span class=\"token keyword\">this</span> filter driver does</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">;</span> ClassGuid   <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>b86dff51<span class=\"token operator\">-</span>a31e<span class=\"token operator\">-</span><span class=\"token number\">4</span>bac<span class=\"token operator\">-</span>b3cf<span class=\"token operator\">-</span>e8cfe75c9fc2<span class=\"token punctuation\">&#125;</span>    <span class=\"token punctuation\">;</span>This value is determined by the Load Order Group value</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>Class <span class=\"token operator\">=</span> <span class=\"token string\">\"ActivityMonitor\"</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>ClassGuid <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>b86dff51<span class=\"token operator\">-</span>a31e<span class=\"token operator\">-</span><span class=\"token number\">4</span>bac<span class=\"token operator\">-</span>b3cf<span class=\"token operator\">-</span>e8cfe75c9fc2<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>Provider    <span class=\"token operator\">=</span> <span class=\"token operator\">%</span>ManufacturerName<span class=\"token operator\">%</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>DriverVer   <span class=\"token operator\">=</span> </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>CatalogFile <span class=\"token operator\">=</span> xxxx<span class=\"token punctuation\">.</span>cat</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>PnpLockDown<span class=\"token operator\">=</span><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">[</span>DestinationDirs<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>DefaultDestDir          <span class=\"token operator\">=</span> <span class=\"token number\">12</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>MiniFilter<span class=\"token punctuation\">.</span>DriverFiles  <span class=\"token operator\">=</span> <span class=\"token number\">12</span>            <span class=\"token punctuation\">;</span><span class=\"token operator\">%</span>windir<span class=\"token operator\">%</span>\\system32\\drivers</pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span> Default install sections</pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">[</span>DefaultInstall<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>OptionDesc          <span class=\"token operator\">=</span> <span class=\"token operator\">%</span>ServiceDescription<span class=\"token operator\">%</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>CopyFiles           <span class=\"token operator\">=</span> MiniFilter<span class=\"token punctuation\">.</span>DriverFiles</pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">[</span>DefaultInstall<span class=\"token punctuation\">.</span>Services<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>AddService          <span class=\"token operator\">=</span> <span class=\"token operator\">%</span>ServiceName<span class=\"token operator\">%</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">,</span>MiniFilter<span class=\"token punctuation\">.</span>Service</pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span> Default uninstall sections</pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">[</span>DefaultUninstall<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>DelFiles   <span class=\"token operator\">=</span> MiniFilter<span class=\"token punctuation\">.</span>DriverFiles</pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">[</span>DefaultUninstall<span class=\"token punctuation\">.</span>Services<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>DelService <span class=\"token operator\">=</span> <span class=\"token operator\">%</span>ServiceName<span class=\"token operator\">%</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x200</span>      <span class=\"token punctuation\">;</span>Ensure service is stopped before deleting</pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token punctuation\">;</span> Services Section</pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token punctuation\">[</span>MiniFilter<span class=\"token punctuation\">.</span>Service<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>DisplayName      <span class=\"token operator\">=</span> <span class=\"token operator\">%</span>ServiceName<span class=\"token operator\">%</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>Description      <span class=\"token operator\">=</span> <span class=\"token operator\">%</span>ServiceDescription<span class=\"token operator\">%</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>ServiceBinary    <span class=\"token operator\">=</span> <span class=\"token operator\">%</span><span class=\"token number\">12</span><span class=\"token operator\">%</span>\\<span class=\"token operator\">%</span>DriverName<span class=\"token operator\">%</span><span class=\"token punctuation\">.</span>sys        <span class=\"token punctuation\">;</span><span class=\"token operator\">%</span>windir<span class=\"token operator\">%</span>\\system32\\drivers\\</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>Dependencies     <span class=\"token operator\">=</span> <span class=\"token string\">\"FltMgr\"</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>ServiceType      <span class=\"token operator\">=</span> <span class=\"token number\">2</span>                            <span class=\"token punctuation\">;</span>SERVICE_FILE_SYSTEM_DRIVER</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>StartType        <span class=\"token operator\">=</span> <span class=\"token number\">3</span>                            <span class=\"token punctuation\">;</span>SERVICE_DEMAND_START</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>ErrorControl     <span class=\"token operator\">=</span> <span class=\"token number\">1</span>                            <span class=\"token punctuation\">;</span>SERVICE_ERROR_NORMAL</pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token punctuation\">;</span> TODO <span class=\"token operator\">-</span> Change the Load Order Group value</pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token punctuation\">;</span> LoadOrderGroup <span class=\"token operator\">=</span> <span class=\"token string\">\"FSFilter Activity Monitor\"</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>LoadOrderGroup <span class=\"token operator\">=</span> <span class=\"token string\">\"_TODO_Change_LoadOrderGroup_appropriately_\"</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>AddReg           <span class=\"token operator\">=</span> MiniFilter<span class=\"token punctuation\">.</span>AddRegistry</pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token punctuation\">;</span> Registry Modifications</pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token punctuation\">[</span>MiniFilter<span class=\"token punctuation\">.</span>AddRegistry<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>HKR<span class=\"token punctuation\">,</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"DebugFlags\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x00010001</span> <span class=\"token punctuation\">,</span><span class=\"token number\">0x0</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>HKR<span class=\"token punctuation\">,</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"SupportedFeatures\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x00010001</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x3</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>HKR<span class=\"token punctuation\">,</span><span class=\"token string\">\"Instances\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"DefaultInstance\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x00000000</span><span class=\"token punctuation\">,</span><span class=\"token operator\">%</span>DefaultInstance<span class=\"token operator\">%</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>HKR<span class=\"token punctuation\">,</span><span class=\"token string\">\"Instances\\\"%Instance1.Name%,\"</span>Altitude\"<span class=\"token punctuation\">,</span><span class=\"token number\">0x00000000</span><span class=\"token punctuation\">,</span><span class=\"token operator\">%</span>Instance1<span class=\"token punctuation\">.</span>Altitude<span class=\"token operator\">%</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>HKR<span class=\"token punctuation\">,</span><span class=\"token string\">\"Instances\\\"%Instance1.Name%,\"</span>Flags\"<span class=\"token punctuation\">,</span><span class=\"token number\">0x00010001</span><span class=\"token punctuation\">,</span><span class=\"token operator\">%</span>Instance1<span class=\"token punctuation\">.</span>Flags<span class=\"token operator\">%</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre></pre></td></tr><tr><td data-num=\"70\"></td><td><pre><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre><span class=\"token punctuation\">;</span> Copy Files</pre></td></tr><tr><td data-num=\"72\"></td><td><pre><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre></pre></td></tr><tr><td data-num=\"74\"></td><td><pre><span class=\"token punctuation\">[</span>MiniFilter<span class=\"token punctuation\">.</span>DriverFiles<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre><span class=\"token operator\">%</span>DriverName<span class=\"token operator\">%</span><span class=\"token punctuation\">.</span>sys</pre></td></tr><tr><td data-num=\"76\"></td><td><pre></pre></td></tr><tr><td data-num=\"77\"></td><td><pre><span class=\"token punctuation\">[</span>SourceDisksFiles<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>xxxx<span class=\"token punctuation\">.</span>sys <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre></pre></td></tr><tr><td data-num=\"80\"></td><td><pre><span class=\"token punctuation\">[</span>SourceDisksNames<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre><span class=\"token number\">1</span> <span class=\"token operator\">=</span> <span class=\"token operator\">%</span>DiskId1<span class=\"token operator\">%</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre></pre></td></tr><tr><td data-num=\"83\"></td><td><pre><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span> String Section</pre></td></tr><tr><td data-num=\"85\"></td><td><pre><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre></pre></td></tr><tr><td data-num=\"87\"></td><td><pre><span class=\"token punctuation\">[</span>Strings<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre><span class=\"token punctuation\">;</span> TODO <span class=\"token operator\">-</span> Add your manufacturer</pre></td></tr><tr><td data-num=\"89\"></td><td><pre>ManufacturerName        <span class=\"token operator\">=</span> <span class=\"token string\">\"Template\"</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>ServiceDescription      <span class=\"token operator\">=</span> <span class=\"token string\">\"xxxx Mini-Filter Driver\"</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>ServiceName             <span class=\"token operator\">=</span> <span class=\"token string\">\"xxxx\"</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>DriverName              <span class=\"token operator\">=</span> <span class=\"token string\">\"xxxx\"</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>DiskId1                 <span class=\"token operator\">=</span> <span class=\"token string\">\"xxxx Device Installation Disk\"</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre></pre></td></tr><tr><td data-num=\"95\"></td><td><pre><span class=\"token punctuation\">;</span>Instances specific information<span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>DefaultInstance         <span class=\"token operator\">=</span> <span class=\"token string\">\"xxxx Instance\"</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>Instance1<span class=\"token punctuation\">.</span>Name          <span class=\"token operator\">=</span> <span class=\"token string\">\"xxxx Instance\"</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre><span class=\"token punctuation\">;</span> TODO <span class=\"token operator\">-</span> Change the altitude value<span class=\"token punctuation\">,</span> see https<span class=\"token operator\">:</span><span class=\"token comment\">//msdn.microsoft.com/en-us/windows/hardware/drivers/ifs/load-order-groups-and-altitudes-for-minifilter-drivers</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>Instance1<span class=\"token punctuation\">.</span>Altitude       <span class=\"token operator\">=</span> <span class=\"token string\">\"370030\"</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>Instance1<span class=\"token punctuation\">.</span>Flags         <span class=\"token operator\">=</span> <span class=\"token number\">0x0</span>              <span class=\"token punctuation\">;</span> Allow all attachments</pre></td></tr></table></figure><ul>\n<li>对于  <code>.inf</code>  文件，可以右键选择安装。</li>\n<li>也可以直接调用 API</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span> 加载</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>SetupCopyOEMlnf</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span> 或者</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">InstallHinfSection</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span><span class=\"token function\">TEXT</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"DefaultInstall128 .\\\\myfilter.inf\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span> 卸载</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">InstallHinfSection</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span><span class=\"token function\">TEXT</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"DefaultUninstall128 .\\\\upfilter.inf\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"动态加载\"><a class=\"anchor\" href=\"#动态加载\">#</a> 动态加载</h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// MinifilterInstall.cpp : Defines the entry point for the console application.</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"stdafx.h\"</span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;windows.h></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;winioctl.h></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;winsvc.h></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;conio.h></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">//#include &lt;fltuser.h></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">//#include &lt;dontuse.h></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">DRIVER_NAME</span> <span class=\"token string\">\"驱动项目名字\"</span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">DRIVER_PATH</span> <span class=\"token string\">\".\\\\驱动项目名字.sys\"</span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">DRIVER_ALTITUDE</span>  <span class=\"token string\">\"370020\"</span> <span class=\"token comment\">// 这里没有使用 UNICODE 编码，导致安装不生效，是因为工程是宽字节的工程，如果是多字节工程那就没问题</span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">// SYS 文件跟程序放在同个目录下</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">// InstallDriver(DRIVER_NAME,DRIVER_PATH,DRIVER_ALTITUDE);</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">// 启动驱动服务 StartDriver (DRIVER_NAME);</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">// 停止驱动服务 StopDriver (DRIVER_NAME);</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">// 卸载服务 DeleteDriver (DRIVER_NAME);</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>BOOL <span class=\"token function\">InstallDriver</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> lpszDriverName<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> lpszDriverPath<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> lpszAltitude<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">char</span>    szTempStr<span class=\"token punctuation\">[</span>MAX_PATH<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    HKEY    hKey<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    DWORD    dwData<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">char</span>    szDriverImagePath<span class=\"token punctuation\">[</span>MAX_PATH<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> <span class=\"token constant\">NULL</span><span class=\"token operator\">==</span>lpszDriverName <span class=\"token operator\">||</span> <span class=\"token constant\">NULL</span><span class=\"token operator\">==</span>lpszDriverPath <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token keyword\">return</span> FALSE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token comment\">// 得到完整的驱动路径</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token function\">GetFullPathName</span><span class=\"token punctuation\">(</span>lpszDriverPath<span class=\"token punctuation\">,</span> MAX_PATH<span class=\"token punctuation\">,</span> szDriverImagePath<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    SC_HANDLE hServiceMgr<span class=\"token operator\">=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// SCM 管理器的句柄</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    SC_HANDLE hService<span class=\"token operator\">=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// NT 驱动程序的服务句柄</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token comment\">// 打开服务控制管理器</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    hServiceMgr <span class=\"token operator\">=</span> <span class=\"token function\">OpenSCManager</span><span class=\"token punctuation\">(</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> SC_MANAGER_ALL_ACCESS <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> hServiceMgr <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span> <span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token comment\">// OpenSCManager 失败</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token function\">CloseServiceHandle</span><span class=\"token punctuation\">(</span>hServiceMgr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token keyword\">return</span> FALSE<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token comment\">// OpenSCManager 成功  </span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token comment\">// 创建驱动所对应的服务</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    hService <span class=\"token operator\">=</span> <span class=\"token function\">CreateService</span><span class=\"token punctuation\">(</span> hServiceMgr<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        lpszDriverName<span class=\"token punctuation\">,</span>             <span class=\"token comment\">// 驱动程序的在注册表中的名字</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        lpszDriverName<span class=\"token punctuation\">,</span>             <span class=\"token comment\">// 注册表驱动程序的 DisplayName 值</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        SERVICE_ALL_ACCESS<span class=\"token punctuation\">,</span>         <span class=\"token comment\">// 加载驱动程序的访问权限</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        SERVICE_FILE_SYSTEM_DRIVER<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 表示加载的服务是文件系统驱动程序</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        SERVICE_DEMAND_START<span class=\"token punctuation\">,</span>       <span class=\"token comment\">// 注册表驱动程序的 Start 值</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        SERVICE_ERROR_IGNORE<span class=\"token punctuation\">,</span>       <span class=\"token comment\">// 注册表驱动程序的 ErrorControl 值</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        szDriverImagePath<span class=\"token punctuation\">,</span>          <span class=\"token comment\">// 注册表驱动程序的 ImagePath 值</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        <span class=\"token string\">\"FSFilter Activity Monitor\"</span><span class=\"token punctuation\">,</span><span class=\"token comment\">// 注册表驱动程序的 Group 值</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        <span class=\"token string\">\"FltMgr\"</span><span class=\"token punctuation\">,</span>                   <span class=\"token comment\">// 注册表驱动程序的 DependOnService 值</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> hService <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span> <span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"70\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> <span class=\"token function\">GetLastError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> ERROR_SERVICE_EXISTS <span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"71\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>            <span class=\"token comment\">// 服务创建失败，是由于服务已经创立过</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>            <span class=\"token function\">CloseServiceHandle</span><span class=\"token punctuation\">(</span>hService<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">// 服务句柄</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>            <span class=\"token function\">CloseServiceHandle</span><span class=\"token punctuation\">(</span>hServiceMgr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// SCM 句柄</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>            <span class=\"token keyword\">return</span> TRUE<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"76\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>        <span class=\"token keyword\">else</span> </pre></td></tr><tr><td data-num=\"78\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>            <span class=\"token function\">CloseServiceHandle</span><span class=\"token punctuation\">(</span>hService<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">// 服务句柄</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>            <span class=\"token function\">CloseServiceHandle</span><span class=\"token punctuation\">(</span>hServiceMgr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// SCM 句柄</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>            <span class=\"token keyword\">return</span> FALSE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>    <span class=\"token function\">CloseServiceHandle</span><span class=\"token punctuation\">(</span>hService<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">// 服务句柄</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>    <span class=\"token function\">CloseServiceHandle</span><span class=\"token punctuation\">(</span>hServiceMgr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// SCM 句柄</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>    <span class=\"token comment\">//-------------------------------------------------------------------------------------------------------</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>    <span class=\"token comment\">// SYSTEM\\\\CurrentControlSet\\\\Services\\\\DriverName\\\\Instances 子健下的键值项 </span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>    <span class=\"token comment\">//-------------------------------------------------------------------------------------------------------</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>    <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>szTempStr<span class=\"token punctuation\">,</span><span class=\"token string\">\"SYSTEM\\\\CurrentControlSet\\\\Services\\\\\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>    <span class=\"token function\">strcat</span><span class=\"token punctuation\">(</span>szTempStr<span class=\"token punctuation\">,</span>lpszDriverName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>    <span class=\"token function\">strcat</span><span class=\"token punctuation\">(</span>szTempStr<span class=\"token punctuation\">,</span><span class=\"token string\">\"\\\\Instances\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">RegCreateKeyEx</span><span class=\"token punctuation\">(</span>HKEY_LOCAL_MACHINE<span class=\"token punctuation\">,</span>szTempStr<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>REG_OPTION_NON_VOLATILE<span class=\"token punctuation\">,</span>KEY_ALL_ACCESS<span class=\"token punctuation\">,</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>hKey<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span>LPDWORD<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>dwData<span class=\"token punctuation\">)</span><span class=\"token operator\">!=</span>ERROR_SUCCESS<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>        <span class=\"token keyword\">return</span> FALSE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>    <span class=\"token comment\">// 注册表驱动程序的 DefaultInstance 值 </span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>    <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>szTempStr<span class=\"token punctuation\">,</span>lpszDriverName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>    <span class=\"token function\">strcat</span><span class=\"token punctuation\">(</span>szTempStr<span class=\"token punctuation\">,</span><span class=\"token string\">\" Instance\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">RegSetValueEx</span><span class=\"token punctuation\">(</span>hKey<span class=\"token punctuation\">,</span><span class=\"token string\">\"DefaultInstance\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>REG_SZ<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span>CONST BYTE<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>szTempStr<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span><span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>szTempStr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!=</span>ERROR_SUCCESS<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>        <span class=\"token keyword\">return</span> FALSE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>    <span class=\"token function\">RegFlushKey</span><span class=\"token punctuation\">(</span>hKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 刷新注册表</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>    <span class=\"token function\">RegCloseKey</span><span class=\"token punctuation\">(</span>hKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre> </pre></td></tr><tr><td data-num=\"107\"></td><td><pre></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>    <span class=\"token comment\">//-------------------------------------------------------------------------------------------------------</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>    <span class=\"token comment\">// SYSTEM\\\\CurrentControlSet\\\\Services\\\\DriverName\\\\Instances\\\\DriverName Instance 子健下的键值项 </span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>    <span class=\"token comment\">//-------------------------------------------------------------------------------------------------------</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>    <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>szTempStr<span class=\"token punctuation\">,</span><span class=\"token string\">\"SYSTEM\\\\CurrentControlSet\\\\Services\\\\\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>    <span class=\"token function\">strcat</span><span class=\"token punctuation\">(</span>szTempStr<span class=\"token punctuation\">,</span>lpszDriverName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>    <span class=\"token function\">strcat</span><span class=\"token punctuation\">(</span>szTempStr<span class=\"token punctuation\">,</span><span class=\"token string\">\"\\\\Instances\\\\\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>    <span class=\"token function\">strcat</span><span class=\"token punctuation\">(</span>szTempStr<span class=\"token punctuation\">,</span>lpszDriverName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>    <span class=\"token function\">strcat</span><span class=\"token punctuation\">(</span>szTempStr<span class=\"token punctuation\">,</span><span class=\"token string\">\" Instance\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">RegCreateKeyEx</span><span class=\"token punctuation\">(</span>HKEY_LOCAL_MACHINE<span class=\"token punctuation\">,</span>szTempStr<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>REG_OPTION_NON_VOLATILE<span class=\"token punctuation\">,</span>KEY_ALL_ACCESS<span class=\"token punctuation\">,</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>hKey<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span>LPDWORD<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>dwData<span class=\"token punctuation\">)</span><span class=\"token operator\">!=</span>ERROR_SUCCESS<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>        <span class=\"token keyword\">return</span> FALSE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>    <span class=\"token comment\">// 注册表驱动程序的 Altitude 值</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>    <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>szTempStr<span class=\"token punctuation\">,</span>lpszAltitude<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">RegSetValueEx</span><span class=\"token punctuation\">(</span>hKey<span class=\"token punctuation\">,</span><span class=\"token string\">\"Altitude\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>REG_SZ<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span>CONST BYTE<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>szTempStr<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span><span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>szTempStr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!=</span>ERROR_SUCCESS<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>        <span class=\"token keyword\">return</span> FALSE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>    <span class=\"token comment\">// 注册表驱动程序的 Flags 值</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>    dwData<span class=\"token operator\">=</span><span class=\"token number\">0x0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">RegSetValueEx</span><span class=\"token punctuation\">(</span>hKey<span class=\"token punctuation\">,</span><span class=\"token string\">\"Flags\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>REG_DWORD<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span>CONST BYTE<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>dwData<span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!=</span>ERROR_SUCCESS<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>        <span class=\"token keyword\">return</span> FALSE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>    <span class=\"token function\">RegFlushKey</span><span class=\"token punctuation\">(</span>hKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 刷新注册表</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>    <span class=\"token function\">RegCloseKey</span><span class=\"token punctuation\">(</span>hKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>    <span class=\"token keyword\">return</span> TRUE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>BOOL <span class=\"token function\">StartDriver</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> lpszDriverName<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>    SC_HANDLE        schManager<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>    SC_HANDLE        schService<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token operator\">==</span>lpszDriverName<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>        <span class=\"token keyword\">return</span> FALSE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>    schManager<span class=\"token operator\">=</span><span class=\"token function\">OpenSCManager</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span>SC_MANAGER_ALL_ACCESS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token operator\">==</span>schManager<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"151\"></td><td><pre>        <span class=\"token function\">CloseServiceHandle</span><span class=\"token punctuation\">(</span>schManager<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre>        <span class=\"token keyword\">return</span> FALSE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"153\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"154\"></td><td><pre>    schService<span class=\"token operator\">=</span><span class=\"token function\">OpenService</span><span class=\"token punctuation\">(</span>schManager<span class=\"token punctuation\">,</span>lpszDriverName<span class=\"token punctuation\">,</span>SERVICE_ALL_ACCESS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"155\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token operator\">==</span>schService<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"156\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"157\"></td><td><pre>        <span class=\"token function\">CloseServiceHandle</span><span class=\"token punctuation\">(</span>schService<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"158\"></td><td><pre>        <span class=\"token function\">CloseServiceHandle</span><span class=\"token punctuation\">(</span>schManager<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"159\"></td><td><pre>        <span class=\"token keyword\">return</span> FALSE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"160\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"161\"></td><td><pre></pre></td></tr><tr><td data-num=\"162\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">StartService</span><span class=\"token punctuation\">(</span>schService<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"163\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"164\"></td><td><pre>        <span class=\"token function\">CloseServiceHandle</span><span class=\"token punctuation\">(</span>schService<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"165\"></td><td><pre>        <span class=\"token function\">CloseServiceHandle</span><span class=\"token punctuation\">(</span>schManager<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"166\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> <span class=\"token function\">GetLastError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> ERROR_SERVICE_ALREADY_RUNNING <span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"167\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span>   </pre></td></tr><tr><td data-num=\"168\"></td><td><pre>            <span class=\"token comment\">// 服务已经开启</span></pre></td></tr><tr><td data-num=\"169\"></td><td><pre>            <span class=\"token keyword\">return</span> TRUE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"170\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"171\"></td><td><pre>        <span class=\"token keyword\">return</span> FALSE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"172\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"173\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"174\"></td><td><pre>    <span class=\"token function\">CloseServiceHandle</span><span class=\"token punctuation\">(</span>schService<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"175\"></td><td><pre>    <span class=\"token function\">CloseServiceHandle</span><span class=\"token punctuation\">(</span>schManager<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"176\"></td><td><pre></pre></td></tr><tr><td data-num=\"177\"></td><td><pre>    <span class=\"token keyword\">return</span> TRUE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"178\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"179\"></td><td><pre></pre></td></tr><tr><td data-num=\"180\"></td><td><pre>BOOL <span class=\"token function\">StopDriver</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> lpszDriverName<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"181\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"182\"></td><td><pre>    SC_HANDLE        schManager<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"183\"></td><td><pre>    SC_HANDLE        schService<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"184\"></td><td><pre>    SERVICE_STATUS    svcStatus<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"185\"></td><td><pre>    <span class=\"token keyword\">bool</span>            bStopped<span class=\"token operator\">=</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"186\"></td><td><pre></pre></td></tr><tr><td data-num=\"187\"></td><td><pre>    schManager<span class=\"token operator\">=</span><span class=\"token function\">OpenSCManager</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span>SC_MANAGER_ALL_ACCESS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"188\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token operator\">==</span>schManager<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"189\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"190\"></td><td><pre>        <span class=\"token keyword\">return</span> FALSE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"191\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"192\"></td><td><pre>    schService<span class=\"token operator\">=</span><span class=\"token function\">OpenService</span><span class=\"token punctuation\">(</span>schManager<span class=\"token punctuation\">,</span>lpszDriverName<span class=\"token punctuation\">,</span>SERVICE_ALL_ACCESS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"193\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token operator\">==</span>schService<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"194\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"195\"></td><td><pre>        <span class=\"token function\">CloseServiceHandle</span><span class=\"token punctuation\">(</span>schManager<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"196\"></td><td><pre>        <span class=\"token keyword\">return</span> FALSE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"197\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"198\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">ControlService</span><span class=\"token punctuation\">(</span>schService<span class=\"token punctuation\">,</span>SERVICE_CONTROL_STOP<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>svcStatus<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>svcStatus<span class=\"token punctuation\">.</span>dwCurrentState<span class=\"token operator\">!=</span>SERVICE_STOPPED<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"199\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"200\"></td><td><pre>        <span class=\"token function\">CloseServiceHandle</span><span class=\"token punctuation\">(</span>schService<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"201\"></td><td><pre>        <span class=\"token function\">CloseServiceHandle</span><span class=\"token punctuation\">(</span>schManager<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"202\"></td><td><pre>        <span class=\"token keyword\">return</span> FALSE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"203\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"204\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"205\"></td><td><pre>    <span class=\"token function\">CloseServiceHandle</span><span class=\"token punctuation\">(</span>schService<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"206\"></td><td><pre>    <span class=\"token function\">CloseServiceHandle</span><span class=\"token punctuation\">(</span>schManager<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"207\"></td><td><pre></pre></td></tr><tr><td data-num=\"208\"></td><td><pre>    <span class=\"token keyword\">return</span> TRUE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"209\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"210\"></td><td><pre></pre></td></tr><tr><td data-num=\"211\"></td><td><pre>BOOL <span class=\"token function\">DeleteDriver</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> lpszDriverName<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"212\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"213\"></td><td><pre>    SC_HANDLE        schManager<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"214\"></td><td><pre>    SC_HANDLE        schService<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"215\"></td><td><pre>    SERVICE_STATUS    svcStatus<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"216\"></td><td><pre></pre></td></tr><tr><td data-num=\"217\"></td><td><pre>    schManager<span class=\"token operator\">=</span><span class=\"token function\">OpenSCManager</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span>SC_MANAGER_ALL_ACCESS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"218\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token operator\">==</span>schManager<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"219\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"220\"></td><td><pre>        <span class=\"token keyword\">return</span> FALSE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"221\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"222\"></td><td><pre>    schService<span class=\"token operator\">=</span><span class=\"token function\">OpenService</span><span class=\"token punctuation\">(</span>schManager<span class=\"token punctuation\">,</span>lpszDriverName<span class=\"token punctuation\">,</span>SERVICE_ALL_ACCESS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"223\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token operator\">==</span>schService<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"224\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"225\"></td><td><pre>        <span class=\"token function\">CloseServiceHandle</span><span class=\"token punctuation\">(</span>schManager<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"226\"></td><td><pre>        <span class=\"token keyword\">return</span> FALSE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"227\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"228\"></td><td><pre>    <span class=\"token function\">ControlService</span><span class=\"token punctuation\">(</span>schService<span class=\"token punctuation\">,</span>SERVICE_CONTROL_STOP<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>svcStatus<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"229\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">DeleteService</span><span class=\"token punctuation\">(</span>schService<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"230\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"231\"></td><td><pre>        <span class=\"token function\">CloseServiceHandle</span><span class=\"token punctuation\">(</span>schService<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"232\"></td><td><pre>        <span class=\"token function\">CloseServiceHandle</span><span class=\"token punctuation\">(</span>schManager<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"233\"></td><td><pre>        <span class=\"token keyword\">return</span> FALSE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"234\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"235\"></td><td><pre>    <span class=\"token function\">CloseServiceHandle</span><span class=\"token punctuation\">(</span>schService<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"236\"></td><td><pre>    <span class=\"token function\">CloseServiceHandle</span><span class=\"token punctuation\">(</span>schManager<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"237\"></td><td><pre></pre></td></tr><tr><td data-num=\"238\"></td><td><pre>    <span class=\"token keyword\">return</span> TRUE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"239\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"240\"></td><td><pre></pre></td></tr><tr><td data-num=\"241\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"242\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"243\"></td><td><pre> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Print any key to install driver\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"244\"></td><td><pre> <span class=\"token function\">getch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"245\"></td><td><pre> <span class=\"token function\">DeleteDriver</span><span class=\"token punctuation\">(</span>DRIVER_NAME<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"246\"></td><td><pre> <span class=\"token comment\">// 安装驱动调用这个函数</span></pre></td></tr><tr><td data-num=\"247\"></td><td><pre> BOOL bRet <span class=\"token operator\">=</span> <span class=\"token function\">InstallDriver</span><span class=\"token punctuation\">(</span>DRIVER_NAME<span class=\"token punctuation\">,</span> DRIVER_PATH<span class=\"token punctuation\">,</span> DRIVER_ALTITUDE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"248\"></td><td><pre> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bRet <span class=\"token operator\">==</span> FALSE<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"249\"></td><td><pre> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"250\"></td><td><pre>  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Driver install failed\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"251\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"252\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"253\"></td><td><pre> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Print any key to start driver\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"254\"></td><td><pre> <span class=\"token function\">getch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"255\"></td><td><pre> <span class=\"token comment\">// 启动驱动调用这个函数</span></pre></td></tr><tr><td data-num=\"256\"></td><td><pre> bRet <span class=\"token operator\">=</span> <span class=\"token function\">StartDriver</span><span class=\"token punctuation\">(</span>DRIVER_NAME<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"257\"></td><td><pre> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bRet <span class=\"token operator\">==</span> FALSE<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"258\"></td><td><pre> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"259\"></td><td><pre>  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"StartDriver failed\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"260\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"261\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"262\"></td><td><pre> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Print any key to stop driver\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"263\"></td><td><pre> <span class=\"token function\">getch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"264\"></td><td><pre> <span class=\"token comment\">// 停止驱动调用这个</span></pre></td></tr><tr><td data-num=\"265\"></td><td><pre> <span class=\"token function\">StopDriver</span><span class=\"token punctuation\">(</span>DRIVER_NAME<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"266\"></td><td><pre> <span class=\"token comment\">// 删除服务调用这个</span></pre></td></tr><tr><td data-num=\"267\"></td><td><pre> <span class=\"token function\">DeleteDriver</span><span class=\"token punctuation\">(</span>DRIVER_NAME<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"268\"></td><td><pre></pre></td></tr><tr><td data-num=\"269\"></td><td><pre> </pre></td></tr><tr><td data-num=\"270\"></td><td><pre> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"271\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"image003.png\" alt=\"\" /></p>\n<h4 id=\"路径获取\"><a class=\"anchor\" href=\"#路径获取\">#</a> 路径获取</h4>\n<ul>\n<li>Minifilter 获取文件路径就是如此简单</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/// 在 postcreate 里获得</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>PFLT_FILE_NAME_INFORMATON pNameInfo <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">///Q: 没有内存的指针，为什么可以直接传给 FltGetFileNameInformation 使用呢？</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">/// A:FltGetFileNameInformation 是带缓存的，如果第一次查询文件的路径，函数会在内部为其分配内存，把文件名放到结构体的内存里面，其他驱动再次查询这个文件路径的时候，如果路径在缓存中，就直接把缓存给它，不再分配新内存。这么多人使用缓存，难以管理，做不到谁分配谁谁释放，所以这里使用了引用计数。</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>ntStatus <span class=\"token operator\">=</span> <span class=\"token function\">FltGetFileNameInformation</span><span class=\"token punctuation\">(</span>Data<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> FLT_FILE_NAME_NORMALIZED <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> FLT_FILE_NAME_QuERY_DEFAULT<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> <span class=\"token operator\">&amp;</span>pNamelnfo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/// 传二级指针或者指针的引用才能分配到内存</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">/// 解析</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token function\">F1tParseFileNamelnformation</span><span class=\"token punctuation\">(</span>pNamelnfo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>pNamelnfo<span class=\"token operator\">-></span>Name <span class=\"token comment\">//\\\\device\\\\harddiskvolume3\\\\doc\\\\x.dat</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>pNamelnfo<span class=\"token operator\">-></span>Volume</pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token function\">FltReleaseFileNameInformation</span><span class=\"token punctuation\">(</span>Namelnfo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 并不是真正释放内存，而是将缓存的引用计数减 1，当减到 0 的时候才释放内存</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">// 重命名路径的获得:</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>PFILE_RENAME_INFORMATION</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>pFileRenamelnfomation <span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>PENLE_RENAME_INFORMATION<span class=\"token punctuation\">)</span>Data<span class=\"token operator\">-></span>IopParameters<span class=\"token punctuation\">.</span>SetFilelnformationInfoBuffer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">// 或者通过这样获得重命名的路径</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>FltGetDestinationFileInation<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"基于minifilter的passthrough\"><a class=\"anchor\" href=\"#基于minifilter的passthrough\">#</a> 基于 Minifilter 的 PASSTHROUGH</h2>\n<h2 id=\"应用监控进程创建\"><a class=\"anchor\" href=\"#应用监控进程创建\">#</a> 应用：监控进程创建</h2>\n<p>思路：</p>\n<ul>\n<li>\n<p>NtCreateSection (进程创建)</p>\n<ul>\n<li>对应的 Irp 是  <code>IRP_MJ ACQUIRE FOR_SECTION_SYNCHRONIZATION</code> ，在  <code>Passthrough</code>  中为这个 Irp 注册回调函数</li>\n<li>监控  <code>Data-&gt;lopb-&gt;Parameters.AcquireForSectionSynchronization.PageProtection ==PAGE_EXECUTE</code> ，如果等于就是在创建进程， <code>return STATS_ACCESS_DENY</code></li>\n</ul>\n</li>\n<li>\n<p>优点：SSDT HOOK 只支持 x86（SSDT HOOK 改内核，会触发  <code>patchguard</code>  机制，除非使用 VT 技术欺骗操作系统），Minifilter 不会触发  <code>patchguard</code>  机制，所以  <code>x86和x64 都支持</code> 。</p>\n</li>\n</ul>\n<h2 id=\"callback-irql\"><a class=\"anchor\" href=\"#callback-irql\">#</a> CallBack IRQL</h2>\n<ul>\n<li>1.a  <code>preoperation</code>  callback routine can be called at  <code>IRQL_PASSIVE_LEVEL</code>  or at  <code>IRQL_APC_LEVELS</code>  Typically it is called at  <code>IRQL_PASSIVE_LEVEL</code></li>\n<li>2.lf a minifilter driver's  <code>preoperation</code>  callback routine returns  <code>FLT_PREOP_SYNCHRONIZE</code>  for an lRP-based l/O operation,the corresponding  <code>postoperation</code>  callback routine is called at l  <code>RQL &lt;= APC_LEVEL</code> , in the same thread context as the  <code>preoperation</code> callback routine.</li>\n<li>3.The  <code>postoperation</code>  callback routine for a  <code>fast I/O</code>  operation is called  <code>IRQL_PASSIVE_LEVEL</code> , in the same thread context as the preoperation callback routine.</li>\n<li>4. <code>Post-create</code>  callback routines are called at  <code>IRQL_PASSIVE_LEVEL</code> in the context of the thread that originated the  <code>IRP_MJ_CREATE</code>  operation.</li>\n<li>总而言之， <code>preoperation</code>  一定处于  <code>IRQL_APC_LEVELS</code>  或者  <code>IRQL_PASSIVE_LEVEL</code>  ；而  <code>postoperation</code>  根据具体情况具体分析：2-4 中情况下，处于  <code>IRQL_PASSIVE_LEVEL</code> ，其他情况就不好说了。</li>\n</ul>\n<h2 id=\"避免重入\"><a class=\"anchor\" href=\"#避免重入\">#</a> 避免重入</h2>\n<ul>\n<li>Minifilter 中不建议使用  <code>Zw*</code>  函数，而是使用  <code>Flt*</code>  函数，避免  <code>重入</code>  (死循环)</li>\n<li>eg：不能使用 zwCreateFile 等函数，可能导致重入。</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>FltCreateFile</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>FltReadFile</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>FltWriteFile</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>FltClose</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>FltQueryXxxFltSetXxXFltGetXxx</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>FltPerformXxx</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>ntStatus <span class=\"token operator\">=</span> <span class=\"token function\">FltCreateFile</span><span class=\"token punctuation\">(</span>pFilter<span class=\"token punctuation\">,</span> <span class=\"token comment\">/// 这个参数是注册 Minifilter 返回的句柄</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> pDstInstance<span class=\"token punctuation\">,</span> <span class=\"token comment\">/// 这个参数是实例的指针，从 FltObjects 中拿，这两个参数是 FltCreateFile 特有的，其他参数和 FltReadFile、FltWriteFile 等都一致</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> <span class=\"token operator\">&amp;</span>hDstFile<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> GENERIC_WRITE <span class=\"token operator\">|</span> SYNCHRONIZE<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre> <span class=\"token operator\">&amp;</span>objDstAttrib<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> <span class=\"token operator\">&amp;</span>ioStatus<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre> FILE_ATTRIBUTE_NORMAL<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre> FILE_SHARE_READ <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre> FILE_SHARE_WRITE <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre> FILE_SHARE DELETE<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre> FILECREATE<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre> CreateOptions<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"上下文\"><a class=\"anchor\" href=\"#上下文\">#</a> 上下文</h2>\n<ul>\n<li>\n<p><code>设备扩展是什么?</code></p>\n<ul>\n<li>进程的创建和监视，曾经把进程的一些信息放入设备扩展里面</li>\n<li>在 Sfilter 创建过滤设备对象的时候，设备对象存放着下层设备对象的指针 (过滤设备所在的栈，未绑定之前的栈顶上的设备对象指针)</li>\n<li>可以理解为设备扩展的 ' 上下文 '。</li>\n</ul>\n</li>\n<li>\n<p><code>context上下文</code> ：其实就是附着在某个对象上的一段内存，这段内存缓存的相关数据由自己定义；</p>\n<ul>\n<li>eg: 1. 对象：人 2. 上下文：口袋 3. 数据：手机 如果人没有口袋，在路上想付款的时候，发现没有身上手机，只能回家去取 (相当于计算机重新获取数据的过程) 如果有口袋，出门之前把手机放口袋里 (一次性把数据查询出来，缓存到上下文里面), 在路上想付款的时候，直接从口袋里里掏出手机 (想要拿数据的时候，直接从上下文中拿数据，上下文可以提高计算机获取数据的效率)</li>\n<li><code>利用缓存提高程序执行的效率</code> 是非常重要的思想，包括在系统架构里面，经常使用 Redis (NOSQL 数据库) 把平时查询的数据库缓存起来，来缓解关系数据库后台执行程序的压力.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"minifilter-上下文\"><a class=\"anchor\" href=\"#minifilter-上下文\">#</a> Minifilter 上下文</h3>\n<ul>\n<li>\n<p><code>和中断、进程上下文区别</code> :</p>\n<ul>\n<li>中断上下文：中断传过来的数据，中断前  <code>进程的上下文</code></li>\n<li>进程上下文：寄存器，栈，堆，描述进程的结构体，</li>\n</ul>\n</li>\n<li>\n<p><code>Minifilter的上下文</code> ：其实就是附着在  <code>Minifilter</code>  中对象上的一段内存，这段内存缓存的相关数据由自己定义 (其实是 Mifnifilter 运行期间的所在环境中的信息)</p>\n<ul>\n<li><code>Minifilter</code>  中常见的对象 FileObject,Instance 等，可以给这些对象分配一块内存，存放自定义的数据</li>\n<li><code>分配上下文</code></li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>FltAllocateContext <span class=\"token comment\">// 分配上下文，可以指定上下文的类型，比如 Stream Context,Stream Handle Context,Instance Contxt 等等</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>FltReleaseContext <span class=\"token comment\">// 释放上下文，其实就是把引用计数减 1, 直到引用计数变为 0 之后才释放</span></pre></td></tr></table></figure><ul>\n<li>\n<p><code>Minifilter上下文的应用</code> ：写关闭</p>\n<ul>\n<li><code>写关闭</code> ：以写的方式打开，得到文件的句柄，往这个文件写入数据，最后把文件关闭掉</li>\n<li>(调用 CteateFile ()-&gt;ReadFile ()-&gt;CloseFile ())</li>\n<li>主防或者反病毒一般不关注读关闭 (读关闭不会造成系统破坏，最多会造成隐私泄漏)</li>\n<li>读 / 写关闭在应用层都是调用  <code>CloseHandle(FileHandle)</code> , 所以单从 FileHanle 这个参数是无法知道是读关闭还是写关闭 (在 XP 系统，IRP_MJ_Clean 这个 IRP 里面  <code>information等于2</code> , 就表示是写关闭，否则就是都关闭；但在 vista 中这个条件就不成立了)</li>\n<li>所以在 Sfilter 里面是根据文件最后修改时间，如果是  <code>1min之内</code> ，则认为是写关闭。</li>\n<li><code>Minifilter则可以使用上下文来记录标记</code> ，比如打开文件文件的时候是可以知道  <code>R/W的</code>  (必须传一个读写的标志)，然后把这个标记信息记录在文件 (FileObject) 的  <code>上下文</code> 里面，Clean 的时候 (调用 CloseHandle (FileHandle) 的时候)，通过 FilerHander 找到对应的 FileObject 的上下文找到打开时记录的  <code>R/W</code>  的标志，如果是写的话，即写关闭就处理它 (扫描一遍该文件，和病毒库的特征码匹配一遍，防止生成病毒)。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"minifilter-上下文的分类\"><a class=\"anchor\" href=\"#minifilter-上下文的分类\">#</a> Minifilter 上下文的分类</h3>\n<ul>\n<li>\n<p>分类依据是什么？</p>\n<ul>\n<li>Minifilter 有很多种对象， <code>根据对象不同</code> 分为不同的类。</li>\n<li>一个文件从磁盘打开加载到内存之后，会产生以下这些</li>\n</ul>\n</li>\n<li>\n<p><code>Stream Context</code>  (流上下文), 绑定到 FCB (File control Block，文件控制块) 的上下文， 文件和 FCB 是一对一的关系。</p>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>FltGetStreamContext <span class=\"token comment\">// 获取对象上的上下文</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>FltSetStreamContext <span class=\"token comment\">// 将缓存重新设置到对象上，比如修改了上下文的数据，使用这个函数把上下文更新到对象上</span></pre></td></tr></table></figure><ul>\n<li><code>Stream Handle Context</code>  (流句柄上下文), 就是常见 FO (FileObjec), 文件和 FileObjec 是多对一的关系。\n<ul>\n<li>写关闭</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>FltGetStreamHandleContext</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>FltSetStreamHandleContext</pre></td></tr></table></figure><ul>\n<li><code>Instance Context</code>  (实例上下文), 也就是过滤驱动在文件系统的设备堆栈上创建的一个过滤器实例；</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>FltGetlnstanceContext <span class=\"token comment\">// 获取对象上的上下文</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>FltSetInstanceC ontext <span class=\"token comment\">// 将缓存重新设置到对象上，比如修改了上下文的数据，使用这个函数把上下文更新到对象上</span></pre></td></tr></table></figure><ul>\n<li><code>volume context</code>  (卷上下文), 卷就是通常看到的 C,D 盘以及网络重定向器，一般情况下一个券对一个对滤器实例对象， <code>在实际应用上经常用Instance Context来代替volume Context。</code> (在启动 Minifilter 的时候有多少卷设备对象就生成多少个 Minigilter 实例，安装到卷设备上，安装的那一刻可以把卷设备的信息查询出来 (卷的名字，卷的文件系统信息，文件系统类型，卷的扇区大小等)) 放到 Instance  Context，以后要想知道卷的信息，直接从 Instance  Context 获取即可。</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>FltGetVolumeContext</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>FltSetvolumeContext</pre></td></tr></table></figure><ul>\n<li><code>文件上下文</code>  (vista 之后)</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>FltGetFileContext</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>FltSetFileContext</pre></td></tr></table></figure><ul>\n<li>其中，  <code>Stream Handle Context</code>  和  <code>Instance Context</code>  使用频率最高</li>\n<li>注册 Minifilter 的时候除了一组用来拦截 Irp 的  <code>fileMonitorCallbacks</code>  数组，还有  <code>一组用来清理Context的回调函数数组</code></li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>PFLT_FILTER g_pFilter <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> FLT_CONTEXT_REGISTRATION ContextRegistration<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token comment\">/// 在释放 context 之前调用，可以在此释放 context 里的内存等</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  FLT_INSTANCE_CONTEXT<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  CtxContextCleanup<span class=\"token punctuation\">,</span> <span class=\"token comment\">/// 每种类型的 Context 都共用同一个 CtxContextCleanup</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> <span class=\"token comment\">///Q：既然有 FltReleaseContext 来释放 Context 了，为什么这里还需要 CtxContextCleanup？</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> <span class=\"token comment\">///A：是为了针对 Minifilter 的 Context 中保存了一些其他资源或者指向其他内存的情况，可以用 CtxContextCleanup 释放掉，比如 Minifilter 的 Context 中存放了文件的句柄、锁、指针，得先用 CtxContextCleanup 释放掉，才可以用 FltReleaseContext 来释放 Context（类似 C++ 中的 delete，释放内存之前调用析构函数把内存中的其他资源释放掉，再释放要内存）</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  CTX_INSTANCE_CONTEXT_SIZE<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  CTX_INSTANCE_CONTEXT_TAG</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  FLT_FILE_CONTEXT<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  CtxContextCleanup<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  CTX_FILE_CONTEXT_SIZE<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  CTX_FILE_CONTEXT_TAG</pre></td></tr><tr><td data-num=\"19\"></td><td><pre> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  FLT_STREAM_CONTEXT<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  CtxContextCleanup<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  CTX_STREAM_CONTEXT_SIZE<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  CTX_STREAM_CONTEXT_TAG</pre></td></tr><tr><td data-num=\"26\"></td><td><pre> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  FLT_STREAMHANDLE_CONTEXT<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  CtxContextCleanup<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  CTX_STREAMHANDLE_CONTEXT_SIZE<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  CTX_STREAMHANDLEICONTEXT_TAG</pre></td></tr><tr><td data-num=\"33\"></td><td><pre> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>  FLT_CONTEXT_END</pre></td></tr><tr><td data-num=\"36\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"context-使用例子\"><a class=\"anchor\" href=\"#context-使用例子\">#</a> Context 使用例子</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/// @Warring 多线环境下记得加锁</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_INSTANCE_CONTEXT</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token comment\">/// 自定义的数据</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span>INSTANCE_CONTEXT，<span class=\"token operator\">*</span>PINSTANCECCONTEXT<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>PINSTANCE_CONTEXT pContext <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">/// 分配与设置 </span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>ntStatus <span class=\"token operator\">=</span> <span class=\"token function\">FltGetInstanceContext</span><span class=\"token punctuation\">(</span>FltObjects<span class=\"token operator\">-></span>Instance<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>pContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/// 拿到上下文</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">NT_SUCCESS</span><span class=\"token punctuation\">(</span>ntStatus<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> FALSE<span class=\"token punctuation\">)</span> <span class=\"token comment\">/// 失败说明还没有为其指定上下文</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre> <span class=\"token comment\">/// 分配上下文，指定上下文的类型</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre> ntStatus <span class=\"token operator\">=</span> <span class=\"token function\">FltAllocateContexti</span><span class=\"token punctuation\">(</span>g_pFilter<span class=\"token punctuation\">,</span> <span class=\"token comment\">///Minifilter 的句柄</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  FLT_INSTANCE_CONTEXT<span class=\"token punctuation\">,</span> <span class=\"token comment\">///Context 类型</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>INSTANCE_CONTEXT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">///Context 大小</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  PagedPool<span class=\"token punctuation\">,</span> <span class=\"token comment\">/// 从 PagedPool 中分配</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token operator\">&amp;</span>pContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">/// 分配的内存的首地址放在这个指针上</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">NT_SUCCESS</span><span class=\"token punctuation\">(</span>Status<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> FALSE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token keyword\">return</span> ntStatus<span class=\"token punctuation\">;</span> <span class=\"token comment\">/// 如果分配失败，该函数直接 return 了</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre> <span class=\"token function\">RtZeroMemory</span><span class=\"token punctuation\">(</span>pContext<span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>INSTANCE_CONTEXT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/// 初始化为 0</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\">/// 结构体里面定义了设备类型和结构体类型</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>pContext<span class=\"token operator\">-></span>m_DeviceType <span class=\"token operator\">=</span> VolumeDeviceType<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>pContext<span class=\"token operator\">-></span>m_FSType <span class=\"token operator\">=</span> volumeFilesystemType<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token function\">FltSetInstanceContext</span><span class=\"token punctuation\">(</span>FltQbjects<span class=\"token operator\">-></span>Instance<span class=\"token punctuation\">,</span>FLT_SET_CONTEXT_TREPLACE_IF_EXISTS<span class=\"token punctuation\">,</span>pContext<span class=\"token punctuation\">,</span>NLLL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/// 把刚分配的上下文绑定到 instance 上去，引用计数 + 1</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pContext<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 如果分配成功，需要对引用计数进行减 1，因为实际上没有新的 Context 产生，为保持引用计数的数量，一加就需要一减</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre> <span class=\"token function\">FltReleaseContext</span><span class=\"token punctuation\">(</span>pContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/// 引用计数 - 1</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token comment\">/// 获取访问</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>PINSTANCE_CONTEXT pContext <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>Status <span class=\"token operator\">=</span> FltGetInstanceContext<span class=\"token punctuation\">&#123;</span>EItObjects<span class=\"token operator\">-></span>Instance<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>pContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/// 引用计数 + 1</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>pContext<span class=\"token operator\">-></span>xxx<span class=\"token operator\">-></span>xxx<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>FltReleaseConte <span class=\"token comment\">// -1</span></pre></td></tr></table></figure><h3 id=\"上下文的应用详解\"><a class=\"anchor\" href=\"#上下文的应用详解\">#</a> 上下文的应用详解</h3>\n<p>在初次接触上下文的时候，不知道在实际场景中需要使用哪种上下文，参阅了其他人的代码后，发现开源的代码中大部分应用场景都使用的流上下文类型。</p>\n<p>甚至也不知道是否需要使用上下文，以及使用上下文能够给自己的程序带来哪些好处。</p>\n<p>不管最终想要通过上下文实现的功能如何，比如不管你是否想要通过判断上下文知道文件是否是特定类型的还是加密的，<strong>在用到上下文的时候多是要解决不想反复判断，想为某个或某类特定文件的文件信息获取一次之后在特定应用场景下就不需要再次获取，从而提升驱动程序效率的办法</strong>。</p>\n<p>鉴于此，上下文主要解决了在程序生命周期中<strong>部分关键信息不想多次获取</strong>或<strong>需要在多个操作中传递信息</strong>的问题。</p>\n<p>前者可以通过多次获取关键信息而不用上下文就可以解决问题，后者有时候不得不使用上下文来传递信息，前者使用上下文的情况，主要应对关键信息获取比较繁琐，使用上下文来减少在不同操作中相同逻辑处理的次数。</p>\n<p>了解了上下文的一些基础场景后，接下来就是看选用哪种类型的上下文了，<strong>最终目标就是创建了上下文能不能在下次操作文件的时候操作上下文，获取上下文的信息，上下文的信息何时销毁</strong>。</p>\n<p>具体实验参见：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ZpbmRfdGhlX2ZlcnJ5L2FydGljbGUvZGV0YWlscy8xMjEzNjA4MTI=\">https://blog.csdn.net/find_the_ferry/article/details/121360812</span></p>\n<p>作者已经写得很清楚了。我这里就直接写结论了。</p>\n<p><code>FLT_STREAM_CONTEXT</code>   <code>FLT_FILE_CONTEXT</code>  都可以跟随驱动或者文件的生命周期内存在，  <code>StreamHanleContext</code>  只有在文件的打开过程中有效，msdn 上有信息表明 FLT_FILE_CONTEXT 在 vista 之后支持。如果要记录文件的一些特殊信息可以在 <code>FLT_STREAM_CONTEXT</code>  上进行，当然也需要在关注的文件信息发生变动时更新上下文信息。</p>\n<h2 id=\"r0-r3通信新途径\"><a class=\"anchor\" href=\"#r0-r3通信新途径\">#</a> R0-R3 通信新途径</h2>\n<ul>\n<li>\n<p>Minifilter 框架提供了  <code>两套API</code> ，一套是在 R3 中调用的，另一套是在 R0 中调用的</p>\n<ul>\n<li>R3：Filterxxx</li>\n<li>R0：Fltxxx</li>\n</ul>\n</li>\n<li>\n<p>这些 API 不只局限于在 Minifilter 中使用，只要当前建立的工程是基于 Minifilter 框架的驱动，如果在 Minifilter 使用了 HOOK 等其他机制，都可以用这套 API 进行通信。</p>\n</li>\n</ul>\n<h3 id=\"r3主动-r0\"><a class=\"anchor\" href=\"#r3主动-r0\">#</a> R3 (主动)-&gt;R0</h3>\n<ul>\n<li>\n<p>在 NT 驱动中：R3 通过  <code>DeviceIoControl</code>  发数据给 R0,R0 通过  <code>DispatchIoctr</code>  来处理 R3 的下发的数据</p>\n</li>\n<li>\n<p>在 Minifilter 中：R3 是通过  <code>FilterSendMessage</code>  发数据给 R0，R0 通过  <code>fnMessageFromClient</code>  处理从 R3 FilterSendMessage 的请求</p>\n<ul>\n<li>没有控制码了怎么办，自己加个控制码，实际上是简化了控制码，想怎么定义就怎么定义，反而更方便了</li>\n</ul>\n</li>\n<li>\n<p><code>R3主动给R0发数据的情景</code> ：</p>\n<ul>\n<li>下规则</li>\n<li>R3 告诉 R0 监控什么位置</li>\n<li>杀一个进程，删一个文件，枚举隐藏的进程，枚举 hook 的函数</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/// R0 创建端口，</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">/// @note 可以指定安全属性，比如可以指定为只允许管理员连接</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> PWSTR ScannerPortName <span class=\"token operator\">=</span> L<span class=\"token string\">\"\\\\ScannerPort\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">//    status = FltBuildDefaultSecurityDescriptor (&amp;sd, FLT_PORT_ALL_ACCESS); /// 创建安全描述符，指定为只允许管理员连接</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">FltCreateCommunicationPort</span><span class=\"token punctuation\">(</span>g_pEilter<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token operator\">&amp;</span>g_pSeryerPort<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> <span class=\"token operator\">&amp;</span>oa<span class=\"token punctuation\">,</span> <span class=\"token comment\">/// 设置 PORT 的名字</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> <span class=\"token comment\">/// 获得 R3 端口 g_pClientPort 等</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> fnConnectFromCRlient<span class=\"token punctuation\">,</span> <span class=\"token comment\">/// 有客户端连接 R0 端口的时候被调用</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> <span class=\"token comment\">// 作用 1：这个函数执行的时候处在应用层当前进程的上下文中，可以记录下进程的信息，比如 pid 和 Exprocess 结构，以后发现由这个客户端发下来的请求，就可以把他放行了</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre> <span class=\"token comment\">// 作用 2：拿到 R3 的端口</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> fnDisconnectFromclient<span class=\"token punctuation\">,</span> <span class=\"token comment\">/// 当客户端断开连接的时候被调用</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre> fnMessageFromClient<span class=\"token punctuation\">,</span> <span class=\"token comment\">/// 处理从 R3 FilterSendMessage 的请求，名字和随便起，只要保证接口一致，注册时一一对应即可</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">/// R3 连接 R0，即 R3 拿到 R0 的端口</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>FilterConnectCommunicationPort </pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">/// R3 主动发请求给 RO</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token function\">FilterSendMessage</span><span class=\"token punctuation\">(</span>Port<span class=\"token punctuation\">,</span> <span class=\"token comment\">/// 拿到的 R0 端口</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      <span class=\"token operator\">&amp;</span>request<span class=\"token punctuation\">,</span> <span class=\"token comment\">///R3 给 R0 发数据的缓存，自定义控制码放在这里</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>REQUEST<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 缓存的大小</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      <span class=\"token operator\">&amp;</span>reply<span class=\"token punctuation\">,</span> <span class=\"token comment\">///R0 处理完数据返回给 R3 的结果</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>REPLY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>      <span class=\"token operator\">&amp;</span>dwRtn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/// 实际上传输的字节数，对应 IRP 中的 IOSTATUS.Information</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token comment\">/// R0 处理从 R3 FilterSendMessage 的请求</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>NTSTATUS <span class=\"token function\">fnMessageFromClient</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre> IN PVOID PortCookie<span class=\"token punctuation\">,</span> <span class=\"token comment\">///Port 相关的私有数据</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre> IN PVOID InputBuffer OPTIONAL<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre> IN ULONG InputBufferLength<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre> OUT PVOLD OutputBuffer OPTIONAL<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre> IN PULONG OutputBufferLength<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre> OUT PULONG ReturnOutputEufferLength <span class=\"token comment\">/// 实际传输的长度</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre> <span class=\"token comment\">/// 这里通信方式使用的是 neither io 需要 ProbeForRead 和 ProbeForWite</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre> <span class=\"token comment\">/// 1. 保证内存对齐，2. 保证地址合法 (保证时用户态的地址，应用层程序没有权限访问内核态的地址)，避免提权</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre> __try</pre></td></tr><tr><td data-num=\"41\"></td><td><pre> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>  <span class=\"token function\">ProbeForRead</span><span class=\"token punctuation\">(</span>InputBuffer<span class=\"token punctuation\">,</span>InputBufferLength<span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>ULONG<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>  <span class=\"token comment\">//GET InputBuffer</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>  <span class=\"token comment\">//Do something:</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>  <span class=\"token function\">ProbeForWite</span><span class=\"token punctuation\">(</span>OutputBuffer<span class=\"token punctuation\">,</span>OutputBufferLength<span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>ULONG<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>  <span class=\"token comment\">//Copy Result to Outputbuffer</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre> <span class=\"token function\">__except</span><span class=\"token punctuation\">(</span>EXCEPTION_EXECUTE_HANDLER<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>  <span class=\"token keyword\">return</span> STATUS_NOT_IMPLEMENTED<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre> </pre></td></tr><tr><td data-num=\"53\"></td><td><pre> <span class=\"token keyword\">return</span> STATUS_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"r0主动-r3-r0弹窗模型\"><a class=\"anchor\" href=\"#r0主动-r3-r0弹窗模型\">#</a> R0 (主动)-&gt;R3-R0 (弹窗模型)</h3>\n<ul>\n<li>R0 监控到数据，R0 通过  <code>FltSendMessage</code>  发数据给 R3 (FltSendMessage 可以设置  <code>超时等待</code> ，比如内核层等待弹窗返回结果 40s 或者无限等待)，R3 开启多个线程 (每个线程都可用来接受 R0 发送的数据)，通过  <code>FilterGetMessage</code>  来处理从 R0 的请求 ( <code>异步读</code> ，不管拿没拿到数据都会返回), 拿到数据处理完之后通过  <code>FilterReplyMessage</code>  返回给 R0</li>\n<li>R0-&gt;R3</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/// 发送消息给 R3</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>timeout<span class=\"token punctuation\">.</span>QuadPart <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>LONGLONG<span class=\"token punctuation\">)</span><span class=\"token number\">40</span><span class=\"token operator\">*</span> <span class=\"token operator\">-</span><span class=\"token number\">10000000</span>i64<span class=\"token punctuation\">;</span> <span class=\"token comment\">///40 seconds，设为 0 不等待，设置为 null 无限等待</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Status <span class=\"token operator\">=</span> <span class=\"token function\">FltSendMessage</span><span class=\"token punctuation\">(</span>g_pFilter<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token operator\">&amp;</span>g_pClientPort<span class=\"token punctuation\">,</span> <span class=\"token comment\">/// 客户端的端口</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token operator\">&amp;</span>request<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>SCANNER_NOTIFICATION<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token operator\">&amp;</span>reply<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      replySize<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token operator\">&amp;</span>timeout<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">/// 关闭端口</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token function\">FItCloseCommunicationPort</span><span class=\"token punctuation\">(</span>g_pServerPort<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>R3-&gt;R0</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/// 响应 R0 的：FltSendMessage ()</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">/// 一般放在后台的工作者线程中去执行，而且可以创建多线程，在多个线程中去处理这个部分代码，提高处理的效率</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">FilterConnectCommunicationPort</span><span class=\"token punctuation\">(</span>ScannerPortName<span class=\"token punctuation\">,</span> <span class=\"token comment\">/// 与 R0 端口名字一致</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>          <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>          <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>          <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>          <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>          <span class=\"token operator\">&amp;</span>Port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">///RO 端口</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">/// 处理从 R0 来的请求，即 R0 调用 FltSendMessage 的请求</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>completion <span class=\"token operator\">=</span> <span class=\"token function\">CreateloCompletionPort</span><span class=\"token punctuation\">(</span>port<span class=\"token punctuation\">,</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/// 创建一个完成端口</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token function\">FilterGetMessage</span><span class=\"token punctuation\">(</span>Port<span class=\"token punctuation\">,</span> <span class=\"token comment\">/// 异步读，拿没拿到数据都不等待，直接返回</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>     <span class=\"token operator\">&amp;</span>message<span class=\"token operator\">-></span>MessagelHleader<span class=\"token punctuation\">,</span> <span class=\"token comment\">/// 数据放在这里</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>     <span class=\"token function\">FIELD_OFFSET</span><span class=\"token punctuation\">(</span>SANDBOX_MESSAGE<span class=\"token punctuation\">,</span>Ovlp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>     <span class=\"token operator\">&amp;</span>message<span class=\"token operator\">-></span>Ovlp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   <span class=\"token function\">GetQueuedCompletionStatus</span><span class=\"token punctuation\">(</span>completion<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>outSize<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>key<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>pOvlp<span class=\"token punctuation\">,</span>INFINITE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/// 在完成端口这里阻塞，一旦 R0 调用 FltSendMessage ()，completion 完成端口有了数据之后，这个函数就会返回</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token comment\">/// 处理数据</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre> </pre></td></tr><tr><td data-num=\"21\"></td><td><pre> <span class=\"token comment\">/// R3 处理结果返回给内核层</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre> <span class=\"token function\">FilterReplyMessage</span><span class=\"token punctuation\">(</span>Port<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">(</span>PEILTER_REPLY_HEADER<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token operator\">&amp;</span>replyMessage<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>replyMessage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre> <span class=\"token comment\">/// 异步读，继续下一个循环</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre> <span class=\"token function\">FilterGetMessaget</span><span class=\"token punctuation\">(</span>Port<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>       <span class=\"token operator\">&amp;</span>message<span class=\"token operator\">-></span>MessageHeader<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>       FIELD_OFFSET_SANDBOXMESSAGE<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>       Ovlp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>       <span class=\"token operator\">&amp;</span>message<span class=\"token operator\">-></span>Ovlp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"深入分析scanner\"><a class=\"anchor\" href=\"#深入分析scanner\">#</a> 深入分析 Scanner</h2>\n<h3 id=\"编译运行\"><a class=\"anchor\" href=\"#编译运行\">#</a> 编译运行</h3>\n<h3 id=\"代码分析\"><a class=\"anchor\" href=\"#代码分析\">#</a> 代码分析</h3>\n<h4 id=\"驱动层\"><a class=\"anchor\" href=\"#驱动层\">#</a> 驱动层</h4>\n<h4 id=\"应用层\"><a class=\"anchor\" href=\"#应用层\">#</a> 应用层</h4>\n<h2 id=\"基于minifilter的sandbox\"><a class=\"anchor\" href=\"#基于minifilter的sandbox\">#</a> 基于 Minifilter 的 SandBox</h2>\n<h3 id=\"重定向reparse\"><a class=\"anchor\" href=\"#重定向reparse\">#</a> 重定向 reparse</h3>\n<h3 id=\"createfile重定向\"><a class=\"anchor\" href=\"#createfile重定向\">#</a> CreateFile 重定向</h3>\n<h3 id=\"deletefile\"><a class=\"anchor\" href=\"#deletefile\">#</a> DeleteFile</h3>\n<h3 id=\"queryfile重定向\"><a class=\"anchor\" href=\"#queryfile重定向\">#</a> QueryFile 重定向</h3>\n<h3 id=\"如何判断自己被沙盒\"><a class=\"anchor\" href=\"#如何判断自己被沙盒\">#</a> 如何判断自己被沙盒</h3>\n<h1 id=\"注册表回调框架\"><a class=\"anchor\" href=\"#注册表回调框架\">#</a> 注册表回调框架</h1>\n",
            "tags": [
                "Minifilter",
                "Sfilter"
            ]
        },
        {
            "id": "https://or0kit.github.io/Bin/Core/Drive-Development/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%BE%AE%E8%BF%87%E6%BB%A4%E9%A9%B1%E5%8A%A8/",
            "url": "https://or0kit.github.io/Bin/Core/Drive-Development/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%BE%AE%E8%BF%87%E6%BB%A4%E9%A9%B1%E5%8A%A8/",
            "title": "文件系统微过滤驱动",
            "date_published": "2022-08-06T15:24:13.000Z",
            "content_html": "<h1 id=\"文件系统微过滤驱动\"><a class=\"anchor\" href=\"#文件系统微过滤驱动\">#</a> 文件系统微过滤驱动</h1>\n<p>微软的 Windows 内核开发者开发了一个新的驱动， 称为过滤管理器（Filter Manager 或 fltmgr）</p>\n<h1 id=\"minifilter的编程框架\"><a class=\"anchor\" href=\"#minifilter的编程框架\">#</a> Minifilter 的编程框架</h1>\n<p>开始学习一个有关 Minifilter 应用的例子， 这个例子的作用主要是开发  <code>Minifilter</code>  的功能来限制对应用程序 “记事本” 文件（notepad.xe） 的操作， 进而达到限制扩展名为  <code>txt</code>  等使用记事本程序来编辑的功能。</p>\n<p>这是一个有意思的例子，因为文件名为  <code>notepad.exe</code>  的文件被禁止打开， 所以这个文件无法被双击执行、 无法被复制、 无法被改名， 也无法被删除。这个例子在实际中可能没有什么用处。 这样不可能限制文本文档不被编辑， 因为记事本不能使用， 用户依然可以使用其他的文本编辑工具， 甚至可以在别的计算机上为  <code>notepad.exe</code>  改一个名字， 然后拷贝到本机上来使用。 但是它足以说明  <code>Minifilter</code>  的简单使用效果。</p>\n<h2 id=\"微文件系统过滤的注册\"><a class=\"anchor\" href=\"#微文件系统过滤的注册\">#</a> 微文件系统过滤的注册</h2>\n<p>编写  <code>Minifilter</code>  的第一件事是向过滤管理器宣告我们的微过滤器的存在。<br />\n这里所谓的微过滤器是符合过滤管理器标准的过滤组件， 它其实是一组回调函数， 这组回调函数向过滤管理器注册之后， 过滤管理器就会在合适的时机（比如， 要求的文件操作发生时） 以合适的方式调用某个回调函数。如果我们编写这个回调函数中的内容， 就可以对文件系统加以过滤了。</p>\n<p>这比花很多精力去绑定各种设备要简单得多， 因为复杂的任务都在过滤管理器里做了。</p>\n<p>下面直接通过程序代码来了解一下程序的架构。<br />\n一开始我们必须要宣告注册的函数，这个宣告要符合  <code>Minifilter</code>  开发文件内的定义， 我们可以从 WDK 或文件内找到这个函数的意思。</p>\n<p>接下来按照惯例， 我们介绍一下  <code>DriverEntry</code>  入口函数。 和  <code>sfilter</code>  形成鲜明的对比， 这个例子的  <code>DriverEntry</code>  显得非常简单。 关键的函数有两个： 一个是  <code>FltReigsterFilter</code>  ， 用来注册一个微过滤器； 另一个是  <code>FltStartFiltering</code>  ， 用来开启过滤。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>NTSTATUS</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">DriverEntry</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    _In_ PDRIVER_OBJECT DriverObject<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    _In_ PUNICODE_STRING RegistryPath</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    NTSTATUS status<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">UNREFERENCED_PARAMETER</span><span class=\"token punctuation\">(</span> RegistryPath <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// 向过滤管理器注册一个过滤器。这个过滤器使用 FilterRegistration 表示的</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    status <span class=\"token operator\">=</span> <span class=\"token function\">FltRegisterFilter</span><span class=\"token punctuation\">(</span> DriverObject<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                                <span class=\"token operator\">&amp;</span>FilterRegistration<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                                <span class=\"token operator\">&amp;</span>gFilterHandle <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token function\">ASSERT</span><span class=\"token punctuation\">(</span> <span class=\"token function\">NT_SUCCESS</span><span class=\"token punctuation\">(</span> status <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// VS2019 中用的是 FLT_ASSERT</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">NT_SUCCESS</span><span class=\"token punctuation\">(</span> status <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token comment\">// 开启过滤行为</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        status <span class=\"token operator\">=</span> <span class=\"token function\">FltStartFiltering</span><span class=\"token punctuation\">(</span> gFilterHandle <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">NT_SUCCESS</span><span class=\"token punctuation\">(</span> status <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token comment\">// 如果不能正常开启，那么这个注册没有意义，取消注册并以失败退出</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token function\">FltUnregisterFilter</span><span class=\"token punctuation\">(</span> gFilterHandle <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">return</span> status<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"fltregisterfilter-fltstartfiltering和fltregisterfilter\"><a class=\"anchor\" href=\"#fltregisterfilter-fltstartfiltering和fltregisterfilter\">#</a> FltRegisterFilter、FltStartFiltering 和 FltRegisterFilter</h3>\n<p>其中，  <code>FltRegisterFilter</code>  是一个非常重要的内核 API， 是微过滤器生命的开始。 这个函数的原型如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">NTAPI</span> <span class=\"token expression\">__stdcall</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">FLTAPI</span> <span class=\"token expression\">NTAPI</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>NTSTATUS</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>FLTAPI</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">FltRegisterFilter</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    _In_ PDRIVER_OBJECT Driver<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    _In_ CONST FLT_REGISTRATION <span class=\"token operator\">*</span>Registration<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    _Outptr_ PFLT_FILTER <span class=\"token operator\">*</span>RetFilter</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>第 1 个参数是本驱动的驱动对象， 是在入口函数  <code>DriverEntry</code>  中作为参数传入的。<br />\n第 2 个参数就是一个宣告注册信息的结构， 这个结构内含描述这个过滤器的所有信息， 在本节中， 称为微过滤器注册结构。<br />\n第 3 个参数（RetFilter） 是一个返回参数， 返回注册成功的微过滤器句柄。 微过滤器句柄非常常用， 一般都保存在全局变量中以备后用， 在下面调用函数  <code>FltStartFiltering</code>  时就需要以这个句柄作为参数。</p>\n<p>显而易见， 调用  <code>FltRegisterFilter</code>  本身并不复杂， 问题在于要填写一个合法的  <code>FLT_REGISTRATION</code>  结构。 这个结构将在下面介绍。</p>\n<p>另一个函数是  <code>FltStartFiltering</code>  ， 在调用这个函数之前， 过滤是不起作用的。 这个函数的作用是开启。 它的原型如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>NTSTATUS</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>FLTAPI</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">FltStartFiltering</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    _In_ PFLT_FILTER Filter</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>此函数非常简单， 只有一个参数， 就是调用  <code>FltRegisterFilter</code>  时返回的微过滤器句柄。<br />\n一般情况下， 这个函数的调用会成功； 如果失败， 除了放弃过滤， 几乎别无选择。</p>\n<h2 id=\"微过滤器的数据结构\"><a class=\"anchor\" href=\"#微过滤器的数据结构\">#</a> 微过滤器的数据结构</h2>\n<p>注册微过滤器时， 我们填写了一个名为微过滤器注册结构（ <code>FLT_REGISTRATION</code> ）的数据结构。<br />\n定义如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_FLT_REGISTRATION</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 结构的大小和结构的版本</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    USHORT Size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    USHORT Version<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 微过滤器的标志位</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    FLT_REGISTRATION_FLAGS Flags<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">//  Variable length array of routines that are used to manage contexts in the system.</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">//  </span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// </span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    CONST FLT_CONTEXT_REGISTRATION <span class=\"token operator\">*</span>ContextRegistration<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">//  Variable length array of routines used for processing pre- and post-</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\">//  file system operations.</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">// 操作回调函数。这是重点中的重点。</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    CONST FLT_OPERATION_REGISTRATION <span class=\"token operator\">*</span>OperationRegistration<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token comment\">//  This is called before a filter is unloaded.  If an ERROR or WARNING</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token comment\">//  status is returned then the filter is NOT unloaded.  A mandatory unload</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token comment\">//  can not be failed.</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token comment\">//  If a NULL is specified for this routine, then the filter can never be</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token comment\">//  unloaded.</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token comment\">// 卸载回调函数</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    PFLT_FILTER_UNLOAD_CALLBACK FilterUnloadCallback<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token comment\">//  This is called to see if a filter would like to attach an instance</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token comment\">//  to the given volume.  If an ERROR or WARNING status is returned, an</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token comment\">//  attachment is not made.</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token comment\">//  If a NULL is specified for this routine, the attachment is always made.</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token comment\">// 实例安装回调</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    PFLT_INSTANCE_SETUP_CALLBACK InstanceSetupCallback<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token comment\">//  This is called to see if the filter wants to detach from the given</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token comment\">//  volume.  This is only called for manual detach requests.  If an</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token comment\">//  ERROR or WARNING status is returned, the filter is not detached.</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token comment\">//  If a NULL is specified for this routine, then instances can never be</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token comment\">//  manually detached.</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    PFLT_INSTANCE_QUERY_TEARDOWN_CALLBACK InstanceQueryTeardownCallback<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token comment\">//  This is called at the start of a filter detaching from a volume.</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token comment\">//  It is OK for this field to be NULL.</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    PFLT_INSTANCE_TEARDOWN_CALLBACK InstanceTeardownStartCallback<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    <span class=\"token comment\">//  This is called at the end of a filter detaching from a volume.  All</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    <span class=\"token comment\">//  outstanding operations have been completed by the time this routine</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token comment\">//  is called.</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    <span class=\"token comment\">//  It is OK for this field to be NULL.</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    PFLT_INSTANCE_TEARDOWN_CALLBACK InstanceTeardownCompleteCallback<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    <span class=\"token comment\">//  The following callbacks are provided by a filter only if it is</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>    <span class=\"token comment\">//  interested in modifying the name space.</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    <span class=\"token comment\">//  If NULL is specified for these callbacks, it is assumed that the</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    <span class=\"token comment\">//  filter would not affect the name being requested.</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>    <span class=\"token comment\">//  生成文件名回调</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>    PFLT_GENERATE_FILE_NAME GenerateFileNameCallback<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>    <span class=\"token comment\">// 格式化名字组件</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>    PFLT_NORMALIZE_NAME_COMPONENT NormalizeNameComponentCallback<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>    <span class=\"token comment\">// 格式化上下文清理回调</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>    PFLT_NORMALIZE_CONTEXT_CLEANUP NormalizeContextCleanupCallback<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>    <span class=\"token comment\">//  The PFLT_NORMALIZE_NAME_COMPONENT_EX callback is also a name</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>    <span class=\"token comment\">//  provider callback. It is not included here along with the</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>    <span class=\"token comment\">//  other name provider callbacks to take care of the registration</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>    <span class=\"token comment\">//  structure versioning issues.</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre></pre></td></tr><tr><td data-num=\"95\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\">FLT_MGR_LONGHORN</span></span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>    <span class=\"token comment\">//  This is called for transaction notifications received from the KTM</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>    <span class=\"token comment\">//  when a filter has enlisted on that transaction.</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>    PFLT_TRANSACTION_NOTIFICATION_CALLBACK TransactionNotificationCallback<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>    <span class=\"token comment\">//  This is the extended normalize name component callback</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>    <span class=\"token comment\">//  If a mini-filter provides this callback, then  this callback</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>    <span class=\"token comment\">//  will be used as opposed to using PFLT_NORMALIZE_NAME_COMPONENT</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>    <span class=\"token comment\">//  The PFLT_NORMALIZE_NAME_COMPONENT_EX provides an extra parameter</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>    <span class=\"token comment\">//  (PFILE_OBJECT) in addition to the parameters provided to</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>    <span class=\"token comment\">//  PFLT_NORMALIZE_NAME_COMPONENT. A mini-filter may use this parameter</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>    <span class=\"token comment\">//  to get to additional information like the TXN_PARAMETER_BLOCK.</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>    <span class=\"token comment\">//  A mini-filter that has no use for the additional parameter may</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>    <span class=\"token comment\">//  only provide a PFLT_NORMALIZE_NAME_COMPONENT callback.</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>    <span class=\"token comment\">//  A mini-filter may provide both a PFLT_NORMALIZE_NAME_COMPONENT</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>    <span class=\"token comment\">//  callback and a PFLT_NORMALIZE_NAME_COMPONENT_EX callback. The</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>    <span class=\"token comment\">//  PFLT_NORMALIZE_NAME_COMPONENT_EX callback will be used by fltmgr</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>    <span class=\"token comment\">//  versions that understand this callback (Vista RTM and beyond)</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>    <span class=\"token comment\">//  and PFLT_NORMALIZE_NAME_COMPONENT callback will be used by fltmgr</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>    <span class=\"token comment\">//  versions that do not understand the PFLT_NORMALIZE_NAME_COMPONENT_EX</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>    <span class=\"token comment\">//  callback (prior to Vista RTM). This allows the same mini-filter</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>    <span class=\"token comment\">//  binary to run with all versions of fltmgr.</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>    PFLT_NORMALIZE_NAME_COMPONENT_EX NormalizeNameComponentExCallback<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre></pre></td></tr><tr><td data-num=\"129\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span> <span class=\"token comment\">// FLT_MGR_LONGHORN</span></span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre></pre></td></tr><tr><td data-num=\"131\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\">FLT_MGR_WIN8</span></span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>    <span class=\"token comment\">//  This is called for IO failures due to the existence of sections</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>    <span class=\"token comment\">//  when those sections are created through FltCreateSectionForDatascan.</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>    PFLT_SECTION_CONFLICT_NOTIFICATION_CALLBACK SectionNotificationCallback<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre></pre></td></tr><tr><td data-num=\"140\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span> <span class=\"token comment\">// FLT_MGR_WIN8</span></span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre></pre></td></tr><tr><td data-num=\"142\"></td><td><pre><span class=\"token punctuation\">&#125;</span> FLT_REGISTRATION<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>PFLT_REGISTRATION<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>上面的结构来自 VS2019 中的定义，中文是书中的介绍。</p>\n<p>第 1 个域 Size 表示  <code>FLT_REGISTRATION</code>  结构的大小， 当然大小就是  <code>sizeof(FLT_REGISTRATION)</code> 。 微软习惯在 Windows 内核的数据结构前面加上大小， 易于排错。</p>\n<p>第 2 个域 Version 是  <code>FLT_REGISTRATION</code>  结构的版本号。 对于这个域， 读者不需要多加考虑， 直接按照惯例填写  <code>FLT_REGISTRATION_VERSION</code>  即可。</p>\n<p>第 3 个域 Flags 是标志位， 标记是否要收到这类的操作。 但是有趣的是， 这个域只有两种设置法： 一种设置为 NULL， 不起任何作用； 另一种则设置为  <code>FLTFL_REGISTRATION_DO_NOT_ SUPPORT_SERVICE_STOP</code>  ， 代表当停止服务时  <code>Minifilter</code>  不会响应且不会调用到  <code>FilterUnloadCallback</code>  ， 即使  <code>FilterUnloadCallback</code>  并不是 NULL。</p>\n<p>第 4 个域  <code>Context Registration</code>  是上下文注册， 注册处理上下文的函数。</p>\n<p>第 5 个域  <code>Operation Registration</code>  是操作回调函数集注册。 这是最重要的一个域， 我们将要过滤的文件操作回调函数写在其中， 可以定义所有功能代码对应的回调函数。</p>\n<p>举例如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>CONST FLT_OPERATION_REGISTRATION Callbacks<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span> IRP_MJ_CREATE<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      XxxPreCreate<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      XxxPostCreate <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span> IRP_MJ_CLEANUP<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      XxxPreCleanup<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token constant\">NULL</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span> IRP_MJ_WRITE<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      XxxPreWrite<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      XxxPostWrite <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">// 填写要过滤的定义集合</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span> IRP_MJ_OPERATION_END <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这是  <code>FLT_OPERATION_REGISTRATION</code>  这个结构， 后面会做更详细的学习。</p>\n<p>第 6 个域 FilterUnloadCallback 是驱动卸载回调函数。 在驱动被停止时， 函数被调用，<br />\n代表要释放程序内的资源以结束过滤行为。 这个域可以设置为 NULL。</p>\n<p>第 7 个域 InstanceSetupCallback 是实例安装回调函数， 当一个卷实例要加载时会通过此<br />\n回调函数处理。 这个域可以设置为 NULL。</p>\n<p>第 8 个域 InstanceQueryTeardownCallback 是控制实例销毁函数， 这个回调函数只会在一<br />\n个手工解除绑定的请求时被调用。 这个域可以设置为 NULL。</p>\n<p>第 9 个域 InstanceTeardownStartCallback 是实例解绑定函数， 当调用时代表已经决定解<br />\n除绑定。 这个域可以设置为 NULL。</p>\n<p>第 10 个域 InstanceTeardownCompleteCallback 是实例解绑定完成函数， 当确定时调用解<br />\n除绑定后的完成函数。 这个域可以设置为 NULL。</p>\n<p>还有一些域因为使用不多， 所以本书将其略去， 有兴趣的读者可以自己参考相关文档。 笔者习惯将它们设置为 NULL。</p>\n<p>下面是一个设置的例子。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>CONST FLT_REGISTRATION FilterRegistration <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span> FLT_REGISTRATION <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>         <span class=\"token comment\">//  Size</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    FLT_REGISTRATION_VERSION<span class=\"token punctuation\">,</span>           <span class=\"token comment\">//  Version</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>                                  <span class=\"token comment\">//  Flags</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span>                               <span class=\"token comment\">//  Context</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    Callbacks<span class=\"token punctuation\">,</span>                          <span class=\"token comment\">//  Operation callbacks</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    PtUnload<span class=\"token punctuation\">,</span>                           <span class=\"token comment\">//  MiniFilterUnload</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    PtInstanceSetup<span class=\"token punctuation\">,</span>                    <span class=\"token comment\">//  InstanceSetup</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    PtInstanceQueryTeardown<span class=\"token punctuation\">,</span>            <span class=\"token comment\">//  InstanceQueryTeardown</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    PtInstanceTeardownStart<span class=\"token punctuation\">,</span>            <span class=\"token comment\">//  InstanceTeardownStart</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    PtInstanceTeardownComplete<span class=\"token punctuation\">,</span>         <span class=\"token comment\">//  InstanceTeardownComplete</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span>                               <span class=\"token comment\">//  GenerateFileName</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span>                               <span class=\"token comment\">//  GenerateDestinationFileName</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token constant\">NULL</span>                                <span class=\"token comment\">//  NormalizeNameComponent</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>其中， 最重要的就是  <code>CallBacks</code> 。这是一个回调函数数组， 在其中可以处理所有的请求。</p>\n<p>但是处理方式和以前做请求过滤时有所不同， 以前处理的是 IRP， 其实有两种处理：<strong>一种是在请求完成之前就进行处理</strong>； <strong>另一种是用事件等待请求完成之后， 或者在完成函数中进行处理</strong>。</p>\n<p>前一种适合要拦截请求本身的情况， 后一种适合要拦截请求之后返回的结果的情况。<br />\n在 Minifilter 中， 这两种过滤被分在两个回调函数中， 一个称为预操作回调函数（Pre-Operation Function） ， 另一个称为后操作回调函数（Post-Operation Function） 。</p>\n<p>下面是一个例子。仅供参考。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>CONST FLT_OPERATION_REGISTRATION Callbacks<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span> IRP_MJ_CREATE<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      XxxPreCreate<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 生成预操作回调函数</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      XxxPostCreate <span class=\"token comment\">// 生成后操作回调函数</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span> IRP_MJ_WRITE<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      FLTFL_OPERATION_REGISTRATION_SKIP_CACHED_IO<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      XxxPreWrite<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      XxxPostWrite </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><code>Callbacks</code>  数组内存储数据结构为  <code>FLT_OPERATION_REGISTRATION</code>  的数组， 用意是把需要做过滤的请求一个个声明出来， 每个都包括了预操作回调函数与后操作回调函数，宣告过后通过注册就能使 IRP 包顺利地通过这边指定的函数来做处理了。 当有多个微过滤器时， IRP 会通过每一个微过滤器的预操作回调函数与后操作回调函数， 除非 IRP 传递到中途被直接返回而不再继续传递下去。</p>\n<p>读者可以看到， 这个数组的每个元素由四部分组成。 第 1 个域是请求的主功能号， 这是我们熟知的。 第 2 个域是一个标志位， 有三种写法： 第 1 种是写 0， 这个标志仅仅对读 / 写回调有用， 所以对生成请求的处理直接写 0 即可； 第 2 种是写  <code>FLTFL_OPERATION_REGISTRATION_SKIP_CACHED_IO</code>  ， 表示不过滤缓冲读 / 写请求； 第 3 种是写  <code>FLTFL_OPERATION_REGISTRATION_SKIP_PAGING_IO</code>  ， 表示不过滤分页读 / 写请求。 接下来的两个域就是预操作回调函数和后操作回调函数。请注意最后一个元素必须是  <code>IRP_MJ_OPERATION_END</code>  ， 否则过滤管理器无法知道到底有多少个元素。</p>\n<p>读者已经看到了上面有若干个回调函数， 其中有一些回调函数在操作回调函数集 Callbacks 中， 还有一些回调函数就直接在微过滤器注册结构中。 下面的任务就是逐个实现这些函数。在操作回调函数集中， 本章的例子只需要用到生成回调函数， 其他的回调处理可以按这个类推。</p>\n<h2 id=\"flt_preop_callback_status-返回值\"><a class=\"anchor\" href=\"#flt_preop_callback_status-返回值\">#</a> FLT_PREOP_CALLBACK_STATUS 返回值</h2>\n<p>在编写 minifilter 回调函数之前先了解一下其返回值所代表的的含义：</p>\n<table>\n<thead>\n<tr>\n<th>返回值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>FLT_PREOP_COMPLETE</strong></td>\n<td>minifilter 驱动程序正在完成 I/O 操作。过滤器管理器不会将 I/O 操作发送到驱动程序堆栈中调用者之下的任何微过滤器驱动程序或文件系统。在这种情况下，过滤器管理器只调用驱动堆栈中调用者之上的微过滤器驱动的后操作回调例程。</td>\n</tr>\n</tbody>\n<tbody>\n<tr>\n<td><strong>FLT_PREOP_DISALLOW_FASTIO</strong></td>\n<td>该操作是一个快速 I/O 操作，并且 minifilter 驱动程序不允许将快速 I/O 路径用于该操作。过滤器管理器不会将快速 I/O 操作发送到驱动程序堆栈中调用者下方的任何微过滤器驱动程序或文件系统。在这种情况下，过滤器管理器只调用驱动堆栈中调用者之上的微过滤器驱动的后操作回调例程。</td>\n</tr>\n</tbody>\n<tbody>\n<tr>\n<td><strong>FLT_PREOP_PENDING</strong></td>\n<td>minifilter 驱动程序挂起 I/O 操作，并且该操作仍在挂起。过滤器管理器不会进一步处理 I/O 操作，直到 minifilter 驱动调用<strong> FltCompletePendedPreOperation</strong>。</td>\n</tr>\n</tbody>\n<tbody>\n<tr>\n<td><strong>FLT_PREOP_SUCCESS_NO_CALLBACK</strong></td>\n<td>minifilter 驱动程序正在将 I/O 操作返回给 filter 管理器以供进一步处理。在这种情况下，过滤器管理器在 I/O 完成期间不会调用 minifilter 驱动程序的后操作回调（如果存在的话）。</td>\n</tr>\n</tbody>\n<tbody>\n<tr>\n<td><strong>FLT_PREOP_SUCCESS_WITH_CALLBACK</strong></td>\n<td>minifilter 驱动程序正在将 I/O 操作返回给 filter 管理器以供进一步处理。在这种情况下，过滤器管理器在 I/O 完成期间调用 minifilter 驱动程序的操作后回调。</td>\n</tr>\n</tbody>\n<tbody>\n<tr>\n<td><strong>FLT_PREOP_SYNCHRONIZE</strong></td>\n<td>minifilter 驱动将 I/O 操作返回给 filter 管理器进行进一步处理，但它没有完成操作。在这种情况下，过滤器管理器在 IRQL &lt;= APC_LEVEL 的当前线程的上下文中调用微过滤器的后操作回调。</td>\n</tr>\n</tbody>\n<tbody>\n<tr>\n<td><strong>FLT_PREOP_DISALLOW_FSFILTER_IO</strong></td>\n<td>minifilter 驱动程序不允许快速 QueryOpen 操作并强制操作沿着慢速路径进行。这样做会导致 I/O 管理器通过执行文件的打开 / 查询 / 关闭来为请求提供服务。Minifilter 驱动程序应该只为 QueryOpen 返回这个状态。</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"卸载函数\"><a class=\"anchor\" href=\"#卸载函数\">#</a> 卸载函数</h2>\n<p>在卸载回调函数中， 应该注销我们曾经注册过的微过滤器， 这可以通过调用内核 API 函数 FltUnregisterFilter 来实现。 除此之外， 在这个回调函数中， 读者可以完成以前在传统型的文件过滤驱动中驱动卸载函数所完成的所有工作。 但是本例非常简单， 仅仅是调用 FltUnregisterFilter 而已。 这个函数也只有一个参数， 就是微过滤器句柄。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>NTSTATUS</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">FsFilter01Unload</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    _In_ FLT_FILTER_UNLOAD_FLAGS Flags</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">UNREFERENCED_PARAMETER</span><span class=\"token punctuation\">(</span> Flags <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">PAGED_CODE</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">PT_DBG_PRINT</span><span class=\"token punctuation\">(</span> PTDBG_TRACE_ROUTINES<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                  <span class=\"token punctuation\">(</span><span class=\"token string\">\"FsFilter01!FsFilter01Unload: Entered\\n\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token function\">FltUnregisterFilter</span><span class=\"token punctuation\">(</span> gFilterHandle <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">return</span> STATUS_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这个函数的主要工作是释放资源，  <code>FltUnregisterFilter</code>  与  <code>FltRegisterFilter</code>  互相对应， <code>FltUnregisterFilter</code> <strong> 用来释放已注册的微过滤器在 Windows 内核内部所使用的资源</strong>。</p>\n<h2 id=\"预操作回调函数\"><a class=\"anchor\" href=\"#预操作回调函数\">#</a> 预操作回调函数</h2>\n<p>我们针对  <code>IRP_MJ_CREATE</code>  这个主功能号<em>来设置预操作回调函数与后操作回调函数</em>，当系统接收到标识为  <code>IRP_MJ_CREATE</code>  的 IRP 也就是试图生成或者打开文件时， 就会调用到预操作回调函数与后操作回调函数。</p>\n<p><code>NPPreCreate</code>  是我们<strong>设置的预操作回调函数</strong>。这个函数有三个参数， 其中第一个参数是一个  <code>FLT_CALLBACK_DATA</code>  的指针，   <code>FLT_CALLBACK_DATA</code>  称为回调数据包， 这个数据包内含有和这个请求相关的全部信息。 正是因为有了这个参数， 所以不再直接读取 IRP 的信息了。 这个函数的参数中不再有 IRP 的指针。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>FLT_PREOP_CALLBACK_STATUS</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">NPPreCreate</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    __inout PFLT_CALLBACK_DATA Data<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    __in PCFLT_RELATED_OBJECTS FltObjects<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    __deref_out_opt PVOID<span class=\"token operator\">*</span> CompletionContext</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 缓存区，用来获得文件名</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">char</span> FileName<span class=\"token punctuation\">[</span><span class=\"token number\">260</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"X:\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    NTSTATUS status<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    PFLT_FILE_NAME_INFORMATION nameInfo<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 未使用的参数，用宏掩盖之使其不发生编译警告</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token function\">UNREFERENCED_PARAMETER</span><span class=\"token punctuation\">(</span>FltObjects<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token function\">UNREFERENCED_PARAMETER</span><span class=\"token punctuation\">(</span>CompletionContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">// 检测可分页代码</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token function\">PAGED_CODE</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    __try <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token comment\">// 这里有获取文件名信息，获取文件名和解析文件名等几个函数，稍后在详细了解。</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        status <span class=\"token operator\">=</span> <span class=\"token function\">FltGetFileNameInformation</span><span class=\"token punctuation\">(</span>Data<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            FLT_FILE_NAME_NORMALIZED <span class=\"token operator\">|</span> FLT_FILE_NAME_QUERY_DEFAULT<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token operator\">&amp;</span>nameInfo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">NT_SUCCESS</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token comment\">//如果成功了，解析文件名信息，然后比较其中是否有 NOTEPAD.EXE 子字符串</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>gCommand <span class=\"token operator\">==</span> ENUM_BLOCK<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                <span class=\"token function\">FltParseFileNameInformation</span><span class=\"token punctuation\">(</span>nameInfo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                <span class=\"token comment\">// 将字符串转换为 CHAR 大写以利于比对字符串</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">NPUnicodeStringToChar</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>nameInfo<span class=\"token operator\">-></span>Name<span class=\"token punctuation\">,</span> FileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">strstr</span><span class=\"token punctuation\">(</span>FileName<span class=\"token punctuation\">,</span> <span class=\"token string\">\"NOTEPAD.EXE\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                        <span class=\"token comment\">// 填写拒绝</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                        Data<span class=\"token operator\">-></span>IoStatus<span class=\"token punctuation\">.</span>Status <span class=\"token operator\">=</span> STATUS_ACCESS_DENIED<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                        Data<span class=\"token operator\">-></span>IoStatus<span class=\"token punctuation\">.</span>Information <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                        <span class=\"token function\">FltReleaseFileNameInformation</span><span class=\"token punctuation\">(</span>nameInfo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                        <span class=\"token comment\">// 返回请求已经结束，，也就是不用在下传了</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                        <span class=\"token keyword\">return</span> FLT_PREOP_COMPLETE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token comment\">// 释放名字资源 </span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token function\">FltReleaseFileNameInformation</span><span class=\"token punctuation\">(</span>nameInfo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token function\">__except</span> <span class=\"token punctuation\">(</span>EXCEPTION_EXECUTE_HANDLER<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"NPPreCreate EXCEPTION_EXECUTE_HANDLER\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token keyword\">return</span> FLT_PREOP_SUCCESS_WITH_CALLBACK<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这是一个很简单的预操作回调函数， 它的主要作用就是尽可能地解析目前的文件名称， 然后判断这个名称是否符合我们需要的条件。 我们的目的是限制名为 “notepad.exe” 的文件被使用， 任何文件的操作比如读取、 删除、 覆盖、 重命名、 执行等， 必定都会先调用到打开请求。 因此，在这里做个简单的判断， 试图分辨出目前系统操作的文件是否符合我们所寻找的条件。</p>\n<p>上面用到了一个自定义函数  <code>NPUnicodeStringToChar</code> 。 该函数将  <code>UNICODE_STRING</code>  转换为全大写的 CHAR 数组， 以便搜索子字符串 “NOTEPAD.EXE”。 其中使用了内核 API 函数  <code>RtlUpperChar</code>  转换大小写， 我们可以试着自己实现这个函数。</p>\n<h3 id=\"了解相关数据结构\"><a class=\"anchor\" href=\"#了解相关数据结构\">#</a> 了解相关数据结构</h3>\n<p><code>FLT_CALLBACK_DATA</code>  、  <code>PFLT_IO_PARAMETER_BLOCK</code>  、  <code>FLT_PARAMETERS</code></p>\n<h4 id=\"flt_callback_data\"><a class=\"anchor\" href=\"#flt_callback_data\">#</a> FLT_CALLBACK_DATA</h4>\n<p>下面是回调数据包  <code>FLT_CALLBACK_DATA</code>  的定义:</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_FLT_CALLBACK_DATA</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">//  Flags</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    FLT_CALLBACK_DATA_FLAGS Flags<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">//  Thread that initiated this operation.</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    PETHREAD CONST Thread<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">//  Pointer to the changeable i/o parameters</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    PFLT_IO_PARAMETER_BLOCK CONST Iopb<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token comment\">//  For pre-op calls: if filter returns STATUS_IO_COMPLETE, then it should</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token comment\">//  set the return i/o status here.  For post-operation calls, this is set</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token comment\">//  by filter-manager indicating the completed i/o status.</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    IO_STATUS_BLOCK IoStatus<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_FLT_TAG_DATA_BUFFER</span> <span class=\"token operator\">*</span>TagData<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">union</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token comment\">//  Queue links if the FltMgr queue is used to</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token comment\">//  pend the callback</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            LIST_ENTRY QueueLinks<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            <span class=\"token comment\">//  Additional context</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            PVOID QueueContext<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token comment\">//  The following are available to filters to use</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token comment\">//  in whatever manner desired if not using the filter manager</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token comment\">//  queues.</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token comment\">//  NOTE:  These fields are only valid while the filter is</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token comment\">//         processing this operation which is inside the operation</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token comment\">//         callback or while the operation is pended.</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        PVOID FilterContext<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token comment\">//  Original requester mode of caller</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    KPROCESSOR_MODE RequestorMode<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre></pre></td></tr><tr><td data-num=\"67\"></td><td><pre><span class=\"token punctuation\">&#125;</span> FLT_CALLBACK_DATA<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>PFLT_CALLBACK_DATA<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>回调数据包结构代表了一个 I/O 操作。 过滤管理器与微过滤驱动都使用这个结构来初始化与处理 I/O 操作， 内含许多嵌套结构定义， 可以在 WDK 头文件  <code>fltkernel.h</code>  中找到更多有关的数据。这个结构可以说是 Minifilter 的基础。</p>\n<p>大部分读者会提出疑问， 以前在  <code>sfilter</code>  中， 我们从 IRP 指针及 IRP 的当前栈空间指针中得到许多信息， 比如写请求的长度等， 现<br />\n在如何能得到这些信息呢？</p>\n<h4 id=\"pflt_io_parameter_block\"><a class=\"anchor\" href=\"#pflt_io_parameter_block\">#</a> PFLT_IO_PARAMETER_BLOCK</h4>\n<p>注意  <code>Iopb</code>  域， 这是一个  <code>PFLT_IO_PARAMETER_BLOCK</code>  指针。 这个数据结构定义如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_FLT_IO_PARAMETER_BLOCK</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">//  Fields from IRP</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">//  Flags</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    ULONG IrpFlags<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">//  Major/minor functions from IRP</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    UCHAR MajorFunction<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    UCHAR MinorFunction<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">//  The flags associated with operations.</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">//  The IO_STACK_LOCATION.Flags field in the old model (SL_* flags)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    UCHAR OperationFlags<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token comment\">//  For alignment</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    UCHAR Reserved<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token comment\">//  The FileObject that is the target for this</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token comment\">//  IO operation.</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    PFILE_OBJECT TargetFileObject<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token comment\">//  Instance that i/o is directed to</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    PFLT_INSTANCE TargetInstance<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token comment\">//  Normalized parameters for the operation</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    FLT_PARAMETERS Parameters<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token punctuation\">&#125;</span> FLT_IO_PARAMETER_BLOCK<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>PFLT_IO_PARAMETER_BLOCK<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>在这里就可以找到以前熟悉的许多信息了， 包括主功能号、 次功能号和文件对象指针等。</p>\n<h4 id=\"flt_parameters\"><a class=\"anchor\" href=\"#flt_parameters\">#</a> FLT_PARAMETERS</h4>\n<p>此外， 其中还有一个结构为  <code>FLT_PARAMETERS</code>  的<strong>参数域</strong>， 这个数据结构是一个共用体， 应用的域根据不同的主功能号而不同， 该结构体的部分如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">union</span> _FLT_PARAMETERS <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">//  IRP_MJ_CREATE</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        PIO_SECURITY_CONTEXT SecurityContext<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">//  The low 24 bits contains CreateOptions flag values.</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">//  The high 8 bits contains the CreateDisposition values.</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        ULONG Options<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        USHORT POINTER_ALIGNMENT FileAttributes<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        USHORT ShareAccess<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        ULONG POINTER_ALIGNMENT EaLength<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        PVOID EaBuffer<span class=\"token punctuation\">;</span>                 <span class=\"token comment\">//Not in IO_STACK_LOCATION parameters list</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        LARGE_INTEGER AllocationSize<span class=\"token punctuation\">;</span>   <span class=\"token comment\">//Not in IO_STACK_LOCATION parameters list</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> Create<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    ………</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token comment\">//  IRP_MJ_READ</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        ULONG Length<span class=\"token punctuation\">;</span>                   <span class=\"token comment\">//Length of transfer</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        ULONG POINTER_ALIGNMENT Key<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        LARGE_INTEGER ByteOffset<span class=\"token punctuation\">;</span>       <span class=\"token comment\">//Offset to read from</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        PVOID ReadBuffer<span class=\"token punctuation\">;</span>       <span class=\"token comment\">//Not in IO_STACK_LOCATION parameters list</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        PMDL MdlAddress<span class=\"token punctuation\">;</span>        <span class=\"token comment\">//Mdl address for the buffer  (maybe NULL)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> Read<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token comment\">//  IRP_MJ_WRITE</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        ULONG Length<span class=\"token punctuation\">;</span>                   <span class=\"token comment\">//Length of transfer</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        ULONG POINTER_ALIGNMENT Key<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        LARGE_INTEGER ByteOffset<span class=\"token punctuation\">;</span>       <span class=\"token comment\">//Offset to write to</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        PVOID WriteBuffer<span class=\"token punctuation\">;</span>      <span class=\"token comment\">//Not in IO_STACK_LOCATION parameters list</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        PMDL MdlAddress<span class=\"token punctuation\">;</span>        <span class=\"token comment\">//Mdl address for the buffer  (maybe NULL)</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> Write<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    ………</pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token punctuation\">&#125;</span> FLT_PARAMETERS<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>PFLT_PARAMETERS<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>从这里就很容易找到写请求包括的写入位置、 长度和缓冲区等相关参数。</p>\n<h3 id=\"解析文件路径所需要调用的函数\"><a class=\"anchor\" href=\"#解析文件路径所需要调用的函数\">#</a> 解析文件路径所需要调用的函数</h3>\n<h4 id=\"fltgetfilenameinformation\"><a class=\"anchor\" href=\"#fltgetfilenameinformation\">#</a> FltGetFileNameInformation</h4>\n<p>第一个函数是  <code>FltGetFileNameInformation</code>  ，这个函数可以取得一个文件或目录的文件名信息结构。</p>\n<p><strong>语法:</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>NTSTATUS FLTAPI <span class=\"token function\">FltGetFileNameInformation</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token punctuation\">[</span>in<span class=\"token punctuation\">]</span>  PFLT_CALLBACK_DATA         CallbackData<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token punctuation\">[</span>in<span class=\"token punctuation\">]</span>  FLT_FILE_NAME_OPTIONS      NameOptions<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">[</span>out<span class=\"token punctuation\">]</span> PFLT_FILE_NAME_INFORMATION <span class=\"token operator\">*</span>FileNameInformation</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong>参数:</strong></p>\n<p><code>[in] CallbackData</code></p>\n<p>指向  <code>FLT_CALLBACK_DATA</code>  结构的指针，它是 I/O 操作的回调数据结构。 此参数是必需的，不能为  <strong>NULL</strong> 。</p>\n<p><code>[in] NameOptions</code></p>\n<p>一个  <code>FLT_FILE_NAME_OPTIONS</code>  值，该值包含指定要返回的名称信息的格式以及筛选器管理器要使用的查询方法的标志。 (名称提供程序微型筛选器驱动程序可以使用其他标志来指定名称查询选项。) 此参数是必需的，不能为  <strong>NULL</strong> 。</p>\n<p>下面是文件名格式标志值。 只能指定以下标志之一。 有关这些格式的说明，请参阅  <code>FLT_FILE_NAME_INFORMATION</code>  。</p>\n<table>\n<thead>\n<tr>\n<th>名称格式标志值</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>FLT_FILE_NAME_NORMALIZED</td>\n<td><em>FileNameInformation</em> 参数接收包含文件的规范化名称的结构的地址。</td>\n</tr>\n<tr>\n<td>FLT_FILE_NAME_OPENED</td>\n<td><em>FileNameInformation</em> 参数接收包含打开文件时使用的名称的结构的地址。</td>\n</tr>\n<tr>\n<td>FLT_FILE_NAME_SHORT</td>\n<td><em>FileNameInformation</em> 参数接收包含文件的短 (8.3) 名称的结构的地址。 短名称由最多 8 个字符组成，后跟一个句点，最多 3 个字符。 文件的短名称不包括卷名称、目录路径或流名称。 在预创建路径中无效。</td>\n</tr>\n</tbody>\n</table>\n<p>下面是文件名查询方法标志值。 只能指定以下标志之一。</p>\n<table>\n<thead>\n<tr>\n<th>查询方法标志值</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>FLT_FILE_NAME_QUERY_DEFAULT</td>\n<td>如果目前无法安全地查询文件系统中的文件名，<strong>FltGetFileNameInformation</strong> 不执行任何操作。 否则， <strong>FltGetFileNameInformation</strong> 会查询筛选器管理器的名称缓存以获取文件名信息。 如果在缓存中找不到该名称， <strong>FltGetFileNameInformation</strong> 会查询文件系统并缓存结果。</td>\n</tr>\n<tr>\n<td>FLT_FILE_NAME_QUERY_CACHE_ONLY</td>\n<td><strong>FltGetFileNameInformation</strong> 查询筛选器管理器的名称缓存以获取文件名信息。 <strong>FltGetFileNameInformation</strong> 不查询文件系统。</td>\n</tr>\n<tr>\n<td>FLT_FILE_NAME_QUERY_FILESYSTEM_ONLY</td>\n<td><strong>FltGetFileNameInformation</strong> 查询文件系统以获取文件名信息。 <strong>FltGetFileNameInformation</strong> 不会查询筛选器管理器的名称缓存，也不会缓存文件系统查询的结果。</td>\n</tr>\n<tr>\n<td>FLT_FILE_NAME_QUERY_ALWAYS_ALLOW_CACHE_LOOKUP</td>\n<td><strong>FltGetFileNameInformation</strong> 查询筛选器管理器的名称缓存以获取文件名信息。 如果在缓存中找不到该名称，并且目前可以安全地执行此操作， <strong>FltGetFileNameInformation</strong> 会查询文件系统以获取文件名信息并缓存结果。</td>\n</tr>\n</tbody>\n</table>\n<p>名称提供程序微型筛选器使用以下标志来指定文件名操作的属性。</p>\n<table>\n<thead>\n<tr>\n<th>名称提供程序标志值</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>FLT_FILE_NAME_REQUEST_FROM_CURRENT_PROVIDER</td>\n<td>名称提供程序微型筛选器可以使用此标志指定名称查询请求应重定向到自身， (名称提供程序微型筛选器) ，而不是由堆栈中较低的名称提供程序满足。</td>\n</tr>\n<tr>\n<td>FLT_FILE_NAME_DO_NOT_CACHE</td>\n<td>此标志表示不应缓存从此查询检索到的名称。 名称提供程序微型筛选器使用此标志来执行中间查询以生成名称。</td>\n</tr>\n<tr>\n<td>FLT_FILE_NAME_ALLOW_QUERY_ON_REPARSE</td>\n<td>名称提供程序微型筛选器可以使用此标志指定在创建后路径中查询名称是安全的，即使返回了 STATUS_REPARSE 也是如此。 调用方负责确保<strong> FileObject-FileName&gt;</strong> 字段未更改。 请勿将此标志用于装入点或符号链接重新分析点。</td>\n</tr>\n</tbody>\n</table>\n<p><code>[out] FileNameInformation</code></p>\n<p>指向调用方分配的变量的指针，该变量接收包含文件名信息的系统分配 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vemgtY24vd2luZG93cy1oYXJkd2FyZS9kcml2ZXJzL2RkaS9mbHRrZXJuZWwvbnMtZmx0a2VybmVsLV9mbHRfZmlsZV9uYW1lX2luZm9ybWF0aW9u\">FLT_FILE_NAME_INFORMATION</span> 结构的地址。 <strong>FltGetFileNameInformation</strong> 从分页池分配此结构。 此参数是必需的，不能为  <strong>NULL</strong> 。</p>\n<p><strong>返回值:</strong></p>\n<p>如果成功返回名称信息， <strong>FltGetFileNameInformation</strong> 将返回 STATUS_SUCCESS。 否则，它将返回相应的 NTSTATUS 值，例如以下值之一：</p>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<h4 id=\"fltparsefilenameinformation\"><a class=\"anchor\" href=\"#fltparsefilenameinformation\">#</a> FltParseFileNameInformation</h4>\n<p>第二个函数是  <code>FltParseFileNameInformation</code> ，</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>NTSTATUS FLTAPI <span class=\"token function\">FltParseFileNameInformation</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token punctuation\">[</span>in<span class=\"token punctuation\">,</span> out<span class=\"token punctuation\">]</span> PFLT_FILE_NAME_INFORMATION FileNameInformation</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>详细参见微软的官方文档→<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vemgtY24vd2luZG93cy1oYXJkd2FyZS9kcml2ZXJzL2RkaS9mbHRrZXJuZWwvbmYtZmx0a2VybmVsLWZsdHBhcnNlZmlsZW5hbWVpbmZvcm1hdGlvbj9mMXVybD0lM0ZhcHBJZCUzRERldjE2SURFRjElMjZsJTNEWkgtQ04lMjZrJTNEayhGTFRLRVJORUwlMjUyRkZsdFBhcnNlRmlsZU5hbWVJbmZvcm1hdGlvbiklM0JrKEZsdFBhcnNlRmlsZU5hbWVJbmZvcm1hdGlvbiklM0JrKERldkxhbmctQyUyNTJCJTI1MkIpJTNCayhUYXJnZXRPUy1XaW5kb3dzKSUyNnJkJTNEdHJ1ZQ==\">fltParseFileNameInformation 函数</span></p>\n<p><em>通过  <code>FltParseFileNameInformation</code>  函数可以得到一个含有路径名称与文件名的结构</em>， 我们再用字符串转换与比对便可以轻易地找出路径内是否有 NOTEPAD.EXE 等字符串。</p>\n<p>这里我调试了一下：</p>\n<p><img data-src=\"image003.png\" alt=\"\" /></p>\n<p>可以对比发现  <code>FltParseFileNameInformation</code>  函数做了什么。</p>\n<h3 id=\"否决请求\"><a class=\"anchor\" href=\"#否决请求\">#</a> 否决请求</h3>\n<p>在决定否决这个请求之后， 我们采用常见的与填写 IRP 的 IoStatus 域完全一样的方法否决这次请求， 相关代码如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Data<span class=\"token operator\">-></span>IoStatus<span class=\"token punctuation\">.</span>Status <span class=\"token operator\">=</span> STATUS_ACCESS_DENIED<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Data<span class=\"token operator\">-></span>IoStatus<span class=\"token punctuation\">.</span>Information <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">FltReleaseFileNameInformation</span><span class=\"token punctuation\">(</span>nameInfo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">return</span> FLT_PREOP_COMPLETE<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这段程序代码主要是告诉过滤管理器， 这个请求要即刻返回失败， 即代表这个 IRP 不会往下处理。</p>\n<p>我在 Win10 中测试当试图去打开 notepad.exe 时会显示如下图：</p>\n<p><img data-src=\"image002.png\" alt=\"\" /></p>\n<p>当我们去双击默认是 notepad.exe 打开的文件时，会出现显示如下：</p>\n<p><img data-src=\"image004.png\" alt=\"\" /></p>\n<p>让我们选择打开方式。</p>\n<h2 id=\"后操作回调函数\"><a class=\"anchor\" href=\"#后操作回调函数\">#</a> 后操作回调函数</h2>\n<p>当 IRP 完成返回时就会通过后操作回调函数， 例如， 若不想让文件新建成功， 则可以通过 FltCancelFileOpen 来取消之前的 FILE_CREATE、 FILE_OPEN 等操作。</p>\n<p>在这段程序代码中并无 FltCancelFileOpen 操作， 是因为我们在预操作回调函数内就已经过滤该行为且设定返回值的动作了， 并不需要在这里重复操作。</p>\n<p>下面<strong>这个后处理回调函数对程序的功能本身并没有意义</strong>， 仅仅作为后处理回调写法的说明展示。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>FLT_POSTOP_CALLBACK_STATUS</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">NPPostCreate</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    __inout PFLT_CALLBACK_DATA Data<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    __in PCFLT_RELATED_OBJECTS FltObjects<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    __in_opt PVOID CompletionContext<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    __in FLT_POST_OPERATION_FLAGS Flags</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    FLT_POSTOP_CALLBACK_STATUS returnStatus <span class=\"token operator\">=</span> FLT_POSTOP_FINISHED_PROCESSING<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    PFLT_FILE_NAME_INFORMATION nameInfo<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    NTSTATUS status<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token function\">UNREFERENCED_PARAMETER</span><span class=\"token punctuation\">(</span>CompletionContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token function\">UNREFERENCED_PARAMETER</span><span class=\"token punctuation\">(</span>Flags<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">//  If this create was failing anyway, don't bother scanning now.</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">NT_SUCCESS</span><span class=\"token punctuation\">(</span>Data<span class=\"token operator\">-></span>IoStatus<span class=\"token punctuation\">.</span>Status<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">(</span>STATUS_REPARSE <span class=\"token operator\">==</span> Data<span class=\"token operator\">-></span>IoStatus<span class=\"token punctuation\">.</span>Status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">return</span> FLT_POSTOP_FINISHED_PROCESSING<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token comment\">//  Check if we are interested in this file.</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    status <span class=\"token operator\">=</span> <span class=\"token function\">FltGetFileNameInformation</span><span class=\"token punctuation\">(</span>Data<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        FLT_FILE_NAME_NORMALIZED <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        FLT_FILE_NAME_QUERY_DEFAULT<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token operator\">&amp;</span>nameInfo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">NT_SUCCESS</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token keyword\">return</span> FLT_POSTOP_FINISHED_PROCESSING<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token keyword\">return</span> returnStatus<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>书上给的这个函数实际上什么也没做。返回  <code>FLT_POSTOP_FINISHED_PROCESSING</code> ， 代表 Minifilter 已经完成对 I/O 的所有处理， 并返回控制给过滤管理器。</p>\n<h2 id=\"其他回调函数\"><a class=\"anchor\" href=\"#其他回调函数\">#</a> 其他回调函数</h2>\n<p>除了前面介绍的回调函数， 还有其他的回调函数需要实现。 但是在大多数情况下， 这些函数的实现非常简单， 以至于用户只需要简单地拷贝例子中的代码就可以实现它们。 根据笔者的开发经验， 极少会利用到这些回调函数提供的功能。 下面对这些回调函数集中做个简单的介绍。 请注意这些函数都是可选的， 编程者可以不实现它们， 在微过滤器注册结构中将它们设置为 NULL。</p>\n<h3 id=\"instatancesetupcallback\"><a class=\"anchor\" href=\"#instatancesetupcallback\">#</a> InstatanceSetupCallback</h3>\n<p><code>InstatanceSetupCallback</code>  这个回调函数存在的目的， 在于让本驱动的开发者来决定哪个<br />\n卷需要绑定， 哪个卷不需要绑定。  <code>InstatanceSetupCallback</code>  在下列情况下会被调用。</p>\n<ol>\n<li>当一个微过滤器加载时， 每个存在的卷都会导致这个调用。</li>\n<li>当一个新的卷被挂载时。</li>\n<li>当 FltAttachVolume 被调用（内核模式） 时。</li>\n<li>当 FltAttachVolumeAtAltitude 被调用（内核模式） 时。</li>\n<li>当 FilterAttach 被调用（用户模式） 时。</li>\n<li>当 FilterAttachAtAltitude 被调用（用户模式） 时。</li>\n</ol>\n<p>在这个过程中， 微过滤器决定是否在这个卷上生成实例。 这个回调函数的原型如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token function\">NTSTATUS</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">(</span>FLTAPI <span class=\"token operator\">*</span>PFLT_INSTANCE_SETUP_CALLBACK<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    _In_ PCFLT_RELATED_OBJECTS FltObjects<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    _In_ FLT_INSTANCE_SETUP_FLAGS Flags<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    _In_ DEVICE_TYPE VolumeDeviceType<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    _In_ FLT_FILESYSTEM_TYPE VolumeFilesystemType</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong>参数详解：</strong></p>\n<p><code>FltObjects</code> : 结构含有指向微过滤器、 卷和实例的指针。<em>这个实例是指将要在 InstanceSetupCallback 函数中生成的实例。</em></p>\n<p><code>Flags</code> : 标记是什么操作导致激发了  <code>InstanceSetupCallback</code> ：</p>\n<p><code>FLTFL_INSTANCE_SETUP_AUTOMATIC_ATTACHMENT</code> ： 这是一个微过滤器注册时， 一个自动的绑定通知。 过滤管理器为每个刚加载的微过滤器枚举所有的卷。 如果使用者明确地指定一个实例绑定到某一个卷， 则不会设置这个标记。<br />\n <code>FLTFL_INSTANCE_SETUP_MANUAL_ATTACHMENT</code> ： 通过调用 FilterAttach（用户态） 、 FilterAttachVolumeAtAltitude（用户态） 或者 FltAttachVolume（内核态） 所发起的一个手工请求。<br />\n <code>FLTFL_INSTANCE_SETUP_NEWLY_MOUNTED_VOLUME</code> ： 文件系统刚刚挂载了一个卷， 所以呼叫 InstanceSetupCallback 来通知微过滤器， 如果它愿意则可以生成实例来绑定这个卷。</p>\n<p>在  <code>InstanceSetupCallback</code>  中， 微过滤器同时得到了卷设备类型（ <code>VolumeDeviceType</code> ）和卷文件系统类型（ <code>VolumeFilesystemType</code> ） ， 用来判断这个卷是否是过滤器所感兴趣的。</p>\n<p>同时， 微过滤器可以调用  <code>FltGetVolumeProperties</code>  来获取卷属性。通过  <code>FltSetInstanceContext</code>  在实例上设置上下文， 当然这是在需要绑定时。它甚至可以在卷上打开或者关闭文件。</p>\n<p><strong>如果这个回调函数返回了成功， 那么这个实例将绑定到卷上； 如果返回了一个警告或者错误， 那么不会绑定。 如果微过滤器没有指定这个回调函数回调， 那么系统将认为用户总是返回  <code>STATUS_SUCCESS</code> ， 实例总是会生成并绑定</strong>。</p>\n<h3 id=\"instancequeryteardowncallback\"><a class=\"anchor\" href=\"#instancequeryteardowncallback\">#</a> InstanceQueryTeardownCallback</h3>\n<p>InstanceQueryTeardownCallback 是控制实例销毁函数， 这个回调函数只会在一个手工<br />\n解除绑定请求时被调用。 手工解除绑定意味着两种可能：<br />\n内核模式调试 FltDetachVolume；<br />\n用户模式调试 FilterDetach。<br />\n如果过滤器没有提供这个回调函数， 那么手工解除绑定是不被允许的， 但是卷的卸载<br />\n和过滤器的卸载仍是可以运作的。 如果这个调用成功， 那么第 9 个域<br />\n InstanceTeardownStartCallback 和第 10 个域 InstanceTeardownCompleteCallback 将会被调用；<br />\n当这些函数返回错误时， 手工解除绑定失败， 推荐的错误代码有<br />\n STATUS_FLT_DO_NOT_DETACH， 不过返回其他错误代码也是可以的。<br />\n（3） InstanceTeardownStartCallback<br />\nInstanceTeardownStartCallback 是实例解除绑定回调函数。 调用则代表已经决定要解除<br />\n绑定， 这个函数应该做以下事情。<br />\n①重设所有未决的 I/O 操作（包括预操作和后操作） 。<br />\n②保证不会有新的 I/O 操作进入未决。<br />\n③对刚刚到达的操作开始最少的工作。<br />\n同时进行以下操作：<br />\n①关闭所有打开的文件。<br />\n②取消所有本过滤器发起的 I/O 请求。<br />\n③停止将新的工作任务排队。<br />\n然后， 微过滤器把控制权交还过滤管理器来继续它的销毁过程。 当所有与这个实例相关的操作都排除干净或者完成时， InstanceTeardownComplete 会被调用。 过滤管理器保证<br />\n此时此实例存在的所有操作回调都完成了， 这时微过滤器必须关闭这个实例打开的所有文<br />\n件。 这个函数原型和 InstanceTeardownCompleteCallback 将一并介绍。</p>\n<h2 id=\"minifilter与应用程序通信\"><a class=\"anchor\" href=\"#minifilter与应用程序通信\">#</a> Minifilter 与应用程序通信</h2>\n<p>考虑到内核态和用户态之间的互动， 以前的做法是使用用户态的 API 函数  <code>DeviceIoControl</code>  结合在内核模块中的处理控制请求来实现双方数据的传递。 但是在 Minifilter 中则不同， Minifilter 有内建支持的 API 提供给开发者使用， 这里就先针对这些 API 来做介绍。</p>\n<p>该方法叫作通信端口（Communication Port） ， 顾名思义， 就是<strong>先定义一个通道名称， 通过双边已经定义好的通信端口来做数据上的沟通</strong>； 使用上很像 socket 或管道（pipe） 之类的通信程序设计。</p>\n<h3 id=\"建立通信端口\"><a class=\"anchor\" href=\"#建立通信端口\">#</a> 建立通信端口</h3>\n<p>下面的代码演示了如何建立一个通信端口。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>PSECURITY_DESCRIPTOR sd<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>OBJECT_ATTRIBUTES oa<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>status <span class=\"token operator\">=</span> <span class=\"token function\">FltBuildDefaultSecurityDescriptor</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>sd<span class=\"token punctuation\">,</span> FLT_PORT_ALL_ACCESS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">NT_SUCCESS</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">goto</span> final<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>status <span class=\"token operator\">=</span> <span class=\"token function\">FltBuildDefaultSecurityDescriptor</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>sd<span class=\"token punctuation\">,</span> FLT_PORT_ALL_ACCESS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">NT_SUCCESS</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">goto</span> final<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token function\">RtlInitUnicodeString</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>uniString<span class=\"token punctuation\">,</span> MINISPY_PORT_NAME<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token function\">InitializeObjectAttributes</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>oa<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token operator\">&amp;</span>uniString<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    OBJ_KERNEL_HANDLE <span class=\"token operator\">|</span> OBJ_CASE_INSENSITIVE<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    sd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>status <span class=\"token operator\">=</span> <span class=\"token function\">FltCreateCommunicationPort</span><span class=\"token punctuation\">(</span>gFilterHandle<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token operator\">&amp;</span>gServerPort<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token operator\">&amp;</span>oa<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    NPMiniConnect<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    NPMiniDisconnect<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    NPMiniMessage<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong>代码详解如下：</strong></p>\n<p><code>FltBuildDefaultSecurityDescriptor</code>  以  <code>FLT_PORT_ALL_ACCESS</code>  权限来产生一个安全性的描述符，  <code>MINISPY_PORT_NAME</code>  是刚刚所讲的通信端口定义的名称， 通过  <code>InitializeObjectAttributes</code>  来初始化对象属性（OBJECT_ATTRIBUTES） ， 接下来便要注册这个通信端口以及所需要使用到的函数。</p>\n<p>这里必须提供三个回调函数， 类似于以前我们为了实现通信所写的控制请求的分发函数。<br />\n这三个回调函数分别是  <code>NPMiniConnect</code> 、  <code>NPMiniDisconnect</code> 、  <code>NPMiniMessage</code> 。</p>\n<p><code>NPMiniConnect</code>  是用户态与内核态建立连接时内核会调用到的函数。<br />\n <code>NPMiniDisconnect</code>  是用户态与内核态连接结束时内核会调用到的函数。<br />\n <code>NPMiniMessage</code>  是用户态与内核态传送数据时内核会调用到的函数。</p>\n<p><em>用户态不需要再使用  <code>CreateFile</code>  和  <code>DeviceIoControl</code>  系列的 API， Minifilter 有专门的 API 提供给用户态程序使用</em>。</p>\n<p>这里用到的相关的 API 主要有两个：  <code>FilterConnectCommunicationPort</code>  和  <code>FilterSendMessage</code> ， 通过  <code>FilterConnectCommunicationPort</code>  可以调用到我们提供的  <code>NPMiniConnec</code> t 函数， 通过  <code>FilterSendMessage</code>  可以调用到相对应的  <code>NPMiniMessage</code> 。一对一关系很容易理解。</p>\n<p>至于参数则都是  <code>PVOID</code>  的指针， 开发时两边程序<strong>通过自定义的数据结构</strong>， 传入指针即可将数据传入或取出。</p>\n<p>接下来学习一下  <code>FilterConnectCommunicationPort</code>  和  <code>FilterSendMessage</code>  函数</p>\n<h4 id=\"filterconnectcommunicationport和filtersendmessage函数\"><a class=\"anchor\" href=\"#filterconnectcommunicationport和filtersendmessage函数\">#</a> FilterConnectCommunicationPort 和 FilterSendMessage 函数</h4>\n<p>WDK 定义的  <code>FilterConnectCommunicationPort</code>  原型如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>HRESULT <span class=\"token function\">FilterConnectCommunicationPort</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token punctuation\">[</span>in<span class=\"token punctuation\">]</span>           LPCWSTR               lpPortName<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token punctuation\">[</span>in<span class=\"token punctuation\">]</span>           DWORD                 dwOptions<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">[</span>in<span class=\"token punctuation\">,</span> optional<span class=\"token punctuation\">]</span> LPCVOID               lpContext<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">[</span>in<span class=\"token punctuation\">]</span>           WORD                  wSizeOfContext<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token punctuation\">[</span>in<span class=\"token punctuation\">,</span> optional<span class=\"token punctuation\">]</span> LPSECURITY_ATTRIBUTES lpSecurityAttributes<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">[</span>out<span class=\"token punctuation\">]</span>          HANDLE                <span class=\"token operator\">*</span>hPort</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>函数在头文件  <code>fltuser.h</code>  中。</p>\n<p><strong>参数</strong></p>\n<p><code>[in] lpPortName</code></p>\n<p>指向以 NULL 结尾的宽字符串的指针，该字符串包含通信服务器端口的完全限定名称（例如，L&quot;\\MyFilterPort&quot;）。</p>\n<p><code>[in] dwOptions</code></p>\n<p>通信端口的连接选项。在 Windows 8.1 之前，此值设置为 0。</p>\n<table>\n<thead>\n<tr>\n<th>值</th>\n<th>意义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>FLT_PORT_FLAG_SYNC_HANDLE</strong></td>\n<td><em>hPort</em> 中 返回的句柄用于同步 I/O。此标志从 Windows 8.1 开始可用。</td>\n</tr>\n</tbody>\n</table>\n<p><code>[in, optional] lpContext</code></p>\n<p>指向调用者提供的上下文信息的指针，该上下文信息将传递给内核模式微过滤器的连接通知例程。（请参阅 FltCreateCommunicationPort 参考页面中的<em> ConnectNotifyCallback</em> 参数。）此参数是可选的，可以为 NULL。</p>\n<p><code>[in] wSizeOfContext</code></p>\n<p><em>lpContext</em> 参数指向的结构的大小（以字节为单位） 。如果<em> lpContext</em> 的值为非 <strong>NULL</strong> ，则此参数必须为非零。如果<em> lpContext</em> 为 <strong>NULL</strong> ，则此参数必须为零。</p>\n<p><code>[in, optional] lpSecurityAttributes</code></p>\n<p>指向 SECURITY_ATTRIBUTES 结构的指针，该结构确定返回的句柄是否可以被子进程继承。有关 SECURITY_ATTRIBUTES 结构的详细信息，请参阅 Microsoft Windows SDK 文档。此参数是可选的，可以是 <strong>NULL</strong> 。如果此参数为 <strong>NULL</strong> ，则无法继承句柄。</p>\n<p><code>[out] hPort</code></p>\n<p>指向调用者分配的变量的指针，如果对<strong> FilterConnectCommunicationPort</strong> 的调用成功，该变量将接收新创建的连接端口的句柄；否则，它会收到 INVALID_HANDLE_VALUE。</p>\n<p><strong>返回值</strong><br />\n如果成功， FilterConnectCommunicationPort 返回 S_OK。否则，它返回一个错误值。</p>\n<hr />\n<hr />\n<p>接下来是  <code>FilterSendMessage</code>  函数，其功能是向微过滤器发送消息。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>HRESULT <span class=\"token function\">FilterSendMessage</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token punctuation\">[</span>in<span class=\"token punctuation\">]</span>           HANDLE  hPort<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token punctuation\">[</span>in<span class=\"token punctuation\">,</span> optional<span class=\"token punctuation\">]</span> LPVOID  lpInBuffer<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">[</span>in<span class=\"token punctuation\">]</span>           DWORD   dwInBufferSize<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">[</span>out<span class=\"token punctuation\">]</span>          LPVOID  lpOutBuffer<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token punctuation\">[</span>in<span class=\"token punctuation\">]</span>           DWORD   dwOutBufferSize<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">[</span>out<span class=\"token punctuation\">]</span>          LPDWORD lpBytesReturned</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>各参数说明如下。<br />\n <code>hPort</code>  ： 连接端口名称， 宽字符字符串。<br />\n <code>lpInBuffer</code>  ： 输入缓冲区。 将定义好的结构用指针传入。<br />\n <code>dwInBufferSize</code>  ： 输入缓冲区大小。<br />\n <code>lpOutBuffer</code>  ： 输出缓冲区。 既可传入数据也可取得返回的数据。<br />\n <code>dwOutBufferSize</code>  ： 输出缓冲区大小。<br />\n <code>lpBytesReturned</code>  ： FilterSendMessage 调用成功则会返回一个标识 lpOutBuffer 大小的<br />\n值。</p>\n<p><code>[in] hPort</code></p>\n<p>先前调用<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vZW4tdXMvd2luZG93cy9kZXNrdG9wL2FwaS9mbHR1c2VyL25mLWZsdHVzZXItZmlsdGVyY29ubmVjdGNvbW11bmljYXRpb25wb3J0\"> FilterConnectCommunicationPort</span> 返回的通信端口句柄。此参数是必需的，不能为 <strong>NULL</strong> 。</p>\n<p><code>[in, optional] lpInBuffer</code></p>\n<p>指向调用者分配的缓冲区的指针，该缓冲区包含要发送到微过滤器的消息。消息格式是调用者定义的。此参数是必需的，不能为 <strong>NULL</strong> 。</p>\n<p><code>[in] dwInBufferSize</code></p>\n<p><em>lpInBuffer</em> 指向的缓冲区的大小，以字节为单位。</p>\n<p><code>[out] lpOutBuffer</code></p>\n<p>指向调用者分配的缓冲区的指针，该缓冲区接收来自微过滤器的回复（如果有的话）。</p>\n<p><code>[in] dwOutBufferSize</code></p>\n<p><em>lpOutBuffer</em> 指向的缓冲区的大小，以字节为单位。如果<em> lpOutBuffer</em> 为<strong> NULL</strong> ，则忽略此值。</p>\n<p><code>[out] lpBytesReturned</code></p>\n<p>指向调用者分配的变量的指针，如果对 FilterSendMessage 的调用成功，则该变量接收<em> lpOutBuffer</em> 指向的缓冲区中返回的字节数。此参数是必需的，不能为 NULL。</p>\n<p><strong>返回值</strong></p>\n<p><strong>如果成功， FilterSendMessage</strong> 返回 S_OK。否则，它返回一个错误值。</p>\n<h3 id=\"在用户态通过dll使用通信端口的范例\"><a class=\"anchor\" href=\"#在用户态通过dll使用通信端口的范例\">#</a> 在用户态通过 DLL 使用通信端口的范例</h3>\n<p>为什么编写一个 dll：<em>在用户态编写应用程序时， 开发者可以编写一个简单的动态链接库（DLL） 来提供与内核中的 Minifilter 内核驱动程序通信的功能， 在应用程序中就可以调用这个 DLL 来与内核通信了</em>。</p>\n<p>在编写这个 DLL 时， 必须要包含 WDK 中的头文件  <code>fltUser.h</code> ， 此外还必须连接 Minifilter 提供给用户态程序使用的静态库  <code>fltLib.lib</code>  和  <code>fltMgr.lib</code> 。</p>\n<p>编程中要注意的第一件事是： <strong>在处理  <code>DLL_PROCESS_ATTACH</code>  时要调用  <code>FilterConnectCommunicationPort</code> ， 便能完成与 Minifilter 沟通的通信端口的初始化， 然后可以通过  <code>FilterSendMessage</code>  传送数据， 等到程序关闭后关闭并释放这个通信端口</strong>。</p>\n<p>以下是本章的例子中  <code>NPdll.dll</code>  的程序代码示例。</p>\n<p>这是头文件。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 首先要引入头文件和要连接的静态库。</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"windows.h\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 一定要包含 Minifilter 的头文件</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;fltUser.h></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\"><span class=\"token function\">comment</span><span class=\"token punctuation\">(</span>lib<span class=\"token punctuation\">,</span> </span><span class=\"token string\">\"user32.lib\"</span><span class=\"token expression\"><span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\"><span class=\"token function\">comment</span><span class=\"token punctuation\">(</span>lib<span class=\"token punctuation\">,</span> </span><span class=\"token string\">\"kernel32.lib\"</span><span class=\"token expression\"><span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 注意必须连接 Minifilter 提供的静态库</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\"><span class=\"token function\">comment</span><span class=\"token punctuation\">(</span>lib<span class=\"token punctuation\">,</span> </span><span class=\"token string\">\"fltLib.lib\"</span><span class=\"token expression\"><span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\"><span class=\"token function\">comment</span><span class=\"token punctuation\">(</span>lib<span class=\"token punctuation\">,</span> </span><span class=\"token string\">\"fltMgr.lib\"</span><span class=\"token expression\"><span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\"><span class=\"token function\">comment</span><span class=\"token punctuation\">(</span>lib<span class=\"token punctuation\">,</span> </span><span class=\"token string\">\"ntoskrnl.lib\"</span><span class=\"token expression\"><span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\"><span class=\"token function\">comment</span><span class=\"token punctuation\">(</span>lib<span class=\"token punctuation\">,</span> </span><span class=\"token string\">\"hal.lib\"</span><span class=\"token expression\"><span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">// 在全局变量 g_hPort 中保存通信端口的句柄；</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">extern</span> HANDLE g_hPort<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">// 定义微过滤器的名字和通信端口的名字。 注意： 必须是宽字符的。</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">NPMINI_NAME</span>            <span class=\"token expression\">L</span><span class=\"token string\">\"NPminifilter\"</span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">NPMINI_PORT_NAME</span>       <span class=\"token expression\">L</span><span class=\"token string\">\"\\\\NPMiniPort\"</span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">// DLL 的编程规范， 声明导出函数</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token function\">__declspec</span><span class=\"token punctuation\">(</span>dllexport<span class=\"token punctuation\">)</span>\t<span class=\"token keyword\">int</span> <span class=\"token function\">InitialCommunicationPort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token function\">__declspec</span><span class=\"token punctuation\">(</span>dllexport<span class=\"token punctuation\">)</span>   <span class=\"token keyword\">int</span> <span class=\"token function\">NPSendMessage</span><span class=\"token punctuation\">(</span>PVOID InputBuffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">// 自定义的数据结构</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">_NPMINI_COMMAND</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    ENUM_PASS <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    ENUM_BLOCK</pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span> NPMINI_COMMAND<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_COMMAND_MESSAGE</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token comment\">// 储存列举 NPMINI_COMMAND 命令的结构</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    NPMINI_COMMAND \tCommand<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span> COMMAND_MESSAGE<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>PCOMMAND_MESSAGE<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>接下来开始编写 DLL 程序的进入点：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"NPdll.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>HANDLE g_hPort <span class=\"token operator\">=</span> INVALID_HANDLE_VALUE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">_MANAGED</span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\"><span class=\"token function\">managed</span><span class=\"token punctuation\">(</span>push<span class=\"token punctuation\">,</span> off<span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>BOOL APIENTRY <span class=\"token function\">DllMain</span><span class=\"token punctuation\">(</span> HMODULE hModule<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                       DWORD  ul_reason_for_call<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                       LPVOID lpReserved</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t\t\t\t <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>ul_reason_for_call<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token keyword\">case</span> DLL_PROCESS_ATTACH<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t<span class=\"token function\">InitialCommunicationPort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token keyword\">case</span> DLL_THREAD_ATTACH<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token keyword\">case</span> DLL_THREAD_DETACH<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token keyword\">case</span> DLL_PROCESS_DETACH<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">return</span> TRUE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">_MANAGED</span></span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\"><span class=\"token function\">managed</span><span class=\"token punctuation\">(</span>pop<span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">InitialCommunicationPort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    DWORD hResult <span class=\"token operator\">=</span> <span class=\"token function\">FilterConnectCommunicationPort</span><span class=\"token punctuation\">(</span> </pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\tNPMINI_PORT_NAME<span class=\"token punctuation\">,</span>   <span class=\"token comment\">// 通信端口名称</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\t<span class=\"token number\">0</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\t<span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\t<span class=\"token number\">0</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\t<span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\t<span class=\"token operator\">&amp;</span>g_hPort <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 通信端口句柄</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hResult <span class=\"token operator\">!=</span> S_OK<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> hResult<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 当连接失败时返回错误信息</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token comment\">// 传送数据函数</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">NPSendMessage</span><span class=\"token punctuation\">(</span>PVOID InputBuffer<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\tDWORD bytesReturned <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 返回的结构大小</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\tDWORD hResult <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>          <span class=\"token comment\">// 返回值</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\tPCOMMAND_MESSAGE commandMessage <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PCOMMAND_MESSAGE<span class=\"token punctuation\">)</span> InputBuffer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    hResult <span class=\"token operator\">=</span> <span class=\"token function\">FilterSendMessage</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t\tg_hPort<span class=\"token punctuation\">,</span>                    <span class=\"token comment\">// 通信端口句柄</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        commandMessage<span class=\"token punctuation\">,</span>             <span class=\"token comment\">// 传入结构</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>COMMAND_MESSAGE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>    <span class=\"token comment\">// 传入结构长度</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span>                       <span class=\"token comment\">// 传入或返回结构</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span>                       <span class=\"token comment\">// 传入结构</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token operator\">&amp;</span>bytesReturned <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hResult <span class=\"token operator\">!=</span> S_OK<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> hResult<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>当载入 DLL 时（DLL_PROCESS_ATTACH） 会调用  <code>InitialCommunicationPort</code> ， 这个调用主要是为了初始化通信端口， 以便后面的函数可以调用这个接口的 API。</p>\n<p>当调用到  <code>NPSendMessage</code>  时，传入的参数也需要是一个  <code>COMMAND_MESSAGE</code>  结构的指针， 当传送成功时返回  <code>S_OK</code> ， 失败时可根据返回值  <code>hResult</code>  得知错误代码。</p>\n<h2 id=\"minifilter的安装与加载\"><a class=\"anchor\" href=\"#minifilter的安装与加载\">#</a> Minifilter 的安装与加载</h2>\n<p>安装驱动的方法有许多种， 可以通过函数注册或用 INF 文件向系统注册驱动。</p>\n<p>接下来学习有关安装 Minifilter 驱动的方法， 在安装驱动时， 使用 INF 的方式来进行安装。</p>\n<h3 id=\"安装minifilter的inf文件\"><a class=\"anchor\" href=\"#安装minifilter的inf文件\">#</a> 安装 Minifilter 的 INF 文件</h3>\n<p><code>inf</code>  文件是一个暗转信息的配置文件，指明了安装的  <code>.sys</code>  文件路径，、安装到哪个位置、以及写到注册表中的何种位置。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>Version<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Signature   <span class=\"token operator\">=</span> <span class=\"token string\">\"$Windows NT$\"</span>   </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Class       <span class=\"token operator\">=</span> <span class=\"token string\">\"ActivityMonitor\"</span>  <span class=\"token punctuation\">;</span>指明了驱动的分组<span class=\"token punctuation\">,</span>必须指定<span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>ClassGuid   <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>b86dff51<span class=\"token operator\">-</span>a31e<span class=\"token operator\">-</span><span class=\"token number\">4</span>bac<span class=\"token operator\">-</span>b3cf<span class=\"token operator\">-</span>e8cfe75c9fc2<span class=\"token punctuation\">&#125;</span>  <span class=\"token punctuation\">;</span>GUID 每个分组都有固定的GUID</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Provider    <span class=\"token operator\">=</span> <span class=\"token operator\">%</span>Msft<span class=\"token operator\">%</span> <span class=\"token punctuation\">;</span>变量值 从STRING节中可以看到驱动提供者的名称 </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>DriverVer   <span class=\"token operator\">=</span> <span class=\"token number\">06</span><span class=\"token operator\">/</span><span class=\"token number\">16</span><span class=\"token operator\">/</span><span class=\"token number\">2007</span><span class=\"token punctuation\">,</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">.</span><span class=\"token number\">0.1</span> <span class=\"token punctuation\">;</span>版本号</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>CatalogFile <span class=\"token operator\">=</span> passthrough<span class=\"token punctuation\">.</span>cat    <span class=\"token punctuation\">;</span>inf对应的cat 文件 可以不需要</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">[</span>DestinationDirs<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>DefaultDestDir          <span class=\"token operator\">=</span> <span class=\"token number\">12</span>    <span class=\"token punctuation\">;</span>告诉我们驱动拷贝到哪里 <span class=\"token number\">12</span>代表拷贝到<span class=\"token operator\">%</span>windir<span class=\"token operator\">%</span>\\system32\\drivers</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>MiniFilter<span class=\"token punctuation\">.</span>DriverFiles  <span class=\"token operator\">=</span> <span class=\"token number\">12</span>   </pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span> Default install sections</pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">[</span>DefaultInstall<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>OptionDesc          <span class=\"token operator\">=</span> <span class=\"token operator\">%</span>ServiceDescription<span class=\"token operator\">%</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>CopyFiles           <span class=\"token operator\">=</span> MiniFilter<span class=\"token punctuation\">.</span>DriverFiles</pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">[</span>DefaultInstall<span class=\"token punctuation\">.</span>Services<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>AddService          <span class=\"token operator\">=</span> <span class=\"token operator\">%</span>ServiceName<span class=\"token operator\">%</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">,</span>MiniFilter<span class=\"token punctuation\">.</span>Service</pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span> Default uninstall sections</pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">[</span>DefaultUninstall<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>DelFiles   <span class=\"token operator\">=</span> MiniFilter<span class=\"token punctuation\">.</span>DriverFiles</pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">[</span>DefaultUninstall<span class=\"token punctuation\">.</span>Services<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>DelService <span class=\"token operator\">=</span> <span class=\"token operator\">%</span>ServiceName<span class=\"token operator\">%</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x200</span>      <span class=\"token punctuation\">;</span>标识服务停止后才删除</pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">;</span> Services Section</pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">[</span>MiniFilter<span class=\"token punctuation\">.</span>Service<span class=\"token punctuation\">]</span>                 <span class=\"token punctuation\">;</span>服务的一些信息</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>DisplayName      <span class=\"token operator\">=</span> <span class=\"token operator\">%</span>ServiceName<span class=\"token operator\">%</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>Description      <span class=\"token operator\">=</span> <span class=\"token operator\">%</span>ServiceDescription<span class=\"token operator\">%</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>ServiceBinary    <span class=\"token operator\">=</span> <span class=\"token operator\">%</span><span class=\"token number\">12</span><span class=\"token operator\">%</span>\\<span class=\"token operator\">%</span>DriverName<span class=\"token operator\">%</span><span class=\"token punctuation\">.</span>sys        <span class=\"token punctuation\">;</span><span class=\"token operator\">%</span>windir<span class=\"token operator\">%</span>\\system32\\drivers\\</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>Dependencies     <span class=\"token operator\">=</span> <span class=\"token string\">\"FltMgr\"</span>                     <span class=\"token punctuation\">;</span>服务的依赖</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>ServiceType      <span class=\"token operator\">=</span> <span class=\"token number\">2</span>                            <span class=\"token punctuation\">;</span>SERVICE_FILE_SYSTEM_DRIVER</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>StartType        <span class=\"token operator\">=</span> <span class=\"token number\">3</span>                            <span class=\"token punctuation\">;</span>SERVICE_DEMAND_START</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>ErrorControl     <span class=\"token operator\">=</span> <span class=\"token number\">1</span>                            <span class=\"token punctuation\">;</span>SERVICE_ERROR_NORMAL</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>LoadOrderGroup   <span class=\"token operator\">=</span> <span class=\"token string\">\"FSFilter Activity Monitor\"</span>  <span class=\"token punctuation\">;</span>文件过滤分组</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>AddReg           <span class=\"token operator\">=</span> MiniFilter<span class=\"token punctuation\">.</span>AddRegistry       <span class=\"token punctuation\">;</span>文件过滤注册表需要添加的高度值等信息</pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token punctuation\">;</span> Registry Modifications</pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token punctuation\">[</span>MiniFilter<span class=\"token punctuation\">.</span>AddRegistry<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>HKR<span class=\"token punctuation\">,</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"DebugFlags\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x00010001</span> <span class=\"token punctuation\">,</span><span class=\"token number\">0x0</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>HKR<span class=\"token punctuation\">,</span><span class=\"token string\">\"Instances\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"DefaultInstance\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x00000000</span><span class=\"token punctuation\">,</span><span class=\"token operator\">%</span>DefaultInstance<span class=\"token operator\">%</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>HKR<span class=\"token punctuation\">,</span><span class=\"token string\">\"Instances\\\"%Instance1.Name%,\"</span>Altitude\"<span class=\"token punctuation\">,</span><span class=\"token number\">0x00000000</span><span class=\"token punctuation\">,</span><span class=\"token operator\">%</span>Instance1<span class=\"token punctuation\">.</span>Altitude<span class=\"token operator\">%</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>HKR<span class=\"token punctuation\">,</span><span class=\"token string\">\"Instances\\\"%Instance1.Name%,\"</span>Flags\"<span class=\"token punctuation\">,</span><span class=\"token number\">0x00010001</span><span class=\"token punctuation\">,</span><span class=\"token operator\">%</span>Instance1<span class=\"token punctuation\">.</span>Flags<span class=\"token operator\">%</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token punctuation\">;</span> Copy Files</pre></td></tr><tr><td data-num=\"62\"></td><td><pre><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre></pre></td></tr><tr><td data-num=\"64\"></td><td><pre><span class=\"token punctuation\">[</span>MiniFilter<span class=\"token punctuation\">.</span>DriverFiles<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre><span class=\"token operator\">%</span>DriverName<span class=\"token operator\">%</span><span class=\"token punctuation\">.</span>sys</pre></td></tr><tr><td data-num=\"66\"></td><td><pre></pre></td></tr><tr><td data-num=\"67\"></td><td><pre><span class=\"token punctuation\">[</span>SourceDisksFiles<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>passthrough<span class=\"token punctuation\">.</span>sys <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre></pre></td></tr><tr><td data-num=\"70\"></td><td><pre><span class=\"token punctuation\">[</span>SourceDisksNames<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre><span class=\"token number\">1</span> <span class=\"token operator\">=</span> <span class=\"token operator\">%</span>DiskId1<span class=\"token operator\">%</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre></pre></td></tr><tr><td data-num=\"73\"></td><td><pre><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span> String Section</pre></td></tr><tr><td data-num=\"75\"></td><td><pre><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre></pre></td></tr><tr><td data-num=\"77\"></td><td><pre><span class=\"token punctuation\">[</span>Strings<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>Msft                    <span class=\"token operator\">=</span> <span class=\"token string\">\"Microsoft Corporation\"</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>ServiceDescription      <span class=\"token operator\">=</span> <span class=\"token string\">\"NPminifilter Mini-Filter Driver\"</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>ServiceName             <span class=\"token operator\">=</span> <span class=\"token string\">\"NPminifilter\"</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>DriverName              <span class=\"token operator\">=</span> <span class=\"token string\">\"NPminifilter\"</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>DiskId1                 <span class=\"token operator\">=</span> <span class=\"token string\">\"NPminifilter Device Installation Disk\"</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre></pre></td></tr><tr><td data-num=\"84\"></td><td><pre><span class=\"token punctuation\">;</span>Instances specific information<span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>DefaultInstance         <span class=\"token operator\">=</span> <span class=\"token string\">\"NPminifilter Instance\"</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>Instance1<span class=\"token punctuation\">.</span>Name          <span class=\"token operator\">=</span> <span class=\"token string\">\"NPminifilter Instance\"</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>Instance1<span class=\"token punctuation\">.</span>Altitude      <span class=\"token operator\">=</span> <span class=\"token string\">\"370030\"</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>Instance1<span class=\"token punctuation\">.</span>Flags         <span class=\"token operator\">=</span> <span class=\"token number\">0x0</span>              <span class=\"token punctuation\">;</span> Allow all attachments</pre></td></tr></table></figure><p>接下来先简单了解一下</p>\n<p><code>StartType</code>  被称为启动类型。  <code>StartType</code>  为  <code>3</code>  即  <code>DEMAND_START</code> ，<em>表示当有需求加载时才启动此驱动的功能</em>；<br />\n <code>StartType</code>  为  <code>0</code>  即  <code>BOOT_START</code> ， 表示计算机开机启动时就自动加载此驱动的功能。</p>\n<p>根据上面的 INF 文件可以看出， 此驱动文件是依附于  <code>FltMgr</code>  服务的。</p>\n<p><code>Altitude</code>  是微过滤器的层级码。 层级码决定过滤层次的上下。</p>\n<p><em>根据微软的文档， 微过滤器的层级码范围是多个以数字标识的范围区段（例如： 20000~429999） ， 正式的商业软件的层级码是需要向微软申请注册的</em>。 例如， 许多防毒软件都要向微软申请一个特定的层级码， 不过我们在测试时可以先给出这个范围内的一个值， 这里先定义为  <code>370030</code> ， 也就是本章示例的微过滤器在过滤层中的位置。这个可是去微软官方 &lt; <span class=\"exturl\" data-url=\"aHR0cHM6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvd2luZG93cy9oYXJkd2FyZS9kcml2ZXJzL2lmcy9sb2FkLW9yZGVyLWdyb3Vwcy1hbmQtYWx0aXR1ZGVzLWZvci1taW5pZmlsdGVyLWRyaXZlcnM=\">https://msdn.microsoft.com/en-us/windows/hardware/drivers/ifs/load-order-groups-and-altitudes-for-minifilter-drivers</span>&gt; 查找。</p>\n<p>编写这个 INF 文件后， 测试时只要跟  <code>Minifilter.sys</code>  放在同一个目录下， 通过鼠标右键选择 INF 菜单 “安装”， 便可以成功将 Minifilter 安装到系统目录下， 安装完毕也可以去  <code>%windir%\\system32\\drivers</code>  下查看这个文件是否存在。 另外， 也可以使用  <code>OSR driverloader</code>  来检查已经安装的 Minifilter 在系统上的  <code>Load Group</code>  顺序</p>\n<p>修改上面的  <code>[Strings]</code>  节就可以成为不同的驱动程序的 INF 文件。 比如本书的例子， 服务名为  <code>NPminifilter</code> ， 驱动名为  <code>NPMinifilter.sys</code> ， 那么把这一节改为：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>[Strings]</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Msft                    &#x3D; &quot;Microsoft Corporation&quot;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>ServiceDescription      &#x3D; &quot;NPminifilter Mini-Filter Driver&quot;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>ServiceName             &#x3D; &quot;NPminifilter&quot;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>DriverName              &#x3D; &quot;NPminifilter&quot;</pre></td></tr></table></figure><p>也就是说修改此节中的这些部分就可以了。</p>\n<h1 id=\"扩展\"><a class=\"anchor\" href=\"#扩展\">#</a> 扩展</h1>\n<ol>\n<li>INF 安装与普通的驱动安装方法有什么区别？是否可以代码实现 inf 安装？</li>\n<li>模仿写一个类似的：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuNTJwb2ppZS5jbi90aHJlYWQtMTMxNDA5Ni0xLTEuaHRtbA==\">https://www.52pojie.cn/thread-1314096-1-1.html</span></li>\n<li>了解  <code>OSR driverloader</code>  是如何获取系统中的  <code>Load Group</code> 。</li>\n</ol>\n",
            "tags": [
                "Minifilter"
            ]
        }
    ]
}