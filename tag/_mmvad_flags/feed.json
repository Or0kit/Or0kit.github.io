{
    "version": "https://jsonfeed.org/version/1",
    "title": "Or0kit • All posts by \"_mmvad_flags\" tag",
    "description": "临渊羡鱼，不如退而结网",
    "home_page_url": "https://Or0kit.github.io",
    "items": [
        {
            "id": "https://or0kit.github.io/Bin/Core/WindowsXp/MemoryManagement/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86-01%E7%BA%BF%E6%80%A7%E5%9C%B0%E5%9D%80%E7%9A%84%E7%AE%A1%E7%90%86/",
            "url": "https://or0kit.github.io/Bin/Core/WindowsXp/MemoryManagement/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86-01%E7%BA%BF%E6%80%A7%E5%9C%B0%E5%9D%80%E7%9A%84%E7%AE%A1%E7%90%86/",
            "title": "内存管理-01线性地址的管理",
            "date_published": "2022-04-14T07:16:52.000Z",
            "content_html": "<h1 id=\"楔子\"><a class=\"anchor\" href=\"#楔子\">#</a> 楔子</h1>\n<p>Windows 的内存管理是非常复杂的，目前仅学习其线性地址、私有内存、映射内存、物理内存是如何管理的。</p>\n<h1 id=\"线性地址的管理\"><a class=\"anchor\" href=\"#线性地址的管理\">#</a> 线性地址的管理</h1>\n<p>进程空间地址的划分：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">分区</th>\n<th style=\"text-align:left\">x86 32 位 Windows</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">空指针赋值区</td>\n<td style=\"text-align:left\">0x00000000 - 0x0000FFFF</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">用户模式区</td>\n<td style=\"text-align:left\">0x00010000 - 0x7FFEFFFF</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">64KB 禁入区</td>\n<td style=\"text-align:left\">0x7FFF0000 - 0x7FFFFFFF</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">内核</td>\n<td style=\"text-align:left\">0x80000000 - 0xFFFFFFFF</td>\n</tr>\n</tbody>\n</table>\n<p>进程虽然名义上有 4G 的虚拟内存空间，但只有低 2G 才是属于自己的，高 2G 是共享的内核空间。</p>\n<p>学过之前的知识，上面那些不能访问的地址，只要挂上一个物理页，我们也是可以访问的。</p>\n<p>但是在应用层我们必须得知道哪些地址可以访问哪些地址不能访问，以及哪些地址已经申请了线性地址，所以这就需要记录了。<br />\n记录哪些线性地址分配了，那些线性地址没有分配，无论是内核空间还是用户空间都需要记录。</p>\n<p>下图是 Windows 20003 SP1 的内核空间内存结构图：</p>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<p>详细的内容在《Windows 内核原理与实现》一书中有。</p>\n<p>下面学习用户空间是如何记录的。</p>\n<p>当你在一个进程空间中申请内存的时候，系统会查哪一个线性地址没有被占用。</p>\n<p>那么 Windows 是查询什么呢？学过数据结构的都知道，树的查询效率是要比链表高的，所以 Windows 在用户空间设计了一个二叉树，这上面记录着进程中线性地址的使用情况。</p>\n<p>而这个二叉树结构在进程结构体  <code>EPROCESS</code>  上:</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>EPROCESS</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t...</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t+0x11c VadRoot</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t...</pre></td></tr></table></figure><p>结构体说明：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kd&gt; dt _MMVAD</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>nt!_MMVAD</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   +0x000 StartingVpn      : Uint4B        &#x2F;&#x2F; 线性地址开始位置 (页为单位)</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   +0x004 EndingVpn        : Uint4B        &#x2F;&#x2F; 线性地址结束位置 (页为单位)</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   +0x008 Parent           : Ptr32 _MMVAD  &#x2F;&#x2F; 父节点</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   +0x00c LeftChild        : Ptr32 _MMVAD  &#x2F;&#x2F; 左子树</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   +0x010 RightChild       : Ptr32 _MMVAD  &#x2F;&#x2F; 右子树</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   +0x014 u                : __unnamed</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   +0x018 ControlArea      : Ptr32 _CONTROL_AREA</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   +0x01c FirstPrototypePte : Ptr32 _MMPTE</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   +0x020 LastContiguousPte : Ptr32 _MMPTE</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   +0x024 u2               : __unnamed</pre></td></tr></table></figure><p>Windows XP 的源码中的定义为：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_MMVAD</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    ULONG_PTR StartingVpn<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    ULONG_PTR EndingVpn<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_MMVAD</span> <span class=\"token operator\">*</span>Parent<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_MMVAD</span> <span class=\"token operator\">*</span>LeftChild<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_MMVAD</span> <span class=\"token operator\">*</span>RightChild<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">union</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        ULONG_PTR LongFlags<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        MMVAD_FLAGS VadFlags<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> u<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    PCONTROL_AREA ControlArea<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    PMMPTE FirstPrototypePte<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    PMMPTE LastContiguousPte<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">union</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        ULONG LongFlags2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        MMVAD_FLAGS2 VadFlags2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> u2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span> MMVAD<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>PMMVAD<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"实验验证\"><a class=\"anchor\" href=\"#实验验证\">#</a> 实验验证</h2>\n<p>在虚拟机中我打开了 DbgView.exe 进程，接下来查看其  <code>EPROCESS</code>  结构体，看看其  <code>+0x11c</code>  的位置:</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kd&gt; !process 0 0</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>**** NT ACTIVE PROCESS DUMP ****</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>……</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>……</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Failed to get VadRoot</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>PROCESS 89e21830  SessionId: 0  Cid: 0758    Peb: 7ffdd000  ParentCid: 043c</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    DirBase: 0aac01a0  ObjectTable: e3365a28  HandleCount:  56.</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    Image: Dbgview.exe</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>kd&gt; dt _EPROCESS 89e21830</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>nt!_EPROCESS</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  ……</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  ……</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   +0x11c VadRoot          : 0x8a173990 Void</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   +0x120 VadHint          : 0x89d23eb0 Void</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   +0x124 CloneRoot        : (null) </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   +0x128 NumberOfPrivatePages : 0xbb</pre></td></tr></table></figure><p>查看  <code>VadRoot</code>  的结构：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kd&gt; dt _MMVAD 0x8a173990</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>nt!_MMVAD</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   +0x000 StartingVpn      : 0x9e0</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   +0x004 EndingVpn        : 0xadf</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   +0x008 Parent           : (null) </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   +0x00c LeftChild        : 0x89dac868 _MMVAD</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   +0x010 RightChild       : 0x89d23eb0 _MMVAD</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   +0x014 u                : __unnamed</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   +0x018 ControlArea      : 0x0a080004 _CONTROL_AREA</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   +0x01c FirstPrototypePte : 0x7266744e _MMPTE</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   +0x020 LastContiguousPte : 0x89cf0f28 _MMPTE</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   +0x024 u2               : __unnamed</pre></td></tr></table></figure><p>我们遍历其右分支：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kd&gt; dt 0x89d23eb0 _MMVAD</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>nt!_MMVAD</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   +0x000 StartingVpn      : 0x7c800</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   +0x004 EndingVpn        : 0x7c91d</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   +0x008 Parent           : 0x8a173990 _MMVAD</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   +0x00c LeftChild        : 0x89d12ae8 _MMVAD</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   +0x010 RightChild       : 0x8a164b48 _MMVAD</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   +0x014 u                : __unnamed</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   +0x018 ControlArea      : 0x8a076430 _CONTROL_AREA</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   +0x01c FirstPrototypePte : 0xe158d6e0 _MMPTE</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   +0x020 LastContiguousPte : 0xfffffffc _MMPTE</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   +0x024 u2               : __unnamed</pre></td></tr></table></figure><p>我们可以看到从  <code>0x7c800</code>  到  <code>0x7c91d</code>  (以页为单位) 都是被占用的，那么我们如何查看是被谁占用的呢？</p>\n<h3 id=\"查看是谁占用的内存\"><a class=\"anchor\" href=\"#查看是谁占用的内存\">#</a> 查看是谁占用的内存</h3>\n<p>注意  <code>MMVAD</code>  中的  <code>   +0x018 ControlArea      : 0x8a076430 _CONTROL_AREA</code></p>\n<p>我们在 Windbg 中查看：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kd&gt; dt _CONTROL_AREA 0x8a076430</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>nt!_CONTROL_AREA</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   +0x000 Segment          : 0xe158d6a0 _SEGMENT</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   +0x004 DereferenceList  : _LIST_ENTRY [ 0x0 - 0x0 ]</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   +0x00c NumberOfSectionReferences : 1</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   +0x010 NumberOfPfnReferences : 0xa6</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   +0x014 NumberOfMappedViews : 0x15</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   +0x018 NumberOfSubsections : 5</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   +0x01a FlushInProgressCount : 0</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   +0x01c NumberOfUserReferences : 0x16</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   +0x020 u                : __unnamed</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   +0x024 FilePointer      : 0x8a0763b8 _FILE_OBJECT</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   +0x028 WaitingForDeletion : (null) </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   +0x02c ModifiedWriteCount : 0</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   +0x02e NumberOfSystemCacheViews : 0</pre></td></tr></table></figure><p>观察到其  <code>+0x024 FilePointer      : 0x8a0763b8 _FILE_OBJECT</code></p>\n<p>接着查看：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kd&gt; dt _FILE_OBJECT 0x8a0763b8</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>nt!_FILE_OBJECT</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   +0x000 Type             : 0n5</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   +0x002 Size             : 0n112</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   +0x004 DeviceObject     : 0x89d68030 _DEVICE_OBJECT</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   +0x008 Vpb              : 0x8a0cb298 _VPB</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   +0x00c FsContext        : 0xe15415c8 Void</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   +0x010 FsContext2       : 0xe1541720 Void</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   +0x014 SectionObjectPointer : 0x8a076314 _SECTION_OBJECT_POINTERS</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   +0x018 PrivateCacheMap  : (null) </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   +0x01c FinalStatus      : 0n0</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   +0x020 RelatedFileObject : 0x8a198770 _FILE_OBJECT</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   +0x024 LockOperation    : 0 &#39;&#39;</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   +0x025 DeletePending    : 0 &#39;&#39;</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   +0x026 ReadAccess       : 0x1 &#39;&#39;</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   +0x027 WriteAccess      : 0 &#39;&#39;</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   +0x028 DeleteAccess     : 0 &#39;&#39;</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   +0x029 SharedRead       : 0x1 &#39;&#39;</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   +0x02a SharedWrite      : 0 &#39;&#39;</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>   +0x02b SharedDelete     : 0x1 &#39;&#39;</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>   +0x02c Flags            : 0x44042</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>   +0x030 FileName         : _UNICODE_STRING &quot;\\WINDOWS\\system32\\kernel32.dll&quot;</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>   +0x038 CurrentByteOffset : _LARGE_INTEGER 0x0</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>   +0x040 Waiters          : 0</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>   +0x044 Busy             : 0</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>   +0x048 LastLock         : (null) </pre></td></tr><tr><td data-num=\"27\"></td><td><pre>   +0x04c Lock             : _KEVENT</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>   +0x05c Event            : _KEVENT</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>   +0x06c CompletionContext : (null)</pre></td></tr></table></figure><p>可以发现是  <code>+0x030 FileName         : _UNICODE_STRING &quot;\\WINDOWS\\system32\\kernel32.dll&quot;</code> 。</p>\n<p>如果  <code>_CONTROL_AREA</code>  指向的地址是空的，那么线性地址被真正的物理页占用着。<br />\n既所有的内存都可以分为两类，一类是 VirtualAllocate 申请的私有内存，一类是映射的内存。</p>\n<h3 id=\"遍历进程的内存结构\"><a class=\"anchor\" href=\"#遍历进程的内存结构\">#</a> 遍历进程的内存结构</h3>\n<p>这个时候我们已经可以遍历进程的整个内存结构了，但是一个一个手动遍历非常麻烦，所以 Windows 提供了  <code>!vad</code>  命令：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kd&gt; !vad 0x8a173990</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>VAD   Level     Start       End Commit</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>8a180608  3        10        10      1 Private      READWRITE          </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>8a03c0a8  4        20        20      1 Private      READWRITE          </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>89cf1438  2        30       12f      6 Private      READWRITE          </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>8a15c740  4       130       132      0 Mapped       READONLY           Pagefile section, shared commit 0x3</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>89d06a70  3       140       141      0 Mapped       READONLY           Pagefile section, shared commit 0x2</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>89d27138  5       150       24f     21 Private      READWRITE          </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>8a0e5cd8  4       250       25f      6 Private      READWRITE          </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>8a15eb50  6       260       26f      0 Mapped       READWRITE          Pagefile section, shared commit 0x3</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>8a1314d8  5       270       285      0 Mapped       READONLY           \\WINDOWS\\system32\\unicode.nls</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>8a1d19c8  7       290       2d0      0 Mapped       READONLY           \\WINDOWS\\system32\\locale.nls</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>8a1c0890  6       2e0       320      0 Mapped       READONLY           \\WINDOWS\\system32\\sortkey.nls</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>89d12b78  8       330       335      0 Mapped       READONLY           \\WINDOWS\\system32\\sorttbls.nls</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>89db5160  7       340       380      0 Mapped       READONLY           Pagefile section, shared commit 0x41</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>8a170c98  8       390       39f      4 Private      READWRITE          </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>8a0fdb70  9       3a0       3a2      0 Mapped       READONLY           \\WINDOWS\\system32\\ctype.nls</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>89cf23c8 10       3b0       3bf      8 Private      READWRITE          </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>8a02d2f0 11       3c0       3c0      1 Private      READWRITE          </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>89dac8a8 12       3d0       3d0      1 Private      READWRITE          </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>8a1c0830 14       3e0       3e1      0 Mapped       READONLY           Pagefile section, shared commit 0x2</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>8a16b8d0 13       3f0       3f1      0 Mapped       READONLY           Pagefile section, shared commit 0x2</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>89dac868  1       400       486     25 Mapped  Exe  EXECUTE_WRITECOPY  \\Documents and Settings\\Administrator\\ 桌面 \\Dbgview.exe</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>89da6cb8  3       490       557      0 Mapped       EXECUTE_READ       Pagefile section, shared commit 0x8</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>8a04e768  2       560       662      0 Mapped       READONLY           Pagefile section, shared commit 0x103</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>8a15c658  4       670       96f      0 Mapped       EXECUTE_READ       Pagefile section, shared commit 0x2b</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>8a110a50  5       970       97f      6 Private      READWRITE          </pre></td></tr><tr><td data-num=\"28\"></td><td><pre>8a0e2a58  3       980       980      0 Mapped       READWRITE          Pagefile section, shared commit 0x1</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>8a02f590  5       990       9cf      0 Mapped       READWRITE          Pagefile section, shared commit 0x10</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>8a02f528  4       9d0       9dd      0 Mapped       READWRITE          Pagefile section, shared commit 0xe</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>8a173990  0       9e0       adf    106 Private      READWRITE          </pre></td></tr><tr><td data-num=\"32\"></td><td><pre>89d0d8d0  5       ae0       ae0      1 Private      READWRITE          </pre></td></tr><tr><td data-num=\"33\"></td><td><pre>89d0de90  7       af0       af0      0 Private Phys READWRITE          </pre></td></tr><tr><td data-num=\"34\"></td><td><pre>8a02f5f8  6       b00       b00      0 Mapped       READWRITE          Pagefile section, shared commit 0x1</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>89d912a8  7       b10       b13      0 Mapped       READWRITE          Pagefile section, shared commit 0x4</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>89cf14f0  4       b30       baf      1 Private      READWRITE          </pre></td></tr><tr><td data-num=\"37\"></td><td><pre>8a10fa30  7       bb0       caf      2 Private      READWRITE          </pre></td></tr><tr><td data-num=\"38\"></td><td><pre>89da4e90  6       cc0       cc7      8 Private      READWRITE          </pre></td></tr><tr><td data-num=\"39\"></td><td><pre>8a0df250  7       cd0       d4f      0 Mapped       READWRITE          Pagefile section, shared commit 0x6</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>89da6b20  5     5adc0     5adf6      2 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\uxtheme.dll</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>89e1c140  3     62c20     62c28      2 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\lpk.dll</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>89d12ae8  2     71a10     71a17      2 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\ws2help.dll</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>89e055d0  3     71a20     71a36      2 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\ws2_32.dll</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>89dbbb80  6     71a90     71aa1      2 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\mpr.dll</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>8a039b30 11     73640     7366d      2 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\MSCTFIME.IME</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>8a04c6e0 10     73fa0     7400a     17 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\usp10.dll</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>89d27178 11     74680     746cb      3 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\MSCTF.dll</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>8a12bb30  9     76300     7631c      2 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\imm32.dll</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>89da6c88  8     76320     76366      5 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\comdlg32.dll</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>8a039ac8  9     76990     76acd      8 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\ole32.dll</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>8a106bf8  7     77180     77282      2 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\WinSxS\\x86_Microsoft.Windows.Common-Controls_6595b64144ccf1df_6.0.2600.6028_x-ww_61e65202\\comctl32.dll</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>8a1314a8  5     77be0     77c37      8 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\msvcrt.dll</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>8a0df9b0  6     77d10     77d9f      3 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\user32.dll</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>8a1368c8  4     77da0     77e48      6 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\advapi32.dll</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>89db5190  5     77e50     77ee2      2 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\rpcrt4.dll</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>8a164a88  7     77ef0     77f39      3 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\gdi32.dll</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>89da6c58  8     77f40     77fb5      2 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\shlwapi.dll</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>89da7650  6     77fc0     77fd0      2 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\secur32.dll</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>89d23eb0  1     7c800     7c91d      6 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\kernel32.dll</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>8a164b48  2     7c920     7c9b2      5 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\ntdll.dll</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>89da6d50  5     7d590     7dd83     31 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\shell32.dll</pre></td></tr><tr><td data-num=\"62\"></td><td><pre>8a1c0860  4     7f6f0     7f7ef      0 Mapped       EXECUTE_READ       Pagefile section, shared commit 0x7</pre></td></tr><tr><td data-num=\"63\"></td><td><pre>8a164ab8  3     7ffa0     7ffd2      0 Mapped       READONLY           Pagefile section, shared commit 0x33</pre></td></tr><tr><td data-num=\"64\"></td><td><pre>8a02eae0  4     7ffdd     7ffdd      1 Private      READWRITE          </pre></td></tr><tr><td data-num=\"65\"></td><td><pre>8a128ab0  6     7ffde     7ffde      1 Private      READWRITE          </pre></td></tr><tr><td data-num=\"66\"></td><td><pre>89dd5830  5     7ffdf     7ffdf      1 Private      READWRITE          </pre></td></tr><tr><td data-num=\"67\"></td><td><pre></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>Total VADs: 64, average level: 6, maximum depth: 14</pre></td></tr><tr><td data-num=\"69\"></td><td><pre>Total private commit: 0x13e pages (1272 KB)</pre></td></tr><tr><td data-num=\"70\"></td><td><pre>Total shared commit:  0x1e7 pages (1948 KB)</pre></td></tr></table></figure><p>这个时候进程所有的内存使用情况都显现出来了。</p>\n<p>这个可以用于对抗模块隐藏，就算在三环断掉了那几条链也没用，在这里仍然可以看得到，如果把这里也抹去了，操作系统分配线性地址的时候可能会出现错误，在已经被占用地址上有分配了。</p>\n<h3 id=\"内存属性\"><a class=\"anchor\" href=\"#内存属性\">#</a> 内存属性</h3>\n<p>在前面的 MMVAD 中的  <code>+0x014 u                : __unnamed</code>  ， 其实它是一个联合体：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">union</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        ULONG_PTR LongFlags<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        MMVAD_FLAGS VadFlags<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span> u<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>在 Windbg 中查看；</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kd&gt; dt _MMVAD_FLAGS</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>nt!_MMVAD_FLAGS</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   +0x000 CommitCharge     : Pos 0, 19 Bits</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   +0x000 PhysicalMapping  : Pos 19, 1 Bit</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   +0x000 ImageMap         : Pos 20, 1 Bit</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   +0x000 UserPhysicalPages : Pos 21, 1 Bit</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   +0x000 NoChange         : Pos 22, 1 Bit</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   +0x000 WriteWatch       : Pos 23, 1 Bit</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   +0x000 Protection       : Pos 24, 5 Bits</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   +0x000 LargePages       : Pos 29, 1 Bit</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   +0x000 MemCommit        : Pos 30, 1 Bit</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   +0x000 PrivateMemory    : Pos 31, 1 Bit</pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>kd&gt; dt _MMVAD_FLAGS 0x8a173990+0x14</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>nt!_MMVAD_FLAGS</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   +0x000 CommitCharge     : 0y0000000000001101010 (0x6a)</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   +0x000 PhysicalMapping  : 0y0</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   +0x000 ImageMap         : 0y0</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>   +0x000 UserPhysicalPages : 0y0</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>   +0x000 NoChange         : 0y0</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>   +0x000 WriteWatch       : 0y0</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>   +0x000 Protection       : 0y00100 (0x4)</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>   +0x000 LargePages       : 0y0</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>   +0x000 MemCommit        : 0y0</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>   +0x000 PrivateMemory    : 0y1</pre></td></tr></table></figure><p>在 XP 源码中查看：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\"><span class=\"token function\">defined</span> <span class=\"token punctuation\">(</span>_WIN64<span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">COMMIT_SIZE</span> <span class=\"token expression\"><span class=\"token number\">51</span></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">else</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">COMMIT_SIZE</span> <span class=\"token expression\"><span class=\"token number\">19</span></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_MMVAD_FLAGS</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    ULONG_PTR CommitCharge <span class=\"token operator\">:</span> COMMIT_SIZE<span class=\"token punctuation\">;</span> <span class=\"token comment\">//limits system to 4k pages or bigger!</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    ULONG_PTR PhysicalMapping <span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    ULONG_PTR ImageMap <span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    ULONG_PTR UserPhysicalPages <span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    ULONG_PTR NoChange <span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    ULONG_PTR WriteWatch <span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    ULONG_PTR Protection <span class=\"token operator\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    ULONG_PTR LargePages <span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    ULONG_PTR MemCommit<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    ULONG_PTR PrivateMemory <span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">//used to tell VAD from VAD_SHORT</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span> MMVAD_FLAGS<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>认识其重要的几个成员:</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>nt!_MMVAD_FLAGS</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   +0x000 CommitCharge</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   +0x000 PhysicalMapping</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   +0x000 ImageMap        &#x2F;&#x2F; 1 镜像文件  0 其他</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   +0x000 Protection      &#x2F;&#x2F; 保护属性： 1 READONLY  2  EXECUTE  3  EXECUTE _READ  4 READWITER 5 WRITECOPY  6  EXECUTE _READWITER   7 EXECUTE_WRITECOPY  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   +0x000 PrivateMemory \t&#x2F;&#x2F; 标识当前的内存状态 1 PrivateMemory  0 Map</pre></td></tr></table></figure><p>如果想实现模块隐藏这一块是必须要绕过去的。</p>\n",
            "tags": [
                "线性地址的管理",
                "VAD树",
                "_MMVAD",
                "_MMVAD_FLAGS"
            ]
        }
    ]
}