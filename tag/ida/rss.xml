<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>Or0kit • Posts by &#34;ida&#34; tag</title>
        <link>https://Or0kit.github.io</link>
        <description>临渊羡鱼，不如退而结网</description>
        <language>zh-CN</language>
        <pubDate>Wed, 18 Aug 2021 21:17:52 +0800</pubDate>
        <lastBuildDate>Wed, 18 Aug 2021 21:17:52 +0800</lastBuildDate>
        <category>Algolia</category>
        <category>同义词替换</category>
        <category>Drozer</category>
        <category>xpath</category>
        <category>win32api</category>
        <category>WOW64</category>
        <category>windows消息机制</category>
        <category>虚拟内存</category>
        <category>jsDelivr</category>
        <category>First blog</category>
        <category>markdown 学习</category>
        <category>Android</category>
        <category>数论基础</category>
        <category>替换密钥</category>
        <category>ADB</category>
        <category>雷电模拟器</category>
        <category>Hadoop</category>
        <category>IDA</category>
        <category>Windows逆向</category>
        <category>SSH隧道</category>
        <category>url</category>
        <category>http</category>
        <category>Linux</category>
        <category>Nginx</category>
        <category>CentOS7配置vsftp</category>
        <category>Psad</category>
        <category>fwsnort</category>
        <category>应急响应</category>
        <category>x86汇编指令</category>
        <category>PE课后作业</category>
        <category>MFC</category>
        <category>PE查看器</category>
        <category>PE结构</category>
        <category>DOS头属性说明</category>
        <category>标准PE头属性说明</category>
        <category>扩展PE头属性说明</category>
        <category>节表属性说明</category>
        <category>空白区添加代码</category>
        <category>RVA与FOA</category>
        <category>合并节</category>
        <category>注入</category>
        <category>导入表注入</category>
        <category>导出表</category>
        <category>导入表</category>
        <category>扩大节</category>
        <category>新增节</category>
        <category>移动NT头</category>
        <category>移动导出表</category>
        <category>移动重定位表</category>
        <category>重定位表</category>
        <category>静态链接库</category>
        <category>动态链接库</category>
        <category>句柄</category>
        <category>逆向</category>
        <category>IDA学习</category>
        <category>静态分析基础</category>
        <category>动态分析技术基础</category>
        <category>恶意代码分析实战入门</category>
        <category>加壳</category>
        <category>脱壳</category>
        <category>C++壳</category>
        <category>ESP寻址</category>
        <category>定位Win32窗口回调函数</category>
        <category>HOOK攻防</category>
        <category>瞬时HOOK过检测</category>
        <category>INLINE-HOOK</category>
        <category>IAT HOOK</category>
        <category>INLINE HOOK</category>
        <category>进程监控</category>
        <category>模块隐藏</category>
        <category>进程通信</category>
        <category>tlhelp32.h</category>
        <category>进程遍历</category>
        <category>模块遍历</category>
        <category>外挂原理</category>
        <category>DLL注入之进程间通信</category>
        <category>TEB</category>
        <category>PEB</category>
        <category>R3层断链</category>
        <category>Win临界区</category>
        <category>Win事件</category>
        <category>线程同步</category>
        <category>Win互斥体</category>
        <category>内存映射文件</category>
        <category>内存映射共享</category>
        <category>写拷贝</category>
        <category>Win子窗口控件</category>
        <category>win32文件函数</category>
        <category>代码注入</category>
        <category>窗口程序</category>
        <category>消息机制</category>
        <category>消息类型</category>
        <category>私有内存</category>
        <category>共享内存</category>
        <category>设备对象</category>
        <category>DC设备上下文</category>
        <category>图形对象</category>
        <category>创建线程</category>
        <category>线程控制</category>
        <category>线程相关API</category>
        <category>线程上下文</category>
        <category>CONTEXT结构体</category>
        <category>物理内存</category>
        <category>Windows进程</category>
        <category>句柄表</category>
        <category>远程线程函数</category>
        <category>远程线程</category>
        <category>DLL注入</category>
        <category>DLL注入相关函数</category>
        <category>WinMain函数</category>
        <category>调用约定</category>
        <category>我的GetProcAddress</category>
        <category>资源文件</category>
        <category>消息断点</category>
        <category>通用控件</category>
        <category>WM_NOTIFY消息类型</category>
        <category>CobaltStrike</category>
        <category>Apeache</category>
        <category>Nmap</category>
        <category>php</category>
        <category>guestbook</category>
        <category>SQLmap</category>
        <category>apache</category>
        <category>log</category>
        <category>mysql主键</category>
        <category>CSRF</category>
        <category>SSRF</category>
        <category>业务逻辑漏洞</category>
        <category>xss</category>
        <category>webshell流量特征</category>
        <category>虚拟网卡</category>
        <category>RedTeam</category>
        <category>python</category>
        <category>SSH</category>
        <category>python文件读取</category>
        <category>数据分析</category>
        <category>socket</category>
        <category>数据库编程</category>
        <category>python内置属性</category>
        <category>scrapy</category>
        <category>测试</category>
        <category>BHP</category>
        <category>Python的import功能</category>
        <category>木马</category>
        <category>button</category>
        <category>multiprocessing</category>
        <category>threading</category>
        <category>单选框</category>
        <category>复选框件</category>
        <category>Edit</category>
        <category>Combo Box</category>
        <category>Tab</category>
        <category>ListCtrl</category>
        <category>MFC的本质</category>
        <category>MFC的层次结构图</category>
        <category>手动创建一个MFC程序</category>
        <category>MFC的初始化过程</category>
        <category>MFC运行时类型识别</category>
        <category>关键字static</category>
        <category>关键字const</category>
        <category>MFC动态创建</category>
        <category>MFC消息映射</category>
        <category>结构体AFX_MSGMAP_ENTRY</category>
        <category>结构体AFX_MSGM</category>
        <category>MFC的三大类消息</category>
        <category>数据传输</category>
        <category>ini文件的读写</category>
        <category>非可变序列算法</category>
        <category>可变序列算法</category>
        <category>排序算法</category>
        <category>迭代器</category>
        <category>使用自定义对象</category>
        <category>0环与3环的通信（常规方法）</category>
        <category>内核空间</category>
        <category>内核模块</category>
        <category>遍历内核模块</category>
        <category>定位未导出函数PspTiminateProcess</category>
        <category>内核编程基础</category>
        <category>ANSI_STRING</category>
        <category>UNICODE_STRING</category>
        <category>内核内存</category>
        <category>上下文环境</category>
        <category>中断请求级别</category>
        <category>链表</category>
        <category>自旋锁</category>
        <category>注册表</category>
        <category>地址空间</category>
        <category>文件操作</category>
        <category>线程与事件</category>
        <category>内核重载</category>
        <category>配置VS2019+WDK10</category>
        <category>第一个驱动程序</category>
        <category>驱动调试</category>
        <category>调试驱动程序</category>
        <category>OpenSCManager</category>
        <category>CreateService</category>
        <category>APC的本质</category>
        <category>APC的备用队列</category>
        <category>线性地址的管理</category>
        <category>VAD树</category>
        <category>_MMVAD</category>
        <category>_MMVAD_FLAGS</category>
        <category>VirtualAlloc</category>
        <category>MEM_COMMIT与MEM_RESERVE</category>
        <category>malloc</category>
        <category>堆内存</category>
        <category>栈内存</category>
        <category>全局区内存</category>
        <category>共享物理页</category>
        <category>共享文件</category>
        <category>LoadLibrary的本质</category>
        <category>MmAddPhysicalMemoryEx</category>
        <category>缺页异常</category>
        <category>消息队列</category>
        <category>PsConvertToGuiThread</category>
        <category>win32k.sys</category>
        <category>GUI线程</category>
        <category>窗口程序的创建</category>
        <category>消息循环</category>
        <category>临界区</category>
        <category>KPCR结构体</category>
        <category>模拟线程切换</category>
        <category>模拟挂起与恢复函数</category>
        <category>等待链表</category>
        <category>调度链表</category>
        <category>ETHREAD</category>
        <category>KTHREAD</category>
        <category>进程的创建</category>
        <category>获取当前进程</category>
        <category>EPROCESS</category>
        <category>KPROCESS</category>
        <category>2-9-9-12分页</category>
        <category>PAE</category>
        <category>PDPTE</category>
        <category>PDE</category>
        <category>PTE</category>
        <category>XD标志位</category>
        <category>逆向分析MmIsAddressValid函数(2-9-9-12)</category>
        <category>PWT</category>
        <category>PDT</category>
        <category>TLB</category>
        <category>CPU缓存</category>
        <category>INVLPG指令</category>
        <category>全局页</category>
        <category>ShadowWalker</category>
        <category>中断</category>
        <category>异常</category>
        <category>CLI指令</category>
        <category>STI指令</category>
        <category>INT2</category>
        <category>INT8</category>
        <category>中断门描述符</category>
        <category>IDT</category>
        <category>提权</category>
        <category>跨段跳转流程</category>
        <category>JMP FAR指令</category>
        <category>TSS</category>
        <category>任务门</category>
        <category>LDT段描述符</category>
        <category>LDT</category>
        <category>CR0</category>
        <category>CR2</category>
        <category>CR4</category>
        <category>段寄存器结构</category>
        <category>段描述符</category>
        <category>段选择子</category>
        <category>GDT表</category>
        <category>CRL</category>
        <category>DPL</category>
        <category>RPL</category>
        <category>调用门</category>
        <category>调用门描述符</category>
        <category>逆向分析MmIsAddressValid函数</category>
        <category>CALL与CALL FAR</category>
        <category>error C2143</category>
        <category>error C2275</category>
        <category>陷阱门描述符</category>
        <category>页目录表基址</category>
        <category>页表的基址</category>
        <category>0地址执行ShellCode</category>
        <category>10-10-12分页</category>
        <category>PDE_PTE</category>
        <category>物理页</category>
        <category>SSDT HOOK</category>
        <category>OpenProcess</category>
        <category>系统服务表</category>
        <category>SSDT</category>
        <category>SSDT HOOK隐藏</category>
        <category>API进出内核</category>
        <category>系统调用阶段总结</category>
        <category>网络安全法</category>
        <category>ASCII</category>
        <category>GBK</category>
        <category>ANSI</category>
        <category>Unicode</category>
        <category>UTF-8</category>
        <category>URL 编码/解码</category>
        <category>十进制</category>
        <category>二进制</category>
        <category>十六进制</category>
        <category>内存</category>
        <category>编写ShellCode实现IAT HOOK</category>
        <category>ShellCode原则</category>
        <category>加载图标</category>
        <category>提取图标</category>
        <category>资源表</category>
        <category>傀儡进程加密壳</category>
        <category>ZwUnmapViewOfSection函数</category>
        <category>HTML</category>
        <category>文件包含</category>
        <category>sql注入</category>
        <category>MFC命令传递</category>
        <category>远控界面编写</category>
        <category>STL</category>
        <category>Vector容器</category>
        <category>Deque容器</category>
        <category>List容器</category>
        <category>Set容器</category>
        <category>Multiset容器</category>
        <category>Map容器</category>
        <category>Multimap容器</category>
        <category>Stack容器</category>
        <category>Queue容器</category>
        <category>priority_queue容器</category>
        <category>经典定长指令</category>
        <category>经典变长指令</category>
        <category>指令前缀</category>
        <category>KAPC</category>
        <category>QueueUserAPC</category>
        <category>NtQueueApcThread</category>
        <category>KeInitializeApc</category>
        <category>KeInsertQueueApc</category>
        <category>KiInsertQueueApc</category>
        <category>进程句柄表</category>
        <category>全局句柄表</category>
        <category>消息队列与线程</category>
        <category>Windows线程切换</category>
        <category>KiSwapContext</category>
        <category>SwapContext</category>
        <category>时钟中断</category>
        <category>时间片管理</category>
        <category>线程切换与TSS</category>
        <category>线程切换与FS</category>
        <category>线程切换与线程优先级</category>
        <category>快速调用</category>
        <category>中断调用</category>
        <category>分析ReadProcessMemory</category>
        <category>KiFastSystemCall</category>
        <category>KiIntSystemCall</category>
        <category>重写3环</category>
        <category>文件上传</category>
        <category>隐藏驱动</category>
        <category>IopLoadDriver</category>
        <category>延迟过程调用</category>
        <category>进程挂靠</category>
        <category>跨进程读写内存</category>
        <category>APC</category>
        <category>逆向分析NtReadVirtualMemory</category>
        <category>逆向分析NtWriteVIrtualMemory</category>
        <category>payload</category>
        <category>AD-Attack-Defense</category>
        <category>sysenter指令</category>
        <category>KiFastCallEntry函数</category>
        <category>KiSystemService函数</category>
        <category>Trap_Frame</category>
        <category>web安全</category>
        <category>Pentest</category>
        <item>
            <guid isPermalink="true">https://or0kit.github.io/Bin/IDA%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/</guid>
            <title>IDA入门学习</title>
            <link>https://or0kit.github.io/Bin/IDA%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/</link>
            <category>IDA</category>
            <pubDate>Wed, 18 Aug 2021 21:17:52 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;前言&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#前言&#34;&gt;#&lt;/a&gt; 前言&lt;/h1&gt;
&lt;p&gt;为什么学习 IDA，滴水中级班课程大部分时间是在分析系统内核文件，用到的工具主要就是 IDA。&lt;/p&gt;
&lt;p&gt;最近在看中级班课程，发现基础太烂了，自闭 ing……&lt;/p&gt;
&lt;p&gt;IDA 是一款静态分析工具。&lt;/p&gt;
&lt;h1 id=&#34;正文&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#正文&#34;&gt;#&lt;/a&gt; 正文&lt;/h1&gt;
&lt;h2 id=&#34;打开文件-关闭文件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#打开文件-关闭文件&#34;&gt;#&lt;/a&gt; 打开文件、关闭文件&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;image001.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;可以直接打开一个文件，也可以单独打开 IDA。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image002.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;单独打开 IDA 后再打开文件，也可以直接把文件拖到 IDA 中。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image003.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;我们直接点击 OK。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image004.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;加载符号链接。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image005.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;这时文件已经正确打开&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image006.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;接下来是关闭文件，关闭文件是需要注意的，上图我们可以发现，在调试文件下发生成了几个文件，这是 IDA 的要用到的数据库文件。&lt;/p&gt;
&lt;p&gt;当我们要关闭文件的时候&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image007.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;如果不打包的话数据库文件还是分着放，如果选择打包，则会生成一个 idb 文件。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image008.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;在分析文件时都会修改很多东西，修改的内容会保存在 idb 文件里面，以后打开文件，就不用打开源文件了，可以直接打开这个 idb 文件。&lt;/p&gt;
&lt;p&gt;当文件越来越大时，可以勾选收集垃圾，来删除不必要的内容。&lt;/p&gt;
&lt;p&gt;最后一个选项挺重要的，比如说某次我在 IDA 文件中做了很多操作后，我不想要这次的操作了，这时退出的时候就可以选中不保存数据库，这次的操作就不会保存，还停留在文件打开之前的样子。这是在 IDA 中放弃错误操作的唯一的办法。&lt;/p&gt;
&lt;h2 id=&#34;窗口介绍图形-文本-其他窗口介绍&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#窗口介绍图形-文本-其他窗口介绍&#34;&gt;#&lt;/a&gt; 窗口介绍：图形、文本、其他窗口介绍&lt;/h2&gt;
&lt;p&gt;CTRL + 滚轮 放大，放小&lt;/p&gt;
&lt;p&gt;空格 切换图形 / 文本界面&lt;/p&gt;
&lt;p&gt;IDA View-A 反汇编窗口&lt;/p&gt;
&lt;p&gt;Hex View-A 十六进制窗口&lt;/p&gt;
&lt;p&gt;Imports 导入表函数窗口&lt;/p&gt;
&lt;p&gt;Exports 导出函数窗口&lt;/p&gt;
&lt;p&gt;Structures 结构体窗口  IDA 识别出来的当然是有限的的，还有很多识别不出来的，我们可以在这个窗口中创建。&lt;/p&gt;
&lt;p&gt;等等窗口，可以在工具栏调用出来&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image009.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;显示硬编码-acdu指令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#显示硬编码-acdu指令&#34;&gt;#&lt;/a&gt; 显示硬编码 -&amp;gt; ACDU 指令&lt;/h2&gt;
&lt;p&gt;并没有显示硬编码&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image010.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;设置显示出硬编码&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image011.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image012.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;学习过硬编码的任都知道，一行最多是十六个字节，所以这里设置的再多，也会被 IDA 修改为 16。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image013.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;绝大多数 IDA 能正常的够把硬编码转换成汇编指令。&lt;/p&gt;
&lt;p&gt;但是当需要分析的程序经过了处理，IDA 就识别不了了。&lt;/p&gt;
&lt;p&gt;明明是数据的部分，却被识别为指令、明明是指令的部分，却被识别为数据。&lt;/p&gt;
&lt;p&gt;这就需要 &lt;code&gt;ACDU&lt;/code&gt;  这几个命令了。&lt;/p&gt;
&lt;p&gt;A: 把当前的数据用字符串的形式显示。&lt;br /&gt;
C: 把当前的数据用代码的形式显示。&lt;br /&gt;
D: 把当前的数据用数据的形式显示。&lt;br /&gt;
U: 把当前的数据用原始的字节的的形式显示。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image014.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;以这段 nop 指令为例。&lt;/p&gt;
&lt;p&gt;A 命令&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image015.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;C 命令&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image016.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;D 命令&lt;br /&gt;
按一次 D 以一个字节显示 &lt;code&gt;db&lt;/code&gt; , 再按一次以 &lt;code&gt;dw&lt;/code&gt; , 再按一次以 &lt;code&gt;dd&lt;/code&gt;  显示。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image017.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;U 命令&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image018.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;跳转指令-g&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#跳转指令-g&#34;&gt;#&lt;/a&gt; 跳转指令: G&lt;/h2&gt;
&lt;p&gt;直接按 &lt;code&gt;G&lt;/code&gt;  键 然后输入我们要跳转的地址&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image019.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;搜索指令alt-t&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#搜索指令alt-t&#34;&gt;#&lt;/a&gt; 搜索指令：ALT + T&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;ALT + T&lt;/code&gt;  搜索某一个关键词、函数名。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image020.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;改名字n&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#改名字n&#34;&gt;#&lt;/a&gt; 改名字：N&lt;/h2&gt;
&lt;p&gt;这个命令非常重要。&lt;br /&gt;
真正的逆向分析，就是弄清楚这个函数做了什么事情，那么当我们分析完后，就要给这个函数起一个名字了，这个名字一般都代表这这个函数的功能。所以起名字的过程就是逆向分析的过程。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image021.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;创建结构体-修改全局变量-修改局部变量&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#创建结构体-修改全局变量-修改局部变量&#34;&gt;#&lt;/a&gt; 创建结构体、修改全局变量、修改局部变量&lt;/h2&gt;
&lt;p&gt;当我们分析出了一个结构体，但 IDA 中并没有识别出这个结构体，那我们就要自己添加结构体了。&lt;/p&gt;
&lt;p&gt;点开 &lt;code&gt;structures&lt;/code&gt;  视图窗口&lt;/p&gt;
&lt;p&gt;然后选择添加结构体类型&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image022.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;随便起个名字叫 CCCC&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image023.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;在结构体中添加成员&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#在结构体中添加成员&#34;&gt;#&lt;/a&gt; 在结构体中添加成员&lt;/h3&gt;
&lt;p&gt;按 &lt;code&gt;D&lt;/code&gt;  键&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image024.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;这个结构体成员的名字和类型都是可以改的，修改类型可以接着按 &lt;code&gt;D&lt;/code&gt;  键，修改名字按 &lt;code&gt;N&lt;/code&gt;  键&lt;/p&gt;
&lt;h3 id=&#34;如果结构体的成员也是一个结构体&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#如果结构体的成员也是一个结构体&#34;&gt;#&lt;/a&gt; 如果结构体的成员也是一个结构体&lt;/h3&gt;
&lt;p&gt;新增一个成员后，按 &lt;code&gt;ALT + Q&lt;/code&gt;  就会列出当前已经记录的结构体&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image025.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;如果第三个成员是dword数组&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#如果第三个成员是dword数组&#34;&gt;#&lt;/a&gt; 如果第三个成员是 DWORD 数组&lt;/h3&gt;
&lt;p&gt;先新建一个 DWORD 类型的成员，然后右键选择数组，输入数组的大小确定。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image026.png&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
&lt;img data-src=&#34;image027.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;结果：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image028.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;修改全局变量&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#修改全局变量&#34;&gt;#&lt;/a&gt; 修改全局变量&lt;/h3&gt;
&lt;p&gt;创建这个结构体后，我们就可以在 IDA 中引用这个结构体了&lt;/p&gt;
&lt;p&gt;这是一个 IDA 自己识别的一个全局变量&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image029.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;双击跟进去查看&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image030.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;发现它是一个 &lt;code&gt;dd&lt;/code&gt;  类型的变量，我们假设它的类型是一个结构体，那我们把它的类型改为我们创建的结构体，按 &lt;code&gt;ALT + Q&lt;/code&gt;  选择结构体。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image031.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;变量的名字也是可以改的&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image032.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;可以发现我们已经修改了全局变量的类型，并且 IDA 也自动识别了用的是结构体中的那个成员。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image033.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;修改局部变量&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#修改局部变量&#34;&gt;#&lt;/a&gt; 修改局部变量&lt;/h3&gt;
&lt;p&gt;比如我们发现这个 ebx 就是一个结构体，那我们选中它后按 &lt;code&gt;T&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image034.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image035.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;这样我们就在局部变量里面引用了自己定义的结构体&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image036.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;注释&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#注释&#34;&gt;#&lt;/a&gt; 注释&lt;/h2&gt;
&lt;p&gt;IDA 里面的注释是非常重要的。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;直接按 &lt;code&gt;;&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;image037.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;这种注释有一个特点就是：任何往这个地方跳的地方，IDA 都会在那个地方再显示一份，这有好处也有坏处，你希望它显示那它就是好的，你不希望它显示那它就是不好，显示的话如果注释多了，就会显得特别乱。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image038.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;code&gt;:&lt;/code&gt;  注释&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;冒号注释，只显示一次。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image039.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;像正向写代码一样给函数写注释&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;选中函数名，按&lt;strong&gt;注释命令&lt;/strong&gt;就可以像正向写代码一样给函数写注释描绘函数的基本特征，并且会生成在汇编指令上方。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image040.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;交叉引用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#交叉引用&#34;&gt;#&lt;/a&gt; 交叉引用&lt;/h2&gt;
&lt;p&gt;这也是逆向分析中经常用到的功能。&lt;/p&gt;
&lt;p&gt;当我们想知道一个函数都被哪里引用的时候可以看这里&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image041.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;但是这里显示的并不全。&lt;/p&gt;
&lt;p&gt;我们可以选中这个函数名，在工具栏中打开交叉引用视图窗口&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image042.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;这里就会显示出所有引用这个函数的地方&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image043.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;上面演示的是一个函数的交叉引用，变量也可以被查看在哪里被引用了。&lt;/p&gt;
&lt;h2 id=&#34;练习说明&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#练习说明&#34;&gt;#&lt;/a&gt; 练习说明&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;掌握 IDA 基本操作&lt;/li&gt;
&lt;li&gt;汇编逆向 C 语言&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;SiCore.sys 文件整理。&lt;br /&gt;
把每一个函数的汇编转换为 C 代码。&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
