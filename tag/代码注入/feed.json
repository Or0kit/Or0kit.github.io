{
    "version": "https://jsonfeed.org/version/1",
    "title": "Or0kit • All posts by \"代码注入\" tag",
    "description": "临渊羡鱼，不如退而结网",
    "home_page_url": "https://Or0kit.github.io",
    "items": [
        {
            "id": "https://or0kit.github.io/Bin/Win32/Win%E6%97%A0%E6%A8%A1%E5%9D%97%E6%B3%A8%E5%85%A5%E4%BB%A3%E7%A0%81/",
            "url": "https://or0kit.github.io/Bin/Win32/Win%E6%97%A0%E6%A8%A1%E5%9D%97%E6%B3%A8%E5%85%A5%E4%BB%A3%E7%A0%81/",
            "title": "Win无模块注入代码",
            "date_published": "2021-07-20T12:52:47.000Z",
            "content_html": "<h1 id=\"代码注入\"><a class=\"anchor\" href=\"#代码注入\">#</a> 代码注入</h1>\n<p>把自己想要使用的函数复制到目标进程中。</p>\n<p><strong>复制代码的编写原则：</strong></p>\n<blockquote>\n<p>不能有全局变量<br />\n不能使用常量字符串<br />\n不能使用系统调用<br />\n不能嵌套调用其他函数</p>\n</blockquote>\n<p>这些都是可以解决的。</p>\n<p><strong>以创建一个文件举例</strong></p>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<p>以上图举例</p>\n<p>我在代码进程中创建一个函数，这个函数实现的功能是创建一个文件。</p>\n<p>这个函数的格式一定要遵守线程函数的格式，既一个四个字节的参数一个返回值。<br />\n写完这个函数后就可以直接把这个函数复制到目标进程中去，把复制后函数的地址，赋给 <code>CreateRemoteThread</code> ，这样就解决了创建远程线程后线程函数的问题，并且这个线程函数是在我的代码进程中写的，这样就可以按照我自己的要求来写。</p>\n<p>可这个函数如果要创建一个文件的话，必须要用到 <code>CreateFile</code>  这个系统函数，可我们不能直接这样写，因为调用者个函数依赖的是进程本身的导入表，复制到目标进程后，目标进程的导入表跟当前进程的导入表是不一样的。</p>\n<p>因为远程线程函数能够接受参数，那我单独在分配一块内存，比如说我这块内存是一个结构体，我把所有用到的参数都赋好值，然后复制到目标进程，并且把结构体在目标进程中的地址传给远程线程参数，这样就解决了远程线程函数参数的问题，并且线程函数和参数都是我自己可控的。</p>\n<p>不会像 dll 注入留下明显的痕迹，唯一的痕迹就是几块内存空间了。从检测的角度来看，代码注入的检测要比 dll 注入的检测复杂的多。</p>\n<h2 id=\"代码实例\"><a class=\"anchor\" href=\"#代码实例\">#</a> 代码实例</h2>\n<p>主要是理解流程，掌握思路。</p>\n<p>需求：在目标进程中执行 <code>CreateFile</code>  函数。</p>\n<p>如何使 CreateFile 在目标进程执行呢？</p>\n<p>创建一个结构体，这个结构体包含：<br />\n <code>CreateFile</code>  的函数地址。<br />\n <code>CreateFile</code>  函数的所有参数。</p>\n<p>使用远程线程注入，这就需要创建一个线程函数，这个线程函数的参数是指向结构体的地址，由于是在目标进程中调用，所以这个地址是目标进程中此结构体的地址。</p>\n<p>如何实现这一点呢？</p>\n<p>给目标进程申请一块私有内存，并写入数据。申请内存的时候会返回内存的地址。<br />\n这样就可以把线程函数和参数都传给目标进程。</p>\n<p>如何去调用线程函数呢？</p>\n<p>可以函数指针来实现</p>\n<p>给目标进程开辟一块内存空间会返回内存地址，把线程函数写入这块内存空间中后，把这块内存的首地址赋给函数指针就可以调用这个线程函数了。</p>\n<p>这个时候 <code>CreateRemoteThread</code>  函数所需要的参数都已经准备完毕，可以直接在目标进程中创建线程执行代码了。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/************************************************************************/</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">/* 远程线程实现 CreateFile                                               */</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/************************************************************************/</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;windows.h></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;Tlhelp32.h></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;tchar.h></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;assert.h></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">WIN32_LEAN_AND_MEAN</span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">//CreateFile 函数的参数</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">CreateFileParam</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tDWORD\t\t\tdwCreateFileAddress<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//CreateFile 函数的地址</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tLPCTSTR\t\t\tlpFileName<span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">// 文件名（包含路径）</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\tDWORD\t\t\tdwDesiredAccess<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 访问模式（写 / 读）</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\tDWORD\t\t\tdwShareMode<span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\">// 共享模式</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\tLPSECURITY_ATTRIBUTES lpSecurityAttributes<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 指向安全属性的指针</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\tDWORD\t\t\tdwCreationDisposition<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 如何创建</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\tDWORD\t\t\tdwFlagsAndAttributes<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 文件属性</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\tHANDLE\t\t\thTemplateFile<span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\">// 用于复制文件句柄</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span>CreateFileParam<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token comment\">// 定义一个 CreateFile 一模一样的函数指针类型</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token function\">HANDLE</span><span class=\"token punctuation\">(</span>WINAPI<span class=\"token operator\">*</span> pCreateFile<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\tLPCTSTR\t\t\tlpFileName<span class=\"token punctuation\">,</span>\t\t\t\t<span class=\"token comment\">// 文件名（包含路径）</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\tDWORD\t\t\tdwDesiredAccess<span class=\"token punctuation\">,</span>\t\t<span class=\"token comment\">// 访问模式（写 / 读）</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\tDWORD\t\t\tdwShareMode<span class=\"token punctuation\">,</span>\t\t\t<span class=\"token comment\">// 共享模式</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\tLPSECURITY_ATTRIBUTES lpSecurityAttributes<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 指向安全属性的指针</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\tDWORD\t\t\tdwCreationDisposition<span class=\"token punctuation\">,</span>\t<span class=\"token comment\">// 如何创建</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\tDWORD\t\t\tdwFlagsAndAttributes<span class=\"token punctuation\">,</span>\t<span class=\"token comment\">// 文件属性</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\tHANDLE\t\t\thTemplateFile\t\t\t<span class=\"token comment\">// 用于复制文件句柄</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token comment\">// 获取进程的 PID</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>DWORD <span class=\"token function\">ByNameGetPid</span><span class=\"token punctuation\">(</span>LPCTSTR lpName<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\tHANDLE hProcSnap <span class=\"token operator\">=</span> <span class=\"token function\">CreateToolhelp32Snapshot</span><span class=\"token punctuation\">(</span>TH32CS_SNAPPROCESS<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 获取进程快照句柄</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>hProcSnap <span class=\"token operator\">!=</span> INVALID_HANDLE_VALUE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\tPROCESSENTRY32 pe32<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\tpe32<span class=\"token punctuation\">.</span>dwSize <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>PROCESSENTRY32<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\tBOOL flag <span class=\"token operator\">=</span> <span class=\"token function\">Process32First</span><span class=\"token punctuation\">(</span>hProcSnap<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>pe32<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 获取列表的第一个进程</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">_tcscmp</span><span class=\"token punctuation\">(</span>pe32<span class=\"token punctuation\">.</span>szExeFile<span class=\"token punctuation\">,</span> lpName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t\t\t<span class=\"token function\">CloseHandle</span><span class=\"token punctuation\">(</span>hProcSnap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> pe32<span class=\"token punctuation\">.</span>th32ProcessID<span class=\"token punctuation\">;</span><span class=\"token comment\">//pid</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t\tflag <span class=\"token operator\">=</span> <span class=\"token function\">Process32Next</span><span class=\"token punctuation\">(</span>hProcSnap<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>pe32<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 获取下一个进程</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t<span class=\"token function\">CloseHandle</span><span class=\"token punctuation\">(</span>hProcSnap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre></pre></td></tr><tr><td data-num=\"64\"></td><td><pre><span class=\"token comment\">// 编写要复制到目标进程中的函数</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>DWORD WINAPI <span class=\"token function\">CreateFileThreadProc</span><span class=\"token punctuation\">(</span>LPVOID lpParam<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t<span class=\"token comment\">// 转换参数</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\tCreateFileParam<span class=\"token operator\">*</span> cfParam <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>CreateFileParam<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>lpParam<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>\t<span class=\"token comment\">// 声明变量，赋值</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\tpCreateFile pCF <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>pCreateFile<span class=\"token punctuation\">)</span>cfParam<span class=\"token operator\">-></span>dwCreateFileAddress<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\t<span class=\"token comment\">// 传参</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\tHANDLE hFile <span class=\"token operator\">=</span> <span class=\"token function\">pCF</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\t\tcfParam<span class=\"token operator\">-></span>lpFileName<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>\t\tcfParam<span class=\"token operator\">-></span>dwDesiredAccess<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>\t\tcfParam<span class=\"token operator\">-></span>dwShareMode<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\t\tcfParam<span class=\"token operator\">-></span>lpSecurityAttributes<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>\t\tcfParam<span class=\"token operator\">-></span>dwCreationDisposition<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>\t\tcfParam<span class=\"token operator\">-></span>dwFlagsAndAttributes<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>\t\tcfParam<span class=\"token operator\">-></span>hTemplateFile</pre></td></tr><tr><td data-num=\"79\"></td><td><pre>\t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre></pre></td></tr><tr><td data-num=\"83\"></td><td><pre><span class=\"token comment\">// 远程创建文件</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>BOOL <span class=\"token function\">RemoteCreateFile</span><span class=\"token punctuation\">(</span>DWORD dwPid<span class=\"token punctuation\">,</span> LPCTSTR lpFilePathName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>\t<span class=\"token comment\">//. 获取进程的句柄</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>\tHANDLE hProcess <span class=\"token operator\">=</span> <span class=\"token function\">OpenProcess</span><span class=\"token punctuation\">(</span>PROCESS_ALL_ACCESS<span class=\"token punctuation\">,</span> FALSE<span class=\"token punctuation\">,</span> dwPid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hProcess <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"OpenProcessError!: %d\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">GetLastError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> FALSE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>\t<span class=\"token comment\">// 分配内存</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>\t<span class=\"token comment\">// 用来存储字符串参数中的文件名</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>\t<span class=\"token comment\">//wcslen 获取的是字符数，要将其转换为字节数</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>\t<span class=\"token comment\">// 函数执行成功返回内存首地址</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>\tLPVOID MemAddressOfFileName <span class=\"token operator\">=</span> <span class=\"token function\">VirtualAllocEx</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>\t\thProcess<span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"101\"></td><td><pre>\t\t<span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>\t\t<span class=\"token function\">_tcslen</span><span class=\"token punctuation\">(</span>lpFilePathName<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>\t\tMEM_COMMIT<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>\t\tPAGE_READWRITE</pre></td></tr><tr><td data-num=\"105\"></td><td><pre>\t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>MemAddressOfFileName <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Write MemAddressOfFileName Error!: %d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">GetLastError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> FALSE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre></pre></td></tr><tr><td data-num=\"112\"></td><td><pre></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>\t<span class=\"token comment\">// 用来存储线程函数</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>\tLPVOID MemAddressOfThreadProc <span class=\"token operator\">=</span> <span class=\"token function\">VirtualAllocEx</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>\t\thProcess<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>\t\t<span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>\t\t<span class=\"token number\">0x400</span><span class=\"token punctuation\">,</span><span class=\"token comment\">// 函数在内存中的大小给个大点的值</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>\t\tMEM_COMMIT<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>\t\tPAGE_EXECUTE</pre></td></tr><tr><td data-num=\"120\"></td><td><pre>\t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>MemAddressOfThreadProc <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Write MemAddressOfThreadProc Error!: %d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">GetLastError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"125\"></td><td><pre>\t\t<span class=\"token comment\">// 关闭资源</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>\t\t<span class=\"token function\">CloseHandle</span><span class=\"token punctuation\">(</span>hProcess<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> FALSE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>\t<span class=\"token comment\">// 用来存储文件参数</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>\tLPVOID MemAddressOfParam <span class=\"token operator\">=</span> <span class=\"token function\">VirtualAllocEx</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>\t\thProcess<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>\t\t<span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>\t\t<span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>CreateFileParam<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>\t\tMEM_COMMIT<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>\t\tPAGE_READWRITE</pre></td></tr><tr><td data-num=\"137\"></td><td><pre>\t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>MemAddressOfParam <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Write MemAddressOfParam Error!: %d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">GetLastError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>\t\t<span class=\"token comment\">// 关闭资源</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>\t\t<span class=\"token function\">CloseHandle</span><span class=\"token punctuation\">(</span>hProcess<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> FALSE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre></pre></td></tr><tr><td data-num=\"146\"></td><td><pre></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>\t<span class=\"token comment\">// 初始化参数</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>\tCreateFileParam cfParam<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre>\t<span class=\"token comment\">// 文件名</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre>\tcfParam<span class=\"token punctuation\">.</span>lpFileName <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>LPCTSTR<span class=\"token punctuation\">)</span>MemAddressOfFileName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"151\"></td><td><pre>\t<span class=\"token comment\">// 其他参数</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre>\tcfParam<span class=\"token punctuation\">.</span>dwDesiredAccess <span class=\"token operator\">=</span> GENERIC_READ <span class=\"token operator\">|</span> GENERIC_WRITE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"153\"></td><td><pre>\tcfParam<span class=\"token punctuation\">.</span>dwShareMode <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"154\"></td><td><pre>\tcfParam<span class=\"token punctuation\">.</span>lpSecurityAttributes <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"155\"></td><td><pre>\tcfParam<span class=\"token punctuation\">.</span>dwCreationDisposition <span class=\"token operator\">=</span> OPEN_ALWAYS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"156\"></td><td><pre>\tcfParam<span class=\"token punctuation\">.</span>dwFlagsAndAttributes <span class=\"token operator\">=</span> FILE_ATTRIBUTE_NORMAL<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"157\"></td><td><pre>\tcfParam<span class=\"token punctuation\">.</span>hTemplateFile <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"158\"></td><td><pre></pre></td></tr><tr><td data-num=\"159\"></td><td><pre>\t<span class=\"token comment\">// 获取 CreateFile 的地址</span></pre></td></tr><tr><td data-num=\"160\"></td><td><pre>\tHMODULE hModule <span class=\"token operator\">=</span> <span class=\"token function\">GetModuleHandle</span><span class=\"token punctuation\">(</span>L<span class=\"token string\">\"kernel32.dll\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"161\"></td><td><pre>\tcfParam<span class=\"token punctuation\">.</span>dwCreateFileAddress <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span><span class=\"token function\">GetProcAddress</span><span class=\"token punctuation\">(</span>hModule<span class=\"token punctuation\">,</span> <span class=\"token string\">\"CreateFileW\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"162\"></td><td><pre></pre></td></tr><tr><td data-num=\"163\"></td><td><pre></pre></td></tr><tr><td data-num=\"164\"></td><td><pre>\t<span class=\"token comment\">// 开始复制到目标进程</span></pre></td></tr><tr><td data-num=\"165\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"166\"></td><td><pre>\t<span class=\"token comment\">// 拷贝文件名</span></pre></td></tr><tr><td data-num=\"167\"></td><td><pre>\t<span class=\"token function\">WriteProcessMemory</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"168\"></td><td><pre>\t\thProcess<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"169\"></td><td><pre>\t\tMemAddressOfFileName<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"170\"></td><td><pre>\t\tlpFilePathName<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"171\"></td><td><pre>\t\t<span class=\"token function\">_tcslen</span><span class=\"token punctuation\">(</span>lpFilePathName<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"172\"></td><td><pre>\t\t<span class=\"token constant\">NULL</span></pre></td></tr><tr><td data-num=\"173\"></td><td><pre>\t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"174\"></td><td><pre>\t<span class=\"token comment\">// 拷贝线程函数</span></pre></td></tr><tr><td data-num=\"175\"></td><td><pre>\t<span class=\"token comment\">// </span></pre></td></tr><tr><td data-num=\"176\"></td><td><pre>\t<span class=\"token comment\">// 修改线程函数起始地址</span></pre></td></tr><tr><td data-num=\"177\"></td><td><pre>\tDWORD dwFunAddr <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>CreateFileThreadProc<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"178\"></td><td><pre>\t<span class=\"token comment\">// 间接 CALL</span></pre></td></tr><tr><td data-num=\"179\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>BYTE<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>dwFunAddr<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0xE9</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"180\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"181\"></td><td><pre>\t\tdwFunAddr <span class=\"token operator\">=</span> dwFunAddr <span class=\"token operator\">+</span> <span class=\"token number\">5</span> <span class=\"token operator\">+</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>DWORD<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>dwFunAddr <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"182\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"183\"></td><td><pre></pre></td></tr><tr><td data-num=\"184\"></td><td><pre></pre></td></tr><tr><td data-num=\"185\"></td><td><pre>\t<span class=\"token function\">WriteProcessMemory</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"186\"></td><td><pre>\t\thProcess<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"187\"></td><td><pre>\t\tMemAddressOfThreadProc<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"188\"></td><td><pre>\t\t<span class=\"token punctuation\">(</span>LPVOID<span class=\"token punctuation\">)</span>dwFunAddr<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"189\"></td><td><pre>\t\t<span class=\"token number\">0x400</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"190\"></td><td><pre>\t\t<span class=\"token constant\">NULL</span></pre></td></tr><tr><td data-num=\"191\"></td><td><pre>\t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"192\"></td><td><pre>\t<span class=\"token comment\">// 拷贝参数</span></pre></td></tr><tr><td data-num=\"193\"></td><td><pre>\t<span class=\"token function\">WriteProcessMemory</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"194\"></td><td><pre>\t\thProcess<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"195\"></td><td><pre>\t\tMemAddressOfParam<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"196\"></td><td><pre>\t\t<span class=\"token operator\">&amp;</span>cfParam<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"197\"></td><td><pre>\t\t<span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>CreateFileParam<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"198\"></td><td><pre>\t\t<span class=\"token constant\">NULL</span></pre></td></tr><tr><td data-num=\"199\"></td><td><pre>\t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"200\"></td><td><pre></pre></td></tr><tr><td data-num=\"201\"></td><td><pre></pre></td></tr><tr><td data-num=\"202\"></td><td><pre>\t<span class=\"token comment\">// 创建远程线程</span></pre></td></tr><tr><td data-num=\"203\"></td><td><pre></pre></td></tr><tr><td data-num=\"204\"></td><td><pre>\tDWORD dwThreadId<span class=\"token punctuation\">;</span><span class=\"token comment\">// 返回线程 id, 失败则为 NULL</span></pre></td></tr><tr><td data-num=\"205\"></td><td><pre>\t<span class=\"token comment\">// 如果成功，返回新线程句柄，失败则为 NULL</span></pre></td></tr><tr><td data-num=\"206\"></td><td><pre>\tHANDLE hThread <span class=\"token operator\">=</span> <span class=\"token function\">CreateRemoteThread</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"207\"></td><td><pre>\t\thProcess<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"208\"></td><td><pre>\t\t<span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"209\"></td><td><pre>\t\t<span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"210\"></td><td><pre>\t\t<span class=\"token punctuation\">(</span>LPTHREAD_START_ROUTINE<span class=\"token punctuation\">)</span>MemAddressOfThreadProc<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"211\"></td><td><pre>\t\tMemAddressOfParam<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"212\"></td><td><pre>\t\t<span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"213\"></td><td><pre>\t\t<span class=\"token operator\">&amp;</span>dwThreadId</pre></td></tr><tr><td data-num=\"214\"></td><td><pre>\t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"215\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hThread <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"216\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"217\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"CreateRemoteThread Error!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"218\"></td><td><pre>\t\t<span class=\"token function\">CloseHandle</span><span class=\"token punctuation\">(</span>hProcess<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"219\"></td><td><pre>\t\t<span class=\"token function\">CloseHandle</span><span class=\"token punctuation\">(</span>hModule<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"220\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> FALSE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"221\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"222\"></td><td><pre>\t<span class=\"token comment\">//. 关闭资源</span></pre></td></tr><tr><td data-num=\"223\"></td><td><pre>\t<span class=\"token function\">CloseHandle</span><span class=\"token punctuation\">(</span>hProcess<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"224\"></td><td><pre>\t<span class=\"token function\">CloseHandle</span><span class=\"token punctuation\">(</span>hThread<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"225\"></td><td><pre>\t<span class=\"token keyword\">return</span> TRUE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"226\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"227\"></td><td><pre></pre></td></tr><tr><td data-num=\"228\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"229\"></td><td><pre>\tLPCTSTR CreateFileName <span class=\"token operator\">=</span>  L<span class=\"token string\">\"F:\\\\000Users\\\\Desktop\\\\test.txt\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"230\"></td><td><pre>\t<span class=\"token function\">RemoteCreateFile</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"231\"></td><td><pre>\t\t<span class=\"token function\">ByNameGetPid</span><span class=\"token punctuation\">(</span>L<span class=\"token string\">\"LittleGame.exe\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"232\"></td><td><pre>\t\tCreateFileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"233\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"234\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>写代码并不复杂，运行的时候碰到了很多问题。</p>\n<p>搞了整整一天，还重写了几次，VS2019 的坑也踩了好多。最后功夫不负有心人：</p>\n<p><img data-src=\"image002.png\" alt=\"\" /></p>\n<h1 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h1>\n<p>理解了海哥说的话：了解 C 和硬编码后，Win32 汇编能做的，C 一样能做。</p>\n",
            "tags": [
                "代码注入"
            ]
        }
    ]
}