<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>Or0kit • Posts by &#34;段描述符&#34; tag</title>
        <link>https://Or0kit.github.io</link>
        <description>临渊羡鱼，不如退而结网</description>
        <language>zh-CN</language>
        <pubDate>Thu, 29 Jul 2021 21:25:00 +0800</pubDate>
        <lastBuildDate>Thu, 29 Jul 2021 21:25:00 +0800</lastBuildDate>
        <category>Drozer</category>
        <category>Algolia</category>
        <category>同义词替换</category>
        <category>xpath</category>
        <category>win32api</category>
        <category>WOW64</category>
        <category>windows消息机制</category>
        <category>虚拟内存</category>
        <category>jsDelivr</category>
        <category>First blog</category>
        <category>markdown 学习</category>
        <category>Android</category>
        <category>替换密钥</category>
        <category>数论基础</category>
        <category>ADB</category>
        <category>雷电模拟器</category>
        <category>Hadoop</category>
        <category>IDA</category>
        <category>Windows逆向</category>
        <category>SSH隧道</category>
        <category>url</category>
        <category>http</category>
        <category>Nginx</category>
        <category>Linux</category>
        <category>CentOS7配置vsftp</category>
        <category>Psad</category>
        <category>fwsnort</category>
        <category>应急响应</category>
        <category>x86汇编指令</category>
        <category>逆向</category>
        <category>IDA学习</category>
        <category>恶意代码分析实战入门</category>
        <category>静态分析基础</category>
        <category>动态分析技术基础</category>
        <category>加壳</category>
        <category>脱壳</category>
        <category>C++壳</category>
        <category>ESP寻址</category>
        <category>定位Win32窗口回调函数</category>
        <category>HOOK攻防</category>
        <category>瞬时HOOK过检测</category>
        <category>INLINE-HOOK</category>
        <category>IAT HOOK</category>
        <category>INLINE HOOK</category>
        <category>进程监控</category>
        <category>模块隐藏</category>
        <category>进程通信</category>
        <category>tlhelp32.h</category>
        <category>进程遍历</category>
        <category>模块遍历</category>
        <category>TEB</category>
        <category>PEB</category>
        <category>R3层断链</category>
        <category>外挂原理</category>
        <category>DLL注入之进程间通信</category>
        <category>Win临界区</category>
        <category>Win互斥体</category>
        <category>内存映射文件</category>
        <category>内存映射共享</category>
        <category>写拷贝</category>
        <category>Win事件</category>
        <category>线程同步</category>
        <category>Win子窗口控件</category>
        <category>win32文件函数</category>
        <category>代码注入</category>
        <category>窗口程序</category>
        <category>消息机制</category>
        <category>消息类型</category>
        <category>私有内存</category>
        <category>共享内存</category>
        <category>设备对象</category>
        <category>DC设备上下文</category>
        <category>图形对象</category>
        <category>创建线程</category>
        <category>线程控制</category>
        <category>线程相关API</category>
        <category>线程上下文</category>
        <category>CONTEXT结构体</category>
        <category>物理内存</category>
        <category>Windows进程</category>
        <category>句柄表</category>
        <category>远程线程函数</category>
        <category>远程线程</category>
        <category>DLL注入</category>
        <category>DLL注入相关函数</category>
        <category>WinMain函数</category>
        <category>调用约定</category>
        <category>我的GetProcAddress</category>
        <category>资源文件</category>
        <category>消息断点</category>
        <category>通用控件</category>
        <category>WM_NOTIFY消息类型</category>
        <category>MFC</category>
        <category>PE查看器</category>
        <category>PE课后作业</category>
        <category>RVA与FOA</category>
        <category>PE结构</category>
        <category>DOS头属性说明</category>
        <category>标准PE头属性说明</category>
        <category>扩展PE头属性说明</category>
        <category>节表属性说明</category>
        <category>空白区添加代码</category>
        <category>合并节</category>
        <category>导入表</category>
        <category>注入</category>
        <category>导入表注入</category>
        <category>导出表</category>
        <category>新增节</category>
        <category>移动NT头</category>
        <category>扩大节</category>
        <category>移动导出表</category>
        <category>移动重定位表</category>
        <category>重定位表</category>
        <category>静态链接库</category>
        <category>动态链接库</category>
        <category>句柄</category>
        <category>button</category>
        <category>单选框</category>
        <category>复选框件</category>
        <category>Edit</category>
        <category>Combo Box</category>
        <category>Tab</category>
        <category>ListCtrl</category>
        <category>MFC的本质</category>
        <category>MFC的层次结构图</category>
        <category>手动创建一个MFC程序</category>
        <category>MFC的初始化过程</category>
        <category>MFC运行时类型识别</category>
        <category>关键字static</category>
        <category>关键字const</category>
        <category>MFC动态创建</category>
        <category>MFC消息映射</category>
        <category>结构体AFX_MSGMAP_ENTRY</category>
        <category>结构体AFX_MSGM</category>
        <category>MFC的三大类消息</category>
        <category>数据传输</category>
        <category>ini文件的读写</category>
        <category>python</category>
        <category>SSH</category>
        <category>python文件读取</category>
        <category>数据分析</category>
        <category>socket</category>
        <category>数据库编程</category>
        <category>python内置属性</category>
        <category>multiprocessing</category>
        <category>threading</category>
        <category>scrapy</category>
        <category>测试</category>
        <category>BHP</category>
        <category>Python的import功能</category>
        <category>木马</category>
        <category>STL</category>
        <category>Vector容器</category>
        <category>Deque容器</category>
        <category>List容器</category>
        <category>Set容器</category>
        <category>Multiset容器</category>
        <category>Map容器</category>
        <category>Multimap容器</category>
        <category>Stack容器</category>
        <category>Queue容器</category>
        <category>STL算法</category>
        <category>STL迭代器</category>
        <category>CobaltStrike</category>
        <category>RedTeam</category>
        <category>Apeache</category>
        <category>Nmap</category>
        <category>php</category>
        <category>guestbook</category>
        <category>SQLmap</category>
        <category>apache</category>
        <category>log</category>
        <category>mysql主键</category>
        <category>CSRF</category>
        <category>SSRF</category>
        <category>业务逻辑漏洞</category>
        <category>xss</category>
        <category>webshell流量特征</category>
        <category>虚拟网卡</category>
        <category>0环与3环的通信（常规方法）</category>
        <category>内核空间</category>
        <category>内核模块</category>
        <category>遍历内核模块</category>
        <category>定位未导出函数PspTiminateProcess</category>
        <category>内核编程基础</category>
        <category>ANSI_STRING</category>
        <category>UNICODE_STRING</category>
        <category>内核内存</category>
        <category>上下文环境</category>
        <category>中断请求级别</category>
        <category>链表</category>
        <category>自旋锁</category>
        <category>注册表</category>
        <category>地址空间</category>
        <category>文件操作</category>
        <category>线程与事件</category>
        <category>内核重载</category>
        <category>驱动调试</category>
        <category>配置VS2019+WDK10</category>
        <category>第一个驱动程序</category>
        <category>调试驱动程序</category>
        <category>OpenSCManager</category>
        <category>CreateService</category>
        <category>APC的本质</category>
        <category>APC的备用队列</category>
        <category>消息队列</category>
        <category>PsConvertToGuiThread</category>
        <category>win32k.sys</category>
        <category>GUI线程</category>
        <category>窗口程序的创建</category>
        <category>消息循环</category>
        <category>线性地址的管理</category>
        <category>VAD树</category>
        <category>_MMVAD</category>
        <category>_MMVAD_FLAGS</category>
        <category>VirtualAlloc</category>
        <category>MEM_COMMIT与MEM_RESERVE</category>
        <category>malloc</category>
        <category>堆内存</category>
        <category>栈内存</category>
        <category>全局区内存</category>
        <category>共享物理页</category>
        <category>共享文件</category>
        <category>LoadLibrary的本质</category>
        <category>MmAddPhysicalMemoryEx</category>
        <category>缺页异常</category>
        <category>临界区</category>
        <category>KPCR结构体</category>
        <category>等待链表</category>
        <category>调度链表</category>
        <category>模拟线程切换</category>
        <category>模拟挂起与恢复函数</category>
        <category>进程的创建</category>
        <category>获取当前进程</category>
        <category>ETHREAD</category>
        <category>KTHREAD</category>
        <category>EPROCESS</category>
        <category>KPROCESS</category>
        <category>2-9-9-12分页</category>
        <category>PAE</category>
        <category>PDPTE</category>
        <category>PDE</category>
        <category>PTE</category>
        <category>XD标志位</category>
        <category>逆向分析MmIsAddressValid函数(2-9-9-12)</category>
        <category>PWT</category>
        <category>PDT</category>
        <category>TLB</category>
        <category>CPU缓存</category>
        <category>INVLPG指令</category>
        <category>全局页</category>
        <category>ShadowWalker</category>
        <category>中断</category>
        <category>异常</category>
        <category>CLI指令</category>
        <category>STI指令</category>
        <category>INT2</category>
        <category>INT8</category>
        <category>中断门描述符</category>
        <category>IDT</category>
        <category>提权</category>
        <category>TSS</category>
        <category>跨段跳转流程</category>
        <category>JMP FAR指令</category>
        <category>任务门</category>
        <category>LDT段描述符</category>
        <category>LDT</category>
        <category>CR0</category>
        <category>CR2</category>
        <category>CR4</category>
        <category>CRL</category>
        <category>DPL</category>
        <category>RPL</category>
        <category>段寄存器结构</category>
        <category>段描述符</category>
        <category>段选择子</category>
        <category>GDT表</category>
        <category>调用门</category>
        <category>调用门描述符</category>
        <category>逆向分析MmIsAddressValid函数</category>
        <category>error C2143</category>
        <category>error C2275</category>
        <category>CALL与CALL FAR</category>
        <category>陷阱门描述符</category>
        <category>页目录表基址</category>
        <category>页表的基址</category>
        <category>0地址执行ShellCode</category>
        <category>10-10-12分页</category>
        <category>PDE_PTE</category>
        <category>物理页</category>
        <category>SSDT HOOK</category>
        <category>OpenProcess</category>
        <category>系统服务表</category>
        <category>SSDT</category>
        <category>SSDT HOOK隐藏</category>
        <category>API进出内核</category>
        <category>系统调用阶段总结</category>
        <category>网络安全法</category>
        <category>ASCII</category>
        <category>GBK</category>
        <category>ANSI</category>
        <category>Unicode</category>
        <category>UTF-8</category>
        <category>URL 编码/解码</category>
        <category>十进制</category>
        <category>二进制</category>
        <category>十六进制</category>
        <category>内存</category>
        <category>编写ShellCode实现IAT HOOK</category>
        <category>ShellCode原则</category>
        <category>傀儡进程加密壳</category>
        <category>ZwUnmapViewOfSection函数</category>
        <category>加载图标</category>
        <category>提取图标</category>
        <category>资源表</category>
        <category>MFC命令传递</category>
        <category>远控界面编写</category>
        <category>HTML</category>
        <category>文件包含</category>
        <category>sql注入</category>
        <category>经典定长指令</category>
        <category>经典变长指令</category>
        <category>指令前缀</category>
        <category>进程句柄表</category>
        <category>全局句柄表</category>
        <category>KAPC</category>
        <category>QueueUserAPC</category>
        <category>NtQueueApcThread</category>
        <category>KeInitializeApc</category>
        <category>KeInsertQueueApc</category>
        <category>KiInsertQueueApc</category>
        <category>消息队列与线程</category>
        <category>Windows线程切换</category>
        <category>KiSwapContext</category>
        <category>SwapContext</category>
        <category>时钟中断</category>
        <category>时间片管理</category>
        <category>线程切换与TSS</category>
        <category>线程切换与FS</category>
        <category>线程切换与线程优先级</category>
        <category>快速调用</category>
        <category>中断调用</category>
        <category>分析ReadProcessMemory</category>
        <category>KiFastSystemCall</category>
        <category>KiIntSystemCall</category>
        <category>重写3环</category>
        <category>文件上传</category>
        <category>隐藏驱动</category>
        <category>IopLoadDriver</category>
        <category>延迟过程调用</category>
        <category>进程挂靠</category>
        <category>跨进程读写内存</category>
        <category>APC</category>
        <category>逆向分析NtReadVirtualMemory</category>
        <category>逆向分析NtWriteVIrtualMemory</category>
        <category>AD-Attack-Defense</category>
        <category>payload</category>
        <category>sysenter指令</category>
        <category>KiFastCallEntry函数</category>
        <category>KiSystemService函数</category>
        <category>Trap_Frame</category>
        <category>web安全</category>
        <category>Pentest</category>
        <item>
            <guid isPermalink="true">https://or0kit.github.io/Bin/Core/WindowsXp/Protect-Mode/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F-%E6%AE%B5%E5%AF%84%E5%AD%98%E5%99%A8%E7%BB%93%E6%9E%84%E3%80%81%E6%AE%B5%E6%8F%8F%E8%BF%B0%E7%AC%A6%E3%80%81%E6%AE%B5%E9%80%89%E6%8B%A9%E5%AD%90/</guid>
            <title>保护模式--段寄存器结构、段描述符、段选择子</title>
            <link>https://or0kit.github.io/Bin/Core/WindowsXp/Protect-Mode/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F-%E6%AE%B5%E5%AF%84%E5%AD%98%E5%99%A8%E7%BB%93%E6%9E%84%E3%80%81%E6%AE%B5%E6%8F%8F%E8%BF%B0%E7%AC%A6%E3%80%81%E6%AE%B5%E9%80%89%E6%8B%A9%E5%AD%90/</link>
            <category>段寄存器结构</category>
            <category>段描述符</category>
            <category>段选择子</category>
            <category>GDT表</category>
            <pubDate>Thu, 29 Jul 2021 21:25:00 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;段寄存器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#段寄存器&#34;&gt;#&lt;/a&gt; 段寄存器&lt;/h1&gt;
&lt;p&gt;什么是段寄存器，有哪些段寄存器&lt;/p&gt;
&lt;p&gt;当我们用汇编读写某一个地址时： &lt;code&gt;mov dword ptr ds:[0x123456],eax&lt;/code&gt; &lt;br /&gt;
 我们真正读写的地址是： &lt;code&gt;ds.base + 0x123456&lt;/code&gt; &lt;br /&gt;
 &lt;code&gt;ES&lt;/code&gt;   &lt;code&gt;CS&lt;/code&gt;   &lt;code&gt;SS&lt;/code&gt;   &lt;code&gt;DS&lt;/code&gt;   &lt;code&gt;FS&lt;/code&gt;   &lt;code&gt;GS&lt;/code&gt;   &lt;code&gt;LDTR&lt;/code&gt;   &lt;code&gt;TR&lt;/code&gt;  共 8 个&lt;/p&gt;
&lt;p&gt;代码段寄存器 CS（Code Segment）&lt;br /&gt;
存放当前正在运行的程序代码所在段的段基址，表示当前使用的指令代码可以从该段寄存器指定的存储器段中取得，相应的偏移量则由 IP 提供。&lt;/p&gt;
&lt;p&gt;数据段寄存器 DS（Data Segment）&lt;br /&gt;
指出当前程序使用的数据所存放段的最低地址，即存放数据段的段基址。&lt;/p&gt;
&lt;p&gt;堆栈段寄存器 SS（Stack Segment）&lt;br /&gt;
指出当前堆栈的底部地址，即存放堆栈段的段基址。&lt;/p&gt;
&lt;p&gt;附加段寄存器 ES（Extra Segment）&lt;br /&gt;
指出当前程序使用附加数据段的段基址，该段是串操作指令中目的串所在的段。&lt;/p&gt;
&lt;p&gt;FS、GS 是从 80386 开始增加的，没有全称。&lt;/p&gt;
&lt;p&gt;FS,GS 是 80386 起增加的两个辅助段寄存器，在这之前只有一个辅助段寄存器 ES, 增加这两个寄存器是为了减轻 ES 寄存器的负担，并能更好地配合适用于通用寄存器组的基址和变址寄存器。&lt;/p&gt;
&lt;p&gt;寄存器 FS 和 GS 是段寄存器。它们没有处理器定义的目的，而是由操作系统运行它们来赋予目的。&lt;br /&gt;
附加段寄存器，F 为上一个附加段寄存器字母 E 后的字母，没有对应的名称&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;FS&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;指向一种被称为线程信息块（TEB）的结构，这种结构是由内核在创建线程时创建的，用于支持操作系统相关功能、服务和 API&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;GS&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;附加段寄存器，G 为上一个附加段寄存器字母 F 后的字母，没有对应的名称&lt;/p&gt;
&lt;p&gt;在 32 位 Windows 上 GS 保留供将来使用&lt;/p&gt;
&lt;p&gt;在 x64 模式下，FS 和 GS 段寄存器已交换&lt;/p&gt;
&lt;p&gt;Win64 使用 GS 的原因是该 FS 寄存器用于 32 位兼容性层（称为 Wow64）&lt;/p&gt;
&lt;p&gt;32 位应用程序永远不会导致 GS 更改，而 64 位应用程序永远不会导致 FS 更改&lt;/p&gt;
&lt;p&gt;注意，在 Win64 和 Wow64 中 GS 是非零的，这可以用来检测一个 32 位应用程序是否在 64 位 Windows 中运行，在一个 “真正 “的 32 位 Windows 中 GS 总是零&lt;/p&gt;
&lt;h2 id=&#34;段寄存器结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#段寄存器结构&#34;&gt;#&lt;/a&gt; 段寄存器结构&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;image001.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;段寄存器中有 16 位是可见部分，有 80 位是不可见部分，一共 96 位。&lt;br /&gt;
可见部分为 16 位的 Selector 部分&lt;br /&gt;
 16 位的 Attribute 为这个段寄存器的属性，它的意义为：表示该段寄存器是可读还是可写还是可执行的。&lt;br /&gt;
32 位的 Base 表示该段是从哪里开始的。&lt;br /&gt;
32 位的 Limit 表示整个段的长度有多少。&lt;/p&gt;
&lt;h2 id=&#34;段寄存器的读写&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#段寄存器的读写&#34;&gt;#&lt;/a&gt; 段寄存器的读写&lt;/h2&gt;
&lt;p&gt;读段寄存器的时候只能够读 16 位。&lt;br /&gt;
比如： &lt;code&gt;mov ax,es&lt;/code&gt;  只能读 16 位的可见部分&lt;/p&gt;
&lt;p&gt;读写 LDTR 的指令为： &lt;code&gt;SLDT/LLDT&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;读写 TR 的指令为： &lt;code&gt;STR/LTR&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;写段寄存器的时候写的是 96 位。&lt;br /&gt;
比如： &lt;code&gt;mov ds,ax&lt;/code&gt;  写时是写 96 位&lt;/p&gt;
&lt;h2 id=&#34;加载段描述符至段寄存器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#加载段描述符至段寄存器&#34;&gt;#&lt;/a&gt; 加载段描述符至段寄存器&lt;/h2&gt;
&lt;p&gt;除了 MOV 指令，还可以使用 LES、LSS、LDS、LFS、LGS 指令修改段寄存器&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;char&lt;/span&gt; buffer&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;__asm&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  les ecx&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;fword ptr ds&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;buffer&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;// 高 2 个字节给 es, 低四个字节给 ecx&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;段寄存器属性简介&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#段寄存器属性简介&#34;&gt;#&lt;/a&gt; 段寄存器属性简介&lt;/h2&gt;
&lt;p&gt;段寄存器 | Selector | Attribute    | Base       | Limit&lt;/p&gt;
&lt;p&gt;GS 寄存器 Windows 并没有使用。&lt;/p&gt;
&lt;h2 id=&#34;gdt全局描述符表-ldt局部描述符表&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#gdt全局描述符表-ldt局部描述符表&#34;&gt;#&lt;/a&gt; GDT (全局描述符表) LDT (局部描述符表)&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;LDT 表在 Windows 中并没有使用。&lt;/strong&gt;&lt;br /&gt;
当我们执行类似  &lt;code&gt;mov ds,ax&lt;/code&gt;  指令时，CPU 会查表，根据  &lt;code&gt;ax&lt;/code&gt;  的值来决定查找  &lt;code&gt;GDT&lt;/code&gt;  还是  &lt;code&gt;LDT&lt;/code&gt; , 查找表的什么位置，查出多少数据。&lt;br /&gt;
 &lt;code&gt;gdtr&lt;/code&gt;  寄存器中存储了  &lt;code&gt;GDT&lt;/code&gt;  表的起始地址和  &lt;code&gt;gdt&lt;/code&gt;  表中的长度&lt;br /&gt;
 gdtr 是 48 位的寄存器，其中 32 位存储的这张表的位置，16 位存储的这张表的大小。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;在 windbg 中查看&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;r gdtr //gdt表的存储位置
r gdtl //gdt表的大小
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;image002.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;每次从  &lt;code&gt;GDT&lt;/code&gt;  表中查表：每 8 个字节为一个&lt;strong&gt;段描述符&lt;/strong&gt;。&lt;/p&gt;
&lt;h1 id=&#34;段选择子&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#段选择子&#34;&gt;#&lt;/a&gt; 段选择子&lt;/h1&gt;
&lt;p&gt;段选择子是一个 16 位的段描述符，该描述符指向了定义该段的段描述符.&lt;/p&gt;
&lt;h2 id=&#34;段选择子和段寄存器的对应关系&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#段选择子和段寄存器的对应关系&#34;&gt;#&lt;/a&gt; 段选择子和段寄存器的对应关系&lt;/h2&gt;
&lt;p&gt;对应可见部分的 16 位既段寄存器中的 Selector。&lt;/p&gt;
&lt;h2 id=&#34;段选择子的结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#段选择子的结构&#34;&gt;#&lt;/a&gt; 段选择子的结构&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;image009.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;RPL：请求特权级别&lt;br /&gt;
 TI：TI=0 查 GDT 表；TI=1 查 LDT 表&lt;br /&gt;
 Index：处理器将索引值乘以 8 在加上 GDT 或者 LDT 的基地址，就是要加载的段描述符&lt;/p&gt;
&lt;h1 id=&#34;段描述符&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#段描述符&#34;&gt;#&lt;/a&gt; 段描述符&lt;/h1&gt;
&lt;h2 id=&#34;段描述符的结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#段描述符的结构&#34;&gt;#&lt;/a&gt; 段描述符的结构&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;image003.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;16 位的 Attribute 对应段寄存器中高四字节从 8 位开始到第 23 位结束。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;32 位的 Base 包含了三个部分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;高四字节的第 24 位到第 31 部分&lt;/li&gt;
&lt;li&gt;高四字节的第 0 位到第 7 位&lt;/li&gt;
&lt;li&gt;低四字节的第 16 位到 31 位&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;32 位的 Limit 包括两部分一共二十位（最大值为 FFFFF）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;高四字节的 16 位到 19 位&lt;/li&gt;
&lt;li&gt;低四个字节的 0 位到 15 位&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;段描述符的属性&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#段描述符的属性&#34;&gt;#&lt;/a&gt; 段描述符的属性&lt;/h2&gt;
&lt;p&gt;段寄存器的值是通过段描述符填写的，但段描述符只有 64 位，可是要填写的有 80 位，如何从 64 位变成 80 位呢？&lt;/p&gt;
&lt;h3 id=&#34;p位&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#p位&#34;&gt;#&lt;/a&gt; P 位&lt;/h3&gt;
&lt;p&gt;P 位 位于段描述符的高四个字节的第 15 位（下标为 15）的位置.&lt;/p&gt;
&lt;p&gt;P = 1 段描述符有效&lt;br /&gt;
 P = 0 段描述符无效&lt;/p&gt;
&lt;p&gt;当使用指令将段描述符加载至段寄存器的时候，CPU 第一个检测的就是 P 位，当 P 位为 0 时就不做继续的检测了。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image004.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;在段描述符中，只要看这一行的数是否小于 8，若小于 8，则证明 P 位 = 0 段描述符无效。&lt;/p&gt;
&lt;h3 id=&#34;g位&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#g位&#34;&gt;#&lt;/a&gt; G 位&lt;/h3&gt;
&lt;p&gt;G 位 位于段描述符的高四个字节的第 23 位（下标为 23）的位置。&lt;/p&gt;
&lt;p&gt;G=0 的时候：表示 Limit 字段单位（粒度）是字节：最大值就是 limit 域。&lt;br /&gt;
G=1 的时候：表示 Limit 字段单位（粒度）是 4KB：最大值就是 limit 域 * 0x4K + 0xFFF。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image005.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;在段描述符中，只要看这一行的数是否小于 8，若小于 8，则证明 G 位 = 0。&lt;/p&gt;
&lt;h3 id=&#34;s位&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#s位&#34;&gt;#&lt;/a&gt; S 位&lt;/h3&gt;
&lt;p&gt;S 位 位于段描述符的高四个字节的第 12 位（下标为 12）的位置。&lt;/p&gt;
&lt;p&gt;S = 1 时表示： 代码段或者数据段描述符&lt;br /&gt;
 S = 0 时表示： 系统段描述符&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;十六进制下，从右到左看高字节的第五位，若是偶数则 S 位 = 0，若是奇数则 S 位 = 1。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;type域&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#type域&#34;&gt;#&lt;/a&gt; type 域&lt;/h3&gt;
&lt;p&gt;type 域 包含段描述符的高四个字节的 8、9、10、11 共四位。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image006.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;数据段&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数据段&#34;&gt;#&lt;/a&gt; 数据段&lt;/h4&gt;
&lt;p&gt;当 s 位为 1 且当 type 域中的 11 位为 0 时，表示是数据段。&lt;br /&gt;
其中图中的 A、W、E 分别代表不同的意思&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image007.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;E 位表示拓展位，为 0 表示向上拓展，为 1 表示向下拓展。&lt;br /&gt;
向上拓展：有效范围为 &lt;code&gt;fs.Base ~ fs.Base+Limit&lt;/code&gt; &lt;br /&gt;
 向下拓展：有效范围除了 &lt;code&gt;fs.Base ~ fs.Base+Limit&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&#34;代码段&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#代码段&#34;&gt;#&lt;/a&gt; 代码段&lt;/h4&gt;
&lt;p&gt;当 s 位为 1 且当 type 域中的 11 位为 1 时，表示是代码段。&lt;br /&gt;
其中图中的 A、R、C 分别代表不同的意思&lt;/p&gt;
&lt;p&gt;A 代表是否访问过，未访问过为 0，访问过为 1。&lt;br /&gt;
R 代表是否可读位，表示该段是否可以读。&lt;br /&gt;
C 代表一致位：C = 1 表示一致代码段 ，C = 0 表示非一致代码段&lt;/p&gt;
&lt;h4 id=&#34;系统描述符&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#系统描述符&#34;&gt;#&lt;/a&gt; 系统描述符&lt;/h4&gt;
&lt;p&gt;当 s 位为 0 的时候，表示该段描述符为系统描述符。系统描述符有分为以下类型：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image008.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;dpl&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#dpl&#34;&gt;#&lt;/a&gt; DPL&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;描述：&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;DPL 存储在段描述符中，规定了访问所在段描述符所需要的特权级别是多少&lt;br /&gt;
 DPL 数值越大，访问所在段描述符所需要的权限越低&lt;br /&gt;
注意：在 Windows 中，DPL 只会出现两种情况，要么全为 0，要么全为 1&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;十六进制下，从右到左看高字节的第五位，若是 &lt;code&gt;8&lt;/code&gt;  或 &lt;code&gt;9&lt;/code&gt;  则 DPL=0，若是 &lt;code&gt;E&lt;/code&gt;  或 &lt;code&gt;F&lt;/code&gt;  则 DPL=3。&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;例：&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;若 AX 指向的段描述符的 DPL=0，但当前程序的 CPL=3，那么这条指令是不会成功的！&lt;/p&gt;
&lt;h3 id=&#34;db位&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#db位&#34;&gt;#&lt;/a&gt; D\B 位&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;情况 1：对 CS 段的影响&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;D=1：采用 32 位寻址方式&lt;br /&gt;
 D=0：采用 16 位寻址方式&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;情况 2：对 SS 段的影响&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;D=1：隐式堆栈访问指令（如：PUSH POP CALL）使用 32 位堆栈指针寄存器 ESP&lt;br /&gt;
D=0：隐式堆栈访问指令（如：PUSH POP CALL）使用 16 位堆栈指针寄存器 SP&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;情况 3：向下拓展的数据段&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;D=1：段上限为 4GB&lt;br /&gt;
D=0：段上限为 64KB&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;image010.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;reference&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#reference&#34;&gt;#&lt;/a&gt; Reference&lt;/h2&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2OTE2MTc5L2FydGljbGUvZGV0YWlscy85MTU1MDYzMQ==&#34;&gt;https://blog.csdn.net/qq_36916179/article/details/91550631&lt;/span&gt;&lt;br /&gt;
&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2OTE2MTc5L2FydGljbGUvZGV0YWlscy85MTYyMTk0Nw==&#34;&gt;https://blog.csdn.net/qq_36916179/article/details/91621947&lt;/span&gt;&lt;br /&gt;
&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxOTg4NDQ4L2FydGljbGUvZGV0YWlscy8xMDI1NjMzMjU=&#34;&gt;https://blog.csdn.net/qq_41988448/article/details/102563325&lt;/span&gt;&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
