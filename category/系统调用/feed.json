{
    "version": "https://jsonfeed.org/version/1",
    "title": "Or0kit • All posts by \"系统调用\" category",
    "description": "临渊羡鱼，不如退而结网",
    "home_page_url": "https://Or0kit.github.io",
    "items": [
        {
            "id": "https://or0kit.github.io/Bin/Core/WindowsXp/SystemCall/%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8-%E6%80%BB%E7%BB%93/",
            "url": "https://or0kit.github.io/Bin/Core/WindowsXp/SystemCall/%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8-%E6%80%BB%E7%BB%93/",
            "title": "系统调用-总结",
            "date_published": "2022-03-13T06:37:38.000Z",
            "content_html": "<h1 id=\"楔子\"><a class=\"anchor\" href=\"#楔子\">#</a> 楔子</h1>\n<p>学完 APC 后，梳理一下学到的知识，看看能不能从 3 环进 0 环再回 3 环来。</p>\n<h1 id=\"流程梳理\"><a class=\"anchor\" href=\"#流程梳理\">#</a> 流程梳理</h1>\n<p>以 R3 函数  <code>ReadProcessMemory</code>  为例</p>\n<p>先分析函数调用流程</p>\n<p><code>ReadProcessMemory</code>  调用了从 ntdll 中 导入的函数  <code>NtReadVirtualMemory</code></p>\n<p>在  <code>ntdll</code>  中查看 此函数</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>_NtReadVirtualMemory@20 proc near    \t\t\t\t</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>mov     eax, 0BAh       ; NtReadVirtualMemory\t\t\t\t</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>mov     edx, 7FFE0300h\t\t\t\t</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> call    dword ptr [edx]\t\t\t\t</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>retn    14h</pre></td></tr></table></figure><p>可以看到这个函数只有短短几行汇编代码：给 eax 赋个值，然后给 edx 个地址，然后 call 一下 edx 指向的地址，然后就平栈（由于 STDCALL 调用约定）返回了。</p>\n<p>首先我们要知道 这里调用的是什么函数</p>\n<p>在 0x7FFE0000 的位置是一个名为  <code>KUSER_SHARED_DATA</code>  的结构体，这个结构体与 0 环 FFDF0000 存储的数据一模一样，是由同一个物理页映射的。\t\t\t\t\t\t\t\t\t\t\t\t\t<br />\n在其偏移 0x300 的位置有一个成员其存储的就是调用方式，如今的 CPU 都支持快速调用了，所以一般存储的是 ntdll 中的 KiFastSystemCall 函数</p>\n<p>查看这个函数</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>_KiFastSystemCall@0 proc near \t\t\t\t\t\t\t\t\t\t\t\t\t</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>mov edx, esp\t\t\t\t\t\t\t\t\t\t\t\t\t</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> sysenter</pre></td></tr></table></figure><p>将 esp 存储在 edx 中后就执行了 sysenter 指令</p>\n<p>sysenter 指令就是取出了存储在 MSR 寄存器中的 CS、ESP、EIP，这是提升权限所必须的</p>\n<p>这个时候 EIP 改变了，在我的计算机上 MSR [176] 中存储的地址是内核文件中的 KiFastCallEntry 函数</p>\n<p>快速调用进 0 环后，0 环的堆栈指向 TrapFrame+0x78 的位置，接下来的\t\t\t\t\t\t<br />\n就是填充这个结构了。\t\t\t\t\t\t<br />\n填充完毕后，也就是保存好 3 环的堆栈和寄存器环境后\t\t\t\t\t\t<br />\n准备调用 0 环的函数。\t\t\t\t\t\t<br />\n调用完函数后 ebp 和 esp 又指向了 TrapFrame</p>\n<p>判断 ETHREAD 是否有用户 APC 需要处理，如果有就处理 APC，一直到没有用户 APC 需要处理，这里是一个循环。<br />\n没有用户 APC 需要处理后就跳出了循环</p>\n<p>后面的一些汇编代码我在内核中跟了一下。</p>\n<p>如下：</p>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<p>以上汇编代码只有在最后跳到了 KiSystemCallExit2 中 其他判断都没跳。</p>\n",
            "tags": [
                "API进出内核"
            ]
        },
        {
            "id": "https://or0kit.github.io/Bin/Core/WindowsXp/SystemCall/%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8-%E8%AF%BE%E5%90%8E%E7%BB%83%E4%B9%A0/",
            "url": "https://or0kit.github.io/Bin/Core/WindowsXp/SystemCall/%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8-%E8%AF%BE%E5%90%8E%E7%BB%83%E4%B9%A0/",
            "title": "系统调用-课后练习",
            "date_published": "2022-01-01T00:52:24.000Z",
            "content_html": "<h1 id=\"系统调用阶段总结\"><a class=\"anchor\" href=\"#系统调用阶段总结\">#</a> 系统调用阶段总结</h1>\n<p>把本阶段的课后作业练习一下</p>\n<h2 id=\"在ssdt表中追加一个函数地址\"><a class=\"anchor\" href=\"#在ssdt表中追加一个函数地址\">#</a> 在 SSDT 表中追加一个函数地址</h2>\n<p>在 SSDT 表中追加一个函数地址 (NtReadVirtualMemory), 自己编写 API 的 3 环部分调用这个新增的函数 (注意：使用 2-9-9-12 分页)。</p>\n<p><strong>发现函数表后面刚好有四个字节，然后就是参数表了，这四个字节的值为： <code>0000011c </code> 刚好是函数表函数的个数，覆盖后暂时没出问题。</strong></p>\n<h3 id=\"代码如下\"><a class=\"anchor\" href=\"#代码如下\">#</a> 代码如下</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 在 SSDT 表中追加一个函数地址 (NtReadVirtualMemory), 自己编写 API 的 3 环部分调用这个新增的函数 (注意：使用 2-9-9-12 分页)。</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;ntifs.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>VOID <span class=\"token function\">DriverUnload</span><span class=\"token punctuation\">(</span>PDRIVER_OBJECT pDriver<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token comment\">// 恢复懒得写了</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是驱动，我卸载了\\t\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>VOID <span class=\"token function\">PageProtectOn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t__asm <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\tmov  eax<span class=\"token punctuation\">,</span> cr0</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\tor eax<span class=\"token punctuation\">,</span> <span class=\"token number\">10000</span>h</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\tmov  cr0<span class=\"token punctuation\">,</span> eax</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\tsti</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>VOID <span class=\"token function\">PageProtectOff</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t__asm <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\tcli</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\tmov  eax<span class=\"token punctuation\">,</span> cr0</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\tand eax<span class=\"token punctuation\">,</span> not <span class=\"token number\">10000</span>h</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\tmov  cr0<span class=\"token punctuation\">,</span> eax</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>VOID <span class=\"token function\">ModifySSDT</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token keyword\">extern</span> PULONG KeServiceDescriptorTable<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token comment\">// 获取函数表的指针</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\tPULONG pFuncTable <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PULONG<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>KeServiceDescriptorTable<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pFuncTable:%p\\t\\n\"</span><span class=\"token punctuation\">,</span> pFuncTable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t<span class=\"token comment\">// 获取函数个数的指针</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\tPULONG pLimit <span class=\"token operator\">=</span> KeServiceDescriptorTable <span class=\"token operator\">+</span> <span class=\"token number\">0x2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"uLimit:%p\\t\\n\"</span><span class=\"token punctuation\">,</span> pLimit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t<span class=\"token comment\">// 获取参数表的指针</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\tPUCHAR pArgumentTable <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>KeServiceDescriptorTable <span class=\"token operator\">+</span> <span class=\"token number\">0x3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pArgumentTable:%p\\t\\n\"</span><span class=\"token punctuation\">,</span> pArgumentTable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t<span class=\"token comment\">// 开始修改</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t<span class=\"token comment\">// 取函数表的后一项的地址，新加的函数就是这个地址，因为索引是从 0 开始的。</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\tPULONG ModifyAddress1 <span class=\"token operator\">=</span> pFuncTable <span class=\"token operator\">+</span> <span class=\"token operator\">*</span>pLimit<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t<span class=\"token comment\">// 取参数表的后一项的地址，新加的函数就是这个地址，因为索引是从 0 开始的。</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\tPUCHAR ModifyAddress2 <span class=\"token operator\">=</span> pArgumentTable <span class=\"token operator\">+</span> <span class=\"token operator\">*</span>pLimit<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ModifyAddress1:%p\\t\\n\"</span><span class=\"token punctuation\">,</span> ModifyAddress1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ModifyAddress2:%p\\t\\n\"</span><span class=\"token punctuation\">,</span> ModifyAddress2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t<span class=\"token comment\">// 修改为 ReadProcessMemory -> NtReadVirtualMemory -> 0xBA</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t<span class=\"token function\">PageProtectOff</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t<span class=\"token operator\">*</span>ModifyAddress1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>ULONG<span class=\"token punctuation\">)</span>pFuncTable<span class=\"token punctuation\">[</span><span class=\"token number\">0xBA</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t<span class=\"token operator\">*</span>pLimit <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t<span class=\"token operator\">*</span>ModifyAddress2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>UCHAR<span class=\"token punctuation\">)</span>pArgumentTable<span class=\"token punctuation\">[</span><span class=\"token number\">0xBA</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t<span class=\"token function\">PageProtectOn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ModifyAddress1:%p\\t\\n\"</span><span class=\"token punctuation\">,</span> ModifyAddress1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*uLimit:%X\\t\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>pLimit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ModifyAddress2:%p\\t\\n\"</span><span class=\"token punctuation\">,</span> ModifyAddress2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>NTSTATUS <span class=\"token function\">DriverEntry</span><span class=\"token punctuation\">(</span>PDRIVER_OBJECT pDriver<span class=\"token punctuation\">,</span> PUNICODE_STRING pRegPath<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\tpDriver<span class=\"token operator\">-></span>DriverUnload <span class=\"token operator\">=</span> DriverUnload<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"68\"></td><td><pre>\t<span class=\"token comment\">// 修改 SSDT 表，增加一项。修改页保护</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\t<span class=\"token function\">ModifySSDT</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre></pre></td></tr><tr><td data-num=\"71\"></td><td><pre></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\t<span class=\"token keyword\">return</span> STATUS_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>R3Call</strong></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">_CRT_SECURE_NO_WARNINGS</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;Windows.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">__declspec</span><span class=\"token punctuation\">(</span>naked<span class=\"token punctuation\">)</span> <span class=\"token keyword\">void</span> <span class=\"token function\">ModZwWriteVirtualMemory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t__asm <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\tmov     eax<span class=\"token punctuation\">,</span> <span class=\"token number\">0x11C</span><span class=\"token punctuation\">;</span> NtReadVirtualMemory</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\tmov     edx<span class=\"token punctuation\">,</span> <span class=\"token number\">7FF</span>E0300h</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\tcall    dword ptr<span class=\"token punctuation\">[</span>edx<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\tretn    <span class=\"token number\">0x14</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>BOOL WINAPI <span class=\"token function\">WriteProcessMemory_FAST</span><span class=\"token punctuation\">(</span>HANDLE hProcess<span class=\"token punctuation\">,</span> LPCVOID lpBaseAddress<span class=\"token punctuation\">,</span> LPVOID lpBuffer<span class=\"token punctuation\">,</span> DWORD nSize<span class=\"token punctuation\">,</span> LPDWORD lpNumberOfBytesWritten<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tLONG NtStatus<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t__asm</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t<span class=\"token comment\">// 模拟 WriteProcessMemory</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\tlea eax<span class=\"token punctuation\">,</span> lpNumberOfBytesWritten<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\tpush eax<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\tpush lpNumberOfBytesWritten<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\tpush nSize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\tpush lpBuffer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\tpush lpBaseAddress<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\tpush hProcess<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\tcall ModZwWriteVirtualMemory</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\tmov NtStatus<span class=\"token punctuation\">,</span> eax<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lpNumberOfBytesWritten <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t<span class=\"token operator\">*</span>lpNumberOfBytesWritten <span class=\"token operator\">=</span> nSize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token comment\">// 错误检查</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>NtStatus <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> FALSE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t<span class=\"token keyword\">return</span> TRUE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token comment\">// 提权函数：提升为 DEBUG 权限</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>BOOL <span class=\"token function\">EnableDebugPrivilege</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\tHANDLE hToken<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\tBOOL fOk <span class=\"token operator\">=</span> FALSE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">OpenProcessToken</span><span class=\"token punctuation\">(</span><span class=\"token function\">GetCurrentProcess</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> TOKEN_ADJUST_PRIVILEGES<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>hToken<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t\tTOKEN_PRIVILEGES tp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t\ttp<span class=\"token punctuation\">.</span>PrivilegeCount <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t\t<span class=\"token function\">LookupPrivilegeValue</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> SE_DEBUG_NAME<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>tp<span class=\"token punctuation\">.</span>Privileges<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>Luid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t\ttp<span class=\"token punctuation\">.</span>Privileges<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>Attributes <span class=\"token operator\">=</span> SE_PRIVILEGE_ENABLED<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t\t<span class=\"token function\">AdjustTokenPrivileges</span><span class=\"token punctuation\">(</span>hToken<span class=\"token punctuation\">,</span> FALSE<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>tp<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>tp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t\tfOk <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token function\">GetLastError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> ERROR_SUCCESS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t\t<span class=\"token function\">CloseHandle</span><span class=\"token punctuation\">(</span>hToken<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t<span class=\"token keyword\">return</span> fOk<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t<span class=\"token function\">EnableDebugPrivilege</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\tDWORD pid<span class=\"token punctuation\">,</span> addr<span class=\"token punctuation\">,</span> dwRead<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t<span class=\"token keyword\">char</span> buff<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"依次输入PID和要读的线性地址（均为16进制）...\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%x %x\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>pid<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\t<span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"buff:%p\\n\"</span><span class=\"token punctuation\">,</span> buff<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\t<span class=\"token function\">WriteProcessMemory_FAST</span><span class=\"token punctuation\">(</span><span class=\"token function\">OpenProcess</span><span class=\"token punctuation\">(</span>PROCESS_ALL_ACCESS<span class=\"token punctuation\">,</span> FALSE<span class=\"token punctuation\">,</span> pid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>LPCVOID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>addr<span class=\"token operator\">+</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> buff<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>dwRead<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"读取了%d个字节，内容是: \\\"%s\\\"\\n\"</span><span class=\"token punctuation\">,</span> dwRead<span class=\"token punctuation\">,</span> buff<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\t<span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>TestReWriteR3ApI</strong></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;windows.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;Tlhelp32.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 获取进程自身的 PID</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    HANDLE hSnapshot <span class=\"token operator\">=</span> <span class=\"token function\">CreateToolhelp32Snapshot</span><span class=\"token punctuation\">(</span>TH32CS_SNAPPROCESS<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>INVALID_HANDLE_VALUE <span class=\"token operator\">==</span> hSnapshot<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    PROCESSENTRY32 pi<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    pi<span class=\"token punctuation\">.</span>dwSize <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>PROCESSENTRY32<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 第一次使用必须初始化成员</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    BOOL bRet <span class=\"token operator\">=</span> <span class=\"token function\">Process32First</span><span class=\"token punctuation\">(</span>hSnapshot<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>pi<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>bRet<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">strcmp</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"TestReWriteR3API.exe\"</span><span class=\"token punctuation\">,</span> pi<span class=\"token punctuation\">.</span>szExeFile<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"进程ID = %X \\r\\n\"</span><span class=\"token punctuation\">,</span> pi<span class=\"token punctuation\">.</span>th32ProcessID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        bRet <span class=\"token operator\">=</span> <span class=\"token function\">Process32Next</span><span class=\"token punctuation\">(</span>hSnapshot<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>pi<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token function\">CloseHandle</span><span class=\"token punctuation\">(</span>hSnapshot<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">char</span> str<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"hahahaha\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%p--%s\\n\"</span><span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>截图：</p>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<h2 id=\"ssdt-hook-实现进程保护\"><a class=\"anchor\" href=\"#ssdt-hook-实现进程保护\">#</a> SSDT HOOK 实现进程保护</h2>\n<p>将系统服务表中某个函数改成自己的函数，使任务管理器右键无法关闭自己，只有点击自己的关闭按钮才可以正常关闭。</p>\n<p>方法是 SSDT HOOK NtTerminateProcess 函数，进行一系列的判断。就保护记事本 (notepad.exe) 了。</p>\n<p>个人思路是：</p>\n<blockquote>\n<p>先判断要结束的进程是否是记事本 (notepad.exe), 不是则调用老的 TerminateProcess 函数。如果是在判断当前进程是否是记事本 (notepad.exe)。</p>\n</blockquote>\n<p>判断当前进程是否是记事本 (notepad.exe)：<br />\n1、当前进程句柄的值是 0xFFFFFFFF ，只需要判断一下进程句柄是否是 0xFFFFFFFF 就知道是否是当前进程自己点击关闭按钮了。<br />\n2、调用 API，获取记事本的 pid，然后再 hook 的函数中获取当前进程的 pid，进行判断。<br />\n3、查 KPCR -&gt; 获取当前线程结构体 -&gt; 获取当前进程结构体 -&gt; 查当前进程的名字、也可以查当前进程的 pid // 因为我写博客写的有点晚，写这篇博客的时候进程与线程已经学了一些了。</p>\n<h3 id=\"代码如下-2\"><a class=\"anchor\" href=\"#代码如下-2\">#</a> 代码如下</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;ntddk.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">//SST 系统服务表</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_KSYSTEM_SERVICE_TABLE</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tPULONG FuncTable<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tULONG Count<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tULONG ServiceLimit<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tPUCHAR ArgumentTable<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span>KSST<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span> PKSST<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">//SSDT </span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_SSDT</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tKSST ServiceTable<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\tKSST ServiceTableShadow<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\tKSST un1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\tKSST un2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span>SSDT<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span> PSSDT<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">// 函数指针</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token function\">BOOLEAN</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>pTerminateProcess<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>\tHANDLE hProcess<span class=\"token punctuation\">,</span> ULONG uExitCode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">// 获取 SSDT 的导出变量</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">extern</span> PSSDT KeServiceDescriptorTable<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>ULONG OldNtTerminateProcess<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token comment\">// 声明函数</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>VOID <span class=\"token function\">DriverUnload</span><span class=\"token punctuation\">(</span>PDRIVER_OBJECT pDriver<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>NTSTATUS <span class=\"token function\">MyTerminateProcess</span><span class=\"token punctuation\">(</span>HANDLE hProcess<span class=\"token punctuation\">,</span> ULONG uExitCode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>VOID <span class=\"token function\">HookFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>VOID <span class=\"token function\">UnHookFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>VOID <span class=\"token function\">PageProtectOn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>VOID <span class=\"token function\">PageProtectOff</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>VOID <span class=\"token function\">DriverUnload</span><span class=\"token punctuation\">(</span>PDRIVER_OBJECT pDriver<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t<span class=\"token function\">UnHookFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是驱动我卸载了\\t\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>VOID <span class=\"token function\">PageProtectOn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t__asm <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\tmov  eax<span class=\"token punctuation\">,</span> cr0</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t\tor eax<span class=\"token punctuation\">,</span> <span class=\"token number\">10000</span>h</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t\tmov  cr0<span class=\"token punctuation\">,</span> eax</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t\tsti</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>VOID <span class=\"token function\">PageProtectOff</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t__asm <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t\tcli</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t\tmov  eax<span class=\"token punctuation\">,</span> cr0</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t\tand eax<span class=\"token punctuation\">,</span> not <span class=\"token number\">10000</span>h</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t\tmov  cr0<span class=\"token punctuation\">,</span> eax</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>VOID <span class=\"token function\">HookFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The start of the hook!\\t\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t<span class=\"token function\">PageProtectOff</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\tKeServiceDescriptorTable<span class=\"token operator\">-></span>ServiceTable<span class=\"token punctuation\">.</span>FuncTable<span class=\"token punctuation\">[</span><span class=\"token number\">0x101</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>ULONG<span class=\"token punctuation\">)</span>MyTerminateProcess<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\t<span class=\"token function\">PageProtectOn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>VOID <span class=\"token function\">UnHookFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\t<span class=\"token function\">PageProtectOff</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>\tKeServiceDescriptorTable<span class=\"token operator\">-></span>ServiceTable<span class=\"token punctuation\">.</span>FuncTable<span class=\"token punctuation\">[</span><span class=\"token number\">0x101</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> OldNtTerminateProcess<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>\t<span class=\"token function\">PageProtectOn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The end of the hook!\\t\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>NTSTATUS <span class=\"token function\">MyTerminateProcess</span><span class=\"token punctuation\">(</span>HANDLE hProcess<span class=\"token punctuation\">,</span>\tULONG uExitCode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>\tULONG NotepadPid<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>\tPUCHAR pImageFileName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>\tULONG pEprocess<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>\tNTSTATUS status <span class=\"token operator\">=</span> <span class=\"token function\">ObReferenceObjectByHandle</span><span class=\"token punctuation\">(</span>hProcess<span class=\"token punctuation\">,</span> FILE_READ_DATA<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> KernelMode<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>PVOID<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>pEprocess<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">NT_SUCCESS</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> status<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>\t<span class=\"token comment\">// 判断要关闭的是否是记事本 (notepad.exe)，这里进程名的字符字符串最大是 16，所以不用担心越界</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>\tpImageFileName <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PUCHAR<span class=\"token punctuation\">)</span>pEprocess <span class=\"token operator\">+</span> <span class=\"token number\">0x174</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">strcmp</span><span class=\"token punctuation\">(</span>pImageFileName<span class=\"token punctuation\">,</span> <span class=\"token string\">\"notepad.exe\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hProcess <span class=\"token operator\">==</span> <span class=\"token punctuation\">(</span>HANDLE<span class=\"token punctuation\">)</span><span class=\"token number\">0xFFFFFFFF</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>\t\t\t<span class=\"token comment\">// 通过关闭按钮关闭</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>pTerminateProcess<span class=\"token punctuation\">)</span>OldNtTerminateProcess<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>hProcess<span class=\"token punctuation\">,</span> uExitCode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>\t\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>\t\t\t<span class=\"token comment\">// 通过任务管理器关闭</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>\t\t\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Terminate denied. %s: NtTerminateProcess(%x, %x)\\n\"</span><span class=\"token punctuation\">,</span> pImageFileName<span class=\"token punctuation\">,</span> hProcess<span class=\"token punctuation\">,</span> uExitCode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> STATUS_ACCESS_DENIED<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"106\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>pTerminateProcess<span class=\"token punctuation\">)</span>OldNtTerminateProcess<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>hProcess<span class=\"token punctuation\">,</span> uExitCode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>NTSTATUS <span class=\"token function\">DriverEntry</span><span class=\"token punctuation\">(</span>PDRIVER_OBJECT pDriver<span class=\"token punctuation\">,</span> PUNICODE_STRING pRegPath<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>\tpDriver<span class=\"token operator\">-></span>DriverUnload <span class=\"token operator\">=</span> DriverUnload<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>\t<span class=\"token comment\">// 定义老的 NtTerminateProcess</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>\tOldNtTerminateProcess <span class=\"token operator\">=</span> KeServiceDescriptorTable<span class=\"token operator\">-></span>ServiceTable<span class=\"token punctuation\">.</span>FuncTable<span class=\"token punctuation\">[</span><span class=\"token number\">0x101</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"OldNtTerminateProcess:%X\\t\\n\"</span><span class=\"token punctuation\">,</span> OldNtTerminateProcess<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>\t<span class=\"token comment\">//SSDT HOOK TerminateProcess</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>\t<span class=\"token function\">HookFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>\t<span class=\"token keyword\">return</span> STATUS_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>截图：</p>\n<p><img data-src=\"image002.png\" alt=\"\" /></p>\n<p><strong>发现在这里点击结束任务</strong>，还是可以结束。</p>\n<p><img data-src=\"image003.png\" alt=\"\" /></p>\n<p>不论是点击结束进程或是进程树，都无法结束</p>\n<p><img data-src=\"image004.png\" alt=\"\" /></p>\n<p>驱动卸载后，hook 也就卸载了。</p>\n<h2 id=\"ssdt-hook-实现-findwindowa-监视器\"><a class=\"anchor\" href=\"#ssdt-hook-实现-findwindowa-监视器\">#</a> SSDT HOOK 实现 FindWindowA 监视器</h2>\n<p>FinWindowsA 是 Shadow 表中的函数。</p>\n<p>3 环调用流程分析</p>\n<p>FinWindowsA -&gt; 调用一系列的 ASCII 转 Unicode 函数，最终调用 -&gt; NtUserFindWindowEx</p>\n<p>传入服务号为 0x117A 。<strong>注意真正的编号还要与 0xFFF 进行与操作</strong>。</p>\n<p>win32k.sys 系统服务表可能会缺页，要在驱动里访问它，做法是创建一个已经调用过 GDI 函数的进程（不一定是窗口程序），然后通过 DeviceIoControl 函数和驱动通信，这样执行驱动代码时所属进程已经给 win32k.sys 系统服务表挂上物理页了，访问就不会蓝屏。这里参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0t3YW5zeS9hcnRpY2xlL2RldGFpbHMvMTA5NTEwNjA2\">https://blog.csdn.net/Kwansy/article/details/109510606</span> 博主的文章，具体要自己逆向创建 GDI 线程的部分，才能清晰。</p>\n<p>并且还可以发现一个细节：<strong>当 3 环程序向驱动发起通信时，驱动所属进程就是 3 环的程序</strong></p>\n<h3 id=\"代码如下-3\"><a class=\"anchor\" href=\"#代码如下-3\">#</a> 代码如下</h3>\n<pre><code class=\"language-c\">\n</code></pre>\n<h1 id=\"reference\"><a class=\"anchor\" href=\"#reference\">#</a> Reference</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0t3YW5zeS9hcnRpY2xlL2RldGFpbHMvMTA5NTEwNjA2\">https://blog.csdn.net/Kwansy/article/details/109510606</span><br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0t3YW5zeS9hcnRpY2xlL2RldGFpbHMvMTA5NDkwNjU3\">https://blog.csdn.net/Kwansy/article/details/109490657</span></p>\n",
            "tags": [
                "系统调用阶段总结"
            ]
        },
        {
            "id": "https://or0kit.github.io/Bin/Core/WindowsXp/SystemCall/%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8-SSDT%E9%9A%90%E8%97%8F-%E6%80%9D%E8%B7%AF-%E5%AE%9E%E6%88%98/",
            "url": "https://or0kit.github.io/Bin/Core/WindowsXp/SystemCall/%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8-SSDT%E9%9A%90%E8%97%8F-%E6%80%9D%E8%B7%AF-%E5%AE%9E%E6%88%98/",
            "title": "系统调用-SSDT HOOK隐藏-思路-实战",
            "date_published": "2022-01-01T00:52:22.000Z",
            "content_html": "<h1 id=\"ssdt-hook隐藏思路\"><a class=\"anchor\" href=\"#ssdt-hook隐藏思路\">#</a> SSDT HOOK 隐藏思路</h1>\n<p>通过逆向分析 API 由 3 环进 0 环的过程，找到其中涉及系统服务表（SST）的位置，可以分析出一些能动手脚的地方。</p>\n<ol>\n<li>\n<p>增加函数项，修改原有代码服务号。</p>\n</li>\n<li>\n<p>修改线程结构体_KTHREAD + E0 （这里存放着 SSDT 的地址），改成我们的自己构造的 SSDT。<br />\n针对的检测是：检测老的 SSDT 有没有被挂钩，但我们不动操作系统的 SSDT 这样就可以绕过了。</p>\n</li>\n</ol>\n<blockquote>\n<p>首先找到进程再找其内的线程结构体，然后修改为我们构造的 SSDT 的地址，既要先拷贝一份 SSDT，并且因为线程可能会被切换，我们要设置一个定时器不停的遍历修改。<br />\n或者修改把线程 E0 赋给 edi 的值，既 INLINE HOOK 修改这里。</p>\n</blockquote>\n<ol start=\"3\">\n<li>系统调用过程中有两个环节是 找到要调用的函数 以及 去调用这个函数，我们可以改找到的函数，改调用的函数。</li>\n</ol>\n<p>另外火哥还说了 改所有线程的 E0，在切换线程的地方 HOOK 等等……。</p>\n<p>在 SSDT 这里能做的前辈们差不多都已经做过了…… 我们主要学习的是思想。・</p>\n<h1 id=\"代码实现\"><a class=\"anchor\" href=\"#代码实现\">#</a> 代码实现</h1>\n<p><strong>Hook.h</strong></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\">once</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ssdt.h\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 被 HOOK 函数的函数指针</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">//HOOK NtOpenProcess 函数</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token function\">NTSTATUS</span><span class=\"token punctuation\">(</span>NTAPI <span class=\"token operator\">*</span>PNTOPENPROCESS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     PHANDLE ProcessHandle<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>     ACCESS_MASK DesiredAccess<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>     POBJECT_ATTRIBUTES ObjectAttributes<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>     PCLIENT_ID ClientId</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">// 函数声明</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>VOID <span class=\"token function\">HookNtOpenProcess</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>VOID <span class=\"token function\">UnHookNtOpenProcess</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>VOID <span class=\"token function\">PageProtectOn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>VOID <span class=\"token function\">PageProtectOff</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>NTSTATUS NTAPI <span class=\"token function\">ModifyNtOpenProcess</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>     PHANDLE ProcessHandle<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>     ACCESS_MASK DesiredAccess<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>     POBJECT_ATTRIBUTES ObjectAttributes<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>     PCLIENT_ID ClientId</pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token comment\">// 原来的函数地址</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>ULONG uOldNtOpenProcess<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong>Hook.c</strong></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"Hook.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>VOID <span class=\"token function\">PageProtectOff</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t__asm</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\tcli<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 关闭中断</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\tmov eax<span class=\"token punctuation\">,</span> cr0<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\tor eax<span class=\"token punctuation\">,</span> <span class=\"token number\">0x10000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// WP 位置 1</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\tmov cr0<span class=\"token punctuation\">,</span> eax<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>VOID <span class=\"token function\">PageProtectOn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t__asm</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\tsti<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 恢复中断</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\tmov eax<span class=\"token punctuation\">,</span> cr0<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\tand eax<span class=\"token punctuation\">,</span> not <span class=\"token number\">0x10000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// WP 位置 0</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\tmov cr0<span class=\"token punctuation\">,</span> eax<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>VOID <span class=\"token function\">HookNtOpenProcess</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The start of the hook!\\t\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token function\">PageProtectOff</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\tMySSDT<span class=\"token operator\">-></span>ServiceTable<span class=\"token punctuation\">.</span>FuncTable<span class=\"token punctuation\">[</span><span class=\"token number\">0x7A</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>ULONG<span class=\"token punctuation\">)</span>ModifyNtOpenProcess<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token function\">PageProtectOn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>VOID <span class=\"token function\">UnHookNtOpenProcess</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token function\">PageProtectOff</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\tMySSDT<span class=\"token operator\">-></span>ServiceTable<span class=\"token punctuation\">.</span>FuncTable<span class=\"token punctuation\">[</span><span class=\"token number\">0x7A</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> uOldNtOpenProcess<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token function\">PageProtectOn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The end of the hook!\\t\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>NTSTATUS NTAPI <span class=\"token function\">ModifyNtOpenProcess</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\tPHANDLE ProcessHandle<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\tACCESS_MASK DesiredAccess<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\tPOBJECT_ATTRIBUTES ObjectAttributes<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\tPCLIENT_ID ClientId</pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"打印NtOpenProcess的参数：%X %X %X %X\\t\\n\"</span><span class=\"token punctuation\">,</span> ProcessHandle<span class=\"token punctuation\">,</span> DesiredAccess<span class=\"token punctuation\">,</span> ObjectAttributes<span class=\"token punctuation\">,</span> ClientId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>PNTOPENPROCESS<span class=\"token punctuation\">)</span>uOldNtOpenProcess<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>ProcessHandle<span class=\"token punctuation\">,</span> DesiredAccess<span class=\"token punctuation\">,</span> ObjectAttributes<span class=\"token punctuation\">,</span> ClientId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>ssdt.h</strong></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\">once</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;ntddk.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">//SST 系统服务表</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_KSYSTEM_SERVICE_TABLE</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tPULONG FuncTable<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tPULONG Count<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tULONG ServiceLimit<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tPUCHAR ArgumentTable<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span>KSST<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span> PKSST<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">//SSDT </span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_SSDT</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tKSST ServiceTable<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\tKSST ServiceTableShadow<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\tKSST un1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\tKSST un2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span>SSDT<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span> PSSDT<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\">// 构造 SSDT</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>PSSDT MySSDT<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>BOOLEAN ThreadFlag<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>HANDLE hThread<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\">// 获取 SSDT 的导出变量</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token keyword\">extern</span> PSSDT KeServiceDescriptorTable<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token comment\">// 声明函数</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>VOID <span class=\"token function\">DriverUnload</span><span class=\"token punctuation\">(</span>PDRIVER_OBJECT pDriver<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>NTSTATUS <span class=\"token function\">DriverEntry</span><span class=\"token punctuation\">(</span>PDRIVER_OBJECT pDriver<span class=\"token punctuation\">,</span> PUNICODE_STRING pRegPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>NTSTATUS <span class=\"token function\">GetCopySSDT</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>ULONG <span class=\"token function\">FindProcess</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> ProcessName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>VOID <span class=\"token function\">TraversalThreadReplaceE0</span><span class=\"token punctuation\">(</span>ULONG eProcess<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>VOID <span class=\"token function\">ResetThreadReplaceE0</span><span class=\"token punctuation\">(</span>ULONG eProc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>VOID <span class=\"token function\">WorkThreadFunc</span><span class=\"token punctuation\">(</span>_In_ PVOID StartContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong>main.c</strong></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">\"Hook.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>VOID <span class=\"token function\">DriverUnload</span><span class=\"token punctuation\">(</span>PDRIVER_OBJECT pDriver<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tThreadFlag <span class=\"token operator\">=</span> FALSE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token comment\">// 确保线程停止</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tLARGE_INTEGER timer <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\ttimer<span class=\"token punctuation\">.</span>QuadPart <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">30</span> <span class=\"token operator\">*</span> <span class=\"token number\">1000</span> <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token function\">KeDelayExecutionThread</span><span class=\"token punctuation\">(</span>KernelMode<span class=\"token punctuation\">,</span> TRUE<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>timer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>MySSDT <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t<span class=\"token function\">ExFreePoolWithTag</span><span class=\"token punctuation\">(</span>MySSDT<span class=\"token operator\">-></span>ServiceTable<span class=\"token punctuation\">.</span>FuncTable<span class=\"token punctuation\">,</span> <span class=\"token string\">'MySF'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\tMySSDT<span class=\"token operator\">-></span>ServiceTable<span class=\"token punctuation\">.</span>FuncTable <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t<span class=\"token function\">ExFreePoolWithTag</span><span class=\"token punctuation\">(</span>MySSDT<span class=\"token punctuation\">,</span> <span class=\"token string\">'MySD'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\tMySSDT <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是驱动，我卸载了\\t\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>NTSTATUS <span class=\"token function\">GetCopySSDT</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token comment\">//DbgPrint(\"KeServiceDescriptorTable:%p\\t\\n\", KeServiceDescriptorTable);</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\tPSSDT SSDTShadow <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PSSDT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>PULONG<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>KeServiceDescriptorTable<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">0x40</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token comment\">//DbgPrint(\"SSDTShadow:%p\\t\\n\", SSDTShadow);</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token comment\">//__asm int 3;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token comment\">// </span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token comment\">// 构造一份 SSDT</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token comment\">// 申请一份 SSDT 大小的内存</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\tMySSDT <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PSSDT<span class=\"token punctuation\">)</span><span class=\"token function\">ExAllocatePoolWithTag</span><span class=\"token punctuation\">(</span>NonPagedPool<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>SSDT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'MySD'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>MySSDT <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MySD ExAllocatePoolWithTag Failed!\\t\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> STATUS_UNSUCCESSFUL<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t<span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>MySSDT<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>SSDT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MySSDT:%p\\t\\n\"</span><span class=\"token punctuation\">,</span> MySSDT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t<span class=\"token comment\">// 申请函数表的内存</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\tMySSDT<span class=\"token operator\">-></span>ServiceTable<span class=\"token punctuation\">.</span>FuncTable <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PULONG<span class=\"token punctuation\">)</span><span class=\"token function\">ExAllocatePoolWithTag</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\tNonPagedPool<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t\tKeServiceDescriptorTable<span class=\"token operator\">-></span>ServiceTable<span class=\"token punctuation\">.</span>ServiceLimit <span class=\"token operator\">*</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t\t<span class=\"token string\">'MySF'</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>MySSDT<span class=\"token operator\">-></span>ServiceTable<span class=\"token punctuation\">.</span>FuncTable <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t\t<span class=\"token function\">ExFreePoolWithTag</span><span class=\"token punctuation\">(</span>MySSDT<span class=\"token punctuation\">,</span> <span class=\"token string\">'MySD'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t\tMySSDT <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MySF ExAllocatePoolWithTag Failed!\\t\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> STATUS_UNSUCCESSFUL<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t<span class=\"token function\">memset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>PVOID<span class=\"token punctuation\">)</span>MySSDT<span class=\"token operator\">-></span>ServiceTable<span class=\"token punctuation\">.</span>FuncTable<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> KeServiceDescriptorTable<span class=\"token operator\">-></span>ServiceTable<span class=\"token punctuation\">.</span>ServiceLimit <span class=\"token operator\">*</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t<span class=\"token comment\">// 拷贝 SSDT</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t<span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>PVOID<span class=\"token punctuation\">)</span>MySSDT<span class=\"token operator\">-></span>ServiceTable<span class=\"token punctuation\">.</span>FuncTable<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>PVOID<span class=\"token punctuation\">)</span>KeServiceDescriptorTable<span class=\"token operator\">-></span>ServiceTable<span class=\"token punctuation\">.</span>FuncTable<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t\tKeServiceDescriptorTable<span class=\"token operator\">-></span>ServiceTable<span class=\"token punctuation\">.</span>ServiceLimit <span class=\"token operator\">*</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\tMySSDT<span class=\"token operator\">-></span>ServiceTable<span class=\"token punctuation\">.</span>ServiceLimit <span class=\"token operator\">=</span> KeServiceDescriptorTable<span class=\"token operator\">-></span>ServiceTable<span class=\"token punctuation\">.</span>ServiceLimit<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\tMySSDT<span class=\"token operator\">-></span>ServiceTable<span class=\"token punctuation\">.</span>ArgumentTable <span class=\"token operator\">=</span> KeServiceDescriptorTable<span class=\"token operator\">-></span>ServiceTable<span class=\"token punctuation\">.</span>ArgumentTable<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t<span class=\"token comment\">// 拷贝 Shadow 表</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t<span class=\"token comment\">// 判断 GUI 函数表是否已经加载，如果不是 GUI 线程，则操作系统不会挂载 GUI 函数表</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>\t<span class=\"token comment\">// 思路判断 Shadwo 函数表的物理页属性</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\t<span class=\"token comment\">//if (影子表中的函数表被挂载了)</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\t<span class=\"token comment\">//&#123;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\t<span class=\"token comment\">//\t// 申请影子表中函数表的内存</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>\t<span class=\"token comment\">//\tMySSDT->ServiceTableShadow.FuncTable = (PULONG)ExAllocatePoolWithTag(</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>\t<span class=\"token comment\">//\t\tNonPagedPool,</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\t<span class=\"token comment\">//\t\tSSDTShadow->ServiceTableShadow.ServiceLimit * 4,</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>\t<span class=\"token comment\">//\t\t'MySH'</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>\t<span class=\"token comment\">//\t);</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>\t<span class=\"token comment\">//\tif (MySSDT->ServiceTableShadow.FuncTable == NULL)</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>\t<span class=\"token comment\">//\t&#123;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>\t<span class=\"token comment\">//\t\tExFreePoolWithTag(MySSDT->ServiceTable.FuncTable, 'MySF');</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>\t<span class=\"token comment\">//\t\tExFreePoolWithTag(MySSDT, 'MySD');</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>\t<span class=\"token comment\">//\t\tDbgPrint(\"MySH ExAllocatePoolWithTag Failed!\\t\\n\");</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>\t<span class=\"token comment\">//\t\treturn STATUS_UNSUCCESSFUL;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>\t<span class=\"token comment\">//\t&#125;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>\t<span class=\"token comment\">//\tmemset((PVOID)MySSDT->ServiceTableShadow.FuncTable, 0, SSDTShadow->ServiceTableShadow.ServiceLimit * 4);</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>\t<span class=\"token comment\">//\tmemcpy((PVOID)MySSDT->ServiceTableShadow.FuncTable, (PVOID)SSDTShadow->ServiceTableShadow.FuncTable,</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>\t<span class=\"token comment\">//\t\tSSDTShadow->ServiceTableShadow.ServiceLimit * 4);</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>\tMySSDT<span class=\"token operator\">-></span>ServiceTableShadow<span class=\"token punctuation\">.</span>FuncTable <span class=\"token operator\">=</span> SSDTShadow<span class=\"token operator\">-></span>ServiceTableShadow<span class=\"token punctuation\">.</span>FuncTable<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>\tMySSDT<span class=\"token operator\">-></span>ServiceTableShadow<span class=\"token punctuation\">.</span>ServiceLimit <span class=\"token operator\">=</span> SSDTShadow<span class=\"token operator\">-></span>ServiceTableShadow<span class=\"token punctuation\">.</span>ServiceLimit<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>\tMySSDT<span class=\"token operator\">-></span>ServiceTableShadow<span class=\"token punctuation\">.</span>ArgumentTable <span class=\"token operator\">=</span> SSDTShadow<span class=\"token operator\">-></span>ServiceTableShadow<span class=\"token punctuation\">.</span>ArgumentTable<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre></pre></td></tr><tr><td data-num=\"94\"></td><td><pre><span class=\"token keyword\">return</span> STATUS_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre></pre></td></tr><tr><td data-num=\"97\"></td><td><pre></pre></td></tr><tr><td data-num=\"98\"></td><td><pre><span class=\"token comment\">// 遍历进程 找到进程</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>ULONG <span class=\"token function\">FindProcess</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> ProcessName<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>\tULONG Pro<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>\t<span class=\"token comment\">// 由 KPCR+0x124 的位置得到当前 CPU 正在处理的线程的结构体的指针，_KTHREAD + 0x44 的位置能够得到此线程的进程结构体的地址</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>\t__asm <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>\t\tmov eax<span class=\"token punctuation\">,</span> fs<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0x124</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>\t\tmov ecx<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>eax <span class=\"token operator\">+</span> <span class=\"token number\">0x44</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>\t\tmov Pro<span class=\"token punctuation\">,</span> ecx<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>\t<span class=\"token comment\">// 进程结构体 EPROCESS +0x88 的位置是一个链接所有进程的双向链表</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>\tPLIST_ENTRY pListProcess <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PLIST_ENTRY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>Pro <span class=\"token operator\">+</span> <span class=\"token number\">0x88</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>\tBOOLEAN Flag <span class=\"token operator\">=</span> FALSE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>\t<span class=\"token comment\">// 遍历进程</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>pListProcess<span class=\"token operator\">-></span>Flink <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span>PLIST_ENTRY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>Pro <span class=\"token operator\">+</span> <span class=\"token number\">0x88</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>\t\t<span class=\"token comment\">//EPROCESS 结构体</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>\t\tULONG NextProcess <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ULONG<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>pListProcess<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">0x88</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"119\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">strcmp</span><span class=\"token punctuation\">(</span>ProcessName<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>PCHAR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>NextProcess <span class=\"token operator\">+</span> <span class=\"token number\">0x174</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>\t\t\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"FindProcess:%s PEPROCESS:%X\\t\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>PCHAR<span class=\"token punctuation\">)</span>NextProcess <span class=\"token operator\">+</span> <span class=\"token number\">0x174</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> NextProcess<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> NextProcess<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>\t\tpListProcess <span class=\"token operator\">=</span> pListProcess<span class=\"token operator\">-></span>Flink<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>VOID <span class=\"token function\">TraversalThreadReplaceE0</span><span class=\"token punctuation\">(</span>ULONG eProc<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>eProc <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>\t\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"eProcess is NULL\\t\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>\t<span class=\"token comment\">// 由进程结构体遍历线程</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>\t<span class=\"token comment\">// 获取线程的双向链表</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>\t<span class=\"token comment\">//+0x190 ThreadListHead   : _LIST_ENTRY [ 0x89ff024c - 0x89dbd56c ]</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>\tPLIST_ENTRY ThreadList <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PLIST_ENTRY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>eProc <span class=\"token operator\">+</span> <span class=\"token number\">0x190</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>\t<span class=\"token comment\">// 找了半天错误 原来是这里没有获取 焯！  PLIST_ENTRY CurrentThreadList = ThreadList</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>\tPLIST_ENTRY CurrentThreadList <span class=\"token operator\">=</span> ThreadList<span class=\"token operator\">-></span>Flink<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>\t<span class=\"token comment\">// 遍历线程</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>\t<span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre>\t\t<span class=\"token comment\">// 获取当前线程结构体的首部</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>\t\tULONG CurrentThread <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>ULONG<span class=\"token punctuation\">)</span>CurrentThreadList <span class=\"token operator\">-</span> <span class=\"token number\">0x22c</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>\t\t<span class=\"token comment\">// 取出线程中存储的 SSDT 的值</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre>\t\tPULONG ServiceTable <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PULONG<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>CurrentThread <span class=\"token operator\">+</span> <span class=\"token number\">0xE0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre>\t\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ServiceTable:%X\\t\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>ServiceTable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"151\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ServiceTable <span class=\"token operator\">==</span> <span class=\"token punctuation\">(</span>PULONG<span class=\"token punctuation\">)</span>MySSDT<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"153\"></td><td><pre>\t\t\t<span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"154\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"155\"></td><td><pre>\t\t<span class=\"token operator\">*</span>ServiceTable <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>ULONG<span class=\"token punctuation\">)</span>MySSDT<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"156\"></td><td><pre>\t\tCurrentThreadList <span class=\"token operator\">=</span> CurrentThreadList<span class=\"token operator\">-></span>Flink<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"157\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>CurrentThreadList<span class=\"token operator\">-></span>Flink <span class=\"token operator\">!=</span> ThreadList<span class=\"token operator\">-></span>Flink<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"158\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"159\"></td><td><pre></pre></td></tr><tr><td data-num=\"160\"></td><td><pre>VOID <span class=\"token function\">ResetThreadReplaceE0</span><span class=\"token punctuation\">(</span>ULONG eProc<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"161\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>eProc <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"162\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"163\"></td><td><pre>\t\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"eProcess is NULL\\t\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"164\"></td><td><pre>\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"165\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"166\"></td><td><pre>\tPLIST_ENTRY ThreadList <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PLIST_ENTRY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>eProc <span class=\"token operator\">+</span> <span class=\"token number\">0x190</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"167\"></td><td><pre>\tPLIST_ENTRY CurrentThreadList <span class=\"token operator\">=</span> ThreadList<span class=\"token operator\">-></span>Flink<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"168\"></td><td><pre>\t<span class=\"token comment\">// 遍历线程</span></pre></td></tr><tr><td data-num=\"169\"></td><td><pre>\t<span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"170\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"171\"></td><td><pre>\t\t<span class=\"token comment\">// 获取当前线程结构体的首部</span></pre></td></tr><tr><td data-num=\"172\"></td><td><pre>\t\tULONG CurrentThread <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>ULONG<span class=\"token punctuation\">)</span>CurrentThreadList <span class=\"token operator\">-</span> <span class=\"token number\">0x22c</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"173\"></td><td><pre>\t\t<span class=\"token comment\">// 取出线程中存储的 SSDT 的值</span></pre></td></tr><tr><td data-num=\"174\"></td><td><pre>\t\tPULONG ServiceTable <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PULONG<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>CurrentThread <span class=\"token operator\">+</span> <span class=\"token number\">0xE0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"175\"></td><td><pre>\t\tULONG ShadowTable <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>PULONG<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>KeServiceDescriptorTable<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">0x40</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"176\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ServiceTable <span class=\"token operator\">==</span> <span class=\"token punctuation\">(</span>PULONG<span class=\"token punctuation\">)</span>ShadowTable<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"177\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"178\"></td><td><pre>\t\t\t<span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"179\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"180\"></td><td><pre>\t\t<span class=\"token operator\">*</span>ServiceTable <span class=\"token operator\">=</span> ShadowTable<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"181\"></td><td><pre>\t\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ServiceTable:%X\\t\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>ServiceTable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"182\"></td><td><pre>\t\tCurrentThreadList <span class=\"token operator\">=</span> CurrentThreadList<span class=\"token operator\">-></span>Flink<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"183\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>CurrentThreadList<span class=\"token operator\">-></span>Flink <span class=\"token operator\">!=</span> ThreadList<span class=\"token operator\">-></span>Flink<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"184\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"185\"></td><td><pre></pre></td></tr><tr><td data-num=\"186\"></td><td><pre>VOID <span class=\"token function\">WorkThreadFunc</span><span class=\"token punctuation\">(</span>PVOID StartContext<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"187\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"188\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"189\"></td><td><pre>\tThreadFlag <span class=\"token operator\">=</span> TRUE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"190\"></td><td><pre>\tULONG pProcess<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"191\"></td><td><pre>\tLARGE_INTEGER timer <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"192\"></td><td><pre>\ttimer<span class=\"token punctuation\">.</span>QuadPart <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">10</span> <span class=\"token operator\">*</span> <span class=\"token number\">1000</span> <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"193\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"WorkThreadFunc 开始运行!\\t\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"194\"></td><td><pre></pre></td></tr><tr><td data-num=\"195\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>ThreadFlag<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"196\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"197\"></td><td><pre>\t\t<span class=\"token function\">KeDelayExecutionThread</span><span class=\"token punctuation\">(</span>KernelMode<span class=\"token punctuation\">,</span> FALSE<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>timer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"198\"></td><td><pre>\t\tpProcess <span class=\"token operator\">=</span> <span class=\"token function\">FindProcess</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Dbgview.exe\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 一直查找此进程，因为此进程可能会被关闭</span></pre></td></tr><tr><td data-num=\"199\"></td><td><pre>\t\t<span class=\"token function\">TraversalThreadReplaceE0</span><span class=\"token punctuation\">(</span>pProcess<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"200\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"201\"></td><td><pre></pre></td></tr><tr><td data-num=\"202\"></td><td><pre>\t<span class=\"token function\">ResetThreadReplaceE0</span><span class=\"token punctuation\">(</span>pProcess<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"203\"></td><td><pre>\t<span class=\"token function\">UnHookNtOpenProcess</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"204\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"WorkThreadFunc 结束运行!\\t\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"205\"></td><td><pre>\t<span class=\"token function\">ZwClose</span><span class=\"token punctuation\">(</span>hThread<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"206\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"207\"></td><td><pre></pre></td></tr><tr><td data-num=\"208\"></td><td><pre></pre></td></tr><tr><td data-num=\"209\"></td><td><pre>NTSTATUS <span class=\"token function\">DriverEntry</span><span class=\"token punctuation\">(</span>PDRIVER_OBJECT pDriver<span class=\"token punctuation\">,</span> PUNICODE_STRING pRegPath<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"210\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"211\"></td><td><pre>\tpDriver<span class=\"token operator\">-></span>DriverUnload <span class=\"token operator\">=</span> DriverUnload<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"212\"></td><td><pre></pre></td></tr><tr><td data-num=\"213\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是驱动，我运行了!\\t\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"214\"></td><td><pre>\t<span class=\"token comment\">// 拷贝一份 SSDT 表</span></pre></td></tr><tr><td data-num=\"215\"></td><td><pre></pre></td></tr><tr><td data-num=\"216\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">NT_SUCCESS</span><span class=\"token punctuation\">(</span><span class=\"token function\">GetCopySSDT</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"217\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"218\"></td><td><pre>\t\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GetCopySSDT Failed!\\t\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"219\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> STATUS_UNSUCCESSFUL<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"220\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"221\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"222\"></td><td><pre>\t<span class=\"token comment\">// 打印一下 MySSDT</span></pre></td></tr><tr><td data-num=\"223\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MySSDT:%p\\t\\n\"</span><span class=\"token punctuation\">,</span> MySSDT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"224\"></td><td><pre>\t<span class=\"token comment\">// 定义老的 NtOpenProcess 地址</span></pre></td></tr><tr><td data-num=\"225\"></td><td><pre>\tuOldNtOpenProcess <span class=\"token operator\">=</span> MySSDT<span class=\"token operator\">-></span>ServiceTable<span class=\"token punctuation\">.</span>FuncTable<span class=\"token punctuation\">[</span><span class=\"token number\">0x7A</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"226\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"uOldNtOpenProcess:%p\\t\\n\"</span><span class=\"token punctuation\">,</span> uOldNtOpenProcess<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"227\"></td><td><pre>\t<span class=\"token comment\">// 开始 Hook</span></pre></td></tr><tr><td data-num=\"228\"></td><td><pre>\t<span class=\"token function\">HookNtOpenProcess</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"229\"></td><td><pre>\t<span class=\"token comment\">// 遍历进程 找到进程</span></pre></td></tr><tr><td data-num=\"230\"></td><td><pre>\t<span class=\"token comment\">// 遍历线程 替换 E0 位置</span></pre></td></tr><tr><td data-num=\"231\"></td><td><pre>\t<span class=\"token comment\">// 设置定时器，每隔 10 毫秒修改一次</span></pre></td></tr><tr><td data-num=\"232\"></td><td><pre>\t<span class=\"token comment\">// 结束时恢复 E0，结束 HOOK，关闭句柄</span></pre></td></tr><tr><td data-num=\"233\"></td><td><pre>\t<span class=\"token keyword\">extern</span> HANDLE hThread<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"234\"></td><td><pre>\t<span class=\"token function\">PsCreateSystemThread</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>hThread<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> WorkThreadFunc<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"235\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"236\"></td><td><pre>\t<span class=\"token keyword\">return</span> STATUS_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"237\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"运行截图\"><a class=\"anchor\" href=\"#运行截图\">#</a> 运行截图</h2>\n<p><img data-src=\"image001.png\" alt=\"\" /><br />\n<img data-src=\"image002.png\" alt=\"\" /></p>\n<h1 id=\"反思\"><a class=\"anchor\" href=\"#反思\">#</a> 反思</h1>\n<p>学过知识没有记住，要多做练习。</p>\n",
            "tags": [
                "SSDT HOOK隐藏"
            ]
        },
        {
            "id": "https://or0kit.github.io/Bin/Core/WindowsXp/SystemCall/%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8-SSDT%E5%B8%B8%E8%A7%84HOOK/",
            "url": "https://or0kit.github.io/Bin/Core/WindowsXp/SystemCall/%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8-SSDT%E5%B8%B8%E8%A7%84HOOK/",
            "title": "系统调用-SSDT常规HOOK",
            "date_published": "2021-12-27T09:25:16.000Z",
            "content_html": "<h1 id=\"ssdt-routinehook\"><a class=\"anchor\" href=\"#ssdt-routinehook\">#</a> SSDT-RoutineHook</h1>\n<p>常规 hook 思路：</p>\n<ol>\n<li>如何获取 SSDT 的地址？</li>\n</ol>\n<blockquote>\n<p>通过内核文件的导出变量获取</p>\n</blockquote>\n<ol start=\"2\">\n<li>如何获取函数表的地址？</li>\n</ol>\n<blockquote>\n<p>定义 SST（系统服务表）结构体</p>\n</blockquote>\n<ol start=\"3\">\n<li>如何修改函数所在物理页的页属性？</li>\n</ol>\n<p>SSDT 所在的物理页是只读的，如果要修改，先要修改页属性为可写：</p>\n<ul>\n<li>第一种办法，用我们学过的知识，通过页表基址直接修改：<strong>这种方法无论是单核还是多核都适用</strong>。</li>\n</ul>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>RCR4 <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x00000020</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 说明是 2-9-9-12 分页</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token function\">KdPrint</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2-9-9-12分页 %p\\n\"</span><span class=\"token punctuation\">,</span>RCR4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token function\">KdPrint</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"PTE1 %p\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>DWORD<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xC0000000</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>HookFunAddr <span class=\"token operator\">>></span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x007FFFF8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>DWORD64<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xC0000000</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>HookFunAddr <span class=\"token operator\">>></span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x007FFFF8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|=</span> <span class=\"token number\">0x02</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token function\">KdPrint</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"PTE1 %p\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>DWORD<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xC0000000</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>HookFunAddr <span class=\"token operator\">>></span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x007FFFF8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 说明是 10-10-12 分页</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token function\">KdPrint</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"10-10-12分页\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token function\">KdPrint</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"PTE1 %p\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>DWORD<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xC0000000</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>HookFunAddr <span class=\"token operator\">>></span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x003FFFFC</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>DWORD<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xC0000000</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>HookFunAddr <span class=\"token operator\">>></span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x003FFFFC</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|=</span> <span class=\"token number\">0x02</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token function\">KdPrint</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"PTE2 %p\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>DWORD<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xC0000000</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>HookFunAddr <span class=\"token operator\">>></span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x003FFFFC</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>通过修改 CR0 寄存器</li>\n</ul>\n<p>CR0 寄存器的第 16 位叫做保护属性位，控制着页的读或写属性。这种方法在单核下是稳定的，但多核就不一定了，因为切换 CPU 后寄存器也变成其他核的寄存器了。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>VOID <span class=\"token function\">PageProtectOn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t__asm<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t\tmov  eax<span class=\"token punctuation\">,</span>cr0</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t\tor   eax<span class=\"token punctuation\">,</span><span class=\"token number\">10000</span>h</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t\tmov  cr0<span class=\"token punctuation\">,</span>eax</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t\tsti</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>VOID <span class=\"token function\">PageProtectOff</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\t\t\t\t</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t__asm<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t\tcli\t\t\t\t\t</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t\tmov  eax<span class=\"token punctuation\">,</span>cr0</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t\tand  eax<span class=\"token punctuation\">,</span>not <span class=\"token number\">10000</span>h</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t\tmov  cr0<span class=\"token punctuation\">,</span>eax</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"代码如下\"><a class=\"anchor\" href=\"#代码如下\">#</a> 代码如下</h1>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//SSDT HOOK 框架</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;ntddk.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;ntstatus.h></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">/************************************************************************/</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">/* 类型声明                                                             */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">/************************************************************************/</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 系统服务表</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_KSYSTEM_SERVICE_TABLE</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tPULONG ServiceTableBase<span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\">// 函数地址表（SSDT）</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tPULONG ServiceCounterTableBase<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// SSDT 函数被调用的次数</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tULONG NumberOfService<span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">// 函数个数</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tPULONG ParamTableBase<span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">// 函数参数表（SSPT）</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span> KSYSTEM_SERVICE_TABLE<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span> PKSYSTEM_SERVICE_TABLE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">//SSDT</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_KSERVICE_TABLE_DESCRIPTOR</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\tKSYSTEM_SERVICE_TABLE ntoskrnl<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 内核函数</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\tKSYSTEM_SERVICE_TABLE win32k<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">//win32k.sys 函数</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\tKSYSTEM_SERVICE_TABLE unUsed1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\tKSYSTEM_SERVICE_TABLE unUsed2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span> KSERVICE_TABLE_DESCRIPTOR<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span> PKSERVICE_TABLE_DESCRIPTOR<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token comment\">// 定义 被 hook 的函数的函数指针</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token comment\">// NTOPENPROCESS</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token function\">NTSTATUS</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>NTOPENPROCESS<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>PHANDLE ProcessHandle<span class=\"token punctuation\">,</span> ACCESS_MASK DesiredAccess<span class=\"token punctuation\">,</span> POBJECT_ATTRIBUTES ObjectAttributes<span class=\"token punctuation\">,</span> PCLIENT_ID ClientId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token comment\">/************************************************************************/</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token comment\">/* 函数声明                                                             */</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token comment\">/************************************************************************/</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>VOID <span class=\"token function\">DriverUnload</span><span class=\"token punctuation\">(</span>PDRIVER_OBJECT pDriver<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>NTSTATUS <span class=\"token function\">DriverEntry</span><span class=\"token punctuation\">(</span>PDRIVER_OBJECT pDriver<span class=\"token punctuation\">,</span> PUNICODE_STRING reg_path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>VOID <span class=\"token function\">PageProtectOff</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>VOID <span class=\"token function\">PageProtectOn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>VOID <span class=\"token function\">HookNtOpenProcess</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>VOID <span class=\"token function\">UnHookNtOpenProcess</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>NTSTATUS <span class=\"token function\">HbgNtOpenProcess</span><span class=\"token punctuation\">(</span>PHANDLE  ProcessHandle<span class=\"token punctuation\">,</span> ACCESS_MASK  DesiredAccess<span class=\"token punctuation\">,</span> POBJECT_ATTRIBUTES  ObjectAttributes<span class=\"token punctuation\">,</span> PCLIENT_ID  ClientId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token comment\">/************************************************************************/</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token comment\">/* 全局变量                                                             */</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token comment\">/************************************************************************/</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token comment\">//ntkrnlpa 或 ntoskrnl 中导出的全局变量</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token keyword\">extern</span> PKSERVICE_TABLE_DESCRIPTOR KeServiceDescriptorTable<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token comment\">// 旧的函数地址</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>ULONG uOldNtOpenProcess<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre></pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token comment\">/************************************************************************/</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token comment\">/* 函数定义                                                             */</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token comment\">/************************************************************************/</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre></pre></td></tr><tr><td data-num=\"62\"></td><td><pre><span class=\"token comment\">// 驱动入口</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>NTSTATUS <span class=\"token function\">DriverEntry</span><span class=\"token punctuation\">(</span>PDRIVER_OBJECT pDriver<span class=\"token punctuation\">,</span> PUNICODE_STRING reg_path<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t<span class=\"token comment\">// HOOK</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t<span class=\"token function\">HookNtOpenProcess</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>\tpDriver<span class=\"token operator\">-></span>DriverUnload <span class=\"token operator\">=</span> DriverUnload<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\t<span class=\"token keyword\">return</span> STATUS_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre></pre></td></tr><tr><td data-num=\"73\"></td><td><pre><span class=\"token comment\">// 卸载驱动</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>VOID <span class=\"token function\">DriverUnload</span><span class=\"token punctuation\">(</span>PDRIVER_OBJECT pDriver<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>\t<span class=\"token function\">UnHookNtOpenProcess</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Driver unloaded.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre></pre></td></tr><tr><td data-num=\"80\"></td><td><pre><span class=\"token comment\">// 关闭页保护</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>VOID <span class=\"token function\">PageProtectOff</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>\t__asm</pre></td></tr><tr><td data-num=\"85\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>\t\tcli<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 关闭中断</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>\t\tmov eax<span class=\"token punctuation\">,</span> cr0<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>\t\tand eax<span class=\"token punctuation\">,</span> not <span class=\"token number\">0x10000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// WP 位置 0</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>\t\tmov cr0<span class=\"token punctuation\">,</span> eax<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre></pre></td></tr><tr><td data-num=\"93\"></td><td><pre><span class=\"token comment\">// 开启页保护</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>VOID <span class=\"token function\">PageProtectOn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>\t__asm</pre></td></tr><tr><td data-num=\"97\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>\t\tmov eax<span class=\"token punctuation\">,</span> cr0<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>\t\tor eax<span class=\"token punctuation\">,</span> <span class=\"token number\">0x10000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// WP 位置 1</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>\t\tmov cr0<span class=\"token punctuation\">,</span> eax<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>\t\tsti<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 恢复中断</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre></pre></td></tr><tr><td data-num=\"105\"></td><td><pre><span class=\"token comment\">// HOOK NtOpenProcess</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>VOID <span class=\"token function\">HookNtOpenProcess</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>\t<span class=\"token function\">PageProtectOff</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>\tuOldNtOpenProcess <span class=\"token operator\">=</span> KeServiceDescriptorTable<span class=\"token operator\">-></span>ntoskrnl<span class=\"token punctuation\">.</span>ServiceTableBase<span class=\"token punctuation\">[</span><span class=\"token number\">0x7A</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>\tKeServiceDescriptorTable<span class=\"token operator\">-></span>ntoskrnl<span class=\"token punctuation\">.</span>ServiceTableBase<span class=\"token punctuation\">[</span><span class=\"token number\">0x7A</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>ULONG<span class=\"token punctuation\">)</span>HbgNtOpenProcess<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>\t<span class=\"token function\">PageProtectOn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre></pre></td></tr><tr><td data-num=\"114\"></td><td><pre><span class=\"token comment\">// UnHOOK NtOpenProcess</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>VOID <span class=\"token function\">UnHookNtOpenProcess</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>\t<span class=\"token function\">PageProtectOff</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>\tKeServiceDescriptorTable<span class=\"token operator\">-></span>ntoskrnl<span class=\"token punctuation\">.</span>ServiceTableBase<span class=\"token punctuation\">[</span><span class=\"token number\">0x7A</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> uOldNtOpenProcess<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>\t<span class=\"token function\">PageProtectOn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre></pre></td></tr><tr><td data-num=\"122\"></td><td><pre><span class=\"token comment\">// 被修改的 NtOpenProcess 函数，简单打印参数</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>NTSTATUS <span class=\"token function\">HbgNtOpenProcess</span><span class=\"token punctuation\">(</span>PHANDLE  ProcessHandle<span class=\"token punctuation\">,</span> ACCESS_MASK  DesiredAccess<span class=\"token punctuation\">,</span> POBJECT_ATTRIBUTES  ObjectAttributes<span class=\"token punctuation\">,</span> PCLIENT_ID  ClientId<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%x %x %x %x\\n\"</span><span class=\"token punctuation\">,</span> ProcessHandle<span class=\"token punctuation\">,</span> DesiredAccess<span class=\"token punctuation\">,</span> ObjectAttributes<span class=\"token punctuation\">,</span> ClientId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>NTOPENPROCESS<span class=\"token punctuation\">)</span>uOldNtOpenProcess<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>ProcessHandle<span class=\"token punctuation\">,</span> DesiredAccess<span class=\"token punctuation\">,</span> ObjectAttributes<span class=\"token punctuation\">,</span> ClientId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"openprocess函数\"><a class=\"anchor\" href=\"#openprocess函数\">#</a> OpenProcess 函数</h1>\n<p><code>OpenProcess</code>  函数，由 kernel32.dll 导出，其会调用 <code>NtOpenProcess</code>  函数，此函数由 ntdll.dll 导出，在 IDA 中查看为 <code>__stdcall ZwOpenProcess(x, x, x, x)</code> ，既 <code>NtOpenProcess</code>  是 <code>ZwOpenProcess</code>  函数的导出别名， <code>ZwOpenProcess</code>  函数会利用快速调用进 0 环，传递的服务号为 <code>0x7A</code> ，在 windbg 中查看 SSDT 函数表中索引为 0x7A 的函数：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kd&gt; dd KeServiceDescriptorTable</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>8055d700  80505570 00000000 0000011c 805059e4</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>8055d710  00000000 00000000 00000000 00000000</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>8055d720  00000000 00000000 00000000 00000000</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>8055d730  00000000 00000000 00000000 00000000</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>kd&gt; dd 80505570 </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>80505570  805a5664 805f23ea 805f5c20 805f241c</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>80505580  805f5c5a 805f2452 805f5c9e 805f5ce2</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>80505590  80616e80 806180e4 805ed7e8 805ed440</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>kd&gt; dd 80505570  + 0x7A *4</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>80505758  805cc486 805ef030 805eec94 805ab420</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>80505768  806162da 805c4c14 805cc712 805ef04e</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>80505778  805eee04 80618214 80646ea4 805ca534</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>kd&gt; u 805cc486 </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>nt!NtOpenProcess:</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>805cc486 68c4000000      push    0C4h</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>805cc48b 68c0b44d80      push    offset nt!ObWatchHandles+0x25c (804db4c0)</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>805cc490 e8ab08f7ff      call    nt!_SEH_prolog (8053cd40)</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>805cc495 33f6            xor     esi,esi</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>805cc497 8975d4          mov     dword ptr [ebp-2Ch],esi</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>805cc49a 33c0            xor     eax,eax</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>805cc49c 8d7dd8          lea     edi,[ebp-28h]</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>805cc49f ab              stos    dword ptr es:[edi]</pre></td></tr></table></figure><p>由此可以发现最终调用的是内核文件中  <code>NtOpenProcess</code>  函数，也就是我们本次 HOOK 的代码。</p>\n",
            "tags": [
                "SSDT HOOK",
                "OpenProcess"
            ]
        },
        {
            "id": "https://or0kit.github.io/Bin/Core/WindowsXp/SystemCall/%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8-SSDT/",
            "url": "https://or0kit.github.io/Bin/Core/WindowsXp/SystemCall/%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8-SSDT/",
            "title": "系统调用-SSDT",
            "date_published": "2021-12-14T02:38:24.000Z",
            "content_html": "<h1 id=\"楔子\"><a class=\"anchor\" href=\"#楔子\">#</a> 楔子</h1>\n<p>在前两篇的 0/3 环调用分析中，我们知道有两个进入 0 环的方法，一个中断门 利用 <code>int 0x2e</code>  指令，一个是快速调用 利用 <code>sysenter</code>  指令，因为利用中断门进 0 环权限发生切换，会直接向堆栈中压入 5 个值：3 环的 SS、3 环 Eflags、3 环的 CS、3 环的 EIP。而通过快速调用却没有压入这 5 个值，所以会有  <code>KiFastSystemCall 与 KiIntSystemCall</code>  以及  <code>KiSystemService 与 KiFastCallEntry</code>  这四个函数。</p>\n<p><code>KiFastSystemCall 与 KiIntSystemCall</code>  是为了从 3 环进入 0 环，既修改 CS、SS、EIP、ESP。</p>\n<p><code>KiSystemService 与 KiFastCallEntry</code>  它们都是为了填充  <code>KTRAP_FRAME</code>  结构体，从而保存 3 环的环境。</p>\n<p>保存并切换完环境后，就开始调用函数了，这里涉及了一张表，系统服务表（SystemServiceTable)</p>\n<p>进 0 环后，3 环的各种寄存器的值都会保留到 <code>_Trap_Frame</code>  结构体中，如何根据系统服务号（eax 中存储）找到要执行的内核函数？调用时参数是存储到 3 环的堆栈，如何传递给内核函数？</p>\n<h1 id=\"系统服务表\"><a class=\"anchor\" href=\"#系统服务表\">#</a> 系统服务表</h1>\n<h2 id=\"结构\"><a class=\"anchor\" href=\"#结构\">#</a> 结构</h2>\n<p>首先我们得知道一个结构体，用来描述内核函数信息的表：SystemServiceTable，即系统服务表，它不是 SSDT。</p>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<p>系统服务表由 4 部分组成：<br />\n <code>ServiceTable</code>  指向的是函数地址数组，每个成员四个字节；<br />\n <code>Count</code>  表示调用次数；<br />\n <code>ServiceLimit</code>  表示表中函数的个数；<br />\n <code>ArgumentTable</code>  指向对应函数有几个参数，每个成员一个字节。</p>\n<p>Windows 提供了两张表：上面的表是用来处理一般内核函数的，下面这张表是用来处理与图形相关的内核函数。</p>\n<p>这张表里的都是向 3 环开放的内核函数，并不代表整个内核只有这么多函数。</p>\n<h2 id=\"系统服务表在哪\"><a class=\"anchor\" href=\"#系统服务表在哪\">#</a> 系统服务表在哪</h2>\n<p><code>SystemServiceTable</code>  系统服务表在哪？ 在 <code>_KTHREAD + 0xE0</code>  的位置</p>\n<p><img data-src=\"image002.png\" alt=\"\" /></p>\n<h2 id=\"判断要调用的函数在哪个表\"><a class=\"anchor\" href=\"#判断要调用的函数在哪个表\">#</a> 判断要调用的函数在哪个表</h2>\n<p><img data-src=\"image003.png\" alt=\"\" /></p>\n<h2 id=\"找到要执行的函数与参数个数\"><a class=\"anchor\" href=\"#找到要执行的函数与参数个数\">#</a> 找到要执行的函数与参数个数</h2>\n<p><img data-src=\"image004.png\" alt=\"\" /></p>\n<p>用查找到的函数在 <code>ServiceTable</code>  中的索引 <code>i</code> ，去找在 <code>ArgumentTable</code>  中索引为 <code>i</code>  元素，其值就是该函数的 <strong>参数个数 * 4。</strong></p>\n<h1 id=\"ssdt\"><a class=\"anchor\" href=\"#ssdt\">#</a> SSDT</h1>\n<p>SSDT 的全称是 <code>System Services Descriptor Table</code> ，意为系统服务描述符表。</p>\n<p>SSDT 的每个成员叫做系统服务表<br />\n SSDT 的第一个成员是导出的，声明一下即可使用<br />\n SSDT 的第二个成员是未导出的，需要通过其它方式查找<br />\n在 Windows 中，SSDT 的第三个成员和第四个成员未被使用</p>\n<p>在 32 位 XP 中，我们可以通过 <code>ETHREAD</code>  结构体加偏移的方式进行访问。</p>\n<p>在内核文件中，有一个变量是导出的：  <code>KeServiceDescriptorTable</code>  通过它我们可以访问 SSDT。</p>\n<p><img data-src=\"image005.png\" alt=\"\" /></p>\n<p>在 windbg 中查看一下：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kd&gt; dd KeServiceDescriptorTable</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>8055d700  80505570 00000000 0000011c 805059e4</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>8055d710  00000000 00000000 00000000 00000000</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>8055d720  00000000 00000000 00000000 00000000</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>8055d730  00000000 00000000 00000000 00000000</pre></td></tr></table></figure><p>在 WinDbg 中查看未导出成员：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kd&gt; dd KeServiceDescriptorTableShadow</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>8055d6c0  80505570 00000000 0000011c 805059e4</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>8055d6d0  bf9a6f80 00000000 0000029b bf9a7c90</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>8055d6e0  00000000 00000000 00000000 00000000</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>8055d6f0  00000000 00000000 00000000 00000000</pre></td></tr></table></figure>",
            "tags": [
                "系统服务表",
                "SSDT"
            ]
        },
        {
            "id": "https://or0kit.github.io/Bin/Core/WindowsXp/SystemCall/%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8-0%E7%8E%AF%E8%B0%83%E7%94%A8%E5%88%86%E6%9E%90/",
            "url": "https://or0kit.github.io/Bin/Core/WindowsXp/SystemCall/%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8-0%E7%8E%AF%E8%B0%83%E7%94%A8%E5%88%86%E6%9E%90/",
            "title": "系统调用-0环调用分析",
            "date_published": "2021-12-09T02:50:01.000Z",
            "content_html": "<h1 id=\"楔子\"><a class=\"anchor\" href=\"#楔子\">#</a> 楔子</h1>\n<p>上一次分析到 API 函数在  <code>ntdll.dll</code>  中的  <code>KiFastSystemCall</code>  与  <code>KiIntSystemCall</code>  函数。<br />\n补充一下，Windows API 的相关知识。</p>\n<p><code>API</code>  全称为  <code>Application Programming Interface</code> 。</p>\n<p>其中有几个比较重要的  <code>Dll</code> ，很多重要的函数都在这些动态链接库里面：</p>\n<ul>\n<li><code>Kernel32.dll</code> ：最核心的功能模块，比如管理内存、进程和线程相关的函数等。</li>\n<li><code>User32.dll</code> ：是  <code>Windows</code>  用户界面相关应用程序接口，如创建窗口和发送消息等。</li>\n<li><code>GDI32.dll</code> ：全称是  <code>Graphical Device Interface</code> ，即  <code>图形设备接口</code> ，包含用于画图和显示文本的函数。比如要显示一个程序窗口，就调用了其中的函数来画这个窗口。</li>\n<li><code>Ntdll.dll</code> ：大多数  <code>API</code>  都会通过这个  <code>DLL</code>  进入内核（0 环）。</li>\n</ul>\n<p>需要注意的是：并不是所有的  <code>API</code>  都必须要进 0 环的，有些功能完全可以在 3 环实现。</p>\n<p>我们可以知道函数在  <code>ntdll.dll</code>  中进入 R0, 那么它是如何实现的呢，进入 R0 后又做了什么呢？</p>\n<h1 id=\"分析-kifastsystemcall-与-kiintsystemcall\"><a class=\"anchor\" href=\"#分析-kifastsystemcall-与-kiintsystemcall\">#</a> 分析 KiFastSystemCall 与 KiIntSystemCall</h1>\n<h2 id=\"首先分析-kifastsystemcall\"><a class=\"anchor\" href=\"#首先分析-kifastsystemcall\">#</a> 首先分析 KiFastSystemCall</h2>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>_DWORD __stdcall KiFastSystemCall()</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>                public _KiFastSystemCall@0</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>_KiFastSystemCall@0 proc near           ; DATA XREF: .text:off_7C923428↑o</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                mov     edx, esp</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                sysenter</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>_KiFastSystemCall@0 endp</pre></td></tr></table></figure><p>在 KiFastSystemCall 中，先把 R3 的栈顶 esp 存到了 edx 中，然后执行了 sysenter 指令，那这个指令具体是怎么做的呢？</p>\n<h2 id=\"sysenter-指令进0环\"><a class=\"anchor\" href=\"#sysenter-指令进0环\">#</a> sysenter 指令进 0 环</h2>\n<p>如果要进入 R0 必须要指定相关的 CS SS EIP ESP。所以在执行  <code>sysenter</code>  指令之前，操作系统必须指定 0 环的  <code>CS</code> 、 <code>SS</code> 、 <code>EIP</code>  以及  <code>ESP</code> 。<br />\n而它们的值存储在  <code>MSR</code>  寄存器中，它的具体结构并未公开。<br />\n每个  <code>MSR</code>  寄存器都会有一个相应的  <code>ID</code> ，即  <code>MSR Index</code> 。当执行  <code>RDMSR</code>  或者  <code>WRMSR</code>  指令的时候，只要提供  <code>MSR Index</code>  就能让  <code>CPU</code>  知道目标  <code>MSR</code>  寄存器。</p>\n<table>\n<thead>\n<tr>\n<th>MSR</th>\n<th>Index</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>IA32_SYSENTER_CS</td>\n<td>174H</td>\n</tr>\n<tr>\n<td>IA32_SYSENTER_ESP</td>\n<td>175H</td>\n</tr>\n<tr>\n<td>IA32_SYSENTER_EIP</td>\n<td>176H</td>\n</tr>\n</tbody>\n</table>\n<p>其中并没有 SS 的值，这是因为 SS 的值是通过 CS + 0x8 算出来的。</p>\n<p>在 windbg 中查看一下</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kd&gt; rdmsr 174</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>msr[174] &#x3D; 00000000&#96;00000008</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>kd&gt; rdmsr 175</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>msr[175] &#x3D; 00000000&#96;ba4d0000</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>kd&gt; rdmsr 176</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>msr[176] &#x3D; 00000000&#96;805426e0</pre></td></tr></table></figure><p>查看 EIP 指向的函数：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kd&gt; u 805426e0</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>nt!KiFastCallEntry:</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>805426e0 b923000000      mov     ecx,23h</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>805426e5 6a30            push    30h</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>805426e7 0fa1            pop     fs</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>805426e9 8ed9            mov     ds,cx</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>805426eb 8ec1            mov     es,cx</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>805426ed 648b0d40000000  mov     ecx,dword ptr fs:[40h]</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>805426f4 8b6104          mov     esp,dword ptr [ecx+4]</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>805426f7 6a23            push    23h</pre></td></tr></table></figure><p><strong>发现是  <code>KiFastCallEntry</code>  函数</strong></p>\n<h2 id=\"接下来分析-kiintsystemcall\"><a class=\"anchor\" href=\"#接下来分析-kiintsystemcall\">#</a> 接下来分析 KiIntSystemCall</h2>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>_DWORD __stdcall KiIntSystemCall ()</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>                public _KiIntSystemCall@0</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>_KiIntSystemCall@0 proc near            ; DATA XREF: .text:off_7C923428↑o</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                lea     edx, [esp+8] ; 参数指针</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                int     2Eh             ; DOS 2+ internal - EXECUTE COMMAND</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                                        ; DS:SI -&gt; counted CR-terminated command string</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                retn</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>_KiIntSystemCall@0 endp</pre></td></tr></table></figure><p>首先把 esp+8 的地址给了 edx，然后使用中断门，触发中断，中断号是 0x2E，用 windbg 看看 2E 号中断的中断门描述符： <code> 8054ee00`00082611</code>  这个值在不同的计算机上应该都不一样。</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kd&gt; r idtr</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>idtr&#x3D;8003f400</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>kd&gt; dq 8003f400 + 0x2e * 8</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>8003f570  8054ee00&#96;00082611 80548e00&#96;0008590c</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>8003f580  80548e00&#96;00081cd0 80548e00&#96;00081cda</pre></td></tr></table></figure><p>拆分中断门描述符，可以得到新的 CS 是 0008（系统代码段），EIP 是  <code>80542611</code>  ，这个是内核模块的  <code>KiSystemService</code>  函数。</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kd&gt; u 80542611</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>nt!KiSystemService:</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>80542611 6a00            push    0</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>80542613 55              push    ebp</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>80542614 53              push    ebx</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>80542615 56              push    esi</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>80542616 57              push    edi</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>80542617 0fa0            push    fs</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>80542619 bb30000000      mov     ebx,30h</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>8054261e 668ee3          mov     fs,bx</pre></td></tr></table></figure><h2 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h2>\n<p><code>KiIntSystemCall</code>  通过中断门进 0 环：</p>\n<ol>\n<li>固定中断号为 0x2E</li>\n<li>CS/EIP 由门描述符提供   ESP/SS 由 TSS 提供</li>\n<li>进入 0 环后执行的内核函数： <code>NT!KiSystemService</code></li>\n</ol>\n<p><code>KiFastSystemCall</code>  通过 sysenter 指令进 0 环：</p>\n<ol>\n<li>CS/ESP/EIP 由 MSR 寄存器提供 (SS 是算出来的)</li>\n<li>进入 0 环后执行的内核函数： <code>NT!KiFastCallEntry</code></li>\n</ol>\n<h1 id=\"分析-kisystemservice-和-kifastcallentry-函数\"><a class=\"anchor\" href=\"#分析-kisystemservice-和-kifastcallentry-函数\">#</a> 分析 KiSystemService 和 KiFastCallEntry 函数</h1>\n<p>通过 <code>int 2E</code>  或者 <code>sysenter</code>  进入内核后，之后的流程会怎样继续进行呢？</p>\n<p>首先我们得知道这两个结构体  <code>Trap_Frame</code>  和  <code>KPCR</code> 。</p>\n<p>这里有一个小知识，和前面学的可以连起来。</p>\n<p>首先复习一下 TSS 表，TSS 表只有一张，但是系统里有成百上千的线程，线程进 0 环时，假设使用中断门，0 环的 ESP 和 SS 从 TSS 表获取，怎么保证每个线程都有自己的堆栈，不互相冲突呢？答案是，线程切换时会修改 TSS 表，确保每个线程执行时，TSS 里的 ESP,SS 都对应当前线程。</p>\n<p><code>Trap_Frame</code>  和 0 环栈密切相关。用户定义中断进 0 环，涉及提权时，CPU 会把 5 个寄存器的值压入 0 环堆栈，这是我们在中断门的课程里学习过的：</p>\n<p><img data-src=\"image001.png\" alt=\"\" /><br />\n上图是不完整的。</p>\n<p>实际上，完整的 0 环的栈是 Trap_Frame，中断门进 0 环后，新的 ESP 指向偏移 0x068（Eip）处。</p>\n<h2 id=\"trap_frame\"><a class=\"anchor\" href=\"#trap_frame\">#</a> Trap_Frame</h2>\n<p><img data-src=\"image002.png\" alt=\"\" /></p>\n<p>在 windbg 中查看</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kd&gt; dt _KTRAP_FRAME</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>nt!_KTRAP_FRAME</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   +0x000 DbgEbp           : Uint4B</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   +0x004 DbgEip           : Uint4B</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   +0x008 DbgArgMark       : Uint4B</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   +0x00c DbgArgPointer    : Uint4B</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   +0x010 TempSegCs        : Uint4B</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   +0x014 TempEsp          : Uint4B</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   +0x018 Dr0              : Uint4B</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   +0x01c Dr1              : Uint4B</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   +0x020 Dr2              : Uint4B</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   +0x024 Dr3              : Uint4B</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   +0x028 Dr6              : Uint4B</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   +0x02c Dr7              : Uint4B</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   +0x030 SegGs            : Uint4B</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   +0x034 SegEs            : Uint4B</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   +0x038 SegDs            : Uint4B</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   +0x03c Edx              : Uint4B</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   +0x040 Ecx              : Uint4B</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>   +0x044 Eax              : Uint4B</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>   +0x048 PreviousPreviousMode : Uint4B</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>   +0x04c ExceptionList    : Ptr32 _EXCEPTION_REGISTRATION_RECORD</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>   +0x050 SegFs            : Uint4B</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>   +0x054 Edi              : Uint4B</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>   +0x058 Esi              : Uint4B</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>   +0x05c Ebx              : Uint4B</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>   +0x060 Ebp              : Uint4B</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>   +0x064 ErrCode          : Uint4B</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>   +0x068 Eip              : Uint4B</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>   +0x06c SegCs            : Uint4B</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>   +0x070 EFlags           : Uint4B</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>   +0x074 HardwareEsp      : Uint4B</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>   +0x078 HardwareSegSs    : Uint4B</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>   +0x07c V86Es            : Uint4B</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>   +0x080 V86Ds            : Uint4B</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>   +0x084 V86Fs            : Uint4B</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>   +0x088 V86Gs            : Uint4B</pre></td></tr></table></figure><p>_Trap_Frame 结构体，实际上是 windows 对内核栈的使用约定，它约定了不同的偏移分别用来存储什么数据。</p>\n<p>我们待会逆向 KiSystemService 的时候会发现，第一条指令就是 push 0，意思就是设置 ErrCode = 0。</p>\n<p>第一个问题：进 0 环后，原来的寄存器存在哪里？</p>\n<p>看到这个结构，相信你已经有了答案，我们可以通过逆向 KiSystemService 来验证猜想。</p>\n<h2 id=\"_kpcr-_nt_tib-_kprcb\"><a class=\"anchor\" href=\"#_kpcr-_nt_tib-_kprcb\">#</a> _KPCR, _NT_TIB, _KPRCB</h2>\n<p><img data-src=\"image003.png\" alt=\"\" /></p>\n<p>这三个结构体存储了当前 CPU 的信息，其实这三个结构体是一个结构体，只不过抽象成三部分而已。地址固定是 0xffdff000。</p>\n<p><code>_KPCR</code> <br />\nKPCR（Processor Control Region）是 CPU 控制区的意思，每个 CPU 都有一个 KPCR 结构。</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>nt!_KPCR</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   +0x000 NtTib            : _NT_TIB</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   +0x01c SelfPcr          : Ptr32 _KPCR</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   +0x020 Prcb             : Ptr32 _KPRCB</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   +0x024 Irql             : UChar</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   +0x028 IRR              : Uint4B</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   +0x02c IrrActive        : Uint4B</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   +0x030 IDR              : Uint4B</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   +0x034 KdVersionBlock   : Ptr32 Void</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   +0x038 IDT              : Ptr32 _KIDTENTRY</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   +0x03c GDT              : Ptr32 _KGDTENTRY</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   +0x040 TSS              : Ptr32 _KTSS</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   +0x044 MajorVersion     : Uint2B</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   +0x046 MinorVersion     : Uint2B</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   +0x048 SetMember        : Uint4B</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   +0x04c StallScaleFactor : Uint4B</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   +0x050 DebugActive      : UChar</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   +0x051 Number           : UChar</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   +0x052 Spare0           : UChar</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>   +0x053 SecondLevelCacheAssociativity : UChar</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>   +0x054 VdmAlert         : Uint4B</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>   +0x058 KernelReserved   : [14] Uint4B</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>   +0x090 SecondLevelCacheSize : Uint4B</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>   +0x094 HalReserved      : [16] Uint4B</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>   +0x0d4 InterruptMode    : Uint4B</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>   +0x0d8 Spare1           : UChar</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>   +0x0dc KernelReserved2  : [17] Uint4B</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>   +0x120 PrcbData         : _KPRCB</pre></td></tr></table></figure><p><code>_NT_TIB</code> <br />\n 主要存储了 SEH 结构化异常链表和一个指向自己的指针。</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>nt!_NT_TIB</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   +0x000 ExceptionList    : Ptr32 _EXCEPTION_REGISTRATION_RECORD</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   +0x004 StackBase        : Ptr32 Void</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   +0x008 StackLimit       : Ptr32 Void</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   +0x00c SubSystemTib     : Ptr32 Void</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   +0x010 FiberData        : Ptr32 Void</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   +0x010 Version          : Uint4B</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   +0x014 ArbitraryUserPointer : Ptr32 Void</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   +0x018 Self             : Ptr32 _NT_TIB</pre></td></tr></table></figure><p><code>_KPRCB</code></p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>nt!_KPRCB</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   +0x000 MinorVersion     : Uint2B</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   +0x002 MajorVersion     : Uint2B</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   +0x004 CurrentThread    : Ptr32 _KTHREAD</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   +0x008 NextThread       : Ptr32 _KTHREAD</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   +0x00c IdleThread       : Ptr32 _KTHREAD</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   +0x010 Number           : Char</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   +0x011 Reserved         : Char</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   +0x012 BuildType        : Uint2B</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   +0x014 SetMember        : Uint4B</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   +0x018 CpuType          : Char</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   +0x019 CpuID            : Char</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   +0x01a CpuStep          : Uint2B</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   +0x01c ProcessorState   : _KPROCESSOR_STATE</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   +0x33c KernelReserved   : [16] Uint4B</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   +0x37c HalReserved      : [16] Uint4B</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   +0x3bc PrcbPad0         : [92] UChar</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   +0x418 LockQueue        : [16] _KSPIN_LOCK_QUEUE</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   +0x498 PrcbPad1         : [8] UChar</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>   +0x4a0 NpxThread        : Ptr32 _KTHREAD</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>   +0x4a4 InterruptCount   : Uint4B</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>   +0x4a8 KernelTime       : Uint4B</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>   +0x4ac UserTime         : Uint4B</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>   +0x4b0 DpcTime          : Uint4B</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>   +0x4b4 DebugDpcTime     : Uint4B</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>   +0x4b8 InterruptTime    : Uint4B</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>   +0x4bc AdjustDpcThreshold : Uint4B</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>   +0x4c0 PageColor        : Uint4B</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>   +0x4c4 SkipTick         : Uint4B</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>   +0x4c8 MultiThreadSetBusy : UChar</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>   +0x4c9 Spare2           : [3] UChar</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>   +0x4cc ParentNode       : Ptr32 _KNODE</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>   +0x4d0 MultiThreadProcessorSet : Uint4B</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>   +0x4d4 MultiThreadSetMaster : Ptr32 _KPRCB</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>   +0x4d8 ThreadStartCount : [2] Uint4B</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>   +0x4e0 CcFastReadNoWait : Uint4B</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>   +0x4e4 CcFastReadWait   : Uint4B</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>   +0x4e8 CcFastReadNotPossible : Uint4B</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>   +0x4ec CcCopyReadNoWait : Uint4B</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>   +0x4f0 CcCopyReadWait   : Uint4B</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>   +0x4f4 CcCopyReadNoWaitMiss : Uint4B</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>   +0x4f8 KeAlignmentFixupCount : Uint4B</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>   +0x4fc KeContextSwitches : Uint4B</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>   +0x500 KeDcacheFlushCount : Uint4B</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>   +0x504 KeExceptionDispatchCount : Uint4B</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>   +0x508 KeFirstLevelTbFills : Uint4B</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>   +0x50c KeFloatingEmulationCount : Uint4B</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>   +0x510 KeIcacheFlushCount : Uint4B</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>   +0x514 KeSecondLevelTbFills : Uint4B</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>   +0x518 KeSystemCalls    : Uint4B</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>   +0x51c SpareCounter0    : [1] Uint4B</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>   +0x520 PPLookasideList  : [16] _PP_LOOKASIDE_LIST</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>   +0x5a0 PPNPagedLookasideList : [32] _PP_LOOKASIDE_LIST</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>   +0x6a0 PPPagedLookasideList : [32] _PP_LOOKASIDE_LIST</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>   +0x7a0 PacketBarrier    : Uint4B</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>   +0x7a4 ReverseStall     : Uint4B</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>   +0x7a8 IpiFrame         : Ptr32 Void</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>   +0x7ac PrcbPad2         : [52] UChar</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>   +0x7e0 CurrentPacket    : [3] Ptr32 Void</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>   +0x7ec TargetSet        : Uint4B</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>   +0x7f0 WorkerRoutine    : Ptr32     void </pre></td></tr><tr><td data-num=\"62\"></td><td><pre>   +0x7f4 IpiFrozen        : Uint4B</pre></td></tr><tr><td data-num=\"63\"></td><td><pre>   +0x7f8 PrcbPad3         : [40] UChar</pre></td></tr><tr><td data-num=\"64\"></td><td><pre>   +0x820 RequestSummary   : Uint4B</pre></td></tr><tr><td data-num=\"65\"></td><td><pre>   +0x824 SignalDone       : Ptr32 _KPRCB</pre></td></tr><tr><td data-num=\"66\"></td><td><pre>   +0x828 PrcbPad4         : [56] UChar</pre></td></tr><tr><td data-num=\"67\"></td><td><pre>   +0x860 DpcListHead      : _LIST_ENTRY</pre></td></tr><tr><td data-num=\"68\"></td><td><pre>   +0x868 DpcStack         : Ptr32 Void</pre></td></tr><tr><td data-num=\"69\"></td><td><pre>   +0x86c DpcCount         : Uint4B</pre></td></tr><tr><td data-num=\"70\"></td><td><pre>   +0x870 DpcQueueDepth    : Uint4B</pre></td></tr><tr><td data-num=\"71\"></td><td><pre>   +0x874 DpcRoutineActive : Uint4B</pre></td></tr><tr><td data-num=\"72\"></td><td><pre>   +0x878 DpcInterruptRequested : Uint4B</pre></td></tr><tr><td data-num=\"73\"></td><td><pre>   +0x87c DpcLastCount     : Uint4B</pre></td></tr><tr><td data-num=\"74\"></td><td><pre>   +0x880 DpcRequestRate   : Uint4B</pre></td></tr><tr><td data-num=\"75\"></td><td><pre>   +0x884 MaximumDpcQueueDepth : Uint4B</pre></td></tr><tr><td data-num=\"76\"></td><td><pre>   +0x888 MinimumDpcRate   : Uint4B</pre></td></tr><tr><td data-num=\"77\"></td><td><pre>   +0x88c QuantumEnd       : Uint4B</pre></td></tr><tr><td data-num=\"78\"></td><td><pre>   +0x890 PrcbPad5         : [16] UChar</pre></td></tr><tr><td data-num=\"79\"></td><td><pre>   +0x8a0 DpcLock          : Uint4B</pre></td></tr><tr><td data-num=\"80\"></td><td><pre>   +0x8a4 PrcbPad6         : [28] UChar</pre></td></tr><tr><td data-num=\"81\"></td><td><pre>   +0x8c0 CallDpc          : _KDPC</pre></td></tr><tr><td data-num=\"82\"></td><td><pre>   +0x8e0 ChainedInterruptList : Ptr32 Void</pre></td></tr><tr><td data-num=\"83\"></td><td><pre>   +0x8e4 LookasideIrpFloat : Int4B</pre></td></tr><tr><td data-num=\"84\"></td><td><pre>   +0x8e8 SpareFields0     : [6] Uint4B</pre></td></tr><tr><td data-num=\"85\"></td><td><pre>   +0x900 VendorString     : [13] UChar</pre></td></tr><tr><td data-num=\"86\"></td><td><pre>   +0x90d InitialApicId    : UChar</pre></td></tr><tr><td data-num=\"87\"></td><td><pre>   +0x90e LogicalProcessorsPerPhysicalProcessor : UChar</pre></td></tr><tr><td data-num=\"88\"></td><td><pre>   +0x910 MHz              : Uint4B</pre></td></tr><tr><td data-num=\"89\"></td><td><pre>   +0x914 FeatureBits      : Uint4B</pre></td></tr><tr><td data-num=\"90\"></td><td><pre>   +0x918 UpdateSignature  : _LARGE_INTEGER</pre></td></tr><tr><td data-num=\"91\"></td><td><pre>   +0x920 NpxSaveArea      : _FX_SAVE_AREA</pre></td></tr><tr><td data-num=\"92\"></td><td><pre>   +0xb30 PowerState       : _PROCESSOR_POWER_STATE</pre></td></tr></table></figure><h2 id=\"_ethread-_kthread\"><a class=\"anchor\" href=\"#_ethread-_kthread\">#</a> _ETHREAD, _KTHREAD</h2>\n<p>这俩其实也是同一个结构体，刚才介绍的 _KPRCB + 0x04 里用到了 _KTHREAD。这俩结构体存储的是线程相关的信息。</p>\n<p><code>_ETHREAD</code></p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>nt!_ETHREAD</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   +0x000 Tcb              : _KTHREAD</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   +0x1c0 CreateTime       : _LARGE_INTEGER</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   +0x1c0 NestedFaultCount : Pos 0, 2 Bits</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   +0x1c0 ApcNeeded        : Pos 2, 1 Bit</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   +0x1c8 ExitTime         : _LARGE_INTEGER</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   +0x1c8 LpcReplyChain    : _LIST_ENTRY</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   +0x1c8 KeyedWaitChain   : _LIST_ENTRY</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   +0x1d0 ExitStatus       : Int4B</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   +0x1d0 OfsChain         : Ptr32 Void</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   +0x1d4 PostBlockList    : _LIST_ENTRY</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   +0x1dc TerminationPort  : Ptr32 _TERMINATION_PORT</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   +0x1dc ReaperLink       : Ptr32 _ETHREAD</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   +0x1dc KeyedWaitValue   : Ptr32 Void</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   +0x1e0 ActiveTimerListLock : Uint4B</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   +0x1e4 ActiveTimerListHead : _LIST_ENTRY</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   +0x1ec Cid              : _CLIENT_ID</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   +0x1f4 LpcReplySemaphore : _KSEMAPHORE</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   +0x1f4 KeyedWaitSemaphore : _KSEMAPHORE</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>   +0x208 LpcReplyMessage  : Ptr32 Void</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>   +0x208 LpcWaitingOnPort : Ptr32 Void</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>   +0x20c ImpersonationInfo : Ptr32 _PS_IMPERSONATION_INFORMATION</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>   +0x210 IrpList          : _LIST_ENTRY</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>   +0x218 TopLevelIrp      : Uint4B</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>   +0x21c DeviceToVerify   : Ptr32 _DEVICE_OBJECT</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>   +0x220 ThreadsProcess   : Ptr32 _EPROCESS</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>   +0x224 StartAddress     : Ptr32 Void</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>   +0x228 Win32StartAddress : Ptr32 Void</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>   +0x228 LpcReceivedMessageId : Uint4B</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>   +0x22c ThreadListEntry  : _LIST_ENTRY</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>   +0x234 RundownProtect   : _EX_RUNDOWN_REF</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>   +0x238 ThreadLock       : _EX_PUSH_LOCK</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>   +0x23c LpcReplyMessageId : Uint4B</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>   +0x240 ReadClusterSize  : Uint4B</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>   +0x244 GrantedAccess    : Uint4B</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>   +0x248 CrossThreadFlags : Uint4B</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>   +0x248 Terminated       : Pos 0, 1 Bit</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>   +0x248 DeadThread       : Pos 1, 1 Bit</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>   +0x248 HideFromDebugger : Pos 2, 1 Bit</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>   +0x248 ActiveImpersonationInfo : Pos 3, 1 Bit</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>   +0x248 SystemThread     : Pos 4, 1 Bit</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>   +0x248 HardErrorsAreDisabled : Pos 5, 1 Bit</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>   +0x248 BreakOnTermination : Pos 6, 1 Bit</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>   +0x248 SkipCreationMsg  : Pos 7, 1 Bit</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>   +0x248 SkipTerminationMsg : Pos 8, 1 Bit</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>   +0x24c SameThreadPassiveFlags : Uint4B</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>   +0x24c ActiveExWorker   : Pos 0, 1 Bit</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>   +0x24c ExWorkerCanWaitUser : Pos 1, 1 Bit</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>   +0x24c MemoryMaker      : Pos 2, 1 Bit</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>   +0x250 SameThreadApcFlags : Uint4B</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>   +0x250 LpcReceivedMsgIdValid : Pos 0, 1 Bit</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>   +0x250 LpcExitThreadCalled : Pos 1, 1 Bit</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>   +0x250 AddressSpaceOwner : Pos 2, 1 Bit</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>   +0x254 ForwardClusterOnly : UChar</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>   +0x255 DisablePageFaultClustering : UChar</pre></td></tr></table></figure><p><code>_KTHREAD</code></p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>nt!_KTHREAD</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   +0x000 Header           : _DISPATCHER_HEADER</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   +0x010 MutantListHead   : _LIST_ENTRY</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   +0x018 InitialStack     : Ptr32 Void</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   +0x01c StackLimit       : Ptr32 Void</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   +0x020 Teb              : Ptr32 Void</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   +0x024 TlsArray         : Ptr32 Void</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   +0x028 KernelStack      : Ptr32 Void</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   +0x02c DebugActive      : UChar</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   +0x02d State            : UChar</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   +0x02e Alerted          : [2] UChar</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   +0x030 Iopl             : UChar</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   +0x031 NpxState         : UChar</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   +0x032 Saturation       : Char</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   +0x033 Priority         : Char</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   +0x034 ApcState         : _KAPC_STATE</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   +0x04c ContextSwitches  : Uint4B</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   +0x050 IdleSwapBlock    : UChar</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   +0x051 Spare0           : [3] UChar</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>   +0x054 WaitStatus       : Int4B</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>   +0x058 WaitIrql         : UChar</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>   +0x059 WaitMode         : Char</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>   +0x05a WaitNext         : UChar</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>   +0x05b WaitReason       : UChar</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>   +0x05c WaitBlockList    : Ptr32 _KWAIT_BLOCK</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>   +0x060 WaitListEntry    : _LIST_ENTRY</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>   +0x060 SwapListEntry    : _SINGLE_LIST_ENTRY</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>   +0x068 WaitTime         : Uint4B</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>   +0x06c BasePriority     : Char</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>   +0x06d DecrementCount   : UChar</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>   +0x06e PriorityDecrement : Char</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>   +0x06f Quantum          : Char</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>   +0x070 WaitBlock        : [4] _KWAIT_BLOCK</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>   +0x0d0 LegoData         : Ptr32 Void</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>   +0x0d4 KernelApcDisable : Uint4B</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>   +0x0d8 UserAffinity     : Uint4B</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>   +0x0dc SystemAffinityActive : UChar</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>   +0x0dd PowerState       : UChar</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>   +0x0de NpxIrql          : UChar</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>   +0x0df InitialNode      : UChar</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>   +0x0e0 ServiceTable     : Ptr32 Void</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>   +0x0e4 Queue            : Ptr32 _KQUEUE</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>   +0x0e8 ApcQueueLock     : Uint4B</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>   +0x0f0 Timer            : _KTIMER</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>   +0x118 QueueListEntry   : _LIST_ENTRY</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>   +0x120 SoftAffinity     : Uint4B</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>   +0x124 Affinity         : Uint4B</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>   +0x128 Preempted        : UChar</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>   +0x129 ProcessReadyQueue : UChar</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>   +0x12a KernelStackResident : UChar</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>   +0x12b NextProcessor    : UChar</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>   +0x12c CallbackStack    : Ptr32 Void</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>   +0x130 Win32Thread      : Ptr32 Void</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>   +0x134 TrapFrame        : Ptr32 _KTRAP_FRAME</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>   +0x138 ApcStatePointer  : [2] Ptr32 _KAPC_STATE</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>   +0x140 PreviousMode     : Char</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>   +0x141 EnableStackSwap  : UChar</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>   +0x142 LargeStack       : UChar</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>   +0x143 ResourceIndex    : UChar</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>   +0x144 KernelTime       : Uint4B</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>   +0x148 UserTime         : Uint4B</pre></td></tr><tr><td data-num=\"62\"></td><td><pre>   +0x14c SavedApcState    : _KAPC_STATE</pre></td></tr><tr><td data-num=\"63\"></td><td><pre>   +0x164 Alertable        : UChar</pre></td></tr><tr><td data-num=\"64\"></td><td><pre>   +0x165 ApcStateIndex    : UChar</pre></td></tr><tr><td data-num=\"65\"></td><td><pre>   +0x166 ApcQueueable     : UChar</pre></td></tr><tr><td data-num=\"66\"></td><td><pre>   +0x167 AutoAlignment    : UChar</pre></td></tr><tr><td data-num=\"67\"></td><td><pre>   +0x168 StackBase        : Ptr32 Void</pre></td></tr><tr><td data-num=\"68\"></td><td><pre>   +0x16c SuspendApc       : _KAPC</pre></td></tr><tr><td data-num=\"69\"></td><td><pre>   +0x19c SuspendSemaphore : _KSEMAPHORE</pre></td></tr><tr><td data-num=\"70\"></td><td><pre>   +0x1b0 ThreadListEntry  : _LIST_ENTRY</pre></td></tr><tr><td data-num=\"71\"></td><td><pre>   +0x1b8 FreezeCount      : Char</pre></td></tr><tr><td data-num=\"72\"></td><td><pre>   +0x1b9 SuspendCount     : Char</pre></td></tr><tr><td data-num=\"73\"></td><td><pre>   +0x1ba IdealProcessor   : UChar</pre></td></tr><tr><td data-num=\"74\"></td><td><pre>   +0x1bb DisableBoost     : UChar</pre></td></tr></table></figure><h2 id=\"分析-kifastcallentry\"><a class=\"anchor\" href=\"#分析-kifastcallentry\">#</a> 分析 KiFastCallEntry</h2>\n<p>在 IDA 中查看内核函数 KiFastCallEntry，发现有两个：</p>\n<p><img data-src=\"image004.png\" alt=\"\" /></p>\n<p>这是因为，内核函数也是有两套的，一套给用户层用，一套给内核层用。</p>\n<p>提权与不提权的堆栈变化不同。</p>\n<p>我们从 3 环来的，走的是 KiFastCallEntry。</p>\n<p>首先函数修改了 FS 段寄存器的段选择子，使其指向了 KPCR 这个结构。</p>\n<p>这个我们可以根据段选择子查 GDT 表，查看 KPCR 的位置。</p>\n<p><img data-src=\"image005.png\" alt=\"\" /></p>\n<p>在其中 0x120 处的 KPRCB 结构中也可以看 CPU 的厂商，其原理还是用 cpuid 指令查询后写到这里的。</p>\n<p><code>+0x900 VendorString     : [13]  &quot;GenuineIntel&quot;</code></p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>.text:0046A6E0 _KiFastCallEntry proc near              ; DATA XREF: KiLoadFastSyscallMachineSpecificRegisters (x)+24↑o</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>.text:0046A6E0                                         ; _KiTrap01+74↓o</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>.text:0046A6E0                 mov     ecx, 23h ; &#39;#&#39;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>.text:0046A6E5                 push    30h ; &#39;0&#39;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>.text:0046A6E7                 pop     fs              ; 修改 FS 段选择子 0 环的 FS 指向 KPCR 这个结构体 3 环的指向 TEB</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>.text:0046A6E9                 mov     ds, ecx         ; 修改 ds es 段选择子，在 3 环好像也是 0x23</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>.text:0046A6EB                 mov     es, ecx</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>.text:0046A6EB _KiFastCallEntry endp</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>.text:0046A6EB</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>.text:0046A6ED                 mov     ecx, large fs:_KPCR.TSS ; 取 TSS 的地址赋给 ecx</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>.text:0046A6F4                 mov     esp, [ecx+_KTSS.Esp0] ; 取 TSS 中存储的 0 环的 ESP。这个 ESP 指向的是 KTRAP_FRAME 结构，后面的压栈都是往这个结构体重填充数据。</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>.text:0046A6F7                 push    23h ; &#39;#&#39;       ; 系统写死了，这里相结构体中填充的是 3 环的 SS，既修改 3 环的 SS 为 0x23</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>.text:0046A6F9                 push    edx             ; 把 3 环的 esp 压栈</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>.text:0046A6FA                 pushf                   ; 压入 16 位的 flags。esp 会 - 2</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>.text:0046A6FB</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>.text:0046A6FB loc_46A6FB:                             ; CODE XREF: _KiFastCallEntry2+23↑j</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>.text:0046A6FB                 push    2</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>.text:0046A6FD                 add     edx, 8          ; 取参数。esp+8 的位置 是 三环压入的参数的起始位置</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>.text:0046A700                 popf                    ; 修改 EFLAGS 为 2。因为 eflags 的第 1（从 0 开始计数）位默认要为 1。即清空 Eflag</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>.text:0046A701                 or      byte ptr [esp+1], 2 ; 对压入的 16 位 3 环 flags 寄存器的值的第 9（从 0 开始）位进行或操作。既把第 9 位的值置为 1。</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>.text:0046A706                 push    1Bh             ; SegCs</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>.text:0046A708                 push    dword ptr ds:0FFDF0304h ; 返回地址 既结构体 KUSER_SHARED_DATA 中的 SystemCallReturn 成员</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>.text:0046A70E                 push    0               ; ErrorCode</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>.text:0046A710                 push    ebp</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>.text:0046A711                 push    ebx</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>.text:0046A712                 push    esi</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>.text:0046A713                 push    edi</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>.text:0046A714                 mov     ebx, large fs:_KPCR.SelfPcr ; ebx &#x3D; KPCR</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>.text:0046A71B                 push    3Bh ; &#39;;&#39;       ; SegFs。系统写死了是 0x3B, 这说明不论是单核还是多核，在 GDT 中 0x3B 这个位置就是 3 环的 fs</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>.text:0046A71D                 mov     esi, [ebx+_KPCR.PrcbData.CurrentThread] ; esi &#x3D; 当前 CPU 所执行线程的_ETHREAD 结构体</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>.text:0046A723                 push    dword ptr [ebx] ; 压入 3 环的 ExceptionList</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>.text:0046A725                 mov     dword ptr [ebx], 0FFFFFFFFh ; 将 ExceptionList 置 -1（EXCEPTION_CHAIN_END）</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>.text:0046A72B                 mov     ebp, [esi+_ETHREAD.Tcb.InitialStack] ; 线程初始的栈</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>.text:0046A72E                 push    1               ; 存储到 PreviousMode（先前模式）。</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>.text:0046A72E                                         ; 1 表示表示用户态进来</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>.text:0046A730                 sub     esp, 48h        ; 栈顶提升 0x48。指向_KTRAP_FRAME 结构体的第一个成员</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>.text:0046A733                 sub     ebp, 29Ch       ; 减去 0x29c 后指向的与 esp 是同一个位置</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>.text:0046A739                 mov     [esi+_ETHREAD.Tcb.PreviousMode], 1</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>.text:0046A740                 cmp     ebp, esp</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>.text:0046A742                 jnz     short loc_46A6D1 ; 如果不相等，跳入异常</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>.text:0046A744                 and     [ebp+_KTRAP_FRAME.Dr7], 0 ; 把调试相关的寄存器 Dr7（控制寄存器，debug 异常发生的允许条件由 Dr7 控制）设置为 0</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>.text:0046A748                 test    [esi+_ETHREAD.Tcb.DebugActive], 0FFh ; 判断线程是否是在调试的状态</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>.text:0046A74C                 mov     [esi+_ETHREAD.Tcb.TrapFrame], ebp ; 保存当前线程的环境，这样我们的环境就和线程相关联了。</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>.text:0046A752                 jnz     Dr_FastCallDrSave ; 若是调试的话会接着填充 Trap_Frame 结构体中调试相关的成员。</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>.text:0046A758 loc_46A758:                             ; CODE XREF: Dr_FastCallDrSave+10↑j</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>.text:0046A758                                         ; Dr_FastCallDrSave+7C↑j</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>.text:0046A758                 mov     ebx, [ebp+_KTRAP_FRAME._Ebp] ; ebx &#x3D; TrapFrame.Ebp</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>.text:0046A75B                 mov     edi, [ebp+_KTRAP_FRAME._Eip] ; edi &#x3D; TrapFrame.Eip</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>.text:0046A75E                 mov     [ebp+_KTRAP_FRAME.DbgArgPointer], edx ; DbgArgPointer &#x3D; 3 环传来的参数列表</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>.text:0046A761                 mov     [ebp+_KTRAP_FRAME.DbgArgMark], 0BADB0D00h ; DbgArgMark 掩码，现在记住就行</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>.text:0046A768                 mov     [ebp+_KTRAP_FRAME.DbgEbp], ebx ; DbgEbp &#x3D; Trap_Frame.Ebp</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>.text:0046A76B                 mov     [ebp+_KTRAP_FRAME.DbgEip], edi ; DbgEip &#x3D; Trap_Frame.DbgEip</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>.text:0046A76E                 sti                     ; 启用中断，不允许别人打断</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>.text:0046A76F</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>.text:0046A76F loc_46A76F:                             ; CODE XREF: _KiBBTUnexpectedRange+18↑j</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>.text:0046A76F                                         ; _KiSystemService+72↑j</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>.text:0046A76F                 mov     edi, eax        ; 取 3 环传来的服务号</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>.text:0046A771                 shr     edi, 8          ; 右移 8 位</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>.text:0046A774                 and     edi, 30h        ; (（编号 &gt;&gt;8) &amp; 0x30) 确定是哪个表中。也就是说大于 0xFFF 的在另一个表中</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>.text:0046A777                 mov     ecx, edi        ; ecx &#x3D; 表的偏移</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>.text:0046A779                 add     edi, [esi+_ETHREAD.Tcb.ServiceTable] ; edi &#x3D; 服务表。线程初始化的时候 SSDT 表的值就已经放到这里了。</pre></td></tr><tr><td data-num=\"62\"></td><td><pre>.text:0046A77F                 mov     ebx, eax        ; ebx &#x3D; 3 环传来的服务号</pre></td></tr><tr><td data-num=\"63\"></td><td><pre>.text:0046A781                 and     eax, 0FFFh      ; 获取真正的编号</pre></td></tr><tr><td data-num=\"64\"></td><td><pre>.text:0046A786                 cmp     eax, [edi+8]    ; 服务表加 8，服务表里的函数的最大个数。</pre></td></tr><tr><td data-num=\"65\"></td><td><pre>.text:0046A789                 jnb     _KiBBTUnexpectedRange ; 如果超出，说明越界，跳走</pre></td></tr><tr><td data-num=\"66\"></td><td><pre>.text:0046A78F                 cmp     ecx, 10h        ; 判断是否是 UI 表</pre></td></tr><tr><td data-num=\"67\"></td><td><pre>.text:0046A792                 jnz     short loc_46A7AF ; 如果不是 UI 表就跳走</pre></td></tr><tr><td data-num=\"68\"></td><td><pre>.text:0046A794                 mov     ecx, large fs:_KPCR.NtTib.Self ; 取自己</pre></td></tr><tr><td data-num=\"69\"></td><td><pre>.text:0046A79B                 xor     ebx, ebx</pre></td></tr><tr><td data-num=\"70\"></td><td><pre>ext:0046A79D                   ; _DWORD __stdcall loc_46A79D ()</pre></td></tr><tr><td data-num=\"71\"></td><td><pre>.text:0046A79D                   loc_46A79D:                             ; DATA XREF: KiPreprocessAccessViolation (x,x,x)+3D↑o</pre></td></tr><tr><td data-num=\"72\"></td><td><pre>.text:0046A79D 0B 99 70 0F 00 00                 or      ebx, [ecx+0F70h]</pre></td></tr><tr><td data-num=\"73\"></td><td><pre>.text:0046A7A3 74 0A                             jz      short loc_46A7AF</pre></td></tr><tr><td data-num=\"74\"></td><td><pre>.text:0046A7A5 52                                push    edx</pre></td></tr><tr><td data-num=\"75\"></td><td><pre>.text:0046A7A6 50                                push    eax</pre></td></tr><tr><td data-num=\"76\"></td><td><pre>.text:0046A7A7 FF 15 48 57 48 00                 call    ds:_KeGdiFlushUserBatch</pre></td></tr><tr><td data-num=\"77\"></td><td><pre>.text:0046A7AD 58                                pop     eax</pre></td></tr><tr><td data-num=\"78\"></td><td><pre>.text:0046A7AE 5A                                pop     edx</pre></td></tr><tr><td data-num=\"79\"></td><td><pre>.text:0046A7AF</pre></td></tr><tr><td data-num=\"80\"></td><td><pre>.text:0046A7AF                   loc_46A7AF:                             ; CODE XREF: .text:0046A792↑j</pre></td></tr><tr><td data-num=\"81\"></td><td><pre>.text:0046A7AF                                                           ; .text:0046A7A3↑j</pre></td></tr><tr><td data-num=\"82\"></td><td><pre>.text:0046A7AF 64 FF 05 38 06 00+                inc     large dword ptr fs:_KPCR.PrcbData.KeSystemCalls</pre></td></tr><tr><td data-num=\"83\"></td><td><pre>.text:0046A7AF 00</pre></td></tr><tr><td data-num=\"84\"></td><td><pre>.text:0046A7B6 8B F2                             mov     esi, edx        ; esi &#x3D; 指向 3 环函数传递的参数（在堆栈中）</pre></td></tr><tr><td data-num=\"85\"></td><td><pre>.text:0046A7B8 8B 5F 0C                          mov     ebx, [edi+0Ch]  ; SSDT 参数表地址</pre></td></tr><tr><td data-num=\"86\"></td><td><pre>.text:0046A7BB 33 C9                             xor     ecx, ecx</pre></td></tr><tr><td data-num=\"87\"></td><td><pre>.text:0046A7BD 8A 0C 18                          mov     cl, [eax+ebx]   ; 获得调用指定函数的参数表的参数长度</pre></td></tr><tr><td data-num=\"88\"></td><td><pre>.text:0046A7C0 8B 3F                             mov     edi, [edi]      ; 获取函数表</pre></td></tr><tr><td data-num=\"89\"></td><td><pre>.text:0046A7C2 8B 1C 87                          mov     ebx, [edi+eax*4] ; 获取函数</pre></td></tr><tr><td data-num=\"90\"></td><td><pre>.text:0046A7C5 2B E1                             sub     esp, ecx        ; 获取要 copy 的栈</pre></td></tr><tr><td data-num=\"91\"></td><td><pre>.text:0046A7C7 C1 E9 02                          shr     ecx, 2          ; 按照四个字节来 copy 所以 &gt;&gt;2</pre></td></tr><tr><td data-num=\"92\"></td><td><pre>.text:0046A7CA 8B FC                             mov     edi, esp</pre></td></tr><tr><td data-num=\"93\"></td><td><pre>.text:0046A7CC F6 45 72 02                       test    byte ptr [ebp+(_KTRAP_FRAME.EFlags+2)], 2 ; 判断 eflags 的第 1（从 0 开始计数）位是否为 1。KTRAP_FRAME 里保存的是 3 环的数据。</pre></td></tr><tr><td data-num=\"94\"></td><td><pre>.text:0046A7D0 75 06                             jnz     short loc_46A7D8 ; 判断地址是否是 3 环的。就是 0x7fffffff-- 火哥说的</pre></td></tr><tr><td data-num=\"95\"></td><td><pre>.text:0046A7D2 F6 45 6C 01                       test    byte ptr [ebp+_KTRAP_FRAME.SegCs], 1 ; 判断 CS 是不是用户环的</pre></td></tr><tr><td data-num=\"96\"></td><td><pre>.text:0046A7D6 74 0C                             jz      short loc_46A7E4 ; 如果是 0 环的，就不用判断地址是否合法了</pre></td></tr><tr><td data-num=\"97\"></td><td><pre>.text:0046A7D8</pre></td></tr><tr><td data-num=\"98\"></td><td><pre>.text:0046A7D8                   loc_46A7D8:                             ; CODE XREF: .text:0046A7D0↑j</pre></td></tr><tr><td data-num=\"99\"></td><td><pre>.text:0046A7D8 3B 35 34 B1 48 00                 cmp     esi, ds:_MmUserProbeAddress ; 判断地址是否是 3 环的。就是 0x7fffffff-- 火哥说的</pre></td></tr><tr><td data-num=\"100\"></td><td><pre>.text:0046A7DE 0F 83 A8 01 00 00                 jnb     loc_46A98C      ; 地址访问异常</pre></td></tr><tr><td data-num=\"101\"></td><td><pre>.text:0046A7E4</pre></td></tr><tr><td data-num=\"102\"></td><td><pre>.text:0046A7E4                   ; _DWORD __stdcall loc_46A7E4 ()</pre></td></tr><tr><td data-num=\"103\"></td><td><pre>.text:0046A7E4                   loc_46A7E4:                             ; CODE XREF: .text:0046A7D6↑j</pre></td></tr><tr><td data-num=\"104\"></td><td><pre>.text:0046A7E4                                                           ; DATA XREF: KiPreprocessAccessViolation (x,x,x):loc_42BD4B↑o</pre></td></tr><tr><td data-num=\"105\"></td><td><pre>.text:0046A7E4 F3 A5                             rep movsd               ; 拷贝参数</pre></td></tr><tr><td data-num=\"106\"></td><td><pre>.text:0046A7E6 FF D3                             call    ebx             ; 调用函数</pre></td></tr><tr><td data-num=\"107\"></td><td><pre>.text:0046A7E8</pre></td></tr><tr><td data-num=\"108\"></td><td><pre>.text:0046A7E8                   ; _DWORD __stdcall loc_46A7E8 ()</pre></td></tr><tr><td data-num=\"109\"></td><td><pre>.text:0046A7E8                   loc_46A7E8:                             ; CODE XREF: .text:0046A991↓j</pre></td></tr><tr><td data-num=\"110\"></td><td><pre>.text:0046A7E8                                                           ; DATA XREF: KiPreprocessAccessViolation (x,x,x)+59↑o</pre></td></tr><tr><td data-num=\"111\"></td><td><pre>.text:0046A7E8 8B E5                             mov     esp, ebp        ; esp ebp 又指向了 KTRAP_FRAME 结构体</pre></td></tr><tr><td data-num=\"112\"></td><td><pre>.text:0046A7EA</pre></td></tr><tr><td data-num=\"113\"></td><td><pre>.text:0046A7EA                   loc_46A7EA:                             ; CODE XREF: _KiBBTUnexpectedRange+38↑j</pre></td></tr><tr><td data-num=\"114\"></td><td><pre>.text:0046A7EA                                                           ; _KiBBTUnexpectedRange+43↑j</pre></td></tr><tr><td data-num=\"115\"></td><td><pre>.text:0046A7EA 64 8B 0D 24 01 00+                mov     ecx, large fs:_KPCR.PrcbData.CurrentThread ; ecx &#x3D; 当前 CPU 所执行线程的_ETHREAD 结构体</pre></td></tr><tr><td data-num=\"116\"></td><td><pre>.text:0046A7EA 00</pre></td></tr><tr><td data-num=\"117\"></td><td><pre>.text:0046A7F1 8B 55 3C                          mov     edx, [ebp+_KTRAP_FRAME._Edx] ; 取三环的 esp</pre></td></tr><tr><td data-num=\"118\"></td><td><pre>.text:0046A7F4 89 91 34 01 00 00                 mov     [ecx+_KTHREAD.TrapFrame], edx</pre></td></tr><tr><td data-num=\"119\"></td><td><pre>.text:0046A7FA</pre></td></tr><tr><td data-num=\"120\"></td><td><pre>.text:0046A7FA                   loc_46A7FA:                             ; CODE XREF: KiCallUserMode (x,x)+EC↑j</pre></td></tr><tr><td data-num=\"121\"></td><td><pre>.text:0046A7FA                                                           ; NtContinue (x,x)+43↓j ...</pre></td></tr><tr><td data-num=\"122\"></td><td><pre>.text:0046A7FA FA                                cli                     ; 结束中断</pre></td></tr><tr><td data-num=\"123\"></td><td><pre>.text:0046A7FB F7 45 70 00 00 02+                test    [ebp+_KTRAP_FRAME.EFlags], 20000h ; 判断是不是虚拟 8086 模式。eflags 中的 VM 位（第 17 位）。</pre></td></tr><tr><td data-num=\"124\"></td><td><pre>.text:0046A7FB 00</pre></td></tr><tr><td data-num=\"125\"></td><td><pre>.text:0046A802 75 06                             jnz     short loc_46A80A ; ebx &#x3D; 当前 CPU 所执行线程的_ETHREAD 结构体</pre></td></tr><tr><td data-num=\"126\"></td><td><pre>.text:0046A804 F6 45 6C 01                       test    byte ptr [ebp+_KTRAP_FRAME.SegCs], 1 ; 判断是否是用户态</pre></td></tr><tr><td data-num=\"127\"></td><td><pre>.text:0046A808 74 56                             jz      short loc_46A860 ; 取出异常链</pre></td></tr><tr><td data-num=\"128\"></td><td><pre>.text:0046A80A</pre></td></tr><tr><td data-num=\"129\"></td><td><pre>.text:0046A80A                   loc_46A80A:                             ; CODE XREF: .text:0046A802↑j</pre></td></tr><tr><td data-num=\"130\"></td><td><pre>.text:0046A80A                                                           ; .text:0046A85E↓j</pre></td></tr><tr><td data-num=\"131\"></td><td><pre>.text:0046A80A 64 8B 1D 24 01 00+                mov     ebx, large fs:_KPCR.PrcbData.CurrentThread ; ebx &#x3D; 当前 CPU 所执行线程的_ETHREAD 结构体</pre></td></tr><tr><td data-num=\"132\"></td><td><pre>.text:0046A80A 00</pre></td></tr><tr><td data-num=\"133\"></td><td><pre>.text:0046A811 C6 43 2E 00                       mov     [ebx+_ETHREAD.Tcb.Alerted], 0 ; APC 相关的了，还没学，先跳过。</pre></td></tr><tr><td data-num=\"134\"></td><td><pre>.text:0046A815 80 7B 4A 00                       cmp     [ebx+_ETHREAD.Tcb.ApcState.UserApcPending], 0</pre></td></tr><tr><td data-num=\"135\"></td><td><pre>.text:0046A819 74 45                             jz      short loc_46A860 ; 取出异常链</pre></td></tr><tr><td data-num=\"136\"></td><td><pre>.text:0046A81B 8B DD                             mov     ebx, ebp</pre></td></tr><tr><td data-num=\"137\"></td><td><pre>.text:0046A81D 89 43 44                          mov     [ebx+44h], eax</pre></td></tr><tr><td data-num=\"138\"></td><td><pre>.text:0046A820 C7 43 50 3B 00 00+                mov     [ebx+_KTRAP_FRAME.SegFs], 3Bh ; &#39;;&#39;</pre></td></tr><tr><td data-num=\"139\"></td><td><pre>.text:0046A820 00</pre></td></tr><tr><td data-num=\"140\"></td><td><pre>.text:0046A827 C7 43 38 23 00 00+                mov     [ebx+_KTRAP_FRAME.SegDs], 23h ; &#39;#&#39;</pre></td></tr><tr><td data-num=\"141\"></td><td><pre>.text:0046A827 00</pre></td></tr><tr><td data-num=\"142\"></td><td><pre>.text:0046A82E C7 43 34 23 00 00+                mov     [ebx+_KTRAP_FRAME.SegEs], 23h ; &#39;#&#39;</pre></td></tr><tr><td data-num=\"143\"></td><td><pre>.text:0046A82E 00</pre></td></tr><tr><td data-num=\"144\"></td><td><pre>.text:0046A835 C7 43 30 00 00 00+                mov     [ebx+_KTRAP_FRAME.SegGs], 0</pre></td></tr><tr><td data-num=\"145\"></td><td><pre>.text:0046A835 00</pre></td></tr><tr><td data-num=\"146\"></td><td><pre>.text:0046A83C B9 01 00 00 00                    mov     ecx, 1</pre></td></tr><tr><td data-num=\"147\"></td><td><pre>.text:0046A841 FF 15 2C 10 40 00                 call    ds:__imp_@KfRaiseIrql@4 ; KfRaiseIrql (x)</pre></td></tr><tr><td data-num=\"148\"></td><td><pre>.text:0046A847 50                                push    eax</pre></td></tr><tr><td data-num=\"149\"></td><td><pre>.text:0046A848 FB                                sti</pre></td></tr><tr><td data-num=\"150\"></td><td><pre>.text:0046A849 53                                push    ebx</pre></td></tr><tr><td data-num=\"151\"></td><td><pre>.text:0046A84A 6A 00                             push    0</pre></td></tr><tr><td data-num=\"152\"></td><td><pre>.text:0046A84C 6A 01                             push    1</pre></td></tr><tr><td data-num=\"153\"></td><td><pre>.text:0046A84E E8 99 DF FB FF                    call    _KiDeliverApc@12 ; KiDeliverApc (x,x,x)</pre></td></tr><tr><td data-num=\"154\"></td><td><pre>.text:0046A853 59                                pop     ecx</pre></td></tr><tr><td data-num=\"155\"></td><td><pre>.text:0046A854 FF 15 30 10 40 00                 call    ds:__imp_@KfLowerIrql@4 ; KfLowerIrql (x)</pre></td></tr><tr><td data-num=\"156\"></td><td><pre>.text:0046A85A 8B 43 44                          mov     eax, [ebx+44h]</pre></td></tr><tr><td data-num=\"157\"></td><td><pre>.text:0046A85D FA                                cli</pre></td></tr><tr><td data-num=\"158\"></td><td><pre>.text:0046A85E EB AA                             jmp     short loc_46A80A ; ebx &#x3D; 当前 CPU 所执行线程的_ETHREAD 结构体</pre></td></tr><tr><td data-num=\"159\"></td><td><pre>.text:0046A860                   ; ---------------------------------------------------------------------------</pre></td></tr><tr><td data-num=\"160\"></td><td><pre>.text:0046A860</pre></td></tr><tr><td data-num=\"161\"></td><td><pre>.text:0046A860                   loc_46A860:                             ; CODE XREF: .text:0046A808↑j</pre></td></tr><tr><td data-num=\"162\"></td><td><pre>.text:0046A860                                                           ; .text:0046A819↑j</pre></td></tr><tr><td data-num=\"163\"></td><td><pre>.text:0046A860 8B 54 24 4C                       mov     edx, [esp+_KTRAP_FRAME.ExceptionList] ; 取出异常链</pre></td></tr><tr><td data-num=\"164\"></td><td><pre>.text:0046A864 64 8B 1D 50 00 00+                mov     ebx, large fs:_KPCR.DebugActive ; 取出调试状态</pre></td></tr><tr><td data-num=\"165\"></td><td><pre>.text:0046A864 00</pre></td></tr><tr><td data-num=\"166\"></td><td><pre>.text:0046A86B 64 89 15 00 00 00+                mov     large fs:_KPCR, edx ; 把 KTRAP_FRAME 结构中的 ExceptionList 放在了 KPCR 结构成员 ExceptionList。要还原了，恢复数据。</pre></td></tr><tr><td data-num=\"167\"></td><td><pre>.text:0046A86B 00</pre></td></tr><tr><td data-num=\"168\"></td><td><pre>.text:0046A872 8B 4C 24 48                       mov     ecx, [esp+_KTRAP_FRAME.PreviousPreviousMode]</pre></td></tr><tr><td data-num=\"169\"></td><td><pre>.text:0046A876 64 8B 35 24 01 00+                mov     esi, large fs:_KPCR.PrcbData.CurrentThread</pre></td></tr><tr><td data-num=\"170\"></td><td><pre>.text:0046A876 00</pre></td></tr><tr><td data-num=\"171\"></td><td><pre>.text:0046A87D 88 8E 40 01 00 00                 mov     [esi+_ETHREAD.Tcb.PreviousMode], cl ; 把 KTRAP_FRAME 结构中的 PreviousPreviousMode 放在了 KPCR 的结构成员 PreviousMode。把先前模式还原</pre></td></tr><tr><td data-num=\"172\"></td><td><pre>.text:0046A883 F7 C3 FF 00 00 00                 test    ebx, 0FFh       ; 再次判断调试状态</pre></td></tr><tr><td data-num=\"173\"></td><td><pre>.text:0046A889 75 79                             jnz     short loc_46A904 ; 若是调试状态还要，还原一些调试相关的寄存器</pre></td></tr><tr><td data-num=\"174\"></td><td><pre>.text:0046A88B</pre></td></tr><tr><td data-num=\"175\"></td><td><pre>.text:0046A88B                   loc_46A88B:                             ; CODE XREF: .text:0046A914↓j</pre></td></tr><tr><td data-num=\"176\"></td><td><pre>.text:0046A88B                                                           ; .text:0046A943↓j</pre></td></tr><tr><td data-num=\"177\"></td><td><pre>.text:0046A88B F7 44 24 70 00 00+                test    [esp+_KTRAP_FRAME.EFlags], 20000h ; 判读是否是虚拟 8086 模式</pre></td></tr><tr><td data-num=\"178\"></td><td><pre>.text:0046A88B 02 00</pre></td></tr><tr><td data-num=\"179\"></td><td><pre>.text:0046A893 0F 85 FF 08 00 00                 jnz     loc_46B198      ; 如果是的话，走虚拟 8086 的模式退出</pre></td></tr><tr><td data-num=\"180\"></td><td><pre>.text:0046A899 66 F7 44 24 6C F9+                test    word ptr [esp+_KTRAP_FRAME.SegCs], 0FFF9h</pre></td></tr><tr><td data-num=\"181\"></td><td><pre>.text:0046A899 FF</pre></td></tr><tr><td data-num=\"182\"></td><td><pre>.text:0046A8A0 0F 84 B4 00 00 00                 jz      loc_46A95A</pre></td></tr><tr><td data-num=\"183\"></td><td><pre>.text:0046A8A6 66 83 7C 24 6C 1B                 cmp     word ptr [esp+_KTRAP_FRAME.SegCs], 1Bh</pre></td></tr><tr><td data-num=\"184\"></td><td><pre>.text:0046A8AC 66 0F BA 64 24 6C+                bt      word ptr [esp+_KTRAP_FRAME.SegCs], 0</pre></td></tr><tr><td data-num=\"185\"></td><td><pre>.text:0046A8AC 00</pre></td></tr><tr><td data-num=\"186\"></td><td><pre>.text:0046A8B3 F5                                cmc</pre></td></tr><tr><td data-num=\"187\"></td><td><pre>.text:0046A8B4 0F 87 8E 00 00 00                 ja      loc_46A948</pre></td></tr><tr><td data-num=\"188\"></td><td><pre>.text:0046A8BA 66 83 7D 6C 08                    cmp     word ptr [ebp+_KTRAP_FRAME.SegCs], 8</pre></td></tr><tr><td data-num=\"189\"></td><td><pre>.text:0046A8BF 74 05                             jz      short loc_46A8C6</pre></td></tr><tr><td data-num=\"190\"></td><td><pre>.text:0046A8C1</pre></td></tr><tr><td data-num=\"191\"></td><td><pre>.text:0046A8C1                   loc_46A8C1:                             ; CODE XREF: .text:0046A955↓j</pre></td></tr><tr><td data-num=\"192\"></td><td><pre>.text:0046A8C1 8D 65 50                          lea     esp, [ebp+_KTRAP_FRAME.SegFs]</pre></td></tr><tr><td data-num=\"193\"></td><td><pre>.text:0046A8C4 0F A1                             pop     fs              ; 还原 fs</pre></td></tr><tr><td data-num=\"194\"></td><td><pre>.text:0046A8C6                                   assume fs:nothing</pre></td></tr><tr><td data-num=\"195\"></td><td><pre>.text:0046A8C6</pre></td></tr><tr><td data-num=\"196\"></td><td><pre>.text:0046A8C6                   loc_46A8C6:                             ; CODE XREF: .text:0046A8BF↑j</pre></td></tr><tr><td data-num=\"197\"></td><td><pre>.text:0046A8C6 8D 65 54                          lea     esp, [ebp+_KTRAP_FRAME._Edi]</pre></td></tr><tr><td data-num=\"198\"></td><td><pre>.text:0046A8C9 5F                                pop     edi             ; 还原 edi</pre></td></tr><tr><td data-num=\"199\"></td><td><pre>.text:0046A8CA 5E                                pop     esi</pre></td></tr><tr><td data-num=\"200\"></td><td><pre>.text:0046A8CB 5B                                pop     ebx</pre></td></tr><tr><td data-num=\"201\"></td><td><pre>.text:0046A8CC 5D                                pop     ebp             ; 还原 ebp, 此时 esp 指向 ErrorCode</pre></td></tr><tr><td data-num=\"202\"></td><td><pre>.text:0046A8CD 66 81 7C 24 08 80+                cmp     word ptr [esp+8], 80h ; &#39;€&#39; ; 此时 esp+8 指向的是 SegCs</pre></td></tr><tr><td data-num=\"203\"></td><td><pre>.text:0046A8CD 00</pre></td></tr><tr><td data-num=\"204\"></td><td><pre>.text:0046A8D4 0F 87 DA 08 00 00                 ja      loc_46B1B4</pre></td></tr><tr><td data-num=\"205\"></td><td><pre>.text:0046A8DA 83 C4 04                          add     esp, 4          ; 此时 esp 指向 Eip,Eip 中存储的是 KUSER_SHARED_DATA 中的 SystemCallReturn</pre></td></tr><tr><td data-num=\"206\"></td><td><pre>.text:0046A8DD F7 44 24 04 01 00+                test    dword ptr [esp+4], 1 ; esp+4 指向 SegCs</pre></td></tr><tr><td data-num=\"207\"></td><td><pre>.text:0046A8DD 00 00</pre></td></tr><tr><td data-num=\"208\"></td><td><pre>.text:0046A8E5</pre></td></tr><tr><td data-num=\"209\"></td><td><pre>.text:0046A8E5                   loc_46A8E5:                             ; DATA XREF: KiDisableFastSyscallReturn ()+9↑w</pre></td></tr><tr><td data-num=\"210\"></td><td><pre>.text:0046A8E5                                                           ; KiEnableFastSyscallReturn ():loc_4278B0↑r ...</pre></td></tr><tr><td data-num=\"211\"></td><td><pre>.text:0046A8E5 75 05                             jnz     short locret_46A8EC</pre></td></tr><tr><td data-num=\"212\"></td><td><pre>.text:0046A8E7 5A                                pop     edx             ; edx &#x3D; SystemCallReturn</pre></td></tr><tr><td data-num=\"213\"></td><td><pre>.text:0046A8E8 59                                pop     ecx             ; ecx &#x3D; SegCs</pre></td></tr><tr><td data-num=\"214\"></td><td><pre>.text:0046A8E9 9D                                popf                    ; 还原 flags 寄存器</pre></td></tr><tr><td data-num=\"215\"></td><td><pre>.text:0046A8EA FF E2                             jmp     edx</pre></td></tr></table></figure><p>在 windbg 中对 KiFastCallEntry 下了断点后 一步一步跟了一下：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kd&gt; bp KiFastCallEntry</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>kd&gt; g</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Breakpoint 0 hit</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>nt!KiFastCallEntry:</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>805426e0 b923000000      mov     ecx,23h</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>nt!KiFastCallEntry+0x5:</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>805426e5 6a30            push    30h</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>nt!KiFastCallEntry+0x7:</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>805426e7 0fa1            pop     fs</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>nt!KiFastCallEntry+0x9:</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>805426e9 8ed9            mov     ds,cx</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>nt!KiFastCallEntry+0xb:</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>805426eb 8ec1            mov     es,cx</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>nt!KiFastCallEntry+0xd:</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>805426ed 648b0d40000000  mov     ecx,dword ptr fs:[40h]</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>nt!KiFastCallEntry+0x14:</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>805426f4 8b6104          mov     esp,dword ptr [ecx+4]</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>nt!KiFastCallEntry+0x17:</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>805426f7 6a23            push    23h</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>nt!KiFastCallEntry+0x19:</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>805426f9 52              push    edx</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>nt!KiFastCallEntry+0x1a:</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>805426fa 9c              pushfd</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>nt!KiFastCallEntry+0x1b:</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>805426fb 6a02            push    2</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>nt!KiFastCallEntry+0x1d:</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>805426fd 83c208          add     edx,8</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>nt!KiFastCallEntry+0x20:</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>80542700 9d              popfd</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>nt!KiFastCallEntry+0x21:</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>80542701 804c240102      or      byte ptr [esp+1],2</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>nt!KiFastCallEntry+0x26:</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>80542706 6a1b            push    1Bh</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>nt!KiFastCallEntry+0x28:</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>80542708 ff350403dfff    push    dword ptr ds:[0FFDF0304h]</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>nt!KiFastCallEntry+0x2e:</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>8054270e 6a00            push    0</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>nt!KiFastCallEntry+0x30:</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>80542710 55              push    ebp</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>nt!KiFastCallEntry+0x31:</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>80542711 53              push    ebx</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>nt!KiFastCallEntry+0x32:</pre></td></tr><tr><td data-num=\"62\"></td><td><pre>80542712 56              push    esi</pre></td></tr><tr><td data-num=\"63\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"64\"></td><td><pre>nt!KiFastCallEntry+0x33:</pre></td></tr><tr><td data-num=\"65\"></td><td><pre>80542713 57              push    edi</pre></td></tr><tr><td data-num=\"66\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"67\"></td><td><pre>nt!KiFastCallEntry+0x34:</pre></td></tr><tr><td data-num=\"68\"></td><td><pre>80542714 648b1d1c000000  mov     ebx,dword ptr fs:[1Ch]</pre></td></tr><tr><td data-num=\"69\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"70\"></td><td><pre>nt!KiFastCallEntry+0x3b:</pre></td></tr><tr><td data-num=\"71\"></td><td><pre>8054271b 6a3b            push    3Bh</pre></td></tr><tr><td data-num=\"72\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"73\"></td><td><pre>nt!KiFastCallEntry+0x3d:</pre></td></tr><tr><td data-num=\"74\"></td><td><pre>8054271d 8bb324010000    mov     esi,dword ptr [ebx+124h]</pre></td></tr><tr><td data-num=\"75\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"76\"></td><td><pre>nt!KiFastCallEntry+0x43:</pre></td></tr><tr><td data-num=\"77\"></td><td><pre>80542723 ff33            push    dword ptr [ebx]</pre></td></tr><tr><td data-num=\"78\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"79\"></td><td><pre>nt!KiFastCallEntry+0x45:</pre></td></tr><tr><td data-num=\"80\"></td><td><pre>80542725 c703ffffffff    mov     dword ptr [ebx],0FFFFFFFFh</pre></td></tr><tr><td data-num=\"81\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"82\"></td><td><pre>nt!KiFastCallEntry+0x4b:</pre></td></tr><tr><td data-num=\"83\"></td><td><pre>8054272b 8b6e18          mov     ebp,dword ptr [esi+18h]</pre></td></tr><tr><td data-num=\"84\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"85\"></td><td><pre>nt!KiFastCallEntry+0x4e:</pre></td></tr><tr><td data-num=\"86\"></td><td><pre>8054272e 6a01            push    1</pre></td></tr><tr><td data-num=\"87\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"88\"></td><td><pre>nt!KiFastCallEntry+0x50:</pre></td></tr><tr><td data-num=\"89\"></td><td><pre>80542730 83ec48          sub     esp,48h</pre></td></tr><tr><td data-num=\"90\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"91\"></td><td><pre>nt!KiFastCallEntry+0x53:</pre></td></tr><tr><td data-num=\"92\"></td><td><pre>80542733 81ed9c020000    sub     ebp,29Ch</pre></td></tr><tr><td data-num=\"93\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"94\"></td><td><pre>nt!KiFastCallEntry+0x59:</pre></td></tr><tr><td data-num=\"95\"></td><td><pre>80542739 c6864001000001  mov     byte ptr [esi+140h],1</pre></td></tr><tr><td data-num=\"96\"></td><td><pre>kd&gt; r</pre></td></tr><tr><td data-num=\"97\"></td><td><pre>eax&#x3D;00000077 ebx&#x3D;ffdff000 ecx&#x3D;80042000 edx&#x3D;0015f938 esi&#x3D;8a13eda0 edi&#x3D;0015fc70</pre></td></tr><tr><td data-num=\"98\"></td><td><pre>eip&#x3D;80542739 esp&#x3D;b9cc8d64 ebp&#x3D;b9cc8d64 iopl&#x3D;0         nv up di ng nz ac po nc</pre></td></tr><tr><td data-num=\"99\"></td><td><pre>cs&#x3D;0008  ss&#x3D;0010  ds&#x3D;0023  es&#x3D;0023  fs&#x3D;0030  gs&#x3D;0000             efl&#x3D;00000092</pre></td></tr><tr><td data-num=\"100\"></td><td><pre>nt!KiFastCallEntry+0x59:</pre></td></tr><tr><td data-num=\"101\"></td><td><pre>80542739 c6864001000001  mov     byte ptr [esi+140h],1      ds:0023:8a13eee0&#x3D;01</pre></td></tr><tr><td data-num=\"102\"></td><td><pre>kd&gt; dt _KTRAP_FRAME b9cc8d64</pre></td></tr><tr><td data-num=\"103\"></td><td><pre>ntdll!_KTRAP_FRAME</pre></td></tr><tr><td data-num=\"104\"></td><td><pre>   +0x000 DbgEbp           : 0</pre></td></tr><tr><td data-num=\"105\"></td><td><pre>   +0x004 DbgEip           : 0</pre></td></tr><tr><td data-num=\"106\"></td><td><pre>   +0x008 DbgArgMark       : 0x23</pre></td></tr><tr><td data-num=\"107\"></td><td><pre>   +0x00c DbgArgPointer    : 0x23</pre></td></tr><tr><td data-num=\"108\"></td><td><pre>   +0x010 TempSegCs        : 0x15f938</pre></td></tr><tr><td data-num=\"109\"></td><td><pre>   +0x014 TempEsp          : 0x80042000</pre></td></tr><tr><td data-num=\"110\"></td><td><pre>   +0x018 Dr0              : 0x77</pre></td></tr><tr><td data-num=\"111\"></td><td><pre>   +0x01c Dr1              : 0x77</pre></td></tr><tr><td data-num=\"112\"></td><td><pre>   +0x020 Dr2              : 0xffffffff</pre></td></tr><tr><td data-num=\"113\"></td><td><pre>   +0x024 Dr3              : 0x30</pre></td></tr><tr><td data-num=\"114\"></td><td><pre>   +0x028 Dr6              : 0x15fc70</pre></td></tr><tr><td data-num=\"115\"></td><td><pre>   +0x02c Dr7              : 0x8a13eda0</pre></td></tr><tr><td data-num=\"116\"></td><td><pre>   +0x030 SegGs            : 0xffdff000</pre></td></tr><tr><td data-num=\"117\"></td><td><pre>   +0x034 SegEs            : 0xb9cc9000</pre></td></tr><tr><td data-num=\"118\"></td><td><pre>   +0x038 SegDs            : 0</pre></td></tr><tr><td data-num=\"119\"></td><td><pre>   +0x03c Edx              : 0x80542730</pre></td></tr><tr><td data-num=\"120\"></td><td><pre>   +0x040 Ecx              : 8</pre></td></tr><tr><td data-num=\"121\"></td><td><pre>   +0x044 Eax              : 0x102</pre></td></tr><tr><td data-num=\"122\"></td><td><pre>   +0x048 PreviousPreviousMode : 1</pre></td></tr><tr><td data-num=\"123\"></td><td><pre>   +0x04c ExceptionList    : 0xffffffff _EXCEPTION_REGISTRATION_RECORD</pre></td></tr><tr><td data-num=\"124\"></td><td><pre>   +0x050 SegFs            : 0x3b</pre></td></tr><tr><td data-num=\"125\"></td><td><pre>   +0x054 Edi              : 0x15fc70</pre></td></tr><tr><td data-num=\"126\"></td><td><pre>   +0x058 Esi              : 0x1106a0</pre></td></tr><tr><td data-num=\"127\"></td><td><pre>   +0x05c Ebx              : 0</pre></td></tr><tr><td data-num=\"128\"></td><td><pre>   +0x060 Ebp              : 0x15fc40</pre></td></tr><tr><td data-num=\"129\"></td><td><pre>   +0x064 ErrCode          : 0</pre></td></tr><tr><td data-num=\"130\"></td><td><pre>   +0x068 Eip              : 0x7c92e4f4</pre></td></tr><tr><td data-num=\"131\"></td><td><pre>   +0x06c SegCs            : 0x1b</pre></td></tr><tr><td data-num=\"132\"></td><td><pre>   +0x070 EFlags           : 0x246</pre></td></tr><tr><td data-num=\"133\"></td><td><pre>   +0x074 HardwareEsp      : 0x15f930</pre></td></tr><tr><td data-num=\"134\"></td><td><pre>   +0x078 HardwareSegSs    : 0x23</pre></td></tr><tr><td data-num=\"135\"></td><td><pre>   +0x07c V86Es            : 0</pre></td></tr><tr><td data-num=\"136\"></td><td><pre>   +0x080 V86Ds            : 0</pre></td></tr><tr><td data-num=\"137\"></td><td><pre>   +0x084 V86Fs            : 0</pre></td></tr><tr><td data-num=\"138\"></td><td><pre>   +0x088 V86Gs            : 0</pre></td></tr><tr><td data-num=\"139\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"140\"></td><td><pre>nt!KiFastCallEntry+0x60:</pre></td></tr><tr><td data-num=\"141\"></td><td><pre>80542740 3bec            cmp     ebp,esp</pre></td></tr><tr><td data-num=\"142\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"143\"></td><td><pre>nt!KiFastCallEntry+0x62:</pre></td></tr><tr><td data-num=\"144\"></td><td><pre>80542742 758d            jne     nt!KiFastCallEntry2+0x49 (805426d1)</pre></td></tr><tr><td data-num=\"145\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"146\"></td><td><pre>nt!KiFastCallEntry+0x64:</pre></td></tr><tr><td data-num=\"147\"></td><td><pre>80542744 83652c00        and     dword ptr [ebp+2Ch],0</pre></td></tr><tr><td data-num=\"148\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"149\"></td><td><pre>nt!KiFastCallEntry+0x68:</pre></td></tr><tr><td data-num=\"150\"></td><td><pre>80542748 f6462cff        test    byte ptr [esi+2Ch],0FFh</pre></td></tr><tr><td data-num=\"151\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"152\"></td><td><pre>nt!KiFastCallEntry+0x6c:</pre></td></tr><tr><td data-num=\"153\"></td><td><pre>8054274c 89ae34010000    mov     dword ptr [esi+134h],ebp</pre></td></tr><tr><td data-num=\"154\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"155\"></td><td><pre>nt!KiFastCallEntry+0x72:</pre></td></tr><tr><td data-num=\"156\"></td><td><pre>80542752 0f8538feffff    jne     nt!Dr_FastCallDrSave (80542590)</pre></td></tr><tr><td data-num=\"157\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"158\"></td><td><pre>nt!KiFastCallEntry+0x78:</pre></td></tr><tr><td data-num=\"159\"></td><td><pre>80542758 8b5d60          mov     ebx,dword ptr [ebp+60h]</pre></td></tr><tr><td data-num=\"160\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"161\"></td><td><pre>nt!KiFastCallEntry+0x7b:</pre></td></tr><tr><td data-num=\"162\"></td><td><pre>8054275b 8b7d68          mov     edi,dword ptr [ebp+68h]</pre></td></tr><tr><td data-num=\"163\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"164\"></td><td><pre>nt!KiFastCallEntry+0x7e:</pre></td></tr><tr><td data-num=\"165\"></td><td><pre>8054275e 89550c          mov     dword ptr [ebp+0Ch],edx</pre></td></tr><tr><td data-num=\"166\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"167\"></td><td><pre>nt!KiFastCallEntry+0x81:</pre></td></tr><tr><td data-num=\"168\"></td><td><pre>80542761 c74508000ddbba  mov     dword ptr [ebp+8],0BADB0D00h</pre></td></tr><tr><td data-num=\"169\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"170\"></td><td><pre>nt!KiFastCallEntry+0x88:</pre></td></tr><tr><td data-num=\"171\"></td><td><pre>80542768 895d00          mov     dword ptr [ebp],ebx</pre></td></tr><tr><td data-num=\"172\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"173\"></td><td><pre>nt!KiFastCallEntry+0x8b:</pre></td></tr><tr><td data-num=\"174\"></td><td><pre>8054276b 897d04          mov     dword ptr [ebp+4],edi</pre></td></tr><tr><td data-num=\"175\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"176\"></td><td><pre>nt!KiFastCallEntry+0x8e:</pre></td></tr><tr><td data-num=\"177\"></td><td><pre>8054276e fb              sti</pre></td></tr><tr><td data-num=\"178\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"179\"></td><td><pre>nt!KiFastCallEntry+0x8f:</pre></td></tr><tr><td data-num=\"180\"></td><td><pre>8054276f 8bf8            mov     edi,eax</pre></td></tr><tr><td data-num=\"181\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"182\"></td><td><pre>nt!KiFastCallEntry+0x91:</pre></td></tr><tr><td data-num=\"183\"></td><td><pre>80542771 c1ef08          shr     edi,8</pre></td></tr><tr><td data-num=\"184\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"185\"></td><td><pre>nt!KiFastCallEntry+0x94:</pre></td></tr><tr><td data-num=\"186\"></td><td><pre>80542774 83e730          and     edi,30h</pre></td></tr><tr><td data-num=\"187\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"188\"></td><td><pre>nt!KiFastCallEntry+0x97:</pre></td></tr><tr><td data-num=\"189\"></td><td><pre>80542777 8bcf            mov     ecx,edi</pre></td></tr><tr><td data-num=\"190\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"191\"></td><td><pre>nt!KiFastCallEntry+0x99:</pre></td></tr><tr><td data-num=\"192\"></td><td><pre>80542779 03bee0000000    add     edi,dword ptr [esi+0E0h]</pre></td></tr><tr><td data-num=\"193\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"194\"></td><td><pre>nt!KiFastCallEntry+0x9f:</pre></td></tr><tr><td data-num=\"195\"></td><td><pre>8054277f 8bd8            mov     ebx,eax</pre></td></tr><tr><td data-num=\"196\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"197\"></td><td><pre>nt!KiFastCallEntry+0xa1:</pre></td></tr><tr><td data-num=\"198\"></td><td><pre>80542781 25ff0f0000      and     eax,0FFFh</pre></td></tr><tr><td data-num=\"199\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"200\"></td><td><pre>nt!KiFastCallEntry+0xa6:</pre></td></tr><tr><td data-num=\"201\"></td><td><pre>80542786 3b4708          cmp     eax,dword ptr [edi+8]</pre></td></tr><tr><td data-num=\"202\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"203\"></td><td><pre>nt!KiFastCallEntry+0xa9:</pre></td></tr><tr><td data-num=\"204\"></td><td><pre>80542789 0f8333fdffff    jae     nt!KiBBTUnexpectedRange (805424c2)</pre></td></tr><tr><td data-num=\"205\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"206\"></td><td><pre>nt!KiFastCallEntry+0xaf:</pre></td></tr><tr><td data-num=\"207\"></td><td><pre>8054278f 83f910          cmp     ecx,10h</pre></td></tr><tr><td data-num=\"208\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"209\"></td><td><pre>nt!KiFastCallEntry+0xb2:</pre></td></tr><tr><td data-num=\"210\"></td><td><pre>80542792 751b            jne     nt!KiSystemServiceAccessTeb+0x12 (805427af)</pre></td></tr><tr><td data-num=\"211\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"212\"></td><td><pre>nt!KiSystemServiceAccessTeb+0x12:</pre></td></tr><tr><td data-num=\"213\"></td><td><pre>805427af 64ff0538060000  inc     dword ptr fs:[638h]</pre></td></tr><tr><td data-num=\"214\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"215\"></td><td><pre>nt!KiSystemServiceAccessTeb+0x19:</pre></td></tr><tr><td data-num=\"216\"></td><td><pre>805427b6 8bf2            mov     esi,edx</pre></td></tr><tr><td data-num=\"217\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"218\"></td><td><pre>nt!KiSystemServiceAccessTeb+0x1b:</pre></td></tr><tr><td data-num=\"219\"></td><td><pre>805427b8 8b5f0c          mov     ebx,dword ptr [edi+0Ch]</pre></td></tr><tr><td data-num=\"220\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"221\"></td><td><pre>nt!KiSystemServiceAccessTeb+0x1e:</pre></td></tr><tr><td data-num=\"222\"></td><td><pre>805427bb 33c9            xor     ecx,ecx</pre></td></tr><tr><td data-num=\"223\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"224\"></td><td><pre>nt!KiSystemServiceAccessTeb+0x20:</pre></td></tr><tr><td data-num=\"225\"></td><td><pre>805427bd 8a0c18          mov     cl,byte ptr [eax+ebx]</pre></td></tr><tr><td data-num=\"226\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"227\"></td><td><pre>nt!KiSystemServiceAccessTeb+0x23:</pre></td></tr><tr><td data-num=\"228\"></td><td><pre>805427c0 8b3f            mov     edi,dword ptr [edi]</pre></td></tr><tr><td data-num=\"229\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"230\"></td><td><pre>nt!KiSystemServiceAccessTeb+0x25:</pre></td></tr><tr><td data-num=\"231\"></td><td><pre>805427c2 8b1c87          mov     ebx,dword ptr [edi+eax*4]</pre></td></tr><tr><td data-num=\"232\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"233\"></td><td><pre>nt!KiSystemServiceAccessTeb+0x28:</pre></td></tr><tr><td data-num=\"234\"></td><td><pre>805427c5 2be1            sub     esp,ecx</pre></td></tr><tr><td data-num=\"235\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"236\"></td><td><pre>nt!KiSystemServiceAccessTeb+0x2a:</pre></td></tr><tr><td data-num=\"237\"></td><td><pre>805427c7 c1e902          shr     ecx,2</pre></td></tr><tr><td data-num=\"238\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"239\"></td><td><pre>nt!KiSystemServiceAccessTeb+0x2d:</pre></td></tr><tr><td data-num=\"240\"></td><td><pre>805427ca 8bfc            mov     edi,esp</pre></td></tr><tr><td data-num=\"241\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"242\"></td><td><pre>nt!KiSystemServiceAccessTeb+0x2f:</pre></td></tr><tr><td data-num=\"243\"></td><td><pre>805427cc f6457202        test    byte ptr [ebp+72h],2</pre></td></tr><tr><td data-num=\"244\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"245\"></td><td><pre>nt!KiSystemServiceAccessTeb+0x33:</pre></td></tr><tr><td data-num=\"246\"></td><td><pre>805427d0 7506            jne     nt!KiSystemServiceAccessTeb+0x3b (805427d8)</pre></td></tr><tr><td data-num=\"247\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"248\"></td><td><pre>nt!KiSystemServiceAccessTeb+0x35:</pre></td></tr><tr><td data-num=\"249\"></td><td><pre>805427d2 f6456c01        test    byte ptr [ebp+6Ch],1</pre></td></tr><tr><td data-num=\"250\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"251\"></td><td><pre>nt!KiSystemServiceAccessTeb+0x39:</pre></td></tr><tr><td data-num=\"252\"></td><td><pre>805427d6 740c            je      nt!KiSystemServiceCopyArguments (805427e4)</pre></td></tr><tr><td data-num=\"253\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"254\"></td><td><pre>nt!KiSystemServiceAccessTeb+0x3b:</pre></td></tr><tr><td data-num=\"255\"></td><td><pre>805427d8 3b3534315680    cmp     esi,dword ptr [nt!MmUserProbeAddress (80563134)]</pre></td></tr><tr><td data-num=\"256\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"257\"></td><td><pre>nt!KiSystemServiceAccessTeb+0x41:</pre></td></tr><tr><td data-num=\"258\"></td><td><pre>805427de 0f83a8010000    jae     nt!KiSystemCallExit2+0x9f (8054298c)</pre></td></tr><tr><td data-num=\"259\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"260\"></td><td><pre>nt!KiSystemServiceCopyArguments:</pre></td></tr><tr><td data-num=\"261\"></td><td><pre>805427e4 f3a5            rep movs dword ptr es:[edi],dword ptr [esi]</pre></td></tr><tr><td data-num=\"262\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"263\"></td><td><pre>nt!KiSystemServiceCopyArguments+0x2:</pre></td></tr><tr><td data-num=\"264\"></td><td><pre>805427e6 ffd3            call    ebx</pre></td></tr><tr><td data-num=\"265\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"266\"></td><td><pre>nt!KiSystemServicePostCall:</pre></td></tr><tr><td data-num=\"267\"></td><td><pre>805427e8 8be5            mov     esp,ebp</pre></td></tr><tr><td data-num=\"268\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"269\"></td><td><pre>nt!KiSystemServicePostCall+0x2:</pre></td></tr><tr><td data-num=\"270\"></td><td><pre>805427ea 648b0d24010000  mov     ecx,dword ptr fs:[124h]</pre></td></tr><tr><td data-num=\"271\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"272\"></td><td><pre>nt!KiSystemServicePostCall+0x9:</pre></td></tr><tr><td data-num=\"273\"></td><td><pre>805427f1 8b553c          mov     edx,dword ptr [ebp+3Ch]</pre></td></tr><tr><td data-num=\"274\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"275\"></td><td><pre>nt!KiSystemServicePostCall+0xc:</pre></td></tr><tr><td data-num=\"276\"></td><td><pre>805427f4 899134010000    mov     dword ptr [ecx+134h],edx</pre></td></tr><tr><td data-num=\"277\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"278\"></td><td><pre>nt!KiServiceExit:</pre></td></tr><tr><td data-num=\"279\"></td><td><pre>805427fa fa              cli</pre></td></tr><tr><td data-num=\"280\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"281\"></td><td><pre>nt!KiServiceExit+0x1:</pre></td></tr><tr><td data-num=\"282\"></td><td><pre>805427fb f7457000000200  test    dword ptr [ebp+70h],20000h</pre></td></tr><tr><td data-num=\"283\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"284\"></td><td><pre>nt!KiServiceExit+0x8:</pre></td></tr><tr><td data-num=\"285\"></td><td><pre>80542802 7506            jne     nt!KiServiceExit+0x10 (8054280a)</pre></td></tr><tr><td data-num=\"286\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"287\"></td><td><pre>nt!KiServiceExit+0xa:</pre></td></tr><tr><td data-num=\"288\"></td><td><pre>80542804 f6456c01        test    byte ptr [ebp+6Ch],1</pre></td></tr><tr><td data-num=\"289\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"290\"></td><td><pre>nt!KiServiceExit+0xe:</pre></td></tr><tr><td data-num=\"291\"></td><td><pre>80542808 7456            je      nt!KiServiceExit+0x66 (80542860)</pre></td></tr><tr><td data-num=\"292\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"293\"></td><td><pre>nt!KiServiceExit+0x66:</pre></td></tr><tr><td data-num=\"294\"></td><td><pre>80542860 8b54244c        mov     edx,dword ptr [esp+4Ch]</pre></td></tr><tr><td data-num=\"295\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"296\"></td><td><pre>nt!KiServiceExit+0x6a:</pre></td></tr><tr><td data-num=\"297\"></td><td><pre>80542864 648b1d50000000  mov     ebx,dword ptr fs:[50h]</pre></td></tr><tr><td data-num=\"298\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"299\"></td><td><pre>nt!KiServiceExit+0x71:</pre></td></tr><tr><td data-num=\"300\"></td><td><pre>8054286b 64891500000000  mov     dword ptr fs:[0],edx</pre></td></tr><tr><td data-num=\"301\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"302\"></td><td><pre>nt!KiServiceExit+0x78:</pre></td></tr><tr><td data-num=\"303\"></td><td><pre>80542872 8b4c2448        mov     ecx,dword ptr [esp+48h]</pre></td></tr><tr><td data-num=\"304\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"305\"></td><td><pre>nt!KiServiceExit+0x7c:</pre></td></tr><tr><td data-num=\"306\"></td><td><pre>80542876 648b3524010000  mov     esi,dword ptr fs:[124h]</pre></td></tr><tr><td data-num=\"307\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"308\"></td><td><pre>nt!KiServiceExit+0x83:</pre></td></tr><tr><td data-num=\"309\"></td><td><pre>8054287d 888e40010000    mov     byte ptr [esi+140h],cl</pre></td></tr><tr><td data-num=\"310\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"311\"></td><td><pre>nt!KiServiceExit+0x89:</pre></td></tr><tr><td data-num=\"312\"></td><td><pre>80542883 f7c3ff000000    test    ebx,0FFh</pre></td></tr><tr><td data-num=\"313\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"314\"></td><td><pre>nt!KiServiceExit+0x8f:</pre></td></tr><tr><td data-num=\"315\"></td><td><pre>80542889 7579            jne     nt!KiSystemCallExit2+0x17 (80542904)</pre></td></tr><tr><td data-num=\"316\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"317\"></td><td><pre>nt!KiServiceExit+0x91:</pre></td></tr><tr><td data-num=\"318\"></td><td><pre>8054288b f744247000000200 test    dword ptr [esp+70h],20000h</pre></td></tr><tr><td data-num=\"319\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"320\"></td><td><pre>nt!KiServiceExit+0x99:</pre></td></tr><tr><td data-num=\"321\"></td><td><pre>80542893 0f85ff080000    jne     nt!KiExceptionExit+0x12c (80543198)</pre></td></tr><tr><td data-num=\"322\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"323\"></td><td><pre>nt!KiServiceExit+0x9f:</pre></td></tr><tr><td data-num=\"324\"></td><td><pre>80542899 66f744246cf9ff  test    word ptr [esp+6Ch],0FFF9h</pre></td></tr><tr><td data-num=\"325\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"326\"></td><td><pre>nt!KiServiceExit+0xa6:</pre></td></tr><tr><td data-num=\"327\"></td><td><pre>805428a0 0f84b4000000    je      nt!KiSystemCallExit2+0x6d (8054295a)</pre></td></tr><tr><td data-num=\"328\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"329\"></td><td><pre>nt!KiServiceExit+0xac:</pre></td></tr><tr><td data-num=\"330\"></td><td><pre>805428a6 66837c246c1b    cmp     word ptr [esp+6Ch],1Bh</pre></td></tr><tr><td data-num=\"331\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"332\"></td><td><pre>nt!KiServiceExit+0xb2:</pre></td></tr><tr><td data-num=\"333\"></td><td><pre>805428ac 660fba64246c00  bt      word ptr [esp+6Ch],0</pre></td></tr><tr><td data-num=\"334\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"335\"></td><td><pre>nt!KiServiceExit+0xb9:</pre></td></tr><tr><td data-num=\"336\"></td><td><pre>805428b3 f5              cmc</pre></td></tr><tr><td data-num=\"337\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"338\"></td><td><pre>nt!KiServiceExit+0xba:</pre></td></tr><tr><td data-num=\"339\"></td><td><pre>805428b4 0f878e000000    ja      nt!KiSystemCallExit2+0x5b (80542948)</pre></td></tr><tr><td data-num=\"340\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"341\"></td><td><pre>nt!KiServiceExit+0xc0:</pre></td></tr><tr><td data-num=\"342\"></td><td><pre>805428ba 66837d6c08      cmp     word ptr [ebp+6Ch],8</pre></td></tr><tr><td data-num=\"343\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"344\"></td><td><pre>nt!KiServiceExit+0xc5:</pre></td></tr><tr><td data-num=\"345\"></td><td><pre>805428bf 7405            je      nt!KiServiceExit+0xcc (805428c6)</pre></td></tr><tr><td data-num=\"346\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"347\"></td><td><pre>nt!KiServiceExit+0xcc:</pre></td></tr><tr><td data-num=\"348\"></td><td><pre>805428c6 8d6554          lea     esp,[ebp+54h]</pre></td></tr><tr><td data-num=\"349\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"350\"></td><td><pre>nt!KiServiceExit+0xcf:</pre></td></tr><tr><td data-num=\"351\"></td><td><pre>805428c9 5f              pop     edi</pre></td></tr><tr><td data-num=\"352\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"353\"></td><td><pre>nt!KiServiceExit+0xd0:</pre></td></tr><tr><td data-num=\"354\"></td><td><pre>805428ca 5e              pop     esi</pre></td></tr><tr><td data-num=\"355\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"356\"></td><td><pre>nt!KiServiceExit+0xd1:</pre></td></tr><tr><td data-num=\"357\"></td><td><pre>805428cb 5b              pop     ebx</pre></td></tr><tr><td data-num=\"358\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"359\"></td><td><pre>nt!KiServiceExit+0xd2:</pre></td></tr><tr><td data-num=\"360\"></td><td><pre>805428cc 5d              pop     ebp</pre></td></tr><tr><td data-num=\"361\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"362\"></td><td><pre>nt!KiServiceExit+0xd3:</pre></td></tr><tr><td data-num=\"363\"></td><td><pre>805428cd 66817c24088000  cmp     word ptr [esp+8],80h</pre></td></tr><tr><td data-num=\"364\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"365\"></td><td><pre>nt!KiServiceExit+0xda:</pre></td></tr><tr><td data-num=\"366\"></td><td><pre>805428d4 0f87da080000    ja      nt!KiExceptionExit+0x148 (805431b4)</pre></td></tr><tr><td data-num=\"367\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"368\"></td><td><pre>nt!KiServiceExit+0xe0:</pre></td></tr><tr><td data-num=\"369\"></td><td><pre>805428da 83c404          add     esp,4</pre></td></tr><tr><td data-num=\"370\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"371\"></td><td><pre>nt!KiServiceExit+0xe3:</pre></td></tr><tr><td data-num=\"372\"></td><td><pre>805428dd f744240401000000 test    dword ptr [esp+4],1</pre></td></tr><tr><td data-num=\"373\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"374\"></td><td><pre>nt!KiSystemCallExitBranch:</pre></td></tr><tr><td data-num=\"375\"></td><td><pre>805428e5 7506            jne     nt!KiSystemCallExit2 (805428ed)</pre></td></tr><tr><td data-num=\"376\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"377\"></td><td><pre>nt!KiSystemCallExitBranch+0x2:</pre></td></tr><tr><td data-num=\"378\"></td><td><pre>805428e7 5a              pop     edx</pre></td></tr><tr><td data-num=\"379\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"380\"></td><td><pre>nt!KiSystemCallExitBranch+0x3:</pre></td></tr><tr><td data-num=\"381\"></td><td><pre>805428e8 59              pop     ecx</pre></td></tr><tr><td data-num=\"382\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"383\"></td><td><pre>nt!KiSystemCallExitBranch+0x4:</pre></td></tr><tr><td data-num=\"384\"></td><td><pre>805428e9 9d              popfd</pre></td></tr><tr><td data-num=\"385\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"386\"></td><td><pre>nt!KiSystemCallExitBranch+0x5:</pre></td></tr><tr><td data-num=\"387\"></td><td><pre>805428ea ffe2            jmp     edx</pre></td></tr><tr><td data-num=\"388\"></td><td><pre>kd&gt; r</pre></td></tr><tr><td data-num=\"389\"></td><td><pre>eax&#x3D;c0000034 ebx&#x3D;00000000 ecx&#x3D;00000008 edx&#x3D;80501681 esi&#x3D;000003e8 edi&#x3D;00000001</pre></td></tr><tr><td data-num=\"390\"></td><td><pre>eip&#x3D;805428ea esp&#x3D;ba4ffd10 ebp&#x3D;ba4ffd68 iopl&#x3D;0         nv up ei pl zr na pe nc</pre></td></tr><tr><td data-num=\"391\"></td><td><pre>cs&#x3D;0008  ss&#x3D;0010  ds&#x3D;0023  es&#x3D;0023  fs&#x3D;0030  gs&#x3D;0000             efl&#x3D;00000246</pre></td></tr><tr><td data-num=\"392\"></td><td><pre>nt!KiSystemCallExitBranch+0x5:</pre></td></tr><tr><td data-num=\"393\"></td><td><pre>805428ea ffe2            jmp     edx &#123;nt!ZwOpenEvent+0x11 (80501681)&#125;</pre></td></tr><tr><td data-num=\"394\"></td><td><pre>kd&gt; t</pre></td></tr><tr><td data-num=\"395\"></td><td><pre>nt!ZwOpenEvent+0x11:</pre></td></tr><tr><td data-num=\"396\"></td><td><pre>80501681 c20c00          ret     0Ch</pre></td></tr><tr><td data-num=\"397\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"398\"></td><td><pre>MountMgr!WorkerThread+0x79:</pre></td></tr><tr><td data-num=\"399\"></td><td><pre>ba0b83c3 85c0            test    eax,eax</pre></td></tr><tr><td data-num=\"400\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"401\"></td><td><pre>MountMgr!WorkerThread+0x7b:</pre></td></tr><tr><td data-num=\"402\"></td><td><pre>ba0b83c5 7d16            jge     MountMgr!WorkerThread+0x93 (ba0b83dd)</pre></td></tr><tr><td data-num=\"403\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"404\"></td><td><pre>MountMgr!WorkerThread+0x7d:</pre></td></tr><tr><td data-num=\"405\"></td><td><pre>ba0b83c7 8d45f4          lea     eax,[ebp-0Ch]</pre></td></tr><tr><td data-num=\"406\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"407\"></td><td><pre>MountMgr!WorkerThread+0x80:</pre></td></tr><tr><td data-num=\"408\"></td><td><pre>ba0b83ca 50              push    eax</pre></td></tr><tr><td data-num=\"409\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"410\"></td><td><pre>MountMgr!WorkerThread+0x81:</pre></td></tr><tr><td data-num=\"411\"></td><td><pre>ba0b83cb 53              push    ebx</pre></td></tr><tr><td data-num=\"412\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"413\"></td><td><pre>MountMgr!WorkerThread+0x82:</pre></td></tr><tr><td data-num=\"414\"></td><td><pre>ba0b83cc 53              push    ebx</pre></td></tr><tr><td data-num=\"415\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"416\"></td><td><pre>MountMgr!WorkerThread+0x83:</pre></td></tr><tr><td data-num=\"417\"></td><td><pre>ba0b83cd 53              push    ebx</pre></td></tr><tr><td data-num=\"418\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"419\"></td><td><pre>MountMgr!WorkerThread+0x84:</pre></td></tr><tr><td data-num=\"420\"></td><td><pre>ba0b83ce 8d45dc          lea     eax,[ebp-24h]</pre></td></tr><tr><td data-num=\"421\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"422\"></td><td><pre>MountMgr!WorkerThread+0x87:</pre></td></tr><tr><td data-num=\"423\"></td><td><pre>ba0b83d1 50              push    eax</pre></td></tr><tr><td data-num=\"424\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"425\"></td><td><pre>MountMgr!WorkerThread+0x88:</pre></td></tr><tr><td data-num=\"426\"></td><td><pre>ba0b83d2 ff15a0880bba    call    dword ptr [MountMgr!_imp__KeWaitForSingleObject (ba0b88a0)]</pre></td></tr><tr><td data-num=\"427\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"428\"></td><td><pre>Breakpoint 0 hit</pre></td></tr><tr><td data-num=\"429\"></td><td><pre>nt!KiFastCallEntry:</pre></td></tr><tr><td data-num=\"430\"></td><td><pre>805426e0 b923000000      mov     ecx,23h</pre></td></tr><tr><td data-num=\"431\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"432\"></td><td><pre>nt!KiFastCallEntry+0x5:</pre></td></tr><tr><td data-num=\"433\"></td><td><pre>805426e5 6a30            push    30h</pre></td></tr></table></figure><p>想知道它是怎么返回三环的，海哥说需要学习 APC 之后的内容了。jmp edx 后面的就不懂了。</p>\n<h2 id=\"分析-kisystemservice\"><a class=\"anchor\" href=\"#分析-kisystemservice\">#</a> 分析 KiSystemService</h2>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>.text:0046A611 _KiSystemService proc near              ; CODE XREF: ZwAcceptConnectPort (x,x,x,x,x,x)+C↑p</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>.text:0046A611                                         ; ZwAccessCheck (x,x,x,x,x,x,x,x)+C↑p ...</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>.text:0046A611</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>.text:0046A611 arg_0           &#x3D; dword ptr  4</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>.text:0046A611</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>.text:0046A611                 push    0               ; 保存系统空间的寄存器到_KTRAP_FRAME +0x064 ErrorCode</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>.text:0046A613                 push    ebp             ; 保存系统空间的寄存器到 +0x060 Ebp</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>.text:0046A614                 push    ebx             ; 保存系统空间的寄存器到 +0x05c Ebx</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>.text:0046A615                 push    esi             ; 保存系统空间的寄存器到 +0x058 Esi</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>.text:0046A616                 push    edi             ; 保存系统空间的寄存器到 +0x054 Edi</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>.text:0046A617                 push    fs              ; 保存系统空间的寄存器到 +0x050 SegFs</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>.text:0046A619                 mov     ebx, 30h ; &#39;0&#39;  ; 永远都用这个值吗？如果是多核也不变吗？</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>.text:0046A61E                 mov     fs, bx          ; Windows 内核有个特殊的基本要求，就是只要 CPU 在内核中运行，就得使</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>.text:0046A61E                                         ; mov ebx,30 &#x2F;&#x2F;0011 0000  所以就是 0 环 GDT 索引 6</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>.text:0046A61E                                         ;</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>.text:0046A61E                                         ; 0 环的 FS.Base 指向 CPU 自己的 KPCR，不是指向当前线程</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>.text:0046A61E                                         ; 选择码，0x30 的结构分析如下：</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>.text:0046A61E                                         ; 1.bit0~bit1:RPL, 要求运行的级别，这里是 0</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>.text:0046A61E                                         ; 2.bit2：找 GDT 还是 IDT，这里是 0，GDT</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>.text:0046A61E                                         ; 3.bit3！bit15，是在 GDT 或者 IDT 的下标</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>.text:0046A61E                                         ; windbg 查看段描述符：834093f2 dc003748</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>.text:0046A61E                                         ; Base:83f2dc00 指向当前的_KPCR</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>.text:0046A621                 assume fs:nothing</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>.text:0046A621                 push    large dword ptr fs:_KPCR ; 保存老的 ExceptionList</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>.text:0046A621                                         ; _KPCR 偏移 + 0x00-&gt;NT_TIB-&gt;ExceptionList</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>.text:0046A628                 mov     large dword ptr fs:0, 0FFFFFFFFh ; 设置新的 ExceptonList 为 - 1，因为 3 环的异常链表，不能用，要进 0 环了</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>.text:0046A633                 mov     esi, large fs:_KPCR.PrcbData.CurrentThread ; esi &#x3D;  当前 CPU 所执行线程的_ETHREAD</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>.text:0046A63A                 push    dword ptr [esi+_ETHREAD.Tcb.PreviousMode] ; 因为 Esi 存的_KTHREAD, 偏移 0x140 存的 PreviousMode,</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>.text:0046A63A                                         ; 就是保存老的先前模式到堆栈</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>.text:0046A63A                                         ; 先前模式就是当调用这些代码时候，原来是几环的数就是几，比如原来 0 环，先前模式就是 0，原来 3 环就是 1</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>.text:0046A63A                                         ; 因为有些内核代码可以从 0 和 3 调用，但是执行内容不一样，通过这个知道执行什么。</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>.text:0046A640                 sub     esp, 48h        ; ESP 提升到_KTRAP_FRAME 结构体第一个成员，也就是这个结构体指针</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>.text:0046A643                 mov     ebx, [esp+_KTRAP_FRAME.SegCs] ; 取出 3 环压入的参数 CS _KTRAP_FRAME + 0x6C</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>.text:0046A647                 and     ebx, 1          ; 0 环的最低位为 0,3 环的最低位为 1</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>.text:0046A64A                 mov     [esi+_ETHREAD.Tcb.PreviousMode], bl ; 保存老的 “先前模式” 到堆栈</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>.text:0046A650                 mov     ebp, esp        ; ESP &#x3D; EBP _KTRAP_FRAME 结构指针</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>.text:0046A652                 mov     ebx, [esi+_ETHREAD.Tcb.TrapFrame] ; _KTHTEAD 中的 TrapFrame 给 ebx</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>.text:0046A658                 mov     [ebp+_KTRAP_FRAME._Edx], ebx ; 将_KTHREAD 中的 Trap_Frame 暂时存在这个位置后面会将这个值取出来，</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>.text:0046A658                                         ; 重新恢复给_KTHREAD 的 Trap_Frame</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>.text:0046A65B                 mov     [esi+_ETHREAD.Tcb.TrapFrame], ebp ; 将堆栈中形成的_KTRAP_FRAME 结构指针复制给_KTHREAD 中的 TRAPFRAME</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>.text:0046A661                 cld</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>.text:0046A662                 mov     ebx, [ebp+_KTRAP_FRAME._Ebp] ; 3 环的 EBP</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>.text:0046A665                 mov     edi, [ebp+_KTRAP_FRAME._Eip] ; 3 环的 EIP</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>.text:0046A668                 mov     [ebp+_KTRAP_FRAME.DbgArgPointer], edx ; edx 存储的是 3 环函数的参数的指针:</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>.text:0046A668                                         ;</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>.text:0046A668                                         ; _KiIntSystemCall：</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>.text:0046A668                                         ;</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>.text:0046A668                                         ; lea     edx, [esp+8] ; 参数指针</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>.text:0046A668                                         ; int     2Eh</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>.text:0046A668                                         ; retn</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>.text:0046A66B                 mov     [ebp+_KTRAP_FRAME.DbgArgMark], 0BADB0D00h ; 这个是操作系统的标志</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>.text:0046A672                 mov     [ebp+_KTRAP_FRAME.DbgEbp], ebx ; 3 环的 ebp 存储到 KTRAP_FRAME+0x000 DbgEbp 的位置</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>.text:0046A675                 mov     [ebp+_KTRAP_FRAME.DbgEip], edi ; 3 环的 eip 存储到 KTRAP_FRAME+0x004 DbgEip 的位置</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>.text:0046A678                 test    [esi+_KTHREAD.DebugActive], 0FFh ; 判断_KTHREAD 的 +0x02c DebugActive 是否为 - 1</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>.text:0046A67C                 jnz     Dr_kss_a        ; 如果处于调试状态，跳转</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>.text:0046A682</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>.text:0046A682 loc_46A682:                             ; CODE XREF: Dr_kss_a+10↑j</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>.text:0046A682                                         ; Dr_kss_a+7C↑j</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>.text:0046A682                 sti                     ; 关闭中断</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>.text:0046A683                 jmp     loc_46A76F      ; 取 3 环传来的服务号</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>.text:0046A683 _KiSystemService endp</pre></td></tr></table></figure><p>Dr_kss_a:</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>.text:0046A50C Dr_kss_a        proc near               ; CODE XREF: _KiSystemService+6B↓j</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>.text:0046A50C                 test    [ebp+_KTRAP_FRAME.EFlags], 20000h ; 判断 VM 位是否为 1</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>.text:0046A513                 jnz     short loc_46A522</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>.text:0046A515                 test    [ebp+_KTRAP_FRAME.SegCs], 1</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>.text:0046A51C                 jz      loc_46A682      ; 关闭中断</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>.text:0046A522</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>.text:0046A522 loc_46A522:                             ; CODE XREF: Dr_kss_a+7↑j</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>.text:0046A522                 mov     ebx, dr0</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>.text:0046A525                 mov     ecx, dr1</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>.text:0046A528                 mov     edi, dr2</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>.text:0046A52B                 mov     [ebp+_KTRAP_FRAME.Dr0], ebx ; 存储 Dr0 寄存器到 _KTRAP_FRAME +0x18</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>.text:0046A52E                 mov     [ebp+1Ch], ecx  ; 存储 Dr1 寄存器到 _KTRAP_FRAME +0x1C</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>.text:0046A531                 mov     [ebp+20h], edi  ; 存储 Dr2 寄存器到 _KTRAP_FRAME</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>.text:0046A534                 mov     ebx, dr3</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>.text:0046A537                 mov     ecx, dr6</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>.text:0046A53A                 mov     edi, dr7</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>.text:0046A53D                 mov     [ebp+24h], ebx  ; 存储 Dr3 寄存器到 _KTRAP_FRAME</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>.text:0046A540                 mov     [ebp+28h], ecx  ; 存储 Dr6 寄存器到 _KTRAP_FRAME</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>.text:0046A543                 xor     ebx, ebx        ; ebx &#x3D; 0</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>.text:0046A545                 mov     [ebp+2Ch], edi  ; 存储 Dr7 寄存器到 _KTRAP_FRAME</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>.text:0046A548                 mov     dr7, ebx        ; 将 Dr7 清零</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>.text:0046A54B                 mov     edi, large fs:_KPCR.Prcb ; edi &#x3D; _KPRCB 的指针</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>.text:0046A552                 mov     ebx, [edi+_KPRCB.ProcessorState.SpecialRegisters.KernelDr0]</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>.text:0046A558                 mov     ecx, [edi+_KPRCB.ProcessorState.SpecialRegisters.KernelDr1]</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>.text:0046A55E                 mov     dr0, ebx</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>.text:0046A561                 mov     dr1, ecx</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>.text:0046A564                 mov     ebx, [edi+_KPRCB.ProcessorState.SpecialRegisters.KernelDr2]</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>.text:0046A56A                 mov     ecx, [edi+_KPRCB.ProcessorState.SpecialRegisters.KernelDr3]</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>.text:0046A570                 mov     dr2, ebx</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>.text:0046A573                 mov     dr3, ecx</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>.text:0046A576                 mov     ebx, [edi+_KPRCB.ProcessorState.SpecialRegisters.KernelDr6]</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>.text:0046A57C                 mov     ecx, [edi+_KPRCB.ProcessorState.SpecialRegisters.KernelDr7]</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>.text:0046A582                 mov     dr6, ebx</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>.text:0046A585                 mov     dr7, ecx</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>.text:0046A588                 jmp     loc_46A682      ; 关闭中断</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>.text:0046A588 Dr_kss_a        endp</pre></td></tr></table></figure><p>loc_46A76F: 既又跳转到 KiFastCallEntry 里了。</p>\n<h2 id=\"总结-2\"><a class=\"anchor\" href=\"#总结-2\">#</a> 总结</h2>\n<p>逆内核的时候要有一个主线，因为操作系统要考虑的事情太多了。<br />\n我们要带着目的去逆向，不然很容易迷失的。</p>\n<ol>\n<li>\n<p>进 0 环后，原来的寄存器存在哪里？</p>\n</li>\n<li>\n<p>如何根据系统服务号 (eax 中存储) 找到要执行的内核函数？</p>\n</li>\n<li>\n<p>调用时参数是存储到 3 环的堆栈，如何传递给内核函数？</p>\n</li>\n<li>\n<p>2 种调用方式是如何返回到 3 环的？</p>\n</li>\n</ol>\n<p>逆完我们可以知道：<br />\n快速调用与中断门填充完_KTRAP_FRAME 结构后，走的还是同样的代码去调用函数，最后出来的时候也是分开的。<br />\n既两个入口两个出口。</p>\n<p>这里面也涉及反硬件断点调试的操作，修改判断是否处于调试状态的_KTHREAD.DebugActive 的值，就可以让人获取不了 Dr0~Dr7 寄存器的值。</p>\n<p>海哥的视频里说了，如今这个阶段只需要知道如何进的 0 环就行了，至于如何返回的要等学过 APC 后了。</p>\n<h1 id=\"额外的小知识\"><a class=\"anchor\" href=\"#额外的小知识\">#</a> 额外的小知识</h1>\n<p>查看 CPU 数量</p>\n<p><code>kd&gt; dd KeNumberProcessors</code></p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kd&gt; dd KeNumberProcessors</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>80556a60  00000001</pre></td></tr></table></figure><p>查看 KPCR</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kd&gt; dd KiProcessorBlock  L2</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>80554040  ffdff120 00000000\t\t\t\t&#x2F;&#x2F; 如果有 2 个核，那么就会出现 2 个地址</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>kd&gt; dt _kpcr ffdff120-120\t\t\t\t&#x2F;&#x2F; 减去 120 (kpcr 的大小)\t就是 kpcr 的地址\t\t</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>nt!_KPCR</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  +0x000 NtTib            : _NT_TIB\t\t\t\t\t\t\t</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  +0x01c SelfPcr          : 0xffdff000 _KPCR\t\t\t\t\t\t\t</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  +0x020 Prcb             : 0xffdff120 _KPRCB\t\t\t\t\t\t\t</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  +0x024 Irql             : 0 &#39;&#39;\t\t\t\t\t\t\t</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  +0x028 IRR              : 0\t\t\t\t\t\t\t</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  +0x02c IrrActive        : 0\t\t\t\t\t\t\t</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  +0x030 IDR              : 0xffffffff\t\t\t\t\t\t\t</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  +0x034 KdVersionBlock   : 0x80546cb8 Void\t\t\t\t\t\t\t</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  +0x038 IDT              : 0x8003f400 _KIDTENTRY\t\t\t\t\t\t\t</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  +0x03c GDT              : 0x8003f000 _KGDTENTRY\t\t\t\t\t\t\t</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  +0x040 TSS              : 0x80042000 _KTSS\t\t\t\t\t\t\t</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  +0x044 MajorVersion     : 1\t\t\t\t\t\t\t</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  +0x046 MinorVersion     : 1\t\t\t\t\t\t\t</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  +0x048 SetMember        : 1\t\t\t\t\t\t\t</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  +0x04c StallScaleFactor : 0x13b5\t\t\t\t\t\t\t</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  +0x050 DebugActive      : 0 &#39;&#39;\t\t\t\t\t\t\t</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  +0x051 Number           : 0 &#39;&#39;\t\t\t\t\t\t\t</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  +0x052 Spare0           : 0 &#39;&#39;\t\t\t\t\t\t\t</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  +0x053 SecondLevelCacheAssociativity : 0 &#39;&#39;\t\t\t\t\t\t\t</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  +0x054 VdmAlert         : 0\t\t\t\t\t\t\t</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  +0x058 KernelReserved   : [14] 0\t\t\t\t\t\t\t</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  +0x090 SecondLevelCacheSize : 0\t\t\t\t\t\t\t</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  +0x094 HalReserved      : [16] 0\t\t\t\t\t\t\t</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  +0x0d4 InterruptMode    : 0\t\t\t\t\t\t\t</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  +0x0d8 Spare1           : 0 &#39;&#39;\t\t\t\t\t\t\t</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  +0x0dc KernelReserved2  : [17] 0\t\t\t\t\t\t\t</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  +0x120 PrcbData         : _KPRCB</pre></td></tr></table></figure><h1 id=\"reference\"><a class=\"anchor\" href=\"#reference\">#</a> Reference</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0t3YW5zeS9hcnRpY2xlL2RldGFpbHMvMTA5NDI2Njg4\">https://blog.csdn.net/Kwansy/article/details/109426688</span></p>\n",
            "tags": [
                "sysenter指令",
                "KiFastCallEntry函数",
                "KiSystemService函数",
                "Trap_Frame"
            ]
        },
        {
            "id": "https://or0kit.github.io/Bin/Core/WindowsXp/SystemCall/%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8-3%E7%8E%AF%E8%B0%83%E7%94%A8%E5%88%86%E6%9E%90/",
            "url": "https://or0kit.github.io/Bin/Core/WindowsXp/SystemCall/%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8-3%E7%8E%AF%E8%B0%83%E7%94%A8%E5%88%86%E6%9E%90/",
            "title": "系统调用-3环调用分析",
            "date_published": "2021-12-07T00:20:27.000Z",
            "content_html": "<h1 id=\"分析3环api-readprocessmemory\"><a class=\"anchor\" href=\"#分析3环api-readprocessmemory\">#</a> 分析 3 环 API ReadProcessMemory</h1>\n<p>用 IDA 分析 kernel32.dll, 找到  <code>ReadProcessMemory</code>  函数，因为这个函数会进入 R0，所以我们对其分析 API 的调用过程。</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>.text:7C8021D0 ; BOOL __stdcall ReadProcessMemory(HANDLE hProcess, LPCVOID lpBaseAddress, LPVOID lpBuffer, SIZE_T nSize, SIZE_T *lpNumberOfBytesRead)</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>.text:7C8021D0                 public _ReadProcessMemory@20</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>.text:7C8021D0 _ReadProcessMemory@20 proc near         ; CODE XREF: GetProcessVersion(x)+2F18B↓p</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>.text:7C8021D0                                         ; GetProcessVersion(x)+2F1AA↓p ...</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>.text:7C8021D0</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>.text:7C8021D0 hProcess        &#x3D; dword ptr  8</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>.text:7C8021D0 lpBaseAddress   &#x3D; dword ptr  0Ch</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>.text:7C8021D0 lpBuffer        &#x3D; dword ptr  10h</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>.text:7C8021D0 nSize           &#x3D; dword ptr  14h</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>.text:7C8021D0 lpNumberOfBytesRead&#x3D; dword ptr  18h</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>.text:7C8021D0</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>.text:7C8021D0                 mov     edi, edi</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>.text:7C8021D2                 push    ebp</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>.text:7C8021D3                 mov     ebp, esp</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>.text:7C8021D5                 lea     eax, [ebp+nSize]</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>.text:7C8021D8                 push    eax             ; NumberOfBytesRead</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>.text:7C8021D9                 push    [ebp+nSize]     ; NumberOfBytesToRead</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>.text:7C8021DC                 push    [ebp+lpBuffer]  ; Buffer</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>.text:7C8021DF                 push    [ebp+lpBaseAddress] ; BaseAddress</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>.text:7C8021E2                 push    [ebp+hProcess]  ; ProcessHandle</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>.text:7C8021E5                 call    ds:__imp__NtReadVirtualMemory@20 ; NtReadVirtualMemory(x,x,x,x,x)</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>.text:7C8021EB                 mov     ecx, [ebp+lpNumberOfBytesRead]</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>.text:7C8021EE                 test    ecx, ecx</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>.text:7C8021F0                 jnz     short loc_7C8021FD</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>.text:7C8021F2</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>.text:7C8021F2 loc_7C8021F2:                           ; CODE XREF: ReadProcessMemory(x,x,x,x,x)+32↓j</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>.text:7C8021F2                 test    eax, eax</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>.text:7C8021F4                 jl      short loc_7C802204</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>.text:7C8021F6                 xor     eax, eax</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>.text:7C8021F8                 inc     eax</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>.text:7C8021F9</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>.text:7C8021F9 loc_7C8021F9:                           ; CODE XREF: ReadProcessMemory(x,x,x,x,x)+3C↓j</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>.text:7C8021F9                 pop     ebp</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>.text:7C8021FA                 retn    14h</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>.text:7C8021FD ; ---------------------------------------------------------------------------</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>.text:7C8021FD</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>.text:7C8021FD loc_7C8021FD:                           ; CODE XREF: ReadProcessMemory(x,x,x,x,x)+20↑j</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>.text:7C8021FD                 mov     edx, [ebp+nSize]</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>.text:7C802200                 mov     [ecx], edx</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>.text:7C802202                 jmp     short loc_7C8021F2</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>.text:7C802204 ; ---------------------------------------------------------------------------</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>.text:7C802204</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>.text:7C802204 loc_7C802204:                           ; CODE XREF: ReadProcessMemory(x,x,x,x,x)+24↑j</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>.text:7C802204                 push    eax             ; Status</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>.text:7C802205                 call    _BaseSetLastNTError@4 ; BaseSetLastNTError(x)</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>.text:7C80220A                 xor     eax, eax</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>.text:7C80220C                 jmp     short loc_7C8021F9</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>.text:7C80220C _ReadProcessMemory@20 endp</pre></td></tr></table></figure><p>由  <code>.text:7C8021E5                 call    ds:__imp__NtReadVirtualMemory@20 ; NtReadVirtualMemory(x,x,x,x,x)</code>  可知函数  <code>ReadProcessMemory</code>  调用了导入函数  <code>NtReadVirtualMemory</code></p>\n<p>查看导入表： <code>7C80141C\tNtReadVirtualMemory\tntdll</code> <br />\n 得知这个函数在 ntdll.dll 中</p>\n<p>用 IDA 打开 ntdll.dll, 查找 NtReadVirtualMemory 函数</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">.</span>text<span class=\"token operator\">:</span><span class=\"token number\">7</span>C92D9E0 <span class=\"token punctuation\">;</span> __stdcall <span class=\"token function\">NtReadVirtualMemory</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">.</span>text<span class=\"token operator\">:</span><span class=\"token number\">7</span>C92D9E0                 public _NtReadVirtualMemory@<span class=\"token number\">20</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">.</span>text<span class=\"token operator\">:</span><span class=\"token number\">7</span>C92D9E0 _NtReadVirtualMemory@<span class=\"token number\">20</span> proc near       <span class=\"token punctuation\">;</span> CODE XREF<span class=\"token operator\">:</span> <span class=\"token function\">LdrFindCreateProcessManifest</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span>CC↓p</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">.</span>text<span class=\"token operator\">:</span><span class=\"token number\">7</span>C92D9E0                                         <span class=\"token punctuation\">;</span> <span class=\"token function\">LdrCreateOutOfProcessImage</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">7</span>C↓p <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">.</span>text<span class=\"token operator\">:</span><span class=\"token number\">7</span>C92D9E0                 mov     eax<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span>BAh       <span class=\"token punctuation\">;</span> NtReadVirtualMemory</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">.</span>text<span class=\"token operator\">:</span><span class=\"token number\">7</span>C92D9E5                 mov     edx<span class=\"token punctuation\">,</span> <span class=\"token number\">7FF</span>E0300h</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">.</span>text<span class=\"token operator\">:</span><span class=\"token number\">7</span>C92D9EA                 call    dword ptr <span class=\"token punctuation\">[</span>edx<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">.</span>text<span class=\"token operator\">:</span><span class=\"token number\">7</span>C92D9EC                 retn    <span class=\"token number\">14</span>h</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">.</span>text<span class=\"token operator\">:</span><span class=\"token number\">7</span>C92D9EC _NtReadVirtualMemory@<span class=\"token number\">20</span> endp</pre></td></tr></table></figure><p>可以看到这个函数只有短短几行汇编代码：给 eax 赋个值，然后给 edx 个地址，然后 call 一下 edx 指向的地址，然后就平栈（由于 STDCALL 调用约定）返回了。<br />\n但要看懂这几行代码，必须要了解一些知识。</p>\n<h1 id=\"_kuser_shared_data-结构体\"><a class=\"anchor\" href=\"#_kuser_shared_data-结构体\">#</a> _KUSER_SHARED_DATA 结构体</h1>\n<p>在 R3 和 R0 分别定义了一个_KUSER_SHARED_DATA 结构区域，用于 R3 和 R0 共享某些数据。<br />\n它们在同一个物理页上被映射到不同的虚拟地址，_KUSER_SHARED_DATA 结构在 R3 地址为 0x7ffe0000，在 R0 地址为 0xffdf0000。</p>\n<p>其结构如下所示：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kd<span class=\"token operator\">></span> dt _KUSER_SHARED_DATA</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>nt<span class=\"token operator\">!</span>_KUSER_SHARED_DATA</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x000</span> TickCountLow     <span class=\"token operator\">:</span> Uint4B</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x004</span> TickCountMultiplier <span class=\"token operator\">:</span> Uint4B</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x008</span> InterruptTime    <span class=\"token operator\">:</span> _KSYSTEM_TIME</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x014</span> SystemTime       <span class=\"token operator\">:</span> _KSYSTEM_TIME</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x020</span> TimeZoneBias     <span class=\"token operator\">:</span> _KSYSTEM_TIME</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x02c</span> ImageNumberLow   <span class=\"token operator\">:</span> Uint2B</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x02e</span> ImageNumberHigh  <span class=\"token operator\">:</span> Uint2B</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x030</span> NtSystemRoot     <span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">260</span><span class=\"token punctuation\">]</span> Uint2B</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x238</span> MaxStackTraceDepth <span class=\"token operator\">:</span> Uint4B</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x23c</span> CryptoExponent   <span class=\"token operator\">:</span> Uint4B</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x240</span> TimeZoneId       <span class=\"token operator\">:</span> Uint4B</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x244</span> Reserved2        <span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span> Uint4B</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x264</span> NtProductType    <span class=\"token operator\">:</span> _NT_PRODUCT_TYPE</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x268</span> ProductTypeIsValid <span class=\"token operator\">:</span> UChar</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x26c</span> NtMajorVersion   <span class=\"token operator\">:</span> Uint4B</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x270</span> NtMinorVersion   <span class=\"token operator\">:</span> Uint4B</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x274</span> ProcessorFeatures <span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">64</span><span class=\"token punctuation\">]</span> UChar</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x2b4</span> Reserved1        <span class=\"token operator\">:</span> Uint4B</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x2b8</span> Reserved3        <span class=\"token operator\">:</span> Uint4B</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x2bc</span> TimeSlip         <span class=\"token operator\">:</span> Uint4B</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x2c0</span> AlternativeArchitecture <span class=\"token operator\">:</span> _ALTERNATIVE_ARCHITECTURE_TYPE</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x2c8</span> SystemExpirationDate <span class=\"token operator\">:</span> _LARGE_INTEGER</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x2d0</span> SuiteMask        <span class=\"token operator\">:</span> Uint4B</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x2d4</span> KdDebuggerEnabled <span class=\"token operator\">:</span> UChar</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x2d5</span> NXSupportPolicy  <span class=\"token operator\">:</span> UChar</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x2d8</span> ActiveConsoleId  <span class=\"token operator\">:</span> Uint4B</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x2dc</span> DismountCount    <span class=\"token operator\">:</span> Uint4B</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x2e0</span> ComPlusPackage   <span class=\"token operator\">:</span> Uint4B</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x2e4</span> LastSystemRITEventTickCount <span class=\"token operator\">:</span> Uint4B</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x2e8</span> NumberOfPhysicalPages <span class=\"token operator\">:</span> Uint4B</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x2ec</span> SafeBootMode     <span class=\"token operator\">:</span> UChar</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x2f0</span> TraceLogging     <span class=\"token operator\">:</span> Uint4B</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x2f8</span> TestRetInstruction <span class=\"token operator\">:</span> Uint8B</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x300</span> SystemCall       <span class=\"token operator\">:</span> Uint4B</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x304</span> SystemCallReturn <span class=\"token operator\">:</span> Uint4B</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x308</span> SystemCallPad    <span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> Uint8B</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x320</span> TickCount        <span class=\"token operator\">:</span> _KSYSTEM_TIME</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x320</span> TickCountQuad    <span class=\"token operator\">:</span> Uint8B</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x330</span> Cookie           <span class=\"token operator\">:</span> Uint4B</pre></td></tr></table></figure><p>虽然它们指向的是同一个物理页，但通过分页机制使其在 R3 是只读的，在 R0 是可读可写的，以保证安全性。</p>\n<p>其中相对结构体偏移 0x300 处的成员就是 3 环 API 进入内核的入口函数。</p>\n<p>查看其内容：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kd&gt; .process 89aad020  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Implicit process is now 89aad020</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>WARNING: .cache forcedecodeuser is not enabled</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>kd&gt; dd 0x7ffe0000</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>7ffe0000  000a01e6 0fa00000 dc0bc1e4 00000017</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>7ffe0010  00000017 ae23657c 01d7ec22 01d7ec22</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>7ffe0020  f1dcc000 ffffffbc ffffffbc 014c014c</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>7ffe0030  003a0043 0057005c 004e0049 004f0044</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>7ffe0040  00530057 00000000 00000000 00000000</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>7ffe0050  00000000 00000000 00000000 00000000</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>7ffe0060  00000000 00000000 00000000 00000000</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>7ffe0070  00000000 00000000 00000000 00000000</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>kd&gt; dd ffdf0000</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>ffdf0000  000a01e6 0fa00000 dc0bc1e4 00000017</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>ffdf0010  00000017 ae23657c 01d7ec22 01d7ec22</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>ffdf0020  f1dcc000 ffffffbc ffffffbc 014c014c</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>ffdf0030  003a0043 0057005c 004e0049 004f0044</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>ffdf0040  00530057 00000000 00000000 00000000</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>ffdf0050  00000000 00000000 00000000 00000000</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>ffdf0060  00000000 00000000 00000000 00000000</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>ffdf0070  00000000 00000000 00000000 00000000</pre></td></tr></table></figure><p>可以发现 7ffe0000 与 ffdf0000 处的数据相同。</p>\n<p>我们先看看 0xffdf0300 这个地址里面存的是什么，先 dd 一下，在查看其存储的地址的反汇编：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kd<span class=\"token operator\">></span> dd ffdf0300</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>ffdf0300  <span class=\"token number\">7</span>c92e4f0 <span class=\"token number\">7</span>c92e4f4 <span class=\"token number\">00000000</span> <span class=\"token number\">00000000</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>ffdf0310  <span class=\"token number\">00000000</span> <span class=\"token number\">00000000</span> <span class=\"token number\">00000000</span> <span class=\"token number\">00000000</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>ffdf0320  <span class=\"token number\">00000000</span> <span class=\"token number\">00000000</span> <span class=\"token number\">00000000</span> <span class=\"token number\">00000000</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>ffdf0330  dc76a788 <span class=\"token number\">00000000</span> <span class=\"token number\">00000000</span> <span class=\"token number\">00000000</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>ffdf0340  <span class=\"token number\">00000000</span> <span class=\"token number\">00000000</span> <span class=\"token number\">00000000</span> <span class=\"token number\">00000000</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>ffdf0350  <span class=\"token number\">00000000</span> <span class=\"token number\">00000000</span> <span class=\"token number\">00000000</span> <span class=\"token number\">00000000</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>ffdf0360  <span class=\"token number\">00000000</span> <span class=\"token number\">00000000</span> <span class=\"token number\">00000000</span> <span class=\"token number\">00000000</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>ffdf0370  <span class=\"token number\">00000000</span> <span class=\"token number\">00000000</span> <span class=\"token number\">00000000</span> <span class=\"token number\">00000000</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>kd<span class=\"token operator\">></span> uf <span class=\"token number\">7</span>c92e4f0</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>ntdll<span class=\"token operator\">!</span>KiFastSystemCall<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token number\">7</span>c92e4f0 <span class=\"token number\">8</span>bd4            mov     edx<span class=\"token punctuation\">,</span>esp</pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token number\">7</span>c92e4f2 <span class=\"token number\">0f</span><span class=\"token number\">34</span>            sysenter</pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token number\">7</span>c92e4f4 c3              ret</pre></td></tr></table></figure><p>由 windbg 的符号表可以发现，调用了  <code>KiFastSystemCall</code>  函数，这个函数也就三行汇编代码：把 esp 的值交给了 edx，然后调用 sysenter。</p>\n<p>这个函数就是快速调用。</p>\n<h1 id=\"快速调用与中断调用\"><a class=\"anchor\" href=\"#快速调用与中断调用\">#</a> 快速调用与中断调用</h1>\n<p>学了前面的保护模式后，我们知道如果想要提权，少不了更改 4 个值：CS/SS/ESP/EIP。所以不管是哪一种调用，其目的都是获取这四个值。</p>\n<p>中断调用是通过中断门进 0 环，此过程需要查 IDT 表和 TSS 表，涉及内存寻址。</p>\n<p>快速调用则是使用  <code>sysenter</code>  指令进 0 环，这种方式不需要查内存，而是直接从 CPU 的 MSR 寄存器中获取所需数据，相对中断调用更快，所以称为快速调用。</p>\n<hr />\n<p>中断门进 0 环，需要的 CS、EIP 在 IDT 表中，需要查内存（SS 与 ESP 由 TSS 提供），而 CPU 如果支持 sysenter 指令时，操作系统会提前将 CS/SS/ESP/EIP 的值存储在 MSR 寄存器中，sysenter 指令执行时，CPU 会将 MSR 寄存器中的值直接写入相关寄存器，没有读内存的过程，所以叫快速调用，但本质是一样的。</p>\n<p>其实，快速调用并不是一直存在的，在比较古老的 CPU 是不支持快速调用的。<br />\n它们进入内核的方式很简单粗暴，就是使用中断门。</p>\n<p>CPU 如何知道是否支持快速调用呢？当通过 eax=1 来执行 cpuid 指令时，处理器的特征信息被放在 ecx 和 edx 寄存器中，其中 edx 包含了一个 SEP 位（11 位），该位指明了当前处理器知否支持 sysenter/sysexit 指令，具体细节可以查看白皮书。</p>\n<h1 id=\"kifastsystemcall-与-kiintsystemcall\"><a class=\"anchor\" href=\"#kifastsystemcall-与-kiintsystemcall\">#</a> KiFastSystemCall 与 KiIntSystemCall</h1>\n<p>通过逆向汇编代码可以看出，不管 CPU 是否支持快速调用，它都是调用该地址。</p>\n<p>这就说明操作系统在初始化该结构体的时候必须先判断支不支持，然后填入适当的值。</p>\n<p>如果 CPU 支持快速调用，操作系统就会填入 KiFastSystemCall 函数的地址，我们可以看一下：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>_DWORD __stdcall KiFastSystemCall()</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>                public _KiFastSystemCall@0</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>_KiFastSystemCall@0 proc near           ; DATA XREF: .text:off_7C923428↑o</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                mov     edx, esp</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                sysenter</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>_KiFastSystemCall@0 endp</pre></td></tr></table></figure><p>如果 CPU 不支持快速调用，操作系统就会填入 KiIntSystemCall 函数的地址，我们可以看一下：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>_DWORD __stdcall KiIntSystemCall ()</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>                public _KiIntSystemCall@0</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>_KiIntSystemCall@0 proc near            ; DATA XREF: .text:off_7C923428↑o</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>arg_4           &#x3D; byte ptr  8</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                lea     edx, [esp+arg_4] ; 参数指针</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                int     2Eh             ; DOS 2+ internal - EXECUTE COMMAND</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                                        ; DS:SI -&gt; counted CR-terminated command string</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                retn</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t\t\t</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>_KiIntSystemCall@0 endp</pre></td></tr></table></figure><h1 id=\"重写-readprocessmemory-和-writeprocessmemory\"><a class=\"anchor\" href=\"#重写-readprocessmemory-和-writeprocessmemory\">#</a> 重写 ReadProcessMemory 和 WriteProcessMemory</h1>\n<p>首先分析一下这两个函数的调用流程</p>\n<h2 id=\"readprocessmemory-3环调用流程\"><a class=\"anchor\" href=\"#readprocessmemory-3环调用流程\">#</a> ReadProcessMemory 3 环调用流程</h2>\n<p>在 kernel32.dll 中</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>.text:7C8021D0 ; BOOL __stdcall ReadProcessMemory(HANDLE hProcess, LPCVOID lpBaseAddress, LPVOID lpBuffer, SIZE_T nSize, SIZE_T *lpNumberOfBytesRead)</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>.text:7C8021D0                 public _ReadProcessMemory@20</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>.text:7C8021D0 _ReadProcessMemory@20 proc near         ; CODE XREF: GetProcessVersion(x)+2F18B↓p</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>.text:7C8021D0                                         ; GetProcessVersion(x)+2F1AA↓p ...</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>.text:7C8021D0</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>.text:7C8021D0 hProcess        &#x3D; dword ptr  8</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>.text:7C8021D0 lpBaseAddress   &#x3D; dword ptr  0Ch</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>.text:7C8021D0 lpBuffer        &#x3D; dword ptr  10h</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>.text:7C8021D0 nSize           &#x3D; dword ptr  14h</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>.text:7C8021D0 lpNumberOfBytesRead&#x3D; dword ptr  18h</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>.text:7C8021D0</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>.text:7C8021D0                 mov     edi, edi</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>.text:7C8021D2                 push    ebp</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>.text:7C8021D3                 mov     ebp, esp</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>.text:7C8021D5                 lea     eax, [ebp+nSize]</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>.text:7C8021D8                 push    eax             ; NumberOfBytesRead</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>.text:7C8021D9                 push    [ebp+nSize]     ; NumberOfBytesToRead</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>.text:7C8021DC                 push    [ebp+lpBuffer]  ; Buffer</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>.text:7C8021DF                 push    [ebp+lpBaseAddress] ; BaseAddress</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>.text:7C8021E2                 push    [ebp+hProcess]  ; ProcessHandle</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>.text:7C8021E5                 call    ds:__imp__NtReadVirtualMemory@20 ; NtReadVirtualMemory(x,x,x,x,x)</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>.text:7C8021EB                 mov     ecx, [ebp+lpNumberOfBytesRead]</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>.text:7C8021EE                 test    ecx, ecx</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>.text:7C8021F0                 jnz     short loc_7C8021FD</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>.text:7C8021F2</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>.text:7C8021F2 loc_7C8021F2:                           ; CODE XREF: ReadProcessMemory(x,x,x,x,x)+32↓j</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>.text:7C8021F2                 test    eax, eax</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>.text:7C8021F4                 jl      short loc_7C802204</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>.text:7C8021F6                 xor     eax, eax</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>.text:7C8021F8                 inc     eax</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>.text:7C8021F9</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>.text:7C8021F9 loc_7C8021F9:                           ; CODE XREF: ReadProcessMemory(x,x,x,x,x)+3C↓j</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>.text:7C8021F9                 pop     ebp</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>.text:7C8021FA                 retn    14h</pre></td></tr></table></figure><p>发现其调用了 ntdll.dll 中的 NtReadVirtualMemory 函数</p>\n<p>查看 ntdll.dll 中的 NtReadVirtualMemory</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>.text:7C92D9E0 ; __stdcall NtReadVirtualMemory(x, x, x, x, x)</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>.text:7C92D9E0                 public _NtReadVirtualMemory@20</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>.text:7C92D9E0 _NtReadVirtualMemory@20 proc near       ; CODE XREF: LdrFindCreateProcessManifest(x,x,x,x,x)+1CC↓p</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>.text:7C92D9E0                                         ; LdrCreateOutOfProcessImage(x,x,x,x)+7C↓p ...</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>.text:7C92D9E0                 mov     eax, 0BAh       ; NtReadVirtualMemory</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>.text:7C92D9E5                 mov     edx, 7FFE0300h</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>.text:7C92D9EA                 call    dword ptr [edx]</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>.text:7C92D9EC                 retn    14h</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>.text:7C92D9EC _NtReadVirtualMemory@20 endp</pre></td></tr></table></figure><p>其堆栈变化为：</p>\n<p><img data-src=\"image004.png\" alt=\"\" /></p>\n<h2 id=\"rewriter3apicpp\"><a class=\"anchor\" href=\"#rewriter3apicpp\">#</a> RewriteR3API.cpp</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span>  <span class=\"token macro-name\">_CRT_SECURE_NO_WARNINGS</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;Windows.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 读进程内存（中断门调用）</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>BOOL WINAPI <span class=\"token function\">HbgReadProcessMemory_INT</span><span class=\"token punctuation\">(</span>HANDLE hProcess<span class=\"token punctuation\">,</span> LPCVOID lpBaseAddress<span class=\"token punctuation\">,</span> LPVOID lpBuffer<span class=\"token punctuation\">,</span> DWORD nSize<span class=\"token punctuation\">,</span> LPDWORD lpNumberOfBytesRead<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tLONG NtStatus<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t__asm</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token comment\">// 直接模拟 KiIntSystemCall</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\tlea edx<span class=\"token punctuation\">,</span> hProcess<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 要求 edx 存储最后入栈的参数</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\tmov eax<span class=\"token punctuation\">,</span> <span class=\"token number\">0xBA</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> <span class=\"token number\">0x2E</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\tmov NtStatus<span class=\"token punctuation\">,</span> eax<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lpNumberOfBytesRead <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t<span class=\"token operator\">*</span>lpNumberOfBytesRead <span class=\"token operator\">=</span> nSize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token comment\">// 错误检查</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>NtStatus <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> FALSE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token keyword\">return</span> TRUE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\">// 读进程内存（快速调用）</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>BOOL WINAPI <span class=\"token function\">HbgReadProcessMemory_FAST</span><span class=\"token punctuation\">(</span>HANDLE hProcess<span class=\"token punctuation\">,</span> LPCVOID lpBaseAddress<span class=\"token punctuation\">,</span> LPVOID lpBuffer<span class=\"token punctuation\">,</span> DWORD nSize<span class=\"token punctuation\">,</span> LPDWORD lpNumberOfBytesRead<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\tLONG NtStatus<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t__asm</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\t<span class=\"token comment\">// 模拟 ReadProcessMemory</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\tlea eax<span class=\"token punctuation\">,</span> nSize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\tpush eax<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\tpush nSize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\tpush lpBuffer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\tpush lpBaseAddress<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\tpush hProcess<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\tsub esp<span class=\"token punctuation\">,</span> <span class=\"token number\">0x04</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 模拟 ReadProcessMemory 里的 CALL NtReadVirtualMemory</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\t<span class=\"token comment\">// 模拟 NtReadVirtualMemory</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\tmov eax<span class=\"token punctuation\">,</span> <span class=\"token number\">0xBA</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\tpush NtReadVirtualMemoryReturn<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 模拟 NtReadVirtualMemory 函数里的 CALL [0x7FFE0300]</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t\t<span class=\"token comment\">// 模拟 KiFastSystemCall</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t\tmov edx<span class=\"token punctuation\">,</span> esp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t\t_emit <span class=\"token number\">0x0F</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// sysenter </span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t\t_emit <span class=\"token number\">0x34</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\tNtReadVirtualMemoryReturn<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t\tadd esp<span class=\"token punctuation\">,</span> <span class=\"token number\">0x18</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 模拟 NtReadVirtualMemory 返回到 ReadProcessMemory 时的 RETN 0x14</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t\tmov NtStatus<span class=\"token punctuation\">,</span> eax<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lpNumberOfBytesRead <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t\t<span class=\"token operator\">*</span>lpNumberOfBytesRead <span class=\"token operator\">=</span> nSize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t<span class=\"token comment\">// 错误检查</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>NtStatus <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> FALSE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t<span class=\"token keyword\">return</span> TRUE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre></pre></td></tr><tr><td data-num=\"66\"></td><td><pre><span class=\"token comment\">// 写进程内存（中断门调用）</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>BOOL WINAPI <span class=\"token function\">HbgWriteProcessMemory_INT</span><span class=\"token punctuation\">(</span>HANDLE hProcess<span class=\"token punctuation\">,</span> LPCVOID lpBaseAddress<span class=\"token punctuation\">,</span> LPVOID lpBuffer<span class=\"token punctuation\">,</span> DWORD nSize<span class=\"token punctuation\">,</span> LPDWORD lpNumberOfBytesWritten<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\tLONG NtStatus<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\t__asm</pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\t\tlea edx<span class=\"token punctuation\">,</span> hProcess<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>\t\tmov eax<span class=\"token punctuation\">,</span> <span class=\"token number\">0x115</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> <span class=\"token number\">0x2E</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\t\tmov NtStatus<span class=\"token punctuation\">,</span> eax<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lpNumberOfBytesWritten <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>\t\t<span class=\"token operator\">*</span>lpNumberOfBytesWritten <span class=\"token operator\">=</span> nSize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>\t<span class=\"token comment\">// 错误检查</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>NtStatus <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> FALSE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>\t<span class=\"token keyword\">return</span> TRUE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre></pre></td></tr><tr><td data-num=\"89\"></td><td><pre><span class=\"token comment\">// 写进程内存（快速调用）</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>BOOL WINAPI <span class=\"token function\">HbgWriteProcessMemory_FAST</span><span class=\"token punctuation\">(</span>HANDLE hProcess<span class=\"token punctuation\">,</span> LPCVOID lpBaseAddress<span class=\"token punctuation\">,</span> LPVOID lpBuffer<span class=\"token punctuation\">,</span> DWORD nSize<span class=\"token punctuation\">,</span> LPDWORD lpNumberOfBytesWritten<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>\tLONG NtStatus<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>\t__asm</pre></td></tr><tr><td data-num=\"94\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>\t\t<span class=\"token comment\">// 模拟 WriteProcessMemory</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>\t\tlea eax<span class=\"token punctuation\">,</span> nSize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>\t\tpush eax<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>\t\tpush nSize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>\t\tpush lpBuffer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>\t\tpush lpBaseAddress<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>\t\tpush hProcess<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>\t\tsub esp<span class=\"token punctuation\">,</span> <span class=\"token number\">0x04</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 模拟 WriteProcessMemory 里的 CALL NtWriteVirtualMemory</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>\t\t<span class=\"token comment\">// 模拟 NtWriteVirtualMemory</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>\t\tmov eax<span class=\"token punctuation\">,</span> <span class=\"token number\">0x115</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>\t\tpush NtWriteVirtualMemoryReturn<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 模拟 NtWriteVirtualMemory 函数里的 CALL [0x7FFE0300]</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>\t\t<span class=\"token comment\">// 模拟 KiFastSystemCall</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>\t\tmov edx<span class=\"token punctuation\">,</span> esp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>\t\t_emit <span class=\"token number\">0x0F</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// sysenter </span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>\t\t_emit <span class=\"token number\">0x34</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>\tNtWriteVirtualMemoryReturn<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>\t\tadd esp<span class=\"token punctuation\">,</span> <span class=\"token number\">0x18</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 模拟 NtWriteVirtualMemory 返回到 WriteProcessMemory 时的 RETN 0x14</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>\t\tmov NtStatus<span class=\"token punctuation\">,</span> eax<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lpNumberOfBytesWritten <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>\t\t<span class=\"token operator\">*</span>lpNumberOfBytesWritten <span class=\"token operator\">=</span> nSize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>\t<span class=\"token comment\">// 错误检查</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>NtStatus <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> FALSE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>\t<span class=\"token keyword\">return</span> TRUE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre></pre></td></tr><tr><td data-num=\"126\"></td><td><pre><span class=\"token comment\">// 提权函数：提升为 DEBUG 权限</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>BOOL <span class=\"token function\">EnableDebugPrivilege</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>\tHANDLE hToken<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>\tBOOL fOk <span class=\"token operator\">=</span> FALSE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">OpenProcessToken</span><span class=\"token punctuation\">(</span><span class=\"token function\">GetCurrentProcess</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> TOKEN_ADJUST_PRIVILEGES<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>hToken<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>\t\tTOKEN_PRIVILEGES tp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>\t\ttp<span class=\"token punctuation\">.</span>PrivilegeCount <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>\t\t<span class=\"token function\">LookupPrivilegeValue</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> SE_DEBUG_NAME<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>tp<span class=\"token punctuation\">.</span>Privileges<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>Luid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>\t\ttp<span class=\"token punctuation\">.</span>Privileges<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>Attributes <span class=\"token operator\">=</span> SE_PRIVILEGE_ENABLED<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>\t\t<span class=\"token function\">AdjustTokenPrivileges</span><span class=\"token punctuation\">(</span>hToken<span class=\"token punctuation\">,</span> FALSE<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>tp<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>tp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>\t\tfOk <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token function\">GetLastError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> ERROR_SUCCESS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>\t\t<span class=\"token function\">CloseHandle</span><span class=\"token punctuation\">(</span>hToken<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>\t<span class=\"token keyword\">return</span> fOk<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre></pre></td></tr><tr><td data-num=\"146\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>\t<span class=\"token function\">EnableDebugPrivilege</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre></pre></td></tr><tr><td data-num=\"150\"></td><td><pre>\tDWORD pid<span class=\"token punctuation\">,</span> addr<span class=\"token punctuation\">,</span> dwRead<span class=\"token punctuation\">,</span> dwWritten<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"151\"></td><td><pre>\t<span class=\"token keyword\">char</span> buff<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"依次输入PID和要读的线性地址（均为16进制）...\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"153\"></td><td><pre>\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%x %x\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>pid<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"154\"></td><td><pre>\t<span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"155\"></td><td><pre></pre></td></tr><tr><td data-num=\"156\"></td><td><pre>\t<span class=\"token comment\">// 测试两个版本的 ReadProcessMemory</span></pre></td></tr><tr><td data-num=\"157\"></td><td><pre>\t<span class=\"token function\">HbgReadProcessMemory_INT</span><span class=\"token punctuation\">(</span><span class=\"token function\">OpenProcess</span><span class=\"token punctuation\">(</span>PROCESS_ALL_ACCESS<span class=\"token punctuation\">,</span> FALSE<span class=\"token punctuation\">,</span> pid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>LPCVOID<span class=\"token punctuation\">)</span>addr<span class=\"token punctuation\">,</span> buff<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>dwRead<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"158\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"读取了%d个字节，内容是: \\\"%s\\\"\\n\"</span><span class=\"token punctuation\">,</span> dwRead<span class=\"token punctuation\">,</span> buff<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"159\"></td><td><pre>\t<span class=\"token function\">HbgReadProcessMemory_FAST</span><span class=\"token punctuation\">(</span><span class=\"token function\">OpenProcess</span><span class=\"token punctuation\">(</span>PROCESS_ALL_ACCESS<span class=\"token punctuation\">,</span> FALSE<span class=\"token punctuation\">,</span> pid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>LPCVOID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>addr <span class=\"token operator\">+</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> buff<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>dwRead<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"160\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"读取了%d个字节，内容是: \\\"%s\\\"\\n\"</span><span class=\"token punctuation\">,</span> dwRead<span class=\"token punctuation\">,</span> buff<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"161\"></td><td><pre></pre></td></tr><tr><td data-num=\"162\"></td><td><pre>\t<span class=\"token comment\">// 测试两个版本的 WriteProcessMemory</span></pre></td></tr><tr><td data-num=\"163\"></td><td><pre>\t<span class=\"token function\">HbgWriteProcessMemory_INT</span><span class=\"token punctuation\">(</span><span class=\"token function\">OpenProcess</span><span class=\"token punctuation\">(</span>PROCESS_ALL_ACCESS<span class=\"token punctuation\">,</span> FALSE<span class=\"token punctuation\">,</span> pid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>LPCVOID<span class=\"token punctuation\">)</span>addr<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>LPVOID<span class=\"token punctuation\">)</span><span class=\"token string\">\"##\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>dwWritten<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"164\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"写入了%d字节.\\n\"</span><span class=\"token punctuation\">,</span> dwWritten<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"165\"></td><td><pre>\t<span class=\"token function\">HbgWriteProcessMemory_FAST</span><span class=\"token punctuation\">(</span><span class=\"token function\">OpenProcess</span><span class=\"token punctuation\">(</span>PROCESS_ALL_ACCESS<span class=\"token punctuation\">,</span> FALSE<span class=\"token punctuation\">,</span> pid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>LPCVOID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>addr <span class=\"token operator\">+</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>LPVOID<span class=\"token punctuation\">)</span><span class=\"token string\">\"**\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>dwWritten<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"166\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"写入了%d字节.\\n\"</span><span class=\"token punctuation\">,</span> dwWritten<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"167\"></td><td><pre></pre></td></tr><tr><td data-num=\"168\"></td><td><pre>\t<span class=\"token comment\">// 再次读取，验证写入是否成功</span></pre></td></tr><tr><td data-num=\"169\"></td><td><pre>\t<span class=\"token function\">HbgReadProcessMemory_INT</span><span class=\"token punctuation\">(</span><span class=\"token function\">OpenProcess</span><span class=\"token punctuation\">(</span>PROCESS_ALL_ACCESS<span class=\"token punctuation\">,</span> FALSE<span class=\"token punctuation\">,</span> pid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>LPCVOID<span class=\"token punctuation\">)</span>addr<span class=\"token punctuation\">,</span> buff<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>dwRead<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"170\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"读取了%d个字节，内容是: \\\"%s\\\"\\n\"</span><span class=\"token punctuation\">,</span> dwRead<span class=\"token punctuation\">,</span> buff<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"171\"></td><td><pre>\t<span class=\"token function\">HbgReadProcessMemory_FAST</span><span class=\"token punctuation\">(</span><span class=\"token function\">OpenProcess</span><span class=\"token punctuation\">(</span>PROCESS_ALL_ACCESS<span class=\"token punctuation\">,</span> FALSE<span class=\"token punctuation\">,</span> pid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>LPCVOID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>addr <span class=\"token operator\">+</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> buff<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>dwRead<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"172\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"读取了%d个字节，内容是: \\\"%s\\\"\\n\"</span><span class=\"token punctuation\">,</span> dwRead<span class=\"token punctuation\">,</span> buff<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"173\"></td><td><pre></pre></td></tr><tr><td data-num=\"174\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bye!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"175\"></td><td><pre>\t<span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"176\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"177\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"testrewriter3apicpp\"><a class=\"anchor\" href=\"#testrewriter3apicpp\">#</a> TestRewriteR3API.cpp</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;windows.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;Tlhelp32.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span>   </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 获取进程自身的 PID</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    HANDLE hSnapshot <span class=\"token operator\">=</span> <span class=\"token function\">CreateToolhelp32Snapshot</span><span class=\"token punctuation\">(</span>TH32CS_SNAPPROCESS<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>INVALID_HANDLE_VALUE <span class=\"token operator\">==</span> hSnapshot<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    PROCESSENTRY32 pi<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    pi<span class=\"token punctuation\">.</span>dwSize <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>PROCESSENTRY32<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 第一次使用必须初始化成员</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    BOOL bRet <span class=\"token operator\">=</span> <span class=\"token function\">Process32First</span><span class=\"token punctuation\">(</span>hSnapshot<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>pi<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>bRet<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">strcmp</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"TestReWriteR3API.exe\"</span><span class=\"token punctuation\">,</span> pi<span class=\"token punctuation\">.</span>szExeFile<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"进程ID = %X \\r\\n\"</span><span class=\"token punctuation\">,</span> pi<span class=\"token punctuation\">.</span>th32ProcessID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        bRet <span class=\"token operator\">=</span> <span class=\"token function\">Process32Next</span><span class=\"token punctuation\">(</span>hSnapshot<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>pi<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token function\">CloseHandle</span><span class=\"token punctuation\">(</span>hSnapshot<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">char</span> str<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"菜就多练练\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%p--%s\\n\"</span><span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>结果：</p>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<p>并且查看导入表中并没有 ReadProcessMemory 和 WriteProcessMemory。</p>\n<p><img data-src=\"image002.png\" alt=\"\" /></p>\n<p><img data-src=\"image003.png\" alt=\"\" /></p>\n<h1 id=\"reference\"><a class=\"anchor\" href=\"#reference\">#</a> Reference</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0t3YW5zeS9hcnRpY2xlL2RldGFpbHMvMTA5MzQxNzk0\">https://blog.csdn.net/Kwansy/article/details/109341794</span></p>\n",
            "tags": [
                "快速调用",
                "中断调用",
                "分析ReadProcessMemory",
                "KiFastSystemCall",
                "KiIntSystemCall",
                "重写3环"
            ]
        }
    ]
}