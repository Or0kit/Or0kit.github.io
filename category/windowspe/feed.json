{
    "version": "https://jsonfeed.org/version/1",
    "title": "Or0kit • All posts by \"windowspe\" category",
    "description": "临渊羡鱼，不如退而结网",
    "home_page_url": "https://Or0kit.github.io",
    "items": [
        {
            "id": "https://or0kit.github.io/Bin/WindowsPE/PE%E9%A1%B9%E7%9B%AE-%E7%BC%96%E5%86%99PE%E6%9F%A5%E7%9C%8B%E5%99%A8/",
            "url": "https://or0kit.github.io/Bin/WindowsPE/PE%E9%A1%B9%E7%9B%AE-%E7%BC%96%E5%86%99PE%E6%9F%A5%E7%9C%8B%E5%99%A8/",
            "title": "PE项目-编写PE查看器",
            "date_published": "2022-03-23T11:49:51.000Z",
            "content_html": "<h1 id=\"楔子\"><a class=\"anchor\" href=\"#楔子\">#</a> 楔子</h1>\n<p>快要实习了，整理一下所学知识，编写一个工具，以 PE 查看器为基础进行扩展。</p>\n<h1 id=\"编写pe查看器\"><a class=\"anchor\" href=\"#编写pe查看器\">#</a> 编写 PE 查看器</h1>\n<p>首先就是编写图像化界面，这个根据我所学可以用 MFC 或 Win32 ，因为最近在重新学习面对象的编程，所以准备使用 MFC 编写。</p>\n<div class=\"tab\" data-id=\"id1\" data-title=\"脑中的构思宏图是：\">\n<ol>\n<li>绘制一个对话框界面</li>\n<li>添加一个标签页，这个标签页上显示的为 PE 相关的信息</li>\n</ol>\n<ul>\n<li>第一个标签页上添加三个  <code>ListControl</code>  控件\n<ul>\n<li>第一个  <code>ListCtrl</code>  是显示正在运行的所有进程的信息，有进程的名字、进程 ID、进程的线程数、进程所属的用户名字。并且可以对每项进行右键操作。\n<ul>\n<li>右键功能暂定为：打开进程文件所在位置、关闭进程、查看其在内存中的 PE 结构。</li>\n</ul>\n</li>\n<li>第二个  <code>ListCtrl</code>  显示在第一个   <code>ListCtrl</code>  中所选中的进程的线程信息，有线程 ID、线程的优先级、线程的开始地址。并且可以对每项进行右键操作。\n<ul>\n<li>右键功能暂定为：关闭线程。</li>\n</ul>\n</li>\n<li>第三个  <code>ListCtrl</code>  显示在第一个   <code>ListCtrl</code>  中所选中的进程的模块信息。</li>\n</ul>\n</li>\n</ul>\n<ol start=\"3\">\n<li>目前仅实现一个标签页上的功能。</li>\n</ol>\n</div>\n<p>以上功能，有的需要管理员权限才能运行，我们就要查看当前进程的运行权限，并显示在一个位置。借此也可添加一个右键获取管理员权限功能，或者添加一个按钮，当是管理员权限时就不显示此按钮。</p>\n<p>还有一件事，当拖入文件进入程序后默认解析 PE 文件，打开 PE 结构解析的页面。</p>\n<h2 id=\"\"><a class=\"anchor\" href=\"#\">#</a> </h2>\n",
            "tags": [
                "MFC",
                "PE查看器"
            ]
        },
        {
            "id": "https://or0kit.github.io/Bin/WindowsPE/%E5%AF%BC%E5%85%A5%E8%A1%A8%E6%B3%A8%E5%85%A5/",
            "url": "https://or0kit.github.io/Bin/WindowsPE/%E5%AF%BC%E5%85%A5%E8%A1%A8%E6%B3%A8%E5%85%A5/",
            "title": "导入表注入",
            "date_published": "2021-10-14T09:02:22.000Z",
            "content_html": "<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<p>导入表中不能动 IAT 表，因为 exe 中的 call 0x0040123 这种调用导入的函数已经被写死了，程序中有多少地址引用这个函数，我们基本无法计算，工作量太大了。</p>\n<h1 id=\"注入的种类\"><a class=\"anchor\" href=\"#注入的种类\">#</a> 注入的种类</h1>\n<p>1、注册表注入<br />\n 2、导入表注入<br />\n 3、特洛伊注入<br />\n 4、远程线程注入<br />\n 5、无 DLL 注入<br />\n 6、Apc 注入<br />\n 7、Windows 挂钩注入 DLL<br />\n8、输入法注入</p>\n<h1 id=\"导入表注入原理\"><a class=\"anchor\" href=\"#导入表注入原理\">#</a> 导入表注入原理</h1>\n<p>当 exe 被加载时，系统会根据 exe 导入表信息来加载需要用到的 DLL, 导入表注入的原理就是修改 exe 导入表，将自己的 DLL 添加到 exe 的导入表中，这样 exe 运行时可以将自己的 DLL 加载到 exe 的进程空间。</p>\n<h1 id=\"导入表注入的实现步骤\"><a class=\"anchor\" href=\"#导入表注入的实现步骤\">#</a> 导入表注入的实现步骤：</h1>\n<p><strong>第一步：</strong></p>\n<p>根据目录项 (第二个就是导入表) 得到导入表信息：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_IMAGE_DATA_DIRECTORY</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    DWORD   VirtualAddress<span class=\"token punctuation\">;</span>\t</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    DWORD   Size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span> IMAGE_DATA_DIRECTORY<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>PIMAGE_DATA_DIRECTORY<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><code>VirtualAddress</code> : 指向导入表结构\t<br />\n <code>Size</code> : 导入表的总大小</p>\n<p>这两个值都需要</p>\n<p><strong>第二步：</strong></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_IMAGE_IMPORT_DESCRIPTOR</span> <span class=\"token punctuation\">&#123;</span>\t\t\t\t\t\t\t</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">union</span> <span class=\"token punctuation\">&#123;</span>\t\t\t\t\t\t\t</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        DWORD   Characteristics<span class=\"token punctuation\">;</span>           \t\t\t\t\t\t\t</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        DWORD   OriginalFirstThunk<span class=\"token punctuation\">;</span>         \t\t\t\t\t\t\t</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    DWORD   TimeDateStamp<span class=\"token punctuation\">;</span>               \t\t\t\t\t\t\t</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    DWORD   ForwarderChain<span class=\"token punctuation\">;</span>              \t\t\t\t\t\t\t</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    DWORD   Name<span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    DWORD   FirstThunk<span class=\"token punctuation\">;</span>                 \t\t\t\t\t\t\t</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span> IMAGE_IMPORT_DESCRIPTOR<span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">typedef</span> IMAGE_IMPORT_DESCRIPTOR UNALIGNED <span class=\"token operator\">*</span>PIMAGE_IMPORT_DESCRIPTOR<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><img data-src=\"image001.png\" alt=\"\" /></p>\n<p>新增一个导入表需要的空间：</p>\n<p>A:20 字节</p>\n<p>B:16 字节</p>\n<p>C: 取决于 DLL 名串的长度 + 1</p>\n<p>D: 取决于函数名的长度 + 1+2</p>\n<p>判断哪一个节的空白区 &gt; Size (原导入表的大小) + 20 + A + B + C + D</p>\n<p>如果空间不够：可以将 C/D 存储在其他的空白区</p>\n<p>也就是，只要空白区 &gt; Size + 0x20 就可以了</p>\n<p>如果仍然不够，就需要扩大最后一个节，或者新增节来解决.</p>\n<p><strong>第三步：</strong></p>\n<p>将原导入表全部 Copy 到空白区</p>\n<p><strong>第四步：</strong></p>\n<p>在新的导入表后面，追加一个导入表.</p>\n<p><strong>第五步：</strong></p>\n<p>追加 8 个字节的 INT 表  8 个字节的 IAT 表</p>\n<p><strong>第六步：</strong></p>\n<p>追加一个 IMAGE_IMPORT_BY_NAME 结构，前 2 个字节是 0 后面是函数名称字符串</p>\n<p><strong>第七步：</strong></p>\n<p>将 IMAGE_IMPORT_BY_NAME 结构的 RVA 赋值给 INT 和 IAT 表中的第一项</p>\n<p><strong>第八步：</strong></p>\n<p>分配空间存储 DLL 名称字符串 并将该字符串的 RVA 赋值给 Name 属性</p>\n<p><strong>第九步：</strong></p>\n<p>修正 IMAGE_DATA_DIRECTORY 结构的 VirtualAddress 和 Size</p>\n",
            "tags": [
                "注入",
                "导入表注入"
            ]
        },
        {
            "id": "https://or0kit.github.io/Bin/WindowsPE/PE%E8%AF%BE%E5%90%8E%E4%BD%9C%E4%B8%9A/",
            "url": "https://or0kit.github.io/Bin/WindowsPE/PE%E8%AF%BE%E5%90%8E%E4%BD%9C%E4%B8%9A/",
            "title": "PE课后作业",
            "date_published": "2021-09-30T11:42:09.000Z",
            "content_html": "<h1 id=\"楔子\"><a class=\"anchor\" href=\"#楔子\">#</a> 楔子</h1>\n<p>把所有的课后练习都实现。</p>\n<p>不贴上了，编写 PE 项目的时候会用到。</p>\n",
            "tags": [
                "PE课后作业"
            ]
        },
        {
            "id": "https://or0kit.github.io/Bin/WindowsPE/%E7%A7%BB%E5%8A%A8%E5%AF%BC%E5%87%BA%E8%A1%A8%E4%B8%8E%E9%87%8D%E5%AE%9A%E4%BD%8D%E8%A1%A8/",
            "url": "https://or0kit.github.io/Bin/WindowsPE/%E7%A7%BB%E5%8A%A8%E5%AF%BC%E5%87%BA%E8%A1%A8%E4%B8%8E%E9%87%8D%E5%AE%9A%E4%BD%8D%E8%A1%A8/",
            "title": "移动导出表与重定位表",
            "date_published": "2021-05-09T07:53:08.000Z",
            "content_html": "<h1 id=\"楔子\"><a class=\"anchor\" href=\"#楔子\">#</a> 楔子</h1>\n<p>为什么要移动各种表？</p>\n<p>1、这些表是编译器生成的，里面存储了非常重要的信息。</p>\n<p>2、在程序启动的时候，系统会根据这些表做初始化的工作：</p>\n<p>比如，将用到的 DLL 中的函数地址存储到 IAT 表中.</p>\n<p>3、为了保护程序，可以对.exe 的二进制代码进行加密操作，但问题是：</p>\n<p>各种表的信息与客户字节的代码和数据都混在一起了，如果进行加密，那系统在初始化的时候会出问题！</p>\n<p><strong>学会移动各种表，是对程序加密 / 破解的基础</strong></p>\n<h1 id=\"移动导出表\"><a class=\"anchor\" href=\"#移动导出表\">#</a> 移动导出表</h1>\n<p>先回顾一下导出表的结构</p>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<p>移动导出表的步骤如下：</p>\n<p>第一步：在 DLL 中新增一个节，并返回新增后的 FOA</p>\n<p>第二步：复制 AddressOfFunctions</p>\n<pre><code>长度：4*NumberOfFunctions\n</code></pre>\n<p>第三步：复制 AddressOfNameOrdinals</p>\n<pre><code>长度：NumberOfNames*2\n</code></pre>\n<p>第四步：复制 AddressOfNames</p>\n<pre><code>长度：NumberOfNames*4\n</code></pre>\n<p>第五步：复制所有的函数名</p>\n<pre><code>长度不确定，复制时直接修复AddressOfNames\n</code></pre>\n<p>第六步：复杂 IMAGE_EXPORT_DIRECTORY 结构</p>\n<p>第七步：修复 IMAGE_EXPORT_DIRECTORY 结构中的</p>\n<pre><code>AddressOfFunctions\n\nAddressOfNameOrdinals\n\nAddressOfNames\n</code></pre>\n<p>第八步：修复目录项中的值，指向新的 IMAGE_EXPORT_DIRECTORY</p>\n<h2 id=\"代码实现\"><a class=\"anchor\" href=\"#代码实现\">#</a> 代码实现</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>LPVOID <span class=\"token function\">MoveExportTableToNewSection</span><span class=\"token punctuation\">(</span>LPVOID pFileBuffer<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span>\t</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token comment\">// 第一步：在 DLL 中新增一个节</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tLPVOID pNewBuffer <span class=\"token operator\">=</span> <span class=\"token function\">IncreaseSection</span><span class=\"token punctuation\">(</span>pFileBuffer<span class=\"token punctuation\">,</span> <span class=\"token number\">0x10000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tPIMAGE_DOS_HEADER pDosHeader <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PIMAGE_DOS_HEADER<span class=\"token punctuation\">)</span>pNewBuffer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tPIMAGE_NT_HEADERS pNTHeader <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PIMAGE_NT_HEADERS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>pDosHeader <span class=\"token operator\">+</span> pDosHeader<span class=\"token operator\">-></span>e_lfanew<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tPIMAGE_FILE_HEADER pFileHeader <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PIMAGE_FILE_HEADER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>pDosHeader <span class=\"token operator\">+</span> pDosHeader<span class=\"token operator\">-></span>e_lfanew <span class=\"token operator\">+</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tPIMAGE_OPTIONAL_HEADER32 pOptionHeader <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PIMAGE_OPTIONAL_HEADER32<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>pFileHeader <span class=\"token operator\">+</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>IMAGE_FILE_HEADER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tPIMAGE_SECTION_HEADER pSectionHeader <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PIMAGE_SECTION_HEADER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>pOptionHeader <span class=\"token operator\">+</span> pFileHeader<span class=\"token operator\">-></span>SizeOfOptionalHeader<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token comment\">// 定位原导出表</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\tPIMAGE_EXPORT_DIRECTORY pExportTable <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PIMAGE_EXPORT_DIRECTORY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token function\">RvaToFoa</span><span class=\"token punctuation\">(</span>pOptionHeader<span class=\"token operator\">-></span>DataDirectory<span class=\"token punctuation\">[</span>IMAGE_DIRECTORY_ENTRY_EXPORT<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>VirtualAddress<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>pNewBuffer<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>pNewBuffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token comment\">// 导出地址表中的成员个数</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tDWORD dwNumOfFuns <span class=\"token operator\">=</span> pExportTable<span class=\"token operator\">-></span>NumberOfFunctions<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token comment\">// 导出名称表中的成员个数</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tDWORD dwNumOfNames <span class=\"token operator\">=</span> pExportTable<span class=\"token operator\">-></span>NumberOfNames<span class=\"token punctuation\">;</span>\t</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token comment\">// 导出函数地址表地址 FOA</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\tPDWORD  pExportAddress <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PDWORD<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token function\">RvaToFoa</span><span class=\"token punctuation\">(</span>pExportTable<span class=\"token operator\">-></span>AddressOfFunctions<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>pNewBuffer<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>pNewBuffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token comment\">// 导出函数名称表地址</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\tPDWORD pExportName <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PDWORD<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token function\">RvaToFoa</span><span class=\"token punctuation\">(</span>pExportTable<span class=\"token operator\">-></span>AddressOfNames<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>pNewBuffer<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>pNewBuffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token comment\">// 导出函数序号表地址</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\tPWORD pExportOrdinal <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PWORD<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token function\">RvaToFoa</span><span class=\"token punctuation\">(</span>pExportTable<span class=\"token operator\">-></span>AddressOfNameOrdinals<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>pNewBuffer<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>pNewBuffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token comment\">// 第二步：复制 AddressOfFunctions</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token comment\">// 长度：4* NumberOfFunctions</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\tDWORD pNewSection <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token function\">RvaToFoa</span><span class=\"token punctuation\">(</span>pSectionHeader<span class=\"token punctuation\">[</span>pFileHeader<span class=\"token operator\">-></span>NumberOfSections <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>VirtualAddress<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>pNewBuffer<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>pNewBuffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token comment\">// 定位新增的节的地址 既导出表内容将要拷贝到的地址</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\tPDWORD pNewExportAddress <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PDWORD<span class=\"token punctuation\">)</span>pNewSection<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>pNewExportAddress<span class=\"token punctuation\">,</span> pExportAddress<span class=\"token punctuation\">,</span> dwNumOfFuns <span class=\"token operator\">*</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token comment\">// 第三步：复制 AddressOfNameOrdinals</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token comment\">// 长度：NumberOfNames * 2</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t<span class=\"token comment\">// 更新将要拷贝到的地址</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\tPDWORD pNewExportOrdinal <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PDWORD<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>pNewExportAddress <span class=\"token operator\">+</span> dwNumOfFuns <span class=\"token operator\">*</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t<span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>pNewExportOrdinal<span class=\"token punctuation\">,</span> pExportOrdinal<span class=\"token punctuation\">,</span> dwNumOfNames <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t<span class=\"token comment\">// 第四步：复制 AddressOfNames</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t<span class=\"token comment\">/// 长度：NumberOfNames * 4</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t<span class=\"token comment\">// 更新将要拷贝到的地址</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\tPDWORD pNewExportName <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PDWORD<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>pNewExportOrdinal <span class=\"token operator\">+</span> dwNumOfNames <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t<span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>pNewExportName<span class=\"token punctuation\">,</span> pExportName<span class=\"token punctuation\">,</span> dwNumOfNames <span class=\"token operator\">*</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t<span class=\"token comment\">// 第五步：复制所有的函数名</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t<span class=\"token comment\">// 长度不确定，复制时直接修复 AddressOfNames</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t<span class=\"token comment\">// 更新将要拷贝到的地址</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\tPDWORD pNewNameString <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PDWORD<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>pNewExportName <span class=\"token operator\">+</span> dwNumOfNames <span class=\"token operator\">*</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t<span class=\"token keyword\">char</span><span class=\"token operator\">*</span> NameString <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\tDWORD NameSize <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\tPDWORD TMP <span class=\"token operator\">=</span> pNewNameString<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">size_t</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> dwNumOfNames<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t\tNameString <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token function\">RvaToFoa</span><span class=\"token punctuation\">(</span>pExportName<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>pNewBuffer<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>pNewBuffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t\tNameSize <span class=\"token operator\">=</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>NameString<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span><span class=\"token number\">1</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t\t<span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>TMP<span class=\"token punctuation\">,</span> NameString<span class=\"token punctuation\">,</span> NameSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t\tpNewExportName<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">FoaToRva</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>TMP <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>pNewBuffer<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>pNewBuffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t\tTMP <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PDWORD<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>TMP <span class=\"token operator\">+</span> NameSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>\t<span class=\"token comment\">// 第六步：复制 IMAGE_EXPORT_DIRECTORY 结构</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\t<span class=\"token comment\">// 更新将要拷贝到的地址</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\tPIMAGE_EXPORT_DIRECTORY pNewImageExport <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PIMAGE_EXPORT_DIRECTORY<span class=\"token punctuation\">)</span>TMP<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\t<span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>pNewImageExport<span class=\"token punctuation\">,</span> pExportTable<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>IMAGE_EXPORT_DIRECTORY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>\t<span class=\"token comment\">// 第七步：修复 IMAGE_EXPORT_DIRECTORY 结构中的</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\t<span class=\"token comment\">//AddressOfFunctions</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>\t<span class=\"token comment\">//AddressOfNameOrdinals</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>\t<span class=\"token comment\">//AddressOfNames</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>\tpNewImageExport<span class=\"token operator\">-></span>AddressOfFunctions <span class=\"token operator\">=</span> <span class=\"token function\">FoaToRva</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>pNewExportAddress <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>pNewBuffer<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>pNewBuffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>\tpNewImageExport<span class=\"token operator\">-></span>AddressOfNameOrdinals <span class=\"token operator\">=</span> <span class=\"token function\">FoaToRva</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>pNewExportOrdinal <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>pNewBuffer<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>pNewBuffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>\tpNewImageExport<span class=\"token operator\">-></span>AddressOfNames <span class=\"token operator\">=</span> <span class=\"token function\">FoaToRva</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>pNewExportName <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>pNewBuffer<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>pNewBuffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>\t<span class=\"token comment\">// 第八步：修复目录项中的值，指向新的 IMAGE_EXPORT_DIRECTORY</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>\tpOptionHeader<span class=\"token operator\">-></span>DataDirectory<span class=\"token punctuation\">[</span>IMAGE_DIRECTORY_ENTRY_EXPORT<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>VirtualAddress <span class=\"token operator\">=</span> <span class=\"token function\">FoaToRva</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>pNewImageExport <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>pNewBuffer<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>pNewBuffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>\t<span class=\"token comment\">//WritePeFile(pNewBuffer);</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>\t<span class=\"token keyword\">return</span> pNewBuffer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>结果：</p>\n<p><img data-src=\"image002.png\" alt=\"\" /></p>\n<h1 id=\"移动重定位表\"><a class=\"anchor\" href=\"#移动重定位表\">#</a> 移动重定位表</h1>\n<p><img data-src=\"image003.png\" alt=\"\" /></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>LPVOID <span class=\"token function\">MoveReloctionTableToNewSection</span><span class=\"token punctuation\">(</span>LPVOID pFileBuffer<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token comment\">// 在 DLL 中新增一个节</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tLPVOID pNewBuffer <span class=\"token operator\">=</span> <span class=\"token function\">IncreaseSection</span><span class=\"token punctuation\">(</span>pFileBuffer<span class=\"token punctuation\">,</span> <span class=\"token number\">0x10000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tPIMAGE_DOS_HEADER pDosHeader <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PIMAGE_DOS_HEADER<span class=\"token punctuation\">)</span>pNewBuffer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tPIMAGE_NT_HEADERS pNTHeader <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PIMAGE_NT_HEADERS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>pDosHeader <span class=\"token operator\">+</span> pDosHeader<span class=\"token operator\">-></span>e_lfanew<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tPIMAGE_FILE_HEADER pFileHeader <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PIMAGE_FILE_HEADER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>pDosHeader <span class=\"token operator\">+</span> pDosHeader<span class=\"token operator\">-></span>e_lfanew <span class=\"token operator\">+</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tPIMAGE_OPTIONAL_HEADER32 pOptionHeader <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PIMAGE_OPTIONAL_HEADER32<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>pFileHeader <span class=\"token operator\">+</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>IMAGE_FILE_HEADER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tPIMAGE_SECTION_HEADER pSectionHeader <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PIMAGE_SECTION_HEADER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>pOptionHeader <span class=\"token operator\">+</span> pFileHeader<span class=\"token operator\">-></span>SizeOfOptionalHeader<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token comment\">// 定位重定位表</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tPIMAGE_BASE_RELOCATION pRelocationTable <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PIMAGE_BASE_RELOCATION<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token function\">RvaToFoa</span><span class=\"token punctuation\">(</span>pOptionHeader<span class=\"token operator\">-></span>DataDirectory<span class=\"token punctuation\">[</span>IMAGE_DIRECTORY_ENTRY_BASERELOC<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>VirtualAddress<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>pNewBuffer<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>pNewBuffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token comment\">// 修改新增节属性为可读、含已初始化数据</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tpSectionHeader<span class=\"token punctuation\">[</span>pFileHeader<span class=\"token operator\">-></span>NumberOfSections <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>Characteristics <span class=\"token operator\">=</span> <span class=\"token number\">0x40000040</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token comment\">// 计算重定位表的总大小</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tPIMAGE_BASE_RELOCATION TmpReloc <span class=\"token operator\">=</span> pRelocationTable<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\tDWORD dwRelocationTableSize <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>TmpReloc<span class=\"token operator\">-></span>VirtualAddress <span class=\"token operator\">||</span> TmpReloc<span class=\"token operator\">-></span>SizeOfBlock<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\tdwRelocationTableSize <span class=\"token operator\">+=</span> TmpReloc<span class=\"token operator\">-></span>SizeOfBlock<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\tTmpReloc <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PIMAGE_BASE_RELOCATION<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>TmpReloc <span class=\"token operator\">+</span> TmpReloc<span class=\"token operator\">-></span>SizeOfBlock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token comment\">// 定位新增的节的地址 既导出表内容将要拷贝到的地址</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\tDWORD pNewSection <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token function\">RvaToFoa</span><span class=\"token punctuation\">(</span>pSectionHeader<span class=\"token punctuation\">[</span>pFileHeader<span class=\"token operator\">-></span>NumberOfSections <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>VirtualAddress<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>pNewBuffer<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>pNewBuffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>LPVOID<span class=\"token punctuation\">)</span>pNewSection<span class=\"token punctuation\">,</span> pRelocationTable<span class=\"token punctuation\">,</span> dwRelocationTableSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token comment\">// 更新 DataDirectory</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\tpOptionHeader<span class=\"token operator\">-></span>DataDirectory<span class=\"token punctuation\">[</span>IMAGE_DIRECTORY_ENTRY_BASERELOC<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>VirtualAddress <span class=\"token operator\">=</span> <span class=\"token function\">FoaToRva</span><span class=\"token punctuation\">(</span>pNewSection <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>pNewBuffer<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>pNewBuffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token comment\">//WritePeFile(pNewBuffer);</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token keyword\">return</span> pNewBuffer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>PE 工具正常解析：</p>\n<p><img data-src=\"image004.png\" alt=\"\" /></p>\n",
            "tags": [
                "移动导出表",
                "移动重定位表"
            ]
        },
        {
            "id": "https://or0kit.github.io/Bin/WindowsPE/%E9%87%8D%E5%AE%9A%E4%BD%8D%E8%A1%A8/",
            "url": "https://or0kit.github.io/Bin/WindowsPE/%E9%87%8D%E5%AE%9A%E4%BD%8D%E8%A1%A8/",
            "title": "重定位表",
            "date_published": "2021-05-08T13:50:11.000Z",
            "content_html": "<h1 id=\"程序加载的过程\"><a class=\"anchor\" href=\"#程序加载的过程\">#</a> 程序加载的过程</h1>\n<p>程序从 FileBuffer 转换成 ImageBuffer.</p>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<p>特别说明：</p>\n<p>1、由于一般情况.exe 运行时被第一个加载，所以 exe 文件一般没有重定位表，但是不代表所有 exe 都没有重定位表.</p>\n<p>2、为了提高搜索的速度，模块间地址也是要对齐的 模块地址对齐为 10000H 也就是 64K</p>\n<h1 id=\"何为重定位\"><a class=\"anchor\" href=\"#何为重定位\">#</a> 何为重定位</h1>\n<p>重定位的意思就是修正偏移的意思。如一个地址位 0x401234 ,Imagebase = 0x400000 . 那么 RVA 就是 1234.  如果 Imagebase 变了成了 0x300000, 那么修正之后就是 ImageBase + RVA = 0X300000+1234 = 0x301234</p>\n<p>首先我们知道。一个 EXE 文件。会调用很多 DLL (PE) 有多个 PE 文件组成.</p>\n<p>exe 文件启动的基址 (ImageBase) 是 0x40000. 假设我们调用三个 DLL  A B C</p>\n<p>A DLL 在 EXE 展开的基址位置是 0x10000000</p>\n<p>那么恰巧 B DLL 展开的位置也是 0x1000000 两个 DLL 位置展开地方是一样的。那么就出现问题了<br />\n如下图：</p>\n<p><img data-src=\"image002.png\" alt=\"\" /></p>\n<p>这时候操作系统就会给我们进行修正。将 B　DLL 换个内存位置，进行展开。</p>\n<p>如下图: B DLL 从 0x2000000 展开了，规避了使用相同地址</p>\n<p><img data-src=\"image003.png\" alt=\"\" /></p>\n<p>虽然这样解决了入口基址不一样。内存展开不一样。但是我们知道.PE 文件中有很多 RVA .RVA 是相对于 ImageBase 的偏移进行存放的。如果 PE 文件中都是 RVA 那就好办了.</p>\n<p>但是不一定呀.</p>\n<p>打开一个程序，观察一下全局变量的反汇编</p>\n<pre><code class=\"language-s\">00401D58 A1 44 CA 42 00       mov         eax,[x (0042ca44)]\n00401D5D 50                   push        eax\n00401D5E 68 EC 91 42 00       push        offset string &quot;%d\\n&quot; (004291ec)\n00401D63 E8 28 62 00 00       call        printf (00407f90)\n</code></pre>\n<p>编译时生成的地址 = ImageBase + RVA</p>\n<p>这个地址在程序编译完成后，已经写入文件了。</p>\n<p>那假设，程序在加载的时候，没有按照预定的 400000 载入到指定的位置</p>\n<p>但程序执行的时候，仍然会按照 0042ca44 和 004291ec 的地址去使用这个值！</p>\n<p>1、也就是说，如果程序能够按照预定的 ImageBase 来加载的话，那么就不需要重定位表<br />\n这也是为什么 exe 很少有重定位表，而 DLL 大多都有重定位表的原因</p>\n<p>2、一旦某个模块没有按照 ImageBase 进行加载，那么所有类似上面中的地址就都需要修正，否则，引用的地址就是无效的.</p>\n<p>3、一个 EXE 中，需要修正的地方会很多，那我们如何来记录都有哪些地方需要修正呢？</p>\n<p>答案就是重定位表</p>\n<h1 id=\"为什么要用重定位表\"><a class=\"anchor\" href=\"#为什么要用重定位表\">#</a> 为什么要用重定位表</h1>\n<p>上面的例子已经解释的很清楚了，总述一下。</p>\n<p>程序编译时每个模块有一个优先加载地址 ImageBase, 这个值是连接器给出的，因此连接器生成的指令中的地址是在假设模块被加载到 ImageBase 前提之下生成的，那么一旦程序没有将模块加载到 ImageBase 时，那么程序中 的指令地址就需要重新定位。<br />\n例如：假设一个可执行文件，基址是 0x400000, 在这个 image 偏移 0x1234 处是一个指针，指向一个字符串，字符串始于实际地址 0x404002 处，所以指针应该是 0x404002, 加载文件时，由于种种原因，加载器决定把他加载到 0x600000 处，连接器假设的地址和实际的地址之差成为 delta, 上例 delta 为 0x200000，整个位置提高了 0x200000, 那么字符串位置应该为 0x604002, 原来指向字符串的指针就错误了，所以要把 delta 加到指针值中，为了让加载器有这样的能力做调整，可执行文件内含许多个【基址重定位项】，给那些存放指针的位置使用，加载器必须把 delta 加载到各个基址上。<br />\n本例中应该把 0x200000 加给原来的指针值，0x404002, 并将 0x604002 写回原处。</p>\n<h1 id=\"重定位表解析\"><a class=\"anchor\" href=\"#重定位表解析\">#</a> 重定位表解析</h1>\n<h2 id=\"重定位表位置\"><a class=\"anchor\" href=\"#重定位表位置\">#</a> 重定位表位置</h2>\n<p>数据目录项的第 6 个结构，就是重定位表.</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_IMAGE_DATA_DIRECTORY</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    DWORD   VirtualAddress<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    DWORD   Size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span> IMAGE_DATA_DIRECTORY<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>PIMAGE_DATA_DIRECTORY<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 上面 VirtualAddress 存储的地址 指向的就是_IMAGE_BASE_RELOCATION 结构体</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_IMAGE_BASE_RELOCATION</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    DWORD   VirtualAddress<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    DWORD   SizeOfBlock<span class=\"token punctuation\">;</span>          <span class=\"token comment\">// 表示了一个重定位块有多大</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span> IMAGE_BASE_RELOCATION<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">typedef</span> IMAGE_BASE_RELOCATION ，<span class=\"token operator\">*</span> PIMAGE_BASE_RELOCATION<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>看着重定位表就两个成员。其实非常复杂。我们设 VirtualAddress 为 X 设 SizeofBlock 为 Y</p>\n<p>如下图所示，一个格子为 1 个字节.</p>\n<p><img data-src=\"image004.png\" alt=\"\" /></p>\n<p>第一行四个字节为 X, 也就是 Virtualaddress。<br />\n第二行则是 Y，SizeOfBlock 的值。</p>\n<p>我们知道一个 PE 文件需要很多地方进行重定位的。比如记录重定位块多大的 SizeOfBlock 的大小为 16. 也就是两个重定位块，那么第一个重定位表的大小就是如下图</p>\n<p><img data-src=\"image005.png\" alt=\"\" /></p>\n<p>第二个重定位表如果 SzieofBlock 大小为 20 个字节。那么重定位表大小就是 20 个字节</p>\n<p><img data-src=\"image007.png\" alt=\"\" /></p>\n<p>由于重定位表的 SizeOfBlock 大小不确定，新的 Block 的重定位信息的结构体接着上一个 Block4 字节对齐后开始，而当出现一个_IMAGE_BASE_RELOCATION 结构体的值全为 0 时，表明重定位表结束。</p>\n<p><img data-src=\"image008.png\" alt=\"\" /></p>\n<h2 id=\"重定位表的结构\"><a class=\"anchor\" href=\"#重定位表的结构\">#</a> 重定位表的结构</h2>\n<p>在 SizeBlock 后面紧跟着的就是一个 TypeOffset 数组，一个大小是 2 字节，其中高 4 位代表修正的类型，低 12 位是修正的偏移。它的大小与 VirtualAddress 相加就是要修正的 RVA 地址。当出现一个_IMAGE_BASE_RELOCATION 结构体的值全为 0 时，表明重定位表结束。</p>\n<p>TypeOffset 高 4 位的可能取值：</p>\n<p><img data-src=\"image009.png\" alt=\"\" /></p>\n<p>需要首先进行说明的是，重定位表的 RVA 指向的位置是一个数组，里面的元素都是 IMAGE_BASE_RELOCATION，每个 IMAGE_BASE_RELOCATION 只负责 4KB 大小分页内的重定位信息。因此结构中的 VirtualAddress 总是 0x1000 的倍数。</p>\n<p>因为 16 位的二进制数就可以表示一个分页（4KB）的任何位置，而 WORD 恰好就是 16 位</p>\n<p>真正的重定位表结构</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_IMAGE_BASE_RELOCATION</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    DWORD VirtualAddress<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    DWORD SizeOfBlock<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token comment\">//WORD TypeOffset[1];</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span>IMAGE_BASE_RELOCATION<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">struct</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span>   </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    WORD Offset<span class=\"token operator\">:</span><span class=\"token number\">12</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 这是表示 Offset 有 12 位</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    WORD Type<span class=\"token operator\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 这是表示 Type 有 4 位</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span>TypeOffset<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">//Offset: 低 12 位，上面介绍过，它跟 VirtualAddress 相加就是完整的重定位 RVA</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">//Type: 重定位信息的类型，有如下类型:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">IMAGE_REL_BASED_ABSOLUTE</span>              <span class=\"token expression\"><span class=\"token number\">0</span>    </span><span class=\"token comment\">// 无重定位操作，用于 4 字节对齐</span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">IMAGE_REL_BASED_HIGH</span>                  <span class=\"token expression\"><span class=\"token number\">1</span>    </span><span class=\"token comment\">// 重定位指向位置的高 2 个字节需要被修正</span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">IMAGE_REL_BASED_LOW</span>                   <span class=\"token expression\"><span class=\"token number\">2</span>    </span><span class=\"token comment\">// 重定位指向位置的低 2 个字节需要被修正</span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">IMAGE_REL_BASED_HIGHLOW</span>               <span class=\"token expression\"><span class=\"token number\">3</span>    </span><span class=\"token comment\">// 重定位指向位置的全部 4 个字节需要被修正（绝大多数都是这种情况）</span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">IMAGE_REL_BASED_HIGHADJ</span>               <span class=\"token expression\"><span class=\"token number\">4</span>    </span><span class=\"token comment\">// 需要两个 TypeOffset 配合完成索引</span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">IMAGE_REL_BASED_MACHINE_SPECIFIC_5</span>    <span class=\"token expression\"><span class=\"token number\">5</span>    </span><span class=\"token comment\">//...</span></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">IMAGE_REL_BASED_RESERVED</span>              <span class=\"token expression\"><span class=\"token number\">6</span>    </span><span class=\"token comment\">// 保留</span></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">IMAGE_REL_BASED_MACHINE_SPECIFIC_7</span>    <span class=\"token expression\"><span class=\"token number\">7</span>    </span><span class=\"token comment\">//...</span></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">IMAGE_REL_BASED_MACHINE_SPECIFIC_8</span>    <span class=\"token expression\"><span class=\"token number\">8</span>    </span><span class=\"token comment\">//...</span></span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">IMAGE_REL_BASED_MACHINE_SPECIFIC_9</span>    <span class=\"token expression\"><span class=\"token number\">9</span>    </span><span class=\"token comment\">//...</span></span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">IMAGE_REL_BASED_DIR64</span>                 <span class=\"token expression\"><span class=\"token number\">10</span>    </span><span class=\"token comment\">// 重定位指向位置的 8 个字节需要被修正</span></span></pre></td></tr></table></figure><h2 id=\"计算重定位后的地址\"><a class=\"anchor\" href=\"#计算重定位后的地址\">#</a> 计算重定位后的地址</h2>\n<p><code>重定位后的地址 = (加载基址 - ImageBase) + 重定位前的地址</code></p>\n<h2 id=\"定位数据的公式\"><a class=\"anchor\" href=\"#定位数据的公式\">#</a> 定位数据的公式</h2>\n<h3 id=\"需要重定位的数据位置\"><a class=\"anchor\" href=\"#需要重定位的数据位置\">#</a> 需要重定位的数据位置</h3>\n<p>有如下公式：</p>\n<p><code>需要重定位的数据位置 = ImageBase + VirtualAddress + TypeOffset低12位</code></p>\n<p><span class=\"label\">实例</span></p>\n<p><img data-src=\"image010.png\" alt=\"\" /></p>\n<p>如图，其中程序的 ImageBase 是 0x10000000，VirtualAddress 是 0x1000, 低 12 位 Offset 是 0x11F，高四位 Type 是 0x3.</p>\n<p>需要重定位的数据位置 = 0x10000000 + 0x1000 + 0x11F = 0x1000111F</p>\n<h3 id=\"重定位表中记录的重定位信息的个数\"><a class=\"anchor\" href=\"#重定位表中记录的重定位信息的个数\">#</a> 重定位表中记录的重定位信息的个数</h3>\n<p>可以通过下面的公式进行计算：</p>\n<p><code>重定位个数 = (SizeOfBlock - 8(IMAGE_BASE_RELOCATION的大小)) / 2(每个TypeOffset是2个字节)</code> <br />\n <code>总重定位个数 = 所有IMAGE_BASE_RELOCATION结构体相加后的重定位个数</code></p>\n<p>还是以上图为例</p>\n<p>重定位个数 = (0x118 - 8) / 2 = 0x88 = 136 (十进制)</p>\n<h2 id=\"滴水课件\"><a class=\"anchor\" href=\"#滴水课件\">#</a> 滴水课件</h2>\n<p>解析说明：</p>\n<p>1、通过 IMAGE_DATA_DIRECTORY 结构的 VirtualAddress<br />\n 属性 找到第一个 IMAGE_BASE_RELOCATION</p>\n<p>2、判断一共有几块数据：</p>\n<p>最后一个结构的 VirtualAddress 与 SizeOfBlock 都为 0</p>\n<p>3、具体项 宽度：2 字节</p>\n<p>也就是这个数据</p>\n<p>内存中的页大小是 1000H 也就是说 2 的 12 次方 就可以表示<br />\n一个页内所有的偏移地址 具体项的宽度是 16 字节 高四位<br />\n代表类型：值为 3 代表的是需要修改的数据 值为 0 代表的是<br />\n用于数据对齐的数据，可以不用修改。也就是说 我们只关注<br />\n高 4 位的值为 3 的就可以了.</p>\n<p>4、VirtualAddress 宽度：4 字节</p>\n<p>当前这一个块的数据，每一个低 12 位的值 + VirtualAddress 才是<br />\n真正需要修复的数据的 RVA</p>\n<p>真正的 RVA = VirtualAddress + 具体项的低 12 位</p>\n<p>5、SizeOfBlock 宽度：4 字节</p>\n<p>当前块的总大小</p>\n<p>具体项的数量 = (SizeOfBlock - 8)/2</p>\n<h1 id=\"重定位表的利用\"><a class=\"anchor\" href=\"#重定位表的利用\">#</a> 重定位表的利用</h1>\n<ol>\n<li>破解</li>\n</ol>\n<blockquote>\n<p>壳 写加密壳的时候，要先把重定位表移走。数据目录中的表是分散在各个节里的，如果对节进行加密，操作系统找不到表，就无法加载程序。因此加密前要先把表移动到新的节里。</p>\n</blockquote>\n<ol start=\"2\">\n<li>辅助</li>\n</ol>\n<blockquote>\n<p>对抗 HOOK，内核重载时。</p>\n</blockquote>\n<h1 id=\"reference\"><a class=\"anchor\" href=\"#reference\">#</a> Reference</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vaUJpbmFyeS9wLzk3NDI2NzAuaHRtbA==\">https://www.cnblogs.com/iBinary/p/9742670.html</span><br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Fwb2xsb25fa3JqL2FydGljbGUvZGV0YWlscy83NzM3MDQ1Mg==\">https://blog.csdn.net/Apollon_krj/article/details/77370452</span><br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwODkwNzU2L2FydGljbGUvZGV0YWlscy85MDA4MDg4MA==\">https://blog.csdn.net/qq_40890756/article/details/90080880</span><br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3R1dHVjb28vYXJ0aWNsZS9kZXRhaWxzLzgzODI4NzEz\">https://blog.csdn.net/tutucoo/article/details/83828713</span></p>\n",
            "tags": [
                "重定位表"
            ]
        },
        {
            "id": "https://or0kit.github.io/Bin/WindowsPE/%E5%AF%BC%E5%85%A5%E8%A1%A8/",
            "url": "https://or0kit.github.io/Bin/WindowsPE/%E5%AF%BC%E5%85%A5%E8%A1%A8/",
            "title": "导入表",
            "date_published": "2021-05-07T12:23:15.000Z",
            "content_html": "<h1 id=\"定位导入表流程\"><a class=\"anchor\" href=\"#定位导入表流程\">#</a> 定位导入表流程</h1>\n<ol>\n<li>找到扩展 PE 头的最后一个成员 DataDirectory</li>\n<li>获取 DataDirectory [1]</li>\n<li>通过 DataDirectory [1].VirtualAddress 得到导入表的 RVA</li>\n<li>将导出表的 RVA 转换为 FOA，在文件中定位到导入表</li>\n</ol>\n<h1 id=\"导入表的个数\"><a class=\"anchor\" href=\"#导入表的个数\">#</a> 导入表的个数</h1>\n<p>与导出表不同，导入表通常要包含多个模块，而不像导出表只需要提供本 PE 文件需要提供的导出函数即可</p>\n<p>因此，导出表只有一个，但<strong>导入表则可能有多个</strong></p>\n<p>当程序 <strong>运行时</strong> ，需要依赖几个模块，就对应有几张导入表。</p>\n<h1 id=\"导入表的结构\"><a class=\"anchor\" href=\"#导入表的结构\">#</a> 导入表的结构</h1>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_IMAGE_IMPORT_DESCRIPTOR</span> <span class=\"token punctuation\">&#123;</span>\t\t</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">union</span> <span class=\"token punctuation\">&#123;</span>\t\t</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        DWORD   Characteristics<span class=\"token punctuation\">;</span>           \t\t</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        DWORD   OriginalFirstThunk<span class=\"token punctuation\">;</span>         \t\t\t\t\t\t<span class=\"token comment\">//RVA 指向 IMAGE_THUNK_DATA 结构数组</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\t\t</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    DWORD   TimeDateStamp<span class=\"token punctuation\">;</span>               \t\t\t\t\t\t<span class=\"token comment\">// 时间戳</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    DWORD   ForwarderChain<span class=\"token punctuation\">;</span>              \t\t</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    DWORD   Name<span class=\"token punctuation\">;</span>\t\t\t\t\t\t<span class=\"token comment\">//RVA, 指向 dll 名字，该名字已 0 结尾</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    DWORD   FirstThunk<span class=\"token punctuation\">;</span>                 \t\t\t\t\t\t<span class=\"token comment\">//RVA, 指向 IMAGE_THUNK_DATA 结构数组</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span> IMAGE_IMPORT_DESCRIPTOR<span class=\"token punctuation\">;</span>\t\t</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">typedef</span> IMAGE_IMPORT_DESCRIPTOR UNALIGNED <span class=\"token operator\">*</span>PIMAGE_IMPORT_DESCRIPTOR<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><code>Characteristics</code> ：如果这个表是数组的最后一个则为 0，否则  <code>OriginalFirstThunk</code>  保存一个入口点地址，指向一个  <code>IMAGE_THUNK_DATA</code>  数组。</p>\n<h2 id=\"结构体分析\"><a class=\"anchor\" href=\"#结构体分析\">#</a> 结构体分析</h2>\n<table>\n<thead>\n<tr>\n<th>成员</th>\n<th>数据宽度</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Characteristics</td>\n<td>DWORD (4 字节)</td>\n<td>标志 为 0 表示结束 没有导入描述符了</td>\n</tr>\n<tr>\n<td>OriginalFirstThunk</td>\n<td>DWORD (4 字节)</td>\n<td>RVA 指向 IMAGE_THUNK_DATA 结构数组 (桥 1)</td>\n</tr>\n<tr>\n<td>TimeDateStamp</td>\n<td>DWORD (4 字节)</td>\n<td>时间戳</td>\n</tr>\n<tr>\n<td>ForwarderChain</td>\n<td>DWORD (4 字节)</td>\n<td>链表的前一个结构</td>\n</tr>\n<tr>\n<td>Name</td>\n<td>DWORD (4 字节)</td>\n<td>RVA，指向 DLL 名字，该名字以 ''\\0'' 结尾</td>\n</tr>\n<tr>\n<td>FirstThunk</td>\n<td>DWORD (4 字节)</td>\n<td>RVA 指向 IMAGE_THUNK_DATA 结构数组 (桥 2)</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"characteristics\"><a class=\"anchor\" href=\"#characteristics\">#</a> Characteristics</h3>\n<p>标志 为 0 表示结束 没有导入描述符了</p>\n<h3 id=\"originalfirstthunk\"><a class=\"anchor\" href=\"#originalfirstthunk\">#</a> OriginalFirstThunk</h3>\n<h4 id=\"image_thunk_data结构\"><a class=\"anchor\" href=\"#image_thunk_data结构\">#</a> IMAGE_THUNK_DATA 结构</h4>\n<p>在介绍  <code>OriginalFirstThunk</code>  之前，要先了解一下  <code>OriginalFirstThunk</code>  和  <code>FirstThunk</code>  所指向的结构数组</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">_WIN64</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    …</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">typedef</span> IMAGE_THUNK_DATA64              IMAGE_THUNK_DATA<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">typedef</span> PIMAGE_THUNK_DATA64             PIMAGE_THUNK_DATA<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    …</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">else</span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    …</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">typedef</span> IMAGE_THUNK_DATA32              IMAGE_THUNK_DATA<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">typedef</span> PIMAGE_THUNK_DATA32             PIMAGE_THUNK_DATA<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    …</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_IMAGE_THUNK_DATA64</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">union</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        ULONGLONG ForwarderString<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// PBYTE </span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        ULONGLONG Function<span class=\"token punctuation\">;</span>         <span class=\"token comment\">// PDWORD</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        ULONGLONG Ordinal<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        ULONGLONG AddressOfData<span class=\"token punctuation\">;</span>    <span class=\"token comment\">// PIMAGE_IMPORT_BY_NAME</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> u1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span> IMAGE_THUNK_DATA64<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">typedef</span> IMAGE_THUNK_DATA64 <span class=\"token operator\">*</span> PIMAGE_THUNK_DATA64<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_IMAGE_THUNK_DATA32</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">union</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        DWORD ForwarderString<span class=\"token punctuation\">;</span>      <span class=\"token comment\">// PBYTE </span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        DWORD Function<span class=\"token punctuation\">;</span>             <span class=\"token comment\">// PDWORD</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        DWORD Ordinal<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        DWORD AddressOfData<span class=\"token punctuation\">;</span>        <span class=\"token comment\">// PIMAGE_IMPORT_BY_NAME</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> u1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span> IMAGE_THUNK_DATA32<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token keyword\">typedef</span> IMAGE_THUNK_DATA32 <span class=\"token operator\">*</span> PIMAGE_THUNK_DATA32<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><code>IMAGE_THUNK_DATA</code>  是一个 4 字节的数据，如果最高位是 1，那么低 31 位就是函数的导出序号；<br />\n如果最高位是 0，那么它的值是一个 RVA，指向一个  <code>IMAGE_IMPORT_BY_NAME</code>  结构。</p>\n<p><img data-src=\"image007.png\" alt=\"\" /></p>\n<p>指向的数组中每一项为一个结构，此结构名称是  <code>IMAGE_THUNK_DATA</code></p>\n<p><strong>数组最后以一个内容全为 0 的 IMAGE_THUNK_DATA 作为结束</strong></p>\n<p><code>IMAGE_THUNK_DATA</code>  实际上只是一个  <code>DWORD</code> ，但在不同的时刻却拥有不同的解释</p>\n<p>IMAGE_THUNK_DATA 有两种解释：</p>\n<ul>\n<li>DWORD 最高位为 0，那么该数值是一个 RVA，指向_IMAGE_IMPORT_BY_NAME 结构，表明函数是以<strong>字符串类型的函数名导入的</strong></li>\n<li>DWORD 最高位为 1，那么该数值的低 31 位就是函数的<strong>导出函数的序号</strong></li>\n</ul>\n<p>_IMAGE_IMPORT_BY_NAME 结构：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_IMAGE_IMPORT_BY_NAME</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    WORD    Hint<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    BYTE    Name<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span> IMAGE_IMPORT_BY_NAME<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>PIMAGE_IMPORT_BY_NAME<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>其中低地址的  <code>Hint</code>  是导出序号，然而这个值可能并不准确，有些编译器会把它设置成 0，我们只需要关注  <code>Name</code> ，这个是一个以长度不定，以  <code>\\0</code>  结尾字符串，表示函数名。</p>\n<hr />\n<blockquote>\n<p>这里不难发现，IMAGE_THUNK_DATA 最终提供的数据也只有 2 个：</p>\n</blockquote>\n<ul>\n<li>DWORD 最高位为 0 时：需要导入函数的名称（Hint 不一定准确，所以不使用）</li>\n<li>DWORD 最高位为 1 时：需要导入的函数在导出表中的序号</li>\n</ul>\n<p>正好对应了在<strong>导出表</strong>中获得导出函数所需的两种方法：</p>\n<ol>\n<li>根据函数名称获取导出函数地址</li>\n<li>根据函数序号获取导出函数地址</li>\n</ol>\n<h3 id=\"originalfirstthunk-2\"><a class=\"anchor\" href=\"#originalfirstthunk-2\">#</a> OriginalFirstThunk</h3>\n<p>因为它是指向另外数据结构的通路，因此简称为桥 1。该字段指向一个包含了一系列结构的数组：IMAGE_THUNK_DATA</p>\n<p>桥 1 所指向的地址列表被定义为： <strong>INT</strong> （Import Name Table） 导入名称表</p>\n<hr />\n<h3 id=\"timedatestamp\"><a class=\"anchor\" href=\"#timedatestamp\">#</a> TimeDateStamp</h3>\n<p>时间戳，一般不用，大多情况下都为 0。如果该导入表项被绑定，那么绑定后的这个时间戳就被设置为对应 DLL 文件的时间戳。操作系统在加载时，可以通过这个时间戳来判断绑定的信息是否过时</p>\n<hr />\n<h3 id=\"forwarderchain\"><a class=\"anchor\" href=\"#forwarderchain\">#</a> ForwarderChain</h3>\n<p>链表的前一个结构</p>\n<hr />\n<h3 id=\"name\"><a class=\"anchor\" href=\"#name\">#</a> Name</h3>\n<p>这里的 Name 是一个 RVA，它指向该结构对应的 DLL 文件的名称，而这个名称是以 &quot;\\0&quot; 结尾的 ANSI 字符串</p>\n<p>ANSI 编码是一种对 ASCII 码的拓展</p>\n<hr />\n<h3 id=\"firstthunk\"><a class=\"anchor\" href=\"#firstthunk\">#</a> FirstThunk</h3>\n<p>与 OriginalFirstThunk 相同，它指向的链表定义了针对 Name 这个动态链接库引入的所有导入函数，简称桥 2</p>\n<p>桥 2 所指向的地址列表被定义为： <strong>IAT</strong> （Import Adress Table） 导入地址表</p>\n<h2 id=\"导入表的双桥结构\"><a class=\"anchor\" href=\"#导入表的双桥结构\">#</a> 导入表的双桥结构</h2>\n<p>桥 1 和桥 2 最终的目的地是一致的，都指向了引入函数的 &quot;编号 — 名称&quot;（Hint/Name）描述部分</p>\n<p>桥 1 到目的地的过程中，经过了：INT（Import Name Table）导入名称表</p>\n<p>而桥 2 到目的地的过程中，经过了：IAT (Import Address Table) 导入地址表</p>\n<h3 id=\"pe文件加载前后对比\"><a class=\"anchor\" href=\"#pe文件加载前后对比\">#</a> PE 文件加载前后对比</h3>\n<p><strong>PE 文件加载前</strong></p>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<p><img data-src=\"image002.png\" alt=\"\" /></p>\n<p><strong>PE 文件加载后</strong></p>\n<p><img data-src=\"image003.png\" alt=\"\" /></p>\n<p><img data-src=\"image004.png\" alt=\"\" /></p>\n<blockquote>\n<p>滴水课件中的图解</p>\n</blockquote>\n<p><strong>PE 文件加载前</strong></p>\n<p><img data-src=\"image005.png\" alt=\"\" /></p>\n<p><strong>PE 文件加载后</strong></p>\n<p><img data-src=\"image006.png\" alt=\"\" /></p>\n<p>结论：</p>\n<ul>\n<li>在 PE 文件加载前：桥 1 指向的 INT 和桥 2 指向的 IAT 的数据值是<strong>相同</strong>的，但是其<strong>存储位置是不同的</strong></li>\n<li>在 PE 文件加载后：桥 1 指向的 INT <strong>不变</strong> ，但桥 2 指向的 IAT 的数据值<strong>变为了函数相应的 RVA 地址</strong></li>\n</ul>\n<p>PS：函数相应的 RVA 地址是根据原本 IAT 中的函数名称去一一寻找其他模块的导出表获取的。</p>\n<p>英语单词：<br />\n <code>Thunk 英 /θʌŋk/ [计算机科学技术] 形实转换程序、形实替换程序、形实转换程序、替换程式</code></p>\n<h2 id=\"iat-表\"><a class=\"anchor\" href=\"#iat-表\">#</a> IAT 表</h2>\n<p>PE 文件运行之前在文件中的时候，IAT 表和 INT 表一样，里面存储的要么是函数名，要么是导出序号。加载的时候操作系统会把 IAT 表里的值修改成函数真正在 DLL 中的地址，具体步骤是：操作系统首先将 exe 和所有 dll 加载到 4GB 虚拟内存中，然后遍历导入表，根据 DLL 名字调用 LoadLibrary 获取模块句柄 HMODULE，然后调用 GetProcAddress 获取函数地址，然后将函数地址写入到 IAT 表里。</p>\n<h1 id=\"代码解析导入表\"><a class=\"anchor\" href=\"#代码解析导入表\">#</a> 代码解析导入表</h1>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">PrintImportTable</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> pBuffer<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    PIMAGE_DOS_HEADER pDosHeader <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//DOS 头 指针</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    PIMAGE_NT_HEADERS32 pNtHeader <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//NT 头 指针</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    PIMAGE_FILE_HEADER pFileHeader <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 文件头 指针</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    PIMAGE_OPTIONAL_HEADER pOptionHeader <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 可选头 指针</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    PIMAGE_DATA_DIRECTORY pDirectory <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 数据目录 指针</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    PIMAGE_IMPORT_DESCRIPTOR pImportDesctory <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 导出表 指针</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token class-name\">size_t</span> MoudleNum <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 导入表中的模块数目</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    PIMAGE_THUNK_DATA pImageThunkFoa <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                      pImageThunkRva <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                      pIAT           <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 指向 IMAGE_THUNK_DATA</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    PIMAGE_IMPORT_BY_NAME pIBN <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 按名字导出</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">// 定位导入表的位置</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    pDosHeader <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PIMAGE_DOS_HEADER<span class=\"token punctuation\">)</span>pBuffer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    pNtHeader <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PIMAGE_NT_HEADERS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>pDosHeader<span class=\"token operator\">-></span>e_lfanew <span class=\"token operator\">+</span> pBuffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    pFileHeader <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PIMAGE_FILE_HEADER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>pNtHeader <span class=\"token operator\">+</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    pOptionHeader <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PIMAGE_OPTIONAL_HEADER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>pFileHeader <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>IMAGE_SIZEOF_FILE_HEADER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    pDirectory <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PIMAGE_DATA_DIRECTORY<span class=\"token punctuation\">)</span>pOptionHeader<span class=\"token operator\">-></span>DataDirectory<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    pImportDesctory <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PIMAGE_IMPORT_DESCRIPTOR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token function\">RvaToFoa</span><span class=\"token punctuation\">(</span>pDirectory<span class=\"token punctuation\">[</span>IMAGE_DIRECTORY_ENTRY_IMPORT<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>VirtualAddress<span class=\"token punctuation\">,</span> pBuffer<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>pBuffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token comment\">// 计算导出模块数目。减一是不算上最后一个全为 0 的导入表</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    MoudleNum <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>pDirectory<span class=\"token punctuation\">[</span>IMAGE_DIRECTORY_ENTRY_IMPORT<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>Size <span class=\"token operator\">/</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>IMAGE_IMPORT_DESCRIPTOR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"导入模块数目：%d\\r\\n\"</span><span class=\"token punctuation\">,</span> MoudleNum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token comment\">// 解析导出表 --INT 表</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">size_t</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> MoudleNum<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token comment\">//printf (\"查看标志 (Characteristics) 是否有值：%#010X\\r\\n\",(pImportDesctory + i)->Characteristics);</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\r\\n\\n&lt;&lt;----------模块名字(Name)：%s\\---------->>\\r\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">RvaToFoa</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>pImportDesctory <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>Name<span class=\"token punctuation\">,</span> pBuffer<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>pBuffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        pImageThunkRva <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PIMAGE_THUNK_DATA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>pImportDesctory <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>OriginalFirstThunk<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"(OriginalFirstThunk)(RVA)的值:%#010X\\r\\n\"</span><span class=\"token punctuation\">,</span> pImageThunkRva<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"时间戳(TimeDateStamp):%#010X\\r\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>pImportDesctory <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>TimeDateStamp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"上一个链表(ForwarderChain):%#010X\\r\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>pImportDesctory <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>ForwarderChain<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"(FirstThunk)(RVA):%#010X\\r\\n\\n\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>pImportDesctory <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>FirstThunk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        pImageThunkFoa <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PIMAGE_THUNK_DATA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token function\">RvaToFoa</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>pImportDesctory <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>OriginalFirstThunk<span class=\"token punctuation\">,</span> pBuffer<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>pBuffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;&lt;----------解析导入模块[%s]中的INT表---------->>\\r\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">RvaToFoa</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>pImportDesctory <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>Name<span class=\"token punctuation\">,</span> pBuffer<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>pBuffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>PDWORD<span class=\"token punctuation\">)</span>pImageThunkFoa<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            <span class=\"token comment\">// IMAGE_THUNK_DATA32 是一个 4 字节数据</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            <span class=\"token comment\">// 如果最高位是 1，那么除去最高位就是导出序号</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>            <span class=\"token comment\">// 如果最高位是 0，那么这个值是 RVA 指向 IMAGE_IMPORT_BY_NAME</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>PDWORD<span class=\"token punctuation\">)</span>pImageThunkFoa<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x80000000</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0x80000000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;&lt;-按序号导入->> Ordinal:[%#06X]\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>PDWORD<span class=\"token punctuation\">)</span>pImageThunkFoa<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x7FFFFFFF</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>            <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>                pIBN <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PIMAGE_IMPORT_BY_NAME<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token function\">RvaToFoa</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>PDWORD<span class=\"token punctuation\">)</span>pImageThunkFoa<span class=\"token punctuation\">,</span> pBuffer<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>pBuffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>                <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;&lt;-按名字导入->>Hint:[%#06X] Name:[%s]\\n\"</span><span class=\"token punctuation\">,</span> pIBN<span class=\"token operator\">-></span>Hint<span class=\"token punctuation\">,</span> pIBN<span class=\"token operator\">-></span>Name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>            pImageThunkFoa<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        pIAT <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PIMAGE_THUNK_DATA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token function\">RvaToFoa</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>pImportDesctory <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>FirstThunk<span class=\"token punctuation\">,</span> pBuffer<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>pBuffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;&lt;----------解析导入模块[%s]中的IAT表---------->>\\r\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">RvaToFoa</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>pImportDesctory <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>Name<span class=\"token punctuation\">,</span> pBuffer<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>pBuffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>PDWORD<span class=\"token punctuation\">)</span>pIAT<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>            <span class=\"token comment\">// IMAGE_THUNK_DATA32 是一个 4 字节数据</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>            <span class=\"token comment\">// 如果最高位是 1，那么除去最高位就是导出序号</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>            <span class=\"token comment\">// 如果最高位是 0，那么这个值是 RVA 指向 IMAGE_IMPORT_BY_NAME</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>PDWORD<span class=\"token punctuation\">)</span>pIAT<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x80000000</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0x80000000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>                <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;&lt;-按序号导入->> Ordinal:[%#06X]\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>PDWORD<span class=\"token punctuation\">)</span>pIAT<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x7FFFFFFF</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>            <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>                pIBN <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PIMAGE_IMPORT_BY_NAME<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token function\">RvaToFoa</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>PDWORD<span class=\"token punctuation\">)</span>pIAT<span class=\"token punctuation\">,</span> pBuffer<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>pBuffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>                <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;&lt;-按名字导入->>Hint:[%#06X] Name:[%s]\\n\"</span><span class=\"token punctuation\">,</span> pIBN<span class=\"token operator\">-></span>Hint<span class=\"token punctuation\">,</span> pIBN<span class=\"token operator\">-></span>Name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>            pIAT<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>此函数仅解析了 INT 表，IAT 表暂时没有解析，不过都一样的，改一下就好了。</p>\n<h1 id=\"reference\"><a class=\"anchor\" href=\"#reference\">#</a> Reference</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuNTJwb2ppZS5jbi90aHJlYWQtMTQxMzIyMC0xLTEuaHRtbA==\">https://www.52pojie.cn/thread-1413220-1-1.html</span><br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0t3YW5zeS9hcnRpY2xlL2RldGFpbHMvMTA2MjY5NzU3\">https://blog.csdn.net/Kwansy/article/details/106269757</span></p>\n",
            "tags": [
                "导入表"
            ]
        },
        {
            "id": "https://or0kit.github.io/Bin/WindowsPE/%E5%AF%BC%E5%87%BA%E8%A1%A8/",
            "url": "https://or0kit.github.io/Bin/WindowsPE/%E5%AF%BC%E5%87%BA%E8%A1%A8/",
            "title": "导出表",
            "date_published": "2021-05-07T12:23:07.000Z",
            "content_html": "<h1 id=\"如何定位导出表\"><a class=\"anchor\" href=\"#如何定位导出表\">#</a> 如何定位导出表：</h1>\n<p>数据目录项的第一个结构，就是导出表.</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_IMAGE_DATA_DIRECTORY</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    DWORD   VirtualAddress<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    DWORD   Size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span> IMAGE_DATA_DIRECTORY<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>PIMAGE_DATA_DIRECTORY<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">//VirtualAddress  导出表的 RVA</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">//Size 导出表大小</span></pre></td></tr></table></figure><h1 id=\"导出表结构\"><a class=\"anchor\" href=\"#导出表结构\">#</a> 导出表结构</h1>\n<p>上面的结构，只是说明导出表在哪里，有多大，并不是真正的导出表.</p>\n<p>如何在 FileBuffer 中找到这个结构呢？在 VirtualAddress 中存储的是 RVA, 如果想在 FileBuffer 中定位</p>\n<p>必须要先将该 RVA 转换成 FOA.</p>\n<p>真正的导出表结构如下：</p>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<ol>\n<li>由函数名字导出函数地址流程</li>\n</ol>\n<blockquote>\n<p>例如：函数名字为<strong> test</strong>，先查找 AddressOfNames (导出函数名称表)，这里面存储的是<strong>指向</strong>每个拥有名字的函数的函数名字的<strong> RVA</strong>, 如果表中索引为<strong> 2</strong> 的地址指向的是函数名字，那么就会用这个<strong> 2</strong> 查找 AddressOfNameOrdinals (导出函数序号表) 中索引为 2 的值，如果这个值为<strong> 4</strong>，则会在 AddressOfFunctions (导出函数地址表中) 查找索引为<strong> 4</strong> 的值，这个值就是函数地址的 RVA。此过程可逆。</p>\n</blockquote>\n<ol start=\"2\">\n<li>由序号导出函数地址流程</li>\n</ol>\n<blockquote>\n<p>如果这个序号是<strong> 10</strong>，则直接用<strong> 10</strong> 减去<strong> Base</strong> 得到一个值，这个值就是 AddressOfFunctions (导出函数地址表中) 中的索引，其对应的值就是函数地址的 RVA。</p>\n</blockquote>\n<p><strong>导出序号表中的值加上 Base 就是 dll 或其他 PE 文件中的导出序号了。</strong></p>\n<p>其中 Name 指向的字符串是以 00 结尾的。<br />\nExport Table 的偏移量为： <code>e_lfanew+0x078</code> <br />\nNumberOfFunction 的值并不准确，它的计算结果为： <code>最大的导出序号值减去最小的导出序号值然后再加一</code></p>\n<h1 id=\"addressoffunctions说明\"><a class=\"anchor\" href=\"#addressoffunctions说明\">#</a> AddressOfFunctions 说明：</h1>\n<p>该表中元素宽度为 4 个字节</p>\n<p>该表中存储所有导出函数的地址</p>\n<p>该表中个数由 NumberOfFunctions 决定</p>\n<p>该表项中的值是 RVA, 加上 ImageBase 才是函数真正的地址</p>\n<p>定位：</p>\n<p>IMAGE_EXPORT_DIRECTORY-&gt;AddressOfFunctions 中存储的是该表的 RVA 需要先转换成 FOA</p>\n<h1 id=\"addressofnames说明\"><a class=\"anchor\" href=\"#addressofnames说明\">#</a> AddressOfNames 说明：</h1>\n<p>该表中元素宽度为 4 个字节</p>\n<p>该表中存储所有以名字导出函数的名字的 RVA</p>\n<p>该表项中的值是 RVA, 指向函数真正的名称</p>\n<p><img data-src=\"image002.png\" alt=\"\" /></p>\n<h1 id=\"addressofnameordinals\"><a class=\"anchor\" href=\"#addressofnameordinals\">#</a> AddressOfNameOrdinals</h1>\n<p><img data-src=\"image003.png\" alt=\"\" /></p>\n<h1 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结：</h1>\n<p>为什么要分成 3 张表？</p>\n<p>1、函数导出的个数与函数名的个数未必一样。所以要将函数地址表和函数名称表分开.</p>\n<p>2、函数地址表是不是一定大于函数名称表？</p>\n<p>未必，一个相同的函数地址，可能有多个不同的名字.</p>\n<p>3、如何根据函数的名字获取一个函数的地址？</p>\n<p><img data-src=\"image004.png\" alt=\"\" /></p>\n<p>4、如何根据函数的导出序号获取一个函数的地址？</p>\n<p><img data-src=\"image005.png\" alt=\"\" /></p>\n<h1 id=\"记一次查找导出表的过程\"><a class=\"anchor\" href=\"#记一次查找导出表的过程\">#</a> 记一次查找导出表的过程</h1>\n<p>以滴水教程中的 DLL 为例。</p>\n<h2 id=\"查看sectionalignment和filealignment的值\"><a class=\"anchor\" href=\"#查看sectionalignment和filealignment的值\">#</a> 查看 SectionAlignment 和 FileAlignment 的值</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>SectionAlignment：           <span class=\"token punctuation\">[</span>地址<span class=\"token punctuation\">(</span>RAW<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token number\">0x00000118</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>长度<span class=\"token operator\">:</span><span class=\"token number\">04</span>h<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>偏移量<span class=\"token operator\">:</span>e_lfanew<span class=\"token operator\">+</span><span class=\"token number\">0x38</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>数据<span class=\"token operator\">:</span><span class=\"token number\">0x00001000</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>内存中的节<span class=\"token punctuation\">(</span>块<span class=\"token string\">\"Section\"</span><span class=\"token punctuation\">)</span>的对齐值<span class=\"token punctuation\">,</span>常为<span class=\"token operator\">:</span><span class=\"token number\">0x1000</span>或<span class=\"token number\">0x04.</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>FileAlignment：              <span class=\"token punctuation\">[</span>地址<span class=\"token punctuation\">(</span>RAW<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token number\">0x0000011c</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>长度<span class=\"token operator\">:</span><span class=\"token number\">04</span>h<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>偏移量<span class=\"token operator\">:</span>e_lfanew<span class=\"token operator\">+</span><span class=\"token number\">0x3C</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>数据<span class=\"token operator\">:</span><span class=\"token number\">0x00001000</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>文件中的节<span class=\"token punctuation\">(</span>块<span class=\"token string\">\"Section\"</span><span class=\"token punctuation\">)</span>的对齐值<span class=\"token punctuation\">,</span>常为<span class=\"token operator\">:</span><span class=\"token number\">0x1000</span>或<span class=\"token number\">0x200</span>或<span class=\"token number\">0x04.</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p><img data-src=\"image006.png\" alt=\"\" /></p>\n<p>发现都是 <code>0x1000</code> 。</p>\n<h2 id=\"查找导出表\"><a class=\"anchor\" href=\"#查找导出表\">#</a> 查找导出表</h2>\n<p>查找数据目录中第一个结构体的位置</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>成员<span class=\"token punctuation\">]</span>             <span class=\"token punctuation\">[</span>地址<span class=\"token punctuation\">(</span>RAW<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\t       <span class=\"token punctuation\">[</span>偏移量<span class=\"token punctuation\">]</span>         <span class=\"token punctuation\">[</span>数据<span class=\"token operator\">:</span>RVA<span class=\"token punctuation\">]</span>       <span class=\"token punctuation\">[</span>大小<span class=\"token punctuation\">]</span>         <span class=\"token punctuation\">[</span>说明<span class=\"token punctuation\">]</span>                   <span class=\"token punctuation\">[</span>结构<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Export Table：              <span class=\"token number\">0x00000158</span>     <span class=\"token punctuation\">[</span>e_lfanew<span class=\"token operator\">+</span><span class=\"token number\">0x078</span><span class=\"token punctuation\">]</span>     <span class=\"token number\">0x0002DF10</span>     <span class=\"token number\">0x00000196</span>     <span class=\"token punctuation\">[</span> 导出表 <span class=\"token punctuation\">]</span>     <span class=\"token punctuation\">[</span>IMAGE_DIRECTORY_ENTRY_EXPORT<span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p>可以看到导出表的位置为 0x0002DF10，大小为 0x196<br />\n<img data-src=\"image007.png\" alt=\"\" /></p>\n<h2 id=\"分析导出表信息\"><a class=\"anchor\" href=\"#分析导出表信息\">#</a> 分析导出表信息</h2>\n<pre><code>0002DF10:  00 00 00 00 FD F8 94 60 00 00 00 00 60 DF 02 00  .....`....`?.\n0002DF20:  01 00 00 00 04 00 00 00 04 00 00 00 38 DF 02 00  ............8?.\n0002DF30:  48 DF 02 00 58 DF 02 00 14 10 00 00 0F 10 00 00  H?.X?.........\n0002DF40:  0A 10 00 00 05 10 00 00 70 DF 02 00 77 DF 02 00  ........p?.w?.\n0002DF50:  7E DF 02 00 86 DF 02 00 00 00 01 00 02 00 03 00  ~?..?.........\n0002DF60:  32 30 32 31 5F 30 35 5F 30 37 33 2E 64 6C 6C 00  2021_05_073.dll.\n0002DF70:  5F 44 69 76 40 38 00 5F 4D 75 6C 40 38 00 5F 50  _Div@8._Mul@8._P\n0002DF80:  6C 75 73 40 38 00 5F 53 75 62 40 38 00 00 00 00  lus@8._Sub@8....\n0002DF90:  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................\n0002DFA0:  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................\n0002DFB0:  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................\n0002DFC0:  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................\n0002DFD0:  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................\n0002DFE0:  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................\n0002DFF0:  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................\n0002E000:  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................\n0002E010:  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................\n0002E020:  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................\n0002E030:  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................\n0002E040:  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................\n0002E050:  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................\n0002E060:  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................\n0002E070:  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................\n0002E080:  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................\n0002E090:  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................\n0002E0A0:  00 00 00 00 00 00                                ......          \n</code></pre>\n<p>数据</p>\n<pre><code>-&gt;Export Table\n   Characteristics:        0x00000000\n   TimeDateStamp:          0x6094F8FD  (GMT: Fri May 07 08:23:25 2021)\n   MajorVersion:           0x0000\n   MinorVersion:           0x0000  -&gt; 0.00\n   Name:                   0x0002DF60  (&quot;2021_05_073.dll&quot;)\n   Base:                   0x00000001\n   NumberOfFunctions:      0x00000004\n   NumberOfNames:          0x00000004\n   AddressOfFunctions:     0x0002DF38\n   AddressOfNames:         0x0002DF48\n   AddressOfNameOrdinals:  0x0002DF58\n\n   Ordinal RVA        Symbol Name\n   ------- ---------- ----------------------------------\n   0x0001  0x00001014 &quot;_Div@8&quot;\n   0x0002  0x0000100F &quot;_Mul@8&quot;\n   0x0003  0x0000100A &quot;_Plus@8&quot;\n   0x0004  0x00001005 &quot;_Sub@8&quot;\n</code></pre>\n",
            "tags": [
                "导出表"
            ]
        },
        {
            "id": "https://or0kit.github.io/Bin/WindowsPE/%E9%9D%99%E6%80%81%E3%80%81%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5%E5%BA%93%E3%80%81%E5%8F%A5%E6%9F%84/",
            "url": "https://or0kit.github.io/Bin/WindowsPE/%E9%9D%99%E6%80%81%E3%80%81%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5%E5%BA%93%E3%80%81%E5%8F%A5%E6%9F%84/",
            "title": "静态、动态链接库、句柄",
            "date_published": "2021-05-06T06:23:36.000Z",
            "content_html": "<h1 id=\"库的介绍\"><a class=\"anchor\" href=\"#库的介绍\">#</a> 库的介绍</h1>\n<p>库是写好的现有的，成熟的，可以复用的代码。现实中每个程序都要依赖很多基础的底层库，不可能每个人的代码都从零开始，因此库的存在意义非同寻常。</p>\n<p>本质上来说库是一种可执行代码的二进制形式，可以被操作系统载入内存执行。<br />\n库有两种：静态库（.a、.lib）和动态库（.so、.dll）<br />\nwindows 上对应的是.lib .dll<br />\nlinux 上对应的是.a .so</p>\n<p>超详细内容:<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20va2luZy1scHMvcC83NzU3OTE5Lmh0bWw=\">https://www.cnblogs.com/king-lps/p/7757919.html</span></p>\n<h1 id=\"代码复用的实现\"><a class=\"anchor\" href=\"#代码复用的实现\">#</a> 代码复用的实现</h1>\n<ol>\n<li>\n<p>静态链接库</p>\n</li>\n<li>\n<p>动态链接库</p>\n</li>\n<li>\n<p>使用.def 导出</p>\n</li>\n</ol>\n<h1 id=\"静态链接库\"><a class=\"anchor\" href=\"#静态链接库\">#</a> 静态链接库</h1>\n<p>例子为滴水逆向教程中的。</p>\n<h2 id=\"vc60创建静态链接库\"><a class=\"anchor\" href=\"#vc60创建静态链接库\">#</a> VC6.0 创建静态链接库</h2>\n<ol>\n<li>在 VC6 中创建项目：Win32 Static Library</li>\n</ol>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<ol start=\"2\">\n<li>在项目中创建两个文件：xxx.h 和 xxx.cpp</li>\n</ol>\n<p>xxx.h 文件：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\"><span class=\"token operator\">!</span><span class=\"token function\">defined</span><span class=\"token punctuation\">(</span>AFX_TEST_H__DB32E837_3E66_4BE7_B873_C079BC621AF0__INCLUDED_<span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">AFX_TEST_H__DB32E837_3E66_4BE7_B873_C079BC621AF0__INCLUDED_</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\">_MSC_VER <span class=\"token operator\">></span> <span class=\"token number\">1000</span></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\">once</span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span> <span class=\"token comment\">// _MSC_VER > 1000</span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">Plus</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">Sub</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">Mul</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">Div</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr></table></figure><p>xxx.cpp 文件：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">Plus</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">return</span> x<span class=\"token operator\">+</span>y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">Sub</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">return</span> x<span class=\"token operator\">-</span>y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">Mul</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">return</span> x<span class=\"token operator\">*</span>y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">Div</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token keyword\">return</span> x<span class=\"token operator\">/</span>y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>编译</li>\n</ol>\n<h2 id=\"使用静态链接库\"><a class=\"anchor\" href=\"#使用静态链接库\">#</a> 使用静态链接库</h2>\n<p>方式一：</p>\n<p>将 xxx.h 和 xxx.lib 复制到要使用的项目中</p>\n<p><img data-src=\"image003.png\" alt=\"\" /></p>\n<p>在需要使用的文件中包含：#include &quot;xxx.h&quot;</p>\n<p>在需要使用的文件中包含：#pragma comment (lib, &quot;xxx.lib&quot;)</p>\n<p><img data-src=\"image004.png\" alt=\"\" /></p>\n<p>方式二：</p>\n<p>将 xxx.h 和 xxx.lib 复制到要使用的项目中</p>\n<p>在需要使用的文件中包含：#include &quot;xxx.h&quot;</p>\n<p>需要让编译器自己 LINK&quot;lib 库&quot;<br />\n<img data-src=\"image005.png\" alt=\"\" /><br />\n<img data-src=\"image006.png\" alt=\"\" /><br />\n<img data-src=\"image007.png\" alt=\"\" /></p>\n<h1 id=\"动态链接库\"><a class=\"anchor\" href=\"#动态链接库\">#</a> 动态链接库</h1>\n<h2 id=\"创建dll\"><a class=\"anchor\" href=\"#创建dll\">#</a> 创建 DLL</h2>\n<ol>\n<li>\n<p>在 VC6 中创建项目：win32 Dynamic-link library</p>\n</li>\n<li>\n<p>源文件中：</p>\n</li>\n</ol>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> __stdcall <span class=\"token function\">Plus</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">return</span> x<span class=\"token operator\">+</span>y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> __stdcall <span class=\"token function\">Sub</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">return</span> x<span class=\"token operator\">-</span>y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">int</span> __stdcall <span class=\"token function\">Mul</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">return</span> x<span class=\"token operator\">*</span>y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">int</span> __stdcall <span class=\"token function\">Div</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token keyword\">return</span> x<span class=\"token operator\">/</span>y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>头文件中</li>\n</ol>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token string\">\"C\"</span> <span class=\"token function\">_declspec</span><span class=\"token punctuation\">(</span>dllexport<span class=\"token punctuation\">)</span> __stdcall <span class=\"token keyword\">int</span> <span class=\"token function\">Plus</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token string\">\"C\"</span> <span class=\"token function\">_declspec</span><span class=\"token punctuation\">(</span>dllexport<span class=\"token punctuation\">)</span> __stdcall <span class=\"token keyword\">int</span> <span class=\"token function\">Sub</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token string\">\"C\"</span> <span class=\"token function\">_declspec</span><span class=\"token punctuation\">(</span>dllexport<span class=\"token punctuation\">)</span> __stdcall <span class=\"token keyword\">int</span> <span class=\"token function\">Mul</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token string\">\"C\"</span> <span class=\"token function\">_declspec</span><span class=\"token punctuation\">(</span>dllexport<span class=\"token punctuation\">)</span> __stdcall <span class=\"token keyword\">int</span> <span class=\"token function\">Div</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"4\">\n<li>编译</li>\n</ol>\n<p>说明:</p>\n<p>1、extern 表示这是个全局函数，可以供各个其他的函数调用；</p>\n<p>2、&quot;C&quot; 按照 C 语言的方式进行编译、链接； __declspec (dllexport) 告诉编译器此函数为导出函数；__stdcall 是为了保持导出与导入时函数调用规则一致，要么都加，要么都不加。</p>\n<h2 id=\"使用dll\"><a class=\"anchor\" href=\"#使用dll\">#</a> 使用 DLL</h2>\n<h3 id=\"方式一隐式连接\"><a class=\"anchor\" href=\"#方式一隐式连接\">#</a> 方式一：隐式连接</h3>\n<p>步骤 1：将 *.dll  *.lib 放到工程目录下面</p>\n<p><img data-src=\"image008.png\" alt=\"\" /></p>\n<p>步骤 2：将 #pragma comment (lib,&quot;DLL 名.lib&quot;) 添加到调用文件中</p>\n<p>步骤 3：加入函数的声明</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token string\">\"C\"</span> <span class=\"token function\">__declspec</span><span class=\"token punctuation\">(</span>dllimport<span class=\"token punctuation\">)</span> __stdcall <span class=\"token keyword\">int</span> <span class=\"token function\">Plus</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token string\">\"C\"</span> <span class=\"token function\">__declspec</span><span class=\"token punctuation\">(</span>dllimport<span class=\"token punctuation\">)</span> __stdcall <span class=\"token keyword\">int</span> <span class=\"token function\">Sub</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token string\">\"C\"</span> <span class=\"token function\">__declspec</span><span class=\"token punctuation\">(</span>dllimport<span class=\"token punctuation\">)</span> __stdcall <span class=\"token keyword\">int</span> <span class=\"token function\">Mul</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token string\">\"C\"</span> <span class=\"token function\">__declspec</span><span class=\"token punctuation\">(</span>dllimport<span class=\"token punctuation\">)</span> __stdcall <span class=\"token keyword\">int</span> <span class=\"token function\">Div</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>说明：</p>\n<p>__declspec (dllimport) 告诉编译器此函数为导入函数；</p>\n<p>结果：</p>\n<p><img data-src=\"image009.png\" alt=\"\" /></p>\n<h3 id=\"方式二显示连接\"><a class=\"anchor\" href=\"#方式二显示连接\">#</a> 方式二：显示连接</h3>\n<p>步骤 1： // 定义函数指针</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span>__stdcall <span class=\"token operator\">*</span>lpPlus<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span>__stdcall <span class=\"token operator\">*</span>lpSub<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span>__stdcall <span class=\"token operator\">*</span>lpMul<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span>__stdcall <span class=\"token operator\">*</span>lpDiv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>步骤 2：  // 声明函数指针变量</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>lpPlus myPlus<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>lpSub mySub<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>lpMul myMul<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>lpDiv myDiv<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>步骤 3：  //\t// 动态加载 dll 到内存中</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>HINSTANCE   hModule <span class=\"token operator\">=</span> <span class=\"token function\">LoadLibrary</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Dll名.dll\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>步骤 4：  // 获取函数地址</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>myPlus <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>lpPlus<span class=\"token punctuation\">)</span><span class=\"token function\">GetProcAddress</span><span class=\"token punctuation\">(</span>hModule<span class=\"token punctuation\">,</span>   <span class=\"token string\">\"函数名\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tmySub <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>lpSub<span class=\"token punctuation\">)</span><span class=\"token function\">GetProcAddress</span><span class=\"token punctuation\">(</span>hModule<span class=\"token punctuation\">,</span>   <span class=\"token string\">\"函数名\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tmyMul <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>lpMul<span class=\"token punctuation\">)</span><span class=\"token function\">GetProcAddress</span><span class=\"token punctuation\">(</span>hModule<span class=\"token punctuation\">,</span>   <span class=\"token string\">\"函数名\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tmyDiv <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>lpDiv<span class=\"token punctuation\">)</span><span class=\"token function\">GetProcAddress</span><span class=\"token punctuation\">(</span>hModule<span class=\"token punctuation\">,</span>   <span class=\"token string\">\"函数名\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>步骤 5：\t// 调用函数</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token function\">myPlus</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token function\">mySub</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">int</span> c <span class=\"token operator\">=</span> <span class=\"token function\">myMul</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">int</span> d <span class=\"token operator\">=</span> <span class=\"token function\">myDiv</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><span class=\"label danger\">💔注意</span></p>\n<p><mark>关于在 DLL 中的函数名</mark></p>\n<p>其实取决于函数名是否更改的关键在于 两个函数转变字__stdcall 和__cdecl<br />\n 如果你用了__stdcall 那 dll 中的函数就会在函数名前加 &quot;-&quot;, 函数名后加 &quot;@x&quot;<br />\n 而__cdecl 则不会将函数改名，因为__cdecl 是函数缺省的状态，所以只要将<br />\n__stdcall 在你的函数声明中去掉就可以了，更详细的区别可以参阅 msdn 中<br />\n的内容。</p>\n<p>结果：</p>\n<p><img data-src=\"image010.png\" alt=\"\" /></p>\n<h1 id=\"句柄\"><a class=\"anchor\" href=\"#句柄\">#</a> 句柄</h1>\n<p>Handle 是代表系统的内核对象，如文件句柄，线程句柄，进程句柄。</p>\n<p>HMODULE 是代表应用程序载入的模块</p>\n<p>HINSTANCE 在 win32 下与 HMODULE 是相同的东西 Win16 遗留</p>\n<p>HWND 是窗口句柄</p>\n<p>其实就是一个无符号整型 (四个字节),Windows 之所以这样设计有 2 个目的：</p>\n<ol>\n<li>\n<p>可读性更好</p>\n</li>\n<li>\n<p>避免在无意中进行运算</p>\n</li>\n</ol>\n",
            "tags": [
                "静态链接库",
                "动态链接库",
                "句柄"
            ]
        },
        {
            "id": "https://or0kit.github.io/Bin/WindowsPE/%E5%90%88%E5%B9%B6%E8%8A%82/",
            "url": "https://or0kit.github.io/Bin/WindowsPE/%E5%90%88%E5%B9%B6%E8%8A%82/",
            "title": "合并节",
            "date_published": "2021-05-03T10:26:17.000Z",
            "content_html": "<h1 id=\"合并节\"><a class=\"anchor\" href=\"#合并节\">#</a> 合并节</h1>\n<p><strong>把所有的节合并成一个，这样也能腾出节表空间，新增一个节，去添加我们的代码。</strong></p>\n<p>合并节：</p>\n<p>1、拉伸到内存</p>\n<p>2、将第一个节的内存大小、文件大小改成一样</p>\n<p>3、将第一个节的属性改为包含所有节的属性</p>\n<p>4、修改节的数量为 1</p>\n<h1 id=\"代码实现\"><a class=\"anchor\" href=\"#代码实现\">#</a> 代码实现</h1>\n<p>亲自用代码实现理解会更加深刻。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>LPVOID <span class=\"token function\">MergeSection</span><span class=\"token punctuation\">(</span>LPVOID pImageBuffer<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tPIMAGE_DOS_HEADER pDosHeader <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PIMAGE_DOS_HEADER<span class=\"token punctuation\">)</span>pImageBuffer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tPIMAGE_NT_HEADERS pNTHeader <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PIMAGE_NT_HEADERS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>pDosHeader <span class=\"token operator\">+</span> pDosHeader<span class=\"token operator\">-></span>e_lfanew<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tPIMAGE_FILE_HEADER pFileHeader <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PIMAGE_FILE_HEADER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>pDosHeader <span class=\"token operator\">+</span> pDosHeader<span class=\"token operator\">-></span>e_lfanew <span class=\"token operator\">+</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tPIMAGE_OPTIONAL_HEADER32 pOptionHeader <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PIMAGE_OPTIONAL_HEADER32<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>pFileHeader <span class=\"token operator\">+</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>IMAGE_FILE_HEADER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tPIMAGE_SECTION_HEADER pSectionHeader <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PIMAGE_SECTION_HEADER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>pOptionHeader <span class=\"token operator\">+</span> pFileHeader<span class=\"token operator\">-></span>SizeOfOptionalHeader<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token comment\">// 修改第一个节的范围以覆盖其他所有节  SizeOfImage - 第一个节的 VirtualAddress  既是所有节的的大小</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tpSectionHeader<span class=\"token operator\">-></span>SizeOfRawData <span class=\"token operator\">=</span> \\</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\tpSectionHeader<span class=\"token operator\">-></span>Misc<span class=\"token punctuation\">.</span>VirtualSize <span class=\"token operator\">=</span> \\</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\tpOptionHeader<span class=\"token operator\">-></span>SizeOfImage <span class=\"token operator\">-</span> pSectionHeader<span class=\"token operator\">-></span>VirtualAddress<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token comment\">// 按照文件对齐 对齐一下</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tpSectionHeader<span class=\"token operator\">-></span>SizeOfRawData <span class=\"token operator\">=</span> <span class=\"token function\">Align</span><span class=\"token punctuation\">(</span>pSectionHeader<span class=\"token operator\">-></span>SizeOfRawData<span class=\"token punctuation\">,</span> pOptionHeader<span class=\"token operator\">-></span>FileAlignment<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token comment\">// 将第一个节的属性改为包含所有节的属性</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> pFileHeader<span class=\"token operator\">-></span>NumberOfSections<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\tpSectionHeader<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>Characteristics <span class=\"token operator\">|=</span> pSectionHeader<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>Characteristics<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token comment\">// 修改节的数量为 1</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\tpFileHeader<span class=\"token operator\">-></span>NumberOfSections <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token comment\">// 清空其他节表的数据，这步是为了合并节后新增节方便</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>pSectionHeader <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>IMAGE_SECTION_HEADER<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>pFileHeader<span class=\"token operator\">-></span>NumberOfSections <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token comment\">//WritePeFile(pImageBuffer);</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token keyword\">return</span> pImageBuffer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "合并节"
            ]
        },
        {
            "id": "https://or0kit.github.io/Bin/WindowsPE/%E6%89%A9%E5%A4%A7%E8%8A%82/",
            "url": "https://or0kit.github.io/Bin/WindowsPE/%E6%89%A9%E5%A4%A7%E8%8A%82/",
            "title": "扩大节",
            "date_published": "2021-05-03T09:26:17.000Z",
            "content_html": "<h1 id=\"为什么扩大节\"><a class=\"anchor\" href=\"#为什么扩大节\">#</a> 为什么扩大节？</h1>\n<p><code>我们可以在任意空白区添加自己的代码，但如果添加的代码比较多，空白区不够怎么办？</code> <br />\n无法新增节表的时候，就要扩大最后一个节了。</p>\n<p>上面我们讲了，空白区添加我们的代码。但是有的时候。我们的空白区不够了怎么办。所以需要进行扩大节.</p>\n<p>扩大节其实很简单。修改节数据对齐后的大小即可。并且在 PE 文件中添加 0 数据进行填充即可.</p>\n<p>首先看一下我们的节表</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_IMAGE_SECTION_HEADER</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    BYTE    Name<span class=\"token punctuation\">[</span>IMAGE_SIZEOF_SHORT_NAME<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//8 个字节名字。自己可以起。编译器也可以给定。不重要.</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">union</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            DWORD   PhysicalAddress<span class=\"token punctuation\">;</span>       </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            DWORD   VirtualSize<span class=\"token punctuation\">;</span>           <span class=\"token comment\">// 节数据没有对齐后的大小。也就是没有对齐。节数据有多大.</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> Misc<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    DWORD   VirtualAddress<span class=\"token punctuation\">;</span>　　　　　　　　　　<span class=\"token comment\">// 加载到内存中的第一个字节的地址。也就是虚拟地址。节在内存中哪里开始。内存中的 VA + ImageBase 才是真正的节开始位置</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    DWORD   SizeOfRawData<span class=\"token punctuation\">;</span>　　　　　　　　　　 <span class=\"token comment\">// 修改这个属性的值，即可扩大节。并且在 PE 文件中添加相应的 0 数据进行填充.</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    DWORD   PointerToRawData<span class=\"token punctuation\">;</span>　　　　　　　　  <span class=\"token comment\">// 在文件中的偏移。是文件对齐成员倍数.</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    DWORD   PointerToRelocations<span class=\"token punctuation\">;</span>           <span class=\"token comment\">// 一下都是调试相关.</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    DWORD   PointerToLinenumbers<span class=\"token punctuation\">;</span>           <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    WORD    NumberOfRelocations<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    WORD    NumberOfLinenumbers<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    DWORD   Characteristics<span class=\"token punctuation\">;</span>　　　　　　　　　　<span class=\"token comment\">// 节的属性</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span> IMAGE_SECTION_HEADER<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>PIMAGE_SECTION_HEADER<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"扩大哪一个节呢\"><a class=\"anchor\" href=\"#扩大哪一个节呢\">#</a> 扩大哪一个节呢？</h1>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<p>若是扩大前面几个节，则后面的节都要改动。所以一般扩大最后一个节。</p>\n<h1 id=\"扩大节的步骤\"><a class=\"anchor\" href=\"#扩大节的步骤\">#</a> 扩大节的步骤</h1>\n<ol>\n<li>\n<p>分配一块新的空间，大小为 <code>S</code></p>\n</li>\n<li>\n<p>将最后一个节的 SizeOfRawData 和 VirtualSize 改为 N<br />\n <code>N = (SizeOfRawData或者VirtualSize内存对齐后的值) + S</code></p>\n</li>\n<li>\n<p>修改 SizeOflmage 大小</p>\n</li>\n</ol>\n<h1 id=\"代码实现\"><a class=\"anchor\" href=\"#代码实现\">#</a> 代码实现</h1>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>LPVOID <span class=\"token function\">IncreaseSection</span><span class=\"token punctuation\">(</span>LPVOID pFileBuffer<span class=\"token punctuation\">,</span> <span class=\"token class-name\">size_t</span> ExtendSize<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token comment\">// 计算 PE 文件在内存中的大小</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token class-name\">size_t</span> Size <span class=\"token operator\">=</span> <span class=\"token function\">CalcSize</span><span class=\"token punctuation\">(</span>pFileBuffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tLPVOID pNewBuffer <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span>Size <span class=\"token operator\">+</span> ExtendSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>pNewBuffer<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"新增节，开辟pNewImageBuffer内存失败\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>pFileBuffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>pNewBuffer<span class=\"token punctuation\">,</span> pFileBuffer<span class=\"token punctuation\">,</span> Size <span class=\"token operator\">+</span> ExtendSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>pFileBuffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tPIMAGE_DOS_HEADER pDosHeader <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PIMAGE_DOS_HEADER<span class=\"token punctuation\">)</span>pNewBuffer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tPIMAGE_NT_HEADERS pNTHeader <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PIMAGE_NT_HEADERS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>pDosHeader <span class=\"token operator\">+</span> pDosHeader<span class=\"token operator\">-></span>e_lfanew<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tPIMAGE_FILE_HEADER pFileHeader <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PIMAGE_FILE_HEADER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>pDosHeader <span class=\"token operator\">+</span> pDosHeader<span class=\"token operator\">-></span>e_lfanew <span class=\"token operator\">+</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\tPIMAGE_OPTIONAL_HEADER32 pOptionHeader <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PIMAGE_OPTIONAL_HEADER32<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>pFileHeader <span class=\"token operator\">+</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>IMAGE_FILE_HEADER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\tPIMAGE_SECTION_HEADER pSectionHeader <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PIMAGE_SECTION_HEADER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>pOptionHeader <span class=\"token operator\">+</span> pFileHeader<span class=\"token operator\">-></span>SizeOfOptionalHeader<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token comment\">// 判断节表后的空白区是否足够 80 字节，若不够则移动 NT 头</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pOptionHeader<span class=\"token operator\">-></span>SizeOfHeaders <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>PBYTE<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>pSectionHeader<span class=\"token punctuation\">[</span>pFileHeader<span class=\"token operator\">-></span>NumberOfSections<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> pNewBuffer<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">80</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\tDWORD dwRet <span class=\"token operator\">=</span> <span class=\"token function\">MoveNTHeaderAndSectionHeadersToDosStub</span><span class=\"token punctuation\">(</span>pNewBuffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"节表空间不足，NT头和节表向低地址移动了 %d 字节\\n\"</span><span class=\"token punctuation\">,</span> dwRet<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dwRet <span class=\"token operator\">&lt;</span> <span class=\"token number\">80</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"移动后仍没有足够的80字节空间插入新节表\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>pNewBuffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\t<span class=\"token comment\">// 更新指针</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\tPIMAGE_DOS_HEADER pDosHeader <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PIMAGE_DOS_HEADER<span class=\"token punctuation\">)</span>pNewBuffer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\tPIMAGE_NT_HEADERS pNTHeader <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PIMAGE_NT_HEADERS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>pDosHeader <span class=\"token operator\">+</span> pDosHeader<span class=\"token operator\">-></span>e_lfanew<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\tPIMAGE_FILE_HEADER pFileHeader <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PIMAGE_FILE_HEADER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>pDosHeader <span class=\"token operator\">+</span> pDosHeader<span class=\"token operator\">-></span>e_lfanew <span class=\"token operator\">+</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\tPIMAGE_OPTIONAL_HEADER32 pOptionHeader <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PIMAGE_OPTIONAL_HEADER32<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>pFileHeader <span class=\"token operator\">+</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>IMAGE_FILE_HEADER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\tPIMAGE_SECTION_HEADER pSectionHeader <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PIMAGE_SECTION_HEADER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>pOptionHeader <span class=\"token operator\">+</span> pFileHeader<span class=\"token operator\">-></span>SizeOfOptionalHeader<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t<span class=\"token comment\">// 在节表最后新增一个节表 并修正新增节表的属性</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\tPWORD pNumberOfSections <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span>pFileHeader<span class=\"token operator\">-></span>NumberOfSections<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 节的数量</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\tPIMAGE_SECTION_HEADER pLastSectionHeader <span class=\"token operator\">=</span> pSectionHeader <span class=\"token operator\">+</span> <span class=\"token operator\">*</span>pNumberOfSections <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 最后一个节表</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\tPIMAGE_SECTION_HEADER pNewSectionHeader <span class=\"token operator\">=</span> pSectionHeader <span class=\"token operator\">+</span> <span class=\"token operator\">*</span>pNumberOfSections<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 新节表插入点</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t<span class=\"token comment\">//1、Name: 名字随便修改，不能超过八个字节。</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t<span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>pNewSectionHeader<span class=\"token operator\">-></span>Name<span class=\"token punctuation\">,</span> <span class=\"token string\">\".newsec\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t<span class=\"token comment\">//2、VirtualSize : 申请的新节空间大小，比如 1000</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\tpNewSectionHeader<span class=\"token operator\">-></span>Misc<span class=\"token punctuation\">.</span>VirtualSize <span class=\"token operator\">=</span> ExtendSize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t<span class=\"token comment\">//3、VirtualAddress : 等于上一个节的 VirtualAddress + SizeOfRawData。 这个成员指定了这个节在内存哪里展开。所以需要修改。</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\tpNewSectionHeader<span class=\"token operator\">-></span>VirtualAddress <span class=\"token operator\">=</span> pLastSectionHeader<span class=\"token operator\">-></span>VirtualAddress <span class=\"token operator\">+</span> pLastSectionHeader<span class=\"token operator\">-></span>SizeOfRawData<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t<span class=\"token comment\">//4、SizeOfRawData：设置可以和 VirtualSize 一样，比如 0x1000。我们新增的节，自己需要在 PE 文件添加一段节数据，数据的大小按照文件对齐添加，并且填写到这个成员中。</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\tpNewSectionHeader<span class=\"token operator\">-></span>SizeOfRawData <span class=\"token operator\">=</span> ExtendSize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t<span class=\"token comment\">//5、PointerToRawData：等于上一个节的 PointerToRawData + SizeOfRawData。我们指定了内存中从哪里展开节。那么也需要指定这个节在文件中在哪里展开</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\tpNewSectionHeader<span class=\"token operator\">-></span>PointerToRawData <span class=\"token operator\">=</span> pLastSectionHeader<span class=\"token operator\">-></span>PointerToRawData <span class=\"token operator\">+</span> pLastSectionHeader<span class=\"token operator\">-></span>SizeOfRawData<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t<span class=\"token comment\">//6、PointerToRelocation：设置成零</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\tpNewSectionHeader<span class=\"token operator\">-></span>PointerToRelocations <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t<span class=\"token comment\">//7、PointerToLineNumbers：设置成零</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\tpNewSectionHeader<span class=\"token operator\">-></span>PointerToLinenumbers <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t<span class=\"token comment\">//8、NumberOfLineRelocations：设置成零</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\tpNewSectionHeader<span class=\"token operator\">-></span>NumberOfRelocations <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t<span class=\"token comment\">//9、NumberOfLineNumbers：设置成零</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\tpNewSectionHeader<span class=\"token operator\">-></span>NumberOfLinenumbers <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t<span class=\"token comment\">//10、Characteristics：块属性 </span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\tpNewSectionHeader<span class=\"token operator\">-></span>Characteristics <span class=\"token operator\">=</span> pSectionHeader<span class=\"token operator\">-></span>Characteristics<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre></pre></td></tr><tr><td data-num=\"67\"></td><td><pre></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>\t<span class=\"token comment\">// 修改标准 PE 头中节的数量</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\tpFileHeader<span class=\"token operator\">-></span>NumberOfSections <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>pNumberOfSections <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\t<span class=\"token comment\">// 修改 SizeOfImage 的大小</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\tpOptionHeader<span class=\"token operator\">-></span>SizeOfImage <span class=\"token operator\">+=</span> <span class=\"token function\">Align</span><span class=\"token punctuation\">(</span>pNewSectionHeader<span class=\"token operator\">-></span>Misc<span class=\"token punctuation\">.</span>VirtualSize<span class=\"token punctuation\">,</span> pOptionHeader<span class=\"token operator\">-></span>SectionAlignment<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>\t<span class=\"token comment\">//WritePeFile(pNewImageBuffer);</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\t<span class=\"token keyword\">return</span> pNewBuffer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "扩大节"
            ]
        },
        {
            "id": "https://or0kit.github.io/Bin/WindowsPE/%E6%96%B0%E5%A2%9E%E8%8A%82/",
            "url": "https://or0kit.github.io/Bin/WindowsPE/%E6%96%B0%E5%A2%9E%E8%8A%82/",
            "title": "新增节",
            "date_published": "2021-05-02T09:26:17.000Z",
            "content_html": "<h1 id=\"为什么新增节以及新增节的步骤\"><a class=\"anchor\" href=\"#为什么新增节以及新增节的步骤\">#</a> 为什么新增节。以及新增节的步骤</h1>\n<p>我们的 PE 文件在空白区可以添加代码，但是这样是由一个弊端的，因为你的空白区节属性可能是只读的不能执行，如果你修改了属性。那么程序就可能出现问题，所以新增一个节可以实现我们的代码。</p>\n<h1 id=\"正文\"><a class=\"anchor\" href=\"#正文\">#</a> 正文</h1>\n<p>在 PE 中，新增节表，新增节，添加代码。</p>\n<ol>\n<li>先判断节表后是否有空闲位置，添加节表信息，必须多出两个节表位置，最后以零结尾，虽然也有最后不是以一个空白节表结束的程序，但我们不能保证什么时候可以什么时候不可以，所以最好最后还是以一个空白节表结束。<strong>若节表后面位置不够放下两个节表，我们可以移动 NT 头，覆盖 DOS Stub 使 NT 头前移</strong>，并再次判断是否可以放的下两个两个节表。</li>\n</ol>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<ol start=\"2\">\n<li>新增节后，需要修改以下信息</li>\n</ol>\n<blockquote>\n<p>1、添加一个新节，可以复制一份，最好是拥有可执行属性的节，如.text。<br />\n　　2、在节表区，新增节的后面，填充一个节，用零填充。<br />\n　　3、修改标准 PE 头中节的数量。<br />\n　　4、修改 SizeOfImage 的大小。这个成员才是关键。如果不按照内存对齐修改镜像大小。那么我们的节就不会映射到内存中。或者 PE 文件根本无法执行.<br />\n　　5、在原有数据的后面，新增一个节的数据（内存对齐的整倍数）。<br />\n　　6、修正新增节表的属性。</p>\n</blockquote>\n<ol start=\"3\">\n<li>新节各个属性修改说明</li>\n</ol>\n<blockquote>\n<p>1、Name: 名字随便修改，不能超过八个字节。<br />\n　　2、VirtualSize: 申请的新节空间大小，比如 1000<br />\n　　3、VirtualAddress: 等于上一个节的 VirtualAddress  +  SizeOfRawData。 这个成员指定了这个节在内存哪里展开。所以需要修改。<br />\n　　4、SizeOfRawData：设置可以和 VirtualSize 一样，比如 0x1000。我们新增的节，自己需要在 PE 文件添加一段节数据，数据的大小按照文件对齐添加，并且填写到这个成员中。<br />\n　　5、PointerToRawData：等于上一个节的 PointerToRawData  +  SizeOfRawData。我们指定了内存中从哪里展开节。那么也需要指定这个节在文件中在哪里展开<br />\n　　6、PointerToRelocation：设置成零<br />\n　　7、PointerToLineNumbers：设置成零<br />\n　　8、NumberOfLineRelocations：设置成零<br />\n　　9、NumberOfLineNumbers：设置成零<br />\n　　10、Characteristics：块属性 0x20000060  可以取上一个节表和本节表的属性值，进行异或  如 x|y</p>\n</blockquote>\n<h1 id=\"代码实现新增节\"><a class=\"anchor\" href=\"#代码实现新增节\">#</a> 代码实现新增节</h1>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 移动 NT 头</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 返回值是 前移了多少</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>DWORD <span class=\"token function\">MoveNTHeaderAndSectionHeadersToDosStub</span><span class=\"token punctuation\">(</span>LPVOID pBuffer<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tPIMAGE_DOS_HEADER pDosHeader <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PIMAGE_DOS_HEADER<span class=\"token punctuation\">)</span>pBuffer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tPIMAGE_NT_HEADERS pNTHeader <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PIMAGE_NT_HEADERS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>pDosHeader <span class=\"token operator\">+</span> pDosHeader<span class=\"token operator\">-></span>e_lfanew<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tPIMAGE_FILE_HEADER pPEHeader <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PIMAGE_FILE_HEADER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>pDosHeader <span class=\"token operator\">+</span> pDosHeader<span class=\"token operator\">-></span>e_lfanew <span class=\"token operator\">+</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tPIMAGE_OPTIONAL_HEADER32 pOptionHeader <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PIMAGE_OPTIONAL_HEADER32<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>pPEHeader <span class=\"token operator\">+</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>IMAGE_FILE_HEADER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tPIMAGE_SECTION_HEADER pSectionHeader <span class=\"token operator\">=</span> \\</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token punctuation\">(</span>PIMAGE_SECTION_HEADER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>pOptionHeader <span class=\"token operator\">+</span> pPEHeader<span class=\"token operator\">-></span>SizeOfOptionalHeader<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tLPVOID pDst <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>LPVOID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>pDosHeader <span class=\"token operator\">+</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>IMAGE_DOS_HEADER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// NT 头插入点</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\tDWORD dwRet <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>pNTHeader <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>pDst<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 返回地址减小的值</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tDWORD dwSize <span class=\"token operator\">=</span> <span class=\"token number\">4</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>IMAGE_FILE_HEADER<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> pPEHeader<span class=\"token operator\">-></span>SizeOfOptionalHeader <span class=\"token operator\">+</span> \\</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t<span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>IMAGE_SECTION_HEADER<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> pPEHeader<span class=\"token operator\">-></span>NumberOfSections<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 移动的字节数</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tLPVOID pSrc <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span>dwSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pSrc <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"分配内存失败\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>pSrc<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>LPVOID<span class=\"token punctuation\">)</span>pNTHeader<span class=\"token punctuation\">,</span> dwSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 保存要复制的数据</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token function\">memset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>LPVOID<span class=\"token punctuation\">)</span>pNTHeader<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> dwSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 清空原数据</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>pDst<span class=\"token punctuation\">,</span> pSrc<span class=\"token punctuation\">,</span> dwSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 移动数据</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>pSrc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\tpDosHeader<span class=\"token operator\">-></span>e_lfanew <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>IMAGE_DOS_HEADER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 更新 e_lfanew</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token keyword\">return</span> dwRet<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>LPVOID <span class=\"token function\">IncreaseSection</span><span class=\"token punctuation\">(</span>LPVOID pFileBuffer<span class=\"token punctuation\">,</span> <span class=\"token class-name\">size_t</span> ExtendSize<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token comment\">// 计算 PE Raw 的大小</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token class-name\">size_t</span> Size <span class=\"token operator\">=</span> <span class=\"token function\">CalcRawSize</span><span class=\"token punctuation\">(</span>pFileBuffer<span class=\"token punctuation\">,</span>TRUE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\tLPVOID pNewBuffer <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span>Size <span class=\"token operator\">+</span> ExtendSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>pNewBuffer<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"新增节，开辟pNewImageBuffer内存失败\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>pFileBuffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t<span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>pNewBuffer<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> Size <span class=\"token operator\">+</span> ExtendSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t<span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>pNewBuffer<span class=\"token punctuation\">,</span> pFileBuffer<span class=\"token punctuation\">,</span> Size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>pFileBuffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\tPIMAGE_DOS_HEADER pDosHeader <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PIMAGE_DOS_HEADER<span class=\"token punctuation\">)</span>pNewBuffer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\tPIMAGE_NT_HEADERS pNTHeader <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PIMAGE_NT_HEADERS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>pDosHeader <span class=\"token operator\">+</span> pDosHeader<span class=\"token operator\">-></span>e_lfanew<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\tPIMAGE_FILE_HEADER pFileHeader <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PIMAGE_FILE_HEADER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>pDosHeader <span class=\"token operator\">+</span> pDosHeader<span class=\"token operator\">-></span>e_lfanew <span class=\"token operator\">+</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\tPIMAGE_OPTIONAL_HEADER32 pOptionHeader <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PIMAGE_OPTIONAL_HEADER32<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>pFileHeader <span class=\"token operator\">+</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>IMAGE_FILE_HEADER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\tPIMAGE_SECTION_HEADER pSectionHeader <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PIMAGE_SECTION_HEADER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>pOptionHeader <span class=\"token operator\">+</span> pFileHeader<span class=\"token operator\">-></span>SizeOfOptionalHeader<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t<span class=\"token comment\">// 判断节表后的空白区是否足够 80 字节，若不够则移动 NT 头</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pOptionHeader<span class=\"token operator\">-></span>SizeOfHeaders <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>PBYTE<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>pSectionHeader<span class=\"token punctuation\">[</span>pFileHeader<span class=\"token operator\">-></span>NumberOfSections<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> pNewBuffer<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">80</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t\tDWORD dwRet <span class=\"token operator\">=</span> <span class=\"token function\">MoveNTHeaderAndSectionHeadersToDosStub</span><span class=\"token punctuation\">(</span>pNewBuffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"节表空间不足，NT头和节表向低地址移动了 %d 字节\\n\"</span><span class=\"token punctuation\">,</span> dwRet<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dwRet <span class=\"token operator\">&lt;</span> <span class=\"token number\">80</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"移动后仍没有足够的80字节空间插入新节表\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t\t\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>pNewBuffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t\t<span class=\"token comment\">// 更新指针</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t\tPIMAGE_DOS_HEADER pDosHeader <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PIMAGE_DOS_HEADER<span class=\"token punctuation\">)</span>pNewBuffer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t\tPIMAGE_NT_HEADERS pNTHeader <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PIMAGE_NT_HEADERS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>pDosHeader <span class=\"token operator\">+</span> pDosHeader<span class=\"token operator\">-></span>e_lfanew<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\t\tPIMAGE_FILE_HEADER pFileHeader <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PIMAGE_FILE_HEADER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>pDosHeader <span class=\"token operator\">+</span> pDosHeader<span class=\"token operator\">-></span>e_lfanew <span class=\"token operator\">+</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>\t\tPIMAGE_OPTIONAL_HEADER32 pOptionHeader <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PIMAGE_OPTIONAL_HEADER32<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>pFileHeader <span class=\"token operator\">+</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>IMAGE_FILE_HEADER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\t\tPIMAGE_SECTION_HEADER pSectionHeader <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PIMAGE_SECTION_HEADER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>pOptionHeader <span class=\"token operator\">+</span> pFileHeader<span class=\"token operator\">-></span>SizeOfOptionalHeader<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\t<span class=\"token comment\">// 在节表最后新增一个节表 并修正新增节表的属性</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>\tPWORD pNumberOfSections <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span>pFileHeader<span class=\"token operator\">-></span>NumberOfSections<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 节的数量</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>\tPIMAGE_SECTION_HEADER pLastSectionHeader <span class=\"token operator\">=</span> pSectionHeader <span class=\"token operator\">+</span> <span class=\"token operator\">*</span>pNumberOfSections <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 最后一个节表</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\tPIMAGE_SECTION_HEADER pNewSectionHeader <span class=\"token operator\">=</span> pSectionHeader <span class=\"token operator\">+</span> <span class=\"token operator\">*</span>pNumberOfSections<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 新节表插入点</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>\t<span class=\"token comment\">//1、Name: 名字随便修改，不能超过八个字节。</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>\t<span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>pNewSectionHeader<span class=\"token operator\">-></span>Name<span class=\"token punctuation\">,</span> <span class=\"token string\">\".newsec\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>\t<span class=\"token comment\">//2、VirtualSize : 申请的新节空间大小，比如 1000</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>\tpNewSectionHeader<span class=\"token operator\">-></span>Misc<span class=\"token punctuation\">.</span>VirtualSize <span class=\"token operator\">=</span> ExtendSize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>\t<span class=\"token comment\">//3、VirtualAddress : 等于上一个节的 VirtualAddress + SizeOfRawData。 这个成员指定了这个节在内存哪里展开。所以需要修改。</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>\tpNewSectionHeader<span class=\"token operator\">-></span>VirtualAddress <span class=\"token operator\">=</span> pLastSectionHeader<span class=\"token operator\">-></span>VirtualAddress <span class=\"token operator\">+</span> pLastSectionHeader<span class=\"token operator\">-></span>SizeOfRawData<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>\t<span class=\"token comment\">//4、SizeOfRawData：设置可以和 VirtualSize 一样，比如 0x1000。我们新增的节，自己需要在 PE 文件添加一段节数据，数据的大小按照文件对齐添加，并且填写到这个成员中。</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>\tpNewSectionHeader<span class=\"token operator\">-></span>SizeOfRawData <span class=\"token operator\">=</span> ExtendSize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>\t<span class=\"token comment\">//5、PointerToRawData：等于上一个节的 PointerToRawData + SizeOfRawData。我们指定了内存中从哪里展开节。那么也需要指定这个节在文件中在哪里展开</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>\tpNewSectionHeader<span class=\"token operator\">-></span>PointerToRawData <span class=\"token operator\">=</span> pLastSectionHeader<span class=\"token operator\">-></span>PointerToRawData <span class=\"token operator\">+</span> pLastSectionHeader<span class=\"token operator\">-></span>SizeOfRawData<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>\t<span class=\"token comment\">//6、PointerToRelocation：设置成零</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>\tpNewSectionHeader<span class=\"token operator\">-></span>PointerToRelocations <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>\t<span class=\"token comment\">//7、PointerToLineNumbers：设置成零</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>\tpNewSectionHeader<span class=\"token operator\">-></span>PointerToLinenumbers <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>\t<span class=\"token comment\">//8、NumberOfLineRelocations：设置成零</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>\tpNewSectionHeader<span class=\"token operator\">-></span>NumberOfRelocations <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>\t<span class=\"token comment\">//9、NumberOfLineNumbers：设置成零</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>\tpNewSectionHeader<span class=\"token operator\">-></span>NumberOfLinenumbers <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>\t<span class=\"token comment\">//10、Characteristics：块属性 </span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>\tpNewSectionHeader<span class=\"token operator\">-></span>Characteristics <span class=\"token operator\">=</span> pSectionHeader<span class=\"token operator\">-></span>Characteristics<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre></pre></td></tr><tr><td data-num=\"98\"></td><td><pre></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>\t<span class=\"token comment\">// 修改标准 PE 头中节的数量</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>\tpFileHeader<span class=\"token operator\">-></span>NumberOfSections <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>pNumberOfSections <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>\t<span class=\"token comment\">// 修改 SizeOfImage 的大小</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>\tpOptionHeader<span class=\"token operator\">-></span>SizeOfImage <span class=\"token operator\">+=</span> <span class=\"token function\">Align</span><span class=\"token punctuation\">(</span>pNewSectionHeader<span class=\"token operator\">-></span>Misc<span class=\"token punctuation\">.</span>VirtualSize<span class=\"token punctuation\">,</span> pOptionHeader<span class=\"token operator\">-></span>SectionAlignment<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>\t<span class=\"token comment\">//WritePeFile(pNewBuffer);</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>\t<span class=\"token keyword\">return</span> pNewBuffer<span class=\"token punctuation\">;</span><span class=\"token comment\">// 返回新增节后的 Buffer</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"reference\"><a class=\"anchor\" href=\"#reference\">#</a> Reference</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vd3VtYWMvcC81Mjc0NTU5Lmh0bWw=\">https://www.cnblogs.com/wumac/p/5274559.html</span><br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vaUJpbmFyeS9wLzk3Mzc3MTkuaHRtbA==\">https://www.cnblogs.com/iBinary/p/9737719.html</span></p>\n",
            "tags": [
                "新增节",
                "移动NT头"
            ]
        },
        {
            "id": "https://or0kit.github.io/Bin/WindowsPE/%E4%BB%BB%E6%84%8F%E4%BB%A3%E7%A0%81%E7%A9%BA%E7%99%BD%E5%8C%BA%E6%B7%BB%E5%8A%A0%E4%BB%A3%E7%A0%81/",
            "url": "https://or0kit.github.io/Bin/WindowsPE/%E4%BB%BB%E6%84%8F%E4%BB%A3%E7%A0%81%E7%A9%BA%E7%99%BD%E5%8C%BA%E6%B7%BB%E5%8A%A0%E4%BB%A3%E7%A0%81/",
            "title": "任意代码空白区添加代码",
            "date_published": "2021-05-02T08:58:59.000Z",
            "content_html": "<h1 id=\"空白区添加代码\"><a class=\"anchor\" href=\"#空白区添加代码\">#</a> 空白区添加代码</h1>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">TestAddCode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> FileBuffer<span class=\"token punctuation\">,</span> <span class=\"token class-name\">size_t</span> n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">char</span> ShellCode<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token number\">0x6a</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x6a</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x6a</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x6a</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token number\">0xe8</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token number\">0xe9</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> pImageBuffer <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    pImageBuffer <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">CreateImageBuffer</span><span class=\"token punctuation\">(</span>FileBuffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    PIMAGE_DOS_HEADER pDosHeader <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PIMAGE_DOS_HEADER<span class=\"token punctuation\">)</span>pImageBuffer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    PIMAGE_NT_HEADERS pNTHeader <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PIMAGE_NT_HEADERS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>pDosHeader <span class=\"token operator\">+</span> pDosHeader<span class=\"token operator\">-></span>e_lfanew<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    PIMAGE_FILE_HEADER pFileHeader <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PIMAGE_FILE_HEADER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>pDosHeader <span class=\"token operator\">+</span> pDosHeader<span class=\"token operator\">-></span>e_lfanew <span class=\"token operator\">+</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    PIMAGE_OPTIONAL_HEADER32 pOptionHeader <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PIMAGE_OPTIONAL_HEADER32<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>pFileHeader <span class=\"token operator\">+</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>IMAGE_FILE_HEADER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    PIMAGE_SECTION_HEADER pSectionHeader <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PIMAGE_SECTION_HEADER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>pOptionHeader <span class=\"token operator\">+</span> pFileHeader<span class=\"token operator\">-></span>SizeOfOptionalHeader<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">// 判断总节区数目是否小于 n</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pFileHeader<span class=\"token operator\">-></span>NumberOfSections <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"超过最大节区数\\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>FileBuffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>pImageBuffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    pSectionHeader <span class=\"token operator\">=</span> pSectionHeader <span class=\"token operator\">+</span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token comment\">// 判断空白区是否足够存储 ShellCode 代码</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>pSectionHeader<span class=\"token operator\">-></span>SizeOfRawData <span class=\"token operator\">-</span> pSectionHeader<span class=\"token operator\">-></span>Misc<span class=\"token punctuation\">.</span>VirtualSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>ShellCode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"空白区不够！\\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>FileBuffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>pImageBuffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token comment\">// 将代码复制到空白区</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    PBYTE CodeBegin <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PBYTE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>pImageBuffer <span class=\"token operator\">+</span> pSectionHeader<span class=\"token operator\">-></span>VirtualAddress <span class=\"token operator\">+</span> pSectionHeader<span class=\"token operator\">-></span>Misc<span class=\"token punctuation\">.</span>VirtualSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>CodeBegin<span class=\"token punctuation\">,</span> ShellCode<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>ShellCode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token comment\">// 修复 E8</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>DWORD<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>CodeBegin<span class=\"token punctuation\">[</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>MessageBoxW <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>pOptionHeader<span class=\"token operator\">-></span>ImageBase  <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>CodeBegin <span class=\"token operator\">+</span> <span class=\"token number\">8</span> <span class=\"token operator\">+</span> <span class=\"token number\">5</span> <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>pImageBuffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token comment\">// 修复 E9</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>DWORD<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>CodeBegin<span class=\"token punctuation\">[</span><span class=\"token number\">0xE</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>pOptionHeader<span class=\"token operator\">-></span>ImageBase <span class=\"token operator\">+</span> pOptionHeader<span class=\"token operator\">-></span>AddressOfEntryPoint<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>pOptionHeader<span class=\"token operator\">-></span>ImageBase <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>CodeBegin <span class=\"token operator\">+</span> <span class=\"token number\">8</span> <span class=\"token operator\">+</span> <span class=\"token number\">5</span> <span class=\"token operator\">+</span> <span class=\"token number\">5</span> <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>pImageBuffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token comment\">// 修复 OEP</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    pOptionHeader<span class=\"token operator\">-></span>AddressOfEntryPoint <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>CodeBegin <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>pImageBuffer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token comment\">// 修复节区</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    pSectionHeader<span class=\"token operator\">-></span>Misc<span class=\"token punctuation\">.</span>VirtualSize <span class=\"token operator\">=</span> pSectionHeader<span class=\"token operator\">-></span>Misc<span class=\"token punctuation\">.</span>VirtualSize <span class=\"token operator\">+</span> <span class=\"token number\">0x12</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token function\">WritePeFile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">CreateNewFileBuffer</span><span class=\"token punctuation\">(</span>pImageBuffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"插入代码成功\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"步骤\"><a class=\"anchor\" href=\"#步骤\">#</a> 步骤：</h2>\n<ol>\n<li>准备一段 ShellCode</li>\n</ol>\n<blockquote>\n<p>char ShellCode[] = {<br />\n0x6a,0,0x6a,0,0x6a,0,0x6a,0,<br />\n0xe8,0,0,0,0,<br />\n0xe9,0,0,0,0<br />\n};</p>\n</blockquote>\n<ol start=\"2\">\n<li>\n<p>判断节区后的空白区是否足够放下 ShellCode</p>\n<p>if (((pSectionHeader-&gt;SizeOfRawData - pSectionHeader-&gt;Misc.VirtualSize)) &lt; sizeof(ShellCode))<br />\n{<br />\nprintf (&quot;空白区不够！\\r\\n&quot;);<br />\nfree(FileBuffer);<br />\nfree(pImageBuffer);<br />\n}<br />\n 判断此节在磁盘中的体积 (SizeOfRawData，已经按照文件页对齐后的值) 减去此节的实际大小 (VirtualSize, 未做对齐处理前的大小) 是否小于 ShellCode 的大小。</p>\n</li>\n<li>\n<p>将代码复制到空白区</p>\n<p>PBYTE CodeBegin = (PBYTE)((DWORD)pImageBuffer + pSectionHeader-&gt;VirtualAddress + pSectionHeader-&gt;Misc.VirtualSize);<br />\nmemcpy(CodeBegin, ShellCode, sizeof(ShellCode));<br />\n 找到此节的空白区：ImageBase + 此节在内存中加载的地址 VirtualAddress + 此节的实际大小 VirtualSize</p>\n</li>\n<li>\n<p>修复 E8</p>\n<p><em>(DWORD</em>)&amp;CodeBegin[9] = (DWORD)MessageBoxW - (pOptionHeader-&gt;ImageBase  + (DWORD)CodeBegin + 8 + 5 - (DWORD)pImageBuffer);<br />\n 硬编码 E8 后的值应为：要跳转的地址 - 下一行指令的地址。<br />\n要跳转的地址：MessageBox 函数的地址，在我的电脑上 MessageBoxW 的地址为 0x753439C0<br />\n 下一行地址：程序被加载到内存中后其基址为 ImageBase，因此我们要算出此 E8 这条指令的 RVA，既 CodeBegin 的地址 + 8（4 个 push 0 : 0x6A 00） + 5 (E8 指令的长度，加上这个后就是下一条指令的地址了)  - pImageBuffer（在此程序内存中的基址）。</p>\n</li>\n<li>\n<p>修复 E9</p>\n<p><em>(DWORD</em>)&amp;CodeBegin[0xE] = (pOptionHeader-&gt;ImageBase + pOptionHeader-&gt;AddressOfEntryPoint) - (pOptionHeader-&gt;ImageBase + (DWORD)CodeBegin + 8 + 5 + 5 - (DWORD)pImageBuffer);<br />\n 硬编码 E9 后的值应为：要跳转的地址 - 下一行指令的地址。<br />\n与 E8 同理。</p>\n</li>\n<li>\n<p>修复 OEP</p>\n<p>pOptionHeader-&gt;AddressOfEntryPoint = (DWORD)CodeBegin - (DWORD)pImageBuffer;<br />\nAddressOfEntryPoint 是个 RVA 我们用 CodeBegin 减去 pImageBuffer 即可得出</p>\n</li>\n<li>\n<p>修复节区</p>\n<p>pSectionHeader-&gt;Misc.VirtualSize = pSectionHeader-&gt;Misc.VirtualSize + 0x12;</p>\n</li>\n</ol>\n<p>改一下节的大小使得转换成 FileBuffer 时，可以把我们的 ShellCode 一起转换过去。</p>\n<p>注意：</p>\n<blockquote>\n<p>添加的函数 MessageBox 是 user32.dll 中的，如果 PE 文件本身没有加载这个 dll，就算 ShellCode 添加成功也无法执行。</p>\n</blockquote>\n",
            "tags": [
                "空白区添加代码"
            ]
        },
        {
            "id": "https://or0kit.github.io/Bin/WindowsPE/%E5%9C%A8%E7%A9%BA%E7%99%BD%E5%8C%BA%E6%B7%BB%E5%8A%A0%E4%BB%A3%E7%A0%81/",
            "url": "https://or0kit.github.io/Bin/WindowsPE/%E5%9C%A8%E7%A9%BA%E7%99%BD%E5%8C%BA%E6%B7%BB%E5%8A%A0%E4%BB%A3%E7%A0%81/",
            "title": "在空白区添加代码",
            "date_published": "2021-05-02T08:58:55.000Z",
            "content_html": "<h1 id=\"在代码空白区添加代码手动\"><a class=\"anchor\" href=\"#在代码空白区添加代码手动\">#</a> 在代码空白区添加代码 (手动)</h1>\n<p><code>添加的是硬编码</code></p>\n<p>1、获取 MessageBox 地址，构造 ShellCode 代码</p>\n<p>2、E8 E9 计算公式</p>\n<p>3、在代码区手动添加代码</p>\n<p>4、修改入口地址，指向 ShellCode<br />\n 入口地址:xxxx</p>\n<p>call 0x12345678 \t\t\tCall 0x77E5425F</p>\n<p>E8 53 FE FF FF</p>\n<p>jmp 0x2345678</p>\n<p>E9 2B 2B 00 00</p>\n<p>真正要跳转的地址 = E8 这条指令的下一行地址 + X</p>\n<p>X = 真正要跳转的地址 - E8 这条指令的下一行地址</p>\n<p>X = 00401050 - 004011FD</p>\n<p>X = 00403b80 - 00401055</p>\n<p>要跳转的地方 = E8 当前的地址 + 5 + X</p>\n<p>X = 要跳转的地址 - (E8 的地址 + 5)</p>\n<p>6A 00 6A 00 6A 00 6A 00 E8 00 00 00 00 E9 00 00 00 00</p>\n<h1 id=\"实战\"><a class=\"anchor\" href=\"#实战\">#</a> 实战</h1>\n<p>OD 查找 MessageBox 位置。</p>\n<p>显示模块窗口。</p>\n<p>找到 USER32.dll, 双击进入后， <code>Ctrl+N</code>  打开当前模块的名称（标签）列表。在里面查找 MessageBox。</p>\n<p>MessageBox:0x76321930<br />\nMessageBox - ImageBase -508 - 5 =  75F2 1423<br />\n401000<br />\n3F FAEE<br />\n6A 00 6A 00 6A 00 6A 00 E8 23 14 F2 75 E9 EE FA 3F 00<br />\n00007FFDA9672180</p>\n<p>成功了，开始时失败了好多次，原因为：在 xp 虚拟机中寻找的 MessageBox 函数地址在 win10 物理中中用了，当然不行了……</p>\n",
            "tags": [
                "空白区添加代码"
            ]
        },
        {
            "id": "https://or0kit.github.io/Bin/WindowsPE/RVA%E4%B8%8EFOA%E8%BD%AC%E6%8D%A2/",
            "url": "https://or0kit.github.io/Bin/WindowsPE/RVA%E4%B8%8EFOA%E8%BD%AC%E6%8D%A2/",
            "title": "RVA与FOA转换",
            "date_published": "2021-05-02T08:05:32.000Z",
            "content_html": "<h1 id=\"引出问题\"><a class=\"anchor\" href=\"#引出问题\">#</a> 引出问题</h1>\n<p><code>如果想改变一个全区变量的初始值，该怎么做？</code></p>\n<p>如果一个变量有值，那这个值是存储在 PE 中的。</p>\n<p>有一个小细节：定义一个变量，当它加载在内存中的时候才会有默认初始值的。在 C 中定义一个整型变量，不给它赋值打印它，默认是为 0 的。</p>\n<p><code>面临的问题是什么？</code></p>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<h1 id=\"转换\"><a class=\"anchor\" href=\"#转换\">#</a> 转换</h1>\n<p><span class=\"label\">RVA: 相对虚拟地址</span><br />\n<span class=\"label\"> FOA: 文件偏移地址</span></p>\n<ol>\n<li>RVA TO FOA</li>\n</ol>\n<p>即我们现在知道内存状态下的偏移，需要找到文件状态下的偏移。<br />\n步骤如下图：</p>\n<p><img data-src=\"image002.png\" alt=\"\" /></p>\n<p>step1：内存中的地址减去内存基址得到偏移，即 RVA。<br />\nstep2：循环遍历节表中各个节的信息，判断在哪个节中。（需要满足： 内存偏移 + 节数据没对齐的大小 &gt; image_panyi &gt; 内存偏移）<br />\nstep3: 找出在哪个节后，减去该节在内存中的偏移（VirturalAddress）得到在该节中的相对偏移。<br />\nstep4: 上一步得到的该节的相对偏移 + 该节在文件中的偏移 (PointToRawData)，即得到 FOA</p>\n<p>步骤 1：循环扫描区块表得出每个区块在内存中的起始 RVA（根据 IMAGE_SECTION_HEADER 中的 VirtualAddress 字段），并根据区块的大小（根据 IMAGE_SECTION_HEADER 中的 SizeOfRawData 字段）算出区块的结束 RVA（两者相加即可），最后判断目标 RVA 是否落在该区块内。</p>\n<p>步骤 2：通过步骤 1 定位目标 RVA 处于具体的某个区块中后，那么用目标 RVA 减去该区块的起始 RVA ，这样就能得到目标 RVA 相对于起始地址的偏移量 RVA2.</p>\n<p>步骤 3：在区块表中获取该区块在文件中所处的偏移地址（根据 IMAGE_SECTION_HEADER 中的 PointerToRawData 字段）, 将这个偏移值加上步骤 2 得到的 RVA2 值，就得到了真正的文件偏移地址。</p>\n<ol start=\"2\">\n<li>FOA TO RVA</li>\n</ol>\n<p>现在我们已经知道如何从内存中的偏移转化为文件中的偏移。现在是它的逆过程<br />\n step1: 文件中的地址减去文件基址，得到在文件中的偏移，即 FOA。<br />\nstep2: 循环遍历节表中各个节的信息，判断在哪个节中。（文件对齐 + 文件偏移 &gt; file_panyi &gt; 文件偏移）<br />\nstep3: 找出在哪个节后，减去该节在文件中的偏移（VirturalAddress）得到在该节中的相对偏移。<br />\nstep4: 上一步得到的该节的相对偏移 + 该节在内存中的偏移 (VirtualAddress)，即得到 RVA。</p>\n<p>相对虚拟地址（RVA） = 虚拟内存地址（VA） - 装载基址（Image Base)</p>\n<h1 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h1>\n<p>RVA 转换 FOA，在以后的破解或者保护中只是基本功而已！基础要打牢。</p>\n<h1 id=\"reference\"><a class=\"anchor\" href=\"#reference\">#</a> Reference</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3oxNzgwNTAwODc3NS9hcnRpY2xlL2RldGFpbHMvMTA1Mzc0NTAz\">https://blog.csdn.net/z17805008775/article/details/105374503</span></p>\n<h1 id=\"碰到的问题\"><a class=\"anchor\" href=\"#碰到的问题\">#</a> 碰到的问题</h1>\n<p>2021 年 5 月 12 日 14:08:06</p>\n<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<p>学到重定位表了，发现文件的内存对齐与文件对齐都一样，可偏偏重定位表中的 VirtualAddress (RVA) 0x37000 转换为 FOA 为 0x35000？？？？<br />\n于是下定决心搞定它</p>\n<h1 id=\"原因\"><a class=\"anchor\" href=\"#原因\">#</a> 原因</h1>\n<p>是由于节的 VirtualSize&gt;SizeOfRawData, 则即使文件的内存对齐与文件对齐都相同，节在内存中对齐后的大小和在文件中对齐后的大小也会不同。进而偏移地址也就不同。<br />\n而我对 RVA 和 FOA 转换错误的认为只要 内存对齐与文件对齐相等，则 RVA 一定等于 ROA。</p>\n",
            "tags": [
                "RVA与FOA"
            ]
        },
        {
            "id": "https://or0kit.github.io/Bin/WindowsPE/windowsPE%E7%BB%93%E6%9E%84/",
            "url": "https://or0kit.github.io/Bin/WindowsPE/windowsPE%E7%BB%93%E6%9E%84/",
            "title": "windowsPE结构",
            "date_published": "2020-11-26T08:59:49.000Z",
            "content_html": "<h1 id=\"win32下的pe文件\"><a class=\"anchor\" href=\"#win32下的pe文件\">#</a> win32 下的 PE 文件:</h1>\n<p>PE 是 Portable Execute 的缩写，是可移植可执行的意思，只要文件的数据结构遵循 PE 结构，就属于 PE 文件，windows 中常见的 PE 文件有</p>\n<p><code>*.sys</code>  驱动类文件</p>\n<p><code>*.dll</code>  动态链接库文件</p>\n<p><code>*.exe</code>  可执行文件</p>\n<p><code>*.ocx</code>  对象类别扩充组建</p>\n<p><code>*.obj</code>  目标文件等.</p>\n<p>同样，linux 中使用的是 ELF 格式，和 windows 的 PE 格式有一定的差别，如:</p>\n<p>可重定位文件 <code>*.o</code></p>\n<p>可执行文件如 <code>/bin/ls</code>  等</p>\n<p>共享目标文件 <code>*.so</code></p>\n<p>核心转储文件 core</p>\n<p>都遵循 <code>ELF</code>  数据结构。 unix 从 system v4 开始也使用 <code>ELF</code>  了，而他们的始祖都是 unix system v3 的中 COFF. 如下图:</p>\n<p><img data-src=\"image002.png\" alt=\"\" /></p>\n<h1 id=\"pe文件结构\"><a class=\"anchor\" href=\"#pe文件结构\">#</a> PE 文件结构</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYnMucGVkaXkuY29tL3RocmVhZC0xNDU5MTIuaHRt\">源自看雪论坛</span></p>\n<img data-src=\"/Bin/WindowsPE/windowsPE%E7%BB%93%E6%9E%84/pe.gif\" class=\"\" title=\"PE文件架构\">\n<p>win32 中 PE 的逻辑图:</p>\n<p>一个标准的 PE 文件由 DOS 头，stub,NT 头 (包含 PE 标识，标准 PE 头和可选 PE 头三个成员), 节表，节的内容以及一些为了内存对齐而填充的 0.</p>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<h2 id=\"dos头\"><a class=\"anchor\" href=\"#dos头\">#</a> DOS 头</h2>\n<p>DOS 头就是一堆数据，但它们是一个有序的有含义的组合在一起的结构体。<br />\nDOS 头是为了兼容 DOS 程序而设的，现在基本已经用不上了，仅有两个有意义的字段，所以还是很简单的。<br />\nDOS 头对应的结构体名称叫 IMAGE_DOS_HEADER</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">0x00</span> WORD   e_magic                <span class=\"token operator\">*</span>                <span class=\"token comment\">//\"MZ 标记\" 用于判断是否为可执行文件</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">0x3C</span> DWORD  e_lfanew<span class=\"token punctuation\">;</span>              <span class=\"token operator\">*</span>                <span class=\"token comment\">//PE 头相对于文件的偏移，用于定位 PE 文件</span></pre></td></tr></table></figure><h2 id=\"win32中pe的nt头\"><a class=\"anchor\" href=\"#win32中pe的nt头\">#</a> win32 中 PE 的 NT 头</h2>\n<p>NT 头是 PE 文件中标准 PE 头和可选 PE 头的总体称谓，还包含一个 PE 标识。下面是它在 Visual C++ 6.0 中 WINNT.h 中的定义:</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_IMAGE_NT_HEADERS64</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    DWORD Signature<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    IMAGE_FILE_HEADER FileHeader<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    IMAGE_OPTIONAL_HEADER64 OptionalHeader<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span> IMAGE_NT_HEADERS64<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>PIMAGE_NT_HEADERS64<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_IMAGE_NT_HEADERS</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    DWORD Signature<span class=\"token punctuation\">;</span>                        <span class=\"token comment\">//PE 标识</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    IMAGE_FILE_HEADER FileHeader<span class=\"token punctuation\">;</span>           <span class=\"token comment\">// 标准 PE 头 (也称文件头)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    IMAGE_OPTIONAL_HEADER32 OptionalHeader<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 可选 PE 头</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span> IMAGE_NT_HEADERS32<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>PIMAGE_NT_HEADERS32<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>第一个是 64bit 的 NT 头定义，第二个是 32bit 的。这里只探讨 32bit 的。标准 PE 头也叫文件头，这不重要，知道是那么个东西就行了，高端名词主要是为了严谨而取出来的，但是很多时候很晦涩，通俗易懂更易让人接受.</p>\n<h3 id=\"标准pe头\"><a class=\"anchor\" href=\"#标准pe头\">#</a> 标准 PE 头</h3>\n<p><strong>这些内容源自滴水的课件</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">0x00</span> WORD    Machine<span class=\"token punctuation\">;</span>              <span class=\"token operator\">*</span>\t\t\t\t<span class=\"token comment\">// 程序运行的 CPU 型号：0x0 任何处理器 / 0x14C 386 及后续处理器\t\t\t\t\t\t\t\t\t</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">0x02</span> WORD    NumberOfSections<span class=\"token punctuation\">;</span>     <span class=\"token operator\">*</span>\t\t\t\t<span class=\"token comment\">// 文件中存在的节的总数，如果要新增节或者合并节 就要修改这个值.\t\t\t\t\t\t\t\t\t</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">0x04</span> DWORD   TimeDateStamp<span class=\"token punctuation\">;</span>        <span class=\"token operator\">*</span>\t\t\t\t<span class=\"token comment\">// 时间戳：文件的创建时间 (和操作系统的创建时间无关)，编译器填写的.\t\t\t\t\t\t\t\t\t</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">0x08</span> DWORD   PointerToSymbolTable<span class=\"token punctuation\">;</span> \t\t\t\t\t\t\t\t\t\t\t\t\t</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">0x0C</span> DWORD   NumberOfSymbols<span class=\"token punctuation\">;</span> \t\t\t\t\t\t\t\t\t\t\t\t\t</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token number\">0x10</span> WORD    SizeOfOptionalHeader<span class=\"token punctuation\">;</span> <span class=\"token operator\">*</span>\t\t\t\t<span class=\"token comment\">// 可选 PE 头的大小，32 位 PE 文件默认 E0h 64 位 PE 文件默认为 F0h  大小可以自定义.\t\t\t\t\t\t\t\t\t</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token number\">0x12</span> WORD    Characteristics<span class=\"token punctuation\">;</span>      <span class=\"token operator\">*</span>\t\t\t\t<span class=\"token comment\">// 每个位有不同的含义，可执行文件值为 10F 即 0 1 2 3 8 位置 1</span></pre></td></tr></table></figure><h3 id=\"可选pe头\"><a class=\"anchor\" href=\"#可选pe头\">#</a> 可选 PE 头</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>WORD    Magic<span class=\"token punctuation\">;</span>        <span class=\"token operator\">*</span>\t\t\t<span class=\"token comment\">// 说明文件类型：10B 32 位下的 PE 文件     20B 64 位下的 PE 文件\t\t\t\t\t\t\t\t\t</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>BYTE    MajorLinkerVersion<span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t\t\t\t\t\t\t</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>BYTE    MinorLinkerVersion<span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t\t\t\t\t\t\t</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>DWORD   SizeOfCode<span class=\"token punctuation\">;</span><span class=\"token operator\">*</span>\t\t\t\t<span class=\"token comment\">// 所有代码节的和，必须是 FileAlignment 的整数倍 编译器填的  没用\t\t\t\t\t\t\t\t\t</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>DWORD   SizeOfInitializedData<span class=\"token punctuation\">;</span><span class=\"token operator\">*</span>\t\t\t\t<span class=\"token comment\">// 已初始化数据大小的和，必须是 FileAlignment 的整数倍 编译器填的  没用\t\t\t\t\t\t\t\t\t</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>DWORD   SizeOfUninitializedData<span class=\"token punctuation\">;</span><span class=\"token operator\">*</span>\t\t\t\t<span class=\"token comment\">// 未初始化数据大小的和，必须是 FileAlignment 的整数倍 编译器填的  没用\t\t\t\t\t\t\t\t\t</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>DWORD   AddressOfEntryPoint<span class=\"token punctuation\">;</span><span class=\"token operator\">*</span>\t\t\t\t<span class=\"token comment\">// 程序入口\t\t\t\t\t\t\t\t\t</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>DWORD   BaseOfCode<span class=\"token punctuation\">;</span><span class=\"token operator\">*</span>\t\t\t\t<span class=\"token comment\">// 代码开始的基址，编译器填的   没用\t\t\t\t\t\t\t\t\t</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>DWORD   BaseOfData<span class=\"token punctuation\">;</span><span class=\"token operator\">*</span>\t\t\t\t<span class=\"token comment\">// 数据开始的基址，编译器填的   没用\t\t\t\t\t\t\t\t\t</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>DWORD   ImageBase<span class=\"token punctuation\">;</span><span class=\"token operator\">*</span>\t\t\t\t<span class=\"token comment\">// 内存镜像基址</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>DWORD   SectionAlignment<span class=\"token punctuation\">;</span><span class=\"token operator\">*</span>\t\t\t\t<span class=\"token comment\">// 内存对齐</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>DWORD   FileAlignment<span class=\"token punctuation\">;</span><span class=\"token operator\">*</span>\t\t\t\t    <span class=\"token comment\">// 文件对齐</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>WORD    MajorOperatingSystemVersion<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>WORD    MinorOperatingSystemVersion<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>WORD    MajorImageVersion<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>WORD    MinorImageVersion<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>WORD    MajorSubsystemVersion<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>WORD    MinorSubsystemVersion<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>DWORD   Win32VersionValue<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>DWORD   SizeOfImage<span class=\"token punctuation\">;</span><span class=\"token operator\">*</span>\t\t\t\t<span class=\"token comment\">// 内存中整个 PE 文件的映射的尺寸，可以比实际的值大，但必须是 SectionAlignment 的整数倍</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>DWORD   SizeOfHeaders<span class=\"token punctuation\">;</span><span class=\"token operator\">*</span>\t\t\t\t<span class=\"token comment\">// 所有头 + 节表按照文件对齐后的大小，否则加载会出错。一定是文件对齐的整数倍</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>DWORD   CheckSum<span class=\"token punctuation\">;</span><span class=\"token operator\">*</span>\t\t\t\t<span class=\"token comment\">// 校验和，一些系统文件有要求。用来判断文件是否被修改.</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>WORD    Subsystem<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>WORD    DllCharacteristics<span class=\"token punctuation\">;</span>\t</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>DWORD   SizeOfStackReserve<span class=\"token punctuation\">;</span><span class=\"token operator\">*</span>\t\t\t\t<span class=\"token comment\">// 初始化时保留的堆栈大小 </span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>DWORD   SizeOfStackCommit<span class=\"token punctuation\">;</span><span class=\"token operator\">*</span>\t\t\t\t<span class=\"token comment\">// 初始化时实际提交的大小 </span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>DWORD   SizeOfHeapReserve<span class=\"token punctuation\">;</span><span class=\"token operator\">*</span>\t\t\t\t<span class=\"token comment\">// 初始化时保留的堆大小 </span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>DWORD   SizeOfHeapCommit<span class=\"token punctuation\">;</span><span class=\"token operator\">*</span>\t\t\t\t<span class=\"token comment\">// 初始化时实践提交的大小 </span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>DWORD   LoaderFlags<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>DWORD   NumberOfRvaAndSizes<span class=\"token punctuation\">;</span><span class=\"token operator\">*</span>\t\t\t\t<span class=\"token comment\">// 目录项数目</span></pre></td></tr></table></figure><h2 id=\"节表区段节区节段等等\"><a class=\"anchor\" href=\"#节表区段节区节段等等\">#</a> 节表（区段，节区，节段等等）</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">IMAGE_SIZEOF_SHORT_NAME</span>              <span class=\"token expression\"><span class=\"token number\">8</span></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_IMAGE_SECTION_HEADER</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">0x00</span> BYTE Name<span class=\"token punctuation\">[</span>IMAGE_SIZEOF_SHORT_NAME<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">union</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token number\">0x08</span> DWORD PhysicalAddress<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token number\">0x08</span> DWORD VirtualSize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span> Misc<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token number\">0x0c</span> DWORD VirtualAddress<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token number\">0x10</span> DWORD SizeOfRawData<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token number\">0x14</span> DWORD PointerToRawData<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token number\">0x18</span> DWORD PointerToRelocations<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token number\">0x1c</span> DWORD PointerToLinenumbers<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token number\">0x20</span> WORD NumberOfRelocations<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token number\">0x22</span> WORD NumberOfLinenumbers<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token number\">0x24</span> DWORD Characteristics<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>1、  <code>Name</code>  8 个字节 一般情况下是以 &quot;\\0&quot; 结尾的 ASCII 吗字符串来标识的名称，内容可以自定义。</p>\n<p>注意：该名称并不遵守必须以 &quot;\\0&quot; 结尾的规律，如果不是以 &quot;\\0&quot; 结尾，系统会截取 8 个字节的长度进行处理。</p>\n<p>2、  <code>Misc</code>  双字 是该节在没有对齐前的真实尺寸，该值可以不准确。</p>\n<p>3、  <code>VirtualAddress</code>  节区在内存中的偏移地址。加上 ImageBase 才是在内存中的真正地址。</p>\n<p>4、  <code>SizeOfRawData</code>   节在文件中对齐后的尺寸。</p>\n<p>5、  <code>PointerToRawData</code>  节区在文件中的偏移。</p>\n<p>6、  <code>PointerToRelocations</code>  在 obj 文件中使用。 对 exe 无意义。</p>\n<p>7、  <code>PointerToLinenumbers</code>  行号表的位置 调试的时候使用。</p>\n<p>8、  <code>NumberOfRelocations</code>  在 obj 文件中使用  对 exe 无意义。</p>\n<p>9、  <code>NumberOfLinenumbers</code>  行号表中行号的数量 调试的时候使用。</p>\n<p>10、  <code>Characteristics</code>  节的属性。</p>\n<details><summary>标志(属性块) 常用特征值对照表：</summary><div>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>[值：00000020h] [IMAGE_SCN_CNT_CODE                &#x2F;&#x2F; Section contains code.(包含可执行代码)]</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>[值：00000040h] [IMAGE_SCN_CNT_INITIALIZED_DATA    &#x2F;&#x2F; Section contains initialized data.(该块包含已初始化的数据)]</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>[值：00000080h] [IMAGE_SCN_CNT_UNINITIALIZED_DATA  &#x2F;&#x2F; Section contains uninitialized data.(该块包含未初始化的数据)]</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>[值：00000200h] [IMAGE_SCN_LNK_INFO                &#x2F;&#x2F; Section contains comments or some other type of information.]</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>[值：00000800h] [IMAGE_SCN_LNK_REMOVE              &#x2F;&#x2F; Section contents will not become part of image.]</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>[值：00001000h] [IMAGE_SCN_LNK_COMDAT              &#x2F;&#x2F; Section contents comdat.]</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>[值：00004000h] [IMAGE_SCN_NO_DEFER_SPEC_EXC       &#x2F;&#x2F; Reset speculative exceptions handling bits in the TLB entries for this section.]</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>[值：00008000h] [IMAGE_SCN_GPREL                   &#x2F;&#x2F; Section content can be accessed relative to GP.]</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>[值：00500000h] [IMAGE_SCN_ALIGN_16BYTES           &#x2F;&#x2F; Default alignment if no others are specified.]</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>[值：01000000h] [IMAGE_SCN_LNK_NRELOC_OVFL         &#x2F;&#x2F; Section contains extended relocations.]</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>[值：02000000h] [IMAGE_SCN_MEM_DISCARDABLE         &#x2F;&#x2F; Section can be discarded.]</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>[值：04000000h] [IMAGE_SCN_MEM_NOT_CACHED          &#x2F;&#x2F; Section is not cachable.]</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>[值：08000000h] [IMAGE_SCN_MEM_NOT_PAGED           &#x2F;&#x2F; Section is not pageable.]</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>[值：10000000h] [IMAGE_SCN_MEM_SHARED              &#x2F;&#x2F; Section is shareable (该块为共享块).]</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>[值：20000000h] [IMAGE_SCN_MEM_EXECUTE             &#x2F;&#x2F; Section is executable.(该块可执行)]</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>[值：40000000h] [IMAGE_SCN_MEM_READ                &#x2F;&#x2F; Section is readable.(该块可读)]</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>[值：80000000h] [IMAGE_SCN_MEM_WRITE               &#x2F;&#x2F; Section is writeable.(该块可写)]</pre></td></tr></table></figure></div></details>\n<details><summary>各种常见块(Sections) 的描述：</summary><div>\n<p>[.text]   [指令代码.]<br />\n[.data]   [初始化的数据.]<br />\n[.idata]  [导入表.]<br />\n[.rsrc]   [资源数据.]<br />\n[.reloc]  [基地址重定位表.]<br />\n[.edata]  [输出表.]<br />\n[.tls]    [thread local storage, 线程局部存储器.]<br />\n[.rdata]  [存放调试目录和说明字符串.]</p>\n</div></details>\n<h1 id=\"小记\"><a class=\"anchor\" href=\"#小记\">#</a> 小记</h1>\n<p>BYTE 是字节的意思，字节是计算机存储容量的基本单位，一个字节由 8 位二进制数组成。<br />\nbit 是位的意思，位是计算机中存储数据的最小单位，指二进制数中的一个位数，其值为 “0” 或 “1”</p>\n<pre><code>WORD = 2 * BYTE = 16 bit\n\nDWORD = 2 * WORD = 4 * BYTE = 32 bit\n\nQWORD = 2 * WDORD = 4 * WORD = 8 * BYTE = 64 bit\n</code></pre>\n<p>一个 BYTE 以十六进制显示，是一个 2 位十六进制数.<br />\n 一个 WORD 以十六进制显示，是一个 4 位十六进制数.<br />\n 一个 DWORD 以十六进制显示，是一个 8 位十六进制数.<br />\n 一个 QWORD 以十六进制显示，是一个 16 位十六进制数.</p>\n<h2 id=\"看pe文件查找重要信息的位置\"><a class=\"anchor\" href=\"#看pe文件查找重要信息的位置\">#</a> 看 PE 文件，查找重要信息的位置</h2>\n<ul>\n<li>查找 PE 结构的各个位置\n<ul>\n<li>\n<p>DOS 头 -&gt;NT 头<br />\n直接看 0x3c 到 0x3f 的数据，这个值是 PE 标识符的位置，既_IMAGE_NT_HEADER（NT 头）结构中的 Signature，为 50 45 既 ASCII 码字符 PE</p>\n</li>\n<li>\n<p>NT 头中的_IMAGE_FILE_HEADER FileHeader<br />\nNT 头往后查 0x06（0d06），0x06 与 0x07 记录着节区的个数，如果要新增节或者合并节 就要修改这个值。<br />\nNT 头往后查 0x14（0d20）, 0x14 与 0x15 记录着可选 PE 头的大小<br />\n NT 头往后查 0x18（0d24），就是 _IMAGE_OPTIONAL_HEADER（可选 PE 头）的开始</p>\n</li>\n<li>\n<p>NT 头中的_IMAGE_OPTIONAL_HEADER</p>\n<ul>\n<li>+0x00\tWORD    Magic;   说明文件类型：0x010B 32 位下的 PE 文件     0x20B 64 位下的 PE 文件</li>\n<li>+0x10\tDWORD   AddressOfEntryPoint;\t程序入口</li>\n<li>+0x1C\tDWORD   ImageBase;\t\t        内存镜像基址</li>\n<li>+0x20\tDWORD   SectionAlignment;\t\t内存对齐</li>\n<li>+0x24\tDWORD   FileAlignment;\t\t\t文件对齐</li>\n<li>+0x38\tDWORD   SizeOfImage;\t\t\t内存中整个 PE 文件的映射的尺寸，可以比实际的值大，但必须是 SectionAlignment 的整数倍</li>\n<li>+0x3C\tDWORD   SizeOfHeaders;\t\t\t所有头 + 节表按照文件对齐后的大小，否则加载会出错</li>\n</ul>\n</li>\n<li>\n<p>节表</p>\n<ul>\n<li>位置查找：直接找 NT 头，往后查找 0x14 个字节，记下这里的可选 PE 头的大小。<br />\n从 NT 头开头往后查找 0x18 + 记下的 PE 头的大小，这里就是第一个节表的位置。</li>\n<li>每一个节表的大小为 40 字节。</li>\n<li>+0x00        Name             节表的名字 8 个字节</li>\n<li>+0x0C DWORD  VirtualAddress   节区在内存中的偏移地址。加上 ImageBase 才是在内存中的真正地址</li>\n<li>+0x10 DWORD  SizeOfRawData    节在文件中对齐后的大小</li>\n<li>+0x14 DWORD  PointerToRawData 节区在文件中的偏移</li>\n<li>+0x24 DWORD  Characteristics  节的属性</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>2020 年 11 月 26 日 21:00:35</p>\n<h2 id=\"真正的程序入口\"><a class=\"anchor\" href=\"#真正的程序入口\">#</a> 真正的程序入口</h2>\n<p><code>2021年5月2日17:16:32</code></p>\n<ul>\n<li>0x10\tDWORD   AddressOfEntryPoint;\t程序入口\n<ul>\n<li>0x1C\tDWORD   ImageBase;\t\t        内存镜像基址</li>\n</ul>\n</li>\n</ul>\n<p>AddressOfEntryPoint 只是相对 ImageBase 的偏移。</p>\n<p>真正的程序开始的地方是 <code>ImageBase + AddressOfEntryPoint</code> <br />\n 这也是 OD 开始断的地方。</p>\n",
            "tags": [
                "PE结构",
                "DOS头属性说明",
                "标准PE头属性说明",
                "扩展PE头属性说明",
                "节表属性说明"
            ]
        }
    ]
}