{
    "version": "https://jsonfeed.org/version/1",
    "title": "Or0kit • All posts by \"汇编\" category",
    "description": "临渊羡鱼，不如退而结网",
    "home_page_url": "https://Or0kit.github.io",
    "items": [
        {
            "id": "https://or0kit.github.io/Bin/Assembly/x64%E6%B1%87%E7%BC%96%E5%AD%A6%E4%B9%A0/",
            "url": "https://or0kit.github.io/Bin/Assembly/x64%E6%B1%87%E7%BC%96%E5%AD%A6%E4%B9%A0/",
            "title": "x64汇编学习",
            "date_published": "2022-06-27T08:55:08.000Z",
            "content_html": "<h1 id=\"初学x64汇编\"><a class=\"anchor\" href=\"#初学x64汇编\">#</a> 初学 x64 汇编</h1>\n<p>要学习的 x64 汇编是  <code>AMD64</code>  与  <code>Intel64</code>  的合称。<br />\n最早是 Intel 实现了一套 64 位的指令集，但是不兼容之前的 32 位程序，后来 AMD 实现了一套兼容 32 位程序的 64 位指令集，后来的 64 位程序都按照 AMD 的标准实现了，Intel 也得支持这套指令集了。</p>\n<h1 id=\"寄存器\"><a class=\"anchor\" href=\"#寄存器\">#</a> 寄存器</h1>\n<p>在 16 位和 32 位的编程里，可以使用的通用寄存器是一样的，如下所示：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">8 位</th>\n<th style=\"text-align:left\">16 位</th>\n<th style=\"text-align:left\">32 位</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">al</td>\n<td style=\"text-align:left\">ax</td>\n<td style=\"text-align:left\">eax</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">cl</td>\n<td style=\"text-align:left\">cx</td>\n<td style=\"text-align:left\">ecx</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">dl</td>\n<td style=\"text-align:left\">dx</td>\n<td style=\"text-align:left\">edx</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">bl</td>\n<td style=\"text-align:left\">bx</td>\n<td style=\"text-align:left\">ebx</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ah</td>\n<td style=\"text-align:left\">sp</td>\n<td style=\"text-align:left\">esp</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ch</td>\n<td style=\"text-align:left\">bp</td>\n<td style=\"text-align:left\">ebp</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">dh</td>\n<td style=\"text-align:left\">si</td>\n<td style=\"text-align:left\">esi</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">bh</td>\n<td style=\"text-align:left\">di</td>\n<td style=\"text-align:left\">edi</td>\n</tr>\n</tbody>\n</table>\n<p>在 x64 体系里，在原来的 8 个通用寄存器的基础上新增了 8 个寄存器，并且原来的寄存器也得到了扩展。<br />\n在 64 位编程里可以使用的通用寄存器如下所示：</p>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<p>更直观一点来看：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">8 位</th>\n<th style=\"text-align:left\">16 位</th>\n<th style=\"text-align:left\">32 位</th>\n<th style=\"text-align:left\">64 位</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">al/ah</td>\n<td style=\"text-align:left\">ax</td>\n<td style=\"text-align:left\">eax</td>\n<td style=\"text-align:left\">rax</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">cl/ch</td>\n<td style=\"text-align:left\">cx</td>\n<td style=\"text-align:left\">ecx</td>\n<td style=\"text-align:left\">rcx</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">dl/dh</td>\n<td style=\"text-align:left\">dx</td>\n<td style=\"text-align:left\">edx</td>\n<td style=\"text-align:left\">rdx</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">bl/bh</td>\n<td style=\"text-align:left\">bx</td>\n<td style=\"text-align:left\">ebx</td>\n<td style=\"text-align:left\">rbx</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">spl</td>\n<td style=\"text-align:left\">sp</td>\n<td style=\"text-align:left\">esp</td>\n<td style=\"text-align:left\">rsp</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">bpl</td>\n<td style=\"text-align:left\">bp</td>\n<td style=\"text-align:left\">ebp</td>\n<td style=\"text-align:left\">rbp</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">sil</td>\n<td style=\"text-align:left\">si</td>\n<td style=\"text-align:left\">esi</td>\n<td style=\"text-align:left\">rsi</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">dil</td>\n<td style=\"text-align:left\">di</td>\n<td style=\"text-align:left\">edi</td>\n<td style=\"text-align:left\">rdi</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">r8b</td>\n<td style=\"text-align:left\">r8w</td>\n<td style=\"text-align:left\">r8d</td>\n<td style=\"text-align:left\">r8</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">r9b</td>\n<td style=\"text-align:left\">r9w</td>\n<td style=\"text-align:left\">r9d</td>\n<td style=\"text-align:left\">r9</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">r10b</td>\n<td style=\"text-align:left\">r10w</td>\n<td style=\"text-align:left\">r10d</td>\n<td style=\"text-align:left\">r10</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">r11b</td>\n<td style=\"text-align:left\">r11w</td>\n<td style=\"text-align:left\">r11d</td>\n<td style=\"text-align:left\">r11</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">r12b</td>\n<td style=\"text-align:left\">r12w</td>\n<td style=\"text-align:left\">r12d</td>\n<td style=\"text-align:left\">r12</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">r13b</td>\n<td style=\"text-align:left\">r13w</td>\n<td style=\"text-align:left\">r13d</td>\n<td style=\"text-align:left\">r13</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">r14b</td>\n<td style=\"text-align:left\">r14w</td>\n<td style=\"text-align:left\">r14d</td>\n<td style=\"text-align:left\">r14</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">r15b</td>\n<td style=\"text-align:left\">r15w</td>\n<td style=\"text-align:left\">r15d</td>\n<td style=\"text-align:left\">r15</td>\n</tr>\n</tbody>\n</table>\n<p>在 64 位编程里可以使用 20 个 8 位寄存器和 16 个 16 位、32 位以及 64 位寄存器，寄存器体系得到了完整的补充。</p>\n<p>所有的 16 个寄存器都可以分割出相应的 8 位、16 位或 32 位寄存器。<br />\n在 16 位编程和 32 位编程里， <code>sp</code> 、 <code>bp</code> 、 <code>si</code>  及 <code>di</code>  不能使用低 8 位。<br />\n在 64 位编程里，可以使用分割出的 <code>spl</code> 、 <code>bpl</code> 、 <code>sil</code>  及 <code>dil</code>  低 8 位寄存器。</p>\n<p>64 位的 r8~r15 寄存器分割出相对应的 8 位、16 位及 32 位寄存器形式为: <code>r8b~r15b</code> ,  <code>r8w~r15w</code> , 以及 <code>r8d~r15d</code> 。</p>\n<p>还有  <code>rip</code>  与  <code>rflags</code> ，64 位的 <code>rflags</code>  寄存器高 32 位为保留位，低 32 位与 32 位下的 <code>eflags</code>  寄存器一样。</p>\n<h1 id=\"虚拟地址空间\"><a class=\"anchor\" href=\"#虚拟地址空间\">#</a> 虚拟地址空间</h1>\n<p>在 x64 体系中使用了  <code>canonical</code>  地址形式，但在 x64 体系里只实现了 48 位的  <code>virtual address</code> , 高 16 位被用做符号扩展。</p>\n<p>这高 16 位要么全是 0，要么全是 1，这种形式的地址被称为  <code>canonical</code>  地址，如下所示：</p>\n<p><img data-src=\"image002.png\" alt=\"\" /></p>\n<p>与  <code>canonical</code>  地址形式相对的是  <code>non-canoncial</code>  地址形式，如下所示。在 64 位模式下  <code>non-canonical</code>  地址形式是不合法的。</p>\n<p><img data-src=\"image003.png\" alt=\"\" /></p>\n<p>在 64 位的线性地址空间里，</p>\n<ol>\n<li><code>0x00000000_00000000</code>  到  <code>0x00007FFF_FFFFFFFF</code>  是合法的  <code>canonical</code>  地址。</li>\n<li><code>0x00008000_00000000</code>  到  <code>0xFFFF7FFF_FFFFFFFF</code>  是非法的  <code>non-canonical</code>  地址。</li>\n<li><code>0xFFFF8000_00000000</code>  到  <code>0xFFFFFFFF_FFFFFFFF</code>  是合法的  <code>canonical</code>  地址。</li>\n</ol>\n<p>在 <code>non-canonical</code>  地址形式里，它们的符号扩展位出现了问题。</p>\n<p>看下面的地址：</p>\n<p><code>FFFF8010_bc001000</code> ：这是符合  <code>canonical-address</code>  的地址， MSB 是 bit47，值为 1。 而 bit63 ~ bit48 全是 1</p>\n<p><code>00007c80_b8102040</code> ：这是符合  <code>canonical-address</code>  的地址， MSB 是 bit47，值为 0。 而 bit63 ~ bit48 全是 0</p>\n<p>实质上， <code>canonical-address</code>  地址中 bit63 ~ bit48 是符号扩展位。  <code>bit47</code>  是 64 位地址中最高能表示的位（MSB）。</p>\n<h1 id=\"x64体系中需要注意的事情\"><a class=\"anchor\" href=\"#x64体系中需要注意的事情\">#</a> x64 体系中需要注意的事情</h1>\n<ol>\n<li><strong>对 32 位寄存器的写操作（包括运算结果），会对相应的 64 位寄存器的搞 32 位清零。</strong></li>\n</ol>\n<p>如下所示：</p>\n<p>这是执行  <code>mov eax, 1</code>  指令之前的  <code>rax</code>  寄存器</p>\n<p><img data-src=\"image004.png\" alt=\"\" /></p>\n<p>执行后  <code>rax</code>  寄存器中的值：</p>\n<p><img data-src=\"image005.png\" alt=\"\" /></p>\n<p>此举影响所有的 64 位寄存器。</p>\n<p>另一个例子：</p>\n<p>执行 sub eax,1 之前：</p>\n<p><img data-src=\"image006.png\" alt=\"\" /></p>\n<p>执行之后，只有低 32 位是对的：</p>\n<p><img data-src=\"image007.png\" alt=\"\" /></p>\n<p>还有  <code>xor eax,eax</code>  这个指令并不只是清零  <code>eax</code>  ,  <code>rax</code>  也会被清零。</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>33C0     | xor eax,eax</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>48:33C0  | xor rax,rax</pre></td></tr></table></figure><p>以上汇编代码的作用是一样的都会将 <code>rax</code>  寄存器清零，但生成的硬编码是不一样的，所以编译器一般想要清空  <code>rax</code>  寄存器就会生成  <code>xor eax,eax</code>  汇编代码。</p>\n<p>64 位编程中代码的函数的返回值  <code>return 0</code>  那么就会生成 <code>xor eax,eax</code>  汇编代码。</p>\n<ol start=\"2\">\n<li><strong>立即数的使用，优先使用 32 位扩展，64 位立即数指令较少。</strong></li>\n</ol>\n<p>当你在 x64dbg 中输入  <code>mov rax,1</code>  它会自动生成  <code>mov eax, 1</code>   如果数值较大的话就会使用 rax，编译器也会对这些语句进行优化，优先使用硬编码短的。</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>48:C7C0 FFFFFFFF           | mov rax,FFFFFFFFFFFFFFFF           |</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>48:B8 FFFFFFFFFFFFFFFF     | mov rax,FFFFFFFFFFFFFFFF           |</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>66:B8 0100                 | mov ax,1                           |</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>B0 01                      | mov al,1                           |</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>B8 01000000                | mov eax,1                          |</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>48:B8 8967452301000000     | mov rax,123456789                  |</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>48:B8 0100000000000000     | mov rax,1                          |</pre></td></tr></table></figure><p>64 位指令比较少，如  <code>push</code>  指令操作立即数，只能操作 32 位立即数。</p>\n<p><img data-src=\"image008.png\" alt=\"\" /></p>\n<p>好多指令都是不支持 8 字节的立即数。</p>\n<p>如果想要把 <code>0x123456789</code>  这样的立即数压入栈中就必须得分为两步：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>mov rax,0x123456789;</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>pus rax</pre></td></tr></table></figure><p>此外 x64 下还有其他的 nop 指令，如下所示：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>| 90                         | nop                                    |</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>| 0F1FFE                     | nop esi,edi                            |</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>| 0F1F1D 1D1222CC            | nop dword ptr ds:[7FF73A025174],ebx    |</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>| 0F1F11                     | nop dword ptr ds:[rcx],edx             |</pre></td></tr></table></figure><p><strong>与硬编码 0x90 不同，开头为 0x0F1F。</strong></p>\n<p>逻辑上这些汇编代码与 <code>nop</code>  指令没有任何区别。</p>\n<p>在我看的这个教程中称这些汇编代码的出现只是编译器为了字节对齐。</p>\n<ol start=\"3\">\n<li><strong>内存优先使用相对偏移寻址，直接寻址指令较少。</strong></li>\n</ol>\n<p>例如 mov 指令：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>00007FF76DE03F6C       | 48:8B05 01000000           | mov rax,qword ptr ds:[7FF76DE03F74]    |</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>00007FF76DE03F73       | 90                         | nop                                    |</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>00007FF76DE03F74       | 90                         | nop                                    |</pre></td></tr></table></figure><p>硬编码是  <code>48:8B05 + 4个字节相对地址偏移</code>  便是  <code>mov rax,qword ptr ds:[此指令地址加上此指令长度加上相对偏移]</code></p>\n<p><strong>需要注意的是：4 个字节相对地址偏移，因为有正负之分所以有效的寻址范围只有正负偏移 2GB</strong></p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>00007FF76DE03F5A       | 48:A1 0000000000000000     | mov rax,qword ptr ds:[0]               |</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>00007FF76DE03F64       | 48:8B0425 00000000         | mov rax,qword ptr ds:[0]               |</pre></td></tr></table></figure><p>这些是直接寻址的。</p>\n<p>例如 add 指令：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>00007FF76DE03F73       | 48:010425 00000000         | add qword ptr ds:[0],rax               |</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>00007FF76DE03F7B       | 48:0105 00000000           | add qword ptr ds:[7FF76DE03F82],rax    |</pre></td></tr></table></figure><p>如这两个 add 指令，都是只能操作 4 个字节的相对地址偏移。</p>\n<p>还有一件事</p>\n<p>我们编写一个 x64 的程序在 vs2019 中看其反汇编：</p>\n<p><img data-src=\"image009.png\" alt=\"\" /></p>\n<p>而在 IDA 中查看其反汇编：</p>\n<p><img data-src=\"image010.png\" alt=\"\" /></p>\n<p>发现其前面加了 cs 段前缀，这是 IDA 的一种错误，观察其硬编码岂可已发现，我们可以在 x64dbg 中实验一下：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>00007FF76DE03F82       | 48:C705 00000000 78563412        | mov qword ptr ds:[7FF76DE03F8D],12345678      |</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>00007FF76DE03F8D       | 2E48:C705 00000000 78563412      | mov qword ptr cs:[7FF76DE03F99],12345678      |</pre></td></tr></table></figure><p>也是可以发现如果是 cs 段的话前面要加上 <code>0x2E</code>  的硬编码前缀。</p>\n<p>那么 IDA 为什么会这么做呢？</p>\n<p>因为这个指令都是相对偏移寻址，而下一个指令是绝对地址偏移，是处于 PE 结构中的代码段的，所以 IDA 识别成了 cs 段。</p>\n<ol start=\"4\">\n<li><strong>各种 jmp 比较</strong></li>\n</ol>\n<p>在 x64 地址空间中，如果加载一个 dll，那么想让程序跳转过去，不一定能实现，因为地址之间相距的大小可能超过了 2GB,</p>\n<p><img data-src=\"image011.png\" alt=\"\" /></p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>00007FF76DE03F99       | EB 00                            | jmp notepad.7FF76DE03F9B                      |</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>00007FF76DE03F9B       | E9 00000000                      | jmp notepad.7FF76DE03FA0                      |</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>00007FF76DE03FA0       | FF25 00000000                    | jmp qword ptr ds:[7FF76DE03FA6]               |</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>00007FF76DE03FA6       | FF2425 00000000                  | jmp qword ptr ds:[0]                          |</pre></td></tr></table></figure><ol start=\"5\">\n<li><strong>应有：hook 的指令选择</strong></li>\n</ol>\n<p>上面说了如果地址空间超过 4GB 大小，一般会这样进行跳转：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>00007FF76DE03FAD       | 48:B8 8967452301000000           | mov rax,123456789                             |</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>00007FF76DE03FB7       | FFE0                             | jmp rax                                       |</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>&#x2F;&#x2F; 或者这样</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>00007FF76DE03FBA       | 48:B8 8967452301000000           | mov rax,123456789                             |</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>00007FF76DE03FC4       | 50                               | push rax                                      |</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>00007FF76DE03FC5       | C3                               | ret                                           |</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>&#x2F;&#x2F; 最好是这样，既保存了 rax 寄存器的值，又可以跳转（13 个字节）</pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>00007FF76DE03FC7       | 50                               | push rax                                      |</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>00007FF76DE03FC8       | 48:B8 8967452301000000           | mov rax,123456789                             |</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>00007FF76DE03FD2       | C3                               | ret                                           |</pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>&#x2F;&#x2F; 21 个字节 </pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>00007FF76DE03FD4       | 48:83EC 08                       | sub rsp,8                                     |</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>00007FF76DE03FD8       | C70424 78563412                  | mov dword ptr ss:[rsp],12345678               |</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>00007FF76DE03FDF       | C74424 04 BC9A0000               | mov dword ptr ss:[rsp+4],9ABC                 |</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>00007FF76DE03FE7       | C3                               | ret                                           |</pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>&#x2F;&#x2F; 13 个字节</pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>00007FF76DE03FE9       | 68 78563412                      | push 12345678                                 |</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>00007FF76DE03FEE       | C74424 04 BC9A0000               | mov dword ptr ss:[rsp+4],9ABC                 |</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>00007FF76DE03FF6       | C3                               | ret                                           |</pre></td></tr></table></figure><p>x64 汇编没有类似  <code>pushad</code>  的保存寄存器的指令，想要保存寄存器只能一个一个保存。</p>\n<h1 id=\"调用约定\"><a class=\"anchor\" href=\"#调用约定\">#</a> 调用约定</h1>\n<p>强调一点：<strong>我们这次所学的调用约定只是微软编译器的习惯用法，并不是一种强制的东西，如果我们有一个函数只是自己调用的话，那么我们怎么设计它都可以的，只要堆栈平衡。</strong></p>\n<p>CPU 层面并没有限制调用约定，只是微软编译器生成的函数，通常是这个规则。这是微软优化好的，如果我们有更好的，也可以自己设定函数约定。</p>\n<p>微软中的函数也有这种情况，如果一个函数只被另一个函数调用，那么这两个函数之间的调用约定也可能被简化。</p>\n<hr />\n<hr />\n<hr />\n<h2 id=\"x64调用约定\"><a class=\"anchor\" href=\"#x64调用约定\">#</a> x64 调用约定</h2>\n<p>在 32 位编程中有 3 种调用约定  <code>__cdecl</code> ,   <code>__stdcall</code> ,  <code>__fastcall</code> ，而在 64 位编程中只有一种调用约定，为了兼容 32 位的代码这三种调用约定在 64 位编程中都失效了，例如系统 API 的头文件中的一般会有  <code>WINAPI</code>  这个调用约定，这是一个宏，其本质是 <code>__stdcall</code> ，所以编译器忽略了，写不写都一样。</p>\n<p>接下来我们从汇编的角度一步一步来了解 x64 的调用约定。</p>\n<ol>\n<li>调用方<strong>分配</strong>和<strong>清理</strong>参数所用的栈空间（外平栈）</li>\n<li>前 4 个参数使用  <code>rcx</code>   <code>rdx</code>   <code>r8</code>   <code>r9</code>  传递</li>\n<li>即使是寄存器传参，也要分配参数栈空间</li>\n<li>对于不定长参数，调用前至少分配 4 个参数</li>\n<li>易变寄存器有：  <code>rax</code>   <code>rcx</code>   <code>rdx</code>   <code>r8</code>   <code>r9</code>   <code>r10</code>   <code>r11</code> 。  <code>push</code>   <code>pop</code>  指令仅用来保存非易变寄存器，其他栈指针操作显式写寄存器  <code>rsp</code>  实现</li>\n<li>进入  <code>call</code>  之前  <code>rsp</code>  满足  <code>0x10</code>  字节对齐</li>\n<li>通常不适用  <code>rbp</code>  寻址栈内存，所以  <code>rsp</code>  在函数帧中尽量保持稳定（一次性分配局部变量和参数空间）</li>\n</ol>\n<h2 id=\"在cc中调用汇编\"><a class=\"anchor\" href=\"#在cc中调用汇编\">#</a> 在 C/C++ 中调用汇编</h2>\n<p>在 vs2019 中创建一个 cpp 文件和 asm 文件：</p>\n<p><img data-src=\"image012.png\" alt=\"\" /></p>\n<p>我们还要对 asm 文件做一些设置：</p>\n<p>对其右键点击属性：</p>\n<p><img data-src=\"image013.png\" alt=\"\" /></p>\n<p>然后这样设置；</p>\n<p><img data-src=\"image014.png\" alt=\"\" /></p>\n<p>点击应用后会出来自定义生成工具的一些设置，设置命令行编译以及输出，连接对象也要选择是：</p>\n<p><img data-src=\"image015.png\" alt=\"\" /></p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>命令行编译：ml64 &#x2F;Fo $(IntDir)%(fileName).obj&#x2F;c %(fileName).asm</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>输出：$(IntDir)%(fileName).obj</pre></td></tr></table></figure><p>此时我们的 asm 就可以参与生成了</p>\n<h2 id=\"实验验证\"><a class=\"anchor\" href=\"#实验验证\">#</a> 实验验证</h2>\n<p>前两条都很好理解，接下来亲自实验以代码来验证一下上面所说的 7 条约定。</p>\n<h3 id=\"验证第三条\"><a class=\"anchor\" href=\"#验证第三条\">#</a> 验证第三条</h3>\n<p>在汇编中写下如下代码：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>func Prot</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>.code</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>asm_fun PROC</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tmov rcx,1;</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tcall func;</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tret</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>asm_fun ENDP\t</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>END</pre></td></tr></table></figure><p>在汇编代码中我们调用函数之前没有去平衡堆栈。</p>\n<p>在 cpp 文件中写下如下代码：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;Windows.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token string\">\"C\"</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">void</span> __cdecl <span class=\"token function\">asm_fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span>ULONG64 a1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a1: %p\\n\"</span><span class=\"token punctuation\">,</span> a1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token function\">asm_fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>即使是用寄存器传参还是会报错：</p>\n<p><img data-src=\"image016.png\" alt=\"\" /></p>\n<p>我们可以直接在反汇编中查看原因：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>10:     void func(ULONG64 a1)</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    11:     &#123;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>00007FF67EB518F0  mov         qword ptr [rsp+8],rcx  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>00007FF67EB518F5  push        rbp  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>00007FF67EB518F6  push        rdi  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>00007FF67EB518F7  sub         rsp,0E8h  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>00007FF67EB518FE  lea         rbp,[rsp+20h]  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    12:         printf(&quot;a1: %p\\n&quot;, a1);</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>00007FF67EB51903  mov         rdx,qword ptr [a1]  </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>00007FF67EB5190A  lea         rcx,[string &quot;a1: %p\\n&quot; (07FF67EB59C28h)]  </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>00007FF67EB51911  call        printf (07FF67EB51190h)</pre></td></tr></table></figure><p><strong>可以发现调用函数后，会在函数中把寄存器传参的值再取出来放到栈中，而我们没有在栈外平衡堆栈，所以这里把 rcx 里的值也就是我们的参数放到了 rsp+8 中，而这个值也就是函数 ret 返回的地址，所以程序会报错。</strong></p>\n<p>所以我们还是要为其分配栈空间，汇编代码如下：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>func Prot</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>.code</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>asm_fun PROC</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tmov rcx,1;</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  sub rsp ,8h;</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tcall func;</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  add rsp, 8h;</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tret</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>asm_fun ENDP\t</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>END</pre></td></tr></table></figure><p>这样就没有错误了。</p>\n<p>当调用的函数有 4 个以上的参数时：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;Windows.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token string\">\"C\"</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">void</span> __cdecl <span class=\"token function\">asm_fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span>ULONG64 a1<span class=\"token punctuation\">,</span> ULONG64 a2<span class=\"token punctuation\">,</span> ULONG64 a3<span class=\"token punctuation\">,</span> ULONG64 a4<span class=\"token punctuation\">,</span> ULONG64 a5<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a1: %p\\n\"</span><span class=\"token punctuation\">,</span> a1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a2: %p\\n\"</span><span class=\"token punctuation\">,</span> a2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a3: %p\\n\"</span><span class=\"token punctuation\">,</span> a3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a4: %p\\n\"</span><span class=\"token punctuation\">,</span> a4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a5: %p\\n\"</span><span class=\"token punctuation\">,</span> a5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token function\">asm_fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>汇编代码中的平衡栈的操作如下：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>func Prot</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>.code</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>asm_fun PROC</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tmov rcx,1;\t</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tmov rdx,2;</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tmov r8,3;</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tmov r9,4;</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tpush 5;</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tsub rsp ,20h;</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\tcall func;</pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tadd rsp,28h;</pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tret</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>asm_fun ENDP\t</pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>END</pre></td></tr></table></figure><p>原因是我们的栈空间：</p>\n<p>这是我们执行完 call 指令后，进入到函数中时的栈空间结构图：</p>\n<p><img data-src=\"image017.png\" alt=\"\" /></p>\n<p><strong>在上面的汇编代码中，我们先用寄存器传递了 4 个参数，然后执行了 push 指令向栈中压入了一个值 5，push 指令执行完后 rsp+8 指向这个 5，然后我们把 rsp 减去 0x20, 既腾出了预留给寄存器传参用的空间，然后执行了 call 指令，函数的返回地址压入了栈中，此时栈顶指向了函数的返回地址。</strong></p>\n<h3 id=\"验证第四条\"><a class=\"anchor\" href=\"#验证第四条\">#</a> 验证第四条</h3>\n<p>有不定长参数的函数如： <code>printf</code></p>\n<p>我们可以更进其反汇编 c 查看一下：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>00007FF6C8C618B0 48 89 4C 24 08       mov         qword ptr [rsp+8],rcx  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>00007FF6C8C618B5 48 89 54 24 10       mov         qword ptr [rsp+10h],rdx  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>00007FF6C8C618BA 4C 89 44 24 18       mov         qword ptr [rsp+18h],r8  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>00007FF6C8C618BF 4C 89 4C 24 20       mov         qword ptr [rsp+20h],r9</pre></td></tr></table></figure><p>这是函数开头，可以看到函数是直接使用了编译器传参用的默认栈空间。</p>\n<h3 id=\"验证第五条\"><a class=\"anchor\" href=\"#验证第五条\">#</a> 验证第五条</h3>\n<p>知道了什么是易变寄存器，接下来验证一下第六条： <code>push</code>   <code>pop</code>  指令仅用来保存非易变寄存器，其他栈指针操作显式写寄存器  <code>rsp</code>  实现。</p>\n<p>对于这个约定，我们也可以查看用微软编译器生成代码的反汇编，查看其是否遵守这个约定。</p>\n<p><img data-src=\"image018.png\" alt=\"\" /></p>\n<p>这是我在 IDA 中搜索的 push 指令，可以发现 <code>push</code>  指令并没有操作易变寄存器，都是用来保存非易变寄存器的。</p>\n<p>也并没有我们上面汇编代码中的  <code>push 5</code>  这个指令，那么我们要如何写呢？</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>option casemap:none</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>func Proto</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>.code</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>asm_fun PROC</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tmov rcx,1;\t</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tmov rdx,2;</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tmov r8,3;</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tmov r9,4;</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tsub rsp ,28h;</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\tmov qword ptr [rsp+20h],5;</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tcall func;</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tadd rsp,28h;</pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tret</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>asm_fun ENDP\t</pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>END</pre></td></tr></table></figure><p><code>push 5</code>  指令变成了 <code>\tsub rsp ,28h;</code>  和\t <code>mov qword ptr [rsp+20h],5;</code>  两句指令。</p>\n<p>其实写之前可以编写一个程序去查看一下微软编译器会如何去做，我们编写一个 4 个以上参数的函数，然后看一下其反汇编：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>20: int main()</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    21: &#123;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>0000000140011983  sub         rsp,0F8h  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>000000014001198A  lea         rbp,[rsp+30h]  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    22:     func(1,2,3,4,5);</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>000000014001198F  mov         qword ptr [rsp+20h],5  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>0000000140011998  mov         r9d,4  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>000000014001199E  mov         r8d,3  </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>00000001400119A4  mov         edx,2  </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>00000001400119A9  mov         ecx,1  </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>00000001400119AE  call        func (014001119Fh)</pre></td></tr></table></figure><p>可以看到我们的做法和编译器的差不多一样了。</p>\n<h3 id=\"验证第七条\"><a class=\"anchor\" href=\"#验证第七条\">#</a> 验证第七条</h3>\n<p>通常不适用  <code>rbp</code>  寻址栈内存，所以  <code>rsp</code>  在函数帧中尽量保持稳定（一次性分配局部变量和参数空间）</p>\n<p>想要理解这句话我们需要先写一段汇编代码：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>option casemap:none</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>func Proto</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>printf proto\t</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>.data</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>pStr DB &#39;This is asm_fun&#39;, 0AH,00H</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>.code</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>asm_fun PROC</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tlea rcx,[pStr];</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tsub rsp,20h; printf 函数是可变长参数，所以要分配 0x20 栈空间</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tcall printf;</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\tadd rsp,20h;</pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tmov rcx,1;\t</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tmov rdx,2;</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tmov r8,3;</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\tmov r9,4;</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\tsub rsp ,28h;</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\tmov qword ptr [rsp+20h],5;</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\tcall func;</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\tadd rsp,28h;</pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\tret</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>asm_fun ENDP\t</pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>END</pre></td></tr></table></figure><p>这段汇编代码很多简单就是分别调用了两个函数，分别平衡了堆栈。<br />\n这样来回移动 <code>rsp</code>  显然是不合理的，会影响效率的，所以我们可以一次性分配局部变量和参数空间。</p>\n<p>上面的汇编代码可以更改为：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>option casemap:none</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>func Proto</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>printf proto\t</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>.data</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>pStr DB &#39;This is asm_fun&#39;, 0AH,00H</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>.code</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>asm_fun PROC</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tlea rcx,[pStr];\t</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tsub rsp ,28h;</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tcall printf;</pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tmov rcx,1;\t</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tmov rdx,2;</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tmov r8,3;</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tmov r9,4;</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\tmov qword ptr [rsp+20h],5;</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\tcall func;</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\tadd rsp,28h;</pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\tret</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>asm_fun ENDP\t</pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>END</pre></td></tr></table></figure><p>运行一样没有问题，并且可以观察一下编译器生成的汇编代码是否都是这样一次性分配好栈空间的（是的）。</p>\n<p>也因此我们无法在函数外部通过对 <code>rsp</code>  的加减来分析函数的参数个数的，具体得进入函数中取看。</p>\n<h3 id=\"验证第六条\"><a class=\"anchor\" href=\"#验证第六条\">#</a> 验证第六条</h3>\n<h1 id=\"seh\"><a class=\"anchor\" href=\"#seh\">#</a> SEH</h1>\n",
            "tags": [
                "x64"
            ]
        },
        {
            "id": "https://or0kit.github.io/Bin/Assembly/HardCode/%E7%A1%AC%E7%BC%96%E7%A0%81-Intel%E6%8C%87%E4%BB%A4%E7%BC%96%E7%A0%81%E7%BB%93%E6%9E%84/",
            "url": "https://or0kit.github.io/Bin/Assembly/HardCode/%E7%A1%AC%E7%BC%96%E7%A0%81-Intel%E6%8C%87%E4%BB%A4%E7%BC%96%E7%A0%81%E7%BB%93%E6%9E%84/",
            "title": "硬编码-Intel指令编码结构",
            "date_published": "2022-04-11T02:24:20.000Z",
            "content_html": "<h1 id=\"楔子\"><a class=\"anchor\" href=\"#楔子\">#</a> 楔子</h1>\n<p>之前看过，不过并没有总结，今天总结一下，以后有时间了，写一个反汇编引擎。<br />\n学习 Intel 的硬编码指令格式主要就是查表了，记住那几张表就好了。</p>\n<h1 id=\"什么是硬编码\"><a class=\"anchor\" href=\"#什么是硬编码\">#</a> 什么是硬编码</h1>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<p>在计算机上程序不过是一堆二进制数字，其想要运行起来，即被 CPU 当成指令执行，是要遵循 Intel 的指令格式。</p>\n<p><img data-src=\"image002.png\" alt=\"\" /></p>\n<p>每一条指令，最短 1 字节，最长 15 字节</p>\n<p>1、Intel 对指令参数的设计了一种表示方式，格式是 Zz 一个大写字母加上一个小写字母。</p>\n<p>2、大写字母表示寻找方式编码（寄存器，ModR/M，跳转相对地址，16:32 地址格式等等），从 A-Z 共 26 种.</p>\n<p>3、小写字母表示操作数的类型（byte，word，dword，fword 等等不定，根据 cpu 模式或改写指令决定）<br />\nz 有大约十几种表示方式。</p>\n<p>4、他们的组合再加上纯寄存器表示了 intel 的所有操作对象。</p>\n<p>具体参见 Intel 开发手卷第 2 卷的 1467 页。有详细的介绍。</p>\n<h1 id=\"经典定长指令\"><a class=\"anchor\" href=\"#经典定长指令\">#</a> 经典定长指令</h1>\n<h2 id=\"会修改寄存器的定长指令\"><a class=\"anchor\" href=\"#会修改寄存器的定长指令\">#</a> 会修改寄存器的定长指令。</h2>\n<ol>\n<li>PUSH/POP</li>\n</ol>\n<p>0x50 \tPUSH EAX<br />\n0x51 \tPUSH ECX<br />\n0x52 \tPUSH EDX<br />\n0x53 \tPUSH EBX<br />\n0x54 \tPUSH ESP<br />\n0x55 \tPUSH EBP<br />\n0x56 \tPUSH ESI<br />\n0x57 \tPUSH EDI</p>\n<p>0x58\tPOP EAX<br />\n0x59\tPOP ECX<br />\n0x5A\tPOP EDX<br />\n0x5B \tPOP EBX<br />\n0x5C \tPOP ESP<br />\n0x5D \tPOP EBP<br />\n0x5E\tPOP ESI<br />\n0x5F \tPOP EDI</p>\n<p><img data-src=\"image003.png\" alt=\"\" /></p>\n<ol start=\"2\">\n<li>INC/DEC：</li>\n</ol>\n<p>0x40 - 0x47\t\tINC ERX<br />\n0x48 - 0x4F\t\tDEC ERX</p>\n<p><img data-src=\"image004.png\" alt=\"\" /></p>\n<ol start=\"3\">\n<li>MOV Rb, Ib</li>\n</ol>\n<p>0xb0 - 0xb7\t\tMOV Rb, Ib</p>\n<ol start=\"4\">\n<li>MOV ERX, Id</li>\n</ol>\n<p>0xb8 - 0xbF\t\tMOV ERX, Id</p>\n<p><img data-src=\"image006.png\" alt=\"\" /></p>\n<ol start=\"5\">\n<li>XCHG EAX, ERX</li>\n</ol>\n<p>0x90 - 0x97\t\tXCHG EAX, ERX</p>\n<p><img data-src=\"image005.png\" alt=\"\" /></p>\n<p>以下的这些知识在 Intel 白皮书上都有，在此做个总结。</p>\n<h3 id=\"特点\"><a class=\"anchor\" href=\"#特点\">#</a> 特点</h3>\n<p>1、记住 32 位、16、8 位的通用寄存器，按照顺序记住.</p>\n<p>EAX ECX EDX EBX ESP EBP ESI EDI<br />\nAX CX DX BX SP BP SI DI<br />\nAL CL DL BL<br />\nAH CH DH BH</p>\n<p>SP BP SI DI 的低 8 位是不能用的，但在 64 位中可以使用分割出的 spl bpl sil dil。</p>\n<p>2、将操作数编码到指令当中</p>\n<h3 id=\"读表\"><a class=\"anchor\" href=\"#读表\">#</a> 读表</h3>\n<p>1、i64/o64/d64</p>\n<p>i64：64 位无效</p>\n<p>o64：只 64 位有效</p>\n<p>d64：64 位模式下，操作数宽度默认为 64 位</p>\n<p>2、关于寄存器</p>\n<p>(1) 当操作码需要使用寄存器做为操作数时，寄存器的名字说明其宽度是 64、32、16、8 位.</p>\n<p>(2) eXX 比如 eAX 可以表示 AX EAX</p>\n<p>(3) rXX 比如 rAX 可以表示 AX EAX RAX</p>\n<h2 id=\"会修改eip的定长指令\"><a class=\"anchor\" href=\"#会修改eip的定长指令\">#</a> 会修改 EIP 的定长指令</h2>\n<ol>\n<li>0x70 - 0x7F</li>\n</ol>\n<p>条件跳转，后跟一个字节立即数的偏移 (有符号)，共两个字节。</p>\n<p>如果条件成立，跳转到 当前指令地址 + 当前指令长度 + Ib</p>\n<p>最大值：向前跳 7f，向后跳 80</p>\n<p>0x70  JO<br />\n0x71\tJNO<br />\n0x72\tJB/JNAE/JC<br />\n0x73\tJNB/JAE/JNC<br />\n0x74\tJZ/JE<br />\n0x75\tJNZ/JNE<br />\n0x76\tJBE/JNA<br />\n0x77\tJNBE/JA<br />\n0x78\tJS<br />\n0x79\tJNS<br />\n0x7A\tJP/JPE<br />\n0x7B\tJNP/JPO<br />\n0x7C\tJL/JNGE<br />\n0x7D\tJNL/JGE<br />\n0x7E\tJLE/JNG<br />\n0x7F\tJNLE/JG</p>\n<p><img data-src=\"image007.png\" alt=\"\" /></p>\n<ol start=\"2\">\n<li>0x0F 0x80 - 0x0F 0x8F</li>\n</ol>\n<p>条件跳转，后跟四个字节立即数的偏移 (有符号)，共五个字节。</p>\n<p>如果条件成立，跳转到 当前指令地址 + 当前指令长度 + Id</p>\n<p>最大值：向前跳 7FFFFFFFF，向后跳 80000000</p>\n<p>0x0F 0x80  \tJO<br />\n0x0F 0x81\t\tJNO<br />\n0x0F 0x82\t\tJB/JNAE/JC<br />\n0x0F 0x83\t\tJNB/JAE/JNC<br />\n0x0F 0x84\t\tJZ/JE<br />\n0x0F 0x85\t\tJNZ/JNE<br />\n0x0F 0x86\t\tJBE/JNA<br />\n0x0F 0x87\t\tJNBE/JA<br />\n0x0F 0x88\t\tJS<br />\n0x0F 0x89\t\tJNS<br />\n0x0F 0x8A\t\tJP/JPE<br />\n0x0F 0x8B\t\tJNP/JPO<br />\n0x0F 0x8C\t\tJL/JNGE<br />\n0x0F 0x8D\t\tJNL/JGE<br />\n0x0F 0x8E\t\tJLE/JNG<br />\n0x0F 0x8F\t\tJNLE/JG</p>\n<p><img data-src=\"image008.png\" alt=\"\" /></p>\n<ol start=\"3\">\n<li>其他指令</li>\n</ol>\n<p>0xE0  \tLOOPNE/LOOPNZ Ib (Jb)\t\t\t共 2 字节<br />\n ECX = ECX - 1  当 ZF = 0 &amp;&amp; ECX!=0 时跳转到 当前指令地址 + 当前指令长度 + Ib</p>\n<p>0XE1     \tLOOPE/LOOPZ Ib (Jb)\t\t\t共 2 字节<br />\n ECX = ECX - 1  当 ZF = 1 &amp;&amp; ECX != 0 时跳转到 当前指令地址 + 当前指令长度 + Ib</p>\n<p>0XE2\tLOOP Ib (Jb)\t\t\t共 2 字节<br />\n ECX = ECX - 1  当 ECX!=0 时跳转到 当前指令地址 + 当前指令长度 + Ib</p>\n<p>0XE3\tJrCXZ Ib (Jb) (在 32 位模式中，rCX 为 ECX)\t\t\t\t\t共 2 字节<br />\n当 ECX = 0 时跳转到 当前指令地址 + 当前指令长度 + Ib<br />\n (自己控制步长)</p>\n<p><img data-src=\"image009.png\" alt=\"\" /></p>\n<p>0xE8\tCALL Id (Jd)  \t\t共 5 字节<br />\n CALL 指令的下一条指令地址入栈后，跳转到 当前指令地址 + 当前指令长度 + Id</p>\n<p>0xE9\tJMP Id (Jd)\t\t共 5 字节<br />\n跳转到 当前指令地址 + 当前指令长度 + Id</p>\n<p><strong>8 个段寄存器： ES CS SS DS FS GS LDTR TR (顺序固定)(段寄存器实际是个结构体，共 96 位，其中仅 16 位是汇编指令可以访问到的）</strong></p>\n<p>0xEA\tJMP Ap （Ap：六字节长度的直接地址）\t\t\t\t共 7 字节<br />\n JMP CS:Id  将 Ap 中的高 2 位赋值给 CS，低 4 位直接赋值给 EIP， 即跳转</p>\n<p>EA 12345678 1B00     JMP FAR 001B:78563412</p>\n<p><img data-src=\"image010.png\" alt=\"\" /></p>\n<p>0xEB\tJMP Ib (Jb) （短跳）<br />\n跳转到 当前指令地址 + 当前指令长度 + Ib</p>\n<p>0xC3 \tRET\t共 1 字节<br />\n EIP 出栈</p>\n<p>0xC2\tRET Iw\t共 3 字节<br />\n EIP 出栈后，ESP = ESP + Iw</p>\n<p>0XCB\tRETF （return far） 共 1 字节<br />\n出栈 8 个字节，低 4 个字节赋值给 EIP, 高 4 个字节中低 2 位赋值给 CS</p>\n<p>0xCA\tRETF Iw\t共 3 字节<br />\n出栈 8 个字节，低 4 个字节赋值给 EIP, 高 4 个字节中低 2 位赋值给 CS 后，ESP = ESP + Iw</p>\n<p>ret  -&gt; pop eip<br />\nretf -&gt; pop eip, pop cs</p>\n<p><img data-src=\"image011.png\" alt=\"\" /></p>\n<h1 id=\"经典变长指令\"><a class=\"anchor\" href=\"#经典变长指令\">#</a> 经典变长指令</h1>\n<h2 id=\"经典变长指令之modrm\"><a class=\"anchor\" href=\"#经典变长指令之modrm\">#</a> 经典变长指令之 ModR/M</h2>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>0x88  MOV Eb, Gb\t\t\tG：通用寄存器</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>0x89\tMOV Ev, Gv\t\t\tE：寄存器 &#x2F; 内存</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>0x8A\tMOV Gb, Eb\t\t\tb：字节</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>0x8B\tMOV Gv, Ev\t\t\tv：Word, doubleword or quadword</pre></td></tr></table></figure><p>当指令中出现内存操作对象的时候，就需要在操作码后面附加一个字节来进行补充说明，这个字节被称为 ModR/M。\t\t\t<br />\n该字节的 8 个比特位被分成了三部分：</p>\n<table>\n<thead>\n<tr>\n<th>7-6</th>\n<th>5-3</th>\n<th>2-0</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Mod</td>\n<td>Reg/Opcode</td>\n<td>R/M</td>\n</tr>\n</tbody>\n</table>\n<p><strong>其中，Reg/Opcode (第 3、4、5 位，共 3 个字节) 描述指令中的 G 部分，即寄存器</strong></p>\n<table>\n<thead>\n<tr>\n<th>寄存器宽度</th>\n<th>000</th>\n<th>001</th>\n<th>010</th>\n<th>011</th>\n<th>100</th>\n<th>101</th>\n<th>110</th>\n<th>111</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>32</td>\n<td>EAX</td>\n<td>ECX</td>\n<td>EDX</td>\n<td>EBX</td>\n<td>ESP</td>\n<td>EBP</td>\n<td>ESI</td>\n<td>EDI</td>\n</tr>\n<tr>\n<td>8</td>\n<td>AL</td>\n<td>CL</td>\n<td>DL</td>\n<td>BL</td>\n<td>AH</td>\n<td>CH</td>\n<td>DH</td>\n<td>BH</td>\n</tr>\n</tbody>\n</table>\n<p><strong>Mod (第 6、7 位) 和 R/M (第 0、1、2 位) 共同描述指令中的 E 部分，即寄存器 / 内存</strong></p>\n<p>那么，这 8 个位具体是如何工作的呢，Inter 操作手册给出了一张表</p>\n<p><img data-src=\"image012.png\" alt=\"\" /></p>\n<p>以下内容就是解释这个表。</p>\n<p>前面我们已经讨论了 Reg/Opcode 部分 (即 3、4、5 位) 是怎样描述寄存器的\t\t<br />\n接下来我们重点说一下 Mod 和 R/M 是怎样合作描述寄存器 / 内存的</p>\n<h3 id=\"mod-00\"><a class=\"anchor\" href=\"#mod-00\">#</a> Mod = 00</h3>\n<p><strong>当 Mod = 00 时，ModR/M 字节通过寄存器直接进行内存寻址</strong></p>\n<p>例如当操作指令为 88 01 时，其对应的汇编为 MOV BYTE PTR DS:[ECX], AL</p>\n<p>88 是操作指令，其后跟随的 01 为 ModR/M</p>\n<p><img data-src=\"image014.png\" alt=\"\" /></p>\n<p>0x88 描述了操作数宽度为 b (byte)，且操作数的顺序为 Eb Gb，所以这条汇编指令为 MOV BYTE PTR DS:[ECX], AL</p>\n<p>同理可以分析出如下操作指令对应的汇编指令</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>8801 | mov byte ptr ds:[ecx],al</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>8901 | mov dword ptr ds:[ecx],eax</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>8A01 | mov al,byte ptr ds:[ecx]</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>8B01 | mov eax,dword ptr ds:[ecx]</pre></td></tr></table></figure><p>需要注意的：<br />\n<strong>ESP 指向栈顶，是浮动的，不确定的，Inter 将这个编码废弃，由另外的格式来说明。</strong>\t<br />\n<strong>EBP 指向栈底，而 [EBP] 通常存储上一个 EBP，所以 [EBP] 无数据操作意义，Inter 将这个编码废弃，改为立即数寻址。</strong></p>\n<p>例如 88 05 12 34 56 78 的汇编指令为 MOV BYTE PTR DS:[78563412], AL</p>\n<p>在 Intel 白皮书中 2-2 的表中可以看到对其有解释当 ModR/M 为 05 0D 15 1D 25 2D 35 3D…… 时，这个指令的后面还会接着取 4 个字节。</p>\n<p>例如：<br />\n882578563412 -&gt; mov byte ptr ds:[0x12345678],ah<br />\n892578563412 -&gt; mov dword ptr ds:[0x12345678],esp</p>\n<h3 id=\"mod-01\"><a class=\"anchor\" href=\"#mod-01\">#</a> Mod = 01</h3>\n<p><strong>当 Mod = 01 时，ModR/M 字节通过寄存器 + I8 进行内存寻址 (I 为立即数，即 8 位立即数)</strong></p>\n<p>例如当操作指令为 88 41 12 时，其对应的汇编为 MOV BYTE PTR DS:[ECX+12],AL<br />\n88 是操作指令，其后跟随的 41 为 ModR/M</p>\n<p><img data-src=\"image015.png\" alt=\"\" /></p>\n<p>所以这条汇编指令为 MOV BYTE PTR DS:[ECX+12],AL</p>\n<p>同理可以分析出如下操作指令对应的汇编指令</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>8841 12 | mov byte ptr ds:[ecx+12],al  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>8941 12 | mov dword ptr ds:[ecx+12],eax</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>8A41 12 | mov al,byte ptr ds:[ecx+12]  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>8B41 12 | mov eax,dword ptr ds:[ecx+12]</pre></td></tr></table></figure><p>当 R/M = 100 时 (即 ESP)，该指令编码废弃，修改为其他含义，既 SIB，后面再一起总结。</p>\n<h3 id=\"mod-10\"><a class=\"anchor\" href=\"#mod-10\">#</a> Mod = 10</h3>\n<p><strong>当 Mod = 10 时，ModR/M 字节通过寄存器 + I32 进行内存寻址</strong></p>\n<p>例如当操作指令为 88 81 12 34 56 78 时，其对应的汇编为 MOV BYTE PTR DS:[ECX+78563412],AL</p>\n<p>88 是操作指令，其后跟随的 81 为 ModR/M</p>\n<p><img data-src=\"image016.png\" alt=\"\" /></p>\n<p>所以这条汇编指令为 MOV BYTE PTR DS:[ECX+78563412],AL</p>\n<p>同理可以分析出如下操作指令对应的汇编指令</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>8881 78563412 | mov byte ptr ds:[ecx+12345678],al  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>8981 78563412 | mov dword ptr ds:[ecx+12345678],eax</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>8A81 78563412 | mov al,byte ptr ds:[ecx+12345678]  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>8B81 78563412 | mov eax,dword ptr ds:[ecx+12345678]</pre></td></tr></table></figure><p>当 R/M = 100 时 (即 ESP)，该指令编码废弃，修改为其他含义，既 SIB，后面再一起总结。</p>\n<h3 id=\"mod-11\"><a class=\"anchor\" href=\"#mod-11\">#</a> Mod = 11</h3>\n<p><strong>当 Mod = 11 时，ModR/M 字节直接操作两个寄存器</strong></p>\n<p>例如当操作指令为 88 C1 时，其对应的汇编为 MOV CL,AL</p>\n<p>88 是操作指令，其后跟随的 C1 为 ModR/M</p>\n<p><img data-src=\"image017.png\" alt=\"\" /></p>\n<p>所以这条汇编指令为 MOV CL,AL</p>\n<p>同理可以分析出如下操作指令对应的汇编指令</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>88C1 | mov cl,al   </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>89C1 | mov ecx,eax </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>8AC1 | mov al,cl   </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>8BC1 | mov eax,ecx</pre></td></tr></table></figure><h2 id=\"经典变长指令-regopcode\"><a class=\"anchor\" href=\"#经典变长指令-regopcode\">#</a> 经典变长指令 Reg/Opcode</h2>\n<table>\n<thead>\n<tr>\n<th>7-6</th>\n<th>5—3</th>\n<th>2-0</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Mod</td>\n<td>Reg/Opcode</td>\n<td>R/M</td>\n</tr>\n</tbody>\n</table>\n<p>在上面，3-5 位用来标识寄存器，Mod 字段 与 R/M 字段共同用来标识寄存器与内存</p>\n<p>但 3-5 字段，并不仅仅用来标识寄存器，有些时候，用来标识 Opcode</p>\n<p>参见 Table A-2 中 ：</p>\n<p><img data-src=\"image018.png\" alt=\"\" /></p>\n<p>80 81 82 83 这几个编码并没有给出具体的操作码。</p>\n<p>这里要注意：<strong>凡是出现 Grp 的，均参见 TableA-6</strong></p>\n<p><img data-src=\"image019.png\" alt=\"\" /></p>\n<p>举例说明：</p>\n<p>80 65 08 FF</p>\n<p>查表步骤：</p>\n<p>1、第一个字节为 80 查 Table-2 表，得到对应结构：Eb,Ib</p>\n<p>2、第二个字节为 ModR/M 字段，所以查分 65:</p>\n<p>01 100 101</p>\n<p>Mod 与 R/M 字段 查 Table2-2 得到对应的结构：[EBP+DIS8]</p>\n<p>3、100 字段 查表 TableA-6 得到对应操作码为：AND</p>\n<p>4、最终的指令格式：</p>\n<p>AND [ebp+dis8],Ib</p>\n<p>AND BYTE PTR SS:[EBP+08],0xFF</p>\n<h2 id=\"经典变长指令之sib字段\"><a class=\"anchor\" href=\"#经典变长指令之sib字段\">#</a> 经典变长指令之 SIB 字段</h2>\n<p>ModR/M 字段是用来进行内存寻址的，可当地址形如 DS:[EAX + ECX*2 + 12345678] 时，仅仅靠 ModR/M 字段，是描述不出来的。\t\t\t\t\t\t\t\t<br />\n这时就在 ModR/M 后面增加一个 SIB 字节，与 ModR/M 字段共同描述。</p>\n<p>下图是前面没有涉及到的三种情况。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Address</th>\n<th style=\"text-align:left\">Mod</th>\n<th style=\"text-align:left\">R/M</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">[--][--]</td>\n<td style=\"text-align:left\">00</td>\n<td style=\"text-align:left\">100</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">[--][--]+disp8</td>\n<td style=\"text-align:left\">01</td>\n<td style=\"text-align:left\">100</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">[--][--]+disp32</td>\n<td style=\"text-align:left\">10</td>\n<td style=\"text-align:left\">100</td>\n</tr>\n</tbody>\n</table>\n<p>这三种情况表示，在 ModR/M 字节后，还紧跟着一个 SIB 字节。SIB 字节的 8 个位被分成了三部分：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">7—6</th>\n<th style=\"text-align:left\">5-3</th>\n<th style=\"text-align:left\">2-0</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">Scale</td>\n<td style=\"text-align:left\">Index</td>\n<td style=\"text-align:left\">Base</td>\n</tr>\n</tbody>\n</table>\n<p>在例子 DS:[EAX + ECX*2 + 12345678] 中， Scale 描述 21， Index 描述 ECX, Base 描述 EAX，而 12345678 由 ModR/M 字段决定。\t\t\t\t\t\t\t\t\t\t<br />\n所以 SIB 字段描述的方式为：</p>\n<p><code>Base + Index*2^Scale</code>  (Scale 描述 2Scale，所以只能为 *1 *2 *4 *8)</p>\n<h3 id=\"例子分析\"><a class=\"anchor\" href=\"#例子分析\">#</a> 例子分析</h3>\n<p>下面我们通过分析指令，来看看 SIB 是怎么工作的</p>\n<p>MOV BYTE PTR DS:[EAX+ECX*2+78563412],AL</p>\n<p>操作码</p>\n<p>这条指令的原型为 MOV Eb Gb, 所以操作码为 0x88。且操作数中有 Eb，所以必然存在 ModR/M 字段</p>\n<p><strong>ModR/M 字节</strong></p>\n<p>1、Gb 为 AL，所以 Reg/Opcode 部分为 000</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Mod</th>\n<th style=\"text-align:center\">Reg/Opcode</th>\n<th style=\"text-align:center\">R/M</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">0 0 0</td>\n<td style=\"text-align:center\"></td>\n</tr>\n</tbody>\n</table>\n<p>2、内存地址为 寄存器 + I32 的格式，所以 Mod 部分为 10，偏移为 78563412</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Mod</th>\n<th style=\"text-align:center\">Reg/Opcode</th>\n<th style=\"text-align:center\">R/M</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1 0</td>\n<td style=\"text-align:center\">000</td>\n<td style=\"text-align:center\"></td>\n</tr>\n</tbody>\n</table>\n<p>3、内存地址中寄存器部分多个寄存器，即在 ModR/M 字节后，还跟着一个 SIB 字节，所以 R/M 部分为 100</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Mod</th>\n<th style=\"text-align:center\">Reg/Opcode</th>\n<th style=\"text-align:center\">R/M</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1 0</td>\n<td style=\"text-align:center\">000</td>\n<td style=\"text-align:center\">1 0 0</td>\n</tr>\n</tbody>\n</table>\n<p>由此，ModR/M 字节为 0x84</p>\n<p><strong>SIB 字节</strong></p>\n<p>1、DS:[EAX+ECX*2+78563412] 中，Base 对应着 EAX，所以 Base 部分为 000</p>\n<table>\n<thead>\n<tr>\n<th>Scale</th>\n<th>Index</th>\n<th style=\"text-align:center\">Base</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td></td>\n<td style=\"text-align:center\">0 0 0</td>\n</tr>\n</tbody>\n</table>\n<p>2、Index 对应着 ECX，所以 Index 部分为 001</p>\n<table>\n<thead>\n<tr>\n<th>Scale</th>\n<th style=\"text-align:center\">Index</th>\n<th style=\"text-align:center\">Base</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td style=\"text-align:center\">0 0 1</td>\n<td style=\"text-align:center\">0 0 0</td>\n</tr>\n</tbody>\n</table>\n<p>3、Scale 对应着 21，所以 Scale 部分为 01</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Scale</th>\n<th style=\"text-align:center\">Index</th>\n<th style=\"text-align:center\">Base</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">0 1 0</td>\n<td style=\"text-align:center\">0 0 1</td>\n<td style=\"text-align:center\">0 0 0</td>\n</tr>\n</tbody>\n</table>\n<p>由此，SIB 字节为 0x48</p>\n<p>以上总结为：</p>\n<p><img data-src=\"image020.png\" alt=\"\" /></p>\n<p>由上，可得出指令编码为 88 84 48， 再加上偏移 12345678，完整的指令编码为 88 84 48 12 34 56 78</p>\n<p>在 xdbg 中查看：</p>\n<p>888448 12345678 | mov byte ptr ds:[eax+ecx*2+78563412],al</p>\n<p>无误！</p>\n<p>SIB 字段的图表如下</p>\n<p><img data-src=\"image013.png\" alt=\"\" /></p>\n<p>1、当 Index = 100b 时，Index 被 0 替代，此时只有 Base 有效</p>\n<p>2、当 Base = 101b 时，Base 被 0 替代，此时只用 Index 有效</p>\n<p>作业：</p>\n<blockquote>\n<p><strong>89 2C 15</strong></p>\n</blockquote>\n<p>89 mov Ev, Gv</p>\n<p>2C --&gt; 00 101 100</p>\n<p>Mod 0 Reg/Opcode 5 R/M 4</p>\n<p>Reg/Opcode 5 --&gt;  mov Ev, ebp</p>\n<p>Mod 0 R/M 4 --&gt; SIB --&gt;  mov [-][-],ebp</p>\n<p>15 --&gt; 00 010 101</p>\n<p>Scale 0 Index 2 Base 5</p>\n<p>Base 5 Mod 0 --&gt; [Scale Index]+ dip32</p>\n<p>[Scale Index] --&gt; Scale 0 Index 2  --&gt; [edx]</p>\n<p>mov [edx+dip32],ebp</p>\n<blockquote>\n<p><strong>89AC15</strong></p>\n</blockquote>\n<p>89 mov Ev, Gv</p>\n<p>AC --&gt; 10 101 100</p>\n<p>Mod 2 Reg/Opcode 5 R/M 4</p>\n<p>Reg/Opcode 5 --&gt;  mov Ev, ebp</p>\n<p>Mod 0 R/M 4 --&gt; SIB --&gt;  mov [-][-],ebp</p>\n<p>15 --&gt; 00 010 101</p>\n<p>Scale 0 Index 2 Base 5</p>\n<p>Base 5 Mod 2 --&gt; [Scale Index] + dip32 + [EBP]</p>\n<p>[Scale Index] --&gt; Scale 0 Index 2  --&gt; [edx]</p>\n<p>mov [edx+ebp+dip32],ebp</p>\n<blockquote>\n<p><strong>898461</strong></p>\n</blockquote>\n<p>89 mov Ev,Gv</p>\n<p>84 --&gt; 10 000 100</p>\n<p>Mod 2 Reg/Opcode 0 R/M 4</p>\n<p>Reg/Opcode 0 --&gt; mov Ev,eax</p>\n<p>Mod 2 R/M 4 --&gt; SIB --&gt; mov SIB+dip32 ,eax</p>\n<p>SIB 的描述为：  <code>Base + Index*2^Scale</code></p>\n<p>61 --&gt; 01 100 001</p>\n<p>Scale 1 Index 4 Base 1</p>\n<p>Base 1 --&gt; ecx</p>\n<p>Scale 1 Index 4 --&gt; none</p>\n<p>所以 SIB 为 ecx</p>\n<p>mov [ecx+dip32],eax</p>\n<h1 id=\"指令前缀\"><a class=\"anchor\" href=\"#指令前缀\">#</a> 指令前缀</h1>\n<ol>\n<li>段前缀：</li>\n</ol>\n<p>段寄存器的作用：早期 8086cpu 寻址范围小，Inter 便通过段寄存器来拓展内存。即通过段寄存器基址 + 偏移的方式来寻址。</p>\n<p>[] 中的地址为有效地址 (Effect Address)，有效地址 + 段寄存器基址才是实际地址 LA (线性地址 Line Address)。</p>\n<p>线性地址 = 段基址 + 有效地址</p>\n<p>在后来的 80386 时，cpu 的寻址范围大大提升，这些段寄存器便被用作了其他用途。但是 DS:[] 类似</p>\n<p>这种寻址格式却被保留了下来。</p>\n<p>实际上操作码已经决定了寻址时使用哪个段寄存器作为基址，不需要其他字节描述。</p>\n<blockquote>\n<p>1、如果没有特别说明，[] 前为 DS，即 DS:[]\t<br />\n2、PUSH POP 指令，以及在 [] 中使用 ESP/EBP 的，使用 SS 段\t<br />\n3、在 [Base + Index*2Scale + I] 中，以 Base 为判断条件，没有特别说明，用 DS。如果 Base 为 ESP/EBP，则用 SS 段.\t<br />\n4、串操作指令一般使用 ES。MOV ES:[EDI] DS:[ESI] 中，目标 EDI 使用 ES 段，其他使用 DS 段.\t<br />\n5、EIP 指向当前指令，EIP 取指令时使用的是 CS 段.\t<br />\n6、如果指令加段寄存器前缀，则该条指令一律用这个段，如果加多个段寄存器前缀，默认只看 op 前的那个.</p>\n</blockquote>\n<p>26 - es<br />\n2e - cs<br />\n36 - ss<br />\n3e - ds<br />\n64 - fs<br />\n65 - gs</p>\n<p>例子：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>| 898461 00000000    | mov dword ptr ds:[ecx],eax</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>| 26:898461 00000000 | mov dword ptr es:[ecx],eax</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>| 2E:898461 00000000 | mov dword ptr cs:[ecx],eax</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>| 36:898461 00000000 | mov dword ptr ss:[ecx],eax</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>| 3E:898461 00000000 | mov dword ptr ds:[ecx],eax</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>| 64:898461 00000000 | mov dword ptr fs:[ecx],eax</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>| 65:898461 00000000 | mov dword ptr gs:[ecx],eax</pre></td></tr></table></figure><ol start=\"2\">\n<li>操作指令前缀</li>\n</ol>\n<p>0x66 \t将操作数改为 16 字节。</p>\n<p>例子 50 为 PUSH EAX, 而 66 50 则为 PUSH AX</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>50    PUSH EAX\t</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>66:50 PUSH AX</pre></td></tr></table></figure><ol start=\"3\">\n<li>操作指令前缀：修改默认寻址方式</li>\n</ol>\n<p>0x67 \t将操作数改为 16 字节。</p>\n<p>例子 50 为 PUSH EAX, 而 66 50 则为 PUSH AX</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>8801          MOV BYTE PTR DS:[ECX],AL\t</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>67:8801       MOV BYTE PTR DS:[BX+DI],AL</pre></td></tr></table></figure><p>指令前缀更多信息参见 Intel 白皮书第 2 卷的 2.1.1</p>\n<h1 id=\"硬编码总结\"><a class=\"anchor\" href=\"#硬编码总结\">#</a> 硬编码总结</h1>\n<p>1、操作码决定后面有没有 ModR/M 字段和立即数</p>\n<p>2、ModR/M 决定后面有没有 SIB 字节和偏移</p>\n<p>3、操作指令中只要包含 Ev/Eb，则指令中一定有 ModR/M 字节</p>\n<p>4、只需要把操作码确定下来，那么后面有什么字段，就都能确定了。即一切由操作码决定。</p>\n<p>5、操作码长度，需要查的对应的表。</p>\n<p>一个字节：00 - FF (TableA-2   0F 除外)</p>\n<p>两个字节：0F 00 - 0F FF (TableA-3)</p>\n<p>三个字节：0F 38 / 0F 3A (TableA-3 TableA-4 TableA-5)</p>\n<p>有一些硬编码不同，但他们实现的汇编指令一样。</p>\n<p>例如：<br />\n8901 与 898461 00000000 都代表着 mov [ecx],eax;</p>\n<h1 id=\"reference\"><a class=\"anchor\" href=\"#reference\">#</a> Reference</h1>\n<p>滴水硬编码课件</p>\n",
            "tags": [
                "经典定长指令",
                "经典变长指令",
                "指令前缀"
            ]
        },
        {
            "id": "https://or0kit.github.io/Bin/Assembly/%E6%B1%87%E7%BC%96%E5%AD%A6%E4%B9%A0/",
            "url": "https://or0kit.github.io/Bin/Assembly/%E6%B1%87%E7%BC%96%E5%AD%A6%E4%B9%A0/",
            "title": "汇编指令学习",
            "date_published": "2021-03-24T12:19:17.000Z",
            "content_html": "<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<p>之前学的，因为一些事情就耽搁了，转而学其他的了，现在有时间了，打算接着学。</p>\n<h1 id=\"内存格式\"><a class=\"anchor\" href=\"#内存格式\">#</a> 内存格式</h1>\n<ol>\n<li>每个内存单元宽度为 8</li>\n<li>【0x 编号】称为内存地址</li>\n<li>内存是存储数据的，内存地址是对存储数据的一个标识，指向数据却不是数据，通过内存地址的指引，可以访问到内存当中指向的数据.</li>\n</ol>\n<p>内存最小的单位是一个字节 ==&gt;&gt; 8 个二进制数  ==&gt;&gt; 两位的十六进制数</p>\n<p>一个内存单元能存一个两位的十六进制数，而这就是内存数据</p>\n<h1 id=\"简单指令intel汇编语法\"><a class=\"anchor\" href=\"#简单指令intel汇编语法\">#</a> 简单指令 (intel 汇编语法)</h1>\n<h2 id=\"mov\"><a class=\"anchor\" href=\"#mov\">#</a> mov</h2>\n<p>格式：  <code>mov destination, source</code></p>\n<p><code>mov eax, ebx</code>   // 将 EBX 中的内容复制到 EAX 寄存器中<br />\n <code>mov eax, 0x42</code>  // 将立即数 0x42 复制到 EAX 寄存器中<br />\n <code>mov eax, [0x443212C4]</code>  // 将内存地址 0x443212C4 的四个字节复制到 EAX 寄存器<br />\n <code>mov eax, [ebx+esi*4]</code>   // 将 ebx+esi*4 等式结果只想的内存地址处 4 个字节复制至 EAX</p>\n<h2 id=\"lea\"><a class=\"anchor\" href=\"#lea\">#</a> lea</h2>\n<p>格式：  <code>lea destination, source</code></p>\n<p>lea 指令用来将一个内存地址赋给目的操作数。<br />\n例如，  <code>lea eax, [ebx+8]</code>  就是将 EBX+8 的值给 EAX。<br />\n相反的， <code>mov eax, [ebx+8]</code>  则加载内存中地址为 EBX+8 处的数据。</p>\n<h2 id=\"加减运算sub-add-inc-dec\"><a class=\"anchor\" href=\"#加减运算sub-add-inc-dec\">#</a> 加减运算：sub add inc dec</h2>\n<p><span class=\"label\">例子</span></p>\n<table>\n<tbody>\n<tr>\n<td style=\"text-align:left\">指令</td>\n<td style=\"text-align:left\">描述</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">sub eax,0x10</td>\n<td style=\"text-align:left\">EAX 寄存器值减去 0x10</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">add eax,ebx</td>\n<td style=\"text-align:left\">将 EBX 值加入 EAX 并将结果保存至 EAX</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">inc edx</td>\n<td style=\"text-align:left\">EDX 值递增 1</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">dec ecx</td>\n<td style=\"text-align:left\">ECX 值递减 1</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"乘除运算mul-div\"><a class=\"anchor\" href=\"#乘除运算mul-div\">#</a> 乘除运算:mul div</h2>\n<p>乘法和除法都使用了一个预先规定的寄存器。因此其运算就是指令码加上寄存器要去乘除的值。<br />\n <code>mul</code>  和 <code>div</code>  指令要操作的寄存器一般会在之前许多条指令的地方被赋值，因此你可能需要在程序的上下文中来寻找。<br />\n <code>mul value</code>  指令总是将 <code>eax</code>  乘上 <code>value</code> 。因此， <code>EAX</code>  寄存器必须在乘法指令出现前就赋值好。</p>\n<p>乘法的结果以 64 位的形式分开存储在两个寄存器中： <code>EDX</code>  和 <code>EAX</code> 。其中 EDX 存储了高的 32 位，EAX 存储低的 32 位。</p>\n<p>32 位模式下，MUL（无符号数乘法）指令有三种类型：</p>\n<pre><code>第一种执行 8 位操作数与 AL 寄存器的乘法；\n第二种执行 16 位操作数与 AX 寄存器的乘法；\n第三种执行 32 位操作数与 EAX 寄存器的乘法。\n</code></pre>\n<p>乘数和被乘数的大小必须保持一致，乘积的大小则是它们的一倍。这三种类型都可以使用寄存器和内存操作数，但不能使用立即数：</p>\n<pre><code>MUL reg/mem8\nMUL reg/meml6\nMUL reg/mem32\n</code></pre>\n<p>MUL 指令中的单操作数是乘数。下表按照乘数的大小，列出了默认的被乘数和乘积。由于目的操作数是被乘数和乘数大小的两倍，因此不会发生溢岀。</p>\n<table>\n<tbody>\n<tr>\n<td style=\"text-align:left\">被乘数</td>\n<td style=\"text-align:left\">乘数</td>\n<td style=\"text-align:left\">乘积</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">AL</td>\n<td style=\"text-align:left\">reg/mem8</td>\n<td style=\"text-align:left\">AX</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">AX</td>\n<td style=\"text-align:left\">reg/mem16</td>\n<td style=\"text-align:left\">DX:AX</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">EAX</td>\n<td style=\"text-align:left\">reg/mem32</td>\n<td style=\"text-align:left\">EDX:EAX</td>\n</tr>\n</tbody>\n</table>\n<p>如果乘积的高半部分不为零，则 MUL 会把进位标志位和溢出标志位置 1。因为进位标志位常常用于无符号数的算术运算，在此我们也主要说明这种情况。例如，当 AX 乘以一个 16 位操作数时，乘积存放在 DX 和 AX 寄存器对中。其中，乘积的高 16 位存放在 DX，低 16 位存放在 AX。如果 DX 不等于零，则进位标志位置 1，这就意味着隐含的目的操作数的低半部分容纳不了整个乘积。</p>\n<p>有个很好的理由要求在执行 MUL 后检查进位标志位，即，确认忽略乘积的高半部分是否安全。</p>\n<p>32 位模式下，DIV（无符号除法）指令执行 8 位、16 位和 32 位无符号数除法。其中，单寄存器或内存操作数是除数。格式如下：</p>\n<pre><code>DIV reg/mem8\nDIV reg/meml6\nDIV reg/mem32\n</code></pre>\n<p>下表给出了被除数、除数、商和余数之间的关系：</p>\n<table>\n<tbody>\n<tr>\n<td style=\"text-align:left\">被除数</td>\n<td style=\"text-align:left\">除数</td>\n<td style=\"text-align:left\">商</td>\n<td>余数</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">AX</td>\n<td style=\"text-align:left\">reg/mem8</td>\n<td style=\"text-align:left\">AL</td>\n<td>AH</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">DX:AX</td>\n<td style=\"text-align:left\">reg/mem16</td>\n<td style=\"text-align:left\">AX</td>\n<td>DX</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">EDX:EAX</td>\n<td style=\"text-align:left\">reg/mem32</td>\n<td style=\"text-align:left\">EAX</td>\n<td>EDX</td>\n</tr>\n</tbody>\n</table>\n<p>64 位模式下，DIV 指令用 RDX:RAX 作被除数，用 64 位寄存器和内存操作数作除数，商存放到 RAX，余数存放在 RDX 中。</p>\n<h2 id=\"否操作指令not\"><a class=\"anchor\" href=\"#否操作指令not\">#</a> 否操作指令 NOT</h2>\n<p><code>NOT OPRD</code></p>\n<p>把 OPRD 取反，再回送给 OPRD</p>\n<p>对标志位没有影响</p>\n<p><img data-src=\"image003.png\" alt=\"\" /></p>\n<h2 id=\"与操作指令and与\"><a class=\"anchor\" href=\"#与操作指令and与\">#</a> 与操作指令 AND [与]</h2>\n<p><code>AND OPRD1，OPRD2</code></p>\n<p>OPRD1 和 OPRD2 执行与操作，结果送到 OPRD1</p>\n<p>执行后，CF＝OF＝0，标志 PF，ZF，SF 反映运算结果，AF 未定义</p>\n<p>某个操作数自身与，值不变，可使进位标志 CF＝0</p>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<p><span class=\"label\">例子</span></p>\n<p><code>mov al, 00001111b</code> <br />\n <code>and al, 11110101b</code></p>\n<p>最后 <code>al</code>  的结果就是 <code>00000101b</code></p>\n<ol start=\"3\">\n<li>或操作指令 OR [或]</li>\n</ol>\n<p><code>OR OPRD1 OPRD2</code></p>\n<p>标志位同与运算指令</p>\n<p>某个操作数自身或，值不变，可使进位标志 CF＝0</p>\n<p><img data-src=\"image002.png\" alt=\"\" /></p>\n<h2 id=\"异或操作指令xor异或\"><a class=\"anchor\" href=\"#异或操作指令xor异或\">#</a> 异或操作指令 XOR [异或]</h2>\n<p><code>XOR OPRD1 OPRD2</code></p>\n<p>标志位同与运算指令</p>\n<p>某个操作数自身异或，值不变，可使进位标志 CF＝0</p>\n<p>与 0 异或，不变，与 1 异或，取反。</p>\n<p><img data-src=\"image004.png\" alt=\"\" /></p>\n<h2 id=\"测试指令test\"><a class=\"anchor\" href=\"#测试指令test\">#</a> 测试指令 TEST</h2>\n<p>指令格式：TEST  R/M,R/M/IMM</p>\n<p><code>TEST OPRD1 OPRD2</code></p>\n<p>指令与 AND 类似，但结果不回送</p>\n<p>指令执行后，ZF，PF，SF 反映运算结果，CF＝OF＝0</p>\n<p>该指令在一定程序上和 CMP 指令时类似的，两个数值进行与操作，结果不保存，但是会改变相应标志位.</p>\n<p>与的操作表项如下：</p>\n<p>1 and 1 = 1\t<br />\n1 and 0 = 0<br />\n0 and 1 = 0<br />\n0 and 0 = 0</p>\n<p>常见用法：用这个指令，可以确定某寄存器是否等于 0。</p>\n<p><code>TEST EAX,EAX</code> \t\t\t观察 Z 位</p>\n<p>但是如果 EAX 的二进制某些位为 1 的话，那么运算的结果就不为零。</p>\n<h2 id=\"cmp指令\"><a class=\"anchor\" href=\"#cmp指令\">#</a> CMP 指令</h2>\n<p>指令格式：CMP  R/M,R/M/IMM</p>\n<p>该指令是比较两个操作数，实际上，它相当于 SUB 指令，但是相减的结构并不保存到第一个操作数中。</p>\n<p>只是根据相减的结果来改变零标志位的，当两个操作数相等的时候，零标志位置 1。</p>\n<h2 id=\"移位指令\"><a class=\"anchor\" href=\"#移位指令\">#</a> 移位指令</h2>\n<p>移位指令分为算术移位和逻辑移位。</p>\n<p>移动操作数的位有两种方法。第一种是逻辑移位 (logic shift)，空出来的位用 0 填充。如下图所示，一个字节的数据向右移动一位。也就是说，每一位都被移动到其旁边的低位上。注意，位 7 被填充为 0：</p>\n<p><img data-src=\"image005.png\" alt=\"\" /></p>\n<p>下图所示为二进制数 1100 1111 逻辑右移一位，得到 0110 0111。最低位移入进位标志位：</p>\n<p><img data-src=\"image006.png\" alt=\"\" /></p>\n<p>另一种移位的方法是算术移位 (arithmetic shift)，空出来的位用原数据的符号位填充：</p>\n<p><img data-src=\"image007.png\" alt=\"\" /></p>\n<p>例如，二进制数 1100 1111，符号位为 1。算术右移一位后，得到 1110 0111：</p>\n<p><img data-src=\"image008.png\" alt=\"\" /></p>\n<p>逻辑移位:   <code>SHL</code> 、 <code>SHR</code> <br />\n 算术移位:   <code>CAL</code> 、 <code>CAR</code></p>\n<p>无符号数的乘法和除法可以用逻辑移位；<br />\n 有符号数的乘法和除法可以用算术移位；</p>\n<h3 id=\"逻辑移位指令\"><a class=\"anchor\" href=\"#逻辑移位指令\">#</a> 逻辑移位指令</h3>\n<p>SHL（左移）指令使目的操作数逻辑左移一位，最低位用 0 填充。最高位移入进位标志位，而进位标志位中原来的数值被丢弃<br />\n SHR（右移）指令使目的操作数逻辑右移一位，最高位用 0 填充。最低位复制到进位标志位，而进位标志位中原来的数值被丢弃</p>\n<p>SHL/SHR 的第一个操作数是目的操作数，第二个操作数是移位次数：<br />\nSHL/SHR destination,count</p>\n<p>该指令可用的操作数类型如下所示：<br />\nSHL/SHR reg, imm8<br />\nSHL/SHR mem, imm8<br />\nSHL/SHR reg, CL<br />\nSHL/SHR mem, CL</p>\n<p>x86 处理器允许 imm8 为 0〜255 中的任何整数。另外，CL 寄存器包含的是移位计数。上述格式同样适用于 SHR、SAL、SAR、ROR、ROL、RCR 和 RCL 指令。</p>\n<h3 id=\"算术移位指令\"><a class=\"anchor\" href=\"#算术移位指令\">#</a> 算术移位指令</h3>\n<p>算数移位指令分为：算数左移 SAL (Shift Algebraic Left) 和算数右移 SAR (Shift Algebraic Right);<br />\n 指令格式:  <code>SAL/SAR reg/mem,CL/imm</code> <br />\n 受影响的标志位：CF,OF,PF,SF,ZF; 对 AF 的影响无定义；</p>\n<h3 id=\"循环移位指令\"><a class=\"anchor\" href=\"#循环移位指令\">#</a> 循环移位指令</h3>\n<p>循环移位指令 ror 和 rol 与移位指令类似，但移出的那一位会被填到另一端空出来的位置上，即右循环指令（ror）会将最低位循环一到最高位；左循环移位（rol）则相反。</p>\n<h2 id=\"nop指令\"><a class=\"anchor\" href=\"#nop指令\">#</a> NOP 指令</h2>\n<p>nop 指令什么也不做。当它出现时，直接执行下一条指令。<br />\nnop 指令实际上是 xchg eax,eax 的一个谓名字</p>\n<h2 id=\"push-指令\"><a class=\"anchor\" href=\"#push-指令\">#</a> push 指令</h2>\n<h2 id=\"pop-指令\"><a class=\"anchor\" href=\"#pop-指令\">#</a> pop 指令</h2>\n<h1 id=\"movsb-movsw-movsd-指令\"><a class=\"anchor\" href=\"#movsb-movsw-movsd-指令\">#</a> movsb、movsw、movsd 指令</h1>\n<p>MOVSB、MOVSW 和 MOVSD 指令：将数据到 EDI 指向的内存</p>\n<h1 id=\"rep-指令\"><a class=\"anchor\" href=\"#rep-指令\">#</a> rep 指令</h1>\n<p>按计数寄存器 ecx 中指定的次数重复执行字符串指令</p>\n<p>rep movsd</p>\n<p>取 esi 的值 到 edi 指向的地址</p>\n<h1 id=\"pause指令\"><a class=\"anchor\" href=\"#pause指令\">#</a> pause 指令</h1>\n<p>提高自旋等待循环的性能。当执行 “自旋 - 等待循环” 时，Pentium 4 或 Intel Xeon 处理器在退出循环时会遭受严重的性能损失，因为它检测到可能的内存顺序冲突。PAUSE 指令向处理器提示代码序列是一个自旋 - 等待循环。在大多数情况下，处理器使用这个提示来避免内存顺序冲突，这大大提高了处理器性能。因此，建议在所有自旋 - 等待循环中放置 PAUSE 指令。</p>\n<p>PAUSE 指令的另一个功能是降低 Pentium 4 处理器在执行旋转循环时的功耗。Pentium 4 处理器可以非常快地执行一个自旋 - 等待循环，导致处理器在等待其所旋转的资源变得可用时消耗大量电力。在自旋 - 等待循环中插入暂停指令可以大大降低处理器的功耗。</p>\n<p>这个指令被引入到奔腾 4 处理器中，但它向后兼容所有的 IA-32 处理器。在早期的 IA-32 处理器中，PAUSE 指令就像 NOP 指令一样工作。奔腾 4 和英特尔 Xeon 处理器将 PAUSE 指令实现为预定义延迟。延迟是有限的，对于某些处理器可以是零。该指令不会改变处理器的体系结构状态 (也就是说，它实际上执行了一个延迟的无操作操作)。</p>\n<p>该指令的操作在非 64 位模式和 64 位模式下是相同的。</p>\n<h1 id=\"lock指令\"><a class=\"anchor\" href=\"#lock指令\">#</a> LOCK 指令</h1>\n<p><strong>在伴随指令执行期间断言处理器的 LOCK# 信号 (将指令转换为原子指令)。</strong><br />\n<strong>在多处理器环境中，LOCK# 信号确保处理器在断言信号时独占任何共享内存。</strong></p>\n<p>注意，在后来的 Intel 64 和 IA-32 处理器 (包括 Pentium 4, Intel Xeon 和 P6 系列处理器) 中，锁可能会在没有 LOCK# 信号的情况下发生。</p>\n<p><strong>LOCK 前缀只能放在以下指令的前面，并且只能放在目的操作数为内存操作数的指令的前面：ADD、ADC、AND、BTC、BTR、BTS、CMPXCHG、CMPXCH8B、DEC、INC、NEG、NOT、OR、SBB、SUB、XOR、XADD 和 XCHG。</strong></p>\n<p>如果 LOCK 前缀与这些指令中的一个一起使用，并且源操作数是内存操作数，则可能会生成一个未定义的操作码异常 (#UD)。<br />\n如果 LOCK 前缀与任何不在上面列表中的指令一起使用，也会生成一个未定义的操作码异常。<br />\nXCHG 指令总是对 LOCK# 信号进行断言，而不管 LOCK 前缀是否存在。<br />\nLOCK 前缀通常与 BTS 指令一起使用，在共享内存环境中的内存位置上执行 read-modifywrite 操作。<br />\nLOCK 前缀的完整性不受内存字段对齐的影响。<br />\n内存锁定在任意错位的字段中被观察到。<br />\n该指令的操作在非 64 位模式和 64 位模式下是相同的</p>\n<h2 id=\"protected-mode-exceptions\"><a class=\"anchor\" href=\"#protected-mode-exceptions\">#</a> Protected Mode Exceptions</h2>\n<p><code>#UD</code></p>\n<p>如果 LOCK 前缀与以下未列出的指令一起使用: ADD,ADC, AND, BTC, BTR, BTS, CMPXCHG, CMPXCH8B, DEC, INC,NEG, NOT, OR, SBB, SUB, XOR, XADD, XCHG，就会产生异常。</p>\n<p>其他异常可以由该指令在应用 LOCK 前缀时生成。</p>\n<h1 id=\"xadd-指令\"><a class=\"anchor\" href=\"#xadd-指令\">#</a> xadd 指令</h1>\n<p><strong>将第一个操作数 (目标操作数) 与第二个操作数 (源操作数) 交换，然后将两个值的和加载到目标操作数中。</strong><br />\n<strong>目标操作数可以是寄存器或内存位置； 源操作数是一个寄存器。</strong></p>\n<p>在 64 位模式下，指令的默认操作大小是 32 位。</p>\n<p>以 REX 的形式使用 REX 前缀。R 允许访问附加寄存器 (R8-R15)。以 REX 的形式使用 REX 前缀。W 将操作提升到 64 位。有关编码数据和限制，请参阅本节开头的汇总图。</p>\n<p><strong>该指令可以与 LOCK 前缀一起使用，以允许该指令以原子方式执行。</strong></p>\n<h1 id=\"bts指令\"><a class=\"anchor\" href=\"#bts指令\">#</a> bts 指令</h1>\n<p>例子：  <code>lock bts dword ptr [esi], 0 ;</code></p>\n<p>BTS 指令的作用：<br />\n两件事:<br />\n 一、<br />\n<strong>取 esi 比特位的第 0 位存在 CF 标志位中。</strong><br />\n二、<br />\n <code>lock bts dword ptr [esi],0</code> <br />\n<strong> 将 dword ptr [esi] 指向的内存地址的第 0 位置 1</strong></p>\n<p><strong>该指令可以与 LOCK 前缀一起使用，以允许该指令以原子方式执行。</strong></p>\n<h1 id=\"cmpxchg8b-指令\"><a class=\"anchor\" href=\"#cmpxchg8b-指令\">#</a> cmpxchg8b 指令</h1>\n<p><code>CMPXCHG8B m64</code></p>\n<p>比较 EDX:EAX 中的 64 位值 (或 RDX:RAX 中的 128 位值，如果操作数是 128 位) 和操作数 (目的操作数)。<br />\n如果两个值相等，则目标操作数中存储 ECX:EBX 中的 64 位值 (或 RCX:RBX 中的 128 位值)。<br />\n否则，目标操作数中的值被加载到 EDX:EAX (或 RDX:RAX) 中。<br />\n目标操作数是一个 8 字节内存位置 (如果操作数大小为 128 位，则为 16 字节内存位置)。<br />\n对于 EDX:EAX 和 ECX:EBX 寄存器对，EDX 和 ECX 包含高阶 32 位，EAX 和 EBX 包含 64 位值的低阶 32 位。<br />\n对于 RDX:RAX 和 RCX:RBX 寄存器对，RDX 和 RCX 为高 64 位，RAX 和 RBX 为 128 位的低 64 位。<br />\n该指令可以与 LOCK 前缀一起使用，以允许该指令以原子方式执行。</p>\n<h2 id=\"operation\"><a class=\"anchor\" href=\"#operation\">#</a> Operation</h2>\n<p>IF (64-Bit Mode and OperandSize = 64)<br />\nTHEN<br />\nTEMP128 ← DEST<br />\nIF (RDX:RAX = TEMP128)<br />\nTHEN<br />\nZF ← 1;<br />\nDEST ← RCX:RBX;<br />\nELSE<br />\nZF ← 0;<br />\nRDX:RAX ← TEMP128;<br />\nDEST ← TEMP128;<br />\nFI;<br />\nFI<br />\nELSE<br />\nTEMP64 ← DEST;<br />\nIF (EDX:EAX = TEMP64)<br />\nTHEN<br />\nZF ← 1;<br />\nDEST ← ECX:EBX;<br />\nELSE<br />\nZF ← 0;<br />\nEDX:EAX ← TEMP64;<br />\nDEST ← TEMP64;<br />\nFI;<br />\nFI;<br />\nFI;</p>\n<h1 id=\"renference\"><a class=\"anchor\" href=\"#renference\">#</a> Renference</h1>\n<p>Intel 白皮书第二卷<br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNjI3MjM1L2FydGljbGUvZGV0YWlscy84MDM2ODI1NA==\"> https://blog.csdn.net/qq_41627235/article/details/80368254</span><br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly93ZW5rdS5iYWlkdS5jb20vdmlldy81MThkM2U4NWRmMzZhMzJkNzM3NWE0MTc4NjZmYjg0YWU0NWNjMzg2Lmh0bWw=\">https://wenku.baidu.com/view/518d3e85df36a32d7375a417866fb84ae45cc386.html</span><br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NodWhlamlhbzE1MTYvYXJ0aWNsZS9kZXRhaWxzLzEwMDg3NTEwNQ==\">https://blog.csdn.net/chuhejiao1516/article/details/100875105</span><br />\n<span class=\"exturl\" data-url=\"aHR0cDovL2MuYmlhbmNoZW5nLm5ldC92aWV3LzM1ODkuaHRtbA==\">http://c.biancheng.net/view/3589.html</span></p>\n",
            "tags": [
                "x86汇编指令"
            ]
        }
    ]
}