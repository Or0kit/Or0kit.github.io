{
    "version": "https://jsonfeed.org/version/1",
    "title": "Or0kit • All posts by \"驱动开发\" category",
    "description": "临渊羡鱼，不如退而结网",
    "home_page_url": "https://Or0kit.github.io",
    "items": [
        {
            "id": "https://or0kit.github.io/Bin/Core/Drive-Development/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%BE%AE%E8%BF%87%E6%BB%A4%E9%A9%B1%E5%8A%A8/",
            "url": "https://or0kit.github.io/Bin/Core/Drive-Development/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%BE%AE%E8%BF%87%E6%BB%A4%E9%A9%B1%E5%8A%A8/",
            "title": "文件系统微过滤驱动",
            "date_published": "2022-08-06T15:24:13.000Z",
            "content_html": "<h1 id=\"文件系统微过滤驱动\"><a class=\"anchor\" href=\"#文件系统微过滤驱动\">#</a> 文件系统微过滤驱动</h1>\n<p>微软的 Windows 内核开发者开发了一个新的驱动， 称为过滤管理器（Filter Manager 或 fltmgr）</p>\n<h1 id=\"minifilter的编程框架\"><a class=\"anchor\" href=\"#minifilter的编程框架\">#</a> Minifilter 的编程框架</h1>\n<p>接下来介绍一个有关 Minifilter 应用的例子， 这个例子的作用主要是开发 Minifilter 的功能来限制对应用程序 “记事本” 文件（notepad.xe） 的操作， 进而达到限制扩展名为 txt 等使用记事本程序来编辑的功能。这是一个有意思的例子， 因为文件名为 notepad.exe 的文件被禁止打开， 所以这个文件无法被双击执行、 无法被复制、 无法被改名， 也无法被删除。这个例子在实际中可能没有什么用处。 这样不可能限制文本文档不被编辑， 因为记事本不能使用， 用户依然可以使用其他的文本编辑工具， 甚至可以在别的计算机上为 notepad.exe 改一个名字， 然后拷贝到本机上来使用。 但是它足以说明 Minifilter 的简单使用效果。 在实际应用中， Minifilter 的应用和 sfilter 的应用是一样广泛的。 有兴趣的读者在读完这个简单的例子之后， 可以在它的基础上编写一些更符合自己实际需求的例子。</p>\n<h2 id=\"微文件系统过滤的注册\"><a class=\"anchor\" href=\"#微文件系统过滤的注册\">#</a> 微文件系统过滤的注册</h2>\n<p>编写 Minifilter 的第一件事是向过滤管理器宣告我们的微过滤器的存在。<br />\n这里所谓的微过滤器是符合过滤管理器标准的过滤组件， 它其实是一组回调函数， 这组回调函数向过滤管理器注册之后， 过滤管理器就会在合适的时机（比如， 要求的文件操作发生时） 以合适的方式调用某个回调函数。如果我们编写这个回调函数中的内容， 就可以对文件系统加以过滤了。</p>\n<p>这比花很多精力去绑定各种设备要简单得多， 因为复杂的任务都在过滤管理器里做了。</p>\n<p>下面直接通过程序代码来了解一下程序的架构。<br />\n一开始我们必须要宣告注册的函数，这个宣告要符合 Minifilter 开发文件内的定义， 我们可以从 WDK 或文件内找到这个函数的意思。</p>\n<p>接下来按照惯例， 我们介绍一下  <code>DriverEntry</code>  入口函数。 和  <code>sfilter</code>  形成鲜明的对比， 这个例子的  <code>DriverEntry</code>  显得非常简单。 关键的函数有两个： 一个是  <code>FltReigsterFilter</code>  ， 用来注册一个微过滤器； 另一个是  <code>FltStartFiltering</code>  ， 用来开启过滤。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>NTSTATUS</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">DriverEntry</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    _In_ PDRIVER_OBJECT DriverObject<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    _In_ PUNICODE_STRING RegistryPath</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    NTSTATUS status<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">UNREFERENCED_PARAMETER</span><span class=\"token punctuation\">(</span> RegistryPath <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// 向过滤管理器注册一个过滤器。这个过滤器使用 FilterRegistration 表示的</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    status <span class=\"token operator\">=</span> <span class=\"token function\">FltRegisterFilter</span><span class=\"token punctuation\">(</span> DriverObject<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                                <span class=\"token operator\">&amp;</span>FilterRegistration<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                                <span class=\"token operator\">&amp;</span>gFilterHandle <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token function\">ASSERT</span><span class=\"token punctuation\">(</span> <span class=\"token function\">NT_SUCCESS</span><span class=\"token punctuation\">(</span> status <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// VS2019 中用的是 FLT_ASSERT</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">NT_SUCCESS</span><span class=\"token punctuation\">(</span> status <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token comment\">// 开启过滤行为</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        status <span class=\"token operator\">=</span> <span class=\"token function\">FltStartFiltering</span><span class=\"token punctuation\">(</span> gFilterHandle <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">NT_SUCCESS</span><span class=\"token punctuation\">(</span> status <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token comment\">// 如果不能正常开启，那么这个注册没有意义，取消注册并以失败退出</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token function\">FltUnregisterFilter</span><span class=\"token punctuation\">(</span> gFilterHandle <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">return</span> status<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"fltregisterfilter-fltstartfiltering和fltregisterfilter\"><a class=\"anchor\" href=\"#fltregisterfilter-fltstartfiltering和fltregisterfilter\">#</a> FltRegisterFilter、FltStartFiltering 和 FltRegisterFilter</h3>\n<p>其中，  <code>FltRegisterFilter</code>  是一个非常重要的内核 API， 是微过滤器生命的开始。 这个函数的原型如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">NTAPI</span> <span class=\"token expression\">__stdcall</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">FLTAPI</span> <span class=\"token expression\">NTAPI</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>NTSTATUS</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>FLTAPI</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">FltRegisterFilter</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    _In_ PDRIVER_OBJECT Driver<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    _In_ CONST FLT_REGISTRATION <span class=\"token operator\">*</span>Registration<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    _Outptr_ PFLT_FILTER <span class=\"token operator\">*</span>RetFilter</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>第 1 个参数是本驱动的驱动对象， 是在入口函数  <code>DriverEntry</code>  中作为参数传入的。<br />\n第 2 个参数就是一个宣告注册信息的结构， 这个结构内含描述这个过滤器的所有信息， 在本节中， 称为微过滤器注册结构。<br />\n第 3 个参数（RetFilter） 是一个返回参数， 返回注册成功的微过滤器句柄。 微过滤器句柄非常常用， 一般都保存在全局变量中以备后用， 在下面调用函数  <code>FltStartFiltering</code>  时就需要以这个句柄作为参数。</p>\n<p>显而易见， 调用  <code>FltRegisterFilter</code>  本身并不复杂， 问题在于要填写一个合法的  <code>FLT_REGISTRATION</code>  结构。 这个结构将在下面介绍。</p>\n<p>另一个函数是  <code>FltStartFiltering</code>  ， 在调用这个函数之前， 过滤是不起作用的。 这个函数的作用是开启。 它的原型如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>NTSTATUS</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>FLTAPI</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">FltStartFiltering</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    _In_ PFLT_FILTER Filter</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>此函数非常简单， 只有一个参数， 就是调用  <code>FltRegisterFilter</code>  时返回的微过滤器句柄。<br />\n一般情况下， 这个函数的调用会成功； 如果失败， 除了放弃过滤， 几乎别无选择。</p>\n<h2 id=\"微过滤器的数据结构\"><a class=\"anchor\" href=\"#微过滤器的数据结构\">#</a> 微过滤器的数据结构</h2>\n<p>注册微过滤器时， 我们填写了一个名为微过滤器注册结构（ <code>FLT_REGISTRATION</code> ）的数据结构。<br />\n定义如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_FLT_REGISTRATION</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 结构的大小和结构的版本</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    USHORT Size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    USHORT Version<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 微过滤器的标志位</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    FLT_REGISTRATION_FLAGS Flags<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">//  Variable length array of routines that are used to manage contexts in the system.</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">//  </span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// </span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    CONST FLT_CONTEXT_REGISTRATION <span class=\"token operator\">*</span>ContextRegistration<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">//  Variable length array of routines used for processing pre- and post-</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\">//  file system operations.</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">// 操作回调函数。这是重点中的重点。</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    CONST FLT_OPERATION_REGISTRATION <span class=\"token operator\">*</span>OperationRegistration<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token comment\">//  This is called before a filter is unloaded.  If an ERROR or WARNING</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token comment\">//  status is returned then the filter is NOT unloaded.  A mandatory unload</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token comment\">//  can not be failed.</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token comment\">//  If a NULL is specified for this routine, then the filter can never be</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token comment\">//  unloaded.</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token comment\">// 卸载回调函数</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    PFLT_FILTER_UNLOAD_CALLBACK FilterUnloadCallback<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token comment\">//  This is called to see if a filter would like to attach an instance</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token comment\">//  to the given volume.  If an ERROR or WARNING status is returned, an</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token comment\">//  attachment is not made.</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token comment\">//  If a NULL is specified for this routine, the attachment is always made.</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token comment\">// 实例安装回调</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    PFLT_INSTANCE_SETUP_CALLBACK InstanceSetupCallback<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token comment\">//  This is called to see if the filter wants to detach from the given</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token comment\">//  volume.  This is only called for manual detach requests.  If an</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token comment\">//  ERROR or WARNING status is returned, the filter is not detached.</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token comment\">//  If a NULL is specified for this routine, then instances can never be</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token comment\">//  manually detached.</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    PFLT_INSTANCE_QUERY_TEARDOWN_CALLBACK InstanceQueryTeardownCallback<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token comment\">//  This is called at the start of a filter detaching from a volume.</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token comment\">//  It is OK for this field to be NULL.</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    PFLT_INSTANCE_TEARDOWN_CALLBACK InstanceTeardownStartCallback<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    <span class=\"token comment\">//  This is called at the end of a filter detaching from a volume.  All</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    <span class=\"token comment\">//  outstanding operations have been completed by the time this routine</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token comment\">//  is called.</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    <span class=\"token comment\">//  It is OK for this field to be NULL.</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    PFLT_INSTANCE_TEARDOWN_CALLBACK InstanceTeardownCompleteCallback<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    <span class=\"token comment\">//  The following callbacks are provided by a filter only if it is</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>    <span class=\"token comment\">//  interested in modifying the name space.</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    <span class=\"token comment\">//  If NULL is specified for these callbacks, it is assumed that the</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    <span class=\"token comment\">//  filter would not affect the name being requested.</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>    <span class=\"token comment\">//  生成文件名回调</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>    PFLT_GENERATE_FILE_NAME GenerateFileNameCallback<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>    <span class=\"token comment\">// 格式化名字组件</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>    PFLT_NORMALIZE_NAME_COMPONENT NormalizeNameComponentCallback<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>    <span class=\"token comment\">// 格式化上下文清理回调</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>    PFLT_NORMALIZE_CONTEXT_CLEANUP NormalizeContextCleanupCallback<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>    <span class=\"token comment\">//  The PFLT_NORMALIZE_NAME_COMPONENT_EX callback is also a name</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>    <span class=\"token comment\">//  provider callback. It is not included here along with the</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>    <span class=\"token comment\">//  other name provider callbacks to take care of the registration</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>    <span class=\"token comment\">//  structure versioning issues.</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre></pre></td></tr><tr><td data-num=\"95\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\">FLT_MGR_LONGHORN</span></span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>    <span class=\"token comment\">//  This is called for transaction notifications received from the KTM</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>    <span class=\"token comment\">//  when a filter has enlisted on that transaction.</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>    PFLT_TRANSACTION_NOTIFICATION_CALLBACK TransactionNotificationCallback<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>    <span class=\"token comment\">//  This is the extended normalize name component callback</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>    <span class=\"token comment\">//  If a mini-filter provides this callback, then  this callback</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>    <span class=\"token comment\">//  will be used as opposed to using PFLT_NORMALIZE_NAME_COMPONENT</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>    <span class=\"token comment\">//  The PFLT_NORMALIZE_NAME_COMPONENT_EX provides an extra parameter</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>    <span class=\"token comment\">//  (PFILE_OBJECT) in addition to the parameters provided to</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>    <span class=\"token comment\">//  PFLT_NORMALIZE_NAME_COMPONENT. A mini-filter may use this parameter</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>    <span class=\"token comment\">//  to get to additional information like the TXN_PARAMETER_BLOCK.</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>    <span class=\"token comment\">//  A mini-filter that has no use for the additional parameter may</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>    <span class=\"token comment\">//  only provide a PFLT_NORMALIZE_NAME_COMPONENT callback.</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>    <span class=\"token comment\">//  A mini-filter may provide both a PFLT_NORMALIZE_NAME_COMPONENT</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>    <span class=\"token comment\">//  callback and a PFLT_NORMALIZE_NAME_COMPONENT_EX callback. The</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>    <span class=\"token comment\">//  PFLT_NORMALIZE_NAME_COMPONENT_EX callback will be used by fltmgr</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>    <span class=\"token comment\">//  versions that understand this callback (Vista RTM and beyond)</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>    <span class=\"token comment\">//  and PFLT_NORMALIZE_NAME_COMPONENT callback will be used by fltmgr</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>    <span class=\"token comment\">//  versions that do not understand the PFLT_NORMALIZE_NAME_COMPONENT_EX</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>    <span class=\"token comment\">//  callback (prior to Vista RTM). This allows the same mini-filter</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>    <span class=\"token comment\">//  binary to run with all versions of fltmgr.</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>    PFLT_NORMALIZE_NAME_COMPONENT_EX NormalizeNameComponentExCallback<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre></pre></td></tr><tr><td data-num=\"129\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span> <span class=\"token comment\">// FLT_MGR_LONGHORN</span></span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre></pre></td></tr><tr><td data-num=\"131\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\">FLT_MGR_WIN8</span></span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>    <span class=\"token comment\">//  This is called for IO failures due to the existence of sections</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>    <span class=\"token comment\">//  when those sections are created through FltCreateSectionForDatascan.</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>    PFLT_SECTION_CONFLICT_NOTIFICATION_CALLBACK SectionNotificationCallback<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre></pre></td></tr><tr><td data-num=\"140\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span> <span class=\"token comment\">// FLT_MGR_WIN8</span></span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre></pre></td></tr><tr><td data-num=\"142\"></td><td><pre><span class=\"token punctuation\">&#125;</span> FLT_REGISTRATION<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>PFLT_REGISTRATION<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>上面的结构来自 VS2019 中的定义，中文是书中的介绍。</p>\n<p>第 1 个域 Size 表示  <code>FLT_REGISTRATION</code>  结构的大小， 当然大小就是  <code>sizeof(FLT_REGISTRATION)</code> 。 微软习惯在 Windows 内核的数据结构前面加上大小， 易于排错。</p>\n<p>第 2 个域 Version 是  <code>FLT_REGISTRATION</code>  结构的版本号。 对于这个域， 读者不需要多加考虑， 直接按照惯例填写  <code>FLT_REGISTRATION_VERSION</code>  即可。</p>\n<p>第 3 个域 Flags 是标志位， 标记是否要收到这类的操作。 但是有趣的是， 这个域只有两种设置法： 一种设置为 NULL， 不起任何作用； 另一种则设置为  <code>FLTFL_REGISTRATION_DO_NOT_ SUPPORT_SERVICE_STOP</code>  ， 代表当停止服务时  <code>Minifilter</code>  不会响应且不会调用到  <code>FilterUnloadCallback</code>  ， 即使  <code>FilterUnloadCallback</code>  并不是 NULL。</p>\n<p>第 4 个域  <code>Context Registration</code>  是上下文注册， 注册处理上下文的函数。</p>\n<p>第 5 个域  <code>Operation Registration</code>  是操作回调函数集注册。 这是最重要的一个域， 我们将要过滤的文件操作回调函数写在其中， 可以定义所有功能代码对应的回调函数。</p>\n<p>举例如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>CONST FLT_OPERATION_REGISTRATION Callbacks<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span> IRP_MJ_CREATE<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      XxxPreCreate<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      XxxPostCreate <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span> IRP_MJ_CLEANUP<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      XxxPreCleanup<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token constant\">NULL</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span> IRP_MJ_WRITE<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      XxxPreWrite<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      XxxPostWrite <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">// 填写要过滤的定义集合</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span> IRP_MJ_OPERATION_END <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这是  <code>FLT_OPERATION_REGISTRATION</code>  这个结构， 后面会做更详细的学习。</p>\n<p>第 6 个域 FilterUnloadCallback 是驱动卸载回调函数。 在驱动被停止时， 函数被调用，<br />\n代表要释放程序内的资源以结束过滤行为。 这个域可以设置为 NULL。</p>\n<p>第 7 个域 InstanceSetupCallback 是实例安装回调函数， 当一个卷实例要加载时会通过此<br />\n回调函数处理。 这个域可以设置为 NULL。</p>\n<p>第 8 个域 InstanceQueryTeardownCallback 是控制实例销毁函数， 这个回调函数只会在一<br />\n个手工解除绑定的请求时被调用。 这个域可以设置为 NULL。</p>\n<p>第 9 个域 InstanceTeardownStartCallback 是实例解绑定函数， 当调用时代表已经决定解<br />\n除绑定。 这个域可以设置为 NULL。</p>\n<p>第 10 个域 InstanceTeardownCompleteCallback 是实例解绑定完成函数， 当确定时调用解<br />\n除绑定后的完成函数。 这个域可以设置为 NULL。</p>\n<p>还有一些域因为使用不多， 所以本书将其略去， 有兴趣的读者可以自己参考相关文档。 笔者习惯将它们设置为 NULL。</p>\n<p>下面是一个设置的例子。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>CONST FLT_REGISTRATION FilterRegistration <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span> FLT_REGISTRATION <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>         <span class=\"token comment\">//  Size</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    FLT_REGISTRATION_VERSION<span class=\"token punctuation\">,</span>           <span class=\"token comment\">//  Version</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>                                  <span class=\"token comment\">//  Flags</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span>                               <span class=\"token comment\">//  Context</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    Callbacks<span class=\"token punctuation\">,</span>                          <span class=\"token comment\">//  Operation callbacks</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    PtUnload<span class=\"token punctuation\">,</span>                           <span class=\"token comment\">//  MiniFilterUnload</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    PtInstanceSetup<span class=\"token punctuation\">,</span>                    <span class=\"token comment\">//  InstanceSetup</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    PtInstanceQueryTeardown<span class=\"token punctuation\">,</span>            <span class=\"token comment\">//  InstanceQueryTeardown</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    PtInstanceTeardownStart<span class=\"token punctuation\">,</span>            <span class=\"token comment\">//  InstanceTeardownStart</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    PtInstanceTeardownComplete<span class=\"token punctuation\">,</span>         <span class=\"token comment\">//  InstanceTeardownComplete</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span>                               <span class=\"token comment\">//  GenerateFileName</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span>                               <span class=\"token comment\">//  GenerateDestinationFileName</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token constant\">NULL</span>                                <span class=\"token comment\">//  NormalizeNameComponent</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>其中， 最重要的就是  <code>CallBacks</code> 。这是一个回调函数数组， 在其中可以处理所有的请求。</p>\n<p>但是处理方式和以前做请求过滤时有所不同， 以前处理的是 IRP， 其实有两种处理：<strong>一种是在请求完成之前就进行处理</strong>； <strong>另一种是用事件等待请求完成之后， 或者在完成函数中进行处理</strong>。</p>\n<p>前一种适合要拦截请求本身的情况， 后一种适合要拦截请求之后返回的结果的情况。<br />\n在 Minifilter 中， 这两种过滤被分在两个回调函数中， 一个称为预操作回调函数（Pre-Operation Function） ， 另一个称为后操作回调函数（Post-Operation Function） 。</p>\n<p>下面是一个例子。仅供参考。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>CONST FLT_OPERATION_REGISTRATION Callbacks<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span> IRP_MJ_CREATE<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      XxxPreCreate<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 生成预操作回调函数</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      XxxPostCreate <span class=\"token comment\">// 生成后操作回调函数</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span> IRP_MJ_WRITE<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      FLTFL_OPERATION_REGISTRATION_SKIP_CACHED_IO<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      XxxPreWrite<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      XxxPostWrite </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><code>Callbacks</code>  数组内存储数据结构为  <code>FLT_OPERATION_REGISTRATION</code>  的数组， 用意是把需要做过滤的请求一个个声明出来， 每个都包括了预操作回调函数与后操作回调函数，宣告过后通过注册就能使 IRP 包顺利地通过这边指定的函数来做处理了。 当有多个微过滤器时， IRP 会通过每一个微过滤器的预操作回调函数与后操作回调函数， 除非 IRP 传递到中途被直接返回而不再继续传递下去。</p>\n<p>读者可以看到， 这个数组的每个元素由四部分组成。 第 1 个域是请求的主功能号， 这是我们熟知的。 第 2 个域是一个标志位， 有三种写法： 第 1 种是写 0， 这个标志仅仅对读 / 写回调有用， 所以对生成请求的处理直接写 0 即可； 第 2 种是写  <code>FLTFL_OPERATION_REGISTRATION_SKIP_CACHED_IO</code>  ， 表示不过滤缓冲读 / 写请求； 第 3 种是写  <code>FLTFL_OPERATION_REGISTRATION_SKIP_PAGING_IO</code>  ， 表示不过滤分页读 / 写请求。 接下来的两个域就是预操作回调函数和后操作回调函数。请注意最后一个元素必须是  <code>IRP_MJ_OPERATION_END</code>  ， 否则过滤管理器无法知道到底有多少个元素。</p>\n<p>读者已经看到了上面有若干个回调函数， 其中有一些回调函数在操作回调函数集 Callbacks 中， 还有一些回调函数就直接在微过滤器注册结构中。 下面的任务就是逐个实现这些函数。在操作回调函数集中， 本章的例子只需要用到生成回调函数， 其他的回调处理可以按这个类推。 读者完全可以把第 12 章相关的各种请求的处理逐个挪到 Minifilter 的框架里。</p>\n<h2 id=\"卸载函数\"><a class=\"anchor\" href=\"#卸载函数\">#</a> 卸载函数</h2>\n<p>在卸载回调函数中， 应该注销我们曾经注册过的微过滤器， 这可以通过调用内核 API 函数 FltUnregisterFilter 来实现。 除此之外， 在这个回调函数中， 读者可以完成以前在传统型的文件过滤驱动中驱动卸载函数所完成的所有工作。 但是本例非常简单， 仅仅是调用 FltUnregisterFilter 而已。 这个函数也只有一个参数， 就是微过滤器句柄。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>NTSTATUS</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">FsFilter01Unload</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    _In_ FLT_FILTER_UNLOAD_FLAGS Flags</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">UNREFERENCED_PARAMETER</span><span class=\"token punctuation\">(</span> Flags <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">PAGED_CODE</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">PT_DBG_PRINT</span><span class=\"token punctuation\">(</span> PTDBG_TRACE_ROUTINES<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                  <span class=\"token punctuation\">(</span><span class=\"token string\">\"FsFilter01!FsFilter01Unload: Entered\\n\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token function\">FltUnregisterFilter</span><span class=\"token punctuation\">(</span> gFilterHandle <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">return</span> STATUS_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这个函数的主要工作是释放资源，  <code>FltUnregisterFilter</code>  与  <code>FltRegisterFilter</code>  互相对应， <code>FltUnregisterFilter</code> <strong> 用来释放已注册的微过滤器在 Windows 内核内部所使用的资源</strong>。</p>\n<h2 id=\"预操作回调函数\"><a class=\"anchor\" href=\"#预操作回调函数\">#</a> 预操作回调函数</h2>\n<p>我们针对  <code>IRP_MJ_CREATE</code>  这个主功能号<em>来设置预操作回调函数与后操作回调函数</em>，当系统接收到标识为  <code>IRP_MJ_CREATE</code>  的 IRP 也就是试图生成或者打开文件时， 就会调用到预操作回调函数与后操作回调函数。</p>\n<p><code>NPPreCreate</code>  是我们<strong>设置的预操作回调函数</strong>。这个函数有三个参数， 其中第一个参数是一个  <code>FLT_CALLBACK_DATA</code>  的指针，   <code>FLT_CALLBACK_DATA</code>  称为回调数据包， 这个数据包内含有和这个请求相关的全部信息。 正是因为有了这个参数， 所以不再直接读取 IRP 的信息了。 这个函数的参数中不再有 IRP 的指针。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>FLT_PREOP_CALLBACK_STATUS</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">NPPreCreate</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    __inout PFLT_CALLBACK_DATA Data<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    __in PCFLT_RELATED_OBJECTS FltObjects<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    __deref_out_opt PVOID<span class=\"token operator\">*</span> CompletionContext</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 缓存区，用来获得文件名</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">char</span> FileName<span class=\"token punctuation\">[</span><span class=\"token number\">260</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"X:\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    NTSTATUS status<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    PFLT_FILE_NAME_INFORMATION nameInfo<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 未使用的参数，用宏掩盖之使其不发生编译警告</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token function\">UNREFERENCED_PARAMETER</span><span class=\"token punctuation\">(</span>FltObjects<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token function\">UNREFERENCED_PARAMETER</span><span class=\"token punctuation\">(</span>CompletionContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">// 检测可分页代码</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token function\">PAGED_CODE</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    __try <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token comment\">// 这里有获取文件名信息，获取文件名和解析文件名等几个函数，稍后在详细了解。</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        status <span class=\"token operator\">=</span> <span class=\"token function\">FltGetFileNameInformation</span><span class=\"token punctuation\">(</span>Data<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            FLT_FILE_NAME_NORMALIZED <span class=\"token operator\">|</span> FLT_FILE_NAME_QUERY_DEFAULT<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token operator\">&amp;</span>nameInfo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">NT_SUCCESS</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token comment\">//如果成功了，解析文件名信息，然后比较其中是否有 NOTEPAD.EXE 子字符串</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>gCommand <span class=\"token operator\">==</span> ENUM_BLOCK<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                <span class=\"token function\">FltParseFileNameInformation</span><span class=\"token punctuation\">(</span>nameInfo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                <span class=\"token comment\">// 将字符串转换为 CHAR 大写以利于比对字符串</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">NPUnicodeStringToChar</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>nameInfo<span class=\"token operator\">-></span>Name<span class=\"token punctuation\">,</span> FileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">strstr</span><span class=\"token punctuation\">(</span>FileName<span class=\"token punctuation\">,</span> <span class=\"token string\">\"NOTEPAD.EXE\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                        <span class=\"token comment\">// 填写拒绝</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                        Data<span class=\"token operator\">-></span>IoStatus<span class=\"token punctuation\">.</span>Status <span class=\"token operator\">=</span> STATUS_ACCESS_DENIED<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                        Data<span class=\"token operator\">-></span>IoStatus<span class=\"token punctuation\">.</span>Information <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                        <span class=\"token function\">FltReleaseFileNameInformation</span><span class=\"token punctuation\">(</span>nameInfo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                        <span class=\"token comment\">// 返回请求已经结束，，也就是不用在下传了</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                        <span class=\"token keyword\">return</span> FLT_PREOP_COMPLETE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token comment\">// 释放名字资源 </span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token function\">FltReleaseFileNameInformation</span><span class=\"token punctuation\">(</span>nameInfo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token function\">__except</span> <span class=\"token punctuation\">(</span>EXCEPTION_EXECUTE_HANDLER<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"NPPreCreate EXCEPTION_EXECUTE_HANDLER\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token keyword\">return</span> FLT_PREOP_SUCCESS_WITH_CALLBACK<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这是一个很简单的预操作回调函数， 它的主要作用就是尽可能地解析目前的文件名称， 然后判断这个名称是否符合我们需要的条件。 我们的目的是限制名为 “notepad.exe” 的文件被使用， 任何文件的操作比如读取、 删除、 覆盖、 重命名、 执行等， 必定都会先调用到打开请求。 因此，在这里做个简单的判断， 试图分辨出目前系统操作的文件是否符合我们所寻找的条件。</p>\n<p>上面用到了一个自定义函数  <code>NPUnicodeStringToChar</code> 。 该函数将  <code>UNICODE_STRING</code>  转换为全大写的 CHAR 数组， 以便搜索子字符串 “NOTEPAD.EXE”。 其中使用了内核 API 函数  <code>RtlUpperChar</code>  转换大小写， 我们可以试着自己实现这个函数。</p>\n<h3 id=\"了解相关数据结构\"><a class=\"anchor\" href=\"#了解相关数据结构\">#</a> 了解相关数据结构</h3>\n<p><code>FLT_CALLBACK_DATA</code>  、  <code>PFLT_IO_PARAMETER_BLOCK</code>  、  <code>FLT_PARAMETERS</code></p>\n<h4 id=\"flt_callback_data\"><a class=\"anchor\" href=\"#flt_callback_data\">#</a> FLT_CALLBACK_DATA</h4>\n<p>下面是回调数据包  <code>FLT_CALLBACK_DATA</code>  的定义:</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_FLT_CALLBACK_DATA</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">//  Flags</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    FLT_CALLBACK_DATA_FLAGS Flags<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">//  Thread that initiated this operation.</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    PETHREAD CONST Thread<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">//  Pointer to the changeable i/o parameters</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    PFLT_IO_PARAMETER_BLOCK CONST Iopb<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token comment\">//  For pre-op calls: if filter returns STATUS_IO_COMPLETE, then it should</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token comment\">//  set the return i/o status here.  For post-operation calls, this is set</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token comment\">//  by filter-manager indicating the completed i/o status.</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    IO_STATUS_BLOCK IoStatus<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_FLT_TAG_DATA_BUFFER</span> <span class=\"token operator\">*</span>TagData<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">union</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token comment\">//  Queue links if the FltMgr queue is used to</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token comment\">//  pend the callback</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            LIST_ENTRY QueueLinks<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            <span class=\"token comment\">//  Additional context</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            PVOID QueueContext<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token comment\">//  The following are available to filters to use</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token comment\">//  in whatever manner desired if not using the filter manager</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token comment\">//  queues.</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token comment\">//  NOTE:  These fields are only valid while the filter is</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token comment\">//         processing this operation which is inside the operation</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token comment\">//         callback or while the operation is pended.</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        PVOID FilterContext<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token comment\">//  Original requester mode of caller</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    KPROCESSOR_MODE RequestorMode<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre></pre></td></tr><tr><td data-num=\"67\"></td><td><pre><span class=\"token punctuation\">&#125;</span> FLT_CALLBACK_DATA<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>PFLT_CALLBACK_DATA<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>回调数据包结构代表了一个 I/O 操作。 过滤管理器与微过滤驱动都使用这个结构来初始化与处理 I/O 操作， 内含许多嵌套结构定义， 可以在 WDK 头文件  <code>fltkernel.h</code>  中找到更多有关的数据。这个结构可以说是 Minifilter 的基础。</p>\n<p>大部分读者会提出疑问， 以前在  <code>sfilter</code>  中， 我们从 IRP 指针及 IRP 的当前栈空间指针中得到许多信息， 比如写请求的长度等， 现<br />\n在如何能得到这些信息呢？</p>\n<h4 id=\"pflt_io_parameter_block\"><a class=\"anchor\" href=\"#pflt_io_parameter_block\">#</a> PFLT_IO_PARAMETER_BLOCK</h4>\n<p>注意  <code>Iopb</code>  域， 这是一个  <code>PFLT_IO_PARAMETER_BLOCK</code>  指针。 这个数据结构定义如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_FLT_IO_PARAMETER_BLOCK</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">//  Fields from IRP</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">//  Flags</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    ULONG IrpFlags<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">//  Major/minor functions from IRP</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    UCHAR MajorFunction<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    UCHAR MinorFunction<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">//  The flags associated with operations.</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">//  The IO_STACK_LOCATION.Flags field in the old model (SL_* flags)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    UCHAR OperationFlags<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token comment\">//  For alignment</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    UCHAR Reserved<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token comment\">//  The FileObject that is the target for this</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token comment\">//  IO operation.</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    PFILE_OBJECT TargetFileObject<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token comment\">//  Instance that i/o is directed to</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    PFLT_INSTANCE TargetInstance<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token comment\">//  Normalized parameters for the operation</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    FLT_PARAMETERS Parameters<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token punctuation\">&#125;</span> FLT_IO_PARAMETER_BLOCK<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>PFLT_IO_PARAMETER_BLOCK<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>在这里就可以找到以前熟悉的许多信息了， 包括主功能号、 次功能号和文件对象指针等。</p>\n<h4 id=\"flt_parameters\"><a class=\"anchor\" href=\"#flt_parameters\">#</a> FLT_PARAMETERS</h4>\n<p>此外， 其中还有一个结构为  <code>FLT_PARAMETERS</code>  的<strong>参数域</strong>， 这个数据结构是一个共用体， 应用的域根据不同的主功能号而不同， 该结构体的部分如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">union</span> _FLT_PARAMETERS <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">//  IRP_MJ_CREATE</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        PIO_SECURITY_CONTEXT SecurityContext<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">//  The low 24 bits contains CreateOptions flag values.</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">//  The high 8 bits contains the CreateDisposition values.</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        ULONG Options<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        USHORT POINTER_ALIGNMENT FileAttributes<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        USHORT ShareAccess<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        ULONG POINTER_ALIGNMENT EaLength<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        PVOID EaBuffer<span class=\"token punctuation\">;</span>                 <span class=\"token comment\">//Not in IO_STACK_LOCATION parameters list</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        LARGE_INTEGER AllocationSize<span class=\"token punctuation\">;</span>   <span class=\"token comment\">//Not in IO_STACK_LOCATION parameters list</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> Create<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    ………</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token comment\">//  IRP_MJ_READ</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        ULONG Length<span class=\"token punctuation\">;</span>                   <span class=\"token comment\">//Length of transfer</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        ULONG POINTER_ALIGNMENT Key<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        LARGE_INTEGER ByteOffset<span class=\"token punctuation\">;</span>       <span class=\"token comment\">//Offset to read from</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        PVOID ReadBuffer<span class=\"token punctuation\">;</span>       <span class=\"token comment\">//Not in IO_STACK_LOCATION parameters list</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        PMDL MdlAddress<span class=\"token punctuation\">;</span>        <span class=\"token comment\">//Mdl address for the buffer  (maybe NULL)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> Read<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token comment\">//  IRP_MJ_WRITE</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        ULONG Length<span class=\"token punctuation\">;</span>                   <span class=\"token comment\">//Length of transfer</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        ULONG POINTER_ALIGNMENT Key<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        LARGE_INTEGER ByteOffset<span class=\"token punctuation\">;</span>       <span class=\"token comment\">//Offset to write to</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        PVOID WriteBuffer<span class=\"token punctuation\">;</span>      <span class=\"token comment\">//Not in IO_STACK_LOCATION parameters list</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        PMDL MdlAddress<span class=\"token punctuation\">;</span>        <span class=\"token comment\">//Mdl address for the buffer  (maybe NULL)</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> Write<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    ………</pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token punctuation\">&#125;</span> FLT_PARAMETERS<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>PFLT_PARAMETERS<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>从这里就很容易找到写请求包括的写入位置、 长度和缓冲区等相关参数。</p>\n<h3 id=\"解析文件路径所需要调用的函数\"><a class=\"anchor\" href=\"#解析文件路径所需要调用的函数\">#</a> 解析文件路径所需要调用的函数</h3>\n<h4 id=\"fltgetfilenameinformation\"><a class=\"anchor\" href=\"#fltgetfilenameinformation\">#</a> FltGetFileNameInformation</h4>\n<p>第一个函数是  <code>FltGetFileNameInformation</code>  ，这个函数可以取得一个文件或目录的文件名信息结构。</p>\n<p><strong>语法:</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>NTSTATUS FLTAPI <span class=\"token function\">FltGetFileNameInformation</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token punctuation\">[</span>in<span class=\"token punctuation\">]</span>  PFLT_CALLBACK_DATA         CallbackData<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token punctuation\">[</span>in<span class=\"token punctuation\">]</span>  FLT_FILE_NAME_OPTIONS      NameOptions<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">[</span>out<span class=\"token punctuation\">]</span> PFLT_FILE_NAME_INFORMATION <span class=\"token operator\">*</span>FileNameInformation</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong>参数:</strong></p>\n<p><code>[in] CallbackData</code></p>\n<p>指向  <code>FLT_CALLBACK_DATA</code>  结构的指针，它是 I/O 操作的回调数据结构。 此参数是必需的，不能为  <strong>NULL</strong> 。</p>\n<p><code>[in] NameOptions</code></p>\n<p>一个  <code>FLT_FILE_NAME_OPTIONS</code>  值，该值包含指定要返回的名称信息的格式以及筛选器管理器要使用的查询方法的标志。 (名称提供程序微型筛选器驱动程序可以使用其他标志来指定名称查询选项。) 此参数是必需的，不能为  <strong>NULL</strong> 。</p>\n<p>下面是文件名格式标志值。 只能指定以下标志之一。 有关这些格式的说明，请参阅  <code>FLT_FILE_NAME_INFORMATION</code>  。</p>\n<table>\n<thead>\n<tr>\n<th>名称格式标志值</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>FLT_FILE_NAME_NORMALIZED</td>\n<td><em>FileNameInformation</em> 参数接收包含文件的规范化名称的结构的地址。</td>\n</tr>\n<tr>\n<td>FLT_FILE_NAME_OPENED</td>\n<td><em>FileNameInformation</em> 参数接收包含打开文件时使用的名称的结构的地址。</td>\n</tr>\n<tr>\n<td>FLT_FILE_NAME_SHORT</td>\n<td><em>FileNameInformation</em> 参数接收包含文件的短 (8.3) 名称的结构的地址。 短名称由最多 8 个字符组成，后跟一个句点，最多 3 个字符。 文件的短名称不包括卷名称、目录路径或流名称。 在预创建路径中无效。</td>\n</tr>\n</tbody>\n</table>\n<p>下面是文件名查询方法标志值。 只能指定以下标志之一。</p>\n<table>\n<thead>\n<tr>\n<th>查询方法标志值</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>FLT_FILE_NAME_QUERY_DEFAULT</td>\n<td>如果目前无法安全地查询文件系统中的文件名，<strong>FltGetFileNameInformation</strong> 不执行任何操作。 否则， <strong>FltGetFileNameInformation</strong> 会查询筛选器管理器的名称缓存以获取文件名信息。 如果在缓存中找不到该名称， <strong>FltGetFileNameInformation</strong> 会查询文件系统并缓存结果。</td>\n</tr>\n<tr>\n<td>FLT_FILE_NAME_QUERY_CACHE_ONLY</td>\n<td><strong>FltGetFileNameInformation</strong> 查询筛选器管理器的名称缓存以获取文件名信息。 <strong>FltGetFileNameInformation</strong> 不查询文件系统。</td>\n</tr>\n<tr>\n<td>FLT_FILE_NAME_QUERY_FILESYSTEM_ONLY</td>\n<td><strong>FltGetFileNameInformation</strong> 查询文件系统以获取文件名信息。 <strong>FltGetFileNameInformation</strong> 不会查询筛选器管理器的名称缓存，也不会缓存文件系统查询的结果。</td>\n</tr>\n<tr>\n<td>FLT_FILE_NAME_QUERY_ALWAYS_ALLOW_CACHE_LOOKUP</td>\n<td><strong>FltGetFileNameInformation</strong> 查询筛选器管理器的名称缓存以获取文件名信息。 如果在缓存中找不到该名称，并且目前可以安全地执行此操作， <strong>FltGetFileNameInformation</strong> 会查询文件系统以获取文件名信息并缓存结果。</td>\n</tr>\n</tbody>\n</table>\n<p>名称提供程序微型筛选器使用以下标志来指定文件名操作的属性。</p>\n<table>\n<thead>\n<tr>\n<th>名称提供程序标志值</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>FLT_FILE_NAME_REQUEST_FROM_CURRENT_PROVIDER</td>\n<td>名称提供程序微型筛选器可以使用此标志指定名称查询请求应重定向到自身， (名称提供程序微型筛选器) ，而不是由堆栈中较低的名称提供程序满足。</td>\n</tr>\n<tr>\n<td>FLT_FILE_NAME_DO_NOT_CACHE</td>\n<td>此标志表示不应缓存从此查询检索到的名称。 名称提供程序微型筛选器使用此标志来执行中间查询以生成名称。</td>\n</tr>\n<tr>\n<td>FLT_FILE_NAME_ALLOW_QUERY_ON_REPARSE</td>\n<td>名称提供程序微型筛选器可以使用此标志指定在创建后路径中查询名称是安全的，即使返回了 STATUS_REPARSE 也是如此。 调用方负责确保<strong> FileObject-FileName&gt;</strong> 字段未更改。 请勿将此标志用于装入点或符号链接重新分析点。</td>\n</tr>\n</tbody>\n</table>\n<p><code>[out] FileNameInformation</code></p>\n<p>指向调用方分配的变量的指针，该变量接收包含文件名信息的系统分配 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vemgtY24vd2luZG93cy1oYXJkd2FyZS9kcml2ZXJzL2RkaS9mbHRrZXJuZWwvbnMtZmx0a2VybmVsLV9mbHRfZmlsZV9uYW1lX2luZm9ybWF0aW9u\">FLT_FILE_NAME_INFORMATION</span> 结构的地址。 <strong>FltGetFileNameInformation</strong> 从分页池分配此结构。 此参数是必需的，不能为  <strong>NULL</strong> 。</p>\n<p><strong>返回值:</strong></p>\n<p>如果成功返回名称信息， <strong>FltGetFileNameInformation</strong> 将返回 STATUS_SUCCESS。 否则，它将返回相应的 NTSTATUS 值，例如以下值之一：</p>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<h4 id=\"fltparsefilenameinformation\"><a class=\"anchor\" href=\"#fltparsefilenameinformation\">#</a> FltParseFileNameInformation</h4>\n<p>第二个函数是  <code>FltParseFileNameInformation</code> ，</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>NTSTATUS FLTAPI <span class=\"token function\">FltParseFileNameInformation</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token punctuation\">[</span>in<span class=\"token punctuation\">,</span> out<span class=\"token punctuation\">]</span> PFLT_FILE_NAME_INFORMATION FileNameInformation</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>详细参见微软的官方文档→<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vemgtY24vd2luZG93cy1oYXJkd2FyZS9kcml2ZXJzL2RkaS9mbHRrZXJuZWwvbmYtZmx0a2VybmVsLWZsdHBhcnNlZmlsZW5hbWVpbmZvcm1hdGlvbj9mMXVybD0lM0ZhcHBJZCUzRERldjE2SURFRjElMjZsJTNEWkgtQ04lMjZrJTNEayhGTFRLRVJORUwlMjUyRkZsdFBhcnNlRmlsZU5hbWVJbmZvcm1hdGlvbiklM0JrKEZsdFBhcnNlRmlsZU5hbWVJbmZvcm1hdGlvbiklM0JrKERldkxhbmctQyUyNTJCJTI1MkIpJTNCayhUYXJnZXRPUy1XaW5kb3dzKSUyNnJkJTNEdHJ1ZQ==\">fltParseFileNameInformation 函数</span></p>\n<p><em>通过  <code>FltParseFileNameInformation</code>  函数可以得到一个含有路径名称与文件名的结构</em>， 我们再用字符串转换与比对便可以轻易地找出路径内是否有 NOTEPAD.EXE 等字符串。</p>\n<h3 id=\"否决请求\"><a class=\"anchor\" href=\"#否决请求\">#</a> 否决请求</h3>\n<p>在决定否决这个请求之后， 我们采用常见的与填写 IRP 的 IoStatus 域完全一样的方法否决这次请求， 相关代码如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Data<span class=\"token operator\">-></span>IoStatus<span class=\"token punctuation\">.</span>Status <span class=\"token operator\">=</span> STATUS_ACCESS_DENIED<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Data<span class=\"token operator\">-></span>IoStatus<span class=\"token punctuation\">.</span>Information <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">FltReleaseFileNameInformation</span><span class=\"token punctuation\">(</span>nameInfo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">return</span> FLT_PREOP_COMPLETE<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这段程序代码主要是告诉过滤管理器， 这个请求要即刻返回失败， 即代表这个 IRP 不会往下处理， 在操作系统里我们就会看到类似于图 13-1 所示的信息。</p>\n<p><img data-src=\"image002.png\" alt=\"\" /></p>\n<h2 id=\"后操作回调函数\"><a class=\"anchor\" href=\"#后操作回调函数\">#</a> 后操作回调函数</h2>\n<p>当 IRP 完成返回时就会通过后操作回调函数， 例如， 若不想让文件新建成功， 则可以通过 FltCancelFileOpen 来取消之前的 FILE_CREATE、 FILE_OPEN 等操作。</p>\n<p>在这段程序代码中并无 FltCancelFileOpen 操作， 是因为我们在预操作回调函数内就已经过滤该行为且设定返回值的动作了， 并不需要在这里重复操作。</p>\n<p>下面<strong>这个后处理回调函数对程序的功能本身并没有意义</strong>， 仅仅作为后处理回调写法的说明展示。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>FLT_POSTOP_CALLBACK_STATUS</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">NPPostCreate</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    __inout PFLT_CALLBACK_DATA Data<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    __in PCFLT_RELATED_OBJECTS FltObjects<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    __in_opt PVOID CompletionContext<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    __in FLT_POST_OPERATION_FLAGS Flags</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    FLT_POSTOP_CALLBACK_STATUS returnStatus <span class=\"token operator\">=</span> FLT_POSTOP_FINISHED_PROCESSING<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    PFLT_FILE_NAME_INFORMATION nameInfo<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    NTSTATUS status<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token function\">UNREFERENCED_PARAMETER</span><span class=\"token punctuation\">(</span>CompletionContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token function\">UNREFERENCED_PARAMETER</span><span class=\"token punctuation\">(</span>Flags<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">//  If this create was failing anyway, don't bother scanning now.</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">NT_SUCCESS</span><span class=\"token punctuation\">(</span>Data<span class=\"token operator\">-></span>IoStatus<span class=\"token punctuation\">.</span>Status<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">(</span>STATUS_REPARSE <span class=\"token operator\">==</span> Data<span class=\"token operator\">-></span>IoStatus<span class=\"token punctuation\">.</span>Status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">return</span> FLT_POSTOP_FINISHED_PROCESSING<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token comment\">//  Check if we are interested in this file.</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    status <span class=\"token operator\">=</span> <span class=\"token function\">FltGetFileNameInformation</span><span class=\"token punctuation\">(</span>Data<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        FLT_FILE_NAME_NORMALIZED <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        FLT_FILE_NAME_QUERY_DEFAULT<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token operator\">&amp;</span>nameInfo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">NT_SUCCESS</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token keyword\">return</span> FLT_POSTOP_FINISHED_PROCESSING<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token keyword\">return</span> returnStatus<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>返回  <code>FLT_POSTOP_FINISHED_PROCESSING</code> ， 代表 Minifilter 已经完成对 I/O 的所有处理， 并返回控制给过滤管理器。</p>\n<h2 id=\"其他回调函数\"><a class=\"anchor\" href=\"#其他回调函数\">#</a> 其他回调函数</h2>\n<p>除了前面介绍的回调函数， 还有其他的回调函数需要实现。 但是在大多数情况下， 这些函数的实现非常简单， 以至于用户只需要简单地拷贝例子中的代码就可以实现它们。 根据笔者的开发经验， 极少会利用到这些回调函数提供的功能。 下面对这些回调函数集中做个简单的介绍。 请注意这些函数都是可选的， 编程者可以不实现它们， 在微过滤器注册结构中将它们设置为 NULL。</p>\n<p>（1）  <code>InstatanceSetupCallback</code></p>\n<p><code>InstatanceSetupCallback</code>  这个回调函数存在的目的， 在于让本驱动的开发者来决定哪个<br />\n卷需要绑定， 哪个卷不需要绑定。  <code>InstatanceSetupCallback</code>  在下列情况下会被调用。</p>\n<ol>\n<li>当一个微过滤器加载时， 每个存在的卷都会导致这个调用。</li>\n<li>当一个新的卷被挂载时。</li>\n<li>当 FltAttachVolume 被调用（内核模式） 时。</li>\n<li>当 FltAttachVolumeAtAltitude 被调用（内核模式） 时。</li>\n<li>当 FilterAttach 被调用（用户模式） 时。</li>\n<li>当 FilterAttachAtAltitude 被调用（用户模式） 时。</li>\n</ol>\n<p>在这个过程中， 微过滤器决定是否在这个卷上生成实例。 这个回调函数的原型如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token function\">NTSTATUS</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">(</span>FLTAPI <span class=\"token operator\">*</span>PFLT_INSTANCE_SETUP_CALLBACK<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    _In_ PCFLT_RELATED_OBJECTS FltObjects<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    _In_ FLT_INSTANCE_SETUP_FLAGS Flags<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    _In_ DEVICE_TYPE VolumeDeviceType<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    _In_ FLT_FILESYSTEM_TYPE VolumeFilesystemType</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong>参数详解：</strong></p>\n<p><code>FltObjects</code>  结构含有指向微过滤器、 卷和实例的指针。<em>这个实例是指将要在 InstanceSetupCallback 函数中生成的实例。</em></p>\n<p><code>Flags</code>  标记是什么操作导致激发了  <code>InstanceSetupCallback</code> ：<br />\nFLTFL_INSTANCE_SETUP_AUTOMATIC_ATTACHMENT： 这是一个微过滤器注册时， 一个自动的绑定通知。 过滤管理器为每个刚加载的微过滤器枚举所有的卷。 如果使用<br />\n者明确地指定一个实例绑定到某一个卷， 则不会设置这个标记。<br />\nFLTFL_INSTANCE_SETUP_MANUAL_ATTACHMENT： 通过调用 FilterAttach（用<br />\n户态） 、 FilterAttachVolumeAtAltitude（用户态） 或者 FltAttachVolume（内核态） 所发起<br />\n的一个手工请求。<br />\nFLTFL_INSTANCE_SETUP_NEWLY_MOUNTED_VOLUME： 文件系统刚刚挂载了<br />\n一个卷， 所以呼叫 InstanceSetupCallback 来通知微过滤器， 如果它愿意则可以生成实例来<br />\n绑定这个卷。<br />\n在 InstanceSetupCallback 中， 微过滤器同时得到了卷设备类型（VolumeDeviceType）<br />\n和卷文件系统类型（VolumeFilesystemType） ， 用来判断这个卷是否是过滤器所感兴趣<br />\n的。 同时， 微过滤器可以调用 FltGetVolumeProperties 来获取卷属性。 通过<br />\n FltSetInstanceContext 在实例上设置上下文， 当然这是在需要绑定时。 它甚至可以在卷上打<br />\n开或者关闭文件。 如果这个回调函数返回了成功， 那么这个实例将绑定到卷上； 如果返回<br />\n了一个警告或者错误， 那么不会绑定。 如果微过滤器没有指定这个回调函数回调， 那么系<br />\n统将认为用户总是返回 STATUS_SUCCESS， 实例总是会生成并绑定。</p>\n<h2 id=\"minifilter与应用程序通信\"><a class=\"anchor\" href=\"#minifilter与应用程序通信\">#</a> Minifilter 与应用程序通信</h2>\n<p>考虑到内核态和用户态之间的互动， 以前的做法是使用用户态的 API 函数  <code>DeviceIoControl</code>  结合在内核模块中的处理控制请求来实现双方数据的传递。 但是在 Minifilter 中则不同， Minifilter 有内建支持的 API 提供给开发者使用， 这里就先针对这些 API 来做介绍。</p>\n<p>该方法叫作通信端口（Communication Port） ， 顾名思义， 就是<strong>先定义一个通道名称， 通过双边已经定义好的通信端口来做数据上的沟通</strong>； 使用上很像 socket 或管道（pipe） 之类的通信程序设计。</p>\n<h3 id=\"建立通信端口\"><a class=\"anchor\" href=\"#建立通信端口\">#</a> 建立通信端口</h3>\n<p>下面的代码演示了如何建立一个通信端口。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>PSECURITY_DESCRIPTOR sd<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>OBJECT_ATTRIBUTES oa<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>status <span class=\"token operator\">=</span> <span class=\"token function\">FltBuildDefaultSecurityDescriptor</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>sd<span class=\"token punctuation\">,</span> FLT_PORT_ALL_ACCESS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">NT_SUCCESS</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">goto</span> final<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>status <span class=\"token operator\">=</span> <span class=\"token function\">FltBuildDefaultSecurityDescriptor</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>sd<span class=\"token punctuation\">,</span> FLT_PORT_ALL_ACCESS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">NT_SUCCESS</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">goto</span> final<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token function\">RtlInitUnicodeString</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>uniString<span class=\"token punctuation\">,</span> MINISPY_PORT_NAME<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token function\">InitializeObjectAttributes</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>oa<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token operator\">&amp;</span>uniString<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    OBJ_KERNEL_HANDLE <span class=\"token operator\">|</span> OBJ_CASE_INSENSITIVE<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    sd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>status <span class=\"token operator\">=</span> <span class=\"token function\">FltCreateCommunicationPort</span><span class=\"token punctuation\">(</span>gFilterHandle<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token operator\">&amp;</span>gServerPort<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token operator\">&amp;</span>oa<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    NPMiniConnect<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    NPMiniDisconnect<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    NPMiniMessage<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong>代码详解如下：</strong></p>\n<p><code>FltBuildDefaultSecurityDescriptor</code>  以  <code>FLT_PORT_ALL_ACCESS</code>  权限来产生一个安全性的描述符，  <code>MINISPY_PORT_NAME</code>  是刚刚所讲的通信端口定义的名称， 通过  <code>InitializeObjectAttributes</code>  来初始化对象属性（OBJECT_ATTRIBUTES） ， 接下来便要注册这个通信端口以及所需要使用到的函数。</p>\n<p>这里必须提供三个回调函数， 类似于以前我们为了实现通信所写的控制请求的分发函数。<br />\n这三个回调函数分别是  <code>NPMiniConnect</code> 、  <code>NPMiniDisconnect</code> 、  <code>NPMiniMessage</code> 。</p>\n<p><code>NPMiniConnect</code>  是用户态与内核态建立连接时内核会调用到的函数。<br />\n <code>NPMiniDisconnect</code>  是用户态与内核态连接结束时内核会调用到的函数。<br />\n <code>NPMiniMessage</code>  是用户态与内核态传送数据时内核会调用到的函数。</p>\n<p><em>用户态不需要再使用  <code>CreateFile</code>  和  <code>DeviceIoControl</code>  系列的 API， Minifilter 有专门的 API 提供给用户态程序使用</em>。</p>\n<p>这里用到的相关的 API 主要有两个：  <code>FilterConnectCommunicationPort</code>  和  <code>FilterSendMessage</code> ， 通过  <code>FilterConnectCommunicationPort</code>  可以调用到我们提供的  <code>NPMiniConnec</code> t 函数， 通过  <code>FilterSendMessage</code>  可以调用到相对应的  <code>NPMiniMessage</code> 。一对一关系很容易理解。</p>\n<p>至于参数则都是  <code>PVOID</code>  的指针， 开发时两边程序<strong>通过自定义的数据结构</strong>， 传入指针即可将数据传入或取出。</p>\n<p>接下来学习一下  <code>FilterConnectCommunicationPort</code>  和 <code>FilterSendMessage</code>  函数</p>\n<h4 id=\"filterconnectcommunicationport和filtersendmessage函数\"><a class=\"anchor\" href=\"#filterconnectcommunicationport和filtersendmessage函数\">#</a> FilterConnectCommunicationPort 和 FilterSendMessage 函数</h4>\n<p>WDK 定义的  <code>FilterConnectCommunicationPort</code>  原型如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>HRESULT <span class=\"token function\">FilterConnectCommunicationPort</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token punctuation\">[</span>in<span class=\"token punctuation\">]</span>           LPCWSTR               lpPortName<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token punctuation\">[</span>in<span class=\"token punctuation\">]</span>           DWORD                 dwOptions<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">[</span>in<span class=\"token punctuation\">,</span> optional<span class=\"token punctuation\">]</span> LPCVOID               lpContext<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">[</span>in<span class=\"token punctuation\">]</span>           WORD                  wSizeOfContext<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token punctuation\">[</span>in<span class=\"token punctuation\">,</span> optional<span class=\"token punctuation\">]</span> LPSECURITY_ATTRIBUTES lpSecurityAttributes<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">[</span>out<span class=\"token punctuation\">]</span>          HANDLE                <span class=\"token operator\">*</span>hPort</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>函数在头文件  <code>fltuser.h</code>  中。</p>\n<p><strong>参数</strong></p>\n<p><code>[in] lpPortName</code></p>\n<p>指向以 NULL 结尾的宽字符串的指针，该字符串包含通信服务器端口的完全限定名称（例如，L&quot;\\MyFilterPort&quot;）。</p>\n<p><code>[in] dwOptions</code></p>\n<p>通信端口的连接选项。在 Windows 8.1 之前，此值设置为 0。</p>\n<table>\n<thead>\n<tr>\n<th>值</th>\n<th>意义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>FLT_PORT_FLAG_SYNC_HANDLE</strong></td>\n<td><em>hPort</em> 中 返回的句柄用于同步 I/O。此标志从 Windows 8.1 开始可用。</td>\n</tr>\n</tbody>\n</table>\n<p><code>[in, optional] lpContext</code></p>\n<p>指向调用者提供的上下文信息的指针，该上下文信息将传递给内核模式微过滤器的连接通知例程。（请参阅 FltCreateCommunicationPort 参考页面中的<em> ConnectNotifyCallback</em> 参数。）此参数是可选的，可以为 NULL。</p>\n<p><code>[in] wSizeOfContext</code></p>\n<p><em>lpContext</em> 参数指向的结构的大小（以字节为单位） 。如果<em> lpContext</em> 的值为非 <strong>NULL</strong> ，则此参数必须为非零。如果<em> lpContext</em> 为 <strong>NULL</strong> ，则此参数必须为零。</p>\n<p><code>[in, optional] lpSecurityAttributes</code></p>\n<p>指向 SECURITY_ATTRIBUTES 结构的指针，该结构确定返回的句柄是否可以被子进程继承。有关 SECURITY_ATTRIBUTES 结构的详细信息，请参阅 Microsoft Windows SDK 文档。此参数是可选的，可以是 <strong>NULL</strong> 。如果此参数为 <strong>NULL</strong> ，则无法继承句柄。</p>\n<p><code>[out] hPort</code></p>\n<p>指向调用者分配的变量的指针，如果对<strong> FilterConnectCommunicationPort</strong> 的调用成功，该变量将接收新创建的连接端口的句柄；否则，它会收到 INVALID_HANDLE_VALUE。</p>\n<p><strong>返回值</strong><br />\n如果成功， FilterConnectCommunicationPort 返回 S_OK。否则，它返回一个错误值。</p>\n<hr />\n<hr />\n<p>接下来是  <code>FilterSendMessage</code>  函数，其功能是向微过滤器发送消息。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>HRESULT <span class=\"token function\">FilterSendMessage</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token punctuation\">[</span>in<span class=\"token punctuation\">]</span>           HANDLE  hPort<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token punctuation\">[</span>in<span class=\"token punctuation\">,</span> optional<span class=\"token punctuation\">]</span> LPVOID  lpInBuffer<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">[</span>in<span class=\"token punctuation\">]</span>           DWORD   dwInBufferSize<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">[</span>out<span class=\"token punctuation\">]</span>          LPVOID  lpOutBuffer<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token punctuation\">[</span>in<span class=\"token punctuation\">]</span>           DWORD   dwOutBufferSize<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">[</span>out<span class=\"token punctuation\">]</span>          LPDWORD lpBytesReturned</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>各参数说明如下。<br />\n <code>hPort</code>  ： 连接端口名称， 宽字符字符串。<br />\n <code>lpInBuffer</code>  ： 输入缓冲区。 将定义好的结构用指针传入。<br />\n <code>dwInBufferSize</code>  ： 输入缓冲区大小。<br />\n <code>lpOutBuffer</code>  ： 输出缓冲区。 既可传入数据也可取得返回的数据。<br />\n <code>dwOutBufferSize</code>  ： 输出缓冲区大小。<br />\n <code>lpBytesReturned</code>  ： FilterSendMessage 调用成功则会返回一个标识 lpOutBuffer 大小的<br />\n值。</p>\n<p><code>[in] hPort</code></p>\n<p>先前调用<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vZW4tdXMvd2luZG93cy9kZXNrdG9wL2FwaS9mbHR1c2VyL25mLWZsdHVzZXItZmlsdGVyY29ubmVjdGNvbW11bmljYXRpb25wb3J0\"> FilterConnectCommunicationPort</span> 返回的通信端口句柄。此参数是必需的，不能为 <strong>NULL</strong> 。</p>\n<p><code>[in, optional] lpInBuffer</code></p>\n<p>指向调用者分配的缓冲区的指针，该缓冲区包含要发送到微过滤器的消息。消息格式是调用者定义的。此参数是必需的，不能为 <strong>NULL</strong> 。</p>\n<p><code>[in] dwInBufferSize</code></p>\n<p><em>lpInBuffer</em> 指向的缓冲区的大小，以字节为单位。</p>\n<p><code>[out] lpOutBuffer</code></p>\n<p>指向调用者分配的缓冲区的指针，该缓冲区接收来自微过滤器的回复（如果有的话）。</p>\n<p><code>[in] dwOutBufferSize</code></p>\n<p><em>lpOutBuffer</em> 指向的缓冲区的大小，以字节为单位。如果<em> lpOutBuffer</em> 为<strong> NULL</strong> ，则忽略此值。</p>\n<p><code>[out] lpBytesReturned</code></p>\n<p>指向调用者分配的变量的指针，如果对 FilterSendMessage 的调用成功，则该变量接收<em> lpOutBuffer</em> 指向的缓冲区中返回的字节数。此参数是必需的，不能为 NULL。</p>\n<p><strong>返回值</strong></p>\n<p><strong>如果成功， FilterSendMessage</strong> 返回 S_OK。否则，它返回一个错误值。</p>\n<h3 id=\"在用户态通过dll使用通信端口的范例\"><a class=\"anchor\" href=\"#在用户态通过dll使用通信端口的范例\">#</a> 在用户态通过 DLL 使用通信端口的范例</h3>\n<p>为什么编写一个 dll：<em>在用户态编写应用程序时， 开发者可以编写一个简单的动态链接库（DLL） 来提供与内核中的 Minifilter 内核驱动程序通信的功能， 在应用程序中就可以调用这个 DLL 来与内核通信了</em>。</p>\n<p>在编写这个 DLL 时， 必须要包含 WDK 中的头文件 <code>fltUser.h</code> ， 此外还必须连接 Minifilter 提供给用户态程序使用的静态库 <code>fltLib.lib</code>  和 <code>fltMgr.lib</code> 。</p>\n<p>编程中要注意的第一件事是： <strong>在处理 <code>DLL_PROCESS_ATTACH</code>  时要调用 <code>FilterConnectCommunicationPort</code> ， 便能完成与 Minifilter 沟通的通信端口的初始化， 然后可以通过 <code>FilterSendMessage</code>  传送数据， 等到程序关闭后关闭并释放这个通信端口</strong>。</p>\n<p>以下是本章的例子中 <code>NPdll.dll</code>  的程序代码示例。</p>\n<p>这是头文件。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 首先要引入头文件和要连接的静态库。</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"windows.h\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 一定要包含 Minifilter 的头文件</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;fltUser.h></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\"><span class=\"token function\">comment</span><span class=\"token punctuation\">(</span>lib<span class=\"token punctuation\">,</span> </span><span class=\"token string\">\"user32.lib\"</span><span class=\"token expression\"><span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\"><span class=\"token function\">comment</span><span class=\"token punctuation\">(</span>lib<span class=\"token punctuation\">,</span> </span><span class=\"token string\">\"kernel32.lib\"</span><span class=\"token expression\"><span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 注意必须连接 Minifilter 提供的静态库</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\"><span class=\"token function\">comment</span><span class=\"token punctuation\">(</span>lib<span class=\"token punctuation\">,</span> </span><span class=\"token string\">\"fltLib.lib\"</span><span class=\"token expression\"><span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\"><span class=\"token function\">comment</span><span class=\"token punctuation\">(</span>lib<span class=\"token punctuation\">,</span> </span><span class=\"token string\">\"fltMgr.lib\"</span><span class=\"token expression\"><span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\"><span class=\"token function\">comment</span><span class=\"token punctuation\">(</span>lib<span class=\"token punctuation\">,</span> </span><span class=\"token string\">\"ntoskrnl.lib\"</span><span class=\"token expression\"><span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\"><span class=\"token function\">comment</span><span class=\"token punctuation\">(</span>lib<span class=\"token punctuation\">,</span> </span><span class=\"token string\">\"hal.lib\"</span><span class=\"token expression\"><span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">// 在全局变量 g_hPort 中保存通信端口的句柄；</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">extern</span> HANDLE g_hPort<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">// 定义微过滤器的名字和通信端口的名字。 注意： 必须是宽字符的。</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">NPMINI_NAME</span>            <span class=\"token expression\">L</span><span class=\"token string\">\"NPminifilter\"</span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">NPMINI_PORT_NAME</span>       <span class=\"token expression\">L</span><span class=\"token string\">\"\\\\NPMiniPort\"</span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">// DLL 的编程规范， 声明导出函数</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token function\">__declspec</span><span class=\"token punctuation\">(</span>dllexport<span class=\"token punctuation\">)</span>\t<span class=\"token keyword\">int</span> <span class=\"token function\">InitialCommunicationPort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token function\">__declspec</span><span class=\"token punctuation\">(</span>dllexport<span class=\"token punctuation\">)</span>   <span class=\"token keyword\">int</span> <span class=\"token function\">NPSendMessage</span><span class=\"token punctuation\">(</span>PVOID InputBuffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">// 自定义的数据结构</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">_NPMINI_COMMAND</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    ENUM_PASS <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    ENUM_BLOCK</pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span> NPMINI_COMMAND<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_COMMAND_MESSAGE</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token comment\">// 储存列举 NPMINI_COMMAND 命令的结构</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    NPMINI_COMMAND \tCommand<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span> COMMAND_MESSAGE<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>PCOMMAND_MESSAGE<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>接下来开始编写 DLL 程序的进入点：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"NPdll.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>HANDLE g_hPort <span class=\"token operator\">=</span> INVALID_HANDLE_VALUE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">_MANAGED</span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\"><span class=\"token function\">managed</span><span class=\"token punctuation\">(</span>push<span class=\"token punctuation\">,</span> off<span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>BOOL APIENTRY <span class=\"token function\">DllMain</span><span class=\"token punctuation\">(</span> HMODULE hModule<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                       DWORD  ul_reason_for_call<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                       LPVOID lpReserved</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t\t\t\t <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>ul_reason_for_call<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token keyword\">case</span> DLL_PROCESS_ATTACH<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t<span class=\"token function\">InitialCommunicationPort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token keyword\">case</span> DLL_THREAD_ATTACH<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token keyword\">case</span> DLL_THREAD_DETACH<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token keyword\">case</span> DLL_PROCESS_DETACH<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">return</span> TRUE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">_MANAGED</span></span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\"><span class=\"token function\">managed</span><span class=\"token punctuation\">(</span>pop<span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">InitialCommunicationPort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    DWORD hResult <span class=\"token operator\">=</span> <span class=\"token function\">FilterConnectCommunicationPort</span><span class=\"token punctuation\">(</span> </pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\tNPMINI_PORT_NAME<span class=\"token punctuation\">,</span>   <span class=\"token comment\">// 通信端口名称</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\t<span class=\"token number\">0</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\t<span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\t<span class=\"token number\">0</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\t<span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\t<span class=\"token operator\">&amp;</span>g_hPort <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 通信端口句柄</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hResult <span class=\"token operator\">!=</span> S_OK<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> hResult<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 当连接失败时返回错误信息</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token comment\">// 传送数据函数</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">NPSendMessage</span><span class=\"token punctuation\">(</span>PVOID InputBuffer<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\tDWORD bytesReturned <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 返回的结构大小</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\tDWORD hResult <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>          <span class=\"token comment\">// 返回值</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\tPCOMMAND_MESSAGE commandMessage <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PCOMMAND_MESSAGE<span class=\"token punctuation\">)</span> InputBuffer<span class=\"token punctuation\">;</span>\t</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    hResult <span class=\"token operator\">=</span> <span class=\"token function\">FilterSendMessage</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t\tg_hPort<span class=\"token punctuation\">,</span>                    <span class=\"token comment\">// 通信端口句柄</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        commandMessage<span class=\"token punctuation\">,</span>             <span class=\"token comment\">// 传入结构</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>COMMAND_MESSAGE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>    <span class=\"token comment\">// 传入结构长度</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span>                       <span class=\"token comment\">// 传入货返回结构</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span>                       <span class=\"token comment\">// 传入结构</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token operator\">&amp;</span>bytesReturned <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hResult <span class=\"token operator\">!=</span> S_OK<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> hResult<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>当载入 DLL 时（DLL_PROCESS_ATTACH） 会调用 <code>InitialCommunicationPort</code> ， 这个调用主要是为了初始化通信端口， 以便后面的函数可以调用这个接口的 API。</p>\n<p>当调用到 <code>NPSendMessage</code>  时，传入的参数也需要是一个 <code>COMMAND_MESSAGE</code>  结构的指针， 当传送成功时返回 <code>S_OK</code> ， 失败时可根据返回值 <code>hResult</code>  得知错误代码。</p>\n<h2 id=\"minifilter的安装与加载\"><a class=\"anchor\" href=\"#minifilter的安装与加载\">#</a> Minifilter 的安装与加载</h2>\n<p>安装驱动的方法有许多种， 可以通过函数注册或用 INF 文件向系统注册驱动。</p>\n<p>接下来学习有关安装 Minifilter 驱动的方法， 在安装驱动时， 使用 INF 的方式来进行安装。</p>\n<h3 id=\"安装minifilter的inf文件\"><a class=\"anchor\" href=\"#安装minifilter的inf文件\">#</a> 安装 Minifilter 的 INF 文件</h3>\n<p><code>inf</code>  文件是一个暗转信息的配置文件，指明了安装的  <code>.sys</code>  文件路径，、安装到哪个位置、以及写到注册表中的何种位置。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>Version<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Signature   <span class=\"token operator\">=</span> <span class=\"token string\">\"$Windows NT$\"</span>     </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Class       <span class=\"token operator\">=</span> <span class=\"token string\">\"ActivityMonitor\"</span>  <span class=\"token punctuation\">;</span>指明了驱动的分组<span class=\"token punctuation\">,</span>必须指定<span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>ClassGuid   <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>b86dff51<span class=\"token operator\">-</span>a31e<span class=\"token operator\">-</span><span class=\"token number\">4</span>bac<span class=\"token operator\">-</span>b3cf<span class=\"token operator\">-</span>e8cfe75c9fc2<span class=\"token punctuation\">&#125;</span>  <span class=\"token punctuation\">;</span>GUID 每个分组都有固定的GUID</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Provider    <span class=\"token operator\">=</span> <span class=\"token operator\">%</span>Msft<span class=\"token operator\">%</span> <span class=\"token punctuation\">;</span>变量值 从STRING节中可以看到驱动提供者的名称 </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>DriverVer   <span class=\"token operator\">=</span> <span class=\"token number\">06</span><span class=\"token operator\">/</span><span class=\"token number\">16</span><span class=\"token operator\">/</span><span class=\"token number\">2007</span><span class=\"token punctuation\">,</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">.</span><span class=\"token number\">0.1</span> <span class=\"token punctuation\">;</span>版本号</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>CatalogFile <span class=\"token operator\">=</span> passthrough<span class=\"token punctuation\">.</span>cat    <span class=\"token punctuation\">;</span>inf对应的cat 文件 可以不需要</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">[</span>DestinationDirs<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>DefaultDestDir          <span class=\"token operator\">=</span> <span class=\"token number\">12</span>    <span class=\"token punctuation\">;</span>告诉我们驱动拷贝到哪里 <span class=\"token number\">12</span>代表拷贝到<span class=\"token operator\">%</span>windir<span class=\"token operator\">%</span>\\system32\\drivers</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>MiniFilter<span class=\"token punctuation\">.</span>DriverFiles  <span class=\"token operator\">=</span> <span class=\"token number\">12</span>   </pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span> Default install sections</pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">[</span>DefaultInstall<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>OptionDesc          <span class=\"token operator\">=</span> <span class=\"token operator\">%</span>ServiceDescription<span class=\"token operator\">%</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>CopyFiles           <span class=\"token operator\">=</span> MiniFilter<span class=\"token punctuation\">.</span>DriverFiles</pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">[</span>DefaultInstall<span class=\"token punctuation\">.</span>Services<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>AddService          <span class=\"token operator\">=</span> <span class=\"token operator\">%</span>ServiceName<span class=\"token operator\">%</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">,</span>MiniFilter<span class=\"token punctuation\">.</span>Service</pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span> Default uninstall sections</pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">[</span>DefaultUninstall<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>DelFiles   <span class=\"token operator\">=</span> MiniFilter<span class=\"token punctuation\">.</span>DriverFiles</pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">[</span>DefaultUninstall<span class=\"token punctuation\">.</span>Services<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>DelService <span class=\"token operator\">=</span> <span class=\"token operator\">%</span>ServiceName<span class=\"token operator\">%</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x200</span>      <span class=\"token punctuation\">;</span>标识服务停止后才删除</pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">;</span> Services Section</pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">[</span>MiniFilter<span class=\"token punctuation\">.</span>Service<span class=\"token punctuation\">]</span>                 <span class=\"token punctuation\">;</span>服务的一些信息</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>DisplayName      <span class=\"token operator\">=</span> <span class=\"token operator\">%</span>ServiceName<span class=\"token operator\">%</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>Description      <span class=\"token operator\">=</span> <span class=\"token operator\">%</span>ServiceDescription<span class=\"token operator\">%</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>ServiceBinary    <span class=\"token operator\">=</span> <span class=\"token operator\">%</span><span class=\"token number\">12</span><span class=\"token operator\">%</span>\\<span class=\"token operator\">%</span>DriverName<span class=\"token operator\">%</span><span class=\"token punctuation\">.</span>sys        <span class=\"token punctuation\">;</span><span class=\"token operator\">%</span>windir<span class=\"token operator\">%</span>\\system32\\drivers\\</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>Dependencies     <span class=\"token operator\">=</span> <span class=\"token string\">\"FltMgr\"</span>                     <span class=\"token punctuation\">;</span>服务的依赖</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>ServiceType      <span class=\"token operator\">=</span> <span class=\"token number\">2</span>                            <span class=\"token punctuation\">;</span>SERVICE_FILE_SYSTEM_DRIVER</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>StartType        <span class=\"token operator\">=</span> <span class=\"token number\">3</span>                            <span class=\"token punctuation\">;</span>SERVICE_DEMAND_START</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>ErrorControl     <span class=\"token operator\">=</span> <span class=\"token number\">1</span>                            <span class=\"token punctuation\">;</span>SERVICE_ERROR_NORMAL</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>LoadOrderGroup   <span class=\"token operator\">=</span> <span class=\"token string\">\"FSFilter Activity Monitor\"</span>  <span class=\"token punctuation\">;</span>文件过滤分组</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>AddReg           <span class=\"token operator\">=</span> MiniFilter<span class=\"token punctuation\">.</span>AddRegistry       <span class=\"token punctuation\">;</span>文件过滤注册表需要添加的高度值等信息</pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token punctuation\">;</span> Registry Modifications</pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token punctuation\">[</span>MiniFilter<span class=\"token punctuation\">.</span>AddRegistry<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>HKR<span class=\"token punctuation\">,</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"DebugFlags\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x00010001</span> <span class=\"token punctuation\">,</span><span class=\"token number\">0x0</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>HKR<span class=\"token punctuation\">,</span><span class=\"token string\">\"Instances\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"DefaultInstance\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x00000000</span><span class=\"token punctuation\">,</span><span class=\"token operator\">%</span>DefaultInstance<span class=\"token operator\">%</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>HKR<span class=\"token punctuation\">,</span><span class=\"token string\">\"Instances\\\"%Instance1.Name%,\"</span>Altitude\"<span class=\"token punctuation\">,</span><span class=\"token number\">0x00000000</span><span class=\"token punctuation\">,</span><span class=\"token operator\">%</span>Instance1<span class=\"token punctuation\">.</span>Altitude<span class=\"token operator\">%</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>HKR<span class=\"token punctuation\">,</span><span class=\"token string\">\"Instances\\\"%Instance1.Name%,\"</span>Flags\"<span class=\"token punctuation\">,</span><span class=\"token number\">0x00010001</span><span class=\"token punctuation\">,</span><span class=\"token operator\">%</span>Instance1<span class=\"token punctuation\">.</span>Flags<span class=\"token operator\">%</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token punctuation\">;</span> Copy Files</pre></td></tr><tr><td data-num=\"62\"></td><td><pre><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre></pre></td></tr><tr><td data-num=\"64\"></td><td><pre><span class=\"token punctuation\">[</span>MiniFilter<span class=\"token punctuation\">.</span>DriverFiles<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre><span class=\"token operator\">%</span>DriverName<span class=\"token operator\">%</span><span class=\"token punctuation\">.</span>sys</pre></td></tr><tr><td data-num=\"66\"></td><td><pre></pre></td></tr><tr><td data-num=\"67\"></td><td><pre><span class=\"token punctuation\">[</span>SourceDisksFiles<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>passthrough<span class=\"token punctuation\">.</span>sys <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre></pre></td></tr><tr><td data-num=\"70\"></td><td><pre><span class=\"token punctuation\">[</span>SourceDisksNames<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre><span class=\"token number\">1</span> <span class=\"token operator\">=</span> <span class=\"token operator\">%</span>DiskId1<span class=\"token operator\">%</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre></pre></td></tr><tr><td data-num=\"73\"></td><td><pre><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span> String Section</pre></td></tr><tr><td data-num=\"75\"></td><td><pre><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre></pre></td></tr><tr><td data-num=\"77\"></td><td><pre><span class=\"token punctuation\">[</span>Strings<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>Msft                    <span class=\"token operator\">=</span> <span class=\"token string\">\"Microsoft Corporation\"</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>ServiceDescription      <span class=\"token operator\">=</span> <span class=\"token string\">\"NPminifilter Mini-Filter Driver\"</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>ServiceName             <span class=\"token operator\">=</span> <span class=\"token string\">\"NPminifilter\"</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>DriverName              <span class=\"token operator\">=</span> <span class=\"token string\">\"NPminifilter\"</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>DiskId1                 <span class=\"token operator\">=</span> <span class=\"token string\">\"NPminifilter Device Installation Disk\"</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre></pre></td></tr><tr><td data-num=\"84\"></td><td><pre><span class=\"token punctuation\">;</span>Instances specific information<span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>DefaultInstance         <span class=\"token operator\">=</span> <span class=\"token string\">\"NPminifilter Instance\"</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>Instance1<span class=\"token punctuation\">.</span>Name          <span class=\"token operator\">=</span> <span class=\"token string\">\"NPminifilter Instance\"</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>Instance1<span class=\"token punctuation\">.</span>Altitude      <span class=\"token operator\">=</span> <span class=\"token string\">\"370030\"</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>Instance1<span class=\"token punctuation\">.</span>Flags         <span class=\"token operator\">=</span> <span class=\"token number\">0x0</span>              <span class=\"token punctuation\">;</span> Allow all attachments</pre></td></tr></table></figure><p>接下来先简单了解一下</p>\n<p><code>StartType</code>  被称为启动类型。  <code>StartType</code>  为 <code>3</code>  即 <code>DEMAND_START</code> ，<em>表示当有需求加载时才启动此驱动的功能</em>；<br />\n <code>StartType</code>  为 <code>0</code>  即 <code>BOOT_START</code> ， 表示计算机开机启动时就自动加载此驱动的功能。</p>\n<p>根据上面的 INF 文件可以看出， 此驱动文件是依附于 <code>FltMgr</code>  服务的。</p>\n<p><code>Altitude</code>  是微过滤器的层级码。 层级码决定过滤层次的上下。</p>\n<p><em>根据微软的文档， 微过滤器的层级码范围是多个以数字标识的范围区段（例如： 20000~429999） ， 正式的商业软件的层级码是需要向微软申请注册的</em>。 例如， 许多防毒软件都要向微软申请一个特定的层级码， 不过我们在测试时可以先给出这个范围内的一个值， 这里先定义为 370030， 也就是本章示例的微过滤器在过滤层中的位置。</p>\n<p>编写这个 INF 文件后， 测试时只要跟 <code>Minifilter.sys</code>  放在同一个目录下， 通过鼠标右键选择 INF 菜单 “安装”， 便可以成功将 Minifilter 安装到系统目录下， 安装完毕也可以去 <code>%windir%\\system32\\drivers</code>  下查看这个文件是否存在。 另外， 也可以使用 <code>OSR driverloader</code>  来检查已经安装的 Minifilter 在系统上的 <code>Load Group</code>  顺序 (？这个工具是如何获取 Load Group 的？自己也实现一个)</p>\n<p>修改上面的 <code>[Strings]</code>  节就可以成为不同的驱动程序的 INF 文件。 比如本书的例子， 服务名为 <code>NPminifilter</code> ， 驱动名为 <code>NPMinifilter.sys</code> ， 那么把这一节改为：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>[Strings]</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Msft                    &#x3D; &quot;Microsoft Corporation&quot;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>ServiceDescription      &#x3D; &quot;NPminifilter Mini-Filter Driver&quot;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>ServiceName             &#x3D; &quot;NPminifilter&quot;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>DriverName              &#x3D; &quot;NPminifilter&quot;</pre></td></tr></table></figure><p>也就是说修改此节中的这些部分就可以了。</p>\n<h1 id=\"思维扩展\"><a class=\"anchor\" href=\"#思维扩展\">#</a> 思维扩展</h1>\n<ol>\n<li>INF 安装与普通的驱动安装方法有什么区别？</li>\n<li>模仿写一个类似的：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuNTJwb2ppZS5jbi90aHJlYWQtMTMxNDA5Ni0xLTEuaHRtbA==\">https://www.52pojie.cn/thread-1314096-1-1.html</span></li>\n<li>了解 <code>OSR driverloader</code>  是如何获取系统中的 <code>Load Group</code> 。</li>\n</ol>\n",
            "tags": [
                "Minifilter"
            ]
        },
        {
            "id": "https://or0kit.github.io/Bin/Core/Drive-Development/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E7%9A%84%E8%BF%87%E6%BB%A4%E4%B8%8E%E7%9B%91%E6%8E%A7/",
            "url": "https://or0kit.github.io/Bin/Core/Drive-Development/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E7%9A%84%E8%BF%87%E6%BB%A4%E4%B8%8E%E7%9B%91%E6%8E%A7/",
            "title": "文件系统的过滤与监控",
            "date_published": "2022-08-04T08:12:26.000Z",
            "content_html": "<h1 id=\"文件系统的过滤与监控简介\"><a class=\"anchor\" href=\"#文件系统的过滤与监控简介\">#</a> 文件系统的过滤与监控简介</h1>\n<p>接下来学习<strong>最复杂的文件系统过滤</strong>。</p>\n<p>文件系统过滤的目标，是捕获 Windows 系统对文件的种种操作行为，比如文件的创建、打开、读 / 写、改名，目录的创建、打开、枚举、改名、删除等。捕获对文件的操作，并对其进行过滤，能实现许多强大的功能，比如检查病毒、数据加密、数据备份、安全监控等。</p>\n<p>文件系统过滤比串口、键盘、硬盘都更加复杂，这主要源于文件系统的复杂性。串口基本上只需要发送和接收数据就可以了，键盘只需要等待按键即可，硬盘最重要的操作也只有两种：读数据和写数据；而文件系统则不同。</p>\n<p>请不要把文件系统驱动和存储驱动混淆。<em>硬盘是典型的存储设备，只负责数据的读与写</em>；而文件系统则不管数据是如何读 / 写到硬盘（或者其他设备）上的，<em>它只负责将数据在硬盘的平坦空间内组织成文件和目录</em>。</p>\n<p><strong>文件和目录都是很复杂的信息集合。一个文件至少要有文件名、内容、大小、各种属性等，这些信息在硬盘实际空间中的保存结构和组织方式极其复杂。此外还有目录，目录是可以嵌套的。一个目录的删除、移动都涉及其下所有的子目录和文件的删除、移动。因此，文件系统本身是极为复杂的系统，文件系统的过滤也尤为复杂。</strong></p>\n<p><em>一般地说，如果一个功能能在存储设备的层次上完成，那么就让它在存储设备的层次上完成，这比在文件系统上完成要简单得多。有些人为了加密硬盘或者为了实现硬盘还原而研究文件系统过滤。实际上没有必要，因为存储设备过滤就足以解决这样的问题了。</em></p>\n<p>但是一旦要求区分目录（比如要求指定某个目录下的文件可以加密）或者有其他的牵涉到文件系统的要求，存储设备驱动过滤就很难解决问题了，此时只能进行文件系统过滤。</p>\n<p>将文件系统过滤应用于实时监控的防毒软件最为典型。防毒软件一般都带有文件系统过滤驱动，当 Windows 上任何软件试图写一个文件的时候，防毒软件都会过滤其写入的内容，检查其中是否有病毒的特征码。</p>\n<p>此外，还有一些其他的应用，如文件或者目录的还原、隐藏、转向、文件系统透明加密等。</p>\n<h1 id=\"文件系统的设备对象\"><a class=\"anchor\" href=\"#文件系统的设备对象\">#</a> 文件系统的设备对象</h1>\n<h2 id=\"控制设备与卷设备\"><a class=\"anchor\" href=\"#控制设备与卷设备\">#</a> 控制设备与卷设备</h2>\n<p>在 Windows 上，大家熟知的两种文件系统是 FAT32 和 NTFS。FAT32 的驱动在 Windows 下叫作 fastfat.sys，NTFS 的驱动在 Windows 下叫作 ntfs.sys。这两个文件都在 Windows 系统目录中的 drivers 目录下。</p>\n<p>文件系统过滤虽然复杂，但是基本方法还是一样的，就是生成过滤设备对象来绑定真实的设备对象。为此，先介绍一下文件系统驱动会生成哪些设备对象。</p>\n<p>像 FAT32、NTFS 这样的文件系统（File System，FS），主要生成两类设备。首先文件系统驱动本身往往生成一个控制设备（CDO），这个设备的主要任务是修改整个驱动的内部配置。因此，一个文件系统只对应一个 CDO。</p>\n",
            "tags": [
                "文件系统"
            ]
        },
        {
            "id": "https://or0kit.github.io/Bin/Core/Drive-Development/%E7%A3%81%E7%9B%98%E7%9A%84%E8%BF%87%E6%BB%A4/",
            "url": "https://or0kit.github.io/Bin/Core/Drive-Development/%E7%A3%81%E7%9B%98%E7%9A%84%E8%BF%87%E6%BB%A4/",
            "title": "磁盘的过滤",
            "date_published": "2022-07-31T14:41:58.000Z",
            "content_html": "<h1 id=\"磁盘过滤\"><a class=\"anchor\" href=\"#磁盘过滤\">#</a> 磁盘过滤</h1>\n<h2 id=\"磁盘过滤驱动的概念\"><a class=\"anchor\" href=\"#磁盘过滤驱动的概念\">#</a> 磁盘过滤驱动的概念</h2>\n<p>首先需要了解一些关于磁盘过滤驱动的相关概念。</p>\n<h3 id=\"设备过滤和类过滤\"><a class=\"anchor\" href=\"#设备过滤和类过滤\">#</a> 设备过滤和类过滤</h3>\n<p>过滤的概念：所谓过滤就是在本来已有的设备栈中加入一个自己的设备。</p>\n<p>由于 Windows 向任何一个设备发送 IRP 请求都会首先发给这个设备所在设备栈的最上层设备，然后再依次传递下去，这就使得加入的设备在目标设备之前获取 IRP 请求成为可能，这时候就可以有机会加入用户自己的处理流程。在这里将插入设备栈的用户设备称为过滤设备，将建立这个设备并使其具有特殊功能的驱动称为过滤驱动。</p>\n<p>前面我们已经学习了设备过滤，<em>如何建立一个过滤设备并将其绑定在一个有名字的设备上</em>。从设备过滤这个名字可以看出，<strong>这是对某个特定设备加以过滤的方法。</strong></p>\n<p>但是在实际应用中，还有很多问题，例如，Windows 中有很多即插即用的设备，如何在这些设备加入系统中时就自动地对它们进行绑定？Windows 中还存在一些具有共同类型的设备，如何对这一类设备进行绑定？</p>\n<p>实际上，在 Windows 的过滤驱动架构中，还有一种叫作<strong>类过滤驱动</strong>的驱动程序，<strong>能够在某一类特定的设备建立时由 PnP 管理器调用指定的过滤驱动代码，并且允许用户在此时对这一类设备进行绑定</strong>。根据用户设备在整个设备栈上相对于系统本来存在设备的不同位置，可以分为上层过滤和下层过滤，其中以上层过滤最为常见，因为这时过滤设备在设备栈上位于实际功能设备的上面，会首先获得 Windows 系统发下来的 IRP 请求，便于过滤设备的实现者进行处理。</p>\n<h3 id=\"磁盘设备和磁盘卷设备过滤驱动\"><a class=\"anchor\" href=\"#磁盘设备和磁盘卷设备过滤驱动\">#</a> 磁盘设备和磁盘卷设备过滤驱动</h3>\n<p>本章主要学习 Windows 存储系统的过滤，在学习代码之前，还需要了解一下 Windows 存储系统中的一些概念。</p>\n<p><em>在 Windows 的存储系统中，最底层的是磁盘，而在磁盘上面又有卷，卷虽然只是逻辑上的一个概念，但是 Windows 仍然为其建立了设备，所以在 Windows 的存储系统里有磁盘设备和磁盘卷设备两种类型的设备。</em></p>\n<p>如果一个磁盘卷位于某个磁盘上，那么对于磁盘卷的访问最终也会体现在相应的磁盘上。<strong>但是这不意味着它们在一个设备栈上，IRP 不会原封不动地从磁盘卷设备栈上一直传到磁盘设备栈上，更何况 Windows 中还存在着跨磁盘的卷、软 RAID 卷等不能对应到唯一磁盘上的卷</strong>。所以务必将这两种设备的概念区分开，而不要将其当作同一种设备来对待。</p>\n<p>从驱动的角度来讲，<em>这两种设备收到的读 / 写请求都是针对磁盘大小或者卷大小范围之内的请求，都是以扇区大小对齐的，处理起来也没有什么太大的区别</em>。</p>\n<p>在本章中主要讲解磁盘卷设备的上层类过滤驱动，因为对于 Windows 用户来说，卷是最直接看到的对象；而对于开发人员来说，使用卷过滤会在一定程度上减少工作量，因为不需要处理磁盘设备中才会遇到的一些问题，但是同时也限制了一些功能的实现，原因同样是不能处理磁盘设备上的问题，正所谓有利必有弊。</p>\n<h3 id=\"注册表和磁盘卷设备过滤驱动\"><a class=\"anchor\" href=\"#注册表和磁盘卷设备过滤驱动\">#</a> 注册表和磁盘卷设备过滤驱动</h3>\n<p>在实际的系统运行过程中，一个普通的驱动程序是如何告知 Windows 操作系统它是一个类过滤驱动，并且如何和相应的设备类联系起来呢？这就需要注册表的帮忙了。</p>\n<p>我们知道一个驱动程序作为服务是如何在注册表中存在的：在  <code>\\HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services</code>  下服务键的名字也就是这个服务的名字了。</p>\n<p>在 <code>\\HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Class</code>  下，也有许多类的名字，这些类的名字都是一长串数字，这一长串数字实际上是一个 <code>ClassGUID</code> ，随意选择一个键，下面都会有一个叫作 Class 的值，这就是一个类。</p>\n<p><strong>在这些键中，可以找到一个 Class 值为 <code>“Volume”</code>  的键，这就是磁盘卷类。最关心的是其中一个叫作 <code>UpperFilters</code>  的值，这个值起了最为关键的作用 —— 说明这个类的上层过滤驱动都有哪些。</strong></p>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<p><em>只需要在这个 UpperFilter 值中填入相应的驱动名（服务名），这个驱动就会作为这一类设备的上层过滤驱动被 Windows 操作系统所识别，实际上这样也就完成了上层过滤驱动的安装工作。</em></p>\n<h2 id=\"具有还原功能的磁盘卷过滤驱动\"><a class=\"anchor\" href=\"#具有还原功能的磁盘卷过滤驱动\">#</a> 具有还原功能的磁盘卷过滤驱动</h2>\n<p>将磁盘卷上的数据恢复到之前的某个时间点，在这个时间点之后无论对磁盘卷上的文件做过什么操作都将被抹去，这个卷被称为还原卷。</p>\n<p>由于这个过滤驱动只是为了讲解而写的，所以这里对它的使用条件限制得比较多。这个驱动工作时需要系统中只有一个硬盘，需要使用 Windows XP 系统，并且硬盘被分为 C 盘为主分区、D 盘和 E 盘都为扩展分区的分区形式，而且所有分区都必须是 NTFS 系统。本驱动只保护 D 盘并且会在 E 盘上建立临时文件，而且要求操作系统安装在 C 盘上，故这里需要 C、D、E 三个分区。</p>\n<h3 id=\"基本思想\"><a class=\"anchor\" href=\"#基本思想\">#</a> 基本思想</h3>\n<p>为了实现还原，一种简单的思路如下：</p>\n<ul>\n<li>\n<p>在开启还原之后，所有对还原卷的写操作将被写到另一个地方，而不会真正写在还原卷上。这里所说的另一个地方也可以称之为转存处。</p>\n</li>\n<li>\n<p>在开启还原之后，所有对还原卷的读操作将分为两种情况处理：一种情况是读了开启还原之前就存在的内容，这种情况就按照正常的读取方式从还原卷上读取；另一种情况是读了开启还原之后写到还原卷上的内容，这种情况将会从转存处把之前写过的内容读取出来。</p>\n</li>\n<li>\n<p>上述读 / 写必须建立在互斥的基础上，不能出现写了一半就开始读的情况。</p>\n</li>\n<li>\n<p>重启之后转存处的数据清零，所有在还原开始后被写过的数据也就不复存在了。</p>\n</li>\n<li>\n<p>上述转存同样必须在卷设定为还原之后立即起作用，而不能出现写了一半才开始转存的情况；否则数据会在重启之后不同步。</p>\n</li>\n</ul>\n<p>如果严格按照这几点来执行，确实能够达到重启之后卷上数据就全部还原的效果。</p>\n<h2 id=\"驱动分析\"><a class=\"anchor\" href=\"#驱动分析\">#</a> 驱动分析</h2>\n<p>开始学习代码，了解如何用代码实现磁盘的还原功能，学习编写的思路。</p>\n<h3 id=\"driverentry函数\"><a class=\"anchor\" href=\"#driverentry函数\">#</a> DriverEntry 函数</h3>\n<p>驱动入口函数，主要负责初始化本驱动的各分发函数。</p>\n<ol>\n<li>将所有的分发函数都设置成一个统一的处理函数，这个函数是对大部分 IRP 请求的处理方式；</li>\n<li>将本驱动关心的分发函数指定为驱动专门实现的函数；</li>\n<li>指定这个驱动的 <code>AddDevice</code>  函数和 <code>Unload</code>  函数。</li>\n<li>注册一个 <code>boot</code>  类型驱动的完成回调函数。</li>\n</ol>\n<p>由于这个驱动被注册成了磁盘卷设备的上层过滤驱动，<em>PnP 管理器将会在一个新的磁盘卷设备建立之后</em>，<strong>首先调用本过滤驱动的 <code>AddDevice</code>  函数，然后再调用磁盘卷设备驱动中的 <code>AddDevice</code>  函数</strong>。这就让过滤驱动有了在系统加入磁盘卷设备起作用之前做一些工作的机会，而 Unload 函数会在过滤驱动结束时被调用，用来做一些清理的工作。不过本过滤驱动将会一直工作到系统关机，所以基本上 Unload 函数将不会做任何清理工作。</p>\n<p>这里注意  <code>AddDevice</code>  函数的调用时机。</p>\n<p>另外，本过滤驱动是作为一个 <code>boot</code>  类型驱动存在的，这一点可以在注册表的 <code>\\HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services</code>  下驱动服务的 start 值中指定，0 为 boot 类型。</p>\n<p><strong>boot 类型的驱动程序是启动最早的驱动程序，在系统引导时就必须加载完毕；而对于注册为 boot 类型驱动的完成回调函数的函数，将会在所有的 boot 类型驱动执行完毕之后被调用一次，需要注意的是，这时候仍然是系统启动过程中比较早的时候。</strong></p>\n<p>在这里需要注册这个回调函数，是因为驱动中有些工作需要等到这个时间才能做，具体是什么工作后面会知道的。</p>\n<p>下面是代码：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>NTSTATUS</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">DriverEntry</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    IN\tPDRIVER_OBJECT\tDriverObject<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    IN\tPUNICODE_STRING\tRegistryPath</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token comment\">//KdBreakPoint();</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> IRP_MJ_MAXIMUM_FUNCTION<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t<span class=\"token comment\">// 初始化这个驱动所有的分发函数，默认值是初始化为 DPDispatchAny</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\tDriverObject<span class=\"token operator\">-></span>MajorFunction<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> DPDispatchAny<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token comment\">// 下面将我们特殊关注的分发函数重新赋值为我们自己的处理函数</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    DriverObject<span class=\"token operator\">-></span>MajorFunction<span class=\"token punctuation\">[</span>IRP_MJ_POWER<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> DPDispatchPower<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    DriverObject<span class=\"token operator\">-></span>MajorFunction<span class=\"token punctuation\">[</span>IRP_MJ_PNP<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> DPDispatchPnp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    DriverObject<span class=\"token operator\">-></span>MajorFunction<span class=\"token punctuation\">[</span>IRP_MJ_DEVICE_CONTROL<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> DPDispatchDeviceControl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    DriverObject<span class=\"token operator\">-></span>MajorFunction<span class=\"token punctuation\">[</span>IRP_MJ_READ<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> DPDispatchReadWrite<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    DriverObject<span class=\"token operator\">-></span>MajorFunction<span class=\"token punctuation\">[</span>IRP_MJ_WRITE<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> DPDispatchReadWrite<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token comment\">// 将这个驱动的 AddDevice 函数初始化为 DpAddDevice 函数</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    DriverObject<span class=\"token operator\">-></span>DriverExtension<span class=\"token operator\">-></span>AddDevice <span class=\"token operator\">=</span> DPAddDevice<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token comment\">// 将这个驱动的 unload 函数初始化为 DpUnload 函数</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    DriverObject<span class=\"token operator\">-></span>DriverUnload <span class=\"token operator\">=</span> DPUnload<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token comment\">// 注册一个 boot 驱动结束回调，这个回调函数会在所有的 boot 型驱动都运行完毕之后再去执行</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token function\">IoRegisterBootDriverReinitialization</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\tDriverObject<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\tDPReinitializationRoutine<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\t<span class=\"token constant\">NULL</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token comment\">// 作为一个过滤驱动，无论如何都要返回成功</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token keyword\">return</span> STATUS_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"adddevice函数\"><a class=\"anchor\" href=\"#adddevice函数\">#</a> AddDevice 函数</h3>\n<p>前面已经说过  <code>AddDevice</code>  函数的调用时机。并且在过滤驱动的 DriverEntry 函数中将驱动对象的 AddDevice 函数赋值成自己实现的  <code>DPAddDevice</code>  函数，这样在有任何磁盘卷设备建立时， <code>DPAddDevice</code>  函数都会被调用。</p>\n<p>但是需要特别注意的是， <code>DPAddDevice</code>  被调用时，实际上磁盘卷设备已经建立起来了，只是还不能被使用，也就是说，这个设备的设备对象有了，但是不能响应大部分的 IRP 请求。</p>\n<p>在  <code>DPAddDevice</code>  中将建立一个过滤设备，这个设备将被绑定在真正的磁盘卷设备上。<br />\n<em>并且由于这是一个上层过滤驱动，这个过滤设备将会位于磁盘卷设备的栈顶方向上，也就是先于磁盘卷设备收到 IRP 请求。</em><br />\n在建立并绑定了这个过滤设备之后，需要对这个过滤设备做一些初始化，而过滤设备的所有基本信息都会以  <code>DP_FILTER_DEV_EXTENSION</code>  结构的类型存储在设备扩展中。</p>\n<p>在这里先对 <code>DP_FILTER_DEV_EXTENSION</code>  数据结构中的成员变量进行简单的介绍，这些变量的具体作用和使用方法将会在下面讲解程序时提到</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 用来存储一个卷所有的相关信息的数据结构，放在过滤设备的设备扩展中</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_DP_FILTER_DEV_EXTENSION_</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token comment\">// 卷的名字，例如 \"C:,D:\" 等中的字母部分</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tWCHAR\t\t\t\t\tVolumeLetter<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token comment\">// 这个卷是否在保护状态</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tBOOL\t\t\t\t\tProtect<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token comment\">// 这个卷的总大小，以 byte 为单位</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tLARGE_INTEGER\t\t\tTotalSizeInByte<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token comment\">// 这个卷上文件系统的每簇大小，以 byte 为单位</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tDWORD\t\t\t\t\tClusterSizeInByte<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token comment\">// 这个卷的每个扇区大小，以 byte 为单位</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\tDWORD\t\t\t\t\tSectorSizeInByte<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token comment\">// 这个卷设备对应的过滤设备的设备对象</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tPDEVICE_OBJECT\t\t\tFltDevObj<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token comment\">// 这个卷设备对应的过滤设备的下层设备对象</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tPDEVICE_OBJECT\t\t\tLowerDevObj<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token comment\">// 这个卷设备对应的物理设备的设备对象</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\tPDEVICE_OBJECT\t\t\tPhyDevObj<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token comment\">// 这个数据结构是否已经被初始化完毕了</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\tBOOL\t\t\t\t\tInitializeCompleted<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token comment\">// 这个卷上的保护系统使用的位图的句柄</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\tPDP_BITMAP\t\tBitmap<span class=\"token punctuation\">;</span>\t</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token comment\">// 用来转储的文件句柄</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\tHANDLE\t\t\t\t\tTempFile<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token comment\">// 这个卷上的保护系统使用的请求队列</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\tLIST_ENTRY\t\t\t\tReqList<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token comment\">// 这个卷上的保护系统使用的请求队列的锁</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\tKSPIN_LOCK\t\t\t\tReqLock<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token comment\">// 这个卷上的保护系统使用的请求队列的同步事件</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\tKEVENT\t\t\t\t\tReqEvent<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token comment\">// 这个卷上的保护系统使用的请求队列的处理线程之线程句柄</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\tPVOID\t\t\t\t\tThreadHandle<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token comment\">// 这个卷上的保护系统使用的请求队列的处理线程之结束标志</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\tBOOLEAN\t\t\t\t\tThreadTermFlag<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token comment\">// 这个卷上的保护系统的关机分页电源请求的计数事件</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\tKEVENT\t\t\t\t\tPagingPathCountEvent<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token comment\">// 这个卷上的保护系统的关机分页电源请求的计数</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\tLONG\t\t\t\t\tPagingPathCount<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token punctuation\">&#125;</span> DP_FILTER_DEV_EXTENSION<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>PDP_FILTER_DEV_EXTENSION<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>在上面的数据结构中可以看到有三个设备对象：过滤设备、物理设备和下层设备，其中过滤设备是本过滤驱动自己建立的；物理设备是通过 <code>AddDevice</code>  函数的参数传递进来的设备，是真正的磁盘卷设备；而下层设备是在将过滤设备绑定到物理设备上之后，返回的绑定之前物理设备栈上最顶部的设备。</p>\n<p><em>那么下层设备和物理设备是一样的吗？答：系统中的一个类驱动并不一定只有一个上层过滤驱动存在</em>。</p>\n<p>例如，在  <code>\\HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Class</code>  下的磁盘卷类中，系统自带了一个上层过滤驱动叫作 <code>VolSnap</code> ，如果将本章的驱动名字写在上层驱动列表中的 <code>VolSnap</code>  后面，那么在驱动的 <code>AddDevice</code>  调用时， <code>VolSnap</code>  的设备已经绑定在了磁盘卷设备上，也就是说，这时再去做绑定，返回的下层设备将会是 <code>VolSnap</code>  的设备。</p>\n<p><strong>在通常情况下，过滤设备的设备属性，例如 Flag 值等都需要和它的下层设备一样，当然过滤设备也可以加入自己特有的一些属性值</strong>。</p>\n<p><em>一般来说，下层设备是过滤驱动在需要调用正常的 IRP 请求处理流程时使用的目标设备。</em><br />\n在过滤驱动中如果将 IRP 请求发给下层设备，这个 IRP 受到的处理就如同过滤驱动不存在一样。</p>\n<p><em>在 <code>DP_FILTER_DEV_EXTENSION</code>  数据结构中可以看到，针对每个过滤设备都会建立一个处理线程和相应的请求队列，这是因为在这个驱动中同样采用了将所有请求依次排队，然后使用一个单独的线程依次处理的方式</em>。这么做的好处在于将所有的读 / 写请求串行化，程序易于编写而且<strong>不会出现读 / 写请求之间的同步问题</strong>。</p>\n<p>在  <code>DPAddDevice</code>  函数中读者还会发现初始化了  <code>PagingPathCountEvent</code>  和  <code>PagingPathCount</code>  这两个与分页路径相关的变量，它们将会在 PnP IRP 请求的处理中被用到，这里暂时只需要知道它们的初始化值是多少即可。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>NTSTATUS</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">DPAddDevice</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    IN\tPDRIVER_OBJECT\tDriverObject<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    IN\tPDEVICE_OBJECT\tPhysicalDeviceObject</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token comment\">//NTSTATUS 类型的函数返回值</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tNTSTATUS\t\t\t\t\tntStatus <span class=\"token operator\">=</span> STATUS_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 用来指向过滤设备的设备扩展的指针</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tPDP_FILTER_DEV_EXTENSION\tDevExt <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token comment\">// 过滤设备的下层设备的指针对象</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tPDEVICE_OBJECT\t\t\t\tLowerDevObj <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token comment\">// 过滤设备的设备指针的指针对象</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tPDEVICE_OBJECT\t\t\t\tFltDevObj <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token comment\">// 过滤设备的处理线程的线程句柄</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tHANDLE\t\t\t\t\t\tThreadHandle <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token comment\">// 建立一个过滤设备，这个设备是 FILE_DEVICE_DISK 类型的设备并且具有 DP_FILTER_DEV_EXTENSION 类型的设备扩展</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\tntStatus <span class=\"token operator\">=</span> <span class=\"token function\">IoCreateDevice</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\tDriverObject<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t<span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>DP_FILTER_DEV_EXTENSION<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t<span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\tFILE_DEVICE_DISK<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\tFILE_DEVICE_SECURE_OPEN<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\tFALSE<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t<span class=\"token operator\">&amp;</span>FltDevObj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">NT_SUCCESS</span><span class=\"token punctuation\">(</span>ntStatus<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t<span class=\"token keyword\">goto</span> ERROUT<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token comment\">// 将 DevExt 指向过滤设备的设备扩展指针</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\tDevExt <span class=\"token operator\">=</span> FltDevObj<span class=\"token operator\">-></span>DeviceExtension<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token comment\">// 清空过滤设备的设备扩展</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token function\">RtlZeroMemory</span><span class=\"token punctuation\">(</span>DevExt<span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>DP_FILTER_DEV_EXTENSION<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token comment\">// 将刚刚建立的过滤设备附加到这个卷设备的物理设备上</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\tLowerDevObj <span class=\"token operator\">=</span> <span class=\"token function\">IoAttachDeviceToDeviceStack</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\tFltDevObj<span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\tPhysicalDeviceObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span> <span class=\"token operator\">==</span> LowerDevObj<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\tntStatus <span class=\"token operator\">=</span> STATUS_NO_SUCH_DEVICE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\t<span class=\"token keyword\">goto</span> ERROUT<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t<span class=\"token comment\">// 初始化这个卷设备的分页路径计数的计数事件</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t<span class=\"token function\">KeInitializeEvent</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t\t<span class=\"token operator\">&amp;</span>DevExt<span class=\"token operator\">-></span>PagingPathCountEvent<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t\tNotificationEvent<span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t\tTRUE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t<span class=\"token comment\">// 对过滤设备的设备属性进行初始化，过滤设备的设备属性应该和它的下层设备相同</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\tFltDevObj<span class=\"token operator\">-></span>Flags <span class=\"token operator\">=</span> LowerDevObj<span class=\"token operator\">-></span>Flags<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t<span class=\"token comment\">// 给过滤设备的设备属性加上电源可分页的属性</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\tFltDevObj<span class=\"token operator\">-></span>Flags <span class=\"token operator\">|=</span> DO_POWER_PAGABLE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t<span class=\"token comment\">// 对过滤设备进行设备初始化</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\tFltDevObj<span class=\"token operator\">-></span>Flags <span class=\"token operator\">&amp;=</span> <span class=\"token operator\">~</span>DO_DEVICE_INITIALIZING<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t<span class=\"token comment\">// 将过滤设备对应的设备扩展中的相应变量进行初始化</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t<span class=\"token comment\">// 卷设备的过滤设备对象</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\tDevExt<span class=\"token operator\">-></span>FltDevObj <span class=\"token operator\">=</span> FltDevObj<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t<span class=\"token comment\">// 卷设备的物理设备对象</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\tDevExt<span class=\"token operator\">-></span>PhyDevObj <span class=\"token operator\">=</span> PhysicalDeviceObject<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t<span class=\"token comment\">// 卷设备的下层设备对象</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\tDevExt<span class=\"token operator\">-></span>LowerDevObj <span class=\"token operator\">=</span> LowerDevObj<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t<span class=\"token comment\">// 初始化这个卷的请求处理队列</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t<span class=\"token function\">InitializeListHead</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>DevExt<span class=\"token operator\">-></span>ReqList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\t<span class=\"token comment\">// 初始化请求处理队列的锁</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>\t<span class=\"token function\">KeInitializeSpinLock</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>DevExt<span class=\"token operator\">-></span>ReqLock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\t<span class=\"token comment\">// 初始化请求处理队列的同步事件</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\t<span class=\"token function\">KeInitializeEvent</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\t\t<span class=\"token operator\">&amp;</span>DevExt<span class=\"token operator\">-></span>ReqEvent<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\t\tSynchronizationEvent<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>\t\tFALSE</pre></td></tr><tr><td data-num=\"74\"></td><td><pre>\t\t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>\t<span class=\"token comment\">// 初始化终止处理线程标志</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>\tDevExt<span class=\"token operator\">-></span>ThreadTermFlag <span class=\"token operator\">=</span> FALSE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>\t<span class=\"token comment\">// 建立用来处理这个卷的请求的处理线程，线程函数的参数则是设备扩展</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>\tntStatus <span class=\"token operator\">=</span> <span class=\"token function\">PsCreateSystemThread</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>\t\t<span class=\"token operator\">&amp;</span>ThreadHandle<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>\t\t<span class=\"token punctuation\">(</span>ACCESS_MASK<span class=\"token punctuation\">)</span><span class=\"token number\">0L</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>\t\t<span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>\t\t<span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>\t\t<span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>\t\tDPReadWriteThread<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>\t\tDevExt</pre></td></tr><tr><td data-num=\"87\"></td><td><pre>\t\t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">NT_SUCCESS</span><span class=\"token punctuation\">(</span>ntStatus<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>\t\t<span class=\"token keyword\">goto</span> ERROUT<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>\t<span class=\"token comment\">// 获取处理线程的对象</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>\tntStatus <span class=\"token operator\">=</span> <span class=\"token function\">ObReferenceObjectByHandle</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>\t\tThreadHandle<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>\t\tTHREAD_ALL_ACCESS<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>\t\t<span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>\t\tKernelMode<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>\t\t<span class=\"token operator\">&amp;</span>DevExt<span class=\"token operator\">-></span>ThreadHandle<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>\t\t<span class=\"token constant\">NULL</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>\t\t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">NT_SUCCESS</span><span class=\"token punctuation\">(</span>ntStatus<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>\t\tDevExt<span class=\"token operator\">-></span>ThreadTermFlag <span class=\"token operator\">=</span> TRUE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>\t\t<span class=\"token function\">KeSetEvent</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>\t\t\t<span class=\"token operator\">&amp;</span>DevExt<span class=\"token operator\">-></span>ReqEvent<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>\t\t\t<span class=\"token punctuation\">(</span>KPRIORITY<span class=\"token punctuation\">)</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>\t\t\tFALSE</pre></td></tr><tr><td data-num=\"107\"></td><td><pre>\t\t\t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>\t\t<span class=\"token keyword\">goto</span> ERROUT<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>ERROUT<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">NT_SUCCESS</span><span class=\"token punctuation\">(</span>ntStatus<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span>\t</pre></td></tr><tr><td data-num=\"114\"></td><td><pre>\t\t<span class=\"token comment\">// 如果上面有不成功的地方，首先需要解除可能存在的附加</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span> <span class=\"token operator\">!=</span> LowerDevObj<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>\t\t\t<span class=\"token function\">IoDetachDevice</span><span class=\"token punctuation\">(</span>LowerDevObj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>\t\t\tDevExt<span class=\"token operator\">-></span>LowerDevObj <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>\t\t<span class=\"token comment\">// 然后删除可能建立的过滤设备</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span> <span class=\"token operator\">!=</span> FltDevObj<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>\t\t\t<span class=\"token function\">IoDeleteDevice</span><span class=\"token punctuation\">(</span>FltDevObj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>\t\t\tDevExt<span class=\"token operator\">-></span>FltDevObj <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>\t<span class=\"token comment\">// 关闭线程句柄，我们今后不会用到它，所有对线程的引用都通过线程对象来进行了</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span> <span class=\"token operator\">!=</span> ThreadHandle<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>\t\t<span class=\"token function\">ZwClose</span><span class=\"token punctuation\">(</span>ThreadHandle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>\t<span class=\"token comment\">// 返回状态值</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>    <span class=\"token keyword\">return</span> ntStatus<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"pnp即插即用请求的处理\"><a class=\"anchor\" href=\"#pnp即插即用请求的处理\">#</a> PnP（即插即用）请求的处理</h3>\n<p>作为一个卷过滤驱动 PnP 请求是非常重要的，这是因为 Windows 操作系统在某些时刻会向存储设备发出专门的请求，如果没有进行正确的处理，将会造成系统无法正常关机等一系列问题。</p>\n<p>在收到了 PnP 请求之后，由于在 <code>DriverEntry</code>  中对 PnP 请求的处理函数特别设置成了 <code>DPDispatchPnp</code>  函数，所以 <code>DPDispatchPnp</code>  函数将会被调用。</p>\n<p>它具有两个参数： <code>DeviceObject</code>  和 <code>irp</code> ，分别说明了<em>这个请求发往的设备</em>和<em>这个请求的具体细节</em>。</p>\n<p>由于这是过滤驱动的 PnP 分发函数，所以也只有过滤驱动所建立的设备收到 PnP 请求时才会调用这个函数，那么很容易想到这个 <code>DeviceObject</code>  一定是<strong>过滤设备</strong>。</p>\n<p>在 <code>AddDevice</code>  函数中，<strong>每个卷的过滤设备都会被建立相应的设备扩展，里面存储有很多这个过滤设备的属性信息</strong>，所以在函数的一开始就需要将这些信息拿出来，同时需要通过 <code>irp</code>  参数中的  <code>irp stack</code>  成员来<strong>进一步确定这个 IRP 请求的具体目的</strong>。类似的操作在之后的各种不同请求的处理函数中都会见到，代码如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 用来指向过滤设备的设备扩展的指针</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>PDP_FILTER_DEV_EXTENSION\tDevExt <span class=\"token operator\">=</span> DeviceObject<span class=\"token operator\">-></span>DeviceExtension<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 返回值</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>NTSTATUS ntStatus <span class=\"token operator\">=</span> STATUS_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 用来指向 irp stack 的指针</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>PIO_STACK_LOCATION  irpsp <span class=\"token operator\">=</span> <span class=\"token function\">IoGetCurrentIrpStackLocation</span><span class=\"token punctuation\">(</span>Irp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><em>在获取到了这些参数之后，可以直接通过判断 irp stack 中的 MinorFunction 来判断这个 IRP 请求的具体目的</em>。<br />\n<em>在 irp stack 中，通常会存在 MajorFunction 和 MinorFunction 两个请求号，其中 MajorFunction 是大请求号，一般是类似于 Write、Read、PnP、DeviceIoControl 等大分类的请求</em>；<br />\n<em>而 MinorFunction 是小请求号，一般是在某一个大分类中的子请求号。我们知道在这个分发函数中 MajorFunction 肯定是 PnP 请求，而 MinorFunction 才是在这个函数中需要关心的</em>。</p>\n<p>这里有两个 PnP 请求需要我们来处理，对于其他的 PnP 请求，直接交给下层设备去处理就可以了。</p>\n<h4 id=\"设备移除请求\"><a class=\"anchor\" href=\"#设备移除请求\">#</a> 设备移除请求</h4>\n<p>第一个需要处理的 PnP 子请求是<strong>设备移除请求</strong>，这个请求会在 Windows 进行设备热插拔、均衡或者关机时被发送到磁盘卷设备。</p>\n<p>当然，过滤驱动会先于磁盘卷设备收到这个请求，在这个请求发送时，所有的磁盘卷设备的读 / 写请求应该都已经完成，所以在过滤驱动收到这个请求时，<strong>只需要简单地将曾经建立过的所有设备和初始化过的所有内部数据结构全部销毁即可</strong>。</p>\n<p><em>建立过的设备主要是在 <code>AddDevice</code>  函数中建立的过滤设备和由绑定而生成的下层设备，内部数据结构主要包括了下面将要了解的 <code>bitmap</code>  数据结构。此外，在 <code>AddDevice</code>  函数中为卷设备建立的请求处理线程也需要停掉</em>。</p>\n<h4 id=\"设备使用通告请求\"><a class=\"anchor\" href=\"#设备使用通告请求\">#</a> 设备使用通告请求</h4>\n<p>第二个需要处理的请求是设备使用通告请求，Windows 操作系统会在建立或者删除特殊文件的时候向存储设备发出这个 IRP 请求，作为存储设备卷过滤设备自然也会收到这个请求。</p>\n<p>这里说的特殊文件包括页面文件、休眠文件和 dump 文件。</p>\n<ul>\n<li>\n<p><strong>页面文件</strong>：页文件 (也称为 “分页文件”) 是硬盘上的可选隐藏系统文件。也就是虚拟内存 RAM 的物理扩展，页面文件使系统能够从物理内存中删除不常访问的修改页，使系统能够更高效地使用物理内存来更频繁地访问页面。</p>\n</li>\n<li>\n<p><strong>休眠文件</strong>：是系统保存着内存数据的备份文件，随时进行更新。这个文件无法复制，删除，修改或移动。只有当在电源管理中对系统启用了休眠功能后，才会产生这个文件。通过使用这个休眠文件来时刻将内存中的所有信息保存起来。停用休眠选项后系统会自己把它删除。如果还没启动休眠在 c 盘根目录就已经有了同名文件，会导致休眠无法启动。“休眠” 将保存一份桌面及所有打开文件和文档的映像，然后关闭计算机电源，监视器和硬盘也会同时关闭，内存中的内容都会以备份文件的形式保存在磁盘上。打开电源时，文件和文档就会按原来离开时的样子在桌面上打开。</p>\n</li>\n<li>\n<p><strong>dump 文件</strong>：是进程的内存镜像。</p>\n</li>\n</ul>\n<p>Windows 会通过 <code>irp stack</code>  中的 <code>Parameters.UsageNotification.Type</code>  域来说明<strong>请求的是哪种文件</strong>，并且会使用 <code>Parameters.UsageNotification.InPath</code>  域来说明<strong>这个请求是在询问设备是否可以建立这个文件，还是在删除了这个文件之后对这个设备的通知</strong>。</p>\n<p>在处理这个请求时，过滤驱动比较关心的是对页面文件的处理，因为这牵扯到过滤设备标志位中的 <code>DO_POWER_PAGABLE</code>  位。关于这个位，简单来说，就是如果有页面文件在这个卷上，那么就应该清除  <code>DO_POWER_PAGABLE</code> ；反之，就应该加上  <code>DO_POWER_PAGABLE</code> 。</p>\n<p>这个请求的根本目的是，<strong>Windows 操作系统用来查询设备是否可以在其上建立特殊文件</strong>，作为过滤驱动是不应该对这种询问加以回答的，正确的做法是将这个请求发送给下层设备，由下层设备来回答这个问题。但是同时过滤驱动需要监视下层设备的回答，如果下层设备不支持这个请求，自然是最简单不过的事情，过滤设备什么都不做就可以了；反之，如果下层设备支持这个请求，那么过滤设备就需要进行处理，在下层设备对第一个页面文件建立请求回答是之后，过滤设备需要对  <code>DO_POWER_PAGABLE</code>  位进行相应的设置，并且做一个计数。这个计数会随着页面文件建立的请求而增加，随着页面文件删除通知而减少，当减少到最后一个计数时，过滤设备又需要对  <code>DO_POWER_PAGABLE</code>  位进行相应的设置。</p>\n<h4 id=\"完整的pnp请求处理代码\"><a class=\"anchor\" href=\"#完整的pnp请求处理代码\">#</a> 完整的 PnP 请求处理代码</h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>NTSTATUS\t</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">DPDispatchPnp</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tIN\tPDEVICE_OBJECT\tDeviceObject<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tIN\tPIRP\t\t\tIrp</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token comment\">// 用来指向过滤设备的设备扩展的指针</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tPDP_FILTER_DEV_EXTENSION\tDevExt <span class=\"token operator\">=</span> DeviceObject<span class=\"token operator\">-></span>DeviceExtension<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token comment\">// 返回值</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tNTSTATUS ntStatus <span class=\"token operator\">=</span> STATUS_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token comment\">// 用来指向 irp stack 的指针</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tPIO_STACK_LOCATION  irpsp <span class=\"token operator\">=</span> <span class=\"token function\">IoGetCurrentIrpStackLocation</span><span class=\"token punctuation\">(</span>Irp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>irpsp<span class=\"token operator\">-></span>MinorFunction<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token keyword\">case</span> IRP_MN_REMOVE_DEVICE<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t<span class=\"token comment\">// 如果是 PnP manager 发过来的移除设备的 irp，将进入这里</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t\t<span class=\"token comment\">// 这里主要做一些清理工作</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>DevExt<span class=\"token operator\">-></span>ThreadTermFlag <span class=\"token operator\">!=</span> TRUE <span class=\"token operator\">&amp;&amp;</span> <span class=\"token constant\">NULL</span> <span class=\"token operator\">!=</span> DevExt<span class=\"token operator\">-></span>ThreadHandle<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t\t\t<span class=\"token comment\">// 如果线程还在运行的话需要停止它，这里通过设置线程停止运行的标志并且发送事件信息，让线程自己终止运行</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t\t\tDevExt<span class=\"token operator\">-></span>ThreadTermFlag <span class=\"token operator\">=</span> TRUE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t\t\t<span class=\"token function\">KeSetEvent</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t\t\t\t<span class=\"token operator\">&amp;</span>DevExt<span class=\"token operator\">-></span>ReqEvent<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t\t\t\t<span class=\"token punctuation\">(</span>KPRIORITY<span class=\"token punctuation\">)</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t\t\t\tFALSE</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t\t\t\t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t\t\t<span class=\"token comment\">// 等待线程结束</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t\t\t<span class=\"token function\">KeWaitForSingleObject</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t\t\t\tDevExt<span class=\"token operator\">-></span>ThreadHandle<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t\t\t\tExecutive<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\t\t\t\tKernelMode<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\t\t\t\tFALSE<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\t\t\t\t<span class=\"token constant\">NULL</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\t\t\t\t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\t\t\t<span class=\"token comment\">// 解除引用线程对象</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\t\t\t<span class=\"token function\">ObDereferenceObject</span><span class=\"token punctuation\">(</span>DevExt<span class=\"token operator\">-></span>ThreadHandle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t \t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span> <span class=\"token operator\">!=</span> DevExt<span class=\"token operator\">-></span>Bitmap<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t \t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\t\t\t<span class=\"token comment\">// 如果还有位图，就释放</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t \t\t\t<span class=\"token function\">DPBitmapFree</span><span class=\"token punctuation\">(</span>DevExt<span class=\"token operator\">-></span>Bitmap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t \t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span> <span class=\"token operator\">!=</span> DevExt<span class=\"token operator\">-></span>LowerDevObj<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t\t\t\t<span class=\"token comment\">// 如果存在着下层设备，就先去掉挂接</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t\t\t\t<span class=\"token function\">IoDetachDevice</span><span class=\"token punctuation\">(</span>DevExt<span class=\"token operator\">-></span>LowerDevObj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t \t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span> <span class=\"token operator\">!=</span> DevExt<span class=\"token operator\">-></span>FltDevObj<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t \t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t\t\t\t<span class=\"token comment\">// 如果存在过滤设备，就要删除它</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t \t\t\t<span class=\"token function\">IoDeleteDevice</span><span class=\"token punctuation\">(</span>DevExt<span class=\"token operator\">-></span>FltDevObj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t \t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t<span class=\"token comment\">// 这个是 PnP 管理器用来询问设备能否支持特殊文件的 irp，作为卷的过滤驱动，我们必须处理</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t<span class=\"token keyword\">case</span> IRP_MN_DEVICE_USAGE_NOTIFICATION<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t\t\tBOOLEAN setPagable<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t\t\t<span class=\"token comment\">// 如果是询问是否支持休眠文件和 dump 文件，则直接下发给下层设备去处理</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>irpsp<span class=\"token operator\">-></span>Parameters<span class=\"token punctuation\">.</span>UsageNotification<span class=\"token punctuation\">.</span>Type <span class=\"token operator\">!=</span> DeviceUsageTypePaging<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t\t\t\tntStatus <span class=\"token operator\">=</span> <span class=\"token function\">DPSendToNextDriver</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t\t\t\t\tDevExt<span class=\"token operator\">-></span>LowerDevObj<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t\t\t\t\tIrp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">return</span> ntStatus<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"68\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\t\t\t<span class=\"token comment\">// 这里等一下分页计数事件</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\t\t\tntStatus <span class=\"token operator\">=</span> <span class=\"token function\">KeWaitForSingleObject</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\t\t\t\t<span class=\"token operator\">&amp;</span>DevExt<span class=\"token operator\">-></span>PagingPathCountEvent<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\t\t\t\tExecutive<span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"73\"></td><td><pre>\t\t\t\tKernelMode<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>\t\t\t\tFALSE<span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\t\t\t\t<span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>\t\t\t<span class=\"token comment\">//setPagable 初始化为假，是没有设置过 DO_POWER_PAGABLE 的意思</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>\t\t\tsetPagable <span class=\"token operator\">=</span> FALSE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>irpsp<span class=\"token operator\">-></span>Parameters<span class=\"token punctuation\">.</span>UsageNotification<span class=\"token punctuation\">.</span>InPath<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">(</span>DevExt<span class=\"token operator\">-></span>PagingPathCount <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"81\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>\t\t\t\t<span class=\"token comment\">// 如果是 PnP manager 通知我们将要删去分页文件，且我们目前只剩下最后一个分页文件的时候会进入这里</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>DeviceObject<span class=\"token operator\">-></span>Flags <span class=\"token operator\">&amp;</span> DO_POWER_INRUSH<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"85\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">else</span> </pre></td></tr><tr><td data-num=\"86\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>\t\t\t\t\t<span class=\"token comment\">// 到这里说明没有分页文件在这个设备上了，需要设置 DO_POWER_PAGABLE 这一位了</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>\t\t\t\t\tDeviceObject<span class=\"token operator\">-></span>Flags <span class=\"token operator\">|=</span> DO_POWER_PAGABLE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>\t\t\t\t\tsetPagable <span class=\"token operator\">=</span> TRUE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>\t\t\t<span class=\"token comment\">// 到这里肯定是关于分页文件的是否可建立查询，或者是删除的通知，我们交给下层设备去做。这里需要用同步的方式给下层设备，也就是说要等待下层设备的返回</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>\t\t\tntStatus <span class=\"token operator\">=</span> <span class=\"token function\">DPForwardIrpSync</span><span class=\"token punctuation\">(</span>DevExt<span class=\"token operator\">-></span>LowerDevObj<span class=\"token punctuation\">,</span>Irp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">NT_SUCCESS</span><span class=\"token punctuation\">(</span>ntStatus<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"96\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>\t\t\t\t<span class=\"token comment\">// 如果发给下层设备的请求成功了，说明下层设备支持这个操作，会执行到这里</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>\t\t\t\t<span class=\"token comment\">// 在成功的条件下我们来改变我们自己的计数值，这样就能记录我们现在这个设备上到底有多少个分页文件</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>\t\t\t\t<span class=\"token function\">IoAdjustPagingPathCount</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>\t\t\t\t\t<span class=\"token operator\">&amp;</span>DevExt<span class=\"token operator\">-></span>PagingPathCount<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>\t\t\t\t\tirpsp<span class=\"token operator\">-></span>Parameters<span class=\"token punctuation\">.</span>UsageNotification<span class=\"token punctuation\">.</span>InPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>irpsp<span class=\"token operator\">-></span>Parameters<span class=\"token punctuation\">.</span>UsageNotification<span class=\"token punctuation\">.</span>InPath<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"103\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>\t\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>DevExt<span class=\"token operator\">-></span>PagingPathCount <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"105\"></td><td><pre>\t\t\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>\t\t\t\t\t\t<span class=\"token comment\">// 如果这个请求是一个建立分页文件的查询请求，并且下层设备支持这个请求，而且这是第一个在这个设备上的分页文件，那么我们需要清除 DO_POWER_PAGABLE 位</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>\t\t\t\t\t\tDeviceObject<span class=\"token operator\">-></span>Flags <span class=\"token operator\">&amp;=</span> <span class=\"token operator\">~</span>DO_POWER_PAGABLE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>\t\t\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>\t\t\t<span class=\"token keyword\">else</span> </pre></td></tr><tr><td data-num=\"112\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>\t\t\t\t<span class=\"token comment\">// 到这里说明给下层设备发请求失败了，下层设备不支持这个请求，这时候我们需要把之前做过的操作还原</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>setPagable <span class=\"token operator\">==</span> TRUE<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"115\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>\t\t\t\t\t<span class=\"token comment\">// 根据 setPagable 变量的值来判断我们之前是否做过对 DO_POWER_PAGABLE 的设置，如果有的话就清楚这个设置</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>\t\t\t\t\tDeviceObject<span class=\"token operator\">-></span>Flags <span class=\"token operator\">&amp;=</span> <span class=\"token operator\">~</span>DO_POWER_PAGABLE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>\t\t\t\t\tsetPagable <span class=\"token operator\">=</span> FALSE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>\t\t\t<span class=\"token comment\">// 设置分页计数事件</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>\t\t\t<span class=\"token function\">KeSetEvent</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>\t\t\t\t<span class=\"token operator\">&amp;</span>DevExt<span class=\"token operator\">-></span>PagingPathCountEvent<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>\t\t\t\tIO_NO_INCREMENT<span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"125\"></td><td><pre>\t\t\t\tFALSE</pre></td></tr><tr><td data-num=\"126\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>\t\t\t<span class=\"token comment\">// 到这里我们就可以完成这个 irp 请求了</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>\t\t\t<span class=\"token function\">IoCompleteRequest</span><span class=\"token punctuation\">(</span>Irp<span class=\"token punctuation\">,</span> IO_NO_INCREMENT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> ntStatus<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span>\t\t</pre></td></tr><tr><td data-num=\"131\"></td><td><pre>\t<span class=\"token keyword\">default</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token function\">DPSendToNextDriver</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>\t\tDevExt<span class=\"token operator\">-></span>LowerDevObj<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>\t\tIrp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre></pre></td></tr><tr><td data-num=\"138\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"power请求的处理\"><a class=\"anchor\" href=\"#power请求的处理\">#</a> Power 请求的处理</h3>\n<p>Power 请求的处理本应和大部分 IRP 请求一样，直接交给下层设备处理即可。</p>\n<p>只是在 Windows Vista 以前的操作系统中，下发所使用的函数是比较特殊的  <code>PoCallDriver</code>  ，而且在这之前还需要使用 <code>PoStartNextPowerIrp</code>  来处理一下 IRP 请求。<br />\n这一情况在 Windows Vista 中得以改变，开发人员只需要使用一般的方法下发这个 IRP 请求即可。本驱动中使用了一个编译宏来判断当前的驱动是为 Windows Vista 使用的还是为 Windows XP 使用的，从而决定编译时使用的代码。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>NTSTATUS</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">DPDispatchPower</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    IN\tPDEVICE_OBJECT\tDeviceObject<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    IN\tPIRP\t\t\tIrp</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token comment\">// 用来指向过滤设备的设备扩展的指针</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tPDP_FILTER_DEV_EXTENSION\tDevExt <span class=\"token operator\">=</span> DeviceObject<span class=\"token operator\">-></span>DeviceExtension<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\"><span class=\"token punctuation\">(</span>NTDDI_VERSION <span class=\"token operator\">&lt;</span> NTDDI_VISTA<span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token comment\">// 如果是 vista 以前的版本的 windows，需要使用特殊的向下层设备转发的函数</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token function\">PoStartNextPowerIrp</span><span class=\"token punctuation\">(</span>Irp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token function\">IoSkipCurrentIrpStackLocation</span><span class=\"token punctuation\">(</span>Irp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token function\">PoCallDriver</span><span class=\"token punctuation\">(</span>DevExt<span class=\"token operator\">-></span>LowerDevObj<span class=\"token punctuation\">,</span> Irp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">else</span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token comment\">// 如果是 vista 系统，可以使用和一般下发 irp 一样的方法来下发</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token function\">DPSendToNextDriver</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\tDevExt<span class=\"token operator\">-></span>LowerDevObj<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\tIrp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span>  </span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"deviceiocontrol请求的处理\"><a class=\"anchor\" href=\"#deviceiocontrol请求的处理\">#</a> DeviceIoControl 请求的处理</h3>\n<p><code>DeviceIoControl</code>  请求的处理函数是  <code>DPDispatchDeviceControl</code>  ，作为一个磁盘卷设备的过滤驱动，理论上是不需要对  <code>DeviceIoControl</code>  做任何处理的，只需要如实地转发给下层设备去处理即可。但是在这里本驱动需要截获一个特殊的  <code>DeviceIoControl</code>  请求 —  <code>IOCTL_VOLUME_ONLINE</code> ，这个请求是由 Windows 操作系统发出的，<strong>它本身的作用是把目标卷设备设置为在线状态，在这个状态设置完成之后，才会有对这个卷的读 / 写等操作发生</strong>。</p>\n<p>对于这个以还原为目的的驱动来说，最好是尽量对读 / 写操作进行处理。基于这个理由， <code>IOCTL_VOLUME_ONLINE</code>  是一个很好的机会，所以在本驱动中，<strong>大部分的数据结构等初始化工作都将被放到这个 <code>DeviceIoControl</code>  时完成</strong>。</p>\n<p>这里我们可能会认为在收到  <code>IOCTL_VOLUME_ONLINE</code>  这个 <code>DeviceIoControl</code>  请求时直接做初始化工作即可，然后再将这个请求发往下层设备。这是不行的，原因如下：</p>\n<p>初始化工作需要目标卷的一些信息，例如需要知道这个卷的卷标，因为这个驱动只保护 “D” 盘；需要知道这个卷的一些信息（如卷的大小），因为初始化 <code>bitmap</code>  需要这个信息作为参数，但是这一切都必须要等过滤驱动的下层设备也就是真正的卷设备开始运行之后才能够提供，而卷设备开始运行却需要这个 <code>IOCTL_VOLUME_ONLINE</code>  的 <code>DeviceIoControl</code>  请求发下去…… 这样似乎陷入了一个先有鸡还是先有蛋的循环中，但实际上有一个很简单的办法可以解决这个问题，就是<strong>让请求先发下去，等下层设备处理完毕之后再进行初始化工作，同时由于下发请求时采用了同步的方式，因此在完成请求之前是不会有其他请求发生的</strong>。</p>\n<p>WDM 驱动框架为实现上文所述的操作提供了相当方便的操作方式，<em>只需要复制一份 <code>irp stack</code> ，设置好完成函数和一个等待事件，在调用下层设备之后就开始等待这个事件，当下层设备处理完成之后之前设置的完成函数会被调用，在完成函数中会唤醒刚才所说的等待事件，于是一切都会顺理成章地走下去，当然在完成函数里上文所述的初始化工作就可以进行了</em>。</p>\n<p>下面是如何设置完成函数和等待事件的代码，也就是在 DeviceIoControl 的分发函数中所做的事情。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>NTSTATUS</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">DPDispatchDeviceControl</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tIN\tPDEVICE_OBJECT\tDeviceObject<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tIN\tPIRP\t\t\tIrp</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token comment\">// 用来指向过滤设备的设备扩展的指针</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tPDP_FILTER_DEV_EXTENSION\tDevExt <span class=\"token operator\">=</span> DeviceObject<span class=\"token operator\">-></span>DeviceExtension<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token comment\">// 返回值</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tNTSTATUS ntStatus <span class=\"token operator\">=</span> STATUS_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token comment\">// 用来指向 irp stack 的指针</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tPIO_STACK_LOCATION  irpsp <span class=\"token operator\">=</span> <span class=\"token function\">IoGetCurrentIrpStackLocation</span><span class=\"token punctuation\">(</span>Irp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token comment\">// 用来同步 IOCTL_VOLUME_ONLINE 处理的事件</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tKEVENT\t\t\t\t\tEvent<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token comment\">// 用来传给 IOCTL_VOLUME_ONLINE 的完成函数的上下文</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tVOLUME_ONLINE_CONTEXT\tcontext<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>irpsp<span class=\"token operator\">-></span>Parameters<span class=\"token punctuation\">.</span>DeviceIoControl<span class=\"token punctuation\">.</span>IoControlCode<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token keyword\">case</span> IOCTL_VOLUME_ONLINE<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t\t<span class=\"token comment\">// 如果是卷设备的 IOCTL_VOLUME_ONLINE，会进入到这里</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t\t<span class=\"token comment\">// 我们打算自己处理这个 irp 请求，这里先初始化一个事件用来在这个请求的完成函数里面做同步信号</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t\t<span class=\"token function\">KeInitializeEvent</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>Event<span class=\"token punctuation\">,</span> NotificationEvent<span class=\"token punctuation\">,</span> FALSE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t\t<span class=\"token comment\">// 给这个请求的完成函数初始化参数</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t\tcontext<span class=\"token punctuation\">.</span>DevExt <span class=\"token operator\">=</span> DevExt<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t\tcontext<span class=\"token punctuation\">.</span>Event <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>Event<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t\t<span class=\"token comment\">// 这里 copy 一份 irp stack</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t\t<span class=\"token function\">IoCopyCurrentIrpStackLocationToNext</span><span class=\"token punctuation\">(</span>Irp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t\t<span class=\"token comment\">// 设置完成函数</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t\t<span class=\"token function\">IoSetCompletionRoutine</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t\t\tIrp<span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\t\t\tDPVolumeOnLineCompleteRoutine<span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\t\t\t<span class=\"token operator\">&amp;</span>context<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\t\t\tTRUE<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\t\t\tTRUE<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\t\t\tTRUE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\t\t<span class=\"token comment\">// 调用下层设备来处理这个 irp</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\t\tntStatus <span class=\"token operator\">=</span> <span class=\"token function\">IoCallDriver</span><span class=\"token punctuation\">(</span>DevExt<span class=\"token operator\">-></span>LowerDevObj<span class=\"token punctuation\">,</span> Irp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\t\t<span class=\"token comment\">// 等待下层设备处理结束这个 irp</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\t\t<span class=\"token function\">KeWaitForSingleObject</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\t\t\t<span class=\"token operator\">&amp;</span>Event<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\t\t\tExecutive<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\t\t\tKernelMode<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\t\t\tFALSE<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t\t\t\t<span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t\t\t<span class=\"token comment\">// 返回</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> ntStatus<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t<span class=\"token keyword\">default</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t\t<span class=\"token comment\">// 对于其它 DeviceIoControl，我们一律调用下层设备去处理</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token function\">DPSendToNextDriver</span><span class=\"token punctuation\">(</span>DevExt<span class=\"token operator\">-></span>LowerDevObj<span class=\"token punctuation\">,</span>Irp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t</pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"ioctl_volume_online的完成回调函数\"><a class=\"anchor\" href=\"#ioctl_volume_online的完成回调函数\">#</a> IOCTL_VOLUME_ONLINE 的完成回调函数</h4>\n<p>从上面的代码中可以看到，在如何获取到  <code>IOCTL_VOLUME_ONLINE</code>  请求时设置了名为  <code>DPVolumeOnLineCompleteRoutine</code>  的完成函数，这个函数将在下层设备处理完 IRP 时被调用。</p>\n<p>下面看一下这个完成函数里都做了什么，这里需要注意的是，在这个完成函数里，下层设备所对应的磁盘卷设备已经可以工作了。</p>\n<p>在完成函数里首先获取了卷的名称，即常见的 C、D、E 等盘符，这是通过系统调用获取到的，如果有兴趣，会发现这个系统调用是无法在 <code>IOCTL_VOLUME_ONLINE</code>  被下发之前使用的。<br />\n在获取了这些盘符之后，根据驱动设计，这里只对 “D” 盘感兴趣，在发现盘符为 “D” 的卷设备之后，首先获取这个卷的基本信息，例如卷有多大等。</p>\n<p>这个获取信息的函数是驱动自己实现的，它通过读取卷的第一个扇区并分析其内容来取得所需的信息。</p>\n<p>在上一章中我们学过 <code>DBR</code> ，应该会比较容易地理解这些信息是如何获取的，这里就不再对代码进行分析了。</p>\n<p>在获取了卷的信息之后，需要初始化一个 <code>bitmap</code> ，这个 <code>bitmap</code>  是还原功能的核心数据结构，具体的作用和实现后面会了解的，<strong>这里只需要知道初始化 <code>bitmap</code>  时需要卷的总大小作为参数即可</strong>。</p>\n<p>在这些工作都完成之后，<strong>将用来标识还原卷的全局变量赋值</strong>，<em>在今后运行的读 / 写分发函数和 boot 驱动回调函数等众多函数中，都会引用这个全局变量，并根据它的内容来确定哪个是需要保护的卷</em>。</p>\n<p>下面是完成函数的具体实现过程，在代码中读者可以发现，作为参数被传入的等待事件在最后被唤醒，这使得上面的 <code>DeviceIoControl</code>  处理代码中的等待得以返回，系统调用得以继续运行下去。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>NTSTATUS</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">DPVolumeOnLineCompleteRoutine</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tIN PDEVICE_OBJECT  DeviceObject<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tIN PIRP  Irp<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tIN PVOLUME_ONLINE_CONTEXT  Context</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token comment\">// 返回值</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tNTSTATUS ntStatus <span class=\"token operator\">=</span> STATUS_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token comment\">// 这个卷设备的 dos 名字，也就是 C，D 等</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tUNICODE_STRING\t\tDosName <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token comment\">// 在这里 Context 是不可能为空的，为空就是出错了</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token function\">ASSERT</span><span class=\"token punctuation\">(</span>Context<span class=\"token operator\">!=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token comment\">// 下面调用我们自己的 VolumeOnline 处理</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token comment\">// 获取这个卷的 dos 名字</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tntStatus <span class=\"token operator\">=</span> <span class=\"token function\">IoVolumeDeviceToDosName</span><span class=\"token punctuation\">(</span>Context<span class=\"token operator\">-></span>DevExt<span class=\"token operator\">-></span>PhyDevObj<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>DosName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">NT_SUCCESS</span><span class=\"token punctuation\">(</span>ntStatus<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t<span class=\"token keyword\">goto</span> ERROUT<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token comment\">// 将 dos 名字变成大写形式</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\tContext<span class=\"token operator\">-></span>DevExt<span class=\"token operator\">-></span>VolumeLetter <span class=\"token operator\">=</span> DosName<span class=\"token punctuation\">.</span>Buffer<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Context<span class=\"token operator\">-></span>DevExt<span class=\"token operator\">-></span>VolumeLetter <span class=\"token operator\">></span> L<span class=\"token string\">'Z'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\tContext<span class=\"token operator\">-></span>DevExt<span class=\"token operator\">-></span>VolumeLetter <span class=\"token operator\">-=</span> <span class=\"token punctuation\">(</span>L<span class=\"token string\">'a'</span> <span class=\"token operator\">-</span> L<span class=\"token string\">'A'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token comment\">// 我们只保护 “D” 盘</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Context<span class=\"token operator\">-></span>DevExt<span class=\"token operator\">-></span>VolumeLetter <span class=\"token operator\">==</span> L<span class=\"token string\">'D'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t<span class=\"token comment\">// 获取这个卷的基本信息</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\tntStatus <span class=\"token operator\">=</span> <span class=\"token function\">DPQueryVolumeInformation</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t\tContext<span class=\"token operator\">-></span>DevExt<span class=\"token operator\">-></span>PhyDevObj<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t\t<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span>Context<span class=\"token operator\">-></span>DevExt<span class=\"token operator\">-></span>TotalSizeInByte<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t\t<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span>Context<span class=\"token operator\">-></span>DevExt<span class=\"token operator\">-></span>ClusterSizeInByte<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t\t<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span>Context<span class=\"token operator\">-></span>DevExt<span class=\"token operator\">-></span>SectorSizeInByte<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">NT_SUCCESS</span><span class=\"token punctuation\">(</span>ntStatus<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\t\t<span class=\"token keyword\">goto</span> ERROUT<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\t<span class=\"token comment\">// 建立这个卷对应的位图</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\tntStatus <span class=\"token operator\">=</span> <span class=\"token function\">DPBitmapInit</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\t\t<span class=\"token operator\">&amp;</span>Context<span class=\"token operator\">-></span>DevExt<span class=\"token operator\">-></span>Bitmap<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\t\tContext<span class=\"token operator\">-></span>DevExt<span class=\"token operator\">-></span>SectorSizeInByte<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\t\t<span class=\"token number\">8</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\t\t<span class=\"token number\">25600</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\t\t<span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>Context<span class=\"token operator\">-></span>DevExt<span class=\"token operator\">-></span>TotalSizeInByte<span class=\"token punctuation\">.</span>QuadPart <span class=\"token operator\">/</span> </pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\t\t<span class=\"token punctuation\">(</span>LONGLONG<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">25600</span> <span class=\"token operator\">*</span> <span class=\"token number\">8</span> <span class=\"token operator\">*</span> Context<span class=\"token operator\">-></span>DevExt<span class=\"token operator\">-></span>SectorSizeInByte<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">NT_SUCCESS</span><span class=\"token punctuation\">(</span>ntStatus<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t\t\t<span class=\"token keyword\">goto</span> ERROUT<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t\t<span class=\"token comment\">// 对全局量赋值，说明我们找到需要保护的那个设备了</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t\tgProtectDevExt <span class=\"token operator\">=</span> Context<span class=\"token operator\">-></span>DevExt<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>ERROUT<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">NT_SUCCESS</span><span class=\"token punctuation\">(</span>ntStatus<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span> <span class=\"token operator\">!=</span> Context<span class=\"token operator\">-></span>DevExt<span class=\"token operator\">-></span>Bitmap<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t\t\t<span class=\"token function\">DPBitmapFree</span><span class=\"token punctuation\">(</span>Context<span class=\"token operator\">-></span>DevExt<span class=\"token operator\">-></span>Bitmap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span> <span class=\"token operator\">!=</span> Context<span class=\"token operator\">-></span>DevExt<span class=\"token operator\">-></span>TempFile<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t\t\t<span class=\"token function\">ZwClose</span><span class=\"token punctuation\">(</span>Context<span class=\"token operator\">-></span>DevExt<span class=\"token operator\">-></span>TempFile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span> <span class=\"token operator\">!=</span> DosName<span class=\"token punctuation\">.</span>Buffer<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t\t<span class=\"token function\">ExFreePool</span><span class=\"token punctuation\">(</span>DosName<span class=\"token punctuation\">.</span>Buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\t<span class=\"token comment\">// 设置等待同步事件，这样可以让我们等待的 DeviceIoControl 处理过程继续运行</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>\t<span class=\"token function\">KeSetEvent</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\t\tContext<span class=\"token operator\">-></span>Event<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\t\t<span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\t\tFALSE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\t<span class=\"token keyword\">return</span> STATUS_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"bitmap的作用和分析\"><a class=\"anchor\" href=\"#bitmap的作用和分析\">#</a> bitmap 的作用和分析</h3>\n<p>在上面的分析中已经多次看到了 <code>bitmap</code> ，但却一直不知道它具体是什么，它的作用是什么，为什么要用它，它是如何实现的。</p>\n<p>下面将会来解答这些问题。</p>\n<p>顾名思义， <code>bitmap</code>  就是一个位图。<strong>它实际上是一些内存块，这些内存块的每一位用来标识一个磁盘上的最小访问单位，一般情况下是一个扇区。每一位可以被置位或者被清除，用来表示这个扇区所对应的两种状态</strong>。</p>\n<p>作为一个还原驱动，<strong>核心的问题在于如何将写入的数据存储在其他地方，而在读取时又能够准确地从其他地方找到</strong>。为了达到这个目的，就必须使用 <code>bitmap</code> 。 <code>bitmap</code>  中的每一位对应的是磁盘上的一个扇区，有多少个扇区就有多少位。<br />\n<em>这个位为 0 代表的意义是，这个位所对应的扇区的数据没有被存储到其他地方；反之，则代表这个扇区的数据被存储到了其他地方。在写数据时，根据写操作的范围可以将 <code>bitmap</code>  中对应的区域置为 1，在读操作时，则又会根据 <code>bitmap</code>  的内容把置为 1 的扇区从转存的地方读回来；而对 <code>bitmap</code>  为 0 的地方还是从原有设备上读取数据，这样 <code>bitmap</code>  就成了在这次系统启动生命周期中所有写操作的标志直到系统重启，在重启过后 <code>bitmap</code>  又将恢复为全 0 的状态，这时无论是什么读操作都不会从转存处拿数据，也就实现了还原的功能</em>。</p>\n<p>之所以说 <code>bitmap</code>  是一些内存块而不是一个连续的内存，是因为在设计 <code>bitmap</code>  时考虑到它所表示的位图可能对应着很大一块磁盘区域，即使是用 1 位来表示 512 字节的数据也有可能会是很大的一片内存空间。所以在设计 <code>bitmap</code>  时要求它能够按需分配内存，使用时才去分配对应的内存，这样就可以节约大量的内存空间。要知道这里所说的内存空间都是指非分页的内存，这一部分内存即使是在内核中也是非常宝贵的。</p>\n<p>首先来看一下 bitmap 的内部数据结构组成。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> tBitmap<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\"><span class=\"token function\">pack</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_DP_BITMAP_</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token comment\">// 这个卷中的每个扇区有多少字节，这同样也说明了 bitmap 中一个位所对应的字节数</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> sectorSize<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token comment\">// 每个 byte 里面有几个 bit，一般情况下是 8</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> byteSize<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token comment\">// 每个块是多大 byte，</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> regionSize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token comment\">// 这个 bitmap 总共有多少个块</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> regionNumber<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token comment\">// 这个块对应了多少个实际的 byte，这个数字应该是 sectorSize * byteSize * regionSize</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> regionReferSize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token comment\">// 这个 bitmap 对应了多少个实际的 byte，这个数字应该是 sectorSize * byteSize * regionSize * regionNumber</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    __int64 bitmapReferSize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token comment\">// 指向 bitmap 存储空间的指针</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    tBitmap<span class=\"token operator\">*</span><span class=\"token operator\">*</span> Bitmap<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token comment\">// 用于存取 bitmap 的锁</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">void</span><span class=\"token operator\">*</span> lockBitmap<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span> DP_BITMAP<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span> PDP_BITMAP<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\"><span class=\"token function\">pack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span></span></pre></td></tr></table></figure><p>可以看到  <code>bitmap</code>  的最上层是一个类型为字节指针的指针（ <code>tBitmap**</code> ，实际等效于 <code>unsigned char**</code> ）的元素，名为 <code>bitmap</code> ，在这里可以把这个指针的指针理解成一个指针数组，数组有 <code>regionSize</code>  个元素，每个元素就是一个指向所谓的内存块的指针。在开始时这些指向内存块的指针都是空指针，这时它们代表了（而不是真正指向了）一个内容全部为 0 的内存块，只是实际的内存没有被分配出来。当需要将其中的任何一位设置为 1 时，这个内存块会首先被分配，在清零之后再对其中需要设置为 1 的位进行设置，这就是所说的按需分配，也是节约空间的关键所在。</p>\n<h4 id=\"初始化bitmap\"><a class=\"anchor\" href=\"#初始化bitmap\">#</a> 初始化 bitmap</h4>\n<p>下面是初始化这个数据结构的代码，用户通过指定 <code>bitmap</code>  的参数来初始化一个 <code>bitmap</code> ，在这里用户需要知道这个 <code>bitmap</code>  一共代表了多大的区域；同时需要给定一个块的大小，这个大小取的太大可能造成分配空间的浪费，取的太小又会使得块的数目太多，所以一般需要取一个合适的中间值。</p>\n<p>下面是初始化一个 <code>bitmap</code>  的代码</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>NTSTATUS <span class=\"token function\">DPBitmapInit</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tDP_BITMAP <span class=\"token operator\">*</span><span class=\"token operator\">*</span>     bitmap<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span>       sectorSize<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span>       byteSize<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span>       regionSize<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span>       regionNumber</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tDP_BITMAP <span class=\"token operator\">*</span> myBitmap <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tNTSTATUS status <span class=\"token operator\">=</span> STATUS_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token comment\">// 检查参数，以免使用了错误的参数导致发生处零错等错误</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span> <span class=\"token operator\">==</span> bitmap <span class=\"token operator\">||</span> <span class=\"token number\">0</span> <span class=\"token operator\">==</span> sectorSize <span class=\"token operator\">||</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t<span class=\"token number\">0</span> <span class=\"token operator\">==</span> byteSize <span class=\"token operator\">||</span> <span class=\"token number\">0</span> <span class=\"token operator\">==</span> regionSize  <span class=\"token operator\">||</span> <span class=\"token number\">0</span> <span class=\"token operator\">==</span> regionNumber<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> STATUS_UNSUCCESSFUL<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t__try</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t<span class=\"token comment\">// 分配一个 bitmap 结构，这是无论如何都要分配的，这个结构相当于一个 bitmap 的 handle\t</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span> <span class=\"token operator\">==</span> <span class=\"token punctuation\">(</span>myBitmap <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>DP_BITMAP<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">DPBitmapAlloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>DP_BITMAP<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t\tstatus <span class=\"token operator\">=</span> STATUS_INSUFFICIENT_RESOURCES<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t\t__leave<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t<span class=\"token comment\">// 清空结构</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t<span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>myBitmap<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>DP_BITMAP<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t<span class=\"token comment\">// 根据参数对结构中的成员进行赋值</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\tmyBitmap<span class=\"token operator\">-></span>sectorSize <span class=\"token operator\">=</span> sectorSize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\tmyBitmap<span class=\"token operator\">-></span>byteSize <span class=\"token operator\">=</span> byteSize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\tmyBitmap<span class=\"token operator\">-></span>regionSize <span class=\"token operator\">=</span> regionSize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\tmyBitmap<span class=\"token operator\">-></span>regionNumber <span class=\"token operator\">=</span> regionNumber<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\tmyBitmap<span class=\"token operator\">-></span>regionReferSize <span class=\"token operator\">=</span> sectorSize <span class=\"token operator\">*</span> byteSize <span class=\"token operator\">*</span> regionSize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\tmyBitmap<span class=\"token operator\">-></span>bitmapReferSize <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>__int64<span class=\"token punctuation\">)</span>sectorSize <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>__int64<span class=\"token punctuation\">)</span>byteSize <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>__int64<span class=\"token punctuation\">)</span>regionSize <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>__int64<span class=\"token punctuation\">)</span>regionNumber<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\t<span class=\"token comment\">// 分配出 regionNumber 那么多个指向 region 的指针，这是一个指针数组</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span> <span class=\"token operator\">==</span> <span class=\"token punctuation\">(</span>myBitmap<span class=\"token operator\">-></span>Bitmap <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>tBitmap <span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">DPBitmapAlloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>tBitmap<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> regionNumber<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\t\tstatus <span class=\"token operator\">=</span> STATUS_INSUFFICIENT_RESOURCES<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\t\t__leave<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\t<span class=\"token comment\">// 清空指针数组</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\t<span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>myBitmap<span class=\"token operator\">-></span>Bitmap<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>tBitmap<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> regionNumber<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\t<span class=\"token operator\">*</span> bitmap <span class=\"token operator\">=</span> myBitmap<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\tstatus <span class=\"token operator\">=</span> STATUS_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t<span class=\"token function\">__except</span><span class=\"token punctuation\">(</span>EXCEPTION_EXECUTE_HANDLER<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t\tstatus <span class=\"token operator\">=</span> STATUS_UNSUCCESSFUL<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">NT_SUCCESS</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span> <span class=\"token operator\">!=</span> myBitmap<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t\t\t<span class=\"token function\">DPBitmapFree</span><span class=\"token punctuation\">(</span>myBitmap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t\t<span class=\"token operator\">*</span> bitmap <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t<span class=\"token keyword\">return</span> status<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre></pre></td></tr><tr><td data-num=\"62\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">DPBitmapFree</span><span class=\"token punctuation\">(</span>DP_BITMAP<span class=\"token operator\">*</span> bitmap<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t<span class=\"token comment\">// 释放 bitmap</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\tDWORD i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span> <span class=\"token operator\">!=</span> bitmap<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span> <span class=\"token operator\">!=</span> bitmap<span class=\"token operator\">-></span>Bitmap<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> bitmap<span class=\"token operator\">-></span>regionNumber<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span> <span class=\"token operator\">!=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>bitmap<span class=\"token operator\">-></span>Bitmap <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\t\t\t\t\t<span class=\"token comment\">// 从最底层的块开始释放，所有块都轮询一次\t\t\t\t</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>\t\t\t\t\t<span class=\"token function\">ExFreePool</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>bitmap<span class=\"token operator\">-></span>Bitmap <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>\t\t\t<span class=\"token comment\">// 释放块的指针</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>\t\t\t<span class=\"token function\">ExFreePool</span><span class=\"token punctuation\">(</span>bitmap<span class=\"token operator\">-></span>Bitmap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span>\t</pre></td></tr><tr><td data-num=\"82\"></td><td><pre>\t\t<span class=\"token comment\">// 释放 bitmap 本身</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>\t\t<span class=\"token function\">ExFreePool</span><span class=\"token punctuation\">(</span>bitmap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>从上面的代码中可以看出，初始化 bitmap 的过程中仅仅分配了很少的一部分内存，而这时这个 bitmap 却是完全可用的，只有在对其进行位设置时才会有新的内存被分配出来。</p>\n<h4 id=\"bitmap置位函数\"><a class=\"anchor\" href=\"#bitmap置位函数\">#</a> bitmap 置位函数</h4>\n<p>bitmap 提供了一个接口，这个接口的作用是<em>把 bitmap 特定区域内的数据置位（即把某一位从 0 修改成 1），因为在 bitmap 的初始化过程中所有的位都认为是 0，而在今后使用的过程中也看不出需要将 1 变为 0 的可能，这就使得这里只需要提供置位的接口即可，而不需要清除位的接口</em>。这个接口函数需要考虑的第一个问题是，在所需置位的目标 bitmap 内存区域没有被分配时需要先分配才能置位。需要考虑的第二个问题是，如何能够尽快地完成一个对一长段连续的 bitmap 做置位的请求。</p>\n<p>下面请看这两个问题的具体处理方式。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>NTSTATUS <span class=\"token function\">DPBitmapSet</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tDP_BITMAP <span class=\"token operator\">*</span>      bitmap<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tLARGE_INTEGER       offset<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span>       length</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t__int64 i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> myRegion <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> myRegionEnd <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> myRegionOffset <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> myRegionOffsetEnd <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> myByteOffset <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> myByteOffsetEnd <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> myBitPos <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tNTSTATUS status <span class=\"token operator\">=</span> STATUS_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\tLARGE_INTEGER setBegin <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> setEnd <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t__try</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t<span class=\"token comment\">// 检查变量</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span> <span class=\"token operator\">==</span> bitmap <span class=\"token operator\">||</span> offset<span class=\"token punctuation\">.</span>QuadPart <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t\tstatus <span class=\"token operator\">=</span> STATUS_INVALID_PARAMETER<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t\t__leave<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token operator\">!=</span> offset<span class=\"token punctuation\">.</span>QuadPart <span class=\"token operator\">%</span> bitmap<span class=\"token operator\">-></span>sectorSize <span class=\"token operator\">||</span> <span class=\"token number\">0</span> <span class=\"token operator\">!=</span> length <span class=\"token operator\">%</span> bitmap</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t\t<span class=\"token operator\">-></span>sectorSize<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t\tstatus <span class=\"token operator\">=</span> STATUS_INVALID_PARAMETER<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t\t__leave<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t<span class=\"token comment\">// 根据要设置的偏移量和长度来计算需要使用到哪些 region，如果需要的话，就分配他们指向的内存空间</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\tmyRegion <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>offset<span class=\"token punctuation\">.</span>QuadPart <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span>__int64<span class=\"token punctuation\">)</span>bitmap<span class=\"token operator\">-></span>regionReferSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\tmyRegionEnd <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>offset<span class=\"token punctuation\">.</span>QuadPart <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>__int64<span class=\"token punctuation\">)</span>length<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span>__int64<span class=\"token punctuation\">)</span>bitmap<span class=\"token operator\">-></span>regionReferSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> myRegion<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> myRegionEnd<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span> <span class=\"token operator\">==</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>bitmap<span class=\"token operator\">-></span>Bitmap <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span> <span class=\"token operator\">==</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>bitmap<span class=\"token operator\">-></span>Bitmap <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>tBitmap<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">DPBitmapAlloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>tBitmap<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> bitmap<span class=\"token operator\">-></span>regionSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\t\t\t\tstatus <span class=\"token operator\">=</span> STATUS_INSUFFICIENT_RESOURCES<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\t\t\t\t__leave<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\t\t\t\t<span class=\"token function\">memset</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>bitmap<span class=\"token operator\">-></span>Bitmap <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>tBitmap<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> bitmap<span class=\"token operator\">-></span>regionSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t\t<span class=\"token comment\">// 开始设置 bitmap，首先我们需要将要设置的区域按照 byte 对齐，这样可以按 byte 设置而不需要按 bit 设置，加快设置速度</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t\t<span class=\"token comment\">// 对于没有 byte 对齐的区域先手工设置掉他们</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> offset<span class=\"token punctuation\">.</span>QuadPart<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> offset<span class=\"token punctuation\">.</span>QuadPart <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>__int64<span class=\"token punctuation\">)</span>length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">+=</span> bitmap<span class=\"token operator\">-></span>sectorSize<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t\t\tmyRegion <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span>__int64<span class=\"token punctuation\">)</span>bitmap<span class=\"token operator\">-></span>regionReferSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t\t\tmyRegionOffset <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>__int64<span class=\"token punctuation\">)</span>bitmap<span class=\"token operator\">-></span>regionReferSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t\t\tmyByteOffset <span class=\"token operator\">=</span> myRegionOffset <span class=\"token operator\">/</span> bitmap<span class=\"token operator\">-></span>byteSize <span class=\"token operator\">/</span> bitmap<span class=\"token operator\">-></span>sectorSize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t\t\tmyBitPos <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>myRegionOffset <span class=\"token operator\">/</span> bitmap<span class=\"token operator\">-></span>sectorSize<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> bitmap<span class=\"token operator\">-></span>byteSize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token operator\">==</span> myBitPos<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t\t\t\tsetBegin<span class=\"token punctuation\">.</span>QuadPart <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t\t\t<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>bitmap<span class=\"token operator\">-></span>Bitmap <span class=\"token operator\">+</span> myRegion<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> myByteOffset<span class=\"token punctuation\">)</span> <span class=\"token operator\">|=</span> bitmapMask<span class=\"token punctuation\">[</span>myBitPos<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">>=</span> offset<span class=\"token punctuation\">.</span>QuadPart <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>__int64<span class=\"token punctuation\">)</span>length<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t\t\tstatus <span class=\"token operator\">=</span> STATUS_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\t\t\t__leave<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> offset<span class=\"token punctuation\">.</span>QuadPart <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>__int64<span class=\"token punctuation\">)</span>length <span class=\"token operator\">-</span> bitmap<span class=\"token operator\">-></span>sectorSize<span class=\"token punctuation\">;</span> i <span class=\"token operator\">>=</span> offset<span class=\"token punctuation\">.</span>QuadPart<span class=\"token punctuation\">;</span> i <span class=\"token operator\">-=</span> bitmap<span class=\"token operator\">-></span>sectorSize<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\t\t\tmyRegion <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span>__int64<span class=\"token punctuation\">)</span>bitmap<span class=\"token operator\">-></span>regionReferSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>\t\t\tmyRegionOffset <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>__int64<span class=\"token punctuation\">)</span>bitmap<span class=\"token operator\">-></span>regionReferSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>\t\t\tmyByteOffset <span class=\"token operator\">=</span> myRegionOffset <span class=\"token operator\">/</span> bitmap<span class=\"token operator\">-></span>byteSize <span class=\"token operator\">/</span> bitmap<span class=\"token operator\">-></span>sectorSize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\t\t\tmyBitPos <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>myRegionOffset <span class=\"token operator\">/</span> bitmap<span class=\"token operator\">-></span>sectorSize<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> bitmap<span class=\"token operator\">-></span>byteSize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token number\">7</span> <span class=\"token operator\">==</span> myBitPos<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>\t\t\t\tsetEnd<span class=\"token punctuation\">.</span>QuadPart <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>\t\t\t<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>bitmap<span class=\"token operator\">-></span>Bitmap <span class=\"token operator\">+</span> myRegion<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> myByteOffset<span class=\"token punctuation\">)</span> <span class=\"token operator\">|=</span> bitmapMask<span class=\"token punctuation\">[</span>myBitPos<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> offset<span class=\"token punctuation\">.</span>QuadPart <span class=\"token operator\">||</span> setEnd<span class=\"token punctuation\">.</span>QuadPart <span class=\"token operator\">==</span> setBegin<span class=\"token punctuation\">.</span>QuadPart<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>\t\t\tstatus <span class=\"token operator\">=</span> STATUS_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>\t\t\t__leave<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>\t\tmyRegionEnd <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>setEnd<span class=\"token punctuation\">.</span>QuadPart <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span>__int64<span class=\"token punctuation\">)</span>bitmap<span class=\"token operator\">-></span>regionReferSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> setBegin<span class=\"token punctuation\">.</span>QuadPart<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> setEnd<span class=\"token punctuation\">.</span>QuadPart<span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>\t\t\tmyRegion <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span>__int64<span class=\"token punctuation\">)</span>bitmap<span class=\"token operator\">-></span>regionReferSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>\t\t\tmyRegionOffset <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>__int64<span class=\"token punctuation\">)</span>bitmap<span class=\"token operator\">-></span>regionReferSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>\t\t\tmyByteOffset <span class=\"token operator\">=</span> myRegionOffset <span class=\"token operator\">/</span> bitmap<span class=\"token operator\">-></span>byteSize <span class=\"token operator\">/</span> bitmap<span class=\"token operator\">-></span>sectorSize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>\t\t\t<span class=\"token comment\">// 如果我们设置的区域没有跨两个 region，只需要使用 memset 去做按 byte 的设置然后跳出即可</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>myRegion <span class=\"token operator\">==</span> myRegionEnd<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>\t\t\t\tmyRegionOffsetEnd <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>setEnd<span class=\"token punctuation\">.</span>QuadPart <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>__int64<span class=\"token punctuation\">)</span>bitmap<span class=\"token operator\">-></span>regionReferSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>\t\t\t\tmyByteOffsetEnd <span class=\"token operator\">=</span> myRegionOffsetEnd <span class=\"token operator\">/</span> bitmap<span class=\"token operator\">-></span>byteSize <span class=\"token operator\">/</span> bitmap<span class=\"token operator\">-></span>sectorSize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>\t\t\t\t<span class=\"token function\">memset</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>bitmap<span class=\"token operator\">-></span>Bitmap <span class=\"token operator\">+</span> myRegion<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> myByteOffset<span class=\"token punctuation\">,</span> <span class=\"token number\">0xff</span><span class=\"token punctuation\">,</span> myByteOffsetEnd <span class=\"token operator\">-</span> myByteOffset <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>\t\t\t<span class=\"token comment\">// 如果我们设置的区域跨了两个 region，需要设置完后递增</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>\t\t\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>\t\t\t\tmyRegionOffsetEnd <span class=\"token operator\">=</span> bitmap<span class=\"token operator\">-></span>regionReferSize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>\t\t\t\tmyByteOffsetEnd <span class=\"token operator\">=</span> myRegionOffsetEnd <span class=\"token operator\">/</span> bitmap<span class=\"token operator\">-></span>byteSize <span class=\"token operator\">/</span> bitmap<span class=\"token operator\">-></span>sectorSize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>\t\t\t\t<span class=\"token function\">memset</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>bitmap<span class=\"token operator\">-></span>Bitmap <span class=\"token operator\">+</span> myRegion<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> myByteOffset<span class=\"token punctuation\">,</span> <span class=\"token number\">0xff</span><span class=\"token punctuation\">,</span> myByteOffsetEnd <span class=\"token operator\">-</span> myByteOffset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>\t\t\t\ti <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>myByteOffsetEnd <span class=\"token operator\">-</span> myByteOffset<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> bitmap<span class=\"token operator\">-></span>byteSize <span class=\"token operator\">*</span> bitmap<span class=\"token operator\">-></span>sectorSize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>\t\tstatus <span class=\"token operator\">=</span> STATUS_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>\t<span class=\"token function\">__except</span><span class=\"token punctuation\">(</span>EXCEPTION_EXECUTE_HANDLER<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>\t\tstatus <span class=\"token operator\">=</span> STATUS_UNSUCCESSFUL<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">NT_SUCCESS</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"124\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>\t<span class=\"token keyword\">return</span> status<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在上面的代码中看到，设置位的函数是如何先通过计算确定需要使用哪些块，并且在需要时分配它们的，然后是如何尽可能地按照一个字节而不是按照一个位来对所需要设置的位进行设置的。</p>\n<h4 id=\"bitmap位测试函数\"><a class=\"anchor\" href=\"#bitmap位测试函数\">#</a> bitmap 位测试函数</h4>\n<p>除了置位，bitmap 也需要提供一个能够测试指定位图区域是全部为 1 还是全部为 0，抑或兼而有之的接口，这个接口的目的在于，用户可以通过测试的结果决定如何进行下一步的操作。</p>\n<p>测试函数代码如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">long</span> <span class=\"token function\">DPBitmapTest</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tDP_BITMAP <span class=\"token operator\">*</span>      bitmap<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tLARGE_INTEGER       offset<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span>       length</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">char</span> flag <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> myRegion <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> myRegionOffset <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> myByteOffset <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> myBitPos <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">long</span> ret <span class=\"token operator\">=</span> BITMAP_BIT_UNKNOW<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t__try</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t<span class=\"token comment\">// 检查参数</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span> <span class=\"token operator\">==</span> bitmap <span class=\"token operator\">||</span> offset<span class=\"token punctuation\">.</span>QuadPart <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> offset<span class=\"token punctuation\">.</span>QuadPart <span class=\"token operator\">+</span> length <span class=\"token operator\">></span> bitmap<span class=\"token operator\">-></span>bitmapReferSize<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t\tret <span class=\"token operator\">=</span> BITMAP_BIT_UNKNOW<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t\t__leave<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">+=</span> bitmap<span class=\"token operator\">-></span>sectorSize<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t\t<span class=\"token comment\">// 针对需要测试的 bitmap 范围进行测试，如果全部为 0 则返回 BITMAP_RANGE_CLEAR，如果全部为 1，则返回 BITMAP_RANGE_SET，如果为 0，1 混合则返回 BITMAP_RANGE_BLEND</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t\tmyRegion <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>offset<span class=\"token punctuation\">.</span>QuadPart <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>__int64<span class=\"token punctuation\">)</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span>__int64<span class=\"token punctuation\">)</span>bitmap<span class=\"token operator\">-></span>regionReferSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t\tmyRegionOffset <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>offset<span class=\"token punctuation\">.</span>QuadPart <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>__int64<span class=\"token punctuation\">)</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>__int64<span class=\"token punctuation\">)</span>bitmap<span class=\"token operator\">-></span>regionReferSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t\tmyByteOffset <span class=\"token operator\">=</span> myRegionOffset <span class=\"token operator\">/</span> bitmap<span class=\"token operator\">-></span>byteSize <span class=\"token operator\">/</span> bitmap<span class=\"token operator\">-></span>sectorSize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\t\tmyBitPos <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>myRegionOffset <span class=\"token operator\">/</span> bitmap<span class=\"token operator\">-></span>sectorSize<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> bitmap<span class=\"token operator\">-></span>byteSize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span> <span class=\"token operator\">!=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>bitmap<span class=\"token operator\">-></span>Bitmap <span class=\"token operator\">+</span> myRegion<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>bitmap<span class=\"token operator\">-></span>Bitmap <span class=\"token operator\">+</span> myRegion<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> myByteOffset<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>bitmapMask<span class=\"token punctuation\">[</span>myBitPos<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\t\t\tflag <span class=\"token operator\">|=</span> <span class=\"token number\">0x2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\t\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\t\t\tflag <span class=\"token operator\">|=</span> <span class=\"token number\">0x1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>flag <span class=\"token operator\">==</span> <span class=\"token number\">0x3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0x2</span> <span class=\"token operator\">==</span> flag<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t\t\tret <span class=\"token operator\">=</span> BITMAP_RANGE_SET<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0x01</span> <span class=\"token operator\">==</span> flag<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t\t\tret <span class=\"token operator\">=</span> BITMAP_RANGE_CLEAR<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0x03</span> <span class=\"token operator\">==</span> flag<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t\t\tret <span class=\"token operator\">=</span> BITMAP_RANGE_BLEND<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t<span class=\"token function\">__except</span><span class=\"token punctuation\">(</span>EXCEPTION_EXECUTE_HANDLER<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t\tret <span class=\"token operator\">=</span> BITMAP_BIT_UNKNOW<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\t<span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"获取指定区域位图函数\"><a class=\"anchor\" href=\"#获取指定区域位图函数\">#</a> 获取指定区域位图函数</h4>\n<p>bitmap 在完成了设置和测试的功能之后，还需要提供一个获取指定区域位图的接口，在后面的分析中可以看到，这个获取指定区域的位图操作一定是伴随着磁盘读操作而来的。</p>\n<p><strong>如果是读操作，对于 bitmap 设置为 1 的位置需要从转存数据中读取，而设置为 0 的位置则从原始的数据中读取，所以在获取了指定区域的位图之后，需要根据这个位图中的 0 和 1 来决定最终生成的数据哪一部分是从原始数据中来的，哪一部分是从转存数据中来的</strong>。</p>\n<p>由于使用环境的特殊性，这个接口被演变成将两个内存缓冲区的内容根据指定的 bitmap 来进行合并操作，读者应该很容易想到这两个缓冲区一个是读取自转存的数据，一个是读取自原始的数据。这个函数的代码如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>NTSTATUS <span class=\"token function\">DPBitmapGet</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tDP_BITMAP <span class=\"token operator\">*</span>    bitmap<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tLARGE_INTEGER     offset<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span>     length<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>            bufInOut<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>            bufIn</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> myRegion <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> myRegionOffset <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> myByteOffset <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> myBitPos <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tNTSTATUS status <span class=\"token operator\">=</span> STATUS_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t__try</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t<span class=\"token comment\">// 检查参数</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span> <span class=\"token operator\">==</span> bitmap <span class=\"token operator\">||</span> offset<span class=\"token punctuation\">.</span>QuadPart <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> <span class=\"token constant\">NULL</span> <span class=\"token operator\">==</span> bufInOut <span class=\"token operator\">||</span> <span class=\"token constant\">NULL</span> <span class=\"token operator\">==</span> bufIn<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t\tstatus <span class=\"token operator\">=</span> STATUS_INVALID_PARAMETER<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t\t__leave<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token operator\">!=</span> offset<span class=\"token punctuation\">.</span>QuadPart <span class=\"token operator\">%</span> bitmap<span class=\"token operator\">-></span>sectorSize <span class=\"token operator\">||</span> <span class=\"token number\">0</span> <span class=\"token operator\">!=</span> length <span class=\"token operator\">%</span> bitmap<span class=\"token operator\">-></span>sectorSize<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t\tstatus <span class=\"token operator\">=</span> STATUS_INVALID_PARAMETER<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t\t__leave<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t<span class=\"token comment\">// 遍历需要获取的位图范围，如果出现了位被设置为 1，就需要用 bufIn 参数中指向的相应位置的数据拷贝到 bufInOut 中</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">+=</span> bitmap<span class=\"token operator\">-></span>sectorSize<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\t\tmyRegion <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>offset<span class=\"token punctuation\">.</span>QuadPart <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>__int64<span class=\"token punctuation\">)</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span>__int64<span class=\"token punctuation\">)</span>bitmap<span class=\"token operator\">-></span>regionReferSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\t\tmyRegionOffset <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>offset<span class=\"token punctuation\">.</span>QuadPart <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>__int64<span class=\"token punctuation\">)</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>__int64<span class=\"token punctuation\">)</span>bitmap<span class=\"token operator\">-></span>regionReferSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\t\tmyByteOffset <span class=\"token operator\">=</span> myRegionOffset <span class=\"token operator\">/</span> bitmap<span class=\"token operator\">-></span>byteSize <span class=\"token operator\">/</span> bitmap<span class=\"token operator\">-></span>sectorSize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\t\tmyBitPos <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>myRegionOffset <span class=\"token operator\">/</span> bitmap<span class=\"token operator\">-></span>sectorSize<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> bitmap<span class=\"token operator\">-></span>byteSize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span> <span class=\"token operator\">!=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>bitmap<span class=\"token operator\">-></span>Bitmap <span class=\"token operator\">+</span> myRegion<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>bitmap<span class=\"token operator\">-></span>Bitmap <span class=\"token operator\">+</span> myRegion<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> myByteOffset<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>bitmapMask<span class=\"token punctuation\">[</span>myBitPos<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\t\t\t<span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>tBitmap<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>bufInOut <span class=\"token operator\">+</span> i<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>tBitmap<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>bufIn <span class=\"token operator\">+</span> i<span class=\"token punctuation\">,</span> bitmap<span class=\"token operator\">-></span>sectorSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t\tstatus <span class=\"token operator\">=</span> STATUS_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t<span class=\"token function\">__except</span><span class=\"token punctuation\">(</span>EXCEPTION_EXECUTE_HANDLER<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t\tstatus <span class=\"token operator\">=</span> STATUS_UNSUCCESSFUL<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t<span class=\"token keyword\">return</span> status<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"boot驱动完成回调函数和稀疏文件\"><a class=\"anchor\" href=\"#boot驱动完成回调函数和稀疏文件\">#</a> boot 驱动完成回调函数和稀疏文件</h3>\n<p>到这里为止，离最终的读 / 写转存处理只有最后的一点准备工作需要做了，而这个工作放在了 boot 驱动完成回调函数中。至于为什么要放在这里，则是由本驱动采用的转存缓冲区的机制决定的。</p>\n<p>前面已经反复强调<strong>这个驱动会将写入保护磁盘卷的数据转存到另一个地方</strong>，那么这个地方在哪里？在此本驱动使用了一个最为简单的方法 ——<em> 把数据转存到另一个卷的稀疏文件中</em>。</p>\n<p><strong>稀疏文件是 NTFS 文件系统的一个特有的概念，它在建立时可以表示很大的空间，但是却完全不占用实际的存储空间，只有在向其中写入数据时才会使用到真正的存储空间。</strong></p>\n<p>这就是说，可以在一个容量只有 1GB 的磁盘卷上建立一个大小为 10GB 的稀疏文件，程序可以对这 10GB 空间中的任何一个位置进行读 / 写操作，但是写入的总数据量不能超过 1GB。至于为什么将这个稀疏文件放在了另一个磁盘卷上，主要是因为如果放在同一个磁盘卷上，在写入这个文件时势必会被过滤驱动捕获，然后写入的数据被转储到这个文件上，对文件的这个写入又被过滤驱动捕获，这就形成了典型的重入。<br />\n当然这种重入是很容易避免的，但是为了不引起不必要的麻烦，这个学习为目的的驱动就使用了另一个卷作为转储的空间，这样就从根本上避免了重入的问题。</p>\n<p>那么在本节的开始所说的准备工作又是什么呢？这个工作实际上就是准备好这个稀疏文件，建立它，设置它的大小并且打开它。</p>\n<p>那么为什么需要在 boot 驱动完成函数中做这些事情呢？<br />\n<em>这是因为稀疏文件的操作是依赖于文件系统的，作为文件系统的驱动程序，NTFS 驱动是一个 boot 型驱动，但是它只有在卷设备开始工作之后才会将自己的处理设备附加到这个卷上，从而响应对这个卷的所有文件请求</em>。</p>\n<p>这就说明之前无论是在  <code>AddDevice</code>  函数中还是在  <code>IOCTL_VOLUME_ONLINE</code>  的  <code>DeviceIoControl</code>  中， NTFS 文件都是不能读 / 写的。而在 boot 驱动的完成函数中，所有的 boot 驱动都已经加载完毕，NTFS 自然也不例外，这时对于 NTFS 文件的读 / 写就轻而易举了。下面看一下做最后一步准备工作的代码</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>VOID</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">DPReinitializationRoutine</span><span class=\"token punctuation\">(</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tIN\tPDRIVER_OBJECT\tDriverObject<span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tIN\tPVOID\t\t\tContext<span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tIN\tULONG\t\t\tCount </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token comment\">// 返回值</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tNTSTATUS ntStatus<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token comment\">//D 盘的缓冲文件名</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tWCHAR\t\t\t\tSparseFilename<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> L<span class=\"token string\">\"\\\\??\\\\E:\\\\temp.dat\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tUNICODE_STRING\t\tSparseFilenameUni<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token comment\">// 建立文件时的 io 操作状态值</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tIO_STATUS_BLOCK\t\t\t\t\tios <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token comment\">// 建立文件时的对象属性变量</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tOBJECT_ATTRIBUTES\t\t\t\tObjAttr <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token comment\">// 设置文件大小的时候使用的文件结尾描述符</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\tFILE_END_OF_FILE_INFORMATION    FileEndInfo <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token comment\">// 打开我们将要用来做转储的文件</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token comment\">// 初始化要打开的文件名</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token function\">RtlInitUnicodeString</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>SparseFilenameUni<span class=\"token punctuation\">,</span>SparseFilename<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token comment\">// 初始化文件名对应的对象名，这里需要将其初始化为内核对象，并且大小写不敏感</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token function\">InitializeObjectAttributes</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t<span class=\"token operator\">&amp;</span>ObjAttr<span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t<span class=\"token operator\">&amp;</span>SparseFilenameUni<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\tOBJ_KERNEL_HANDLE<span class=\"token operator\">|</span>OBJ_CASE_INSENSITIVE<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t<span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t<span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token comment\">// 建立文件，这里需要注意的是，要加入 FILE_NO_INTERMEDIATE_BUFFERING 选项，避免文件系统再缓存这个文件</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\tntStatus <span class=\"token operator\">=</span> <span class=\"token function\">ZwCreateFile</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t<span class=\"token operator\">&amp;</span>gProtectDevExt<span class=\"token operator\">-></span>TempFile<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\tGENERIC_READ <span class=\"token operator\">|</span> GENERIC_WRITE<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\t<span class=\"token operator\">&amp;</span>ObjAttr<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\t<span class=\"token operator\">&amp;</span>ios<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\t<span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\tFILE_ATTRIBUTE_NORMAL<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\t<span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\tFILE_OVERWRITE_IF<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\tFILE_NON_DIRECTORY_FILE <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\tFILE_RANDOM_ACCESS <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\tFILE_SYNCHRONOUS_IO_NONALERT <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\tFILE_NO_INTERMEDIATE_BUFFERING<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\t<span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\t<span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">NT_SUCCESS</span><span class=\"token punctuation\">(</span>ntStatus<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t\t<span class=\"token keyword\">goto</span> ERROUT<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t<span class=\"token comment\">// 设置这个文件为稀疏文件</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\tntStatus <span class=\"token operator\">=</span> <span class=\"token function\">ZwFsControlFile</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t\tgProtectDevExt<span class=\"token operator\">-></span>TempFile<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t\t<span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t\t<span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t\t<span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t\t<span class=\"token operator\">&amp;</span>ios<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t\tFSCTL_SET_SPARSE<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t\t<span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t\t<span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t\t<span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t\t<span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">NT_SUCCESS</span><span class=\"token punctuation\">(</span>ntStatus<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t\t<span class=\"token keyword\">goto</span> ERROUT<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t<span class=\"token comment\">// 设置这个文件的大小为 \"D\" 盘的大小并且留出 10m 的保护空间</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\tFileEndInfo<span class=\"token punctuation\">.</span>EndOfFile<span class=\"token punctuation\">.</span>QuadPart <span class=\"token operator\">=</span> gProtectDevExt<span class=\"token operator\">-></span>TotalSizeInByte<span class=\"token punctuation\">.</span>QuadPart <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token operator\">*</span><span class=\"token number\">1024</span><span class=\"token operator\">*</span><span class=\"token number\">1024</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>\tntStatus <span class=\"token operator\">=</span> <span class=\"token function\">ZwSetInformationFile</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\t\tgProtectDevExt<span class=\"token operator\">-></span>TempFile<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\t\t<span class=\"token operator\">&amp;</span>ios<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\t\t<span class=\"token operator\">&amp;</span>FileEndInfo<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\t\t<span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>FILE_END_OF_FILE_INFORMATION<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>\t\tFileEndOfFileInformation</pre></td></tr><tr><td data-num=\"74\"></td><td><pre>\t\t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">NT_SUCCESS</span><span class=\"token punctuation\">(</span>ntStatus<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>\t\t<span class=\"token keyword\">goto</span> ERROUT<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>\t<span class=\"token comment\">// 如果成功初始化就将这个卷的保护标志设置为在保护状态</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>\tgProtectDevExt<span class=\"token operator\">-></span>Protect <span class=\"token operator\">=</span> TRUE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>ERROUT<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>\t<span class=\"token function\">KdPrint</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"error create temp file!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>可以看到，在准备工作中首先建立了预先指定好文件名的文件，并将其属性设置为稀疏文件，之后通过设置文件结尾的方法将这个文件的大小变为之前获取到的 “D” 盘的大小。</p>\n<p>这时所有准备工作都已经齐备了，将保护标志设置为真，本驱动中最核心的数据转储过程即将开始。</p>\n<h3 id=\"读写请求的处理\"><a class=\"anchor\" href=\"#读写请求的处理\">#</a> 读 / 写请求的处理</h3>\n<p>在本驱动中，最为核心的部分就是读 / 写请求的处理部分。</p>\n<h4 id=\"读写请求同步处理\"><a class=\"anchor\" href=\"#读写请求同步处理\">#</a> 读 / 写请求同步处理</h4>\n<p><strong>所有的读 / 写请求必须按照顺序以同步的方式处理，只有上一个操作被处理完成之后，下一个操作才可以开始被处理</strong>。</p>\n<p><em>这是因为过滤驱动内部的 bitmap 设置、读取，转存文件的读 / 写等操作是无法做到并行处理的，如果不进行读 / 写请求的顺序化，则有可能带来读 / 写不同步的问题，即一个写操作还没有完成，另一个读取这个写操作目标位置的读操作又将到来，这会造成后来的读取数据不正确。</em></p>\n<p><em>为了达到这个目的，对所有流经过滤设备的磁盘卷设备读 / 写请求，除了不需要保护的卷，其他的必须全部顺序放入到一个处理队列中，由一个处理线程对这个队列中的请求进行顺序处理</em>。</p>\n<p>下面看一下将读 / 写请求排队的代码。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>NTSTATUS</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">DPDispatchReadWrite</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    IN\tPDEVICE_OBJECT\tDeviceObject<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    IN\tPIRP\t\t\tIrp</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span>\t</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token comment\">// 用来指向过滤设备的设备扩展的指针</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tPDP_FILTER_DEV_EXTENSION\tDevExt <span class=\"token operator\">=</span> DeviceObject<span class=\"token operator\">-></span>DeviceExtension<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token comment\">// 返回值</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tNTSTATUS ntStatus <span class=\"token operator\">=</span> STATUS_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>DevExt<span class=\"token operator\">-></span>Protect<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t<span class=\"token comment\">// 这个卷在保护状态，</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t<span class=\"token comment\">// 我们首先把这个 irp 设为 pending 状态</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t<span class=\"token function\">IoMarkIrpPending</span><span class=\"token punctuation\">(</span>Irp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t<span class=\"token comment\">// 然后将这个 irp 放进相应的请求队列里</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t<span class=\"token function\">ExInterlockedInsertTailList</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t\t<span class=\"token operator\">&amp;</span>DevExt<span class=\"token operator\">-></span>ReqList<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t\t<span class=\"token operator\">&amp;</span>Irp<span class=\"token operator\">-></span>Tail<span class=\"token punctuation\">.</span>Overlay<span class=\"token punctuation\">.</span>ListEntry<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t\t<span class=\"token operator\">&amp;</span>DevExt<span class=\"token operator\">-></span>ReqLock</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t\t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t<span class=\"token comment\">// 设置队列的等待事件，通知队列对这个 irp 进行处理</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t<span class=\"token function\">KeSetEvent</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t\t<span class=\"token operator\">&amp;</span>DevExt<span class=\"token operator\">-></span>ReqEvent<span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t\t<span class=\"token punctuation\">(</span>KPRIORITY<span class=\"token punctuation\">)</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t\tFALSE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t<span class=\"token comment\">// 返回 pending 状态，这个 irp 就算处理完了</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> STATUS_PENDING<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\t<span class=\"token comment\">// 这个卷不在保护状态，直接交给下层设备进行处理</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">DPSendToNextDriver</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\t\tDevExt<span class=\"token operator\">-></span>LowerDevObj<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\t\tIrp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在上面的代码中可以看出，<strong>首先会对作为参数传入的设备对象的对象扩展中的保护位进行判断，这一位是在 boot 驱动结束回调函数中进行设置的，并且仅对 “D” 磁盘卷的设备扩展进行设置。如果这一位在非保护状态，过滤驱动将会把这个读 / 写请求直接发给下层设备去处理；反之，如果这一位在保护状态，过滤驱动将会把这个请求设置为等待处理状态，然后将其插入到为这个设备所准备的队列中，并且通过设置队列同步事件来通知处理线程对这个请求进行处理</strong>。</p>\n<p>至此，处理队列中已经塞满了等待处理的读 / 写请求，而处理线程将会忙于将这些请求分门别类地处理好。</p>\n<h4 id=\"读写请求的处理线程\"><a class=\"anchor\" href=\"#读写请求的处理线程\">#</a> 读 / 写请求的处理线程</h4>\n<p>下面将会讲解处理线程中的代码。</p>\n<hr />\n<p>首先是处理线程函数中只运行一遍的部分，包括变量的声明和对这个线程优先级的设置。由于这里不需要这个线程以非常高的优先级运行，所以将线程的优先级设置为低。</p>\n<hr />\n<p>接下来就是线程中的无限循环部分了。</p>\n<blockquote>\n<p><em>对于一个线程来说，其中必须有一个不会退出的循环体作为线程的工作主体，如果这个线程需要结束的话，一般会通过退出这个循环体来结束线程</em>。<br />\n<em>由于在线程外无法通过 API 调用的方式结束线程，所以在每个线程的循环体里一般会通过一个全局变量进行线程是否需要退出的判断，如果在线程外的任何地方将这个全局量设置为退出，那么在线程循环下一次运行到这个位置时就会自己跳出循环，结束自己</em>。</p>\n</blockquote>\n<hr />\n<p>下面就轮到真正的请求处理逻辑了。</p>\n<p>首先需要从处理请求队列中取出一个请求，这里通过带有锁机制的操作将处理请求队列头上的请求取出。由于在插入队列时是从队列的尾部插入的，这样就保证了是按照插入的顺序来进行请求处理的。在获取到请求之后，可以根据请求中的参数对一些局部变量进行赋值。</p>\n<hr />\n<p>下面轮到了对读请求的处理。</p>\n<p>这里首先根据需要读取的范围对 bitmap 中相应的范围进行测试。<br />\n<em>如果测试的结果是这些数据全部在原始磁盘上，那么这个请求就被直接发给下层设备去处理</em>。<br />\n<em>如果发现这些数据全部在转存文件中，就通过对转存文件的读取来获得数据，并完成这个 IRP 请求</em>。这里需要说明的是，如果出现这种情况，那么一定是之前有写请求将这一范围内的数据写入了转存文件中。<br />\n<em>如果发现需要读取的目标范围中的一部分在转存文件中，另一部分在实际磁盘上，首先就需要通过向下层设备发送请求来获取真实磁盘上的数据，然后通过读取转存文件来获取转储的数据，最后通过 bitmap 的相应接口函数将两个读取的数据按照 bitmap 的指示进行合并，再完成这个读的 IRP 请求</em>。</p>\n<hr />\n<p>对于写的操作处理起来很简单，因为只要发到这里的请求必定是需要写到转存文件中的。</p>\n<p><em>由于使用了稀疏文件，所以这个文件的可寻址范围和被保护磁盘的大小是相同的，转储操作就成了只需要直接写入文件即可</em>。<br />\n这里需要注意的是，要先写入转存文件，直到写入成功之后，才可以设置 bitmap 中的对应区域；如果反过来的话，则可能出现 bitmap 已经设置但是写入不成功的情况，这时需要清除 bitmap 的相应区域，这就不是一件简单的工作了。</p>\n<hr />\n<p>完整代码如下，可以对比上面的介绍来学习此函数。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>VOID</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">DPReadWriteThread</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tIN PVOID Context</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token comment\">//NTSTATUS 类型的函数返回值</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tNTSTATUS\t\t\t\t\tntStatus <span class=\"token operator\">=</span> STATUS_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token comment\">// 用来指向过滤设备的设备扩展的指针</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tPDP_FILTER_DEV_EXTENSION\tDevExt <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PDP_FILTER_DEV_EXTENSION<span class=\"token punctuation\">)</span>Context<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token comment\">// 请求队列的入口</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tPLIST_ENTRY\t\t\tReqEntry <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token comment\">//irp 指针</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\tPIRP\t\t\t\tIrp <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token comment\">//irp stack 指针</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tPIO_STACK_LOCATION\tIrpsp <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token comment\">//irp 中包括的数据地址</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tPBYTE\t\t\t\tsysBuf <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token comment\">//irp 中的数据长度</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\tULONG\t\t\t\tlength <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token comment\">//irp 要处理的偏移量</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\tLARGE_INTEGER\t\toffset <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token comment\">// 文件缓冲指针</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\tPBYTE\t\t\t\tfileBuf <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token comment\">// 设备缓冲指针</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\tPBYTE\t\t\t\tdevBuf <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token comment\">//io 操作状态</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\tIO_STATUS_BLOCK\t\tios<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token comment\">// 设置这个线程的优先级</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token function\">KeSetPriorityThread</span><span class=\"token punctuation\">(</span><span class=\"token function\">KeGetCurrentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> LOW_REALTIME_PRIORITY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token comment\">// 下面是线程的实现部分，这个循环永不退出</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span>\t</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\t<span class=\"token comment\">// 先等待请求队列同步事件，如果队列中没有 irp 需要处理，我们的线程就等待在这里，让出 cpu 时间给其它线程</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\t<span class=\"token function\">KeWaitForSingleObject</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\t\t<span class=\"token operator\">&amp;</span>DevExt<span class=\"token operator\">-></span>ReqEvent<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\t\tExecutive<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\t\tKernelMode<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\t\tFALSE<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\t\t<span class=\"token constant\">NULL</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\t\t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\t<span class=\"token comment\">// 如果有了线程结束标志，那么就在线程内部自己结束自己</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>DevExt<span class=\"token operator\">-></span>ThreadTermFlag<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\t\t<span class=\"token comment\">// 这是线程的唯一退出地点</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t\t\t<span class=\"token function\">PsTerminateSystemThread</span><span class=\"token punctuation\">(</span>STATUS_SUCCESS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t\t<span class=\"token comment\">// 从请求队列的首部拿出一个请求来准备处理，这里使用了自旋锁机制，所以不会有冲突</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>ReqEntry <span class=\"token operator\">=</span> <span class=\"token function\">ExInterlockedRemoveHeadList</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t\t\t<span class=\"token operator\">&amp;</span>DevExt<span class=\"token operator\">-></span>ReqList<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t\t\t<span class=\"token operator\">&amp;</span>DevExt<span class=\"token operator\">-></span>ReqLock</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t\t\t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t\t\t<span class=\"token comment\">// 从队列的入口里找到实际的 irp 的地址</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t\t\tIrp <span class=\"token operator\">=</span> <span class=\"token function\">CONTAINING_RECORD</span><span class=\"token punctuation\">(</span>ReqEntry<span class=\"token punctuation\">,</span> IRP<span class=\"token punctuation\">,</span> Tail<span class=\"token punctuation\">.</span>Overlay<span class=\"token punctuation\">.</span>ListEntry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t\t\t<span class=\"token comment\">// 取得 irp stack</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t\t\tIrpsp <span class=\"token operator\">=</span> <span class=\"token function\">IoGetCurrentIrpStackLocation</span><span class=\"token punctuation\">(</span>Irp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t\t\t<span class=\"token comment\">// 获取这个 irp 其中包含的缓存地址，这个地址可能来自 mdl，也可能就是直接的缓冲，这取决于我们当前设备的 io 方式是 buffer 还是 direct 方式</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span> <span class=\"token operator\">==</span> Irp<span class=\"token operator\">-></span>MdlAddress<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t\t\t\tsysBuf <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PBYTE<span class=\"token punctuation\">)</span>Irp<span class=\"token operator\">-></span>UserBuffer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t\t\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t\t\t\tsysBuf <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PBYTE<span class=\"token punctuation\">)</span><span class=\"token function\">MmGetSystemAddressForMdlSafe</span><span class=\"token punctuation\">(</span>Irp<span class=\"token operator\">-></span>MdlAddress<span class=\"token punctuation\">,</span> NormalPagePriority<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>IRP_MJ_READ <span class=\"token operator\">==</span> Irpsp<span class=\"token operator\">-></span>MajorFunction<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\t\t\t\t<span class=\"token comment\">// 如果是读的 irp 请求，我们在 irp stack 中取得相应的参数作为 offset 和 length</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>\t\t\t\toffset <span class=\"token operator\">=</span> Irpsp<span class=\"token operator\">-></span>Parameters<span class=\"token punctuation\">.</span>Read<span class=\"token punctuation\">.</span>ByteOffset<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\t\t\t\tlength <span class=\"token operator\">=</span> Irpsp<span class=\"token operator\">-></span>Parameters<span class=\"token punctuation\">.</span>Read<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\t\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>IRP_MJ_WRITE <span class=\"token operator\">==</span> Irpsp<span class=\"token operator\">-></span>MajorFunction<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>\t\t\t\t<span class=\"token comment\">// 如果是写的 irp 请求，我们在 irp stack 中取得相应的参数作为 offset 和 length</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>\t\t\t\toffset <span class=\"token operator\">=</span> Irpsp<span class=\"token operator\">-></span>Parameters<span class=\"token punctuation\">.</span>Write<span class=\"token punctuation\">.</span>ByteOffset<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\t\t\t\tlength <span class=\"token operator\">=</span> Irpsp<span class=\"token operator\">-></span>Parameters<span class=\"token punctuation\">.</span>Write<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>\t\t\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>\t\t\t\t<span class=\"token comment\">// 除此之外，offset 和 length 都是 0</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>\t\t\t\toffset<span class=\"token punctuation\">.</span>QuadPart <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>\t\t\t\tlength <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span> <span class=\"token operator\">==</span> sysBuf <span class=\"token operator\">||</span> <span class=\"token number\">0</span> <span class=\"token operator\">==</span> length<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>\t\t\t\t<span class=\"token comment\">// 如果传下来的 irp 没有系统缓冲或者缓冲的长度是 0，那么我们就没有必要处理这个 irp，直接下发给下层设备就行了</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">goto</span> ERRNEXT<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>\t\t\t<span class=\"token comment\">// 下面是转储的过程了</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>IRP_MJ_READ <span class=\"token operator\">==</span> Irpsp<span class=\"token operator\">-></span>MajorFunction<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>\t\t\t\t<span class=\"token comment\">// 这里是读的处理</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>\t\t\t\t<span class=\"token comment\">// 首先根据 bitmap 来判断这次读操作读取的范围是全部为转储空间，还是全部为未转储空间，或者兼而有之</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">long</span> tstResult <span class=\"token operator\">=</span> <span class=\"token function\">DPBitmapTest</span><span class=\"token punctuation\">(</span>DevExt<span class=\"token operator\">-></span>Bitmap<span class=\"token punctuation\">,</span> offset<span class=\"token punctuation\">,</span> length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>tstResult<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">case</span> BITMAP_RANGE_CLEAR<span class=\"token operator\">:</span> </pre></td></tr><tr><td data-num=\"97\"></td><td><pre>\t\t\t\t\t<span class=\"token comment\">// 这说明这次读取的操作全部是读取未转储的空间，也就是真正的磁盘上的内容，我们直接发给下层设备去处理</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>\t\t\t\t\t<span class=\"token keyword\">goto</span> ERRNEXT<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">case</span> BITMAP_RANGE_SET<span class=\"token operator\">:</span> </pre></td></tr><tr><td data-num=\"100\"></td><td><pre>\t\t\t\t\t<span class=\"token comment\">// 这说明这次读取的操作全部是读取已经转储的空间，也就是缓冲文件上的内容，我们从文件中读取出来，然后直接完成这个 irp</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>\t\t\t\t\t<span class=\"token comment\">// 分配一个缓冲区用来从缓冲文件中读取</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>\t\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span> <span class=\"token operator\">==</span> <span class=\"token punctuation\">(</span>fileBuf <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PBYTE<span class=\"token punctuation\">)</span><span class=\"token function\">ExAllocatePoolWithTag</span><span class=\"token punctuation\">(</span>NonPagedPool<span class=\"token punctuation\">,</span> length<span class=\"token punctuation\">,</span> <span class=\"token string\">'xypD'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>\t\t\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>\t\t\t\t\t\tntStatus <span class=\"token operator\">=</span> STATUS_INSUFFICIENT_RESOURCES<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>\t\t\t\t\t\tIrp<span class=\"token operator\">-></span>IoStatus<span class=\"token punctuation\">.</span>Information <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>\t\t\t\t\t\t<span class=\"token keyword\">goto</span> ERRERR<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>\t\t\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>\t\t\t\t\t<span class=\"token function\">RtlZeroMemory</span><span class=\"token punctuation\">(</span>fileBuf<span class=\"token punctuation\">,</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>\t\t\t\t\tntStatus <span class=\"token operator\">=</span> <span class=\"token function\">ZwReadFile</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>\t\t\t\t\t\tDevExt<span class=\"token operator\">-></span>TempFile<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>\t\t\t\t\t\t<span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>\t\t\t\t\t\t<span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>\t\t\t\t\t\t<span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>\t\t\t\t\t\t<span class=\"token operator\">&amp;</span>ios<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>\t\t\t\t\t\tfileBuf<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>\t\t\t\t\t\tlength<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>\t\t\t\t\t\t<span class=\"token operator\">&amp;</span>offset<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>\t\t\t\t\t\t<span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>\t\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">NT_SUCCESS</span><span class=\"token punctuation\">(</span>ntStatus<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>\t\t\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>\t\t\t\t\t\tIrp<span class=\"token operator\">-></span>IoStatus<span class=\"token punctuation\">.</span>Information <span class=\"token operator\">=</span> length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>\t\t\t\t\t\t<span class=\"token function\">RtlCopyMemory</span><span class=\"token punctuation\">(</span>sysBuf<span class=\"token punctuation\">,</span>fileBuf<span class=\"token punctuation\">,</span>Irp<span class=\"token operator\">-></span>IoStatus<span class=\"token punctuation\">.</span>Information<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>\t\t\t\t\t\t<span class=\"token keyword\">goto</span> ERRCMPLT<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>\t\t\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>\t\t\t\t\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>\t\t\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>\t\t\t\t\t\tntStatus <span class=\"token operator\">=</span> STATUS_INSUFFICIENT_RESOURCES<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>\t\t\t\t\t\tIrp<span class=\"token operator\">-></span>IoStatus<span class=\"token punctuation\">.</span>Information <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>\t\t\t\t\t\t<span class=\"token keyword\">goto</span> ERRERR<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>\t\t\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>\t\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">case</span> BITMAP_RANGE_BLEND<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>\t\t\t\t\t<span class=\"token comment\">// 这说明这次读取的操作是混合的，我们也需要从下层设备中读出，同时从文件中读出，然后混合并返回</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>\t\t\t\t\t<span class=\"token comment\">// 分配一个缓冲区用来从缓冲文件中读取</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>\t\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span> <span class=\"token operator\">==</span> <span class=\"token punctuation\">(</span>fileBuf <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PBYTE<span class=\"token punctuation\">)</span><span class=\"token function\">ExAllocatePoolWithTag</span><span class=\"token punctuation\">(</span>NonPagedPool<span class=\"token punctuation\">,</span> length<span class=\"token punctuation\">,</span> <span class=\"token string\">'xypD'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>\t\t\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>\t\t\t\t\t\tntStatus <span class=\"token operator\">=</span> STATUS_INSUFFICIENT_RESOURCES<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>\t\t\t\t\t\tIrp<span class=\"token operator\">-></span>IoStatus<span class=\"token punctuation\">.</span>Information <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>\t\t\t\t\t\t<span class=\"token keyword\">goto</span> ERRERR<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>\t\t\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>\t\t\t\t\t<span class=\"token function\">RtlZeroMemory</span><span class=\"token punctuation\">(</span>fileBuf<span class=\"token punctuation\">,</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>\t\t\t\t\t<span class=\"token comment\">// 分配一个缓冲区用来从下层设备中读取</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>\t\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span> <span class=\"token operator\">==</span> <span class=\"token punctuation\">(</span>devBuf <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PBYTE<span class=\"token punctuation\">)</span><span class=\"token function\">ExAllocatePoolWithTag</span><span class=\"token punctuation\">(</span>NonPagedPool<span class=\"token punctuation\">,</span> length<span class=\"token punctuation\">,</span> <span class=\"token string\">'xypD'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>\t\t\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre>\t\t\t\t\t\tntStatus <span class=\"token operator\">=</span> STATUS_INSUFFICIENT_RESOURCES<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>\t\t\t\t\t\tIrp<span class=\"token operator\">-></span>IoStatus<span class=\"token punctuation\">.</span>Information <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>\t\t\t\t\t\t<span class=\"token keyword\">goto</span> ERRERR<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre>\t\t\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre>\t\t\t\t\t<span class=\"token function\">RtlZeroMemory</span><span class=\"token punctuation\">(</span>devBuf<span class=\"token punctuation\">,</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"151\"></td><td><pre>\t\t\t\t\tntStatus <span class=\"token operator\">=</span> <span class=\"token function\">ZwReadFile</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre>\t\t\t\t\t\tDevExt<span class=\"token operator\">-></span>TempFile<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"153\"></td><td><pre>\t\t\t\t\t\t<span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"154\"></td><td><pre>\t\t\t\t\t\t<span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"155\"></td><td><pre>\t\t\t\t\t\t<span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"156\"></td><td><pre>\t\t\t\t\t\t<span class=\"token operator\">&amp;</span>ios<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"157\"></td><td><pre>\t\t\t\t\t\tfileBuf<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"158\"></td><td><pre>\t\t\t\t\t\tlength<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"159\"></td><td><pre>\t\t\t\t\t\t<span class=\"token operator\">&amp;</span>offset<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"160\"></td><td><pre>\t\t\t\t\t\t<span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"161\"></td><td><pre>\t\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">NT_SUCCESS</span><span class=\"token punctuation\">(</span>ntStatus<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"162\"></td><td><pre>\t\t\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"163\"></td><td><pre>\t\t\t\t\t\tntStatus <span class=\"token operator\">=</span> STATUS_INSUFFICIENT_RESOURCES<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"164\"></td><td><pre>\t\t\t\t\t\tIrp<span class=\"token operator\">-></span>IoStatus<span class=\"token punctuation\">.</span>Information <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"165\"></td><td><pre>\t\t\t\t\t\t<span class=\"token keyword\">goto</span> ERRERR<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"166\"></td><td><pre>\t\t\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"167\"></td><td><pre>\t\t\t\t\t<span class=\"token comment\">// 把这个 irp 发给下层设备去获取需要从设备上读取的信息</span></pre></td></tr><tr><td data-num=\"168\"></td><td><pre>\t\t\t\t\tntStatus <span class=\"token operator\">=</span> <span class=\"token function\">DPForwardIrpSync</span><span class=\"token punctuation\">(</span>DevExt<span class=\"token operator\">-></span>LowerDevObj<span class=\"token punctuation\">,</span>Irp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"169\"></td><td><pre>\t\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">NT_SUCCESS</span><span class=\"token punctuation\">(</span>ntStatus<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"170\"></td><td><pre>\t\t\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"171\"></td><td><pre>\t\t\t\t\t\tntStatus <span class=\"token operator\">=</span> STATUS_INSUFFICIENT_RESOURCES<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"172\"></td><td><pre>\t\t\t\t\t\tIrp<span class=\"token operator\">-></span>IoStatus<span class=\"token punctuation\">.</span>Information <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"173\"></td><td><pre>\t\t\t\t\t\t<span class=\"token keyword\">goto</span> ERRERR<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"174\"></td><td><pre>\t\t\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"175\"></td><td><pre>\t\t\t\t\t<span class=\"token comment\">// 将从下层设备获取到的数据存储到 devBuf 中</span></pre></td></tr><tr><td data-num=\"176\"></td><td><pre>\t\t\t\t\t<span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>devBuf<span class=\"token punctuation\">,</span> sysBuf<span class=\"token punctuation\">,</span> Irp<span class=\"token operator\">-></span>IoStatus<span class=\"token punctuation\">.</span>Information<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"177\"></td><td><pre>\t\t\t\t\t<span class=\"token comment\">// 把从文件获取到的数据和从设备获取到的数据根据相应的 bitmap 值来进行合并，合并的结果放在 devBuf 中</span></pre></td></tr><tr><td data-num=\"178\"></td><td><pre>\t\t\t\t\tntStatus <span class=\"token operator\">=</span> <span class=\"token function\">DPBitmapGet</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"179\"></td><td><pre>\t\t\t\t\t\tDevExt<span class=\"token operator\">-></span>Bitmap<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"180\"></td><td><pre>\t\t\t\t\t\toffset<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"181\"></td><td><pre>\t\t\t\t\t\tlength<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"182\"></td><td><pre>\t\t\t\t\t\tdevBuf<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"183\"></td><td><pre>\t\t\t\t\t\tfileBuf</pre></td></tr><tr><td data-num=\"184\"></td><td><pre>\t\t\t\t\t\t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"185\"></td><td><pre>\t\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">NT_SUCCESS</span><span class=\"token punctuation\">(</span>ntStatus<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"186\"></td><td><pre>\t\t\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"187\"></td><td><pre>\t\t\t\t\t\tntStatus <span class=\"token operator\">=</span> STATUS_INSUFFICIENT_RESOURCES<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"188\"></td><td><pre>\t\t\t\t\t\tIrp<span class=\"token operator\">-></span>IoStatus<span class=\"token punctuation\">.</span>Information <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"189\"></td><td><pre>\t\t\t\t\t\t<span class=\"token keyword\">goto</span> ERRERR<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"190\"></td><td><pre>\t\t\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"191\"></td><td><pre>\t\t\t\t\t<span class=\"token comment\">// 把合并完的数据存入系统缓冲并完成 irp</span></pre></td></tr><tr><td data-num=\"192\"></td><td><pre>\t\t\t\t\t<span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>sysBuf<span class=\"token punctuation\">,</span> devBuf<span class=\"token punctuation\">,</span> Irp<span class=\"token operator\">-></span>IoStatus<span class=\"token punctuation\">.</span>Information<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"193\"></td><td><pre>\t\t\t\t\t<span class=\"token keyword\">goto</span> ERRCMPLT<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"194\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">default</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"195\"></td><td><pre>\t\t\t\t\tntStatus <span class=\"token operator\">=</span> STATUS_INSUFFICIENT_RESOURCES<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"196\"></td><td><pre>\t\t\t\t\t<span class=\"token keyword\">goto</span> ERRERR<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"197\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"198\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"199\"></td><td><pre>\t\t\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"200\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"201\"></td><td><pre>\t\t\t\t<span class=\"token comment\">// 这里是写的过程</span></pre></td></tr><tr><td data-num=\"202\"></td><td><pre>\t\t\t\t<span class=\"token comment\">// 对于写，我们直接写缓冲文件，而不会写磁盘数据，这就是所谓的转储，但是转储之后需要在 bitmap 中做相应的标记</span></pre></td></tr><tr><td data-num=\"203\"></td><td><pre>\t\t\t\tntStatus <span class=\"token operator\">=</span> <span class=\"token function\">ZwWriteFile</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"204\"></td><td><pre>\t\t\t\t\tDevExt<span class=\"token operator\">-></span>TempFile<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"205\"></td><td><pre>\t\t\t\t\t<span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"206\"></td><td><pre>\t\t\t\t\t<span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"207\"></td><td><pre>\t\t\t\t\t<span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"208\"></td><td><pre>\t\t\t\t\t<span class=\"token operator\">&amp;</span>ios<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"209\"></td><td><pre>\t\t\t\t\tsysBuf<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"210\"></td><td><pre>\t\t\t\t\tlength<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"211\"></td><td><pre>\t\t\t\t\t<span class=\"token operator\">&amp;</span>offset<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"212\"></td><td><pre>\t\t\t\t\t<span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"213\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">NT_SUCCESS</span><span class=\"token punctuation\">(</span>ntStatus<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"214\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"215\"></td><td><pre>\t\t\t\t\tntStatus <span class=\"token operator\">=</span> STATUS_INSUFFICIENT_RESOURCES<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"216\"></td><td><pre>\t\t\t\t\t<span class=\"token keyword\">goto</span> ERRERR<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"217\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"218\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"219\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"220\"></td><td><pre>\t\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">NT_SUCCESS</span><span class=\"token punctuation\">(</span>ntStatus <span class=\"token operator\">=</span> <span class=\"token function\">DPBitmapSet</span><span class=\"token punctuation\">(</span>DevExt<span class=\"token operator\">-></span>Bitmap<span class=\"token punctuation\">,</span> offset<span class=\"token punctuation\">,</span> length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"221\"></td><td><pre>\t\t\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"222\"></td><td><pre>\t\t\t\t\t\t<span class=\"token keyword\">goto</span> ERRCMPLT<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"223\"></td><td><pre>\t\t\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"224\"></td><td><pre>\t\t\t\t\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"225\"></td><td><pre>\t\t\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"226\"></td><td><pre>\t\t\t\t\t\tntStatus <span class=\"token operator\">=</span> STATUS_INSUFFICIENT_RESOURCES<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"227\"></td><td><pre>\t\t\t\t\t\t<span class=\"token keyword\">goto</span> ERRERR<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"228\"></td><td><pre>\t\t\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"229\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"230\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"231\"></td><td><pre>ERRERR<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"232\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span> <span class=\"token operator\">!=</span> fileBuf<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"233\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"234\"></td><td><pre>\t\t\t\t<span class=\"token function\">ExFreePool</span><span class=\"token punctuation\">(</span>fileBuf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"235\"></td><td><pre>\t\t\t\tfileBuf <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"236\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"237\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span> <span class=\"token operator\">!=</span> devBuf<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"238\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"239\"></td><td><pre>\t\t\t\t<span class=\"token function\">ExFreePool</span><span class=\"token punctuation\">(</span>devBuf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"240\"></td><td><pre>\t\t\t\tdevBuf <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"241\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"242\"></td><td><pre>\t\t\t<span class=\"token function\">DPCompleteRequest</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"243\"></td><td><pre>\t\t\t\tIrp<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"244\"></td><td><pre>\t\t\t\tntStatus<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"245\"></td><td><pre>\t\t\t\tIO_NO_INCREMENT</pre></td></tr><tr><td data-num=\"246\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"247\"></td><td><pre>\t\t\t<span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"248\"></td><td><pre>ERRNEXT<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"249\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span> <span class=\"token operator\">!=</span> fileBuf<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"250\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"251\"></td><td><pre>\t\t\t\t<span class=\"token function\">ExFreePool</span><span class=\"token punctuation\">(</span>fileBuf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"252\"></td><td><pre>\t\t\t\tfileBuf <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"253\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"254\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span> <span class=\"token operator\">!=</span> devBuf<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"255\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"256\"></td><td><pre>\t\t\t\t<span class=\"token function\">ExFreePool</span><span class=\"token punctuation\">(</span>devBuf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"257\"></td><td><pre>\t\t\t\tdevBuf <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"258\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span>\t</pre></td></tr><tr><td data-num=\"259\"></td><td><pre>\t\t\t<span class=\"token function\">DPSendToNextDriver</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"260\"></td><td><pre>\t\t\t\tDevExt<span class=\"token operator\">-></span>LowerDevObj<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"261\"></td><td><pre>\t\t\t\tIrp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"262\"></td><td><pre>\t\t\t<span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"263\"></td><td><pre>ERRCMPLT<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"264\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span> <span class=\"token operator\">!=</span> fileBuf<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"265\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"266\"></td><td><pre>\t\t\t\t<span class=\"token function\">ExFreePool</span><span class=\"token punctuation\">(</span>fileBuf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"267\"></td><td><pre>\t\t\t\tfileBuf <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"268\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"269\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span> <span class=\"token operator\">!=</span> devBuf<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"270\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"271\"></td><td><pre>\t\t\t\t<span class=\"token function\">ExFreePool</span><span class=\"token punctuation\">(</span>devBuf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"272\"></td><td><pre>\t\t\t\tdevBuf <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"273\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"274\"></td><td><pre>\t\t\t<span class=\"token function\">DPCompleteRequest</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"275\"></td><td><pre>\t\t\t\tIrp<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"276\"></td><td><pre>\t\t\t\tSTATUS_SUCCESS<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"277\"></td><td><pre>\t\t\t\tIO_DISK_INCREMENT</pre></td></tr><tr><td data-num=\"278\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"279\"></td><td><pre>\t\t\t<span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"280\"></td><td><pre>\t\t\t</pre></td></tr><tr><td data-num=\"281\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"282\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"283\"></td><td><pre></pre></td></tr><tr><td data-num=\"284\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"驱动安装\"><a class=\"anchor\" href=\"#驱动安装\">#</a> 驱动安装</h2>\n<p>如何安装就不介绍了。</p>\n",
            "tags": [
                "磁盘的过滤",
                "具有还原功能的磁盘卷过滤驱动",
                "boot驱动",
                "bitmap"
            ]
        },
        {
            "id": "https://or0kit.github.io/Bin/Core/Drive-Development/%E7%A3%81%E7%9B%98%E7%9A%84%E8%99%9A%E6%8B%9F/",
            "url": "https://or0kit.github.io/Bin/Core/Drive-Development/%E7%A3%81%E7%9B%98%E7%9A%84%E8%99%9A%E6%8B%9F/",
            "title": "磁盘的虚拟",
            "date_published": "2022-07-27T14:35:15.000Z",
            "content_html": "<h1 id=\"虚拟的磁盘\"><a class=\"anchor\" href=\"#虚拟的磁盘\">#</a> 虚拟的磁盘</h1>\n<p>虚拟磁盘是我们可以在操作系统中增加一个行为完全可控的虚拟的磁盘驱动器。</p>\n<p>一个虚拟磁盘应用是加密，可以制作一个虚拟的磁盘，对这个磁盘的所有写入操作都通过某种算法以口令加密，同时对这个磁盘的读取作使用同样的算法和口令解密，那么在该程序运行时，操作系统和用户自己都可以看到正确的数据，而在这个程序不工作时，无论是谁企图读这磁盘，都只能看到被加密过的数据。这个特点使得这种磁盘成为一个存放机密文件的好地方，对这个磁盘的任何正常读 / 写，已经在不知不觉中被加（解）密了。</p>\n<h1 id=\"ramdisk\"><a class=\"anchor\" href=\"#ramdisk\">#</a> Ramdisk</h1>\n<p>我们接下来学习一下  <code>WDK6001.18000</code>  里自带的一个例子 —— <code>Ramdisk</code>  。</p>\n<p><code>Ramdisk</code>  使用非分页内存 (nonpaged memory) 做的磁盘存储空间，并将其以一个独立的磁盘形式暴露给用户，用户可以将其格式化成一个 Windows 能够使用的卷，并且像操作一般的磁盘卷一样对它进行操作。</p>\n<p>由于使用了内存作为虚拟的存储介质，这个磁盘具有的一个显著特点是性能的提高。由于内存本身的存取速度就比盘高许多倍，而且内存的随机存取速度又比磁盘寻道速度快很多，这几个优势使得这个内存盘非常适合作为各种软件的缓冲盘。</p>\n<p>这个磁盘的第二个显著特点是占用了大量的内存。这个特点几乎不需要解释，得到了多大的内存空间使用稀疏算法，使它看起来比实际上可用得要大得多，甚至还可以对内存空间进行压缩处理，使得它能存储更多的数据。</p>\n<p>这个磁盘的第三个显著特点就是，这是一个不具有非易失性的存储介质，这点很容易理解，关机重启之后，内存里没有数据可以留下来。</p>\n<p>这个例子使用了微软的 WDF 驱动开发框架，和普通的 WDM 驱动是不太一样的，接下来以这个驱动里的一些行为和方法对比普通的 WDM 驱动的行为和方法进行学习。</p>\n<p>WDM 驱动模型和 WDF 驱动模型的最大的区别是：</p>\n<ul>\n<li>wdf 驱动框架对 WDM 进行了一次封装，WDF 框架就好像 C++ 中的基类一样，且这个基类中的 model,IO model ,pnp 和电源管理模型；且提供了一些与操作系统相关的处理函数，这些函数好像 C++ 中的虚函数一样，WDF 驱动中能够对这些函数进行重写；特别是 Pnp 管理和电源管理！基本上都由 WDF 框架做了，而 WDF 的功能驱动几乎不要对它进行特殊的处理；</li>\n<li>WDF 驱动采用队列进行 IO 处理，而 WDM 中将所有的 IO 操作都用默认的队列进行处理，如果要进行 IRp 同步，必须使用 StartIO；</li>\n<li>WDF 是面向对象的，而 WDM 是面向过程的，WDF 提供对象的封装，如将 IRP 封装成 WDFREQUEST，对象提供方法和 Event。</li>\n</ul>\n<h2 id=\"入口函数\"><a class=\"anchor\" href=\"#入口函数\">#</a> 入口函数</h2>\n<p>再次学习一下驱动程序的入口函数。</p>\n<h3 id=\"入口函数的定义\"><a class=\"anchor\" href=\"#入口函数的定义\">#</a> 入口函数的定义</h3>\n<p>任何一个驱动程序，都会有一个  <code>DriverEntry</code>  入口函数，就像应用程序里的 main 一样。这个函数的声明是这样的:</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>NTSTATUS <span class=\"token function\">DriverEntry</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tIN PDRIVER_OBJECT DrvierObject<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    IN PUNICODE_STRING RegisitryPath<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这个函数的返回值是 NTSTATUS 类型，在驱动程序开发中经常会看到这个类型的返回值，它的各种预定义值几乎包含了驱动程序开发中所有可能出现的返回值，当然主要是各种各样的错误。<br />\n驱动程序开发人员的一个基本技能就是根据这个返回值来确定函数调用出了什么问题，这些返回值的定义位于  <code>WinDDK</code>  安装目录下的  <code>inc\\api\\ntstatus.h</code>  中，从返回值宏定义的英文意思上就基本可以判断出这个返回值的含义了。</p>\n<p>这个函数具有两个参数，第一个参数是一个  <code>PDRIVER_OBJECT</code>  类型的指针，它代表了 Windows 系统为这个驱动程序所分配的一个驱动对象。<strong>这个驱动对象是 Windows 系统中对某个驱动的唯一标识，里面包括了这个驱动的各种信息、各功能函数的入口地址等重要信息，信息量非常庞大，且复杂。</strong><br />\n在这里可以简单地认为，只要正确处理这个结构的每个成员，驱动就能够实现它的功能了。</p>\n<p>DriverEntry 的第二个参数是一个 Unicode 字符串，<strong>它代表了驱动在注册表中的参数所存放的位置。</strong><br />\n由于每一个驱动都是一个类似服务的形式存在的，在系统注册表的  <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services</code>  树下总有一个和驱动名字相同的子树用来描述这个驱动的一些基本信息，并提供一个可使用的存储空间供驱动存放自己的特有信息。<br />\n<strong>之所以在注册表中提供这么一个地方来供驱动存储信息，是因为很多驱动加载得非常早</strong>，甚至仅仅晚于 Windows 内核，这时文件系统还没有建立，驱动程序如果需要在此时享有自己可操作的存储空间（例如用来记录一些参数），除了注册表，没有其他任何地方可以使用。<strong>Windows 内核在启动时加载了一个最小的文件系统，分析磁盘并将注册表的  <code>HKEY_LOCAL_MACHINE\\SYSTEM</code>  树下的所有内容读入到内存里，这样就保证了这一部分的注册表内容在 Windows 内核刚加载之后就是可以读 / 写的。</strong><br />\nWindows 系统在启动过程中会在适当的时候将这棵子树的内容和磁盘上的注册表进行同步，之后的注册表操作就和一般的注册表操作别无二致了。在 Windows 内核刚加载之后，到这个适当的同步时间之前，任何加载的驱动程序都可以操作注册表并确保操作结果被最终留在了磁盘上，这就是 Windows 系统确保任何驱动都可以使用它提供的注册表路径来存储信息的秘密所在，也是这个注册表路径要作为驱动入口函数参数的重要意义。</p>\n<h3 id=\"ramdisk驱动的入口函数\"><a class=\"anchor\" href=\"#ramdisk驱动的入口函数\">#</a> Ramdisk 驱动的入口函数</h3>\n<p>这是 Ramdisk 驱动的入口函数源码：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>NTSTATUS</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">DriverEntry</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    IN PDRIVER_OBJECT DriverObject<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    IN PUNICODE_STRING RegistryPath</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    WDF_DRIVER_CONFIG config<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">KdPrint</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Windows Ramdisk Driver - Driver Framework Edition.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">KdPrint</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Built %s %s\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">__DATE__</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">__TIME__</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token function\">WDF_DRIVER_CONFIG_INIT</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">&amp;</span>config<span class=\"token punctuation\">,</span> RamDiskEvtDeviceAdd <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">WdfDriverCreate</span><span class=\"token punctuation\">(</span>DriverObject<span class=\"token punctuation\">,</span> RegistryPath<span class=\"token punctuation\">,</span> WDF_NO_OBJECT_ATTRIBUTES<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>config<span class=\"token punctuation\">,</span> WDF_NO_HANDLE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>看完源码后，我们需要了解  <code>WDF_DRIVER_CONFIG</code>  结构和  <code>WDF_DRIVER_CONFIG_INIT</code> ，还有后面的  <code>WdfDriverCreate</code>  函数。</p>\n<h4 id=\"wdf_driver_config-和-wdf_driver_config_init\"><a class=\"anchor\" href=\"#wdf_driver_config-和-wdf_driver_config_init\">#</a> WDF_DRIVER_CONFIG 和 WDF_DRIVER_CONFIG_INIT</h4>\n<p><code>WDF_DRIVER_CONFIG</code>  结构是  <code>WdfDriverCreate</code>  的输入参数。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_WDF_DRIVER_CONFIG</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  ULONG                     Size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  PFN_WDF_DRIVER_DEVICE_ADD EvtDriverDeviceAdd<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  PFN_WDF_DRIVER_UNLOAD     EvtDriverUnload<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  ULONG                     DriverInitFlags<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  ULONG                     DriverPoolTag<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span> WDF_DRIVER_CONFIG<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>PWDF_DRIVER_CONFIG<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><code>Size</code></p>\n<p>此结构的大小（以字节为单位）。</p>\n<p><code>EvtDriverDeviceAdd</code></p>\n<p>指向驱动程序的 EvtDriverDeviceAdd 回调函数的指针。</p>\n<p><code>EvtDriverUnload</code></p>\n<p>指向驱动程序的 EvtDriverUnload 回调函数的指针。</p>\n<p><code>DriverInitFlags</code></p>\n<p>一个或多个 WDF_DRIVER_INIT_FLAGS 类型值的按位或，用于标识驱动程序初始化标志。</p>\n<p><code>DriverPoolTag</code></p>\n<p>（KMDF 版本 1.5 和更高版本。）驱动程序定义的池标记，框架将分配给所有驱动程序的池分配。</p>\n<hr />\n<p>要初始化  <code>WDF_DRIVER_CONFIG</code>  结构，驱动程序必须调用  <code>WDF_DRIVER_CONFIG_INIT</code> 。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">WDF_DRIVER_CONFIG_INIT</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token punctuation\">[</span>out<span class=\"token punctuation\">]</span>          PWDF_DRIVER_CONFIG        Config<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token punctuation\">[</span>in<span class=\"token punctuation\">,</span> optional<span class=\"token punctuation\">]</span> PFN_WDF_DRIVER_DEVICE_ADD EvtDriverDeviceAdd</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>参数<br />\n <code>[out] Config</code></p>\n<p>指向函数将初始化的 WDF_DRIVER_CONFIG 结构的指针。</p>\n<p><code>[in, optional] EvtDriverDeviceAdd</code></p>\n<p>指向驱动程序的  <code>EvtDriverDeviceAdd</code>  回调函数的指针。</p>\n<h4 id=\"wdfdrivercreate函数\"><a class=\"anchor\" href=\"#wdfdrivercreate函数\">#</a> WdfDriverCreate 函数</h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>NTSTATUS <span class=\"token function\">WdfDriverCreate</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token punctuation\">[</span>in<span class=\"token punctuation\">]</span>            PDRIVER_OBJECT         DriverObject<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token punctuation\">[</span>in<span class=\"token punctuation\">]</span>            PCUNICODE_STRING       RegistryPath<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">[</span>in<span class=\"token punctuation\">,</span> optional<span class=\"token punctuation\">]</span>  PWDF_OBJECT_ATTRIBUTES DriverAttributes<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">[</span>in<span class=\"token punctuation\">]</span>            PWDF_DRIVER_CONFIG     DriverConfig<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token punctuation\">[</span>out<span class=\"token punctuation\">,</span> optional<span class=\"token punctuation\">]</span> WDFDRIVER              <span class=\"token operator\">*</span>Driver</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong>参数</strong><br />\n <code>[in] DriverObject</code></p>\n<p>指向表示 Windows 驱动程序模型 (WDM) 驱动程序对象的 DRIVER_OBJECT 结构的指针。驱动程序接收该指针作为其 DriverEntry 例程的输入。</p>\n<p><code>[in] RegistryPath</code></p>\n<p>一个指向 UNICODE_STRING 结构的指针，该结构包含驱动程序接收的作为其 DriverEntry 例程的输入的注册表路径字符串。</p>\n<p><code>[in, optional] DriverAttributes</code></p>\n<p>指向调用者分配的 WDF_OBJECT_ATTRIBUTES 结构的指针。（结构的 ParentObject 成员必须为 NULL。）此参数是可选的，可以是 WDF_NO_OBJECT_ATTRIBUTES。</p>\n<p><code>[in] DriverConfig</code></p>\n<p>指向调用者分配的 WDF_DRIVER_CONFIG 结构的指针。</p>\n<p><code>[out, optional] Driver</code></p>\n<p>指向接收新框架驱动程序对象句柄的位置的指针。此参数是可选的，可以是 WDF_NO_HANDLE。</p>\n<p><strong>返回值</strong><br />\n如果操作成功， WdfDriverCreate 返回  <code>STATUS_SUCCESS</code>  。否则，此方法可能会返回以下值之一：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">返回码</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><strong>STATUS_DRIVER_INTERNAL_ERROR</strong></td>\n<td style=\"text-align:left\">驱动程序多次调用 WdfDriverCreaterivercreate</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>STATUS_INVALID_PARAMETER</strong></td>\n<td style=\"text-align:left\">非即插即用 (PnP) 驱动程序指定了 EvtDriverDeviceAdd 回调函数。</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"ramdisk的入口函数详解\"><a class=\"anchor\" href=\"#ramdisk的入口函数详解\">#</a> Ramdisk 的入口函数详解</h4>\n<ul>\n<li>DriverEntry 做的第一件事情是声明了一个  <code>WDF_DRIVER_CONFIG</code>  类型的变量  <code>config</code> ，并且在两句无关痛痒的输出语句之后，很快地使用  <code>WDF_DRIVER_ CONFIG_INIT</code>  初始化了  <code>config</code>  变量。</li>\n<li><code>WDF_DRIVER_CONFIG</code>  结构通常用来说明这个驱动程序的一些可配置项，其中包括了这个驱动程序的  <code>EvtDriverDeviceAdd</code>  和  <code>EvtDriverUnload</code>  回调函数的入口地址、这个驱动在初始化时的一些标志和在分配内存时所使用的  <code>tag</code>  值。</li>\n<li><code>WDF_DRIVER_CONFIG_INIT</code>  宏在初始化  <code>WDF_DRIVER_CONFIG</code>  类型的变量时会把用户提供的  <code>EvtDriverDeviceAdd</code>  回调函数的入口地址存入其中，并且初始化这个变量的其他部分。</li>\n<li><code>EvtDriverDeviceAdd</code>  回调函数是 WDF 驱动框架中的一个重要的回调函数，它用来在即插即用管理器发现一个新设备的时候对这个设备进行初始化操作，在这里读者可以将自己编写的  <code>RamDiskEvtDeviceAdd</code>  函数提供给系统作为本驱动的  <code>EvtDriverDeviceAdd</code>  回调函数。</li>\n<li>在设置好了  <code>config</code>  变量之后，  <code>DriverEntry</code>  直接调用了  <code>WdfDriverCreate</code>  并返回。<br />\n <code>WdfDriverCreate</code>  函数是在使用任何 WDF 框架提供的函数之前必须调用的一个函数，谭文认为，这无非是微软对原本的驱动程序开发方式的一次包装，它的作用就是根据参数来对 WDF 中的一些环境进行初始化工作，并且建立这个 WDF 驱动的驱动对象。<br />\n <code>WdfDriverCreate</code>  函数的前两个参数就是 DriverEntry 传入的驱动对象（DriverObject）和注册表路径 RegistryPath）；第三个参数被用来说明这个 WDF 驱动的驱动对象的一些属性，这里简单地用  <code>WDF_NO_OBJECT_ATTRIBUTES</code>  来说明不需要的特殊属性；第四个参数是之前初始化过的  <code>WDF_DRIVER_CONFIG</code>  变量；最后一个参数作为这个函数的输出结果 ——WDF 驱动的驱动对象。</li>\n<li>调用了这个函数之后，前面初始化过的 config 变量中的  <code>EvtDriverDeviceAdd</code>  回调函数 —— <code>RamDiskEvtDeviceAdd</code>  就和这个驱动挂钩起来，在今后的系统运行过程中，一旦发现了此类设备，RamDiskEvtDeviceAdd 就会被 Windows 的 PnP 管理器调用，这个驱动自己的处理流程也就要上演了。</li>\n</ul>\n<h2 id=\"evtdriverdeviceadd函数\"><a class=\"anchor\" href=\"#evtdriverdeviceadd函数\">#</a> EvtDriverDeviceAdd 函数</h2>\n<p>在本驱动中， RamDiskEvtDeviceAdd 作为一个 EvtDriverDeviceAdd 函数在 DriverEntry 中被注册，在 DriverEntry 函数执行完毕之后，这个驱动就只依靠 RamDiskEvtDriverDevicAdd 函数和系统保持联系了。正如上一节所说的，系统在运行过程中一旦发现了这种类型的设备，就会调用 RamDiskEvtDriverDevicAdd 函数。下面进行更仔细的分析:</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>NTSTATUS <span class=\"token function\">RamDiskEvtDeviceAdd</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tIN WDFDRIVER Driver<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tIN PWDFDEVICT_INIT DeviceInit</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这个函数的返回值是 NTSTATUS 类型，可以根据实际函数的执行结果选择返回代表正确的 STATUS_SUCCESS 或者其他代表错误的返回值。</p>\n<p>这个函数的第一个参数在这个例子中并不会使用到；第二个参数是一个  <code>WDFDEVICE_INIT</code>  类型的指针，这个参数是  <code>WDF</code>  驱动模型中自动分配出来的一个数据结构，专门传递给  <code>EvtDriverrDeviceAdd</code>  类函数用来建立一个新设备。<br />\n下面分段具体看这个驱动的  <code>EvtDriverDeviceAdd</code>  类函数是如何工作的。</p>\n<h3 id=\"局部变量的声明\"><a class=\"anchor\" href=\"#局部变量的声明\">#</a> 局部变量的声明</h3>\n<p>这里简单介绍一下每个变量的作用：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 将要建立的设备对象的属性描述变量</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>WDF_OBJECT_ATTRIBUTES deviceAttributes<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 将要调用的各种函数的状态返回值</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>NTSTATUS status<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 将要建立的设备</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>WDFDEVICE device<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 将要建立的队列对象的属性描述变量</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>WDF_OBJECT_ATTRIBUTES queueAttributes<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 将要建立的队列配置变量</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>WDF_IO_QUEUE_CONFIG ioQueueConfig<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 这个设备对应的设备扩展域的指针</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>PDEVICE_EXTENSION pDeviceExtension<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// 将要建立的队列扩展域的指针</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>PQUEUE_EXTENSION pQueueContext <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">// 将要建立的队列</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>WDFQUEUE queue<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">// 声名一个 UNICODE_STRING 类型的变量，并将它初始化为 NT_DEVICE_NAME 宏所声名的字符串，这里实际上是 \\\\Device\\\\Ramdisk</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token function\">DECLARE_CONST_UNICODE_STRING</span><span class=\"token punctuation\">(</span>ntDevictName<span class=\"token punctuation\">,</span>NT_DEVICE_NAME<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">// 保证这个函数可以操作 paged 内存</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token function\">PAGRD_CODE</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">// 由于我们不适用 Driver 这个参数，为了避免警告，加入这句</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token function\">UNREFFERENCED_PARAMETER</span><span class=\"token punctuation\">(</span>Driver<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"磁盘设备的创建\"><a class=\"anchor\" href=\"#磁盘设备的创建\">#</a> 磁盘设备的创建</h3>\n<p><code>EvtDriverDeviceAdd</code>  类函数的一个重要任务是创建设备，而它的  <code>WDFDEVICE_INIT</code>  类型参数就是用来做这件事情的，在创建设备之前需要按照开发人员的思想对  <code>WDFDEVICE_INIT</code>  变量进行进一步的加工，使创建的设备能够达到想要的效果。</p>\n<p><strong>这里的设备首先需要一个名字，这是因为这个设备将会通过这个名字暴露给应用层并且被应用层所使用，一个没有名字的设备是无法在应用层使用的。</strong></p>\n<p>另外，需要将这个设备的类型设置为  <code>FILE_DEVICE_DISK</code>  ，这是因为所有的磁盘设备都需要使用这个设备类型。<br />\n将这个设备的 IO 类型设置为 <code>Direct</code>  方式，这样在将读 / 写和 <code>DeviceIoControl</code>  的 IRP 发送到这个设备时，IRP 所携带的缓冲区可以直接被使用。<br />\n将 <code>Exclusive</code>  设置为 <code>FALSE</code> ，这说明这个设备可以被多次打开。<br />\n这里还需要给这个设备对象关联一个设备扩展的上下文，<strong>这是开发人员指定类型的一块内存区域</strong>，这块内存区域被设备的设备扩展指针所指，开发人员可以在这块内存区域里存储自己定义的一些信息。<em>针对本驱动建立出的任何一个设备，这块内存区域的结构都是相同的，不同的是随设备对象不同而具有不同的内容</em>，这些内容在接下来的编程过程中将会在各种针对设备对象进行的处理中作为处理函数的参数。</p>\n<p>除此之外，还需要为设备的一些功能指定相应的处理函数，例如设备在销毁时将调用哪个函数，在收到  <code>PnP</code>  指令时将调用哪个函数等。</p>\n<p>幸运的是，  <code>WDF</code>  驱动模型框架已经为开发人员做了很多事情，基本上实现了所有功能的标准处理过程，在大部分情况下这些标准处理过程就已经足够了，只需要我们根据自己的要求进行很少的功能处理即可。</p>\n<p>这是  <code>EvtDriverDeviceAdd</code>  函数的的一部分：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 首先需要为这个设备指定一个名词</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// \"\\\\Device\\\\Ramdisk\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>status <span class=\"token operator\">=</span> <span class=\"token function\">WdfDeviceInitAssignName</span><span class=\"token punctuation\">(</span>DeviceInit<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>neDeviceName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">NT_SUCCESS</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">return</span> status<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 接下来需要对这个设备进行一些属性的设置，包括设备类型和 IO 操作类型和设备的排他方式</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token function\">WdfDeviceInitSetDeviceType</span><span class=\"token punctuation\">(</span>DeviceInit<span class=\"token punctuation\">,</span>FILE_DEVICE_DISK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token function\">WdfDeviceInitSetIoType</span><span class=\"token punctuation\">(</span>DeviceInit<span class=\"token punctuation\">,</span>WdfDeviceIoDirect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token function\">WdfDeviceInitSetExclusive</span><span class=\"token punctuation\">(</span>DeviceInit<span class=\"token punctuation\">,</span>FALSE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">// 下面来指定这个设备的设备对象扩展</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">// 这里的 DEVICE_EXTENSION 是一个在头文件中声名的结构体数据类型</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">// 我们使用一个 WDF_OBJECT_ATTRIBUTES 类型的变量并用其设置好 DEVICE_EXTENSION</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token function\">WDF_OBJECT_ATTRIBUTES_INIT_CONTEXT_TYPE</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token operator\">&amp;</span>deviceAttributes<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  DEVICE_EXTENSION</pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">// 下面我们还将用这个 WDF_OBJECT_ATTRIBUTES 类型的变量来指定这个设备的清除回调函数</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">// 这个 WDF_OBJECT_ATTRIBUTES 类型的变量将会在下面建立设备时作为一个参数传进去</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>deviceAttributes<span class=\"token punctuation\">.</span>EvtCleanupCallBack <span class=\"token operator\">=</span> RamDiskEvtDeviceContextCleanup<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\">// 到这里，所有的准备工作都已经就绪了，我们可以开始真正建立这个设备了</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">// 建立到的设备被保存到了变量 device 中了</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>status <span class=\"token operator\">=</span> <span class=\"token function\">WdfDeviceCreate</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>DeviceInit<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>deviceAttributes<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>device<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">NT_SUCCESS</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token keyword\">return</span> status<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token comment\">// 这个 pDeviceExtension 是我们声明的一个局部指针变量，将其指向新建立的设备拓展区域</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>pDeviceExtension <span class=\"token operator\">=</span> <span class=\"token function\">DeviceGetExtension</span><span class=\"token punctuation\">(</span>device<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"如何处理发往设备的请求\"><a class=\"anchor\" href=\"#如何处理发往设备的请求\">#</a> 如何处理发往设备的请求</h3>\n<p>在设备被创建好了之后，如何处理所有可能发送给设备的请求是需要考虑的下一个问题。</p>\n<p>在以往的 WDM 开发中，常用的方式是：<em>开发者把自己实现的回调函数，作为这个设备的功能分发函数</em>。<br />\n此外，一些特殊的功能需求，也可以在回调函数中处理。例如，可以将所有的读 / 写请求都实现为去读 / 写内存，这就是最简单的内存盘。</p>\n<p>上面的处理方式说起来很简单，但是实现时还是需要一些技巧的。<br />\n一种常用的方式是 ** 建立一个或多个队列，将所有发送到这个设备的请求都插入到队列中，由另一个线程去处理队列。** 这是一个典型的生产者 — 消费者模型，这样做的好处是有了一个小小的缓冲，同时还不用担心由缓冲带来的同步问题，因为所有的请求都被队列排队了。</p>\n<p>无独有偶，在 WDF 驱动框架中，微软直接提供了这种处理队列，这样就不用开发人员自己去操心<em>如何建立队列、如何设置同步事件、如何在正确的时间销毁队列了</em>，这可真是一个造福大众的做法。</p>\n<p>为了实现<em>为驱动制作一个处理队列</em>这一目标，在 WDF 驱动框架中需要初始化一个队列配置变量 <code>ioQueueConfig</code> ，这个变量会说明队列的各种属性。<br />\n一种简单的初始化方法是将这个配置变量初始化为<em>默认状态</em>，之后再对一些具有特殊属性的请求注册回调函数，例如为读请求注册回调函数等。<br />\n在这样的初始化之后再为指定设备建立队列，WDF 驱动框架会自动将所有发往这个指定设备的请求都放入队列中处理，同时当请求符合感兴趣的属性（例如读 / 写操作）时会调用之前注册过的处理函数去处理。对每个设备可以建立多个队列，但是在本例中不会讨论多个处理队列的情况。另外，在队列中也具有和设备类似的扩展，下面也会使用到。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 将队列的配置变量初始化为默认值</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">WDF_IO_QUEUE_CONFIG_INIT_DEFAULT_QUEUE</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token operator\">&amp;</span>ioQueueConfig<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      WdfIoQueueDispatchSequential</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 我们对读写和 DeviceControl 请求的处理设置为自己的函数，其余的使用默认值</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>ioQueueConfig<span class=\"token punctuation\">.</span>EvtIoDeviceControl <span class=\"token operator\">=</span> RamDiskEvtIoDeviceControl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>ioQueueConfig<span class=\"token punctuation\">.</span>EvtIoRead          <span class=\"token operator\">=</span> RamDiskEvtIoRead<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>ioQueueConfig<span class=\"token punctuation\">.</span>EvtIoWrite         <span class=\"token operator\">=</span> RamDiskEvtIoWrite<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 指定这个队列的队列对象扩展，这里的 QUEUE_EXTENSION 是一个在头文件中声明好的结构体数据类型</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token function\">WDF_OBJECT_ATTRIBUTES_INIT_CONTEXT_TYPE</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token operator\">&amp;</span>queueAttributes<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tQUEUE_EXTENSION</pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">// 万事俱备，我们将开始创建队列，将之前创建的设备作为这个队列的父对象</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">// 在这个设备被销毁的同时，该队列也会被销毁，这样就不用担心队列结束的问题了</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>status <span class=\"token operator\">=</span> <span class=\"token function\">WdfIoQueueCreate</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\tdevice<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token operator\">&amp;</span>ioQueueConfig<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\tqueueAttributes<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token operator\">&amp;</span>queue</pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">NT_SUCCESS</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">return</span> status<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\">// 将指针 pQueueContext 指向刚刚生成的队列的扩展</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>pQueueContext <span class=\"token operator\">=</span> <span class=\"token function\">QueueGetExtension</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token comment\">// 这里初始化队列扩展里的 DeviceExtension 项，将其</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token comment\">// 设置为刚建立的设备拓展指针，这样以后在有队列的地方都</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token comment\">// 可以轻松的获得这个队列对应的设备的设备扩展了</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>pQueueContext<span class=\"token operator\">-></span>DeviceExtension <span class=\"token operator\">=</span> pDeviceExtension<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"用户配置的初始化\"><a class=\"anchor\" href=\"#用户配置的初始化\">#</a> 用户配置的初始化</h3>\n<p>在设备和用来处理设备请求的队列都建立好了之后，接下来就需要初始化与内存盘相关的一些数据结构了。</p>\n<p>对于内存盘来说，在驱动层中就是以刚才建立的那个设备作为代表的，那么自然而然地，内存盘相应的数据结构也应该和这个设备相联系。</p>\n<p>在这里就使用了这个设备的设备扩展来存放这些数据结构的内容，具体而言，这个数据结构就是之前代码中的 <code>DEVICE_EXTENSION</code>  数据结构。</p>\n<p>同时为了给用户提供一些可配置的参数，在注册表中还开辟了一个键用来存放这些可配置参数，这些参数对应到驱动中就成为了一个 <code>DISK_INFO</code>  类型的数据结构，在 <code>DEVICE_EXTENSION</code>  中会有一个成员来表示它。下面先来认识一下这两个数据结构:</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_DISK_INFO</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 磁盘的大小，以 Byte (字节) 计算，所以我们的磁盘最大只有 4GB</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    ULONG   DiskSize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 磁盘上根文件系统的进入节点</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    ULONG   RootDirEntries<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 磁盘的每个簇由多少个扇区组成</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    ULONG   SectorsPerCluster<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 磁盘的盘符</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    UNICODE_STRING DriveLetter<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span> DISK_INFO<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>PDISK_INFO<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_DEVICE_EXTENSION</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 用来指向一块内存区域，作为内存盘的实际数据存储空间</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    PUCHAR              DiskImage<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">// 用来存储内存盘的磁盘 Geometry</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    DISK_GEOMETRY       DiskGeometry<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">// 我们自己定义的磁盘信息结构，在安装时存放在注册表中</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    DISK_INFO           DiskRegInfo<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\">// 盘的符号链接名，这是真正的符号链接名</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    UNICODE_STRING      SymbolicLink<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token comment\">// DiskRegInfo 中 DriveLetterBuffer 的存储空间，这是用户在注册表中指定的盘符</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    WCHAR               DriveLetterBuffer<span class=\"token punctuation\">[</span>DRIVE_LETTER_BUFFER_SIZE<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token comment\">// SymbolicLink 的存储空间</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    WCHAR               DosDeviceNameBuffer<span class=\"token punctuation\">[</span>DOS_DEVNAME_BUFFER_SIZE<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span> DEVICE_EXTENSION<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>PDEVICE_EXTENSION<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>在了解了数据结构中各成员对象的用处之后，就可以开始进行这些数据结构的初始化工作了。</p>\n<p>首先需要去注册表中获取用户指定的信息，这里是通过自己实现的一个函数  <code>RamDiskQueryDiskRegParameters</code>  去获取的，这个函数的<em>第一个参数是注册表的路径</em>。<br />\n为了获取这个路径，首先通过  <code>WdfDeviceGetDriver</code>  从之前生成的设备中<em>获取到这个设备对应的驱动对象</em>，然后通过  <code>WdfDriverGetRegistryPath</code>  <em>从这个驱动对象中获取到相应的注册表路径</em>。<br />\n在这里使用的  <code>WdfDeviceGetDriver</code>  和  <code>WdfDriverGetRegistryPath</code>  都是 WDF 库提供的函数，它们的使用方法非常简单，作用也可以直接从函数名称中看出来，一个是通过 WDF 驱动的设备获取相应的驱动对象，而另一个是通过 WDF 驱动的驱动对象来获取注册表路径。</p>\n<p><code>RamDiskQueryDiskRegParameters</code>  函数的<em>第二个参数是一个结构体变量</em>，在这里将要向这个变量里面填写从注册表中获取的值。</p>\n<p><code>RamDiskQueryDiskRegParameters</code>  函数的具体实现比较简单，简单地认为在这个函数调用之后，  <code>pDeviceExtension→DiskRegInfo</code>  中的各成员变量就已经被初始化成了注册表中对应的值</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 将生成的设备的设备拓展中相应的 UNICODE_STRING 初始化</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>pDeviceExtension<span class=\"token operator\">-></span>DiskRegInfo<span class=\"token punctuation\">.</span>DriveLetter<span class=\"token punctuation\">.</span>Buffer <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token punctuation\">(</span>PWSTR<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>pDeviceExtension<span class=\"token operator\">-></span>DriveLetterBuffer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>pDeviceExtension<span class=\"token operator\">-></span>DiskRegInfo<span class=\"token punctuation\">.</span>DriveLetter<span class=\"token punctuation\">.</span>MaximumLength <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>pDeviceExtension<span class=\"token operator\">-></span>DriveLetterBuffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 从系统为本驱动提供的注册表键中获取我们需要的信息</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">RamDiskQueryDiskRegParameters</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token function\">WdfDriverGetRegistryPath</span><span class=\"token punctuation\">(</span><span class=\"token function\">WdfDeviceGetDriver</span><span class=\"token punctuation\">(</span>device<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token operator\">&amp;</span>pDeviceExtension<span class=\"token operator\">-></span>DiskRegInfo</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>从注册表中获取相应的参数只是初始化工作的第一步。由于这是一个使用内存来作为存储介质的模拟磁盘，因此需要分配出一定大小的内存空间来模拟磁盘空间，这个大小是由注册表中的磁盘大小参数所指定的，在以后的内容中，这块空间将被称为 Ramdisk 的磁盘镜像。</p>\n<p><em>这里需要特别说明的是，在 Windows 内核中，可以分配两种内存：一种是分页内存；另一种是非分页内存。分页内存的特点是它可能只是一个标识，实际存储的数据可能被放在磁盘上的页面文件中，在访问这个内存时系统会发出缺页中断，然后由复杂的页面管理机制将所缺的页面调入内存中。而非分页内存则相反，它永远在内存中，不会被换出到磁盘上。这样的特点也导致了分页内存可以分配得比较多，而非分页内存只能分配很少一部分。这里为了简单起见，全部分配非分页内存，这样的好处是在任何时候都不用担心要访问的地址数据是否真的在内存里，还是会引发复杂的缺页处理流程，这些流程将会导致需要在其他处理函数中作多方面的考虑。在分配内存的函数中还会出现一个内存的 TAG 值，这个值用来区分这个内存是谁分配的，在这里会将这个值赋成本驱动特殊的值，从而区别于其他的驱动所分配的内存。</em></p>\n<p>​在分配了内存之后，磁盘就有了存储空间，但是就好像任何新磁盘一样。这个磁盘需要被分区，格式化。需要我们自己去格式化操作，因为内核中是没有地方调用  <code>format</code>  命令的。具体的操作会在下面介绍。这里先知道  <code>RamDiskFormatDisk</code>  起的作用是把内存介质的磁盘格式化就可以了</p>\n<h3 id=\"链接给应用程序\"><a class=\"anchor\" href=\"#链接给应用程序\">#</a> 链接给应用程序</h3>\n<p>至此，程序建立了设备，建立了处理发往这个设备的队列，读取了用户的配置，并按照这个配置初始化了所需的内存空间和其他一些相关参数。</p>\n<p>接下来需要做的事情就是将它暴露给应用层以供使用。</p>\n<p>在 Windows 中的各盘符，例如 “C:”“D:” 实际上都是一个叫作符号链接的东西，应用层的代码不能够直接访问在内核中建立的设备，但是可以访问符号链接，所以在这里只需要用符号链接指向这个设备，便可以将对符号链接的访问指向这个设备了。</p>\n<p>这里所要做的是根据用户配置中选定的盘符去建立符号链接，将这个盘符和在这一节最开始所建立的符号链接联系起来。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 分配用户指定大小的非分页内存，并使用我们自己的内存 TAG 值</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>pDeviceExtension<span class=\"token operator\">-></span>DiskImage <span class=\"token operator\">=</span> <span class=\"token function\">ExAllocatePoolWithTag</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      NonPagedPool<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      pDeviceExtension<span class=\"token operator\">-></span>DiskRegInfo<span class=\"token punctuation\">.</span>DiskSize<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      RAMDISK_TAG</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token comment\">// 下面的代码只有在内存分配成功时才会运行</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pDeviceExtension<span class=\"token operator\">-></span>DiskImage<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      UNICODE_STRING deviceName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      UNICODE_STRING win32Name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token comment\">// 这里调用我们自己实现的函数去初始化磁盘</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token function\">RamDiskFormatDisk</span><span class=\"token punctuation\">(</span>pDeviceExtension<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      status <span class=\"token operator\">=</span> STATUS_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token comment\">// 初始化一个内容为 \"\\\\DosDevices\\\\\" 的 UNICODE_STRING 变量</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token function\">RtlInitUnicodeString</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>win32Name<span class=\"token punctuation\">,</span> DOS_DEVICE_NAME<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      <span class=\"token comment\">// 初始化一个内容为 \"\\\\Device\\\\Ramdisk\" 的 UNICODE_STRING 变量</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token comment\">// 这个变量没有用处这里只是为了保持原文档的完整性</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      <span class=\"token function\">RtlInitUnicodeString</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>deviceName<span class=\"token punctuation\">,</span> NT_DEVICE_NAME<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      <span class=\"token comment\">// 在这里我们首先准备好用来存储符号链接名的 UNICODE_STRING 变量</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      pDeviceExtension<span class=\"token operator\">-></span>SymbolicLink<span class=\"token punctuation\">.</span>Buffer <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PWSTR<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>          <span class=\"token operator\">&amp;</span>pDeviceExtension<span class=\"token operator\">-></span>DosDeviceNameBuffer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      pDeviceExtension<span class=\"token operator\">-></span>SymbolicLink<span class=\"token punctuation\">.</span>MaximumLength <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>          <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>pDeviceExtension<span class=\"token operator\">-></span>DosDeviceNameBuffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>      pDeviceExtension<span class=\"token operator\">-></span>SymbolicLink<span class=\"token punctuation\">.</span>Length <span class=\"token operator\">=</span> win32Name<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>      <span class=\"token comment\">// 将符号链接名的开头设置为 \"\\\\DosDevices\\\\\" ，这是所有符号链接共有的前缀</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>      <span class=\"token function\">RtlCopyUnicodeString</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>pDeviceExtension<span class=\"token operator\">-></span>SymbolicLink<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>win32Name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>      <span class=\"token comment\">// 在上面赋值好的前缀后面连接我们从用户配置中读出来的用户指定的盘符</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>      <span class=\"token function\">RtlAppendUnicodeStringToString</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>pDeviceExtension<span class=\"token operator\">-></span>SymbolicLink<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                                      <span class=\"token operator\">&amp;</span>pDeviceExtension<span class=\"token operator\">-></span>DiskRegInfo<span class=\"token punctuation\">.</span>DriveLetter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>      <span class=\"token comment\">// 现在符号链接名已经准备好，我们调用 WDF 驱动框架模型提供的 WdfDeviceCreateSymbolicLink 函数来为之前生成的设备简历符号链接</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>      status <span class=\"token operator\">=</span> <span class=\"token function\">WdfDeviceCreateSymbolicLink</span><span class=\"token punctuation\">(</span>device<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                                            <span class=\"token operator\">&amp;</span>pDeviceExtension<span class=\"token operator\">-></span>SymbolicLink<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>  <span class=\"token comment\">// 返回状态，函数完结</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>  <span class=\"token keyword\">return</span> status<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"小结\"><a class=\"anchor\" href=\"#小结\">#</a> 小结</h3>\n<p>到此为止，已经完整地分析了在  <code>Ramdisk</code>  驱动中  <code>EvtDriverDeviceAdd</code>  函数的具体实现。<strong>可以发现这个函数里面建立了设备对象，为了处理这个设备将要收到的各种请求，又建立了处理队列；同时由于对这个设备所需要处理的读 / 写和  <code>DeviceIoControl</code>  请求有自己的处理需求，因此没有使用系统默认的处理函数，而是注册了自己实现的 3 个处理函数。之后根据用户写在注册表中的配置参数初始化了一些相关属性，为设备存储数据准备好了内存，最后给设备建立了符号链接以便于应用层的代码访问。</strong></p>\n<p>至此，Ramdisk 的磁盘设备已经建立起来了，它在内核中代表了这个内存盘，而且由于这个设备已经暴露给了应用层的代码，各种各样的访问和请求必将接踵而至。<br />\n但是在分析如何处理这些请求之前，还需要先对磁盘卷的结构做一番介绍。</p>\n<h2 id=\"fat1216磁盘卷初始化\"><a class=\"anchor\" href=\"#fat1216磁盘卷初始化\">#</a> FAT12/16 磁盘卷初始化</h2>\n<h3 id=\"磁盘卷结构简介\"><a class=\"anchor\" href=\"#磁盘卷结构简介\">#</a> 磁盘卷结构简介</h3>\n<p>微软操作系统对磁盘的管理，包括分区的划分、每种文件系统的不同特性等。不过在这个驱动中，我们所面对的只是一个最简单的磁盘结构，即一个<em>分区基于 FAT12/16 的磁盘</em>。</p>\n<p>下面结合<strong>简单的磁盘结构</strong>和这个驱动的特性，对 FAT12/16 磁盘卷进行学习。</p>\n<p>Windows 磁盘卷首先继承了它所在磁盘的特性，这些特性是由硬件决定的，不可设置，不可更改。<br />\n这些特性包括如下内容。</p>\n<ol>\n<li>每扇区的字节数。扇区是磁盘读 / 写的基本单位，硬盘的物理设计导致它不能一次读 / 写一个字节，而是一次最少读 / 写一个扇区，现在几乎所有的硬盘扇区大小都是 512 字节。</li>\n<li>每磁道的扇区数。硬盘的盘片是圆形的，读者可以认为每个磁道都是一个圆圈，整个盘片被划分成了多个同心圆，即多个磁道。硬盘设计时规定每个磁道被划分成同样数目的扇区。</li>\n<li>每柱面的磁道数。硬盘不仅是由一个盘片组成的，当硬盘具有多个盘片时，读者可以认为所有盘片的同样位置的磁道组成了一个圆柱体，这就是一个柱面。这个参数实际上说明了硬盘的所有盘片加起来有多少个面（可能会遇见只有一个面的盘片，为了市场划分故意不在一个面上做磁性介质）。</li>\n<li>柱面数。表示硬盘的一个圆形盘片能够划分成多少个同心圆，这个数字随着硬盘技术的提高在不断地增大，因为磁盘的物理大小是固定的，那么柱面数越多就说明每个磁道越细，所需要的磁头分辨率也越高。</li>\n</ol>\n<p>这里可以参考《30 天制作操作系统》中的这张图：</p>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<p>磁盘结构是由制造过程中的物理结构决定的，而操作系统对磁盘的管理主要通过文件系统来实现，这是一种逻辑上的结构。<br />\n文件系统是建立在软件能够读 / 写磁盘任意扇区基础上的一种数据组织结构。在微软公司的操作系统中，常见的文件系统包括了 FAT12、FAT16、FAT32 和 NTFS 等。</p>\n<p>关于 FAT32 文件系统的详细说明可以参考其他资料，但是总体来说，FAT32 文件系统与 FAT12/16 文件系统的区别不是很大。</p>\n<p>至于 NTFS 文件系统，现在还没有一个完善的解决方案能够以第三方的代码来读 / 写它，也就是说，NTFS 文件系统的特性还没有被搞清楚，我们在任何时候都应该通过微软提供的文件系统驱动来读 / 写它，直到可信的第三方解决方案推出。</p>\n<p>在 FAT12/16 文件系统中，有几个参数需要了解一下。</p>\n<ul>\n<li>\n<p><strong>MBR</strong>。 MBR 是 Master Boot Record（主引导记录）的简称。<em>它位于整个磁盘的第一个扇区，大小正好是一个扇区的大小</em>，MBR 的起始处是一段程序，在 BIOS 的代码执行到最后时，BIOS 会将这段程序加载到内存中并开始执行。在这段程序的后面是一个硬盘分区表，<em>用于记录当前磁盘具体的分区信息</em>。由于 Ramdisk 驱动只是用来建立一个可用的磁盘卷，并不要求这个卷可以引导和具有其他一些特征，所以在 Ramdisk 的磁盘镜像中并不会看到 MBR 部分的存在，在这里将 Ramdisk 生成的磁盘卷当作一个分区即可。</p>\n</li>\n<li>\n<p><strong>DBR</strong>。 DBR 是 DOS Boot Record（操作系统引导记录）的简称。上面讲到过，在 MBR 的硬盘分区表中会记录每个分区的信息，包括起始位置等；而 DBR 就存在于这个起始位置指向的第一个扇区里，DBR 里面包括了有效的引导程序、厂商标志、描述数据区等。引导程序是一段用来加载真正操作系统的程序，在 DBR 的最开始是一个跳转指令，跳转到 DBR 后面一点的引导程序处。厂商标志又叫作 OEM 串，一般是由格式化程序所填写的。数据描述区又称为 BPB 的数据块，记录了分区的众多信息，这些信息用于系统在为这个逻辑盘建立文件系统时做初始参数，例如文件系统格式、根目录大小和簇大小等。作为文件系统的一个组成部分，DBR 是由操作系统的格式化程序建立的，在文件系统驱动操作任何一个磁盘卷时，这一部分的信息将被读取并作为文件系统在这个磁盘卷上的参数使用，所以在 Ramdisk 驱动中，DBR 部分是需要存在的。</p>\n</li>\n<li>\n<p><strong>FAT 区</strong>。 FAT 是 File Allocation Table（文件分配表）的简称。它位于 DBR 之后，并且以一式两份的形式连续保存。FAT 表实际上是一个链表，它的每个表项的编号都代表磁盘上的一个簇，每个表项的内容都是另一个簇的编号，而一条这样完整的链就代表了一个文件在磁盘上所占的所有的簇。FAT 表的第 0 项和第 1 项是被保留的，从第 2 项开始用来记录某个文件所在的位置。由上面内容可以知道，FAT 表的大小只和磁盘的大小及这个磁盘上的文件系统对每个簇的大小的定义相关。这里需要说明的是，FAT12 和 FAT16 的唯一区别就是一个 FAT 表的表项中能使用几位做存储空间，由于这个存储空间存储的就是另一个表项的索引值，所以这实际上就代表了表项个数的上限，换句话说，代表了这个文件系统中最大的簇的个数。如果用 12 个位来表示一个表项的索引值，那么这个索引值的上限就是 4096；而在 FAT16 文件系统中，最多可以有 65536 个簇。</p>\n</li>\n<li>\n<p><strong>根目录入口点</strong>。 上面说了 FAT 是多个链表的集合体，其中的每一条链代表了一个文件，但是这些链的起始点是如何确定的呢？这就要用到这里所说的根目录入口点了。多个根目录入口点形成了一个表，这个表紧跟着 FAT 表存储，这个表的每个表项代表了根目录下的一个文件或者一个目录，这个表项里面记载了很多相关的信息，例如文件或者目录的名字、属性和修改日期等，最重要的是记录了这个文件或者目录在 FAT 表中的起点，这样就可以通过查询 FAT 表找到这个文件或者目录的所有簇，进而获取所有的数据。而通过查询每个目录的目录项内容又可以知道这个目录下面存储的文件在 FAT 表中的对应位置，这样就可以遍历到磁盘上的所有文件了。</p>\n</li>\n</ul>\n<p>以上所说的磁盘结构和 FAT12/16 文件系统的一些结构在这个驱动中并不会全部用到。由于本驱动的目的只是用来演示，所以并不需要完善的磁盘特性，更何况这个磁盘每次开机之后才会建立起来，也不可能用它来进行引导，所以并不需要与之相关的数据和信息。在这里对这些知识能有所了解即可。</p>\n<h3 id=\"ramdisk对磁盘的初始化\"><a class=\"anchor\" href=\"#ramdisk对磁盘的初始化\">#</a> Ramdisk 对磁盘的初始化</h3>\n<p>在 Ramdisk 驱动中的  <code>EvtDriverDeviceAdd</code>  类函数里会调用  <code>RamDiskFormatDisk</code>  函数对所分配的用于做磁盘镜像的内存空间进行初始化，在简单了解了磁盘卷结构之后，来学习下这个函数是如何初始化这个磁盘映像空间的。</p>\n<p>首先来了解一下这个函数的本地变量声明，为了在分析过程中有所参照。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 一个指向磁盘启动扇区的指针</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>PBOOT_SECTOR bootSector <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PBOOT_SECTOR<span class=\"token punctuation\">)</span> devExt<span class=\"token operator\">-></span>DiskImage<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 指向 FAT 第一个 FAT 表的指针</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>PUCHAR\t\tfirstFatSector<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 用于记录有多少个根目录日寇点</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>ULONG rootDirEntries<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 用于记录每个簇由多少扇区组成</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>ULONG sectorsPerCluster<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 用于记录 FAT 文件系统的类型，是 FAT12 还是 16</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>USHORT fatType<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 用于记录在 FAT 表里一共有多少个表项</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>USHORT fatEntries<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// 用于记录一个 FAT 表需要占用多少个扇区来存储</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>USHORT fatSectorCnt<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">// 用于指向第一个根目录入口点</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>PDIR_ENTRY rootDir<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">// 用于确定这个函数是可以存取分页内存的</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token function\">PAGED_CODE</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">// 用于确定这个盘的引导扇区的大小确实是一个扇区大小</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token function\">ASSERT</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>BOOT_SECTOR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">512</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">// 用于确定我们操作的磁盘不是一个不可用的指针</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token function\">ASSERT</span><span class=\"token punctuation\">(</span>devExt<span class=\"token operator\">-></span>DiskImage <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">// 清空磁盘镜像</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token function\">RtlZeroMemory</span><span class=\"token punctuation\">(</span>devExt<span class=\"token operator\">-></span>DiskImage<span class=\"token punctuation\">,</span>devExt<span class=\"token operator\">-></span>DiskRegInfo<span class=\"token punctuation\">.</span>DiskSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>接下来格式化函数开始初始化一个保存在磁盘设备的设备扩展中的数据结构 <code>DiskGeometry</code> 。从名字就可以看出，这个数据结构保存了很多和磁盘物理结构相关的信息，也就是前面所说的磁盘特性。</p>\n<p>这个数据结构是 WinDDK 所定义好的，几乎适用于所有的磁盘。看一下这个数据结构的定义。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> struce _DISK_GEOMETRY<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 有多少个柱面</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    LARGE_INTEGER Cylinders<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 磁盘介质的类型</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    MEDIA_TYPE MediaType<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 每个柱面有多少磁道，也就是有多少个盘片</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    ULONG TracksPerCylinder<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 每个磁道有多少扇区</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    ULONG SectorsPerTrack<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 每个扇区有多少字节</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    ULONG BytePerSector<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span>DISK_GEOMETRY<span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>PDISK_GEOMETRY<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这个数据结构被放在了磁盘设备的设备扩展中，在今后的很多场合中都作为磁盘的参数被访问。<br />\n接下来看看是如何初始化这个结构体的：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 每个扇区有 512 个字节</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>devExt<span class=\"token operator\">-></span>DiskGeometry<span class=\"token punctuation\">.</span>BytesPerSector <span class=\"token operator\">=</span> <span class=\"token number\">512</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 每个磁道有 32 个扇区</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>devExt<span class=\"token operator\">-></span>DiskGeometry<span class=\"token punctuation\">.</span>SectorsPerTrack <span class=\"token operator\">=</span> <span class=\"token number\">32</span><span class=\"token punctuation\">;</span>     </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 每个柱面有 2 个磁道</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>devExt<span class=\"token operator\">-></span>DiskGeometry<span class=\"token punctuation\">.</span>TracksPerCylinder <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>    </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 柱面数目有磁盘的总容量计算得到</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>devExt<span class=\"token operator\">-></span>DiskGeometry<span class=\"token punctuation\">.</span>Cylinders<span class=\"token punctuation\">.</span>QuadPart <span class=\"token operator\">=</span> devExt<span class=\"token operator\">-></span>DiskRegInfo<span class=\"token punctuation\">.</span>DiskSize <span class=\"token operator\">/</span> <span class=\"token number\">512</span> <span class=\"token operator\">/</span> <span class=\"token number\">32</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 磁盘的介质类型使我们自己定义的 RAMDISK_MEDIA_TYPE</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>devExt<span class=\"token operator\">-></span>DiskGeometry<span class=\"token punctuation\">.</span>MediaType <span class=\"token operator\">=</span> RAMDISK_MEDIA_TYPE<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>在初始化了磁盘的物理参数之后，这里初始化一个文件系统和磁盘相关的参数 ——<strong> 根目录入口点数</strong>，这个参数决定了根目录中能够存在多少个文件和子目录。还要初始化的还有每个簇由多少个扇区组成，这是根据用户指定的数目来初始化的。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 根据用户指定的值对用户的根目录项的数据进行初始化</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>rootDirEntries <span class=\"token operator\">=</span> devExt<span class=\"token operator\">-></span>DiskRegInfo<span class=\"token punctuation\">.</span>RootDirEntries<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 每个簇有多少扇区的初始化</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>sectorsPerCluster <span class=\"token operator\">=</span> devExt<span class=\"token operator\">-></span>DiskRegInfo<span class=\"token punctuation\">.</span>SectorsPerCluster<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 由于根目录入口点只是用 32 个字节，，但是最少占用一个扇区，这里为了充分利用空间，在用户指定的数目不合适时会修正这个数目，以使扇区空间得到充分的利用</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rootDirEntries <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span>DIR_ENTRIES_PER_SECTOR <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    rootDirEntries <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">(</span>rootDirEntries <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>DIR_ENTRIES_PER_SECTOR <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token operator\">~</span> <span class=\"token punctuation\">(</span>DIR_ENTRIES_PER_SECTOR <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在格式化函数的开头可以看到，  <code>bootSector</code>  指针直接指向了磁盘镜像的首地址，联系之前讲解过的磁盘和文件系统结构，通过之前的说明可以发现在磁盘镜像最前面存储的应该是这个分区的 DBR，也就是说 ，  <code>bootSector</code>  指针指向的是这个磁盘卷的 DBR。</p>\n<p>下面看一下 <code>bootSector</code>  结构体的实际数据结构，值得注意的是，这也是标准 DBR 的结构。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\"><span class=\"token function\">pack</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span>  <span class=\"token class-name\">_BOOT_SECTOR</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    UCHAR       bsJump<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>          <span class=\"token comment\">// x86 jmp instruction, checked by FS</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    CCHAR       bsOemName<span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">// OEM name of formatter</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    USHORT      bsBytesPerSec<span class=\"token punctuation\">;</span>      <span class=\"token comment\">// Bytes per Sector</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    UCHAR       bsSecPerClus<span class=\"token punctuation\">;</span>       <span class=\"token comment\">// Sectors per Cluster</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    USHORT      bsResSectors<span class=\"token punctuation\">;</span>       <span class=\"token comment\">// Reserved Sectors</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    UCHAR       bsFATs<span class=\"token punctuation\">;</span>             <span class=\"token comment\">// Number of FATs - we always use 1</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    USHORT      bsRootDirEnts<span class=\"token punctuation\">;</span>      <span class=\"token comment\">// Number of Root Dir Entries</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    USHORT      bsSectors<span class=\"token punctuation\">;</span>          <span class=\"token comment\">// Number of Sectors</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    UCHAR       bsMedia<span class=\"token punctuation\">;</span>            <span class=\"token comment\">// Media type - we use RAMDISK_MEDIA_TYPE</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    USHORT      bsFATsecs<span class=\"token punctuation\">;</span>          <span class=\"token comment\">// Number of FAT sectors</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    USHORT      bsSecPerTrack<span class=\"token punctuation\">;</span>      <span class=\"token comment\">// Sectors per Track - we use 32</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    USHORT      bsHeads<span class=\"token punctuation\">;</span>            <span class=\"token comment\">// Number of Heads - we use 2</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    ULONG       bsHiddenSecs<span class=\"token punctuation\">;</span>       <span class=\"token comment\">// Hidden Sectors - we set to 0</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    ULONG       bsHugeSectors<span class=\"token punctuation\">;</span>      <span class=\"token comment\">// Number of Sectors if > 32 MB size</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    UCHAR       bsDriveNumber<span class=\"token punctuation\">;</span>      <span class=\"token comment\">// Drive Number - not used</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    UCHAR       bsReserved1<span class=\"token punctuation\">;</span>        <span class=\"token comment\">// Reserved</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    UCHAR       bsBootSignature<span class=\"token punctuation\">;</span>    <span class=\"token comment\">// New Format Boot Signature - 0x29</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    ULONG       bsVolumeID<span class=\"token punctuation\">;</span>         <span class=\"token comment\">// VolumeID - set to 0x12345678</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    CCHAR       bsLabel<span class=\"token punctuation\">[</span><span class=\"token number\">11</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// Label - set to RamDisk</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    CCHAR       bsFileSystemType<span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// File System Type - FAT12 or FAT16</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    CCHAR       bsReserved2<span class=\"token punctuation\">[</span><span class=\"token number\">448</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// Reserved</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    UCHAR       bsSig2<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>          <span class=\"token comment\">// Originial Boot Signature - 0x55, 0xAA</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span>   BOOT_SECTOR<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>PBOOT_SECTOR<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>……</pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\"><span class=\"token function\">pack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span></span></pre></td></tr></table></figure><p>在谭文一书中对各个成员的中文解释为：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 跳转指令，跳转到 DBR 中的引导程序</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>UCHAR bsJump<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 该卷的 OEM 名称</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>CCHAR bsOemName<span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 每个扇区有多少字节</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>USHORT bsBytesPerSec<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 每个簇有多少扇区</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>UCHAR bsSecPerClus<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 保留扇区数据，指的是第一个 FAT 表开始之前的扇区数，也包括 DBR 本身</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>USHORT bsResSector<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 这个卷有多少个 FAT 表</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>USHORT bsFATs<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// 这个卷的根目录入口点有几个</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>USHORT bsRootEntrents<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">// 这个卷一共有多少个扇区，如果大于 65535 个扇区，则该字段为 0</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>USHORT bsSectors<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">// 这个卷的介质类型</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>UCHAR bsMedia<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">// 每个 FAT 表占用多少个扇区</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>USHORT bsFATsecs<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">// 每个磁道有多少个扇区</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>USHORT bsSecPerTrack<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">// 有多少个磁头</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>USHORT bsHeads<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\">// 有多少个隐藏扇区</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>ULONG bsHiddenSecs<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\">// 一个卷超过 65535 个扇区时，会使用这个字段来说明总扇区数</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>ULONG bsHugeSectors<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\">// 驱动器编号</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>UCHAR bsDriverNumber<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token comment\">// 保留字段</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>UCHAR bsReserved1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token comment\">// 磁盘扩展引导区标签，Windows 要求这个标签为 0x28 或者 0x29</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>UCHAR bsBootSignature<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token comment\">// 磁盘卷 ID</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>ULONG bsVolumeID<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token comment\">// 磁盘卷标</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>CCHAR bsLabel<span class=\"token punctuation\">[</span><span class=\"token number\">11</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token comment\">// 磁盘上的文件系统类型</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>CCHAR bsFileSystemType<span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token comment\">// 保留字段</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>CCHAR bsReserved2<span class=\"token punctuation\">[</span><span class=\"token number\">448</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token comment\">//DBR 结束签名</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>UCHAR bsSig2<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>了解了这个结构体后就要了解如何初始化这个结构体了。初始化这个数据结构是通过向磁盘镜像的起始位置填充指定数据来完成的。</p>\n<p>在下面的程序段中可以看到，对于 FAT12 和 FAT16 相同的结构体成员是如何初始化的。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// We need to have the 0xeb and 0x90 since this is one of the checks the file system recognizer uses</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 我们需要 0xeb 和 0x90，因为这是文件系统识别器使用的检查之一</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 对一开始的跳转指令成员填入硬编码，这是 windows 系统指定的</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>bootSector<span class=\"token operator\">-></span>bsJump<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0xeb</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>bootSector<span class=\"token operator\">-></span>bsJump<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x3c</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>bootSector<span class=\"token operator\">-></span>bsJump<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x90</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// Set OemName to \"RajuRam \"</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// NOTE: Fill all 8 characters, eg. sizeof(bootSector->bsOemName);</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// 注：填写全部 8 个字符，</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// OEM 名称成员，本驱动的作者填入了他的名字，我们可以填写任意名称</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>bootSector<span class=\"token operator\">-></span>bsOemName<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'R'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>bootSector<span class=\"token operator\">-></span>bsOemName<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>bootSector<span class=\"token operator\">-></span>bsOemName<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'j'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>bootSector<span class=\"token operator\">-></span>bsOemName<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'u'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>bootSector<span class=\"token operator\">-></span>bsOemName<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'R'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>bootSector<span class=\"token operator\">-></span>bsOemName<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>bootSector<span class=\"token operator\">-></span>bsOemName<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'m'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>bootSector<span class=\"token operator\">-></span>bsOemName<span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">' '</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">// 每个扇区有多少个字节，这个成员的数值直接取自之前初始化的磁盘信息数据结构</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>bootSector<span class=\"token operator\">-></span>bsBytesPerSec <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>SHORT<span class=\"token punctuation\">)</span>devExt<span class=\"token operator\">-></span>DiskGeometry<span class=\"token punctuation\">.</span>BytesPerSector<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">// 这个卷只有一个保留扇区，既 DBR 本身</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>bootSector<span class=\"token operator\">-></span>bsResSectors  <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">// 和正常的卷不同，为了节省空间，我们只放一份 FAT 表，而不是通常的两份</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>bootSector<span class=\"token operator\">-></span>bsFATs        <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token comment\">// 根目录入口点数由之前的计算得知</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>bootSector<span class=\"token operator\">-></span>bsRootDirEnts <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>USHORT<span class=\"token punctuation\">)</span>rootDirEntries<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token comment\">// 这个磁盘的总扇区书有磁盘总大小和每个扇区的字节数计算得到</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>bootSector<span class=\"token operator\">-></span>bsSectors     <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>USHORT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>devExt<span class=\"token operator\">-></span>DiskRegInfo<span class=\"token punctuation\">.</span>DiskSize <span class=\"token operator\">/</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                                      devExt<span class=\"token operator\">-></span>DiskGeometry<span class=\"token punctuation\">.</span>BytesPerSector<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token comment\">// 这个磁盘的介质类型由之前初始化的磁盘信息得到</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>bootSector<span class=\"token operator\">-></span>bsMedia       <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>UCHAR<span class=\"token punctuation\">)</span>devExt<span class=\"token operator\">-></span>DiskGeometry<span class=\"token punctuation\">.</span>MediaType<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token comment\">// 每个簇有多少个扇区由之前的计算初始化得到</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>bootSector<span class=\"token operator\">-></span>bsSecPerClus  <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>UCHAR<span class=\"token punctuation\">)</span>sectorsPerCluster<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>接下来开始计算这个磁盘 FAT 表所占用的空间。</p>\n<p>FAT 表里面存储的是一个将很多簇串联起来的链表，那么 FAT 表的表项数量就是磁盘上实际用来存储数据的簇的数量，而这个簇的数量又是由磁盘总扇区数减去用来存储其他数据的扇区数之后除以每个簇的扇区数得到的。</p>\n<p>下面看一下在实际程序中是如何计算的。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// FAT 表的表项数目是总扇区数减去保留的扇区数，再减去根目录入口点占据的扇区数，再除以每簇占据的扇区数得到簇的数量</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 最后 + 2 因为 FAT 表的前两项是保留的</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>fatEntries <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token punctuation\">(</span>bootSector<span class=\"token operator\">-></span>bsSectors <span class=\"token operator\">-</span> bootSector<span class=\"token operator\">-></span>bsResSectors <span class=\"token operator\">-</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            bootSector<span class=\"token operator\">-></span>bsRootDirEnts <span class=\"token operator\">/</span> DIR_ENTRIES_PER_SECTOR<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                bootSector<span class=\"token operator\">-></span>bsSecPerClus <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong>根据这个表项数量首先可以决定到底使用 FAT12 还是 FAT16 文件系统</strong>。<br />\n在决定了使用哪种文件系统之后，就可以算出每个 FAT 表的表项需要占用多少空间，进而算出整个 FAT 表所占用的扇区数。在实际的计算过程中还需要做一些小修正，这是因为在考虑了 FAT 表占用的空间之后，总的 FAT 表的表项数目可能有一些小出入。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 如果 FAT 表的表项数大于 4087，就使用 FAT16 文件系统，反之使用 FAT12 文件系统</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fatEntries <span class=\"token operator\">></span> <span class=\"token number\">4087</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        fatType <span class=\"token operator\">=</span>  <span class=\"token number\">16</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">// 做修正</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        fatSectorCnt <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>fatEntries <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">511</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">512</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        fatEntries   <span class=\"token operator\">=</span> fatEntries <span class=\"token operator\">+</span> fatSectorCnt<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        fatSectorCnt <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>fatEntries <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">511</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">512</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        fatType <span class=\"token operator\">=</span>  <span class=\"token number\">12</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">// 做修正</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        fatSectorCnt <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>fatEntries <span class=\"token operator\">*</span> <span class=\"token number\">3</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">511</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">512</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        fatEntries   <span class=\"token operator\">=</span> fatEntries <span class=\"token operator\">+</span> fatSectorCnt<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        fatSectorCnt <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>fatEntries <span class=\"token operator\">*</span> <span class=\"token number\">3</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">511</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">512</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在上面的计算过程之后获得了文件系统的类型和 FAT 表需要占用的扇区数目。</p>\n<p>下面可以接着初始化 DBR 的数据结构了。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 初始化 FAT 表所占用的分区数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>bootSector<span class=\"token operator\">-></span>bsFATsecs       <span class=\"token operator\">=</span> fatSectorCnt<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 初始化 DBR 中每个磁道的扇区数</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>bootSector<span class=\"token operator\">-></span>bsSecPerTrack   <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>USHORT<span class=\"token punctuation\">)</span>devExt<span class=\"token operator\">-></span>DiskGeometry<span class=\"token punctuation\">.</span>SectorsPerTrack<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 初始化磁头数，也就是每个柱面的磁道数</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>bootSector<span class=\"token operator\">-></span>bsHeads         <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>USHORT<span class=\"token punctuation\">)</span>devExt<span class=\"token operator\">-></span>DiskGeometry<span class=\"token punctuation\">.</span>TracksPerCylinder<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 初始化启动签名，Windows 要求是 0x28 或 0x29</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>bootSector<span class=\"token operator\">-></span>bsBootSignature <span class=\"token operator\">=</span> <span class=\"token number\">0x29</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 随便填写一个卷 ID</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>bootSector<span class=\"token operator\">-></span>bsVolumeID      <span class=\"token operator\">=</span> <span class=\"token number\">0x12345678</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// 将卷标设置为 “RamDisk”</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>bootSector<span class=\"token operator\">-></span>bsLabel<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>  <span class=\"token operator\">=</span> <span class=\"token string\">'R'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>bootSector<span class=\"token operator\">-></span>bsLabel<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>  <span class=\"token operator\">=</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>bootSector<span class=\"token operator\">-></span>bsLabel<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>  <span class=\"token operator\">=</span> <span class=\"token string\">'m'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>bootSector<span class=\"token operator\">-></span>bsLabel<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span>  <span class=\"token operator\">=</span> <span class=\"token string\">'D'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>bootSector<span class=\"token operator\">-></span>bsLabel<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span>  <span class=\"token operator\">=</span> <span class=\"token string\">'i'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>bootSector<span class=\"token operator\">-></span>bsLabel<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span>  <span class=\"token operator\">=</span> <span class=\"token string\">'s'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>bootSector<span class=\"token operator\">-></span>bsLabel<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span>  <span class=\"token operator\">=</span> <span class=\"token string\">'k'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>bootSector<span class=\"token operator\">-></span>bsLabel<span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span>  <span class=\"token operator\">=</span> <span class=\"token string\">' '</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>bootSector<span class=\"token operator\">-></span>bsLabel<span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span>  <span class=\"token operator\">=</span> <span class=\"token string\">' '</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>bootSector<span class=\"token operator\">-></span>bsLabel<span class=\"token punctuation\">[</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span>  <span class=\"token operator\">=</span> <span class=\"token string\">' '</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>bootSector<span class=\"token operator\">-></span>bsLabel<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">' '</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\">// 根据我们之前计算得出的结果来悬着到底是 FAT12 还是 FAT16 文件系统</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>bootSector<span class=\"token operator\">-></span>bsFileSystemType<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'F'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>bootSector<span class=\"token operator\">-></span>bsFileSystemType<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>bootSector<span class=\"token operator\">-></span>bsFileSystemType<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'T'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>bootSector<span class=\"token operator\">-></span>bsFileSystemType<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'1'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>bootSector<span class=\"token operator\">-></span>bsFileSystemType<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'?'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>bootSector<span class=\"token operator\">-></span>bsFileSystemType<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">' '</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>bootSector<span class=\"token operator\">-></span>bsFileSystemType<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">' '</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>bootSector<span class=\"token operator\">-></span>bsFileSystemType<span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">' '</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>bootSector<span class=\"token operator\">-></span>bsFileSystemType<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span> fatType <span class=\"token operator\">==</span> <span class=\"token number\">16</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token string\">'6'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'2'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token comment\">// 签署 DBR 最后的标志，0x55AA</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>bootSector<span class=\"token operator\">-></span>bsSig2<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x55</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>bootSector<span class=\"token operator\">-></span>bsSig2<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0xAA</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>DBR 初始化完毕。</p>\n<p>在 FAT12/16 文件系统中，DBR 之后紧接着的是 FAT 表，对于 FAT 表的初始化很简单，只需要在 FAT 表的第 1 个表项内填写介质标识即可。同时要注意的是，FAT12 和 FAT16 的表项长度不同</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 定位到 FAT 表的起始点，这里的定位方式是利用了 DBR 只有一个扇区这一条件</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>firstFatSector    <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PUCHAR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>bootSector <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 填写介质类型标识</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>firstFatSector<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>UCHAR<span class=\"token punctuation\">)</span>devExt<span class=\"token operator\">-></span>DiskGeometry<span class=\"token punctuation\">.</span>MediaType<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>firstFatSector<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0xFF</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>firstFatSector<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0xFF</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 注意如果是 FAT16，那么每个 FAT 表的表项是 4 个字节</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fatType <span class=\"token operator\">==</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    firstFatSector<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0xFF</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在 FAT 表之后，就是根目录入口点了。</p>\n<p>在 FAT12/16 文件系统中，根目录入口点的数据结构定义如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\"><span class=\"token function\">pack</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span>  <span class=\"token class-name\">_DIR_ENTRY</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token comment\">// 文件名</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  UCHAR       deName<span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>          <span class=\"token comment\">// File Name</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token comment\">// 文件扩展名</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  UCHAR       deExtension<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// File Extension</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token comment\">// 文件属性</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  UCHAR       deAttributes<span class=\"token punctuation\">;</span>       <span class=\"token comment\">// File Attributes</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token comment\">// 系统保留</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  UCHAR       deReserved<span class=\"token punctuation\">;</span>         <span class=\"token comment\">// Reserved</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token comment\">// 文件建立的时间</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  USHORT      deTime<span class=\"token punctuation\">;</span>             <span class=\"token comment\">// File Time</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token comment\">// 文件建立的日期</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  USHORT      deDate<span class=\"token punctuation\">;</span>             <span class=\"token comment\">// File Date</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token comment\">// 文件的第一个簇的编号</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  USHORT      deStartCluster<span class=\"token punctuation\">;</span>     <span class=\"token comment\">// First Cluster of file</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token comment\">// 文件大小</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  ULONG       deFileSize<span class=\"token punctuation\">;</span>         <span class=\"token comment\">// File Length</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span>DIR_ENTRY<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>PDIR_ENTRY<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\"><span class=\"token function\">pack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span></span></pre></td></tr></table></figure><p>在 FAT12/16 文件系统中，通常第一个根目录入口点存储了一个最终被作为卷标的目录入口点，这里将其初始化，在这之后，这个磁盘卷就算是被格式化完毕了，也就可以拿来使用了。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 由于紧跟着 FAT 表，所以根目录入口点的表的起始位置很容易定位</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>rootDir <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PDIR_ENTRY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>bootSector <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">+</span> fatSectorCnt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 初始化卷标</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>rootDir<span class=\"token operator\">-></span>deName<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'M'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>rootDir<span class=\"token operator\">-></span>deName<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'S'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>rootDir<span class=\"token operator\">-></span>deName<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'-'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>rootDir<span class=\"token operator\">-></span>deName<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'R'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>rootDir<span class=\"token operator\">-></span>deName<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>rootDir<span class=\"token operator\">-></span>deName<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'M'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>rootDir<span class=\"token operator\">-></span>deName<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'D'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>rootDir<span class=\"token operator\">-></span>deName<span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'R'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">// Set device extension name to \"IVE\"</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">// NOTE: Fill all 3 characters, eg. sizeof(rootDir->deExtension);</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>rootDir<span class=\"token operator\">-></span>deExtension<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'I'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>rootDir<span class=\"token operator\">-></span>deExtension<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'V'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>rootDir<span class=\"token operator\">-></span>deExtension<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'E'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">// 将这个入口点的属性设置为卷标属性</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>rootDir<span class=\"token operator\">-></span>deAttributes <span class=\"token operator\">=</span> DIR_ATTR_VOLUME<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"驱动中的请求处理\"><a class=\"anchor\" href=\"#驱动中的请求处理\">#</a> 驱动中的请求处理</h2>\n<p><strong>WDF 驱动框架会将所有发往之前建立的磁盘设备的请求都排队放入已经建立的队列中，而在放入队列后绝大多数请求都得到了合适的处理</strong>，由于我们对读 / 写和 DeviceIoControl 请求注册了回调函数，所以队列会将这些请求交给注册的回调函数去处理。</p>\n<p>回调函数在收到请求之后，只能执行下面列举的 4 种操作中的一种，但是不能够忽略这个请求。</p>\n<p>这 4 种操作如下。</p>\n<ol>\n<li>重新排队。回调函数可以把这个请求放到另一个队列里去等待其他的处理函数处理。</li>\n<li>完成请求。回调函数可以对这个请求做自己的一些处理，并且在处理完毕之后完成它。这也是功能性驱动最常见的一种处理方式。</li>\n<li>撤销请求。回调函数可以要求撤销这个请求。</li>\n<li>转发请求。回调函数可以把这个请求转发给其他设备。</li>\n</ol>\n<p>​在 Windows 系统当中，设备之间是一种层叠的关系，在这个磁盘设备之上还会有文件系统设备，一般应用程序的访问都应该是访问文件系统设备，而文件系统设备会负责做文件系统方面的维护。比如对 FAT 表的维护、对文件的读写等，而这些操作最终都会转换成对磁盘的读写发往磁盘设备。</p>\n<h3 id=\"读写请求\"><a class=\"anchor\" href=\"#读写请求\">#</a> 读 / 写请求</h3>\n<p>读 / 写请求的回调函数原型如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>VOID</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">RamDiskEvtIoRead</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    IN WDFQUEUE Queue<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    IN WDFREQUEST Request<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    IN size_t Length</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>VOID</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token function\">RamDiskEvtIoWrite</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    IN WDFQUEUE Queue<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    IN WDFREQUEST Request<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    IN size_t Length</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>这两个函数没有返回值。<br />\n它们的第一个参数是一个队列对象，这个对象说明了这个请求的来源；<br />\n第二个参数则是具体的请求；<br />\n最后一个参数是<strong>读 / 写请求的回调函数所特有的</strong>，用来说明需要读或者写多少个字节的内容</p>\n<p><em>之前建立队列时曾经将磁盘设备的设备扩展和队列的扩展联系起来</em>，在这里就可以看出它的用处 ——<strong> 我们可以轻易地在这些回调函数里通过队列对象获取到磁盘设备的设备扩展，进而获取到所有的相关参数</strong>。</p>\n<p><em>对于一个磁盘设备来说，读 / 写请求就是要读 / 写磁盘上的某一段区域的内容，这个区域由起始点（offset）和长度（length）来划定，长度已经由回调函数的参数提供，而起始点就要通过 WDF 驱动框架提供的各种函数在第二个参数 —— 请求参数中获取了。读 / 写请求还有另外一个重要的参数就是缓冲区，它由系统提供，用来存放读出来的数据或者需要写入的数据，这个参数也需要从请求参数中获取。</em></p>\n<p>在获取了所有必需的参数之后，作为以内存为介质的模拟磁盘设备来说，只需要简单地将内存镜像中适当地点、适当长度的数据拷贝到读缓冲区中，或者将写缓冲区中的数据拷贝到内存镜像中即可，这也就是作为一个内存盘来说，针对于标准磁盘读 / 写请求的特殊处理。</p>\n<p>在真实应用中，在磁盘设备之上的文件系统设备会根据 FAT 表等数据结构，将对文件的访问转换成对磁盘设备的访问，而磁盘对于上层来说，就是一个起始位置为 0、总长度为磁盘卷总大小的扁平的寻址空间，任何由文件系统转换过来的访问都应该在这个空间之内。</p>\n<p>下面看一下读请求的具体处理流程：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>VOID</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">RamDiskEvtIoRead</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    IN WDFQUEUE Queue<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    IN WDFREQUEST Request<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    IN size_t Length</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token comment\">// 从队列的扩展中获取到对应的磁盘设备的扩展</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  PDEVICE_EXTENSION      devExt <span class=\"token operator\">=</span> <span class=\"token function\">QueueGetExtension</span><span class=\"token punctuation\">(</span>Queue<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>DeviceExtension<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token comment\">// 用于保存各种函数返回值的状态变量</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  NTSTATUS               Status <span class=\"token operator\">=</span> STATUS_INVALID_PARAMETER<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token comment\">// 用于获取请求参数的变量</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  WDF_REQUEST_PARAMETERS Parameters<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token comment\">// 用于获取读请求起始地址的变量，这是一个 64 位的数据</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  LARGE_INTEGER          ByteOffset<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token comment\">// 这是一个用于获取缓冲区的内存句柄</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  WDFMEMORY              hMemory<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token comment\">// 初始化参数变量，为之后从请求参数中获取各种信息做准备</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token function\">WDF_REQUEST_PARAMETERS_INIT</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>Parameters<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token comment\">// 从请求参数中获取信息</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token function\">WdfRequestGetParameters</span><span class=\"token punctuation\">(</span>Request<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>Parameters<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token comment\">// 将请求参数中读的起始位置取出来</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  ByteOffset<span class=\"token punctuation\">.</span>QuadPart <span class=\"token operator\">=</span> Parameters<span class=\"token punctuation\">.</span>Parameters<span class=\"token punctuation\">.</span>Read<span class=\"token punctuation\">.</span>DeviceOffset<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token comment\">// 这里是自己实现的一个参数检查函数。由于读取的范围不能超过磁盘镜像的大小</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token comment\">// 并且必须是扇区对齐，所以这里需要有一个参数检查。</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">RamDiskCheckParameters</span><span class=\"token punctuation\">(</span>devExt<span class=\"token punctuation\">,</span> ByteOffset<span class=\"token punctuation\">,</span> Length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>      <span class=\"token comment\">// 从请求参数中获取读缓冲区的内存句柄</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>      Status <span class=\"token operator\">=</span> <span class=\"token function\">WdfRequestRetrieveOutputMemory</span><span class=\"token punctuation\">(</span>Request<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>hMemory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">NT_SUCCESS</span><span class=\"token punctuation\">(</span>Status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>          <span class=\"token comment\">// 根据之前获取到的读参数进行内存拷贝，填写读请求的缓存区从而完成读请求的操作</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>          Status <span class=\"token operator\">=</span> <span class=\"token function\">WdfMemoryCopyFromBuffer</span><span class=\"token punctuation\">(</span>hMemory<span class=\"token punctuation\">,</span> <span class=\"token comment\">// Destination</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                                          <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// Offset into the destination</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                                          devExt<span class=\"token operator\">-></span>DiskImage <span class=\"token operator\">+</span> ByteOffset<span class=\"token punctuation\">.</span>LowPart<span class=\"token punctuation\">,</span> <span class=\"token comment\">// source</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                                          Length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>  <span class=\"token comment\">// 结束这个请求，这里要注意的是，需要将读取的长度作为返回的信息一并返回</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>  <span class=\"token function\">WdfRequestCompleteWithInformation</span><span class=\"token punctuation\">(</span>Request<span class=\"token punctuation\">,</span> Status<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>ULONG_PTR<span class=\"token punctuation\">)</span>Length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>写请求与读请求类似如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>VOID</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">RamDiskEvtIoWrite</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    IN WDFQUEUE Queue<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    IN WDFREQUEST Request<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    IN size_t Length</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    PDEVICE_EXTENSION      devExt <span class=\"token operator\">=</span> <span class=\"token function\">QueueGetExtension</span><span class=\"token punctuation\">(</span>Queue<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>DeviceExtension<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    NTSTATUS               Status <span class=\"token operator\">=</span> STATUS_INVALID_PARAMETER<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    WDF_REQUEST_PARAMETERS Parameters<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    LARGE_INTEGER          ByteOffset<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    WDFMEMORY              hMemory<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token function\">WDF_REQUEST_PARAMETERS_INIT</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>Parameters<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token function\">WdfRequestGetParameters</span><span class=\"token punctuation\">(</span>Request<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>Parameters<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    ByteOffset<span class=\"token punctuation\">.</span>QuadPart <span class=\"token operator\">=</span> Parameters<span class=\"token punctuation\">.</span>Parameters<span class=\"token punctuation\">.</span>Write<span class=\"token punctuation\">.</span>DeviceOffset<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">RamDiskCheckParameters</span><span class=\"token punctuation\">(</span>devExt<span class=\"token punctuation\">,</span> ByteOffset<span class=\"token punctuation\">,</span> Length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        Status <span class=\"token operator\">=</span> <span class=\"token function\">WdfRequestRetrieveInputMemory</span><span class=\"token punctuation\">(</span>Request<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>hMemory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">NT_SUCCESS</span><span class=\"token punctuation\">(</span>Status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            Status <span class=\"token operator\">=</span> <span class=\"token function\">WdfMemoryCopyToBuffer</span><span class=\"token punctuation\">(</span>hMemory<span class=\"token punctuation\">,</span> <span class=\"token comment\">// Source</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                                    <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// offset in Source memory where the copy has to start</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                                    devExt<span class=\"token operator\">-></span>DiskImage <span class=\"token operator\">+</span> ByteOffset<span class=\"token punctuation\">.</span>LowPart<span class=\"token punctuation\">,</span> <span class=\"token comment\">// destination</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                                    Length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token function\">WdfRequestCompleteWithInformation</span><span class=\"token punctuation\">(</span>Request<span class=\"token punctuation\">,</span> Status<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>ULONG_PTR<span class=\"token punctuation\">)</span>Length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>其中的参数检查函数如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>BOOLEAN</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">RamDiskCheckParameters</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    IN PDEVICE_EXTENSION devExt<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    IN LARGE_INTEGER ByteOffset<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    IN size_t Length</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// Check for invalid parameters.  It is an error for the starting offset</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// + length to go past the end of the buffer, or for the length to</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// not be a proper multiple of the sector size.</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">// Others are possible, but we don't check them since we trust the</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">// file system.</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> devExt<span class=\"token operator\">-></span>DiskRegInfo<span class=\"token punctuation\">.</span>DiskSize <span class=\"token operator\">&lt;</span> Length <span class=\"token operator\">||</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        ByteOffset<span class=\"token punctuation\">.</span>QuadPart <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> <span class=\"token comment\">// QuadPart is signed so check for negative values</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ULONGLONG<span class=\"token punctuation\">)</span>ByteOffset<span class=\"token punctuation\">.</span>QuadPart <span class=\"token operator\">></span> <span class=\"token punctuation\">(</span>devExt<span class=\"token operator\">-></span>DiskRegInfo<span class=\"token punctuation\">.</span>DiskSize <span class=\"token operator\">-</span> Length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token punctuation\">(</span>Length <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span>devExt<span class=\"token operator\">-></span>DiskGeometry<span class=\"token punctuation\">.</span>BytesPerSector <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token comment\">// Do not give an I/O boost for parameter errors.</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token function\">KdPrint</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token string\">\"Error invalid parameter\\n\"</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token string\">\"ByteOffset: %x\\n\"</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token string\">\"Length: %d\\n\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            ByteOffset<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            Length</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>         <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token keyword\">return</span> FALSE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">return</span> TRUE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"deviceiocontrol请求\"><a class=\"anchor\" href=\"#deviceiocontrol请求\">#</a> DeviceIoControl 请求</h3>\n<p>在正常情况下，文件系统会发给本驱动所建立的磁盘设备一些读 / 写请求，而实际上除了读 / 写请求，还会有一些控制方面的请求，这种请求被统称为 DeviceIoControl 请求。</p>\n<p>一个标准的磁盘卷设备，需要支持数量庞大的 DeviceIoControl 请求，但是对于这个小例子来说，仅仅支持最小的能够保证正常工作的 DeviceIoControl 请求就已经足够了。</p>\n<p>下面来看看 Ramdisk 驱动是如何处理 DeviceIoControl 请求的。</p>\n<p>首先是  <code>DeviceIoControl</code>  请求的处理函数原型:</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>VOID</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">RamDiskEvtIoDeviceControl</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    IN WDFQUEUE     Queue<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    IN WDFREQUEST   Request<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    IN size_t       OutputBufferLength<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    IN size_t       InputBufferLength<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    IN ULONG        IoControlCode</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li>这个回调函数没有返回值。</li>\n<li>第一个参数同样是请求来自于哪个队列；</li>\n<li>第二个参数是请求参数；</li>\n<li>第三个和第四个参数是作为 DeviceIoControl 回调函数所特有的参数，即输出缓冲区长度和输入缓冲区长度。由于 DeviceIoControl 请求通常是伴随着一些请求的相关信息而传入的，填满了请求到的信息传出，所以这里需要这两个缓冲区的长度；</li>\n<li>最后一个参数是请求的功能号，即说明这是一个什么样的 DeviceIoControl 请求。</li>\n</ul>\n<p>接下来看看这些请求是如何被处理的。</p>\n<p>DeviceIoControl 请求有很多种，针对每类不同的设备具有不同的含义，其中有些是必须要处理的，不处理这个设备就有可能不能启动，或者不能正常工作；还有一些在最简单的情况下是不需要处理的，不处理的后果最多会导致某些参数显示不正确等小错误发生。</p>\n<p>Ramdisk 驱动只需要处理几个 DeviceIoControl 请求即可，这几个请求是由相关文档的描述和开发人员的长期经验总结得出的。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>VOID</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">RamDiskEvtIoDeviceControl</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    IN WDFQUEUE Queue<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    IN WDFREQUEST Request<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    IN size_t OutputBufferLength<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    IN size_t InputBufferLength<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    IN ULONG IoControlCode</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token comment\">// 初始化返回状态为非法的设备请求，这样在其他无关紧要的、不需要处理的 DeviceIoControl 请求到来时，可以直接返回这个状态</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    NTSTATUS          Status <span class=\"token operator\">=</span> STATUS_INVALID_DEVICE_REQUEST<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 用来存放返回的 DeviceIoControl 所要求的的数据长度</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    ULONG_PTR         information <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">// 中间变量</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    size_t            bufSize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">// 和读 / 写回调函数相同，也通过队列的扩展来获取设备的扩展</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    PDEVICE_EXTENSION devExt <span class=\"token operator\">=</span> <span class=\"token function\">QueueGetExtension</span><span class=\"token punctuation\">(</span>Queue<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>DeviceExtension<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">// 由于我们对发过来的请求的长度很有信心（因为是 Windows 标准请求），所以这不需要输入缓冲区和输出缓冲区</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token function\">UNREFERENCED_PARAMETER</span><span class=\"token punctuation\">(</span>OutputBufferLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token function\">UNREFERENCED_PARAMETER</span><span class=\"token punctuation\">(</span>InputBufferLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token comment\">// 开始判断是哪个 DeviceIoControl 请求</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>IoControlCode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token comment\">// 这是一个获取当前分区信息的 DeviceIoControl 请求，需要处理</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">case</span> IOCTL_DISK_GET_PARTITION_INFO<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token comment\">// 首先声明一个输出缓冲区的指针</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            PPARTITION_INFORMATION outputBuffer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token comment\">// 由于这个 DeviceIoControl 请求所需的信息大部分是从 DBR 中获取的，所以需要一个指向 DBR 的指针</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            PBOOT_SECTOR bootSector <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PBOOT_SECTOR<span class=\"token punctuation\">)</span> devExt<span class=\"token operator\">-></span>DiskImage<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token comment\">// 这是将要返回的信息的长度，它会被上层发出 DeviceIoControl 请求的设备收到</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            information <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>PARTITION_INFORMATION<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token comment\">// 通过框架函数来获取这个 DeviceIoControl 请求所携带的输出缓冲区</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            Status <span class=\"token operator\">=</span> <span class=\"token function\">WdfRequestRetrieveOutputBuffer</span><span class=\"token punctuation\">(</span>Request<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>PARTITION_INFORMATION<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>outputBuffer<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>bufSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token comment\">// 如果获取缓冲区成功，将 DBR 中的相关信息填入缓冲区</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">NT_SUCCESS</span><span class=\"token punctuation\">(</span>Status<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                outputBuffer<span class=\"token operator\">-></span>PartitionType <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                    <span class=\"token punctuation\">(</span>bootSector<span class=\"token operator\">-></span>bsFileSystemType<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'6'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> PARTITION_FAT_16 <span class=\"token operator\">:</span> PARTITION_FAT_12<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                <span class=\"token comment\">// 还需要根据这个驱动的现实情况来 “编造” 一些数据</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                outputBuffer<span class=\"token operator\">-></span>BootIndicator       <span class=\"token operator\">=</span> FALSE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                outputBuffer<span class=\"token operator\">-></span>RecognizedPartition <span class=\"token operator\">=</span> TRUE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                outputBuffer<span class=\"token operator\">-></span>RewritePartition    <span class=\"token operator\">=</span> FALSE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                outputBuffer<span class=\"token operator\">-></span>StartingOffset<span class=\"token punctuation\">.</span>QuadPart <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                outputBuffer<span class=\"token operator\">-></span>PartitionLength<span class=\"token punctuation\">.</span>QuadPart <span class=\"token operator\">=</span> devExt<span class=\"token operator\">-></span>DiskRegInfo<span class=\"token punctuation\">.</span>DiskSize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                outputBuffer<span class=\"token operator\">-></span>HiddenSectors       <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>ULONG<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1L</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                outputBuffer<span class=\"token operator\">-></span>PartitionNumber     <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>ULONG<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1L</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                <span class=\"token comment\">// 成功，修改返回状态</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                Status <span class=\"token operator\">=</span> STATUS_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token keyword\">case</span> IOCTL_DISK_GET_DRIVE_GEOMETRY<span class=\"token operator\">:</span>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>            <span class=\"token comment\">// 首先声明一个输出缓冲区</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>            PDISK_GEOMETRY outputBuffer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>            <span class=\"token comment\">// 这是将要返回的信息的长度，它会被上层发出 DeviceIoControl 请求的设备接收到</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>            information <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>DISK_GEOMETRY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>            <span class=\"token comment\">// 通过框架函数来获取这个 DeviceIoControl 请求所携带的输出缓冲区</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>            Status <span class=\"token operator\">=</span> <span class=\"token function\">WdfRequestRetrieveOutputBuffer</span><span class=\"token punctuation\">(</span>Request<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>DISK_GEOMETRY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>outputBuffer<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>bufSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>            <span class=\"token comment\">// 如果获取缓冲区成功，将相关信息填入缓冲区</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">NT_SUCCESS</span><span class=\"token punctuation\">(</span>Status<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>                <span class=\"token comment\">// 这里实际上就是填入之前初始化好的磁盘的几何信息</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>                <span class=\"token function\">RtlCopyMemory</span><span class=\"token punctuation\">(</span>outputBuffer<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span>devExt<span class=\"token operator\">-></span>DiskGeometry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>DISK_GEOMETRY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>                <span class=\"token comment\">// 修改返回状态</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>                Status <span class=\"token operator\">=</span> STATUS_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    <span class=\"token comment\">// 对于这两个 DeviceIoControl 请求，直接返回成功，因为这两个请求是不需要其他信息的</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    <span class=\"token keyword\">case</span> IOCTL_DISK_CHECK_VERIFY<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    <span class=\"token keyword\">case</span> IOCTL_DISK_IS_WRITABLE<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>        <span class=\"token comment\">// 修改返回状态</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>        Status <span class=\"token operator\">=</span> STATUS_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>    <span class=\"token comment\">// 结束这个 DeviceIoControl 请求，需要将读取的长度作为返回信息一并返回</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    <span class=\"token function\">WdfRequestCompleteWithInformation</span><span class=\"token punctuation\">(</span>Request<span class=\"token punctuation\">,</span> Status<span class=\"token punctuation\">,</span> information<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>至此结束。</p>\n<h2 id=\"ramdisk的编译与安装\"><a class=\"anchor\" href=\"#ramdisk的编译与安装\">#</a> Ramdisk 的编译与安装</h2>\n<h3 id=\"编译\"><a class=\"anchor\" href=\"#编译\">#</a> 编译</h3>\n<p>pass</p>\n<h3 id=\"安装\"><a class=\"anchor\" href=\"#安装\">#</a> 安装</h3>\n<p>在编译完成之后，生成的文件是 WdfRamdisk.sys 和 ramdisk.inf。前者是驱动的二进制编译结果，后者则是用于安装的信息文件。<br />\n为了正常安装这个驱动，还需要一个小工具，它在 “WDK 安装目录” <code>\\redist\\wdf\\x86</code>  下，叫作 <code>WdfCoInstaller01007.dll</code> 。这个动态链接库文件是 WDF 驱动框架在安装时的一个必要文件，用于安装驱动框架本身的相关内容。</p>\n<p>在准备好了这三个文件之后，读者可以将这三个文件拷贝到要安装的机器的同一个目录中。在 “控制面板” 中找到 “添加硬件” 这一项，然后选择 “添加新的硬件设备”“安装我手动从列表选择的硬件（高级）”“显示所有设备”，单击 “从磁盘安装”，选择 ramdisk.inf。接着一直点击 Next”，这样驱动就安装完毕了，在重启系统之后，就会发现 “我的电脑” 中多出了一个盘，名为 RAMDISK。</p>\n<h3 id=\"对安装的深入探究\"><a class=\"anchor\" href=\"#对安装的深入探究\">#</a> 对安装的深入探究</h3>\n<p>那么安装时到底做了什么事情使得这个驱动可以在每次启动时工作起来呢？下面就来一探究竟。</p>\n<p>安装的过程都来自于 <code>ramdisk.inf</code>  的控制。 <code>ramdisk.inf</code>  文件是随着编译产生的，编译器在获取到了当前编译的平台、目标平台等信息之后（这些信息由编译环境提供），会将  <code>RAMDISK</code>  程序目录下的 <code>ramdisk.inx</code>  文件中的一些变量加以赋值，最终生成了适合于相应目标平台的 <code>ramdisk.inf</code>  文件。当然，仅仅有 <code>ramdisk.inf</code>  文件还是不够的，这里还使用了 Windows 系统自带的添加硬件向导来完成安装。在这里不需要搞清楚添加硬件向导到底在读入了这个 <code>ramdisk.inf</code>  之后做了哪些操作，这些操作必将是很复杂的，而且牵扯到过多的其他方面内容，读者只需要从结果来看看安装过程最终在系统中留下了什么即可。</p>\n<p>首先可以发现 <code>WdfRamdisk.sys</code>  文件被拷贝到了 Windows 的  <code>System32\\drivers</code>  目录下，这是正常的，因为所有的 Windows 驱动程序几乎都放在这个目录下。接下来读者会在注册表中发现一些增加的项，这些项各有作用，下面就对它们做一些简单的讲解。</p>\n<ol>\n<li>\n<p><code>“\\HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Enum\\Root\\UNKNOWN”</code> 。这是在安装之后新增加的一个键，在这之下还有一个叫作 <code>0000</code>  的子键，读者可以在管理员用户下用 <code>regedit</code>  命令查看这个键的内容。在 Windows 系统启动时，PnP 管理器会枚举  <code>“\\HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Enum\\Root\\”</code>  下的所有键，并会根据键中的信息为每个设备创建一个 PDO（物理设备对象 ） 。 在 <code>“\\HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Enum\\ Root\\”</code>  下的所有键代表了在系统安装时记录的或者通过添加硬件向导添加的一个硬件信息，Windows 虚拟了一条根总线并且把这些硬件挂接在上面。PnP 管理器完成 PDO 的建立之后会进行标准的 PnP 操作，与 PDO 相对应的驱动将会被加载。在 <code>“\\HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Enum\\Root\\UNKNOWN\\0000”</code>  键下可以看到和 Ramdisk 相关的信息，其中有一个值是 Service，系统将会寻找这个值指明的驱动，进行加载和调用。另外，在这个键下面还有一个值是 <code>ClassGUID</code> ，这个值的内容将作为这一类驱动的索引，在下面笔者将会用 <code>ClassGUID</code>  来代替这一长串的数字。</p>\n</li>\n<li>\n<p><code>“\\HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\Ramdisk”</code> 。上面已经说到系统会去加载 Service 所指明的驱动，而在 <code>“\\HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Enum\\Root\\UNKNOWN\\0000”</code>  中的 Service 值的内容正是  <code>Ramdisk</code>  ，于是系统就会 在 <code>“\\HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\”</code>  下面寻找这个叫作 Ramdisk 的服务，并根据它的内容去最终加载驱动程序本身。 <code>“\\HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\Ramdisk”</code>  是一个标准的服务描述键，读者应该已经对它非常熟悉了，这里不再多讲，这个键最重要的一点就是指明了 <code>ramdisk.sys</code>  文件的位置。</p>\n</li>\n<li>\n<p><code>“\\HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Class\\ClassGUID”</code> 。请读者注意这个键最后的 <code>ClassGUID</code>  实际上是一长串数字，数字的内容在  <code>“\\HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Enum\\Root\\UNKNOWN\\0000”</code>  键的 <code>ClassGUID</code>  值中。这个键说明了具有同样 Class 的驱动所通用的一些信息，在 Ramdisk 驱动中这个键没有太大的用处，但是在其他的驱动如类过滤驱动等驱动程序中，这个键却起着非常重要的作用。</p>\n</li>\n</ol>\n<h1 id=\"结束\"><a class=\"anchor\" href=\"#结束\">#</a> 结束</h1>\n<p>通过 Ramdisk 驱动，简单了解了 WDF 驱动开发框架。</p>\n",
            "tags": [
                "磁盘虚拟",
                "DriverEntry函数的定义",
                "WDF_DRIVER_CONFIG结构",
                "EvtDriverDeviceAdd函数",
                "FAT12/16磁盘卷"
            ]
        },
        {
            "id": "https://or0kit.github.io/Bin/Core/Drive-Development/%E9%94%AE%E7%9B%98%E7%9A%84%E8%BF%87%E6%BB%A4/",
            "url": "https://or0kit.github.io/Bin/Core/Drive-Development/%E9%94%AE%E7%9B%98%E7%9A%84%E8%BF%87%E6%BB%A4/",
            "title": "键盘的过滤",
            "date_published": "2022-07-12T15:11:27.000Z",
            "content_html": "<h1 id=\"键盘过滤\"><a class=\"anchor\" href=\"#键盘过滤\">#</a> 键盘过滤</h1>\n<p>键盘过滤可以用来做什么？</p>\n<p>恶意程序会用很多方法结果键盘消息，我们可以使用过滤键盘的驱动进行保护。</p>\n<h1 id=\"技术原理\"><a class=\"anchor\" href=\"#技术原理\">#</a> 技术原理</h1>\n<p>了解编写键盘驱动相关的知识。</p>\n<h2 id=\"预备知识\"><a class=\"anchor\" href=\"#预备知识\">#</a> 预备知识</h2>\n<p>了解什么是 PDO、Windows 中从击键到内核的过程、键盘的硬件原理。</p>\n<h3 id=\"pdo\"><a class=\"anchor\" href=\"#pdo\">#</a> PDO</h3>\n<p>何为 PDO？前面解释过  <code>DO</code>  是  <code>Device Object</code>  的简称， <code>PDO</code>  是  <code>Phsiycal Device Object</code>  的简称，字面上的意义是物理设备。读者暂时可以这样理解：<strong>PDO 是设备栈最下面的那个设备对象。</strong> 这个理解并不精确，但是很实用。</p>\n<h3 id=\"windows中从击键到内核\"><a class=\"anchor\" href=\"#windows中从击键到内核\">#</a> Windows 中从击键到内核</h3>\n<p>了解 Windows 是是如何获得按键的，然后传递给各应用程序。</p>\n<p>在任务管理器中，查看  <code>csrss.exe</code>  进程：</p>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<p><code>Csrss.exe</code>  进程有一个线程叫做  <code>win32!RawInputThread</code> ，这个线程通过一个  <code>GUID(GUID_CLASS_KEYBOARD)</code>  来获得键盘设备栈的  <code>PDO</code>  符号链接名。</p>\n<p><code>Win32k!RawInputThread</code>  执行到函数  <code>win32k!OpenDevice</code> , 它的一个参数可以找到键盘设备栈的 PDO 的符号链接名。</p>\n<p><code>Win32k!OpenDevice</code>  有一个  <code>OBJECT_ATTRIBUTES</code>  结构的局部变量，它自己初始化这个局部变量，用传入参数中的键盘设备栈的  <code>PDO</code>  的符号链接名赋值  <code>OBJECT_ATTRIBUTES+0x8</code>  处的  <code>PUNICODE_STRING ObjectName</code> 。</p>\n<p>然后，调用  <code>ZwCreateFile</code> ， <code>ZwCreateFile</code>  完成打开设备的工作，最后通过传入的参数返回得到的句柄。 <code>Win32k!RawInputThread</code>  把得到的句柄保存起来，供后面的  <code>ReadFile</code> ， <code>DeviceIoControl</code>  等使用。</p>\n<p><code>win32k!RawInputThread</code>  在获得了句柄之后，会以这个句柄为参数，调用  <code>nt!ZwReadFile</code> ，向键盘驱动要求读入数据。 <code>nt!ZwReadFile</code>  会创建一个  <code>IRP_MJ_READ</code>  的 IRP 发给键盘驱动，告诉键盘驱动要求读入数据。键盘驱动通常会使这个 <code>IRP Pending</code> ，即  <code>IRP_MJ_READ</code>  不被满足，它会一直被放在那里，等待来自键盘的数据。而发出这个读请求的线程  <code>win32k!RawInputThread</code>  也会等待，等待这个读操作的完成。</p>\n<p>当键盘上有键被按下时，将触发键盘的中断，引起中断服务例程的执行，键盘中断的中断服务例程由键盘驱动提供。键盘驱动从端口读取扫描码，经过一系列的处理之后，把从键盘得到的数据交给 IRP，最后结束这个 IRP。这个 IRP 的结束，将导致  <code>win32k!RawInputThread</code>  线程对这个读操作的等待结束。 <code>win32k!RawInputThread</code>  线程将会对得到的数据做出处理，分发给合适的进程。一旦把输入数据处理完之后， <code>win32k!RawInputThread</code>  线程就会立刻再调用一个  <code>nt!ZwReadFile</code> ，向键盘驱动要求读入数据。于是又开始一个等待，等待键盘上的键被按下。</p>\n<p>简单地说， <code>win32k!RawInputThread</code>  线程总是调用  <code>nt!ZwReadFile</code>  函数要求读入数据，然后等待键盘上的键被按下。当键盘上的键被按下时，   <code>win32k!RawInputThread</code>  处理  <code>nt!ZwReadFile</code>  得到的数据，然后  <code>nt!ZwReadFile</code>  要求读入数据，再等待键盘上的键被按下。</p>\n<p>我们一般看到的  <code>PS/2</code>  键盘的设备栈，如果自己没有另外安装其他键盘过滤程序，那么设备栈的情况是这样的：</p>\n<p>最顶层的设备对象是驱动  <code>KbdClass</code>  生成的设备对象。<br />\n中间层的设备对象是驱动  <code>i8042prt</code>  生成的设备对象。<br />\n最底层的设备对象是驱动  <code>ACPI</code>  生成的设备对象。</p>\n<p>原理到这里就讲完了。这段描述似乎令人眼花缭乱，但是我们没有必要非常关心其细节，<strong>只要知道我们现在要去绑定的那个设备就是驱动  <code>KbdClass</code>  的设备对象就可以了</strong></p>\n<h3 id=\"键盘硬件原理\"><a class=\"anchor\" href=\"#键盘硬件原理\">#</a> 键盘硬件原理</h3>\n<p>从键盘被敲击到计算机屏幕上出现一个字符，中间有很多复杂的变换。</p>\n<p>一个字符显然并不代表一个键，因为大写和小写的字母是同一个键，只是根据 Shift 键来决定是大写还是小写字母。此外还有许多复杂的功能键，如 Ctrl、Alt 键，另外还有小键盘等。所以键并不用字符来代表，而是给每个键规定了一个扫描码。<strong>键盘驱动程序会读取扫描码并翻译成正确的动作</strong>，但是并非放之所有的键盘而皆准。我们应该知道每个键都对应着扫描码。</p>\n<p>键盘和 CPU 的交互方式是中断和读取端口，这个操作是串行的。发生一次中断，就等于键盘给了 CPU 一次通知，这个通知只能通知一个事件：某个键被按下了，某个键弹起来了。我们可能会以为在按下一个字母键时，CPU 可能会去读取 Shift 键的状态，看应该是大写还是小写字母，结果却完全不是这样的。CPU 只接收通知并读取端口的扫描码，从不主动去 “查看” 任何键。</p>\n<p>为此，一个键实际上需要两个扫描码：一个表示键按下；另一个表示键弹起。根据从网上找到的资料，如果按下的键的扫描码为 X，那么同一个键弹起的扫描码就为 X+0x80。键盘这种设备非常古老，所以貌似 Windosw XP 下端口和中断号都是定死的，即中断号为 0x93，端口为 0x60。每次中断发生时，CPU 都去读取端口 0x60 中的扫描码。0x60 中只保存一个字节，但是扫描码是可以有两个字节的，此时就会发生两次中断，CPU 会先后读到扫描码的两个字节。</p>\n<p>无论如何按键，信息的传递都是一次一个字节串行进行的。</p>\n<h1 id=\"键盘过滤框架\"><a class=\"anchor\" href=\"#键盘过滤框架\">#</a> 键盘过滤框架</h1>\n<p>编写一个键盘过滤驱动框架。</p>\n<h2 id=\"绑定键盘设备\"><a class=\"anchor\" href=\"#绑定键盘设备\">#</a> 绑定键盘设备</h2>\n<p>要过滤一种设备，首先要绑定它。</p>\n<p>现在需要找到所有代表键盘的设备。从前面的原理来看，可以认定的是，如果绑定了驱动  <code>KbdClass</code>  的所有设备对象，那么代表键盘的设备一定在其中。</p>\n<p>现在我们面临的第一个问题是：如何找到一个驱动下的所有设备对象呢？</p>\n<h3 id=\"获取驱动对象下的所有设备对象\"><a class=\"anchor\" href=\"#获取驱动对象下的所有设备对象\">#</a> 获取驱动对象下的所有设备对象</h3>\n<ol>\n<li>直接读取驱动对象下面的 DeviceObject 域。</li>\n</ol>\n<p>一个  <code>DRIVER_OBJECT</code>  下有一个域叫作  <code>DeviceObject</code> ，这看似是一个设备对象的指针，但是由于每个  <code>DeviceObject</code>  中又有一个域叫作  <code>NextDevice</code> ，指向同一个驱动中的下一个设备，所以这里实际上是一个设备链。</p>\n<ol start=\"2\">\n<li>调用函数  <code>IoEnumerateDeviceObjectList</code> ，这个函数可以枚举出一个驱动下的所有设备。</li>\n</ol>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>NTSTATUS <span class=\"token function\">IoEnumerateDeviceObjectList</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token punctuation\">[</span>in<span class=\"token punctuation\">]</span>  PDRIVER_OBJECT DriverObject<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token punctuation\">[</span>out<span class=\"token punctuation\">]</span> PDEVICE_OBJECT <span class=\"token operator\">*</span>DeviceObjectList<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">[</span>in<span class=\"token punctuation\">]</span>  ULONG          DeviceObjectListSize<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">[</span>out<span class=\"token punctuation\">]</span> PULONG         ActualNumberDeviceObjects</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong>参数</strong><br />\n [in]  <code>DriverObject</code></p>\n<p>指向驱动程序的驱动程序对象的指针。</p>\n<p>[out]  <code>DeviceObjectList</code></p>\n<p>指向接收设备对象指针的调用方分配的数组的指针。此参数可以为 NULL。</p>\n<p>[in]  <code>DeviceObjectListSize</code></p>\n<p>DeviceObjectList 数组的大小（以字节为单位） 。可以为零。</p>\n<p>[out]  <code>ActualNumberDeviceObjects</code></p>\n<p>在驱动程序对象的设备对象列表中找到的设备对象的实际数量。请注意，如果 DeviceObjectList 处的数组太小，则复制到数组中的设备对象指针的数量将少于 ActualNumberDeviceObjects。</p>\n<p><strong>返回值</strong><br />\n IoEnumerateDeviceObjectList 可以返回以下之一：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">返回码</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">STATUS_SUCCESS</td>\n<td style=\"text-align:left\">对 IoEnumerateDeviceObjectList 的调用成功。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">STATUS_BUFFER_TOO_SMALL</td>\n<td style=\"text-align:left\">DeviceObjectList 中 的数组太小，无法容纳整个设备对象列表。在这种情况下，IoEnumerateDeviceObjectList 将尽可能多的设备对象指针复制到数组中。</td>\n</tr>\n</tbody>\n</table>\n<p>接下来我们获取键盘的驱动对象。</p>\n<h3 id=\"获取驱动对象\"><a class=\"anchor\" href=\"#获取驱动对象\">#</a> 获取驱动对象</h3>\n<p>我们首先打开驱动对象  <code>KbdClass</code> ，然后绑定它下面的所有设备。</p>\n<p>这里用到一个新的函数 —— <code>ObReferenceObjectByName</code> ，它用于通过一个名字来获得一个对象的指针。</p>\n<p>但是我们需要声明这个未公开的函数，才可以调用它。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>NTSTATUS</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">ObReferenceObjectByName</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tIN PUNICODE_STRING ObjectName<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tIN ULONG Attributes<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tIN PACCESS_STATE AccessState OPTIONAL<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tIN ACCESS_MASK DesiredAccess OPTIONAL<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tIN POBJECT_TYPE ObjectType<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tIN KPROCESSOR_MODE AccessMode<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tIN OUT PVOID ParseContext OPTIONAL<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tOUT PVOID<span class=\"token operator\">*</span> Object</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这就不得不提到另一个需要声明的全局变量：</p>\n<p>获取导出全局变量:  <code>extern POBJECT_TYPE* IoDriverObjectType;</code>  我在 xp 的源码中看到是这样获取的，有大佬说谭文书上的不对。</p>\n<h3 id=\"设备扩展\"><a class=\"anchor\" href=\"#设备扩展\">#</a> 设备扩展</h3>\n<p>在生成一个过滤设备时，我们可以给这个设备指定一个任意长度的 “设备扩展”，这个扩展中的内容可以任意填写，作为一个自定义的数据结构。</p>\n<p>这样就可以把真实设备的指针保存在设备对象里了，就没有必要像串口过滤的时定义两个数组了。</p>\n<p>在这个键盘过滤中，我们可以专门定义一个结构作为设备扩展，如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 设备扩展</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_DEV_EXT</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token comment\">// 结构体大小</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tULONG ulSize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token comment\">// 过滤设备对象</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tPDEVICE_OBJECT pFilterDeviceObject<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token comment\">// 绑定的目标设备对象</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tPDEVICE_OBJECT pTargetDeviceObjecct<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token comment\">// 返回对象</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tPDEVICE_OBJECT pLowerDeviceObjecct<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token comment\">// 自旋锁</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\tKSPIN_LOCK IoRequestsSpinLock<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token comment\">// 事件</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tKEVENT IoInProgressEvent<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span>DEV_EXT<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span> PDEV_EXT<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"绑定设备的代码\"><a class=\"anchor\" href=\"#绑定设备的代码\">#</a> 绑定设备的代码</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 获取导出全局变量</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">extern</span> POBJECT_TYPE<span class=\"token operator\">*</span> IoDriverObjectType<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 声明未公开函数</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>NTSTATUS</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">ObReferenceObjectByName</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tIN PUNICODE_STRING ObjectName<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tIN ULONG Attributes<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tIN PACCESS_STATE AccessState OPTIONAL<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tIN ACCESS_MASK DesiredAccess OPTIONAL<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tIN POBJECT_TYPE ObjectType<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tIN KPROCESSOR_MODE AccessMode<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tIN OUT PVOID ParseContext OPTIONAL<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\tOUT PVOID<span class=\"token operator\">*</span> Object</pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">// 设备扩展</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_DEV_EXT</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token comment\">// 结构体大小</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\tULONG ulSize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token comment\">// 过滤设备对象</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\tPDEVICE_OBJECT pFilterDeviceObject<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token comment\">// 绑定的目标设备对象</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\tPDEVICE_OBJECT pTargetDeviceObject<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token comment\">// 返回对象</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\tPDEVICE_OBJECT pLowerDeviceObject<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token comment\">// 自旋锁</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\tKSPIN_LOCK IoRequestsSpinLock<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token comment\">// 事件</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\tKEVENT IoInProgressEvent<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span>DEV_EXT<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span> PDEV_EXT<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token comment\">// 绑定设备</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token comment\">// 获取 KbdClassd 的驱动对象，然后绑定其所有设备对象</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>NTSTATUS <span class=\"token function\">kbdAttachDevices</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\tIN PDRIVER_OBJECT pDriver<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\tIN PUNICODE_STRING pRegPath</pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\tNTSTATUS status <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\tUNICODE_STRING uniNtNameString<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\tPDEV_EXT pdevext<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\tPDEVICE_OBJECT pFilterDeviceObject <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\tPDEVICE_OBJECT pTargetDeviceObject <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\tPDEVICE_OBJECT pLowerDeviceObject <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\tPDRIVER_OBJECT KbdDriverObject <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MyAttach!\\t\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t<span class=\"token comment\">// 获取 KbdClass 驱动对象</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t<span class=\"token function\">RtlInitUnicodeString</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>uniNtNameString<span class=\"token punctuation\">,</span> KBD_DRIVER_NAME<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\tstatus <span class=\"token operator\">=</span> <span class=\"token function\">ObReferenceObjectByName</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t\t<span class=\"token operator\">&amp;</span>uniNtNameString<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t\tOBJ_CASE_INSENSITIVE<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t\t<span class=\"token operator\">*</span>IoDriverObjectType<span class=\"token punctuation\">,</span>\t\t<span class=\"token comment\">// 在 xp 源码中看到就是这样的</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t\tKernelMode<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t\t<span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>KbdDriverObject</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">NT_SUCCESS</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MyAttach:Couldn't get the [KbdClass DriverObject]\\t\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> status<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t<span class=\"token comment\">// 解引用</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t<span class=\"token function\">ObDereferenceObject</span><span class=\"token punctuation\">(</span>KbdDriverObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>\t<span class=\"token comment\">// 获取 KbdClass 驱动对象下的所有设备对象并绑定</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\t<span class=\"token comment\">// 设备链中第一个设备</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\tpTargetDeviceObject <span class=\"token operator\">=</span> KbdDriverObject<span class=\"token operator\">-></span>DeviceObject<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>\t<span class=\"token comment\">// 遍历设备链</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>pTargetDeviceObject<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>\t\t<span class=\"token comment\">// 首先生成一个过滤设备</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>\t\tstatus <span class=\"token operator\">=</span> <span class=\"token function\">IoCreateDevice</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>\t\t\tIN pDriver<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>\t\t\tIN <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>DEV_EXT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>\t\t\tIN <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>\t\t\tIN pTargetDeviceObject<span class=\"token operator\">-></span>DeviceType<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>\t\t\tIN pTargetDeviceObject<span class=\"token operator\">-></span>Characteristics<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>\t\t\tIN FALSE<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>\t\t\tOUT <span class=\"token operator\">&amp;</span> pFilterDeviceObject</pre></td></tr><tr><td data-num=\"85\"></td><td><pre>\t\t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">NT_SUCCESS</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>\t\t\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MyAttach:Couldn't Create Filter Device Object\\t\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>\t\t\tpFilterDeviceObject <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>\t\t\tpTargetDeviceObject <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> status<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>\t\t<span class=\"token comment\">// 绑定</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>\t\t<span class=\"token comment\">//pLowerDeviceObject 是目标设备 设备栈栈顶的那个设备！</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>\t\tstatus <span class=\"token operator\">=</span> <span class=\"token function\">IoAttachDeviceToDeviceStackSafe</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>\t\t\tpFilterDeviceObject<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>\t\t\tpTargetDeviceObject<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>\t\t\t<span class=\"token operator\">&amp;</span>pLowerDeviceObject</pre></td></tr><tr><td data-num=\"101\"></td><td><pre>\t\t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">NT_SUCCESS</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>\t\t\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MyAtach:Couldn't attach KbdClass Device Object\\t\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>\t\t\t<span class=\"token function\">IoDeleteDevice</span><span class=\"token punctuation\">(</span>pFilterDeviceObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>\t\t\tpFilterDeviceObject <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> status<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>\t\t<span class=\"token comment\">// 设置 设备扩展</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>\t\tpdevext <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PDEV_EXT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>pFilterDeviceObject<span class=\"token operator\">-></span>DeviceExtension<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>\t\t<span class=\"token comment\">// 初始化设备扩展</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>\t\t<span class=\"token function\">DevExtInit</span><span class=\"token punctuation\">(</span>pdevext<span class=\"token punctuation\">,</span> pFilterDeviceObject<span class=\"token punctuation\">,</span> pTargetDeviceObject<span class=\"token punctuation\">,</span> pLowerDeviceObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>\t\t<span class=\"token comment\">// 设置相关属性</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>\t\tpFilterDeviceObject<span class=\"token operator\">-></span>DeviceType <span class=\"token operator\">=</span> pLowerDeviceObject<span class=\"token operator\">-></span>DeviceType<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>\t\tpFilterDeviceObject<span class=\"token operator\">-></span>Characteristics <span class=\"token operator\">=</span> pLowerDeviceObject<span class=\"token operator\">-></span>Characteristics<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>\t\tpFilterDeviceObject<span class=\"token operator\">-></span>StackSize <span class=\"token operator\">=</span> pLowerDeviceObject<span class=\"token operator\">-></span>StackSize<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>\t\tpFilterDeviceObject<span class=\"token operator\">-></span>Flags <span class=\"token operator\">|=</span> pLowerDeviceObject<span class=\"token operator\">-></span>Flags <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span>DO_BUFFERED_IO <span class=\"token operator\">|</span> DO_DIRECT_IO <span class=\"token operator\">|</span> DO_POWER_PAGABLE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>\t\t<span class=\"token comment\">// 获取下一个设备对象</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>\t\tpTargetDeviceObject <span class=\"token operator\">=</span> pTargetDeviceObject<span class=\"token operator\">-></span>NextDevice<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>\t<span class=\"token keyword\">return</span> status<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"键盘过滤模块的driverentry\"><a class=\"anchor\" href=\"#键盘过滤模块的driverentry\">#</a> 键盘过滤模块的 DriverEntry</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 入口函数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>NTSTATUS <span class=\"token function\">DriverEntry</span><span class=\"token punctuation\">(</span>PDRIVER_OBJECT pDriver<span class=\"token punctuation\">,</span> PUNICODE_STRING pRegPath<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tNTSTATUS status<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tULONG i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是驱动,我运行了\\t\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token comment\">// 设置分发函数</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> IRP_MJ_MAXIMUM_FUNCTION<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\tpDriver<span class=\"token operator\">-></span>MajorFunction<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> myDispatch<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token comment\">// 单独填写一个 IRP_MJ_POWER 函数， 因为重要的过滤就是读取来的按键信息，其他的都不重要</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tpDriver<span class=\"token operator\">-></span>MajorFunction<span class=\"token punctuation\">[</span>IRP_MJ_READ<span class=\"token punctuation\">]</span>  <span class=\"token operator\">=</span> myReadDispatch<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token comment\">// 单独写一个 IRP_MJ_POWER 函数</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\tpDriver<span class=\"token operator\">-></span>MajorFunction<span class=\"token punctuation\">[</span>IRP_MJ_POWER<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> myPowerDispatch<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token comment\">// PNP (即插即用) 我们要知道什么时候一个绑定过的设备被卸载（比如从机器上拔掉）</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\tpDriver<span class=\"token operator\">-></span>MajorFunction<span class=\"token punctuation\">[</span>IRP_MJ_PNP<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> myPNPDispatch<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token comment\">// 卸载函数</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\tpDriver<span class=\"token operator\">-></span>DriverUnload <span class=\"token operator\">=</span> myDriverUnload<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token comment\">// 绑定所有的键盘设备</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\tstatus <span class=\"token operator\">=</span> <span class=\"token function\">kbdAttachDevices</span><span class=\"token punctuation\">(</span>pDriver<span class=\"token punctuation\">,</span> pRegPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token keyword\">return</span> status<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"键盘过滤模块的动态卸载\"><a class=\"anchor\" href=\"#键盘过滤模块的动态卸载\">#</a> 键盘过滤模块的动态卸载</h2>\n<p>键盘过滤模块的动态卸载和前面的串口过滤稍有不同，这是因为键盘总是处于 “有一个读请求没有完成” 的状态。</p>\n<p>“当键盘上有键被按下时，将触发键盘的中断，引起中断服务例程的执行，键盘中断的中断服务例程由键盘驱动提供。键盘驱动从端口读取扫描码，经过一系列的处理之后，把从键盘得到的数据交给 IRP，然后结束这个 IRP。这个 IRP 的结束，将导致  <code>win32k!RawInputThread</code>  线程对这个读操作的等待结束。 <code>win32k!RawInputThread</code>  线程将会对得到的数据做出处理，分发给合适的进程。一旦把输入数据处理完之后， <code>win32k!RawInputThread</code>  线程会立刻再调用一个  <code>nt!ZwReadFile</code> ，向键盘驱动要求读入数据。于是又开始一个等待，等待键盘上的键被按下。”</p>\n<p>换句话说，就算类似于串口驱动一样等待 5 秒，这个请求也未必会完成（如果没有按键的话）。这样如果卸载了过滤驱动，那么等下次一按键，这个请求就被处理，很可能马上就蓝屏崩溃了。</p>\n<p>下面是对实际中动态卸载的处理。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 解除绑定并删除设备</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>VOID <span class=\"token function\">c2pDetach</span><span class=\"token punctuation\">(</span>IN PDEVICE_OBJECT pDeviceObject<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tPDEV_EXT devExt<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tBOOLEAN NoRequestsOutstanding <span class=\"token operator\">=</span> FALSE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tdevExt <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PDEV_EXT<span class=\"token punctuation\">)</span>pDeviceObject<span class=\"token operator\">-></span>DeviceExtension<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t__try</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t__try</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t\t<span class=\"token function\">IoDetachDevice</span><span class=\"token punctuation\">(</span>devExt<span class=\"token operator\">-></span>pTargetDeviceObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t\tdevExt<span class=\"token operator\">-></span>pTargetDeviceObject <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t\t<span class=\"token function\">IoDeleteDevice</span><span class=\"token punctuation\">(</span>pDeviceObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t\tdevExt<span class=\"token operator\">-></span>pFilterDeviceObject <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Detach Finished\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t<span class=\"token function\">__except</span> <span class=\"token punctuation\">(</span>EXCEPTION_EXECUTE_HANDLER<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t__finally <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">// 卸载函数</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>VOID <span class=\"token function\">myDriverUnload</span><span class=\"token punctuation\">(</span>PDRIVER_OBJECT pDriver<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\tPDEVICE_OBJECT pDeviceObject<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\tPDEVICE_OBJECT OldDeviceObject<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\tPDEV_EXT pdevext<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\tLARGE_INTEGER lDelay<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\tPRKTHREAD CurrentThread<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\tlDelay <span class=\"token operator\">=</span> <span class=\"token function\">RtlConvertLongToLargeInteger</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span> <span class=\"token operator\">*</span> DELAY_ONE_MILLISECOND<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\tCurrentThread <span class=\"token operator\">=</span> <span class=\"token function\">KeGetCurrentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token comment\">// 把当前线程设置为低实时模式，一遍让它的运行尽量少影响其他程序</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token function\">KeSetPriorityThread</span><span class=\"token punctuation\">(</span>CurrentThread<span class=\"token punctuation\">,</span> LOW_REALTIME_PRIORITY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token comment\">// UNREFERENCED_PARAMETER(pDriver);</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"DriverEntry unload..\\t\\n.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t<span class=\"token comment\">// 遍历所有设备并一律解除绑定</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\tpDeviceObject <span class=\"token operator\">=</span> pDriver<span class=\"token operator\">-></span>DeviceObject<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>pDeviceObject<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t\t<span class=\"token comment\">// 解除绑定并删除设备</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t\t<span class=\"token function\">c2pDetach</span><span class=\"token punctuation\">(</span>pDeviceObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t\tpDeviceObject<span class=\"token operator\">-></span>NextDevice<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t<span class=\"token function\">ASSERT</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span> <span class=\"token operator\">==</span> DriverObject<span class=\"token operator\">-></span>DeviceObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>gC2pKeyCount<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t\t<span class=\"token comment\">// 睡眠 1 毫秒</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t\t<span class=\"token function\">KeDelayExecutionThread</span><span class=\"token punctuation\">(</span>KernelMode<span class=\"token punctuation\">,</span> FALSE<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>lDelay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是驱动，我卸载了\\t\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这里的防止未决请求没有完成的方法就是使用  <code>gC2pKeyCount</code> 。</p>\n<p><code>gC2pKeyCount</code>  在这里是一个全局变量，每次有一个读请求到来时， <code>gC2pKeyCount</code>  被加 1；每次完成时，则减 1。于是只有所有请求都完成后，才结束等待；否则就无休止地等待下去。</p>\n<p><strong>实际上，只有一个键被按下时，这个卸载过程才结束。</strong></p>\n<h2 id=\"键盘过滤的请求处理\"><a class=\"anchor\" href=\"#键盘过滤的请求处理\">#</a> 键盘过滤的请求处理</h2>\n<p>在  <code>DriverEntry</code>  中我们设置了相关的分发函数，在这里我们来逐个实现这些函数。</p>\n<h3 id=\"通常的处理\"><a class=\"anchor\" href=\"#通常的处理\">#</a> 通常的处理</h3>\n<p>最通常的处理就是直接发送到真实设备，跳过虚拟设备的处理。这和前面串口过滤用过的方法一样。代码如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 普通分发函数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>NTSTATUS <span class=\"token function\">myDispatch</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tIN PDEVICE_OBJECT pDevice<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tIN PIRP irp</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token comment\">//\t其他的分发函数，直接 skip，然后用 IoCallDriver 把 IRP 发送到真实设备的设备对象上</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Other Disapatch!\\t\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token function\">IoSkipCurrentIrpStackLocation</span><span class=\"token punctuation\">(</span>irp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token function\">IoCallDriver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>PDEV_EXT<span class=\"token punctuation\">)</span>pDevice<span class=\"token operator\">-></span>DeviceExtension<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>pLowerDeviceObject<span class=\"token punctuation\">,</span> irp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"pnp的处理\"><a class=\"anchor\" href=\"#pnp的处理\">#</a> PNP 的处理</h3>\n<p>唯一需要处理的是，当有一个设备被拔出时，解除绑定并删除过滤设备。代码的实现大致如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// PNP 处理</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>NTSTATUS <span class=\"token function\">myPNPDispatch</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tIN PDEVICE_OBJECT pDevice<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tIN PIRP irp</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tPDEV_EXT pdevext<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tPIO_STACK_LOCATION pIrpStack<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tNTSTATUS status <span class=\"token operator\">=</span> STATUS_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tKIRQL oldIrql<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tKEVENT event<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token comment\">// 获取这真实设备</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tpdevext <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PDEV_EXT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>pDevice<span class=\"token operator\">-></span>DeviceExtension<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tpIrpStack <span class=\"token operator\">=</span> <span class=\"token function\">IoGetCurrentIrpStackLocation</span><span class=\"token punctuation\">(</span>irp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token comment\">// 获取次功能号</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>pIrpStack<span class=\"token operator\">-></span>MinorFunction<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token keyword\">case</span> IRP_MN_REMOVE_DEVICE<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"IRP_MN_REMOVE_DEVICE\\t\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t<span class=\"token comment\">// 首先把请求发下去</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t<span class=\"token function\">IoSkipCurrentIrpStackLocation</span><span class=\"token punctuation\">(</span>irp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t<span class=\"token function\">IoCallDriver</span><span class=\"token punctuation\">(</span>pdevext<span class=\"token operator\">-></span>pLowerDeviceObject<span class=\"token punctuation\">,</span> irp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t<span class=\"token comment\">// 然后接触绑定</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t<span class=\"token function\">IoDetachDevice</span><span class=\"token punctuation\">(</span>pdevext<span class=\"token operator\">-></span>pLowerDeviceObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t<span class=\"token comment\">// 删除我们生成的虚拟设备</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t<span class=\"token function\">IoDeleteDevice</span><span class=\"token punctuation\">(</span>pDevice<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\tstatus <span class=\"token operator\">=</span> STATUS_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token keyword\">default</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\t<span class=\"token comment\">// 对于其他类型的 IRP，全部直接下发即可</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\t<span class=\"token function\">IoSkipCurrentIrpStackLocation</span><span class=\"token punctuation\">(</span>irp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\tstatus <span class=\"token operator\">=</span> <span class=\"token function\">IoCallDriver</span><span class=\"token punctuation\">(</span>pdevext<span class=\"token operator\">-></span>pLowerDeviceObject<span class=\"token punctuation\">,</span> irp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t<span class=\"token keyword\">return</span> status<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>当 PNP 请求过来时，是没有必要担心还有未完成的 IRP 的。<br />\n这是因为 Windows 系统要求卸载设备，此时 Windows 自己应该已经处理掉了所有未决的 IRP。</p>\n<p>这是和我们自己要求卸载过滤驱动不同的地方。</p>\n<h3 id=\"读的处理\"><a class=\"anchor\" href=\"#读的处理\">#</a> 读的处理</h3>\n<p>前面见过的所有请求，都是处理完毕之后，直接发送到下层驱动之后就不管了。但是在处理键盘读请求时，这样做是不行的。</p>\n<p>当一个读请求到来时，只是说 Windows 要从键盘驱动读取一个键扫描码值，但是在完成之前显然并不清楚这个值到底是多少。<br />\n我们要过滤的目的，就是要获得按下了什么键，所以不得不换一种处理方法，<strong>就是把这个请求下发完成之后，再去看这个值是多少。</strong></p>\n<p>要完成请求，可以采用如下的步骤。</p>\n<p>（1）调用  <code>IoCopyCurrentIrpStackLocationToNext</code>  把当前 IRP 栈空间拷贝到下一个栈空间（这和前面的调用  <code>IoSkipCurrentIrpStackLocation</code>  跳过当前栈空间形成对比）。<br />\n（2）给这个 IRP 设置一个完成函数。完成函数的含义是，如果这个 IRP 完成了，系统就会回调这个函数。<br />\n（3）调用  <code>IoCallDriver</code>  把请求发送到下一个设备</p>\n<p>另外一个需要解决的问题就是我们前面所需要的一个键计数器。</p>\n<p>即一个请求到来时，我们把全局变量  <code>gC2pKeyCount</code>  加 1，等完成之后再减 1。这个处理比较简单。</p>\n<p>完整的读处理请求如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 读请求</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>NTSTATUS <span class=\"token function\">myReadDispatch</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tIN PDEVICE_OBJECT pDevice<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tIN PIRP irp</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tNTSTATUS status <span class=\"token operator\">=</span> STATUS_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tPDEV_EXT pdevext<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tPIO_STACK_LOCATION pIrpStack<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tKEVENT waitevent<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token function\">KeInitializeEvent</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>waitevent<span class=\"token punctuation\">,</span> NotificationEvent<span class=\"token punctuation\">,</span> FALSE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token comment\">// 判断是否到达了 irp 栈的最低端</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>irp<span class=\"token operator\">-></span>CurrentLocation <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\tULONG ReturnedInformation <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Dispatach encountered bogus current location\\t\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\tstatus <span class=\"token operator\">=</span> STATUS_INVALID_DEVICE_REQUEST<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\tirp<span class=\"token operator\">-></span>IoStatus<span class=\"token punctuation\">.</span>Status <span class=\"token operator\">=</span> status<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\tirp<span class=\"token operator\">-></span>IoStatus<span class=\"token punctuation\">.</span>Information <span class=\"token operator\">=</span> ReturnedInformation<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t<span class=\"token function\">IoCompleteRequest</span><span class=\"token punctuation\">(</span>irp<span class=\"token punctuation\">,</span> IO_NO_INCREMENT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> status<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token comment\">// 全局变量键计数器加 1</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\tgC2pKeyCount<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token comment\">// 得到设备扩展，目的是为了获得下一个设备的指针</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\tpdevext <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PDEV_EXT<span class=\"token punctuation\">)</span>pDevice<span class=\"token operator\">-></span>DeviceExtension<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token comment\">// 设置回调函数并把 IRP 传递下去。之后读的处理也就结束了。剩下的任务是等待读请求完成</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\tpIrpStack <span class=\"token operator\">=</span> <span class=\"token function\">IoGetCurrentIrpStackLocation</span><span class=\"token punctuation\">(</span>irp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token comment\">// 复制当前 IRP 栈空间</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token function\">IoCopyCurrentIrpStackLocationToNext</span><span class=\"token punctuation\">(</span>irp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token comment\">// 设置完成回调函数</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t<span class=\"token function\">IoSetCompletionRoutine</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\tirp<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\tmyReadComplete<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\tpDevice<span class=\"token punctuation\">,</span> TRUE<span class=\"token punctuation\">,</span> TRUE<span class=\"token punctuation\">,</span> TRUE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token function\">IoCallDriver</span><span class=\"token punctuation\">(</span>pdevext<span class=\"token operator\">-></span>pLowerDeviceObject<span class=\"token punctuation\">,</span> irp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"读完成的处理\"><a class=\"anchor\" href=\"#读完成的处理\">#</a> 读完成的处理</h3>\n<p><strong>读请求完成之后，应该获得输出缓冲区，按键信息就在输出缓冲区中，区局变量  <code>gC2pKeyCount</code>  应该减 1。</strong></p>\n<p>如何在缓冲区中获取按键信息呢？ 还需要了解一种数据结构</p>\n<h4 id=\"keyboard_input_data结构\"><a class=\"anchor\" href=\"#keyboard_input_data结构\">#</a> KEYBOARD_INPUT_DATA 结构</h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_KEYBOARD_INPUT_DATA</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  USHORT UnitId<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  USHORT MakeCode<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  USHORT Flags<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  USHORT Reserved<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  ULONG  ExtraInformation<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span> KEYBOARD_INPUT_DATA<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>PKEYBOARD_INPUT_DATA<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><code>UnitId</code></p>\n<p>指定键盘设备的单元号。键盘设备名称的格式为  <code>\\Device\\KeyboardPort</code>   <em>N</em> ，其中后缀<em> N</em> 是设备的单元号。例如，名称为 <code>\\Device\\KeyboardPort0</code>  的设备的单元号为 <code>0</code> ，名称为 <code>\\Device\\KeyboardPort1</code>  的设备的单元号为 <code>1</code> 。</p>\n<p><code>MakeCode</code></p>\n<p>指定与按键关联的扫描代码。</p>\n<p><code>Flags</code></p>\n<p>指定以下一个或多个标志的按位或，这些标志指示键是被按下还是释放，以及其他杂项信息。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">价值</th>\n<th style=\"text-align:left\">意义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">KEY_MAKE</td>\n<td style=\"text-align:left\">键被按下。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">KEY_BREAK</td>\n<td style=\"text-align:left\">键被释放了。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">KEY_E0</td>\n<td style=\"text-align:left\">用于指示特殊键盘功能的扩展扫描码。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">KEY_E1</td>\n<td style=\"text-align:left\">用于指示特殊键盘功能的扩展扫描码。</td>\n</tr>\n</tbody>\n</table>\n<p><code>Reserved</code></p>\n<p>保留供操作系统使用。</p>\n<p><code>ExtraInformation</code></p>\n<p>指定与键盘事件关联的设备特定信息。</p>\n<hr />\n<p>至于有多少个这样的结构，则取决于输入缓冲区到底有多长。实际上，这种结构的个数应该为：</p>\n<p><code>keys = (irp-&gt;IoStatus.Information) / sizeof(KEYBOARD_INPUT_DATA);</code></p>\n<h4 id=\"读完成函数完整代码\"><a class=\"anchor\" href=\"#读完成函数完整代码\">#</a> 读完成函数完整代码</h4>\n<p>此外，再没有其他的事情需要完成了。所以相关代码比较简单，大致如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>NTSTATUS <span class=\"token function\">myReadComplete</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tIN PDEVICE_OBJECT pDevice<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tIN PIRP irp<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tIN PVOID Context</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tNTSTATUS status<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tPIO_STACK_LOCATION pIrpStack<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tULONG  keys<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tULONG buf_len <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tPKEYBOARD_INPUT_DATA pKeyBoardData<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token comment\">// 获取 IRP 堆栈</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tpIrpStack <span class=\"token operator\">=</span> <span class=\"token function\">IoGetCurrentIrpStackLocation</span><span class=\"token punctuation\">(</span>irp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token comment\">// 判断这个 IRP 是否成功</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">NT_SUCCESS</span><span class=\"token punctuation\">(</span>irp<span class=\"token operator\">-></span>IoStatus<span class=\"token punctuation\">.</span>Status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t<span class=\"token comment\">// 获取读请求完成后的输出缓冲区</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\tpKeyBoardData <span class=\"token operator\">=</span> irp<span class=\"token operator\">-></span>AssociatedIrp<span class=\"token punctuation\">.</span>SystemBuffer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t<span class=\"token comment\">//irp->IoStatus.Information 其实就是完成信息的大小。得到了按下的键的数量</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\tkeys <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>irp<span class=\"token operator\">-></span>IoStatus<span class=\"token punctuation\">.</span>Information<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>KEYBOARD_INPUT_DATA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"keys:%d\\t\\n\"</span><span class=\"token punctuation\">,</span> keys<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>size_t i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> keys<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"numkey:%u\\t\\n\"</span><span class=\"token punctuation\">,</span> keys<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t\t<span class=\"token comment\">// 按键码不等于字符</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sancode:%x\\t\\n\"</span><span class=\"token punctuation\">,</span> pKeyBoardData<span class=\"token operator\">-></span>MakeCode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\t\\n\"</span><span class=\"token punctuation\">,</span> pKeyBoardData<span class=\"token operator\">-></span>Flags <span class=\"token operator\">?</span> <span class=\"token string\">\"Up\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"Down\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pKeyBoardData<span class=\"token operator\">-></span>MakeCode <span class=\"token operator\">==</span> <span class=\"token number\">0x1f</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t\t\t<span class=\"token comment\">// 过滤按键，修改为 0x20 </span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\t\t\t<span class=\"token comment\">// 这里也可以做其他的许多事情：键盘记录等等</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\t\t\tpKeyBoardData<span class=\"token operator\">-></span>MakeCode <span class=\"token operator\">=</span> <span class=\"token number\">0x20</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\t\t</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\tgC2pKeyCount<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>irp<span class=\"token operator\">-></span>PendingReturned<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\t<span class=\"token function\">IoMarkIrpPending</span><span class=\"token punctuation\">(</span>irp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t<span class=\"token keyword\">return</span> irp<span class=\"token operator\">-></span>IoStatus<span class=\"token punctuation\">.</span>Status<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这里的读完成函数我们只是简单的打印了<strong>对应每次按键信息</strong>的结构体 <code>KEYBOARD_INPUT_DATA</code>  中的成员，并且把所有 <code>MakeCode</code>  值为 <code>0x1f</code>  修改为了 <code>0x20</code> , 这样当按下 <code>s</code>  键时会替换成为  <code>d</code>  键。</p>\n<h4 id=\"从makecode到实际字符\"><a class=\"anchor\" href=\"#从makecode到实际字符\">#</a> 从 MakeCode 到实际字符</h4>\n<p>接下来我们将尽力地把按键显示成可以显示的字符。虽然这并不总是可行的（比如按下 <code>Shift</code>  键然后弹起，显然密码框里不会因此被输入一个字符），这涉及扫描码和实际字符是如何对应的。</p>\n<p>所谓的实际字符就是 <code>ASCII</code>  码。大家都知道大写 / 小写字符的 ASCII 码并不相同，但是键是同一个（就是说扫描码是相同的），具体是哪个取决于几个键的状态（包括 <code>Shift</code>  键、 <code>Caps Lock</code>  键）。因此，这个模块在过滤按键的同时，也必须把这几个控制键的状态保存下来。</p>\n<p>请注意 <code>Shift</code>  键和 <code>Caps Lock</code>  键的不同： <code>Shift</code>  键是按下生效，释放则无效了；而 <code>Caps Lock</code>  键是按一次生效，再按一次无效了。因此过滤的方法也不<br />\n一样。</p>\n<p>具体实现见代码。</p>\n<h1 id=\"运行结果\"><a class=\"anchor\" href=\"#运行结果\">#</a> 运行结果</h1>\n<p>代码放在 github 了， <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL09yMGtpdC9GbHRlcjAy\">https://github.com/Or0kit/Flter02</span></p>\n<p><img data-src=\"image002.png\" alt=\"\" /></p>\n",
            "tags": [
                "键盘过滤",
                "PDO",
                "Windows中从击键到内核的过程",
                "KEYBOARD_INPUT_DATA结构",
                "IRP完成回调函数"
            ]
        },
        {
            "id": "https://or0kit.github.io/Bin/Core/Drive-Development/%E4%B8%B2%E5%8F%A3%E7%9A%84%E8%BF%87%E6%BB%A4/",
            "url": "https://or0kit.github.io/Bin/Core/Drive-Development/%E4%B8%B2%E5%8F%A3%E7%9A%84%E8%BF%87%E6%BB%A4/",
            "title": "过滤驱动-串口的过滤",
            "date_published": "2022-07-05T20:10:32.000Z",
            "content_html": "<h1 id=\"过滤filter的概念\"><a class=\"anchor\" href=\"#过滤filter的概念\">#</a> 过滤（Filter）的概念</h1>\n<p>过滤是及其重要的一个概念，过滤是在不影响上层和下层解耦你的情况下，在 Windows 系统内核中加入新的层，从而不需要修改上层软件或者下层的真实驱动程序，就加入了新的功能。</p>\n<p>例如：实时监控的反病毒软件。</p>\n<p>反病毒软件需要在不改变文件系统上层和下层接口的情况下，在中间层加入一个过滤层，这样就可以在上次软件读取文件、下层驱动提供数据时，对这些数据进行扫描，看其中是否含有某个病毒的特征码。</p>\n<p>这是一个典型的过滤过程。</p>\n<h1 id=\"串口过滤\"><a class=\"anchor\" href=\"#串口过滤\">#</a> 串口过滤</h1>\n<p>串行接口，简称串口，也就是 COM 接口，是采用串行通信协议的扩展接口。<br />\n串口的出现是在 1980 年前后，数据传输率是 115kbps～230kbps，串口一般用来连接鼠标和外置 Modem 以及老式摄像头和写字板等设备，目前部分新主板已开始取消该接口。</p>\n<p>现在 USB 取代了串口，可是给串口留下了后路。没有串口的电脑上，只需要接上一个 USB 转串口的转换器就可以了。具体可以上淘宝、天猫查看实物图。</p>\n<p>串口的过滤很简单，在安全开发中意义也不大，只是作为学习，为之后的键盘过滤和文件系统过滤等打基础。</p>\n<p>在 Windows 中串口设备是有固定名字的。<br />\n第一个串口名字为  <code>\\Device\\Serial0</code>  ，第二个串口的名字为  <code>\\Device\\Serial1</code>  ，以此类推。注意 C 语言中的 <code>\\</code>  要写成 <code>\\\\</code> 。</p>\n<h2 id=\"设备绑定的内核api\"><a class=\"anchor\" href=\"#设备绑定的内核api\">#</a> 设备绑定的内核 API</h2>\n<p>进行过滤的最主要方法是对一个设备对象（Device Object）进行绑定。通过编程生成一个虚拟设备，并 “绑定”（Attach）在一个真实的设备上。一旦绑定，则本来操作系统发送给真实设备的请求，就会首先发送的这个虚拟设备。</p>\n<p>我们可以首先认为：一个正是的设备对应一个设备对象（虽然实际的对应关系可能复杂的多）。</p>\n<p>在 WDK 中，有多个内核 API 能实现绑定功能。</p>\n<h3 id=\"ioattachdevice\"><a class=\"anchor\" href=\"#ioattachdevice\">#</a> IoAttachDevice</h3>\n<p>下面是其中一个函数的原型：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>NTSTATUS   </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token function\">IoAttachDevice</span><span class=\"token punctuation\">(</span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>           IN PDEVICE_OBJECT SourceDevice<span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>           IN PUNICODE_STRING TargetDevice<span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>           OUT PDEVICE_OBJECT <span class=\"token operator\">*</span>AttachedDevice  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>          <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>参数：</p>\n<p><code>SourceDevice</code>  是调用者生成的用来过滤的虚拟设备。<br />\n <code>TargetDevice</code>  是要被绑定的目标设备。<strong>注意此参数的类型是  <code>PUNICODE_STRING</code>  是一个字符串，这个字符串是被绑定的设备的名字</strong>。<br />\n <code>AttachedDevice</code>  是荣来返回的二级指针。</p>\n<p><strong>注意：</strong></p>\n<p>Windows 中并不是所有的设备对象都有名字，只有有名字的设备，才能用这个内核 API 绑定。</p>\n<h3 id=\"设备栈\"><a class=\"anchor\" href=\"#设备栈\">#</a> 设备栈</h3>\n<p>绑定设备这里还有一个疑问：</p>\n<p>假设使用这个函数绑定一个名字所对应的设备，那么如果这个设备已经被其他设备绑定了，会怎样呢？</p>\n<p>如果一个设备被其他设备绑定了，它们在一起的一组设备，被称为设备栈（详细可以参考<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5wbnBvbi5jb20vYXJ0aWNsZS9kZXRhaWwtMjE1Lmh0bWw=\"> http://www.pnpon.com/article/detail-215.html</span>）。</p>\n<p><strong>实际上，  <code>IoAttachDevice</code>  总是会绑定设备栈上最顶层的那个设备。</strong></p>\n<h3 id=\"ioattachdevicetodevicestack和ioattachdevicetodevicestacksafe\"><a class=\"anchor\" href=\"#ioattachdevicetodevicestack和ioattachdevicetodevicestacksafe\">#</a> IoAttachDeviceToDeviceStack 和 IoAttachDeviceToDeviceStackSafe</h3>\n<p>并不是所有的设备都有名字，所以依靠 <code>IoAttachDevice</code>  无法绑定没有名字的设备。另外还有两个 API：一个是  <code>IoAttachDeviceToDeviceStack</code>  ，另一个是  <code>IoAttachDeviceToDeviceStackSafe</code>  。这两个函数的功能一样，都是根据设备对象的指针（而不是名字）进行绑定；区别是  <code>IoAttachDeviceToDeviceStackSafe</code>  更加安全，而且只有在  <code>Windows 2000 SP4</code>  和  <code>Windows XP</code>  以上的系统中才有用。  <code>一般都使用IoAttachDeviceToDeviceStackSafe</code>  ，但是当试图兼容较低版本的 <code>Windows 2000</code>  时，应该使用 <code>IoAttachDeviceToDeviceStack</code> 。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>NTSTATUS</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">IoAttachDeviceToDeviceStackSafe</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    _In_  PDEVICE_OBJECT SourceDevice<span class=\"token punctuation\">,</span>                <span class=\"token comment\">// 过滤设备</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    _In_  PDEVICE_OBJECT TargetDevice<span class=\"token punctuation\">,</span>                <span class=\"token comment\">// 要被绑定的设备栈中的设备</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    _Outptr_ PDEVICE_OBJECT <span class=\"token operator\">*</span>AttachedToDeviceObject   <span class=\"token comment\">// 返回最终被绑定的设备</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>PDEVICE_OBJECT</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token function\">IoAttachDeviceToDeviceStack</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    _In_ PDEVICE_OBJECT SourceDevice<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    _In_ PDEVICE_OBJECT TargetDevice</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><code>IoAttachDeviceToDeviceStackSafe</code>  和第一个 API 类似，只是  <code>TargetDevice</code>  换成了一个指针。另外， <code>AttachedToDeviceObject</code>  同样也是返回最终被绑定的设备，实际上也就是绑定之前设备栈上最顶端的那个设备。</p>\n<p>在 <code>Windows 2000</code>  下应该使用另外一个函数  <code>IoAttachDeviceToDeviceStack</code> ，这个函数除了缺少最后一个参数（实际上放到返回值里了），其他的和 <code>IoAttachDeviceToDeviceStackSafe</code>  函数相同。 <code>IoAttachDeviceToDeviceStack</code>  函数返回了最终被绑定的设备指针，这也就导致了它不能返<br />\n回一个明确的错误码。但是如果为 NULL，则表示绑定失败了。</p>\n<h2 id=\"生成过滤设备并绑定\"><a class=\"anchor\" href=\"#生成过滤设备并绑定\">#</a> 生成过滤设备并绑定</h2>\n<p>在绑定一个设备之前，先要知道如何生成一个用于过滤的设备。函数 <code>IoCreateDevice</code>  被用于生成过滤设备：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>NTSTATUS <span class=\"token function\">IoCreateDevice</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    _In_  PDRIVER_OBJECT DriverObject<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    _In_  ULONG DeviceExtensionSize<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    _In_opt_ PUNICODE_STRING DeviceName<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    _In_  DEVICE_TYPE DeviceType<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    _In_  ULONG DeviceCharacteristics<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    _In_  BOOLEAN Exclusive<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    PDEVICE_OBJECT <span class=\"token operator\">*</span>DeviceObject  <span class=\"token comment\">// 二级指针</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这个函数之前学习 3 环 0 环通信的时候，用过。</p>\n<p><code>DeviceExtensionSize</code>  是设备扩展，先简单地传入 0。<br />\n <code>DeviceName是</code> 设备名字。有一个规则是：过滤设备一般不需要名称，所以传入 NULL 即可。<br />\n <code>DeviceType</code>  是设备类型，保持和被绑定的设备类型一致即可。<br />\n <code>DeviceCharacteristics</code>  是设备特征，在生成设备对象时可以直接填 0，然后看是否排斥，选择 FALSE。</p>\n<p>值得注意的是，在绑定一个设备之前，应该把这个设备对象的多个子域设置成和要绑定的目标对象一致，包括标志和特征。下面是一个示例的函数，这个函数可以生成一个设备，然后绑定在另一个设备上。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>NTSTATUS <span class=\"token function\">ccpAttachDevice</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tPDRIVER_OBJECT driver<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tPDEVICE_OBJECT oldobj<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tPDEVICE_OBJECT<span class=\"token operator\">*</span> fltobj<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tPDEVICE_OBJECT<span class=\"token operator\">*</span> next</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tNTSTATUS status<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tPDEVICE_OBJECT topdev <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token comment\">// 生成设备，然后绑定</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tstatus <span class=\"token operator\">=</span> <span class=\"token function\">IoCreateDevice</span><span class=\"token punctuation\">(</span>driver<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t<span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\toldobj<span class=\"token operator\">-></span>DeviceType<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t<span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\tFALSE<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\tfltobj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>status<span class=\"token operator\">!=</span> STATUS_SUCCESS<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> status<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token comment\">// 拷贝重要标志位</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>oldobj<span class=\"token operator\">-></span>Flags <span class=\"token operator\">&amp;</span> DO_BUFFERED_IO<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>fltobj<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>Flags <span class=\"token operator\">|=</span> DO_BUFFERED_IO<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>oldobj<span class=\"token operator\">-></span>Flags <span class=\"token operator\">&amp;</span> DO_DIRECT_IO<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\t<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>fltobj<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>Flags <span class=\"token operator\">|=</span> DO_DIRECT_IO<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>oldobj<span class=\"token operator\">-></span>Characteristics <span class=\"token operator\">&amp;</span> FILE_DEVICE_SECURE_OPEN<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\t<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>fltobj<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>Characteristics <span class=\"token operator\">|=</span> FILE_DEVICE_SECURE_OPEN<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>fltobj<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>Flags <span class=\"token operator\">|=</span> DO_POWER_PAGABLE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t<span class=\"token comment\">// 将一个设备绑定到另一个设备上</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\tstatus <span class=\"token operator\">=</span> <span class=\"token function\">IoAttachDeviceToDeviceStackSafe</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>fltobj<span class=\"token punctuation\">,</span> oldobj<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>topdev<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t<span class=\"token comment\">// topdev = IoAttachDeviceToDeviceStack(*fltobj, oldobj);</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>status <span class=\"token operator\">!=</span> STATUS_SUCCESS<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t\t<span class=\"token comment\">// 如果绑定失败，销毁设备，返回错误</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t\t<span class=\"token function\">IoDeleteDevice</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>fltobj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t\t<span class=\"token operator\">*</span>fltobj <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> status<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t<span class=\"token operator\">*</span>next <span class=\"token operator\">=</span> topdev<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t<span class=\"token comment\">// 设置这个设备已经启动</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>fltobj<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>Flags <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>fltobj<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>Flags <span class=\"token operator\">&amp;</span> <span class=\"token operator\">~</span>DO_DEVICE_INITIALIZING<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t<span class=\"token keyword\">return</span> STATUS_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"从名字获得设备对象\"><a class=\"anchor\" href=\"#从名字获得设备对象\">#</a> 从名字获得设备对象</h2>\n<p>在知道一个设备名字的情况下，使用函数  <code>IoGetDeviceObjectPointer</code>  可以获得这个设备对象的指针。</p>\n<p>函数原型如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>NTSTATUS</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">IoGetDeviceObjectPointer</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    _In_  PUNICODE_STRING ObjectName<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    _In_  ACCESS_MASK DesiredAccess<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    _Out_ PFILE_OBJECT <span class=\"token operator\">*</span>FileObject<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    _Out_ PDEVICE_OBJECT <span class=\"token operator\">*</span>DeviceObject</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><code>ObjectName</code>  就是设备的名字。<br />\n <code>DesiredAccess</code>  是期望访问的权限。在实际使用可以不顾忌那么多，直接填写  <code>FILE_ALL_ACCESS</code>  即可。<br />\n <code>FileObject</code>  是一个返回参数，即在获得这个设备对象的同时会得到一个文件对象（File Object）。<br />\n要得到的设备对象就返回在参数  <code>DeviceObject</code>  中了。<br />\n就打开串口设备这件事而言，这个文件对象并没有什么用处。但是必须注意，在使用该函数之后必须把这个文件对象 “解除引用”；否则会引起内存泄漏。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 因为用到了 RtlStringCchPrintfW，所以必须包含头文件 ntstrsafe.h</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 定义 NTSTRSAFE_LIB 是为了使用 ntstrsafe 静态库，这样才能兼容 Windows 2000</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// #define NTSTRSAFE_LIB</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;ntstrsafe.h></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 打开一个端口设备</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>PDEVICE_OBJECT <span class=\"token function\">ccpOpenCom</span><span class=\"token punctuation\">(</span>ULONG id<span class=\"token punctuation\">,</span> NTSTATUS <span class=\"token operator\">*</span>status<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token comment\">// 外面输入的是串口 id，这里改写成字符串的形式</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tUNICODE_STRING name_str<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token keyword\">static</span> WCHAR name<span class=\"token punctuation\">[</span><span class=\"token number\">32</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\tPFILE_OBJECT fileobj <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tPDEVICE_OBJECT devobj <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token comment\">// 输入字符串</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>WCHAR<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token function\">RtlStringCchPrintfW</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\tname<span class=\"token punctuation\">,</span> <span class=\"token number\">32</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\tL<span class=\"token string\">\"\\\\Device\\\\Serial%d\"</span><span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token function\">RtlInitUnicodeString</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>name_str<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token comment\">// 打开设备对象</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token operator\">*</span>status <span class=\"token operator\">=</span> <span class=\"token function\">IoGetDeviceObjectPointer</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>name_str<span class=\"token punctuation\">,</span> FILE_ALL_ACCESS<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>fileobj<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>devobj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>status <span class=\"token operator\">==</span> STATUS_SUCCESS<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t<span class=\"token comment\">// 没有用到文件对象，解除对其引用</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t<span class=\"token function\">ObDereferenceObject</span><span class=\"token punctuation\">(</span>fileobj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token keyword\">return</span> devobj<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"绑定所有串口\"><a class=\"anchor\" href=\"#绑定所有串口\">#</a> 绑定所有串口</h2>\n<p>为了后面的过滤，这里必须把过滤设备和被绑定的设备（后面暂且称为真实设备吧，虽然这些设备未必真实）的设备对象指针保存起来。下面的代码使用两个数组保存。数组应该多大，取决于一台计算机上最多能有多少个串口。读者应该去查阅 IBM PC 标准，这里随意地写一个自认为足够大的数字。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 设置最大的串口数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">CCP_MAX_COM_ID</span> <span class=\"token expression\"><span class=\"token number\">32</span></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 保存所有的过滤设备指针</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">static</span> PDEVICE_OBJECT s_fltobj<span class=\"token punctuation\">[</span>CCP_MAX_COM_ID<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 保存所有真实设备的指针</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">static</span> PDEVICE_OBJECT s_nextobj<span class=\"token punctuation\">[</span>CCP_MAX_COM_ID<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 这个函数绑定所有的串口</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">ccpAttachAllComs</span><span class=\"token punctuation\">(</span>PDRIVER_OBJECT driver<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tUSHORT i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tPDEVICE_OBJECT com_ob<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tNTSTATUS status<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> CCP_MAX_COM_ID<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t<span class=\"token comment\">// 获得串口对象引用</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\tcom_ob <span class=\"token operator\">=</span> <span class=\"token function\">ccpOpenCom</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>com_ob<span class=\"token operator\">==</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t\t<span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t<span class=\"token comment\">// 在这里绑定。并不管绑定是否成功。</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t<span class=\"token function\">ccpAttachDevice</span><span class=\"token punctuation\">(</span>driver<span class=\"token punctuation\">,</span> com_ob<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>s_fltobj<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>s_nextobj<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>没有必要关心这个绑定是否成功，就算失败了，看一下  <code>s_fltobj</code>  即可。在这个数组中不为 <code>NULL</code>  的成员表示已经绑定了，为 <code>NULL</code>  的成员则是没有绑定或者绑定失败的。这个函数需要一个 <code>DRIVER_OBJECT</code>  的指针，这是本驱动的驱动对象，是系统在 <code>DriverEntry</code>  中传入的。</p>\n<h2 id=\"获取实际数据\"><a class=\"anchor\" href=\"#获取实际数据\">#</a> 获取实际数据</h2>\n<p>我们一直都在开发一个可以捕获串口上的数据的过滤程序。现在虚拟设备已经绑定了真正的串口设备，那么如何从虚拟设备得到串口上流过的数据呢？</p>\n<p>答案是根据 “请求”。</p>\n<p><strong>操作系统将请求发送给串口设备，请求中就含有要发送的数据，请求的回答中则含有要接收的数据。</strong></p>\n<p>下面分析这些 “请求”，以便得到实际的串口数据流。</p>\n<h3 id=\"请求的区分\"><a class=\"anchor\" href=\"#请求的区分\">#</a> 请求的区分</h3>\n<p>Windows 内核的开发者确定了很多数据结构，目前已经与 <code>DEVICE_OBJECT</code> （设备对象）、 <code>FILE_OBJECT</code> （文件对象）和 <code>DRIVER_OBJECT</code> （驱动对象）见了面。</p>\n<p>我们还需知道以下几点内容：</p>\n<ol>\n<li>每个驱动程序只有一个驱动对象。</li>\n<li>每个程序可以生成若干个设备对象，这些设备对象从属与一个驱动对象。</li>\n<li>若干个设备（它们可以属于不同的驱动）依次绑定形成一个设备栈，总是最顶端的设备先接受到请求。</li>\n</ol>\n<p><strong>需要注意的是：</strong>  <code>IRP</code>  是上层设备之间传递请求的常见数据结构，但绝对不是唯一的数据结构。传递请求还有很多其他的方法，不同的设备也可能使用不同的结构来传递请求。</p>\n<blockquote>\n<p>串口设备接收到的请求都是 IRP，因此只要对所有的 IRP 进行过滤，就可以得到串口上流过的所有数据。</p>\n<blockquote>\n<p>串口过滤时只需要关心两种请求：读请求和写请求。</p>\n<blockquote>\n<p>对于串口而言，读指的是接收数据，而写指的是发出数据。</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<blockquote>\n<p>串口也还有其他的请求，比如打开和关闭、设置波特率等。<br />\n但是我们的目标只是获得串口上流过的数据，而不关心打开 / 关闭和波特率是多少这样的问题，所以一概无视这类问题。</p>\n</blockquote>\n<p>请求可以通过 IRP 的<strong>主功能号</strong>进行区分。</p>\n<p>IRP 的<strong>主功能号</strong>是保存在 IRP 栈空间中的一个字节，用来标识这个 IRP 的功能大类。相应地，还有一个<strong>次功能号</strong>来标识这个 IRP 的功能细分小类。</p>\n<p>读请求的<strong>主功能号</strong>为 <code>IRP_MJ_READ</code> ，而写请求的<strong>主功能号</strong>为 <code>IRP_MJ_WRITE</code> 。</p>\n<p>下面的方法用于从一个 IRP 指针得到<strong>主功能号</strong>（这里的变量 irp 是一个 PIRP，也就是 IRP 的指针）。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 这里的 irpsp 称为 IRP 的栈空间，IoGetCurrentIrpStackLocation 用来获取当前栈空间</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 栈空间是非常重要的数据结构</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>PIO_STACK_LOCATION irpsp <span class=\"token operator\">=</span> <span class=\"token function\">IoGetCurrentIrpStackLocation</span><span class=\"token punctuation\">(</span>irp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>irpsp<span class=\"token operator\">-></span>MajorFunction <span class=\"token operator\">==</span> IRP_MJ_WRITE<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token comment\">// 如果是写请求……</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>irpsp<span class=\"token operator\">-></span>MajorFunction <span class=\"token operator\">==</span> IRP_MJ_READ<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token comment\">// 如果是读请求……</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"请求的结局\"><a class=\"anchor\" href=\"#请求的结局\">#</a> 请求的结局</h3>\n<p>对请求的过滤，最终的结局有三种。</p>\n<ol>\n<li>请求被允许通过了。</li>\n</ol>\n<p>过滤不做任何事情，或者简单地获取请求的一些信息。但是请求本身不受干扰，这样系统行为不会有变化。</p>\n<ol start=\"2\">\n<li>请求直接被否决了。</li>\n</ol>\n<p>过滤禁止这个请求通过，这个请求被返回了错误，下层驱动程序根本收不到这个请求。这样系统行为就变了，后果是常常看见上层应用程序弹出错误框提示权限错误或者读取文件失败之类的信息。</p>\n<ol start=\"3\">\n<li>过滤完成了这个请求。</li>\n</ol>\n<p>有时有这样的需求，比如一个读请求，我们想记录读到了什么。如果读请求还没有完成，那么如何知道到底会读到什么呢？只有让这个请求先完成再去记录。过滤完成这个请求时不一定要原封不动地完成，这个请求的参数可以被修改（比如把数据都加密）。</p>\n<hr />\n<p>当过滤了一个请求时，就必须把这个请求按照上面三种方法之一进行处理。</p>\n<p>当然，这些代码会写在一个处理函数中。这里先介绍这些处理方法的代码应该怎么写。</p>\n<p><em><strong>串口过滤要捕获两种数据：一种是发送出的数据（也就是写请求中的数据）；另一种是接收的数据（也就是读请求中的数据）。</strong></em></p>\n<p>为了简单起见，我们只捕获发送出的数据，这样，只需要采取第一种处理方法即可。</p>\n<p>这种处理最简单。</p>\n<p>首先调用  <code>IoSkipCurrentIrpStackLocation</code>  跳过当前栈空间；然后调用  <code>IoCallDriver</code>  把这个请求发送给真实的设备。</p>\n<p>请注意，因为真实的设备已经被过滤设备绑定，所以首先接收到 IRP 的是过滤设备的对象。</p>\n<p>代码如下（irp 是过滤到的请求）：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 跳过当前栈空间</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token function\">IoSkipCurrentIrpStackLocation</span><span class=\"token punctuation\">(</span>irp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token comment\">// 将请求发送到对应的真实设备。我们起起那么把真实设备都保存在了 s_nextobj</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token comment\">// 数组中。那么这里 i 应该是多少？这取决于现在的 IRP 发送到了那个过滤设备上。</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tstatus <span class=\"token operator\">=</span> <span class=\"token function\">IoCallDriver</span><span class=\"token punctuation\">(</span>s_nextobj<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> irp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"写请求的数据\"><a class=\"anchor\" href=\"#写请求的数据\">#</a> 写请求的数据</h3>\n<p>一个写请求（也就是串口一次发送出的数据）保存在哪里呢？我们要获取写数据的请求，自然要知道其是怎么保存的。</p>\n<p>关于 IRP 结构的描述，一共有三个地方可以描述缓冲区： <code>irp→MDLAddress</code>  、  <code>irp→UserBuffer</code>  和  <code>irp→AssociatedIrp.SystemBuffer</code> 。</p>\n<p>不同的 IO 类别，IRP 的缓冲区不同。<br />\n <code>SystemBuffer</code>  是一般用于比较简单且不追求效率情况的解决方案：把应用层（R3 层）内存空间中的缓冲数据拷贝到内核空间。</p>\n<p><code>UserBuffer</code>  则是最追求效率的解决方案。应用层的缓冲区地址直接放在 <code>UserBuffer</code>  里，在内核空间中访问。在当前进程和发送请求进程一致的情况下，内核访问应用层的内存空间当然是没错的。但是一旦内核进程已经切换，这个访问就结束了，访问 <code>UserBuffer</code>  当然是跳到其他进程空间中了。</p>\n<p>一个更简单的解决方案是把应用层的地址空间映射到内核空间，这需要在页表中增加一个映射。</p>\n<p>当然不需要编程者手工去修改页表，通过构造 <code>MDL</code>  就能实现这个功能。</p>\n<p><code>MDL</code>  可以翻译为 “内存描述符链”，但是按照业界传统习惯一律称之为 <code>MDL</code> 。</p>\n<p>IRP 中的 <code>MDLAddress</code>  域是一个 <code>MDL</code>  的指针，从这个 <code>MDL</code>  中可以读出一个内核空间的虚拟地址。这就弥补了 UserBuffer 的不足，同时比 SystemBuffer 的完全拷贝方法要轻量，因为这个内存实际上还是在老地方，没有拷贝。</p>\n<p><strong>回到串口的问题上，那么串口写请求到底用的是哪种方式呢？ 我们并不需要去知道是哪种方式。用下面的编码方式，无论采用哪种方式，都可以把数据正确地读出来</strong></p>\n<p>此外是缓冲区有多长的问题。对于一个写操作而言，长度可以通过如下方式获得： <code>ULONG len = irpsp-&gt;Parameters.Write.Length;</code></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 如果是写，先获得长度</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>ULONG len <span class=\"token operator\">=</span> irpsp<span class=\"token operator\">-></span>Parameters<span class=\"token punctuation\">.</span>Write<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 然后获得缓冲区</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>PUCHAR buffer <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>irp<span class=\"token operator\">-></span>MdlAddress <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  buffer <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PUCHAR<span class=\"token punctuation\">)</span><span class=\"token function\">MmGetSystemAddressForMdlSafe</span><span class=\"token punctuation\">(</span>irp<span class=\"token operator\">-></span>MdlAddress<span class=\"token punctuation\">,</span> NormalPagePriority<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  buffer <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PUCHAR<span class=\"token punctuation\">)</span>irp<span class=\"token operator\">-></span>UserBuffer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>buffer <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  buffer <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PUCHAR<span class=\"token punctuation\">)</span>irp<span class=\"token operator\">-></span>AssociatedIrp<span class=\"token punctuation\">.</span>SystemBuffer<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>涉及了  <code>MmGetSystemAddressForMdlSafe</code>  函数，可以查看 WDK 文档: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vemgtY24vd2luZG93cy1oYXJkd2FyZS9kcml2ZXJzL2RkaS93ZG0vbmYtd2RtLW1tZ2V0c3lzdGVtYWRkcmVzc2Zvcm1kbHNhZmU=\">https://docs.microsoft.com/zh-cn/windows-hardware/drivers/ddi/wdm/nf-wdm-mmgetsystemaddressformdlsafe</span></p>\n<h2 id=\"完整的代码\"><a class=\"anchor\" href=\"#完整的代码\">#</a> 完整的代码</h2>\n<p>接下来编写完整的串口过滤代码。</p>\n<h3 id=\"完整的分发函数\"><a class=\"anchor\" href=\"#完整的分发函数\">#</a> 完整的分发函数</h3>\n<p>基于前面的描述，我们来编写完整的分发函数。</p>\n<p>这个函数处理所有串口的写请求，所有从串口输出的数据都用 <code>DbgPrint</code>  打印出来。也就是说，读者打开 <code>DbgView.exe</code> ，就可以看到串口的输出数据了。</p>\n<p>这当然不如一些比较专业的串口嗅探软件，可以以这个例子为基础开发更专业的工具。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>NTSTATUS <span class=\"token function\">ccpDispatch</span><span class=\"token punctuation\">(</span>PDEVICE_OBJECT device<span class=\"token punctuation\">,</span> PIRP irp<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token comment\">// 这里的 irpsp 称为 IRP 的栈空间，IoGetCurrentIrpStackLocation 用来获取当前栈空间</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token comment\">// 栈空间是非常重要的数据结构</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tPIO_STACK_LOCATION irpsp <span class=\"token operator\">=</span> <span class=\"token function\">IoGetCurrentIrpStackLocation</span><span class=\"token punctuation\">(</span>irp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tNTSTATUS status<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tULONG i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> CCP_MAX_COM_ID<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s_fltobj<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> device<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t\t<span class=\"token comment\">// 所有电源操作，全部直接放过</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>irpsp<span class=\"token operator\">-></span>MajorFunction <span class=\"token operator\">==</span> IRP_MJ_POWER<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t\t\t<span class=\"token comment\">// 直接发送，然后返回说已经被处理了</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t\t\t<span class=\"token function\">PoStartNextPowerIrp</span><span class=\"token punctuation\">(</span>irp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t\t\t<span class=\"token function\">IoSkipCurrentIrpStackLocation</span><span class=\"token punctuation\">(</span>irp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">PoCallDriver</span><span class=\"token punctuation\">(</span>s_nextobj<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> irp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t\t<span class=\"token comment\">// 我们只过滤写请求。</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t\t<span class=\"token comment\">// 写请求，获得缓冲区及其长度，然后打印。</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>irpsp<span class=\"token operator\">-></span>MajorFunction <span class=\"token operator\">==</span> IRP_MJ_WRITE<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t\t\t<span class=\"token comment\">// 如果是写请求……</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t\t\t<span class=\"token comment\">// 如果是写，先获得长度</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t\t\tULONG len <span class=\"token operator\">=</span> irpsp<span class=\"token operator\">-></span>Parameters<span class=\"token punctuation\">.</span>Write<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t\t\t<span class=\"token comment\">// 然后获得缓冲区</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t\t\tPUCHAR buffer <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>irp<span class=\"token operator\">-></span>MdlAddress <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\t\t\t\tbuffer <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PUCHAR<span class=\"token punctuation\">)</span><span class=\"token function\">MmGetSystemAddressForMdlSafe</span><span class=\"token punctuation\">(</span>irp<span class=\"token operator\">-></span>MdlAddress<span class=\"token punctuation\">,</span> NormalPagePriority<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\t\t\t\tbuffer <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PUCHAR<span class=\"token punctuation\">)</span>irp<span class=\"token operator\">-></span>UserBuffer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>buffer <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\t\t\t\tbuffer <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PUCHAR<span class=\"token punctuation\">)</span>irp<span class=\"token operator\">-></span>AssociatedIrp<span class=\"token punctuation\">.</span>SystemBuffer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\t\t\t<span class=\"token comment\">// 打印内容</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\t\t\t\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"comcap:Send Data:%2x\\r\\n\"</span><span class=\"token punctuation\">,</span> buffer<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t\t\t<span class=\"token comment\">//else if (irpsp->MajorFunction == IRP_MJ_READ)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t\t\t<span class=\"token comment\">//&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t\t\t<span class=\"token comment\">//\t// 如果是读请求……</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t\t\t<span class=\"token comment\">//&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t\t\t<span class=\"token comment\">// 这些请求直接下发执行即可。我们并不禁止或者改变它。</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t\t\t<span class=\"token function\">IoSkipCurrentIrpStackLocation</span><span class=\"token punctuation\">(</span>irp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">IoCallDriver</span><span class=\"token punctuation\">(</span>s_nextobj<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> irp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t<span class=\"token comment\">// 如果根本就不在被绑定的设备中，那是有问题的，直接返回参数错误。</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\tirp<span class=\"token operator\">-></span>IoStatus<span class=\"token punctuation\">.</span>Information <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\tirp<span class=\"token operator\">-></span>IoStatus<span class=\"token punctuation\">.</span>Status <span class=\"token operator\">=</span> STATUS_INVALID_PARAMETER<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t<span class=\"token function\">IoCompleteRequest</span><span class=\"token punctuation\">(</span>irp<span class=\"token punctuation\">,</span> IO_NO_INCREMENT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t<span class=\"token keyword\">return</span> STATUS_SUCCESS<span class=\"token punctuation\">;</span>\t</pre></td></tr><tr><td data-num=\"65\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"卸载函数\"><a class=\"anchor\" href=\"#卸载函数\">#</a> 卸载函数</h3>\n<p>我们应该在卸载函数中完成解除绑定的功能，否则，一旦卸载就会蓝屏。</p>\n<p>这里涉及三个内核 API：</p>\n<p><code>IoDetachDevice</code>  ，负责将绑定的设备 解 除 绑 定 ；<br />\n <code>IoDeleteDevice</code>  ， 负责把我们前面用  <code>IoCreateDevice</code>  生成的设备删除以回收内存；<br />\n <code>KeDelayExecutionThread</code>  ，纯粹负责延时。</p>\n<p>这三个函数的参数相对简单，这里就不详细介绍了。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span>  <span class=\"token macro-name\">DELAY_ONE_MICROSECOND</span>  <span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span>  <span class=\"token macro-name\">DELAY_ONE_MILLISECOND</span> <span class=\"token expression\"><span class=\"token punctuation\">(</span>DELAY_ONE_MICROSECOND<span class=\"token operator\">*</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span>  <span class=\"token macro-name\">DELAY_ONE_SECOND</span> <span class=\"token expression\"><span class=\"token punctuation\">(</span>DELAY_ONE_MILLISECOND<span class=\"token operator\">*</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>VOID <span class=\"token function\">DriverUnload</span><span class=\"token punctuation\">(</span>PDRIVER_OBJECT pDriver<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是驱动，我卸载了\\t\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tULONG i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tLARGE_INTEGER interval<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token comment\">// 首先解除绑定</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> CCP_MAX_COM_ID<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s_nextobj<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t\t<span class=\"token function\">IoDetachDevice</span><span class=\"token punctuation\">(</span>s_nextobj<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token comment\">// 睡眠 5 秒。等待所有 irp 处理结束</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\tinterval<span class=\"token punctuation\">.</span>QuadPart <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">5</span> <span class=\"token operator\">*</span> <span class=\"token number\">1000</span> <span class=\"token operator\">*</span> DELAY_ONE_MILLISECOND<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token function\">KeDelayExecutionThread</span><span class=\"token punctuation\">(</span>KernelMode<span class=\"token punctuation\">,</span> FALSE<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>interval<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token comment\">// 删除这些设备</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> CCP_MAX_COM_ID<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s_fltobj<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t\t<span class=\"token function\">IoDeleteDevice</span><span class=\"token punctuation\">(</span>s_fltobj<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"驱动入口函数\"><a class=\"anchor\" href=\"#驱动入口函数\">#</a> 驱动入口函数</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>NTSTATUS <span class=\"token function\">DriverEntry</span><span class=\"token punctuation\">(</span>PDRIVER_OBJECT pDriver<span class=\"token punctuation\">,</span> PUNICODE_STRING pRegPath<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token comment\">// 卸载函数</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tpDriver<span class=\"token operator\">-></span>DriverUnload <span class=\"token operator\">=</span> DriverUnload<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是驱动,我运行了\\t\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token class-name\">size_t</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token comment\">// 所有的分发函数都设置成一样的。</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> IRP_MJ_MAXIMUM_FUNCTION<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\tpDriver<span class=\"token operator\">-></span>MajorFunction<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ccpDispatch<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token comment\">// 绑定所有串口</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token function\">ccpAttachAllComs</span><span class=\"token punctuation\">(</span>pDriver<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token keyword\">return</span> STATUS_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"全部代码\"><a class=\"anchor\" href=\"#全部代码\">#</a> 全部代码</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;ntddk.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 因为用到了 RtlStringCchPrintfW，所以必须包含头文件 ntstrsafe.h</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 定义 NTSTRSAFE_LIB 是为了使用 ntstrsafe 静态库，这样才能兼容 Windows 2000</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// #define NTSTRSAFE_LIB</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;ntstrsafe.h></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>NTSTATUS <span class=\"token function\">ccpAttachDevice</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tPDRIVER_OBJECT driver<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tPDEVICE_OBJECT oldobj<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tPDEVICE_OBJECT<span class=\"token operator\">*</span> fltobj<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tPDEVICE_OBJECT<span class=\"token operator\">*</span> next</pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tNTSTATUS status<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tPDEVICE_OBJECT topdev <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token comment\">// 生成设备，然后绑定</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\tstatus <span class=\"token operator\">=</span> <span class=\"token function\">IoCreateDevice</span><span class=\"token punctuation\">(</span>driver<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t<span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\toldobj<span class=\"token operator\">-></span>DeviceType<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t<span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\tFALSE<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\tfltobj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>status<span class=\"token operator\">!=</span> STATUS_SUCCESS<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> status<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token comment\">// 拷贝重要标志位</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>oldobj<span class=\"token operator\">-></span>Flags <span class=\"token operator\">&amp;</span> DO_BUFFERED_IO<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\t<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>fltobj<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>Flags <span class=\"token operator\">|=</span> DO_BUFFERED_IO<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>oldobj<span class=\"token operator\">-></span>Flags <span class=\"token operator\">&amp;</span> DO_DIRECT_IO<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\t<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>fltobj<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>Flags <span class=\"token operator\">|=</span> DO_DIRECT_IO<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>oldobj<span class=\"token operator\">-></span>Characteristics <span class=\"token operator\">&amp;</span> FILE_DEVICE_SECURE_OPEN<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\t<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>fltobj<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>Characteristics <span class=\"token operator\">|=</span> FILE_DEVICE_SECURE_OPEN<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>fltobj<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>Flags <span class=\"token operator\">|=</span> DO_POWER_PAGABLE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t<span class=\"token comment\">// 将一个设备绑定到另一个设备上</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\tstatus <span class=\"token operator\">=</span> <span class=\"token function\">IoAttachDeviceToDeviceStackSafe</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>fltobj<span class=\"token punctuation\">,</span> oldobj<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>topdev<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t<span class=\"token comment\">// topdev = IoAttachDeviceToDeviceStack(*fltobj, oldobj);</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>status <span class=\"token operator\">!=</span> STATUS_SUCCESS<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t\t<span class=\"token comment\">// 如果绑定失败，销毁设备，返回错误</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t\t<span class=\"token function\">IoDeleteDevice</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>fltobj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t\t<span class=\"token operator\">*</span>fltobj <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> status<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t<span class=\"token operator\">*</span>next <span class=\"token operator\">=</span> topdev<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t<span class=\"token comment\">// 设置这个设备已经启动</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>fltobj<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>Flags <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>fltobj<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>Flags <span class=\"token operator\">&amp;</span> <span class=\"token operator\">~</span>DO_DEVICE_INITIALIZING<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\t<span class=\"token keyword\">return</span> STATUS_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre></pre></td></tr><tr><td data-num=\"70\"></td><td><pre></pre></td></tr><tr><td data-num=\"71\"></td><td><pre><span class=\"token comment\">// 打开一个端口设备</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>PDEVICE_OBJECT <span class=\"token function\">ccpOpenCom</span><span class=\"token punctuation\">(</span>ULONG id<span class=\"token punctuation\">,</span> NTSTATUS <span class=\"token operator\">*</span>status<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"73\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>\t<span class=\"token comment\">// 外面输入的是串口 id，这里改写成字符串的形式</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\tUNICODE_STRING name_str<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>\t<span class=\"token keyword\">static</span> WCHAR name<span class=\"token punctuation\">[</span><span class=\"token number\">32</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>\tPFILE_OBJECT fileobj <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>\tPDEVICE_OBJECT devobj <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>\t<span class=\"token comment\">// 输入字符串</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>\t<span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>WCHAR<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>\t<span class=\"token function\">RtlStringCchPrintfW</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>\t\tname<span class=\"token punctuation\">,</span> <span class=\"token number\">32</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>\t\tL<span class=\"token string\">\"\\\\Device\\\\Serial%d\"</span><span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>\t<span class=\"token function\">RtlInitUnicodeString</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>name_str<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>\t<span class=\"token comment\">// 打开设备对象</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>\t<span class=\"token operator\">*</span>status <span class=\"token operator\">=</span> <span class=\"token function\">IoGetDeviceObjectPointer</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>name_str<span class=\"token punctuation\">,</span> FILE_ALL_ACCESS<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>fileobj<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>devobj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>status <span class=\"token operator\">==</span> STATUS_SUCCESS<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>\t\t<span class=\"token comment\">// 没有用到文件对象，解除对其引用</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>\t\t<span class=\"token function\">ObDereferenceObject</span><span class=\"token punctuation\">(</span>fileobj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>\t<span class=\"token keyword\">return</span> devobj<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre></pre></td></tr><tr><td data-num=\"97\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre></pre></td></tr><tr><td data-num=\"99\"></td><td><pre></pre></td></tr><tr><td data-num=\"100\"></td><td><pre><span class=\"token comment\">// 设置最大的串口数</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">CCP_MAX_COM_ID</span> <span class=\"token expression\"><span class=\"token number\">32</span></span></span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre></pre></td></tr><tr><td data-num=\"103\"></td><td><pre><span class=\"token comment\">// 保存所有的过滤设备指针</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre><span class=\"token keyword\">static</span> PDEVICE_OBJECT s_fltobj<span class=\"token punctuation\">[</span>CCP_MAX_COM_ID<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre></pre></td></tr><tr><td data-num=\"106\"></td><td><pre><span class=\"token comment\">// 保存所有真实设备的指针</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre><span class=\"token keyword\">static</span> PDEVICE_OBJECT s_nextobj<span class=\"token punctuation\">[</span>CCP_MAX_COM_ID<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre></pre></td></tr><tr><td data-num=\"109\"></td><td><pre><span class=\"token comment\">// 这个函数绑定所有的串口</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre></pre></td></tr><tr><td data-num=\"111\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">ccpAttachAllComs</span><span class=\"token punctuation\">(</span>PDRIVER_OBJECT driver<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>\tUSHORT i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>\tPDEVICE_OBJECT com_ob<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>\tNTSTATUS status<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> CCP_MAX_COM_ID<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>\t\t<span class=\"token comment\">// 获得串口对象引用</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>\t\tcom_ob <span class=\"token operator\">=</span> <span class=\"token function\">ccpOpenCom</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>com_ob<span class=\"token operator\">==</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>\t\t\t<span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"125\"></td><td><pre>\t\t<span class=\"token comment\">// 在这里绑定。并不管绑定是否成功。</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>\t\t<span class=\"token function\">ccpAttachDevice</span><span class=\"token punctuation\">(</span>driver<span class=\"token punctuation\">,</span> com_ob<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>s_fltobj<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>s_nextobj<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"128\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre></pre></td></tr><tr><td data-num=\"130\"></td><td><pre></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>NTSTATUS <span class=\"token function\">ccpDispatch</span><span class=\"token punctuation\">(</span>PDEVICE_OBJECT device<span class=\"token punctuation\">,</span> PIRP irp<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>\t<span class=\"token comment\">// 这里的 irpsp 称为 IRP 的栈空间，IoGetCurrentIrpStackLocation 用来获取当前栈空间</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>\t<span class=\"token comment\">// 栈空间是非常重要的数据结构</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>\tPIO_STACK_LOCATION irpsp <span class=\"token operator\">=</span> <span class=\"token function\">IoGetCurrentIrpStackLocation</span><span class=\"token punctuation\">(</span>irp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>\tNTSTATUS status<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>\tULONG i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> CCP_MAX_COM_ID<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s_fltobj<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> device<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>\t\t\t<span class=\"token comment\">// 所有电源操作，全部直接放过</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>irpsp<span class=\"token operator\">-></span>MajorFunction <span class=\"token operator\">==</span> IRP_MJ_POWER<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre>\t\t\t\t<span class=\"token comment\">// 直接发送，然后返回说已经被处理了</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>\t\t\t\t<span class=\"token function\">PoStartNextPowerIrp</span><span class=\"token punctuation\">(</span>irp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>\t\t\t\t<span class=\"token function\">IoSkipCurrentIrpStackLocation</span><span class=\"token punctuation\">(</span>irp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">PoCallDriver</span><span class=\"token punctuation\">(</span>s_nextobj<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> irp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"151\"></td><td><pre></pre></td></tr><tr><td data-num=\"152\"></td><td><pre>\t\t\t<span class=\"token comment\">// 我们只过滤写请求。</span></pre></td></tr><tr><td data-num=\"153\"></td><td><pre></pre></td></tr><tr><td data-num=\"154\"></td><td><pre>\t\t\t<span class=\"token comment\">// 写请求，获得缓冲区及其长度，然后打印。</span></pre></td></tr><tr><td data-num=\"155\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>irpsp<span class=\"token operator\">-></span>MajorFunction <span class=\"token operator\">==</span> IRP_MJ_WRITE<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"156\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"157\"></td><td><pre>\t\t\t\t<span class=\"token comment\">// 如果是写请求……</span></pre></td></tr><tr><td data-num=\"158\"></td><td><pre>\t\t\t\t<span class=\"token comment\">// 如果是写，先获得长度</span></pre></td></tr><tr><td data-num=\"159\"></td><td><pre>\t\t\t\tULONG len <span class=\"token operator\">=</span> irpsp<span class=\"token operator\">-></span>Parameters<span class=\"token punctuation\">.</span>Write<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"160\"></td><td><pre>\t\t\t\t<span class=\"token comment\">// 然后获得缓冲区</span></pre></td></tr><tr><td data-num=\"161\"></td><td><pre>\t\t\t\tPUCHAR buffer <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"162\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>irp<span class=\"token operator\">-></span>MdlAddress <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"163\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"164\"></td><td><pre>\t\t\t\t\tbuffer <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PUCHAR<span class=\"token punctuation\">)</span><span class=\"token function\">MmGetSystemAddressForMdlSafe</span><span class=\"token punctuation\">(</span>irp<span class=\"token operator\">-></span>MdlAddress<span class=\"token punctuation\">,</span> NormalPagePriority<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"165\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"166\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"167\"></td><td><pre>\t\t\t\t\tbuffer <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PUCHAR<span class=\"token punctuation\">)</span>irp<span class=\"token operator\">-></span>UserBuffer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"168\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>buffer <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"169\"></td><td><pre>\t\t\t\t\tbuffer <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PUCHAR<span class=\"token punctuation\">)</span>irp<span class=\"token operator\">-></span>AssociatedIrp<span class=\"token punctuation\">.</span>SystemBuffer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"170\"></td><td><pre></pre></td></tr><tr><td data-num=\"171\"></td><td><pre>\t\t\t\t<span class=\"token comment\">// 打印内容</span></pre></td></tr><tr><td data-num=\"172\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"173\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"174\"></td><td><pre>\t\t\t\t\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"comcap:Send Data:%2x\\r\\n\"</span><span class=\"token punctuation\">,</span> buffer<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"175\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"176\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"177\"></td><td><pre></pre></td></tr><tr><td data-num=\"178\"></td><td><pre>\t\t\t<span class=\"token comment\">//else if (irpsp->MajorFunction == IRP_MJ_READ)</span></pre></td></tr><tr><td data-num=\"179\"></td><td><pre>\t\t\t<span class=\"token comment\">//&#123;</span></pre></td></tr><tr><td data-num=\"180\"></td><td><pre>\t\t\t<span class=\"token comment\">//\t// 如果是读请求……</span></pre></td></tr><tr><td data-num=\"181\"></td><td><pre>\t\t\t<span class=\"token comment\">//&#125;</span></pre></td></tr><tr><td data-num=\"182\"></td><td><pre></pre></td></tr><tr><td data-num=\"183\"></td><td><pre>\t\t\t<span class=\"token comment\">// 这些请求直接下发执行即可。我们并不禁止或者改变它。</span></pre></td></tr><tr><td data-num=\"184\"></td><td><pre></pre></td></tr><tr><td data-num=\"185\"></td><td><pre>\t\t\t<span class=\"token function\">IoSkipCurrentIrpStackLocation</span><span class=\"token punctuation\">(</span>irp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"186\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">IoCallDriver</span><span class=\"token punctuation\">(</span>s_nextobj<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> irp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"187\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"188\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"189\"></td><td><pre></pre></td></tr><tr><td data-num=\"190\"></td><td><pre>\t<span class=\"token comment\">// 如果根本就不在被绑定的设备中，那是有问题的，直接返回参数错误。</span></pre></td></tr><tr><td data-num=\"191\"></td><td><pre>\tirp<span class=\"token operator\">-></span>IoStatus<span class=\"token punctuation\">.</span>Information <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"192\"></td><td><pre>\tirp<span class=\"token operator\">-></span>IoStatus<span class=\"token punctuation\">.</span>Status <span class=\"token operator\">=</span> STATUS_INVALID_PARAMETER<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"193\"></td><td><pre>\t<span class=\"token function\">IoCompleteRequest</span><span class=\"token punctuation\">(</span>irp<span class=\"token punctuation\">,</span> IO_NO_INCREMENT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"194\"></td><td><pre>\t<span class=\"token keyword\">return</span> STATUS_SUCCESS<span class=\"token punctuation\">;</span>\t</pre></td></tr><tr><td data-num=\"195\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"196\"></td><td><pre></pre></td></tr><tr><td data-num=\"197\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span>  <span class=\"token macro-name\">DELAY_ONE_MICROSECOND</span>  <span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"198\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span>  <span class=\"token macro-name\">DELAY_ONE_MILLISECOND</span> <span class=\"token expression\"><span class=\"token punctuation\">(</span>DELAY_ONE_MICROSECOND<span class=\"token operator\">*</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"199\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span>  <span class=\"token macro-name\">DELAY_ONE_SECOND</span> <span class=\"token expression\"><span class=\"token punctuation\">(</span>DELAY_ONE_MILLISECOND<span class=\"token operator\">*</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"200\"></td><td><pre></pre></td></tr><tr><td data-num=\"201\"></td><td><pre>VOID <span class=\"token function\">DriverUnload</span><span class=\"token punctuation\">(</span>PDRIVER_OBJECT pDriver<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"202\"></td><td><pre></pre></td></tr><tr><td data-num=\"203\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是驱动，我卸载了\\t\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"204\"></td><td><pre></pre></td></tr><tr><td data-num=\"205\"></td><td><pre>\tULONG i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"206\"></td><td><pre>\tLARGE_INTEGER interval<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"207\"></td><td><pre></pre></td></tr><tr><td data-num=\"208\"></td><td><pre>\t<span class=\"token comment\">// 首先解除绑定</span></pre></td></tr><tr><td data-num=\"209\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> CCP_MAX_COM_ID<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"210\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"211\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s_nextobj<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"212\"></td><td><pre>\t\t\t<span class=\"token function\">IoDetachDevice</span><span class=\"token punctuation\">(</span>s_nextobj<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"213\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"214\"></td><td><pre></pre></td></tr><tr><td data-num=\"215\"></td><td><pre>\t<span class=\"token comment\">// 睡眠 5 秒。等待所有 irp 处理结束</span></pre></td></tr><tr><td data-num=\"216\"></td><td><pre>\tinterval<span class=\"token punctuation\">.</span>QuadPart <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">5</span> <span class=\"token operator\">*</span> <span class=\"token number\">1000</span> <span class=\"token operator\">*</span> DELAY_ONE_MILLISECOND<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"217\"></td><td><pre>\t<span class=\"token function\">KeDelayExecutionThread</span><span class=\"token punctuation\">(</span>KernelMode<span class=\"token punctuation\">,</span> FALSE<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>interval<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"218\"></td><td><pre></pre></td></tr><tr><td data-num=\"219\"></td><td><pre>\t<span class=\"token comment\">// 删除这些设备</span></pre></td></tr><tr><td data-num=\"220\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> CCP_MAX_COM_ID<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"221\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"222\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s_fltobj<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"223\"></td><td><pre>\t\t\t<span class=\"token function\">IoDeleteDevice</span><span class=\"token punctuation\">(</span>s_fltobj<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"224\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"225\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"226\"></td><td><pre></pre></td></tr><tr><td data-num=\"227\"></td><td><pre></pre></td></tr><tr><td data-num=\"228\"></td><td><pre></pre></td></tr><tr><td data-num=\"229\"></td><td><pre></pre></td></tr><tr><td data-num=\"230\"></td><td><pre>NTSTATUS <span class=\"token function\">DriverEntry</span><span class=\"token punctuation\">(</span>PDRIVER_OBJECT pDriver<span class=\"token punctuation\">,</span> PUNICODE_STRING pRegPath<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"231\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"232\"></td><td><pre>\t<span class=\"token comment\">// 卸载函数</span></pre></td></tr><tr><td data-num=\"233\"></td><td><pre>\tpDriver<span class=\"token operator\">-></span>DriverUnload <span class=\"token operator\">=</span> DriverUnload<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"234\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"235\"></td><td><pre>\t<span class=\"token function\">DbgBreakPoint</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"236\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是驱动,我运行了\\t\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"237\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"238\"></td><td><pre>\t<span class=\"token class-name\">size_t</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"239\"></td><td><pre>\t<span class=\"token comment\">// 所有的分发函数都设置成一样的。</span></pre></td></tr><tr><td data-num=\"240\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> IRP_MJ_MAXIMUM_FUNCTION<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"241\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"242\"></td><td><pre>\t\tpDriver<span class=\"token operator\">-></span>MajorFunction<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ccpDispatch<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"243\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"244\"></td><td><pre>\t<span class=\"token comment\">// 绑定所有串口</span></pre></td></tr><tr><td data-num=\"245\"></td><td><pre>\t<span class=\"token function\">ccpAttachAllComs</span><span class=\"token punctuation\">(</span>pDriver<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"246\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"247\"></td><td><pre></pre></td></tr><tr><td data-num=\"248\"></td><td><pre>\t<span class=\"token keyword\">return</span> STATUS_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"249\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "串口",
                "过滤"
            ]
        },
        {
            "id": "https://or0kit.github.io/Bin/Core/Drive-Development/%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91-%E5%86%85%E6%A0%B8%E9%87%8D%E8%BD%BD/",
            "url": "https://or0kit.github.io/Bin/Core/Drive-Development/%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91-%E5%86%85%E6%A0%B8%E9%87%8D%E8%BD%BD/",
            "title": "驱动开发-内核重载",
            "date_published": "2022-03-30T02:18:07.000Z",
            "content_html": "<h1 id=\"重载内核解决什么问题\"><a class=\"anchor\" href=\"#重载内核解决什么问题\">#</a> 重载内核解决什么问题？</h1>\n<p>内核中的很多函数被层层 HOOK，重载一份内核可以绕过这些 HOOK。</p>\n<h1 id=\"重载内核的步骤\"><a class=\"anchor\" href=\"#重载内核的步骤\">#</a> 重载内核的步骤</h1>\n<p>&lt;1&gt; 申请内存，按内存对齐展开</p>\n<p>&lt;2&gt; 根据重定位表修复全局变量</p>\n<p>&lt;3&gt; 修复 IAT 表</p>\n<p>这些都是 PE 的知识，这样内核文件在高 2G 内存中就又加载了一份。</p>\n<p>但如何让操作系统走我们新内核文件的函数呢？</p>\n<p>&lt;1&gt; 找到新加载的内核的系统服务表，并且填充</p>\n<p>&lt;2&gt; Hook KiFastCallEntry 让系统调用走我们的系统服务表。</p>\n<p>KiFastCallEntry 中有一行汇编指令是查找系统服务表。</p>\n<h1 id=\"重载内核的弊端\"><a class=\"anchor\" href=\"#重载内核的弊端\">#</a> 重载内核的弊端</h1>\n<p>&lt;1&gt; 改动太大，即使抹去 PE 指纹也无法完全隐形。</p>\n<p>&lt;2&gt; 最好的办法不是重载内核，而是需要什么函数自己来实现。</p>\n<h1 id=\"代码实现重载xp的内核\"><a class=\"anchor\" href=\"#代码实现重载xp的内核\">#</a> 代码实现重载 xp 的内核。</h1>\n<p>使用内核函数操作文件、内存。</p>\n<p>写的时候网上冲浪发现了一篇博客：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYnMucGVkaXkuY29tL3RocmVhZC0yNTM0MjUuaHRt\">https://bbs.pediy.com/thread-253425.htm</span>，这个博主说了一些关于重定位的事情：</p>\n<p><strong>关键难点是重定位，由于我们自己重载的新内核没有执行 DriverEntry, 数据都没有初始化，所以在重定位的时候凡是指向数据的地址都要重定位到老内核，是代码的地址就正常重定位到新内核。</strong></p>\n<p>重载后可能会不稳定，导致蓝屏。</p>\n<h2 id=\"第一步内核文件的全路径\"><a class=\"anchor\" href=\"#第一步内核文件的全路径\">#</a> 第一步：内核文件的全路径</h2>\n<p>遍历内核模块，找到内核文件。</p>\n<p><strong>这里我遇到了一个问题没有解决不了。</strong></p>\n<p>通过内核模块遍历获取内核文件的全路径，发现前面没根路径，于是就把根路径添加上了，一直调用  <code>ZwCreateFile</code>  失败。<br />\n先贴在这里了。</p>\n<p>信息如下:</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>我是驱动，我运行了 </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\\??\\C:\\WINDOWS\\system32\\ntkrnlpa.exe </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>打开文件失败</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>0 </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>C0000033 </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>0</pre></td></tr></table></figure><p>一直报  <code>C0000033</code>   <code>STATUS_OBJECT_NAME_INVALID</code>  错误，好像是路径有问题？</p>\n<p>于是我直接把路径写死了不这样获取了。</p>\n<h2 id=\"第二步-修复重定位表和iat\"><a class=\"anchor\" href=\"#第二步-修复重定位表和iat\">#</a> 第二步： 修复重定位表和 IAT</h2>\n<p>下面就要修复重定位表和 IAT 了。</p>\n<p>修复重定位表这里我也学着看雪的那个博主的判断一下要修复的地址是否在可执行的节中，如果不在则不管这个地址了，让其仍然去老内核中。</p>\n<p><strong>后来实验的时候发现这样判断不行，好多节都有可执行的属性，于是我就只修复.text 中的数据了。</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>BOOLEAN <span class=\"token function\">AddressIsExecuteable</span><span class=\"token punctuation\">(</span>IN ULONG pAddress<span class=\"token punctuation\">,</span> IN PIMAGE_SECTION_HEADER pSectionHeader<span class=\"token punctuation\">,</span> IN ULONG ulSectionNum<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tBOOLEAN bFlag <span class=\"token operator\">=</span> FALSE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token comment\">// 循环判断数据在哪个节中</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> t <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> t <span class=\"token operator\">&lt;</span> ulSectionNum<span class=\"token punctuation\">;</span> t<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span>\t\t</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token comment\">// 节的起始和结束位置</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\tULONG Begin <span class=\"token operator\">=</span> pSectionHeader<span class=\"token punctuation\">[</span>t<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>VirtualAddress<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\tULONG End <span class=\"token operator\">=</span> pSectionHeader<span class=\"token punctuation\">[</span>t<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>VirtualAddress <span class=\"token operator\">+</span> pSectionHeader<span class=\"token punctuation\">[</span>t<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>Misc<span class=\"token punctuation\">.</span>VirtualSize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t<span class=\"token comment\">//DbgPrint(\"pSectionHeader:[%X]\\t\\n\", pSectionHeader);</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t<span class=\"token comment\">//DbgPrint(\"Begin:[%X]\\t\\n\", Begin);</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t<span class=\"token comment\">//DbgPrint(\"End:[%X]\\t\\n\", End);</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t<span class=\"token comment\">//DbgPrint(\"pSectionHeader[t].Characteristics:[%X]\\t\\n\", pSectionHeader[t].Characteristics);</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t<span class=\"token comment\">//__asm int 3;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t<span class=\"token comment\">// 判断</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pAddress <span class=\"token operator\">>=</span> Begin <span class=\"token operator\">&amp;&amp;</span> pAddress <span class=\"token operator\">&lt;=</span> End<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span>\t</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t\t<span class=\"token comment\">// 只修复 .text 节区</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">strcmp</span><span class=\"token punctuation\">(</span>pSectionHeader<span class=\"token punctuation\">[</span>t<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">,</span> <span class=\"token string\">\".text\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t\t\t<span class=\"token comment\">//DbgPrint(\"pSectionHeader[t].Name:[%s]\\t\\n\", pSectionHeader[t].Name);</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t\t\t<span class=\"token comment\">//__asm int 3;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">return</span> TRUE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t\t<span class=\"token comment\">// bFlag = ((pSectionHeader[t].Characteristics &amp; 0x20000020) == 0x20000020) ? TRUE : FALSE;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> bFlag<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token comment\">//DbgPrint(\"pAddress:[%X] not in the section \\t\\n\", pAddress);</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t<span class=\"token keyword\">return</span> bFlag<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"修复重定位表\"><a class=\"anchor\" href=\"#修复重定位表\">#</a> 修复重定位表</h3>\n<blockquote>\n<p><strong>这里我碰到了一个坑，我在用  <code>LDR_DATA_TABLE_ENTRY</code>  结构体中的遍历内核文件时，也顺便把其中记录的内核加载基址，也获取了一下，我以为这个就是内核文件的 ImageBase，可是并不是，内核在启动的时候加载基址也是变化的。内核文件的 ImageBase 也是 0x400000。重定位时需要注意！</strong></p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>NTSTATUS <span class=\"token function\">RepairRelocation</span><span class=\"token punctuation\">(</span>IN OUT PVOID pKernelImageBuffer<span class=\"token punctuation\">,</span> IN ULONG KernelBase<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_TYPE</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\tUSHORT Offset <span class=\"token operator\">:</span> <span class=\"token number\">12</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\tUSHORT Type <span class=\"token operator\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span>TypeOffset<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span> PTypeOffset<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tNTSTATUS status <span class=\"token operator\">=</span> STATUS_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token comment\">// PE 头 查找重定位表</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tPIMAGE_DOS_HEADER pDosHeader <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PIMAGE_DOS_HEADER<span class=\"token punctuation\">)</span>pKernelImageBuffer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tPIMAGE_NT_HEADERS pNtHeader <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PIMAGE_NT_HEADERS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>pDosHeader<span class=\"token operator\">-></span>e_lfanew <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>ULONG<span class=\"token punctuation\">)</span>pKernelImageBuffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\tPIMAGE_FILE_HEADER pFileHeader <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PIMAGE_FILE_HEADER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ULONG<span class=\"token punctuation\">)</span>pNtHeader <span class=\"token operator\">+</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tPIMAGE_OPTIONAL_HEADER pOptionHeader <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PIMAGE_OPTIONAL_HEADER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ULONG<span class=\"token punctuation\">)</span>pFileHeader <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>ULONG<span class=\"token punctuation\">)</span>IMAGE_SIZEOF_FILE_HEADER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tPIMAGE_SECTION_HEADER pSectionHeader <span class=\"token operator\">=</span> <span class=\"token function\">IMAGE_FIRST_SECTION</span><span class=\"token punctuation\">(</span>pNtHeader<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tPIMAGE_BASE_RELOCATION pReloc <span class=\"token operator\">=</span> pOptionHeader<span class=\"token operator\">-></span>DataDirectory<span class=\"token punctuation\">[</span>IMAGE_DIRECTORY_ENTRY_BASERELOC<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>VirtualAddress <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>ULONG<span class=\"token punctuation\">)</span>pDosHeader<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token comment\">// ULONG Items = 0, Items1 = 0, Items2 = 0;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token comment\">//  遍历重定位表，并对目标代码进行重定位</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>pReloc<span class=\"token operator\">-></span>SizeOfBlock <span class=\"token operator\">&amp;&amp;</span> pReloc<span class=\"token operator\">-></span>VirtualAddress<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t<span class=\"token comment\">// 重定位项数目</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\tULONG ulCount <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>pReloc<span class=\"token operator\">-></span>SizeOfBlock <span class=\"token operator\">-</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t<span class=\"token comment\">// 需要定位数据的起始 RVA</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\tULONG ulRva <span class=\"token operator\">=</span> pReloc<span class=\"token operator\">-></span>VirtualAddress<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t<span class=\"token comment\">// 解析需要重定位的项数</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\tPTypeOffset pRelocationArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PTypeOffset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>pReloc <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> ulCount<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pRelocationArray<span class=\"token operator\">-></span>Type <span class=\"token operator\">==</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\t\t\t<span class=\"token comment\">// 需要重定位的数据 RVA = VirtualAddress + TypeOffset 低 12 位</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\t\t\t<span class=\"token comment\">// 获取要修改的地址的 RVA</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\t\t\tULONG RepairAddrOffset <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>ulRva <span class=\"token operator\">+</span> pRelocationArray<span class=\"token operator\">-></span>Offset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\t\t\tPULONG pRepairAddr <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PULONG<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>RepairAddrOffset <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>ULONG<span class=\"token punctuation\">)</span>pKernelImageBuffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\t\t\t<span class=\"token comment\">// 判断要修复的地址是否在</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">AddressIsExecuteable</span><span class=\"token punctuation\">(</span>RepairAddrOffset<span class=\"token punctuation\">,</span> pSectionHeader<span class=\"token punctuation\">,</span> pFileHeader<span class=\"token operator\">-></span>NumberOfSections<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\t\t\t\t</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\t\t\t\t<span class=\"token comment\">// 修正需要重定位项的在新内核中的值</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\t\t\t\t<span class=\"token operator\">*</span>pRepairAddr <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>ULONG<span class=\"token punctuation\">)</span>pKernelImageBuffer <span class=\"token operator\">-</span> pOptionHeader<span class=\"token operator\">-></span>ImageBase<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t\t\t\t\t<span class=\"token comment\">//Items++;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t\t\t\t\t<span class=\"token comment\">//Items1++;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t\t\t\t\t<span class=\"token comment\">// 不需要修复的值。 什么都不做就行。</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t\t\t\t\t<span class=\"token comment\">//DbgPrint(\"FixAddress to Old Kernel:[%X]\\t\\n\", *pRepairAddr);</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t\t\t\t\t<span class=\"token operator\">*</span>pRepairAddr <span class=\"token operator\">+=</span> KernelBase <span class=\"token operator\">-</span> pOptionHeader<span class=\"token operator\">-></span>ImageBase<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t\t\t\t\t<span class=\"token comment\">//Items++;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t\t\t\t\t<span class=\"token comment\">//Items2++;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t\t\tpRelocationArray<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t\tpReloc <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PIMAGE_BASE_RELOCATION<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ULONG<span class=\"token punctuation\">)</span>pReloc <span class=\"token operator\">+</span> pReloc<span class=\"token operator\">-></span>SizeOfBlock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t<span class=\"token comment\">//DbgPrint(\"Items: [%X],Items1: [%X], Items2: [%X]\\t\\n\", Items, Items1, Items2);</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t<span class=\"token keyword\">return</span> status<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"修复iat\"><a class=\"anchor\" href=\"#修复iat\">#</a> 修复 IAT</h3>\n<p>在内核中获取模块基址，还是通过  <code>LDR_DATA_TABLE_ENTRY</code>  结构体遍历获取，这里我直接搬运了一位大佬的代码，设计的太好了。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">union</span> OD_OR_NAME</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\tCHAR<span class=\"token operator\">*</span> Name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\tUSHORT Od<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span>EXP_FUN_NAME<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">//API 导出模式</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">enum</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tNameFlag <span class=\"token operator\">=</span> <span class=\"token number\">0x1</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tOrderFlag <span class=\"token operator\">=</span> <span class=\"token number\">0x2</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span>EXP_FUN_MODE<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>NTSTATUS <span class=\"token function\">GetFunAddrOfModule</span><span class=\"token punctuation\">(</span>IN PVOID pModule<span class=\"token punctuation\">,</span> IN EXP_FUN_NAME unFuntionName<span class=\"token punctuation\">,</span> IN EXP_FUN_MODE eMode<span class=\"token punctuation\">,</span> OUT PULONG FuncAddress<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token comment\">//__asm int 3;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tNTSTATUS status <span class=\"token operator\">=</span> STATUS_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token comment\">// PE 查找导出表</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tPIMAGE_DOS_HEADER pDosHeader <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PIMAGE_DOS_HEADER<span class=\"token punctuation\">)</span>pModule<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token comment\">//DbgPrint(\"pDosHeader:%X\\t\\n\", pDosHeader);</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tPIMAGE_NT_HEADERS pNtHeader <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PIMAGE_NT_HEADERS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>pDosHeader<span class=\"token operator\">-></span>e_lfanew <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>ULONG<span class=\"token punctuation\">)</span>pModule<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token comment\">//DbgPrint(\"pNtHeader:%X\\t\\n\", pNtHeader);</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tPIMAGE_FILE_HEADER pFileHeader <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PIMAGE_FILE_HEADER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ULONG<span class=\"token punctuation\">)</span>pNtHeader <span class=\"token operator\">+</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token comment\">//DbgPrint(\"pFileHeader:%X\\t\\n\", pFileHeader);</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\tPIMAGE_OPTIONAL_HEADER pOptionHeader <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PIMAGE_OPTIONAL_HEADER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ULONG<span class=\"token punctuation\">)</span>pFileHeader <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>ULONG<span class=\"token punctuation\">)</span>IMAGE_SIZEOF_FILE_HEADER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token comment\">//DbgPrint(\"pOptionHeader:%X\\t\\n\", pOptionHeader);</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tPIMAGE_DATA_DIRECTORY pDirectory <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PIMAGE_DATA_DIRECTORY<span class=\"token punctuation\">)</span>pOptionHeader<span class=\"token operator\">-></span>DataDirectory<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token comment\">//DbgPrint(\"pDirectory:%X\\t\\n\", pDirectory);</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tPIMAGE_EXPORT_DIRECTORY pExportTabel <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PIMAGE_EXPORT_DIRECTORY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ULONG<span class=\"token punctuation\">)</span>pModule <span class=\"token operator\">+</span> pOptionHeader<span class=\"token operator\">-></span>DataDirectory<span class=\"token punctuation\">[</span>IMAGE_DIRECTORY_ENTRY_EXPORT<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>VirtualAddress<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token comment\">//DbgPrint(\"pExportTabel:%X\\t\\n\", pExportTabel);</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token comment\">//__asm int 3;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\tPULONG dwNameTable <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PULONG<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ULONG<span class=\"token punctuation\">)</span>pModule <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>pExportTabel<span class=\"token operator\">-></span>AddressOfNames<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\tPUSHORT wOrdinalsTable <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PUSHORT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ULONG<span class=\"token punctuation\">)</span>pModule <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>pExportTabel<span class=\"token operator\">-></span>AddressOfNameOrdinals<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\tPULONG dwAddressTable <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PULONG<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ULONG<span class=\"token punctuation\">)</span>pModule <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>pExportTabel<span class=\"token operator\">-></span>AddressOfFunctions<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>eMode <span class=\"token operator\">==</span> NameFlag<span class=\"token punctuation\">)</span><span class=\"token comment\">// 按名称导出</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>pExportTabel<span class=\"token operator\">-></span>NumberOfNames<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\t\tCHAR<span class=\"token operator\">*</span> cImportName <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>CHAR<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ULONG<span class=\"token punctuation\">)</span>pModule <span class=\"token operator\">+</span> dwNameTable<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">strcmp</span><span class=\"token punctuation\">(</span>cImportName<span class=\"token punctuation\">,</span> unFuntionName<span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\t<span class=\"token operator\">*</span>FuncAddress <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ULONG<span class=\"token punctuation\">)</span>pModule <span class=\"token operator\">+</span> dwAddressTable<span class=\"token punctuation\">[</span>wOrdinalsTable<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t<span class=\"token keyword\">else</span><span class=\"token comment\">// 按序号导出</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t\t<span class=\"token operator\">*</span>FuncAddress <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>ULONG<span class=\"token punctuation\">)</span>pModule <span class=\"token operator\">+</span> dwAddressTable<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>unFuntionName<span class=\"token punctuation\">.</span>Od<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>pExportTabel<span class=\"token operator\">-></span>Base<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>FuncAddress <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> STATUS_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> STATUS_UNSUCCESSFUL<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>NTSTATUS <span class=\"token function\">RepairIAT</span><span class=\"token punctuation\">(</span>IN PDRIVER_OBJECT pDriver<span class=\"token punctuation\">,</span> IN OUT PVOID pKernelImageBuffer<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tNTSTATUS status <span class=\"token operator\">=</span> STATUS_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token comment\">// PE 头 定位大导入表  IAT 表</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tPIMAGE_DOS_HEADER pDosHeader <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PIMAGE_DOS_HEADER<span class=\"token punctuation\">)</span>pKernelImageBuffer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tPIMAGE_NT_HEADERS pNtHeader <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PIMAGE_NT_HEADERS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>pDosHeader<span class=\"token operator\">-></span>e_lfanew <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>ULONG<span class=\"token punctuation\">)</span>pDosHeader<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tPIMAGE_OPTIONAL_HEADER pOptionHeader <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>pNtHeader<span class=\"token operator\">-></span>OptionalHeader<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tPIMAGE_IMPORT_DESCRIPTOR pImportTable <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PIMAGE_IMPORT_DESCRIPTOR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ULONG<span class=\"token punctuation\">)</span>pDosHeader <span class=\"token operator\">+</span> pOptionHeader<span class=\"token operator\">-></span>DataDirectory<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>VirtualAddress<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token comment\">// 遍历 INT 表</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>pImportTable<span class=\"token operator\">-></span>OriginalFirstThunk <span class=\"token operator\">||</span> pImportTable<span class=\"token operator\">-></span>FirstThunk<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t<span class=\"token comment\">// 在里面定义，变量的值每次都会重新设置为空</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t<span class=\"token comment\">// 模块基址</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\tPVOID pModuleBase <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t<span class=\"token comment\">// 模块名字</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\tCHAR szName<span class=\"token punctuation\">[</span><span class=\"token number\">0x50</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\tANSI_STRING asName <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\tUNICODE_STRING usName <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t<span class=\"token comment\">// 获取模块名，由模块名字获取模块基址</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\tPCHAR MdName <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PCHAR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>pImportTable<span class=\"token operator\">-></span>Name <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>ULONG<span class=\"token punctuation\">)</span>pDosHeader<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t<span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>szName<span class=\"token punctuation\">,</span> MdName<span class=\"token punctuation\">,</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>MdName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t<span class=\"token function\">RtlInitAnsiString</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>asName<span class=\"token punctuation\">,</span> szName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\tstatus <span class=\"token operator\">=</span> <span class=\"token function\">RtlAnsiStringToUnicodeString</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>usName<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>asName<span class=\"token punctuation\">,</span> TRUE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">NT_SUCCESS</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\t\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"RtlAnsiStringToUnicodeString failed!\\t\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> status<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\t<span class=\"token comment\">//DbgPrint(\"usName:%ws\\t\\n\", usName.Buffer);</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\t<span class=\"token comment\">// 获取模块基址</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\tstatus <span class=\"token operator\">=</span> <span class=\"token function\">GetModuleBase</span><span class=\"token punctuation\">(</span>pDriver<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>usName<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>pModuleBase<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">NT_SUCCESS</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\t\t<span class=\"token function\">RtlFreeUnicodeString</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>usName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\t\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GetModuleBase failed!\\t\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> status<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span> <span class=\"token operator\">==</span> pModuleBase<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t\t\t<span class=\"token function\">RtlFreeUnicodeString</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>usName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t\t\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ModuleBase = 0 !\\t\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> STATUS_UNSUCCESSFUL<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t\t<span class=\"token comment\">// 修复 IAT 表</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t\tPIMAGE_THUNK_DATA32 pThunkData <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PIMAGE_THUNK_DATA32<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ULONG<span class=\"token punctuation\">)</span>pKernelImageBuffer <span class=\"token operator\">+</span> pImportTable<span class=\"token operator\">-></span>FirstThunk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>PULONG<span class=\"token punctuation\">)</span>pThunkData<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t\t\tEXP_FUN_NAME emFunName <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t\t\tULONG dwProcAddress <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t\t\t<span class=\"token comment\">//__asm int 3;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t\t\t<span class=\"token comment\">// IMAGE_THUNK_DATA32 是一个 4 字节数据</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t\t\t<span class=\"token comment\">// 如果最高位是 1，那么除去最高位就是导出序号</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\t\t\t<span class=\"token comment\">// 如果最高位是 0，那么这个值是 RVA 指向 IMAGE_IMPORT_BY_NAME</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>PULONG<span class=\"token punctuation\">)</span>pThunkData<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x80000000</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0x80000000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\t\t\t\temFunName<span class=\"token punctuation\">.</span>Od <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>PULONG<span class=\"token punctuation\">)</span>pThunkData<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x7FFFFFFF</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\t\t\t\tstatus <span class=\"token operator\">=</span> <span class=\"token function\">GetFunAddrOfModule</span><span class=\"token punctuation\">(</span>pModuleBase<span class=\"token punctuation\">,</span> emFunName<span class=\"token punctuation\">,</span> OrderFlag<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>dwProcAddress<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">NT_SUCCESS</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>\t\t\t\t\t<span class=\"token function\">RtlFreeUnicodeString</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>usName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\t\t\t\t\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1 GetFunAddrOfModule failed !\\t\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>\t\t\t\t\t<span class=\"token keyword\">return</span> STATUS_UNSUCCESSFUL<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>\t\t\t\t<span class=\"token comment\">//DbgPrint(\"1 dwProcAddress:%X\\t\\n\", dwProcAddress);</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>\t\t\t\t<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>PULONG<span class=\"token punctuation\">)</span>pThunkData<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> dwProcAddress<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>\t\t\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>\t\t\t\tPIMAGE_IMPORT_BY_NAME pIBN <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PIMAGE_IMPORT_BY_NAME<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>PULONG<span class=\"token punctuation\">)</span>pThunkData<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>ULONG<span class=\"token punctuation\">)</span>pKernelImageBuffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>\t\t\t\t<span class=\"token comment\">// 按名字导入</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>\t\t\t\temFunName<span class=\"token punctuation\">.</span>Name <span class=\"token operator\">=</span> pIBN<span class=\"token operator\">-></span>Name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>\t\t\t\tstatus <span class=\"token operator\">=</span> <span class=\"token function\">GetFunAddrOfModule</span><span class=\"token punctuation\">(</span>pModuleBase<span class=\"token punctuation\">,</span> emFunName<span class=\"token punctuation\">,</span> NameFlag<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>dwProcAddress<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">NT_SUCCESS</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>\t\t\t\t\t<span class=\"token function\">RtlFreeUnicodeString</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>usName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>\t\t\t\t\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2 GetFunAddrOfModule failed !\\t\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>\t\t\t\t\t<span class=\"token keyword\">return</span> STATUS_UNSUCCESSFUL<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>\t\t\t\t<span class=\"token comment\">//DbgPrint(\"2 dwProcAddress:%X\\t\\n\", dwProcAddress);</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>\t\t\t\t<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>PULONG<span class=\"token punctuation\">)</span>pThunkData<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> dwProcAddress<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>\t\t\tpThunkData<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>\t\tpImportTable <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PIMAGE_IMPORT_DESCRIPTOR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ULONG<span class=\"token punctuation\">)</span>pImportTable <span class=\"token operator\">+</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>IMAGE_IMPORT_DESCRIPTOR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>\t<span class=\"token keyword\">return</span> status<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"第三步让操作系统走我们新内核文件的函数\"><a class=\"anchor\" href=\"#第三步让操作系统走我们新内核文件的函数\">#</a> 第三步：让操作系统走我们新内核文件的函数</h2>\n<p>初始化新加载的内核的系统服务表</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>PKSYSTEM_SERVICE_TABLE <span class=\"token function\">InitNewSSDT</span><span class=\"token punctuation\">(</span>IN PVOID pKernelImageBuffer<span class=\"token punctuation\">,</span> IN ULONG uKernelOldBase<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token comment\">// 新内核地址 - 老内核地址，得到相对偏移</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tULONG uNewKernelInc <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>ULONG<span class=\"token punctuation\">)</span>pKernelImageBuffer <span class=\"token operator\">-</span> uKernelOldBase<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token comment\">//DbgPrint(\"KeServiceDescriptorTable: [%X]\\r\\n\", KeServiceDescriptorTable);</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token comment\">//DbgPrint(\"pKernelImageBuffer: [%X]\\r\\n\", pKernelImageBuffer);</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token comment\">//DbgPrint(\"uKernelOldBase: [%X]\\r\\n\", uKernelOldBase);</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token comment\">//DbgPrint(\"uNewKernelInc: [%X]\\r\\n\", uNewKernelInc);</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token comment\">// __asm int 3;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token comment\">// 老内核的 ssdt 指针加上相对偏移，得到新内核的 ssdt 指针</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tPKSYSTEM_SERVICE_TABLE pNewSSDT <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PKSYSTEM_SERVICE_TABLE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ULONG<span class=\"token punctuation\">)</span>KeServiceDescriptorTable <span class=\"token operator\">+</span> uNewKernelInc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">MmIsAddressValid</span><span class=\"token punctuation\">(</span>pNewSSDT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pNewSSDT is unaviable!\\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token comment\">// 修正新的 SSDT 成员</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token comment\">// 函数地址表</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\tpNewSSDT<span class=\"token operator\">-></span>ServiceTableBase <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PULONG<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ULONG<span class=\"token punctuation\">)</span>pKernelImageBuffer <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>ULONG<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>KeServiceDescriptorTable<span class=\"token operator\">-></span>ServiceTableBase<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> uKernelOldBase <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token comment\">// 依次遍历修改</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>ULONG uIndex <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> uIndex <span class=\"token operator\">&lt;</span> KeServiceDescriptorTable<span class=\"token operator\">-></span>NumberOfServices<span class=\"token punctuation\">;</span> uIndex<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\t<span class=\"token comment\">// 函数地址再加上相对加载地址，得到新的的 ssdt 函数地址</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\tpNewSSDT<span class=\"token operator\">-></span>ServiceTableBase<span class=\"token punctuation\">[</span>uIndex<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> uNewKernelInc<span class=\"token punctuation\">;</span>\t\t</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">MmIsAddressValid</span><span class=\"token punctuation\">(</span>pNewSSDT<span class=\"token operator\">-></span>ServiceTableBase<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pNewSSDT->ServiceTableBase: %X\\r\\n\"</span><span class=\"token punctuation\">,</span> pNewSSDT<span class=\"token operator\">-></span>ServiceTableBase<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t<span class=\"token comment\">// 函数数量</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\tpNewSSDT<span class=\"token operator\">-></span>NumberOfServices <span class=\"token operator\">=</span> KeServiceDescriptorTable<span class=\"token operator\">-></span>NumberOfServices<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t<span class=\"token comment\">// 计算相对函数参数地址表的偏移</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\tULONG uOffset2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>ULONG<span class=\"token punctuation\">)</span>KeServiceDescriptorTable<span class=\"token operator\">-></span>ParamTableBase <span class=\"token operator\">-</span> uKernelOldBase<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t<span class=\"token comment\">// 函数参数表</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\tpNewSSDT<span class=\"token operator\">-></span>ParamTableBase <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PULONG<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ULONG<span class=\"token punctuation\">)</span>pKernelImageBuffer <span class=\"token operator\">+</span> uOffset2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t<span class=\"token comment\">//DbgPrint(\"pNewSSDT->ServiceTableBase: %X\\r\\n\", pNewSSDT->ServiceTableBase);</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t<span class=\"token comment\">//DbgPrint(\"pNewSSDT->NumberOfServices: %X\\r\\n\", pNewSSDT->NumberOfServices);</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t<span class=\"token comment\">//DbgPrint(\"pNewSSDT->ParamTableBase: %X\\r\\n\", pNewSSDT->ParamTableBase);</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t<span class=\"token comment\">//__asm int 3;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t<span class=\"token keyword\">return</span> pNewSSDT<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>Hook KiFastCallEntry 让系统调用走我们的系统服务表。</p>\n<p>代码懒得放了，附上 Github 的链接： <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL09yMGtpdC9YcEtlcm5lbE92ZXJsb2Fk\">https://github.com/Or0kit/XpKernelOverload</span></p>\n<h2 id=\"验证是否成功\"><a class=\"anchor\" href=\"#验证是否成功\">#</a> 验证是否成功</h2>\n<p>我在  <code>SSDTFilter</code>  函数中下了断点，并且验证了是否是  <code>NtOpenProcess</code>  函数</p>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<p>可以发现已经过滤了其他函数，我们只让这个函数走我们新内核中的代码。</p>\n<p><strong>一定得注意，不同的 Windows 它们 SSDT 中的函数的序号是不一样的！在 XP sp3 中  <code>NtOpenProcess</code>  是 0x7A。</strong></p>\n<p>然后我们在 Windbg 中找到我们内核的  <code>NtOpenProcess</code>  函数的地址，然后给这个函数下断点，以此验证是否执行到新内核中：</p>\n<p><img data-src=\"image002.png\" alt=\"\" /></p>\n<p>如图，已经断下来了！</p>\n<p>接下来我们在验证一下是否能过所有 Hook:</p>\n<p>我这里先加载了一个 Hook 了  <code>NtOpenProcess</code>  的驱动，其作用是一直打印  <code>NtOpenProcess</code>  的参数：</p>\n<p><img data-src=\"image003.png\" alt=\"\" /></p>\n<p>然后我们加载重载内核的代码（我在其中下了断点）,</p>\n<p>先看一下 Hook  <code>NtOpenProcess</code>  的代码：</p>\n<p><img data-src=\"image004.png\" alt=\"\" /></p>\n<p>这是断下来时打印的信息：</p>\n<p><img data-src=\"image005.png\" alt=\"\" /></p>\n<p>很明显当调用号是 0x7A 时 系统回去执行我们的 HOOK 函数。</p>\n<p>但是我们重载了内核后，就可以过滤掉这些 HOOK 了！</p>\n<p><img data-src=\"image006.png\" alt=\"\" /></p>\n<p>接着验证一下 OpenProcess 函数的正常使用：</p>\n<p><img data-src=\"image007.png\" alt=\"\" /></p>\n<p>我用 OD 附加了记事本，用 StudyPE+ 载入了进程中的记事本文件，均正常！</p>\n<p>至此内核重载完成。</p>\n<h1 id=\"reference\"><a class=\"anchor\" href=\"#reference\">#</a> Reference</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYnMucGVkaXkuY29tL3RocmVhZC0yNTM0MjUuaHRt\">https://bbs.pediy.com/thread-253425.htm</span><br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3doYXRkYXkvYXJ0aWNsZS9kZXRhaWxzLzE0MTYwODc1\">https://blog.csdn.net/whatday/article/details/14160875</span></p>\n",
            "tags": [
                "内核重载"
            ]
        },
        {
            "id": "https://or0kit.github.io/Bin/Core/Drive-Development/%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91-%E9%9A%90%E8%97%8F%E9%A9%B1%E5%8A%A8/",
            "url": "https://or0kit.github.io/Bin/Core/Drive-Development/%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91-%E9%9A%90%E8%97%8F%E9%A9%B1%E5%8A%A8/",
            "title": "驱动开发-隐藏驱动",
            "date_published": "2021-12-06T14:13:08.000Z",
            "content_html": "<h1 id=\"楔子\"><a class=\"anchor\" href=\"#楔子\">#</a> 楔子</h1>\n<p>编写一个 0 环断链的驱动代码</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 遍历内核模块</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;ntddk.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_LDR_DATA_TABLE_ENTRY</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tLIST_ENTRY InLoadOrderLinks<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tLIST_ENTRY InMemoryOrderLinks<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tLIST_ENTRY InInitializationOrderLinks<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tPVOID DllBase<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tPVOID EntryPoint<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tUINT32 SizeOfImage<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\tUNICODE_STRING FullDllName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tUNICODE_STRING BaseDllName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tUINT32 Flags<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tUINT16 LoadCount<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tUINT16 TlsIndex<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\tLIST_ENTRY HashLinks<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\tPVOID SectionPointer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\tUINT32 CheckSum<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\tUINT32 TimeDateStamp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\tPVOID LoadedImports<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\tPVOID EntryPointActivationContext<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\tPVOID PatchInformation<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span> LDR_DATA_TABLE_ENTRY<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span> PLDR_DATA_TABLE_ENTRY<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>VOID <span class=\"token function\">DriverUnload</span><span class=\"token punctuation\">(</span>PDRIVER_OBJECT pdriver<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是驱动，我卸载了\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>NTSTATUS <span class=\"token function\">DriverEntry</span><span class=\"token punctuation\">(</span>PDRIVER_OBJECT pdriver<span class=\"token punctuation\">,</span> PUNICODE_STRING reg_path<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是驱动，我运行了\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\tPLDR_DATA_TABLE_ENTRY pLdtePre<span class=\"token punctuation\">;</span> <span class=\"token comment\">// </span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\tPLDR_DATA_TABLE_ENTRY pLdteCur<span class=\"token punctuation\">;</span> <span class=\"token comment\">// </span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\tPLDR_DATA_TABLE_ENTRY pLdteNex<span class=\"token punctuation\">;</span> <span class=\"token comment\">// </span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\tpLdteCur <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PLDR_DATA_TABLE_ENTRY<span class=\"token punctuation\">)</span>pdriver<span class=\"token operator\">-></span>DriverSection<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\tpLdtePre <span class=\"token operator\">=</span> pLdteCur<span class=\"token operator\">-></span>InLoadOrderLinks<span class=\"token punctuation\">.</span>Blink<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\tpLdteNex <span class=\"token operator\">=</span> pLdteCur<span class=\"token operator\">-></span>InLoadOrderLinks<span class=\"token punctuation\">.</span>Flink<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\tpLdtePre<span class=\"token operator\">-></span>InLoadOrderLinks<span class=\"token punctuation\">.</span>Flink <span class=\"token operator\">=</span> pLdteCur<span class=\"token operator\">-></span>InLoadOrderLinks<span class=\"token punctuation\">.</span>Flink<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\tpLdteNex<span class=\"token operator\">-></span>InLoadOrderLinks<span class=\"token punctuation\">.</span>Blink <span class=\"token operator\">=</span> pLdteCur<span class=\"token operator\">-></span>InLoadOrderLinks<span class=\"token punctuation\">.</span>Blink<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\tpdriver<span class=\"token operator\">-></span>DriverUnload <span class=\"token operator\">=</span> DriverUnload<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t<span class=\"token keyword\">return</span> STATUS_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>可是在 PCHunter32 中依然可以查得到。</p>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<p>这是为什么呢？<br />\n这时我们就要去分析驱动是如何加载的了，在代码中下个断点，在 windbg 中查看堆栈，因为堆栈中有先前调用的函数的返回地址。</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kd&gt; k</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> # ChildEBP RetAddr  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>00 ba503c84 805823af DriverHidden!DriverEntry+0xf [F:\\Text_Files\\Driver\\DriverHidden\\main.c @ 34] </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>01 ba503d54 805824bf nt!IopLoadDriver+0x66d</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>02 ba503d7c 80539923 nt!IopLoadUnloadDriver+0x45</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>03 ba503dac 805d0fee nt!ExpWorkerThread+0xef</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>04 ba503ddc 8054720e nt!PspSystemThreadStartup+0x34</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>05 00000000 00000000 nt!KiThreadStartup+0x16</pre></td></tr></table></figure><p>发现驱动运行前，系统调用了  <code>IopLoadDriver</code>  函数。</p>\n<h1 id=\"逆向分析ioploaddriver函数\"><a class=\"anchor\" href=\"#逆向分析ioploaddriver函数\">#</a> 逆向分析 IopLoadDriver 函数</h1>\n<p>在 IDA 中逆向分析一下此函数，发现此函数的流程非常复杂：</p>\n<p><img data-src=\"image002.png\" alt=\"\" /></p>\n<p><code>F5</code>  一下</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> __stdcall <span class=\"token function\">IopLoadDriver</span><span class=\"token punctuation\">(</span>HANDLE KeyHandle<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> a2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> a3<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> a4<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  NTSTATUS v4<span class=\"token punctuation\">;</span> <span class=\"token comment\">// eax</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">unsigned</span> __int16 <span class=\"token operator\">*</span>v5<span class=\"token punctuation\">;</span> <span class=\"token comment\">// esi</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">unsigned</span> __int16 <span class=\"token operator\">*</span>v6<span class=\"token punctuation\">;</span> <span class=\"token comment\">// eax</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span> <span class=\"token comment\">// edi</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  PVOID v8<span class=\"token punctuation\">;</span> <span class=\"token comment\">// esi</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">int</span> v10<span class=\"token punctuation\">;</span> <span class=\"token comment\">// eax</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">int</span> v11<span class=\"token punctuation\">;</span> <span class=\"token comment\">// eax</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">unsigned</span> __int16 <span class=\"token operator\">*</span>v12<span class=\"token punctuation\">;</span> <span class=\"token comment\">// esi</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  PIMAGE_NT_HEADERS v13<span class=\"token punctuation\">;</span> <span class=\"token comment\">// eax</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>v14<span class=\"token punctuation\">;</span> <span class=\"token comment\">// ecx</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  ULONG v15<span class=\"token punctuation\">;</span> <span class=\"token comment\">// edi</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token keyword\">unsigned</span> __int16 <span class=\"token operator\">*</span>v16<span class=\"token punctuation\">;</span> <span class=\"token comment\">// eax</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  PVOID v17<span class=\"token punctuation\">;</span> <span class=\"token comment\">// eax</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token keyword\">int</span> v18<span class=\"token punctuation\">;</span> <span class=\"token comment\">// eax</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token keyword\">int</span> v19<span class=\"token punctuation\">;</span> <span class=\"token comment\">// eax</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  _DWORD <span class=\"token operator\">*</span>v20<span class=\"token punctuation\">;</span> <span class=\"token comment\">// eax</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span>__stdcall <span class=\"token operator\">*</span>v21<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>ULONG<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// eax</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token keyword\">int</span> v22<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+Ch] [ebp-B4h] BYREF</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token keyword\">int</span> v23<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+10h] [ebp-B0h]</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_UNICODE_STRING</span> <span class=\"token operator\">*</span>v24<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+14h] [ebp-ACh]</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token keyword\">int</span> v25<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+18h] [ebp-A8h]</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token keyword\">int</span> v26<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+1Ch] [ebp-A4h]</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token keyword\">int</span> v27<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+20h] [ebp-A0h]</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  ULONG v28<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+24h] [ebp-9Ch] BYREF</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  PVOID v29<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+28h] [ebp-98h] BYREF</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  PVOID v30<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+2Ch] [ebp-94h]</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  PVOID Object<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+30h] [ebp-90h] BYREF</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_UNICODE_STRING</span> v32<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+34h] [ebp-8Ch] BYREF</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_UNICODE_STRING</span> DestinationString<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+3Ch] [ebp-84h] BYREF</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  PVOID P<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+44h] [ebp-7Ch] BYREF</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>  ULONG ResultLength<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+48h] [ebp-78h] BYREF</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>  HANDLE Handle<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+4Ch] [ebp-74h]</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>  PVOID BaseAddress<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+50h] [ebp-70h] BYREF</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>  HANDLE v38<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+54h] [ebp-6Ch] BYREF</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>  <span class=\"token keyword\">int</span> v39<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+58h] [ebp-68h] BYREF</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>  PVOID v40<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+5Ch] [ebp-64h]</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>  ULONG ReturnLength<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+60h] [ebp-60h] BYREF</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>  <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_UNICODE_STRING</span> Destination<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+64h] [ebp-5Ch] BYREF</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>  NTSTATUS v43<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+6Ch] [ebp-54h]</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>  <span class=\"token keyword\">int</span> KeyValueInformation<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+70h] [ebp-50h] BYREF</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>  v29 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PVOID<span class=\"token punctuation\">)</span>a4<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>  <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>_DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>a4 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>  Handle <span class=\"token operator\">=</span> KeyHandle<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>  v30 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>  v39 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>  v40 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>  v32<span class=\"token punctuation\">.</span>Buffer <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>  Destination<span class=\"token punctuation\">.</span>Buffer <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>  v4 <span class=\"token operator\">=</span> <span class=\"token function\">NtQueryKey</span><span class=\"token punctuation\">(</span>KeyHandle<span class=\"token punctuation\">,</span> KeyBasicInformation<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>ResultLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> v4 <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">2147483643</span> <span class=\"token operator\">&amp;&amp;</span> v4 <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1073741789</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    v43 <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1073741472</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>LABEL_82<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token function\">HeadlessKernelAddLogEntry</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token keyword\">goto</span> LABEL_22<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>  v5 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> __int16 <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">ExAllocatePoolWithTag</span><span class=\"token punctuation\">(</span>NonPagedPool<span class=\"token punctuation\">,</span> ResultLength <span class=\"token operator\">+</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x20206F49u</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>  v30 <span class=\"token operator\">=</span> v5<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span>v5 <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>LABEL_60<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    v43 <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1073741670</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    <span class=\"token keyword\">goto</span> LABEL_82<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>  v43 <span class=\"token operator\">=</span> <span class=\"token function\">NtQueryKey</span><span class=\"token punctuation\">(</span>Handle<span class=\"token punctuation\">,</span> KeyBasicInformation<span class=\"token punctuation\">,</span> v5<span class=\"token punctuation\">,</span> ResultLength<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>ResultLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> v43 <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    Destination<span class=\"token punctuation\">.</span>Length <span class=\"token operator\">=</span> v5<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    Destination<span class=\"token punctuation\">.</span>MaximumLength <span class=\"token operator\">=</span> Destination<span class=\"token punctuation\">.</span>Length <span class=\"token operator\">+</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>    Destination<span class=\"token punctuation\">.</span>Buffer <span class=\"token operator\">=</span> v5 <span class=\"token operator\">+</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    v6 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> __int16 <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">ExAllocatePoolWithTag</span><span class=\"token punctuation\">(</span>PagedPool<span class=\"token punctuation\">,</span> Destination<span class=\"token punctuation\">.</span>Length <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x20206F49u</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    v40 <span class=\"token operator\">=</span> v6<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> v6 <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>      <span class=\"token function\">LOWORD</span><span class=\"token punctuation\">(</span>v39<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> Destination<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>      <span class=\"token function\">HIWORD</span><span class=\"token punctuation\">(</span>v39<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> Destination<span class=\"token punctuation\">.</span>Length <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>      <span class=\"token function\">qmemcpy</span><span class=\"token punctuation\">(</span>v6<span class=\"token punctuation\">,</span> Destination<span class=\"token punctuation\">.</span>Buffer<span class=\"token punctuation\">,</span> Destination<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>      <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_WORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>v40 <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> __int16<span class=\"token punctuation\">)</span>v39 <span class=\"token operator\">>></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>    <span class=\"token function\">RtlAppendUnicodeToString</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>Destination<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>off_4A9CE2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>    <span class=\"token function\">HeadlessKernelAddLogEntry</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>Destination<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> a2 <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> InitSafeBootMode <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>        <span class=\"token function\">RtlInitUnicodeString</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>DestinationString<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>word_4A9CEE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>        <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>KeyValueInformation<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x4Cu</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token function\">NtQueryValueKey</span><span class=\"token punctuation\">(</span>Handle<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>DestinationString<span class=\"token punctuation\">,</span> KeyValuePartialInformation<span class=\"token punctuation\">,</span> KeyValueInformation<span class=\"token punctuation\">,</span> <span class=\"token number\">0x4Cu</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>v28<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>          <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>DestinationString<span class=\"token punctuation\">.</span>Length <span class=\"token operator\">=</span> <span class=\"token function\">LOWORD</span><span class=\"token punctuation\">(</span>KeyValueInformation<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>              DestinationString<span class=\"token punctuation\">.</span>MaximumLength <span class=\"token operator\">=</span> <span class=\"token function\">LOWORD</span><span class=\"token punctuation\">(</span>KeyValueInformation<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>              DestinationString<span class=\"token punctuation\">.</span>Buffer <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> __int16 <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>KeyValueInformation<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>              <span class=\"token operator\">!</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> __int8<span class=\"token punctuation\">)</span><span class=\"token function\">IopSafebootDriverLoad</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>DestinationString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> __int8<span class=\"token punctuation\">)</span><span class=\"token function\">IopSafebootDriverLoad</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>Destination<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>          <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>            <span class=\"token function\">IopBootLog</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>Destination<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>            <span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SAFEBOOT: skipping device = %wZ(%wZ)\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>Destination<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>DestinationString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>            <span class=\"token function\">HeadlessKernelAddLogEntry</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token function\">xHalReferenceHandler</span><span class=\"token punctuation\">(</span>KeyValueInformation<span class=\"token punctuation\">[</span><span class=\"token number\">19</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> v22<span class=\"token punctuation\">,</span> v23<span class=\"token punctuation\">,</span> v24<span class=\"token punctuation\">,</span> v25<span class=\"token punctuation\">,</span> v26<span class=\"token punctuation\">,</span> v27<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>    <span class=\"token function\">ExAcquireResourceSharedLite</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>PsLoadedModuleResource<span class=\"token punctuation\">,</span> <span class=\"token number\">1u</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> i <span class=\"token operator\">=</span> PsLoadedModuleList<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>i <span class=\"token operator\">!=</span> <span class=\"token operator\">&amp;</span>PsLoadedModuleList<span class=\"token punctuation\">;</span> i <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>_DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>i <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token function\">RtlEqualString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> STRING <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>Destination<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> STRING <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">36</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1u</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>        v43 <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1073741554</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>        <span class=\"token function\">ExReleaseResourceLite</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>PsLoadedModuleResource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>        <span class=\"token function\">IopBootLog</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>Destination<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>        Destination<span class=\"token punctuation\">.</span>Buffer <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>        <span class=\"token keyword\">goto</span> LABEL_21<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>    <span class=\"token function\">ExReleaseResourceLite</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>PsLoadedModuleResource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>    v43 <span class=\"token operator\">=</span> <span class=\"token function\">IopBuildFullDriverPath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>v39<span class=\"token punctuation\">,</span> Handle<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>Destination<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> v43 <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>      Destination<span class=\"token punctuation\">.</span>Buffer <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>      <span class=\"token keyword\">goto</span> LABEL_80<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>    v43 <span class=\"token operator\">=</span> <span class=\"token function\">IopGetDriverNameFromKeyNode</span><span class=\"token punctuation\">(</span>Handle<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>v32<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> v43 <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>      v24 <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>v32<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>      v22 <span class=\"token operator\">=</span> <span class=\"token number\">24</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>      v23 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>      v25 <span class=\"token operator\">=</span> <span class=\"token number\">16</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>      v26 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>      v27 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>      v10 <span class=\"token operator\">=</span> <span class=\"token function\">MmLoadSystemImage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ULONG<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>Destination<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>P<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>BaseAddress<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>      v43 <span class=\"token operator\">=</span> v10<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> v10 <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> v10 <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1073741554</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>          v43 <span class=\"token operator\">=</span> <span class=\"token function\">ObOpenObjectByName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>v22<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>IoDriverObjectType<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>v38<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> v43 <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>          <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>            <span class=\"token function\">IopBootLog</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>Destination<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> v43 <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1073741772</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre>              v43 <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1073740914</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>LABEL_80<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> v43 <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre>              <span class=\"token keyword\">goto</span> LABEL_21<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre>            <span class=\"token keyword\">goto</span> LABEL_81<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"151\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre>          <span class=\"token function\">LOBYTE</span><span class=\"token punctuation\">(</span>DestinationString<span class=\"token punctuation\">.</span>Buffer<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token function\">KeGetCurrentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>PreviousMode<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"153\"></td><td><pre>          v43 <span class=\"token operator\">=</span> <span class=\"token function\">ObReferenceObjectByHandle</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"154\"></td><td><pre>                  v38<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"155\"></td><td><pre>                  <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"156\"></td><td><pre>                  IoDriverObjectType<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"157\"></td><td><pre>                  <span class=\"token punctuation\">(</span>KPROCESSOR_MODE<span class=\"token punctuation\">)</span>DestinationString<span class=\"token punctuation\">.</span>Buffer<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"158\"></td><td><pre>                  <span class=\"token operator\">&amp;</span>Object<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"159\"></td><td><pre>                  <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"160\"></td><td><pre>          <span class=\"token function\">NtClose</span><span class=\"token punctuation\">(</span>v38<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"161\"></td><td><pre>          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> v43 <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"162\"></td><td><pre>          <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"163\"></td><td><pre>            v43 <span class=\"token operator\">=</span> <span class=\"token function\">IopResurrectDriver</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"164\"></td><td><pre>            <span class=\"token function\">ObfDereferenceObject</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"165\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"166\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"167\"></td><td><pre>LABEL_55<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"168\"></td><td><pre>        <span class=\"token function\">IopBootLog</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>Destination<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"169\"></td><td><pre>        <span class=\"token keyword\">goto</span> LABEL_80<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"170\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"171\"></td><td><pre>      <span class=\"token function\">RtlImageNtHeader</span><span class=\"token punctuation\">(</span>BaseAddress<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"172\"></td><td><pre>      v43 <span class=\"token operator\">=</span> <span class=\"token function\">IopPrepareDriverLoading</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>v39<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>Handle<span class=\"token punctuation\">,</span> BaseAddress<span class=\"token punctuation\">,</span> a3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"173\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> v43 <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"174\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"175\"></td><td><pre>        <span class=\"token function\">MmUnloadSystemImage</span><span class=\"token punctuation\">(</span>P<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"176\"></td><td><pre>        <span class=\"token keyword\">goto</span> LABEL_55<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"177\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"178\"></td><td><pre>      <span class=\"token function\">LOBYTE</span><span class=\"token punctuation\">(</span>DestinationString<span class=\"token punctuation\">.</span>Buffer<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token function\">KeGetCurrentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>PreviousMode<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"179\"></td><td><pre>      v11 <span class=\"token operator\">=</span> <span class=\"token function\">ObCreateObject</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"180\"></td><td><pre>              <span class=\"token punctuation\">(</span>KPROCESSOR_MODE<span class=\"token punctuation\">)</span>DestinationString<span class=\"token punctuation\">.</span>Buffer<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"181\"></td><td><pre>              <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>IoDriverObjectType<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"182\"></td><td><pre>              <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>v22<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"183\"></td><td><pre>              <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"184\"></td><td><pre>              <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"185\"></td><td><pre>              <span class=\"token number\">196</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"186\"></td><td><pre>              <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"187\"></td><td><pre>              <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"188\"></td><td><pre>              <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>DestinationString<span class=\"token punctuation\">.</span>Buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"189\"></td><td><pre>      v12 <span class=\"token operator\">=</span> DestinationString<span class=\"token punctuation\">.</span>Buffer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"190\"></td><td><pre>      v43 <span class=\"token operator\">=</span> v11<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"191\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> v11 <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"192\"></td><td><pre>        <span class=\"token keyword\">goto</span> LABEL_55<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"193\"></td><td><pre>      <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>DestinationString<span class=\"token punctuation\">.</span>Buffer<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xC4u</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"194\"></td><td><pre>      <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>v12 <span class=\"token operator\">+</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> v12 <span class=\"token operator\">+</span> <span class=\"token number\">84</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"195\"></td><td><pre>      <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>v12 <span class=\"token operator\">+</span> <span class=\"token number\">42</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> v12<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"196\"></td><td><pre>      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> ReturnLength <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> ReturnLength <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0x1B</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>ReturnLength <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"197\"></td><td><pre>        <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>_DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>v12<span class=\"token punctuation\">[</span><span class=\"token number\">2</span> <span class=\"token operator\">*</span> ReturnLength <span class=\"token operator\">+</span> <span class=\"token number\">28</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> IopInvalidDeviceRequest<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"198\"></td><td><pre>      <span class=\"token operator\">*</span>v12 <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"199\"></td><td><pre>      v12<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">168</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"200\"></td><td><pre>      v13 <span class=\"token operator\">=</span> <span class=\"token function\">RtlImageNtHeader</span><span class=\"token punctuation\">(</span>BaseAddress<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"201\"></td><td><pre>      v14 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>BaseAddress <span class=\"token operator\">+</span> v13<span class=\"token operator\">-></span>OptionalHeader<span class=\"token punctuation\">.</span>AddressOfEntryPoint<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"202\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span>v13<span class=\"token operator\">-></span>OptionalHeader<span class=\"token punctuation\">.</span>DllCharacteristics <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x2000</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"203\"></td><td><pre>        <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>v12 <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|=</span> <span class=\"token number\">2u</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"204\"></td><td><pre>      <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>v12 <span class=\"token operator\">+</span> <span class=\"token number\">11</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> v14<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"205\"></td><td><pre>      <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>v12 <span class=\"token operator\">+</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> P<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"206\"></td><td><pre>      <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>v12 <span class=\"token operator\">+</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> BaseAddress<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"207\"></td><td><pre>      <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>v12 <span class=\"token operator\">+</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> v13<span class=\"token operator\">-></span>OptionalHeader<span class=\"token punctuation\">.</span>SizeOfImage<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"208\"></td><td><pre>      v43 <span class=\"token operator\">=</span> <span class=\"token function\">ObInsertObject</span><span class=\"token punctuation\">(</span>v12<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1u</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>v38<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"209\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> v43 <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"210\"></td><td><pre>        <span class=\"token keyword\">goto</span> LABEL_55<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"211\"></td><td><pre>      <span class=\"token function\">ObReferenceObjectByHandle</span><span class=\"token punctuation\">(</span>v38<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> IoDriverObjectType<span class=\"token punctuation\">,</span> <span class=\"token function\">KeGetCurrentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>PreviousMode<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>PVOID <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>v28<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"212\"></td><td><pre>      v15 <span class=\"token operator\">=</span> v28<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"213\"></td><td><pre>      DestinationString<span class=\"token punctuation\">.</span>Buffer <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> __int16 <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>v28<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"214\"></td><td><pre>      <span class=\"token function\">NtClose</span><span class=\"token punctuation\">(</span>v38<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"215\"></td><td><pre>      <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>_DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>v15 <span class=\"token operator\">+</span> <span class=\"token number\">36</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>CmRegistryMachineHardwareDescriptionSystemName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"216\"></td><td><pre>      v16 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> __int16 <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">ExAllocatePoolWithTag</span><span class=\"token punctuation\">(</span>PagedPool<span class=\"token punctuation\">,</span> v32<span class=\"token punctuation\">.</span>MaximumLength<span class=\"token punctuation\">,</span> <span class=\"token number\">0x20206F49u</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"217\"></td><td><pre>      <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>_DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>v15 <span class=\"token operator\">+</span> <span class=\"token number\">32</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> v16<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"218\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> v16 <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"219\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"220\"></td><td><pre>        <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>_WORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>v15 <span class=\"token operator\">+</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> v32<span class=\"token punctuation\">.</span>MaximumLength<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"221\"></td><td><pre>        <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>_WORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>v15 <span class=\"token operator\">+</span> <span class=\"token number\">28</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> v32<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"222\"></td><td><pre>        <span class=\"token function\">qmemcpy</span><span class=\"token punctuation\">(</span>v16<span class=\"token punctuation\">,</span> v32<span class=\"token punctuation\">.</span>Buffer<span class=\"token punctuation\">,</span> v32<span class=\"token punctuation\">.</span>MaximumLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"223\"></td><td><pre>        v15 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>ULONG<span class=\"token punctuation\">)</span>DestinationString<span class=\"token punctuation\">.</span>Buffer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"224\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"225\"></td><td><pre>      v17 <span class=\"token operator\">=</span> <span class=\"token function\">ExAllocatePoolWithTag</span><span class=\"token punctuation\">(</span>NonPagedPool<span class=\"token punctuation\">,</span> <span class=\"token number\">0x1000u</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x20206F49u</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"226\"></td><td><pre>      Object <span class=\"token operator\">=</span> v17<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"227\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span>v17 <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"228\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"229\"></td><td><pre>        <span class=\"token function\">ObMakeTemporaryObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>PVOID<span class=\"token punctuation\">)</span>v15<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"230\"></td><td><pre>        <span class=\"token function\">ObfDereferenceObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>PVOID<span class=\"token punctuation\">)</span>v15<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"231\"></td><td><pre>        <span class=\"token keyword\">goto</span> LABEL_60<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"232\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"233\"></td><td><pre>      v43 <span class=\"token operator\">=</span> <span class=\"token function\">NtQueryObject</span><span class=\"token punctuation\">(</span>Handle<span class=\"token punctuation\">,</span> ObjectNameInformation<span class=\"token punctuation\">,</span> v17<span class=\"token punctuation\">,</span> <span class=\"token number\">0x1000u</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>ReturnLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"234\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> v43 <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"235\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"236\"></td><td><pre>        <span class=\"token function\">ObMakeTemporaryObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>PVOID<span class=\"token punctuation\">)</span>v15<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"237\"></td><td><pre>        <span class=\"token function\">ObfDereferenceObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>PVOID<span class=\"token punctuation\">)</span>v15<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"238\"></td><td><pre>        <span class=\"token function\">ExFreePoolWithTag</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"239\"></td><td><pre>        <span class=\"token keyword\">goto</span> LABEL_80<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"240\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"241\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> v40 <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"242\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"243\"></td><td><pre>        <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>_DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>_DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>v15 <span class=\"token operator\">+</span> <span class=\"token number\">24</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token function\">ExAllocatePoolWithTag</span><span class=\"token punctuation\">(</span>NonPagedPool<span class=\"token punctuation\">,</span> <span class=\"token function\">HIWORD</span><span class=\"token punctuation\">(</span>v39<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x20206F49u</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"244\"></td><td><pre>        v18 <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>_DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>v15 <span class=\"token operator\">+</span> <span class=\"token number\">24</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"245\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>_DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>v18 <span class=\"token operator\">+</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"246\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"247\"></td><td><pre>          <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>_WORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>v18 <span class=\"token operator\">+</span> <span class=\"token number\">14</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token function\">HIWORD</span><span class=\"token punctuation\">(</span>v39<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"248\"></td><td><pre>          <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>_WORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>_DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>v15 <span class=\"token operator\">+</span> <span class=\"token number\">24</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">12</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> v39<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"249\"></td><td><pre>          <span class=\"token function\">qmemcpy</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>_DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>v15 <span class=\"token operator\">+</span> <span class=\"token number\">24</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> v40<span class=\"token punctuation\">,</span> <span class=\"token function\">HIWORD</span><span class=\"token punctuation\">(</span>v39<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"250\"></td><td><pre>          v15 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>ULONG<span class=\"token punctuation\">)</span>DestinationString<span class=\"token punctuation\">.</span>Buffer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"251\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"252\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"253\"></td><td><pre>      v19 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span>__stdcall <span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>ULONG<span class=\"token punctuation\">,</span> PVOID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>v15 <span class=\"token operator\">+</span> <span class=\"token number\">44</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>v15<span class=\"token punctuation\">,</span> Object<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"254\"></td><td><pre>      v43 <span class=\"token operator\">=</span> v19<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"255\"></td><td><pre>      <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>_DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>v29 <span class=\"token operator\">=</span> v19<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"256\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> v19 <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"257\"></td><td><pre>        v43 <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1073740955</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"258\"></td><td><pre>      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> ReturnLength <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> ReturnLength <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0x1B</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>ReturnLength <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"259\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"260\"></td><td><pre>        v20 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>_DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>v15 <span class=\"token operator\">+</span> <span class=\"token number\">4</span> <span class=\"token operator\">*</span> ReturnLength <span class=\"token operator\">+</span> <span class=\"token number\">56</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"261\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span><span class=\"token operator\">*</span>v20 <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"262\"></td><td><pre>          <span class=\"token operator\">*</span>v20 <span class=\"token operator\">=</span> IopInvalidDeviceRequest<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"263\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"264\"></td><td><pre>      <span class=\"token function\">ExFreePoolWithTag</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"265\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> v43 <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"266\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"267\"></td><td><pre>LABEL_78<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"268\"></td><td><pre>        <span class=\"token function\">ObMakeTemporaryObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>PVOID<span class=\"token punctuation\">)</span>v15<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"269\"></td><td><pre>        <span class=\"token function\">ObfDereferenceObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>PVOID<span class=\"token punctuation\">)</span>v15<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"270\"></td><td><pre>        <span class=\"token keyword\">goto</span> LABEL_80<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"271\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"272\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> __int8<span class=\"token punctuation\">)</span><span class=\"token function\">IopIsLegacyDriver</span><span class=\"token punctuation\">(</span>v15<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"273\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"274\"></td><td><pre>        v43 <span class=\"token operator\">=</span> <span class=\"token function\">IopPnpDriverStarted</span><span class=\"token punctuation\">(</span>v15<span class=\"token punctuation\">,</span> Handle<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>v39<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"275\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> v43 <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"276\"></td><td><pre>          <span class=\"token keyword\">goto</span> LABEL_79<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"277\"></td><td><pre>        v21 <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span>__stdcall <span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>ULONG<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>v15 <span class=\"token operator\">+</span> <span class=\"token number\">52</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"278\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> v21 <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"279\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"280\"></td><td><pre>          <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>_DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>v15 <span class=\"token operator\">+</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|=</span> <span class=\"token number\">1u</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"281\"></td><td><pre>          <span class=\"token function\">v21</span><span class=\"token punctuation\">(</span>v15<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"282\"></td><td><pre>          <span class=\"token function\">IopBootLog</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>Destination<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"283\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"284\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"285\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> v43 <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"286\"></td><td><pre>        <span class=\"token keyword\">goto</span> LABEL_78<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"287\"></td><td><pre>LABEL_79<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"288\"></td><td><pre>      <span class=\"token function\">IopBootLog</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>Destination<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"289\"></td><td><pre>      <span class=\"token function\">MmFreeDriverInitialization</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>_DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>v15 <span class=\"token operator\">+</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"290\"></td><td><pre>      <span class=\"token function\">IopReadyDeviceObjects</span><span class=\"token punctuation\">(</span>v15<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"291\"></td><td><pre>      <span class=\"token keyword\">goto</span> LABEL_80<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"292\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"293\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"294\"></td><td><pre>LABEL_81<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"295\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> v43 <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1073741554</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"296\"></td><td><pre>    <span class=\"token keyword\">goto</span> LABEL_82<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"297\"></td><td><pre>LABEL_21<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"298\"></td><td><pre>  <span class=\"token function\">HeadlessKernelAddLogEntry</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"299\"></td><td><pre>LABEL_22<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"300\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> v32<span class=\"token punctuation\">.</span>Buffer <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"301\"></td><td><pre>    <span class=\"token function\">ExFreePoolWithTag</span><span class=\"token punctuation\">(</span>v32<span class=\"token punctuation\">.</span>Buffer<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"302\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> v30 <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"303\"></td><td><pre>    <span class=\"token function\">ExFreePoolWithTag</span><span class=\"token punctuation\">(</span>v30<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"304\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> v40 <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"305\"></td><td><pre>    <span class=\"token function\">ExFreePoolWithTag</span><span class=\"token punctuation\">(</span>v40<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"306\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> Destination<span class=\"token punctuation\">.</span>Buffer <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"307\"></td><td><pre>    <span class=\"token function\">ExFreePoolWithTag</span><span class=\"token punctuation\">(</span>Destination<span class=\"token punctuation\">.</span>Buffer<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"308\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> v43 <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> v43 <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1073741218</span> <span class=\"token operator\">&amp;&amp;</span> v43 <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1073741554</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"309\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"310\"></td><td><pre>    <span class=\"token function\">IopDriverLoadingFailed</span><span class=\"token punctuation\">(</span>Handle<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"311\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token function\">IopGetRegistryValue</span><span class=\"token punctuation\">(</span>Handle<span class=\"token punctuation\">,</span> <span class=\"token string\">\"E\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>v29<span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"312\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"313\"></td><td><pre>      v8 <span class=\"token operator\">=</span> v29<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"314\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>v29 <span class=\"token operator\">+</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"315\"></td><td><pre>        <span class=\"token function\">CmBootLastKnownGood</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>_DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>v29 <span class=\"token operator\">+</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>v29 <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"316\"></td><td><pre>      <span class=\"token function\">ExFreePoolWithTag</span><span class=\"token punctuation\">(</span>v8<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"317\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"318\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"319\"></td><td><pre>  <span class=\"token function\">ObCloseHandle</span><span class=\"token punctuation\">(</span>Handle<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"320\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token function\">xHalReferenceHandler</span><span class=\"token punctuation\">(</span>KeyValueInformation<span class=\"token punctuation\">[</span><span class=\"token number\">19</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> v22<span class=\"token punctuation\">,</span> v23<span class=\"token punctuation\">,</span> v24<span class=\"token punctuation\">,</span> v25<span class=\"token punctuation\">,</span> v26<span class=\"token punctuation\">,</span> v27<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"321\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>对于如此复杂的内核函数，我们可以参考 WRK 源码进行分析，分析发现其实和 WRK 的源码几乎是一样的</p>\n<p>WRK 中  <code>IopLoadDriver</code>  源码</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>NTSTATUS</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">IopLoadDriver</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    IN  HANDLE      KeyHandle<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    IN  BOOLEAN     CheckForSafeBoot<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    IN  BOOLEAN     IsFilter<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    OUT NTSTATUS   <span class=\"token operator\">*</span>DriverEntryStatus</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">/*++</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>Routine Description:</pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    This routine is invoked to load a device or file system driver, either</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    during system initialization, or dynamically while the system is running.</pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>Arguments:</pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    KeyHandle - Supplies a handle to the driver service node in the registry</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        that describes the driver to be loaded.</pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    IsFilter - TRUE if the driver is a WDM filter, FALSE otherwise.</pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    CheckForSafeBoot - If TRUE, the driver will be loaded only if it belongs</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                       to the list of safe mode OK binaries.</pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    DriverEntryStatus - Receives status returned by DriverEntry(...)</pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>Return Value:</pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    The function value is the final status of the load operation. If</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    STATUS_FAILED_DRIVER_ENTRY is returned, the driver's return value</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    is stored in DriverEntryStatus.</pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>Notes:</pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    Note that this routine closes the KeyHandle before returning.</pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>--*/</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    NTSTATUS status<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    PLIST_ENTRY nextEntry<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    PKLDR_DATA_TABLE_ENTRY driverEntry<span class=\"token punctuation\">;</span>    </pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    PKEY_BASIC_INFORMATION keyBasicInformation <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    ULONG keyBasicLength<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    UNICODE_STRING baseName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    UNICODE_STRING serviceName <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    OBJECT_ATTRIBUTES objectAttributes<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    PVOID sectionPointer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    UNICODE_STRING driverName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    PDRIVER_OBJECT driverObject<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    PIMAGE_NT_HEADERS ntHeaders<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    PVOID imageBaseAddress<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    ULONG_PTR entryPoint<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    HANDLE driverHandle<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    ULONG i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    POBJECT_NAME_INFORMATION registryPath<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\">DBG</span></span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    LARGE_INTEGER stime<span class=\"token punctuation\">,</span> etime<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    ULONG dtime<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token function\">PAGED_CODE</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    driverName<span class=\"token punctuation\">.</span>Buffer <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PWSTR<span class=\"token punctuation\">)</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    <span class=\"token operator\">*</span>DriverEntryStatus <span class=\"token operator\">=</span> STATUS_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    baseName<span class=\"token punctuation\">.</span>Buffer <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    <span class=\"token comment\">// Begin by formulating the name of the driver image file to be loaded.</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    <span class=\"token comment\">// Note that this is used to determine whether or not the driver has</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    <span class=\"token comment\">// already been loaded by the OS loader, not necessarily in actually</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    <span class=\"token comment\">// loading the driver image, since the node can override that name.</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    status <span class=\"token operator\">=</span> <span class=\"token function\">NtQueryKey</span><span class=\"token punctuation\">(</span> KeyHandle<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>                         KeyBasicInformation<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>                         <span class=\"token punctuation\">(</span>PVOID<span class=\"token punctuation\">)</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>                         <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>                         <span class=\"token operator\">&amp;</span>keyBasicLength <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>status <span class=\"token operator\">!=</span> STATUS_BUFFER_OVERFLOW <span class=\"token operator\">&amp;&amp;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>        status <span class=\"token operator\">!=</span> STATUS_BUFFER_TOO_SMALL<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>        status <span class=\"token operator\">=</span> STATUS_ILL_FORMED_SERVICE_ENTRY<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>        <span class=\"token keyword\">goto</span> IopLoadExit<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>    keyBasicInformation <span class=\"token operator\">=</span> <span class=\"token function\">ExAllocatePool</span><span class=\"token punctuation\">(</span> NonPagedPool<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>                                          keyBasicLength <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>keyBasicInformation<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>        status <span class=\"token operator\">=</span> STATUS_INSUFFICIENT_RESOURCES<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>        <span class=\"token keyword\">goto</span> IopLoadExit<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>    status <span class=\"token operator\">=</span> <span class=\"token function\">NtQueryKey</span><span class=\"token punctuation\">(</span> KeyHandle<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>                         KeyBasicInformation<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>                         keyBasicInformation<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>                         keyBasicLength<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>                         <span class=\"token operator\">&amp;</span>keyBasicLength <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">NT_SUCCESS</span><span class=\"token punctuation\">(</span> status <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>        <span class=\"token keyword\">goto</span> IopLoadExit<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>    <span class=\"token comment\">// Create a Unicode string descriptor which forms the name of the</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>    <span class=\"token comment\">// driver.</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>    baseName<span class=\"token punctuation\">.</span>Length <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>USHORT<span class=\"token punctuation\">)</span> keyBasicInformation<span class=\"token operator\">-></span>NameLength<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>    baseName<span class=\"token punctuation\">.</span>MaximumLength <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>USHORT<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>baseName<span class=\"token punctuation\">.</span>Length <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>    baseName<span class=\"token punctuation\">.</span>Buffer <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>keyBasicInformation<span class=\"token operator\">-></span>Name<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>    serviceName<span class=\"token punctuation\">.</span>Buffer <span class=\"token operator\">=</span> <span class=\"token function\">ExAllocatePool</span><span class=\"token punctuation\">(</span>PagedPool<span class=\"token punctuation\">,</span> baseName<span class=\"token punctuation\">.</span>Length <span class=\"token operator\">+</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>UNICODE_NULL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>serviceName<span class=\"token punctuation\">.</span>Buffer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>        serviceName<span class=\"token punctuation\">.</span>Length <span class=\"token operator\">=</span> baseName<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>        serviceName<span class=\"token punctuation\">.</span>MaximumLength <span class=\"token operator\">=</span> serviceName<span class=\"token punctuation\">.</span>Length <span class=\"token operator\">+</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>UNICODE_NULL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>        <span class=\"token function\">RtlCopyMemory</span><span class=\"token punctuation\">(</span>serviceName<span class=\"token punctuation\">.</span>Buffer<span class=\"token punctuation\">,</span> baseName<span class=\"token punctuation\">.</span>Buffer<span class=\"token punctuation\">,</span> baseName<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>        serviceName<span class=\"token punctuation\">.</span>Buffer<span class=\"token punctuation\">[</span>serviceName<span class=\"token punctuation\">.</span>Length <span class=\"token operator\">/</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>WCHAR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> UNICODE_NULL<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>        status <span class=\"token operator\">=</span> STATUS_INSUFFICIENT_RESOURCES<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>        <span class=\"token keyword\">goto</span> IopLoadExit<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>    <span class=\"token function\">RtlAppendUnicodeToString</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">&amp;</span>baseName<span class=\"token punctuation\">,</span> L<span class=\"token string\">\".SYS\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>    <span class=\"token comment\">// Log the file name</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>    <span class=\"token function\">HeadlessKernelAddLogEntry</span><span class=\"token punctuation\">(</span>HEADLESS_LOG_LOADING_FILENAME<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>baseName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>CheckForSafeBoot <span class=\"token operator\">&amp;&amp;</span> InitSafeBootMode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>        BOOLEAN GroupIsGood <span class=\"token operator\">=</span> FALSE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>        UNICODE_STRING string<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>        PKEY_VALUE_PARTIAL_INFORMATION keyValue<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>        UCHAR nameBuffer<span class=\"token punctuation\">[</span><span class=\"token function\">FIELD_OFFSET</span><span class=\"token punctuation\">(</span>KEY_VALUE_PARTIAL_INFORMATION<span class=\"token punctuation\">,</span> Data<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">64</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>        ULONG length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>        <span class=\"token function\">RtlInitUnicodeString</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">&amp;</span>string<span class=\"token punctuation\">,</span> L<span class=\"token string\">\"Group\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>        keyValue <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PKEY_VALUE_PARTIAL_INFORMATION<span class=\"token punctuation\">)</span>nameBuffer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>        <span class=\"token function\">RtlZeroMemory</span><span class=\"token punctuation\">(</span>nameBuffer<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>nameBuffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>        status <span class=\"token operator\">=</span> <span class=\"token function\">NtQueryValueKey</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>            KeyHandle<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>            <span class=\"token operator\">&amp;</span>string<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>            KeyValuePartialInformation<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre>            keyValue<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>            <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>nameBuffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>            <span class=\"token operator\">&amp;</span>length</pre></td></tr><tr><td data-num=\"149\"></td><td><pre>            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">NT_SUCCESS</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"151\"></td><td><pre></pre></td></tr><tr><td data-num=\"152\"></td><td><pre>            string<span class=\"token punctuation\">.</span>Length <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>USHORT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>keyValue<span class=\"token operator\">-></span>DataLength <span class=\"token operator\">-</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>WCHAR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"153\"></td><td><pre>            string<span class=\"token punctuation\">.</span>MaximumLength <span class=\"token operator\">=</span> string<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"154\"></td><td><pre>            string<span class=\"token punctuation\">.</span>Buffer <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PWSTR<span class=\"token punctuation\">)</span>keyValue<span class=\"token operator\">-></span>Data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"155\"></td><td><pre></pre></td></tr><tr><td data-num=\"156\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">IopSafebootDriverLoad</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>string<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"157\"></td><td><pre>                GroupIsGood <span class=\"token operator\">=</span> TRUE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"158\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"159\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"160\"></td><td><pre></pre></td></tr><tr><td data-num=\"161\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>GroupIsGood <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token function\">IopSafebootDriverLoad</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>baseName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"162\"></td><td><pre>            <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"163\"></td><td><pre>            <span class=\"token comment\">// don't load the driver</span></pre></td></tr><tr><td data-num=\"164\"></td><td><pre>            <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"165\"></td><td><pre></pre></td></tr><tr><td data-num=\"166\"></td><td><pre>            <span class=\"token function\">IopBootLog</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>baseName<span class=\"token punctuation\">,</span> FALSE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"167\"></td><td><pre></pre></td></tr><tr><td data-num=\"168\"></td><td><pre>            <span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SAFEBOOT: skipping device = %wZ(%wZ)\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>baseName<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>string<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"169\"></td><td><pre>            <span class=\"token function\">HeadlessKernelAddLogEntry</span><span class=\"token punctuation\">(</span>HEADLESS_LOG_LOAD_SUCCESSFUL<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"170\"></td><td><pre>            <span class=\"token keyword\">return</span> STATUS_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"171\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"172\"></td><td><pre></pre></td></tr><tr><td data-num=\"173\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"174\"></td><td><pre></pre></td></tr><tr><td data-num=\"175\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"176\"></td><td><pre>    <span class=\"token comment\">// See if this driver has already been loaded by the boot loader.</span></pre></td></tr><tr><td data-num=\"177\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"178\"></td><td><pre></pre></td></tr><tr><td data-num=\"179\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"180\"></td><td><pre>    <span class=\"token comment\">// No need to do KeEnterCriticalRegion as this is called</span></pre></td></tr><tr><td data-num=\"181\"></td><td><pre>    <span class=\"token comment\">// from system process only.</span></pre></td></tr><tr><td data-num=\"182\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"183\"></td><td><pre>    <span class=\"token function\">ExAcquireResourceSharedLite</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">&amp;</span>PsLoadedModuleResource<span class=\"token punctuation\">,</span> TRUE <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"184\"></td><td><pre>    nextEntry <span class=\"token operator\">=</span> PsLoadedModuleList<span class=\"token punctuation\">.</span>Flink<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"185\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>nextEntry <span class=\"token operator\">!=</span> <span class=\"token operator\">&amp;</span>PsLoadedModuleList<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"186\"></td><td><pre></pre></td></tr><tr><td data-num=\"187\"></td><td><pre>        <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"188\"></td><td><pre>        <span class=\"token comment\">// Look at the next boot driver in the list.</span></pre></td></tr><tr><td data-num=\"189\"></td><td><pre>        <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"190\"></td><td><pre></pre></td></tr><tr><td data-num=\"191\"></td><td><pre>        driverEntry <span class=\"token operator\">=</span> <span class=\"token function\">CONTAINING_RECORD</span><span class=\"token punctuation\">(</span> nextEntry<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"192\"></td><td><pre>                                         KLDR_DATA_TABLE_ENTRY<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"193\"></td><td><pre>                                         InLoadOrderLinks <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"194\"></td><td><pre></pre></td></tr><tr><td data-num=\"195\"></td><td><pre>        <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"196\"></td><td><pre>        <span class=\"token comment\">// If this is not the kernel image (ntoskrnl) and not the HAL (hal),</span></pre></td></tr><tr><td data-num=\"197\"></td><td><pre>        <span class=\"token comment\">// then this is a driver, so initialize it.</span></pre></td></tr><tr><td data-num=\"198\"></td><td><pre>        <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"199\"></td><td><pre></pre></td></tr><tr><td data-num=\"200\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">RtlEqualUnicodeString</span><span class=\"token punctuation\">(</span>  <span class=\"token operator\">&amp;</span>baseName<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"201\"></td><td><pre>                             <span class=\"token operator\">&amp;</span>driverEntry<span class=\"token operator\">-></span>FullDllName<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"202\"></td><td><pre>                            TRUE <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"203\"></td><td><pre></pre></td></tr><tr><td data-num=\"204\"></td><td><pre>            status <span class=\"token operator\">=</span> STATUS_IMAGE_ALREADY_LOADED<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"205\"></td><td><pre>            <span class=\"token function\">ExReleaseResourceLite</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">&amp;</span>PsLoadedModuleResource <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"206\"></td><td><pre></pre></td></tr><tr><td data-num=\"207\"></td><td><pre>            <span class=\"token function\">IopBootLog</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>baseName<span class=\"token punctuation\">,</span> TRUE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"208\"></td><td><pre>            baseName<span class=\"token punctuation\">.</span>Buffer <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"209\"></td><td><pre>            <span class=\"token keyword\">goto</span> IopLoadExit<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"210\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"211\"></td><td><pre></pre></td></tr><tr><td data-num=\"212\"></td><td><pre>        nextEntry <span class=\"token operator\">=</span> nextEntry<span class=\"token operator\">-></span>Flink<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"213\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"214\"></td><td><pre>    <span class=\"token function\">ExReleaseResourceLite</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">&amp;</span>PsLoadedModuleResource <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"215\"></td><td><pre></pre></td></tr><tr><td data-num=\"216\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"217\"></td><td><pre>    <span class=\"token comment\">// This driver has not already been loaded by the OS loader.  Form the</span></pre></td></tr><tr><td data-num=\"218\"></td><td><pre>    <span class=\"token comment\">// full path name for this driver.</span></pre></td></tr><tr><td data-num=\"219\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"220\"></td><td><pre></pre></td></tr><tr><td data-num=\"221\"></td><td><pre>    status <span class=\"token operator\">=</span> <span class=\"token function\">IopBuildFullDriverPath</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>serviceName<span class=\"token punctuation\">,</span> KeyHandle<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>baseName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"222\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">NT_SUCCESS</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"223\"></td><td><pre></pre></td></tr><tr><td data-num=\"224\"></td><td><pre>        baseName<span class=\"token punctuation\">.</span>Buffer <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"225\"></td><td><pre>        <span class=\"token keyword\">goto</span> IopLoadExit<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"226\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"227\"></td><td><pre></pre></td></tr><tr><td data-num=\"228\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"229\"></td><td><pre>    <span class=\"token comment\">// Now get the name of the driver object.</span></pre></td></tr><tr><td data-num=\"230\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"231\"></td><td><pre></pre></td></tr><tr><td data-num=\"232\"></td><td><pre>    status <span class=\"token operator\">=</span> <span class=\"token function\">IopGetDriverNameFromKeyNode</span><span class=\"token punctuation\">(</span> KeyHandle<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"233\"></td><td><pre>                                          <span class=\"token operator\">&amp;</span>driverName <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"234\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">NT_SUCCESS</span><span class=\"token punctuation\">(</span> status <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"235\"></td><td><pre>        <span class=\"token keyword\">goto</span> IopLoadExit<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"236\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"237\"></td><td><pre></pre></td></tr><tr><td data-num=\"238\"></td><td><pre>    <span class=\"token function\">InitializeObjectAttributes</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">&amp;</span>objectAttributes<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"239\"></td><td><pre>                                <span class=\"token operator\">&amp;</span>driverName<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"240\"></td><td><pre>                                OBJ_PERMANENT<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"241\"></td><td><pre>                                <span class=\"token punctuation\">(</span>HANDLE<span class=\"token punctuation\">)</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"242\"></td><td><pre>                                <span class=\"token punctuation\">(</span>PSECURITY_DESCRIPTOR<span class=\"token punctuation\">)</span> <span class=\"token constant\">NULL</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"243\"></td><td><pre></pre></td></tr><tr><td data-num=\"244\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"245\"></td><td><pre>    <span class=\"token comment\">// Load the driver image into memory.  If this fails partway through</span></pre></td></tr><tr><td data-num=\"246\"></td><td><pre>    <span class=\"token comment\">// the operation, then it will automatically be unloaded.</span></pre></td></tr><tr><td data-num=\"247\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"248\"></td><td><pre></pre></td></tr><tr><td data-num=\"249\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"250\"></td><td><pre>    <span class=\"token comment\">// No need to do KeEnterCriticalRegion here as this is only</span></pre></td></tr><tr><td data-num=\"251\"></td><td><pre>    <span class=\"token comment\">// called from system process</span></pre></td></tr><tr><td data-num=\"252\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"253\"></td><td><pre>    <span class=\"token function\">ExAcquireResourceExclusiveLite</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">&amp;</span>IopDriverLoadResource<span class=\"token punctuation\">,</span> TRUE <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"254\"></td><td><pre></pre></td></tr><tr><td data-num=\"255\"></td><td><pre>    status <span class=\"token operator\">=</span> <span class=\"token function\">MmLoadSystemImage</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">&amp;</span>baseName<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"256\"></td><td><pre>                                <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"257\"></td><td><pre>                                <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"258\"></td><td><pre>                                <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"259\"></td><td><pre>                                <span class=\"token operator\">&amp;</span>sectionPointer<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"260\"></td><td><pre>                                <span class=\"token punctuation\">(</span>PVOID <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>imageBaseAddress <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"261\"></td><td><pre></pre></td></tr><tr><td data-num=\"262\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">NT_SUCCESS</span><span class=\"token punctuation\">(</span> status <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"263\"></td><td><pre></pre></td></tr><tr><td data-num=\"264\"></td><td><pre></pre></td></tr><tr><td data-num=\"265\"></td><td><pre>        <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"266\"></td><td><pre>        <span class=\"token comment\">// If the image was not already loaded then exit.</span></pre></td></tr><tr><td data-num=\"267\"></td><td><pre>        <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"268\"></td><td><pre></pre></td></tr><tr><td data-num=\"269\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>status <span class=\"token operator\">!=</span> STATUS_IMAGE_ALREADY_LOADED<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"270\"></td><td><pre></pre></td></tr><tr><td data-num=\"271\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\"><span class=\"token function\">defined</span><span class=\"token punctuation\">(</span>_WIN64<span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"272\"></td><td><pre>            <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"273\"></td><td><pre>            <span class=\"token comment\">// If this is a driver meant for another architecture, then block this driver</span></pre></td></tr><tr><td data-num=\"274\"></td><td><pre>            <span class=\"token comment\">// and continue with loading the rest of the drivers stack.</span></pre></td></tr><tr><td data-num=\"275\"></td><td><pre>            <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"276\"></td><td><pre></pre></td></tr><tr><td data-num=\"277\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">IopCheckIfNotNativeDriver</span> <span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>baseName<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> TRUE<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"278\"></td><td><pre>            </pre></td></tr><tr><td data-num=\"279\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>IsFilter <span class=\"token operator\">!=</span> FALSE<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"280\"></td><td><pre>                    status <span class=\"token operator\">=</span> STATUS_DRIVER_BLOCKED<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"281\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"282\"></td><td><pre>                    status <span class=\"token operator\">=</span> STATUS_DRIVER_BLOCKED_CRITICAL<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"283\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"284\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\">DBG</span></span></pre></td></tr><tr><td data-num=\"285\"></td><td><pre>                <span class=\"token function\">DbgPrint</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"IopLoadDriver - Blocking driver %ws (32-bit) - Status = %lx\\n\"</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"286\"></td><td><pre>                          baseName<span class=\"token punctuation\">.</span>Buffer<span class=\"token punctuation\">,</span> status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"287\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"288\"></td><td><pre></pre></td></tr><tr><td data-num=\"289\"></td><td><pre>                <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"290\"></td><td><pre>                <span class=\"token comment\">// Log an event to the eventlog</span></pre></td></tr><tr><td data-num=\"291\"></td><td><pre>                <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"292\"></td><td><pre></pre></td></tr><tr><td data-num=\"293\"></td><td><pre>                <span class=\"token function\">IopLogBlockedDriverEvent</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>baseName<span class=\"token punctuation\">,</span> STATUS_INCOMPATIBLE_DRIVER_BLOCKED<span class=\"token punctuation\">,</span> status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"294\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"295\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"296\"></td><td><pre></pre></td></tr><tr><td data-num=\"297\"></td><td><pre></pre></td></tr><tr><td data-num=\"298\"></td><td><pre>            <span class=\"token function\">ExReleaseResourceLite</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">&amp;</span>IopDriverLoadResource <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"299\"></td><td><pre>            <span class=\"token function\">IopBootLog</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>baseName<span class=\"token punctuation\">,</span> FALSE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"300\"></td><td><pre></pre></td></tr><tr><td data-num=\"301\"></td><td><pre>            <span class=\"token keyword\">goto</span> IopLoadExit<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"302\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"303\"></td><td><pre></pre></td></tr><tr><td data-num=\"304\"></td><td><pre>        <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"305\"></td><td><pre>        <span class=\"token comment\">// Open the driver object.</span></pre></td></tr><tr><td data-num=\"306\"></td><td><pre>        <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"307\"></td><td><pre></pre></td></tr><tr><td data-num=\"308\"></td><td><pre>        status <span class=\"token operator\">=</span> <span class=\"token function\">ObOpenObjectByName</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">&amp;</span>objectAttributes<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"309\"></td><td><pre>                                     IoDriverObjectType<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"310\"></td><td><pre>                                     KernelMode<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"311\"></td><td><pre>                                     <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"312\"></td><td><pre>                                     <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"313\"></td><td><pre>                                     <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"314\"></td><td><pre>                                     <span class=\"token operator\">&amp;</span>driverHandle <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"315\"></td><td><pre></pre></td></tr><tr><td data-num=\"316\"></td><td><pre></pre></td></tr><tr><td data-num=\"317\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">NT_SUCCESS</span><span class=\"token punctuation\">(</span> status <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"318\"></td><td><pre></pre></td></tr><tr><td data-num=\"319\"></td><td><pre>            <span class=\"token function\">ExReleaseResourceLite</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">&amp;</span>IopDriverLoadResource <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"320\"></td><td><pre>            <span class=\"token function\">IopBootLog</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>baseName<span class=\"token punctuation\">,</span> FALSE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"321\"></td><td><pre></pre></td></tr><tr><td data-num=\"322\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>status <span class=\"token operator\">==</span> STATUS_OBJECT_NAME_NOT_FOUND<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"323\"></td><td><pre></pre></td></tr><tr><td data-num=\"324\"></td><td><pre>                <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"325\"></td><td><pre>                <span class=\"token comment\">// Adjust the exit code so that we can distinguish drivers that</span></pre></td></tr><tr><td data-num=\"326\"></td><td><pre>                <span class=\"token comment\">// aren't present from drivers that are present but have had</span></pre></td></tr><tr><td data-num=\"327\"></td><td><pre>                <span class=\"token comment\">// their driver objects made temporary.</span></pre></td></tr><tr><td data-num=\"328\"></td><td><pre>                <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"329\"></td><td><pre>                status <span class=\"token operator\">=</span> STATUS_DRIVER_FAILED_PRIOR_UNLOAD<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"330\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"331\"></td><td><pre></pre></td></tr><tr><td data-num=\"332\"></td><td><pre>            <span class=\"token keyword\">goto</span> IopLoadExit<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"333\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"334\"></td><td><pre></pre></td></tr><tr><td data-num=\"335\"></td><td><pre>        <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"336\"></td><td><pre>        <span class=\"token comment\">// Reference the handle and obtain a pointer to the driver object so that</span></pre></td></tr><tr><td data-num=\"337\"></td><td><pre>        <span class=\"token comment\">// the handle can be deleted without the object going away.</span></pre></td></tr><tr><td data-num=\"338\"></td><td><pre>        <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"339\"></td><td><pre></pre></td></tr><tr><td data-num=\"340\"></td><td><pre>        status <span class=\"token operator\">=</span> <span class=\"token function\">ObReferenceObjectByHandle</span><span class=\"token punctuation\">(</span> driverHandle<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"341\"></td><td><pre>                                            <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"342\"></td><td><pre>                                            IoDriverObjectType<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"343\"></td><td><pre>                                            <span class=\"token function\">KeGetPreviousMode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"344\"></td><td><pre>                                            <span class=\"token punctuation\">(</span>PVOID <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>driverObject<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"345\"></td><td><pre>                                            <span class=\"token punctuation\">(</span>POBJECT_HANDLE_INFORMATION<span class=\"token punctuation\">)</span> <span class=\"token constant\">NULL</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"346\"></td><td><pre>        <span class=\"token function\">NtClose</span><span class=\"token punctuation\">(</span> driverHandle <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"347\"></td><td><pre></pre></td></tr><tr><td data-num=\"348\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">NT_SUCCESS</span><span class=\"token punctuation\">(</span> status <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"349\"></td><td><pre>            <span class=\"token function\">ExReleaseResourceLite</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">&amp;</span>IopDriverLoadResource <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"350\"></td><td><pre>            <span class=\"token function\">IopBootLog</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>baseName<span class=\"token punctuation\">,</span> FALSE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"351\"></td><td><pre>            <span class=\"token keyword\">goto</span> IopLoadExit<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"352\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"353\"></td><td><pre></pre></td></tr><tr><td data-num=\"354\"></td><td><pre></pre></td></tr><tr><td data-num=\"355\"></td><td><pre>        status <span class=\"token operator\">=</span> <span class=\"token function\">IopResurrectDriver</span><span class=\"token punctuation\">(</span> driverObject <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"356\"></td><td><pre></pre></td></tr><tr><td data-num=\"357\"></td><td><pre>        <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"358\"></td><td><pre>        <span class=\"token comment\">// Regardless of the status the driver object should be dereferenced.</span></pre></td></tr><tr><td data-num=\"359\"></td><td><pre>        <span class=\"token comment\">// if the unload has already run then driver is almost gone. If</span></pre></td></tr><tr><td data-num=\"360\"></td><td><pre>        <span class=\"token comment\">// the driver has been resurrected then the I/O system still has its</span></pre></td></tr><tr><td data-num=\"361\"></td><td><pre>        <span class=\"token comment\">// original reference.</span></pre></td></tr><tr><td data-num=\"362\"></td><td><pre>        <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"363\"></td><td><pre></pre></td></tr><tr><td data-num=\"364\"></td><td><pre>        <span class=\"token function\">ObDereferenceObject</span><span class=\"token punctuation\">(</span> driverObject <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"365\"></td><td><pre>        <span class=\"token function\">ExReleaseResourceLite</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">&amp;</span>IopDriverLoadResource <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"366\"></td><td><pre>        <span class=\"token function\">IopBootLog</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>baseName<span class=\"token punctuation\">,</span> FALSE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"367\"></td><td><pre>        <span class=\"token keyword\">goto</span> IopLoadExit<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"368\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"369\"></td><td><pre></pre></td></tr><tr><td data-num=\"370\"></td><td><pre>        ntHeaders <span class=\"token operator\">=</span> <span class=\"token function\">RtlImageNtHeader</span><span class=\"token punctuation\">(</span> imageBaseAddress <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"371\"></td><td><pre></pre></td></tr><tr><td data-num=\"372\"></td><td><pre>        <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"373\"></td><td><pre>        <span class=\"token comment\">// Check should this driver be loaded.  If yes, the enum subkey</span></pre></td></tr><tr><td data-num=\"374\"></td><td><pre>        <span class=\"token comment\">// of the service will be prepared.</span></pre></td></tr><tr><td data-num=\"375\"></td><td><pre>        <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"376\"></td><td><pre></pre></td></tr><tr><td data-num=\"377\"></td><td><pre>        status <span class=\"token operator\">=</span> <span class=\"token function\">IopPrepareDriverLoading</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>serviceName<span class=\"token punctuation\">,</span> KeyHandle<span class=\"token punctuation\">,</span> imageBaseAddress<span class=\"token punctuation\">,</span> IsFilter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"378\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">NT_SUCCESS</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"379\"></td><td><pre>            <span class=\"token function\">MmUnloadSystemImage</span><span class=\"token punctuation\">(</span>sectionPointer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"380\"></td><td><pre>            <span class=\"token function\">ExReleaseResourceLite</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">&amp;</span>IopDriverLoadResource <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"381\"></td><td><pre>            <span class=\"token function\">IopBootLog</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>baseName<span class=\"token punctuation\">,</span> FALSE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"382\"></td><td><pre>            <span class=\"token keyword\">goto</span> IopLoadExit<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"383\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"384\"></td><td><pre></pre></td></tr><tr><td data-num=\"385\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"386\"></td><td><pre></pre></td></tr><tr><td data-num=\"387\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"388\"></td><td><pre>    <span class=\"token comment\">// The driver image has now been loaded into memory.  Create the driver</span></pre></td></tr><tr><td data-num=\"389\"></td><td><pre>    <span class=\"token comment\">// object that represents this image.</span></pre></td></tr><tr><td data-num=\"390\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"391\"></td><td><pre></pre></td></tr><tr><td data-num=\"392\"></td><td><pre>    status <span class=\"token operator\">=</span> <span class=\"token function\">ObCreateObject</span><span class=\"token punctuation\">(</span> <span class=\"token function\">KeGetPreviousMode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"393\"></td><td><pre>                             IoDriverObjectType<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"394\"></td><td><pre>                             <span class=\"token operator\">&amp;</span>objectAttributes<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"395\"></td><td><pre>                             KernelMode<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"396\"></td><td><pre>                             <span class=\"token punctuation\">(</span>PVOID<span class=\"token punctuation\">)</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"397\"></td><td><pre>                             <span class=\"token punctuation\">(</span>ULONG<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span> DRIVER_OBJECT <span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">sizeof</span> <span class=\"token punctuation\">(</span> DRIVER_EXTENSION <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"398\"></td><td><pre>                             <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"399\"></td><td><pre>                             <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"400\"></td><td><pre>                             <span class=\"token punctuation\">(</span>PVOID <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>driverObject <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"401\"></td><td><pre></pre></td></tr><tr><td data-num=\"402\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">NT_SUCCESS</span><span class=\"token punctuation\">(</span> status <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"403\"></td><td><pre>        <span class=\"token function\">MmUnloadSystemImage</span><span class=\"token punctuation\">(</span>sectionPointer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"404\"></td><td><pre>        <span class=\"token function\">ExReleaseResourceLite</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">&amp;</span>IopDriverLoadResource <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"405\"></td><td><pre>        <span class=\"token function\">IopBootLog</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>baseName<span class=\"token punctuation\">,</span> FALSE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"406\"></td><td><pre>        <span class=\"token keyword\">goto</span> IopLoadExit<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"407\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"408\"></td><td><pre></pre></td></tr><tr><td data-num=\"409\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"410\"></td><td><pre>    <span class=\"token comment\">// Initialize this driver object and insert it into the object table.</span></pre></td></tr><tr><td data-num=\"411\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"412\"></td><td><pre></pre></td></tr><tr><td data-num=\"413\"></td><td><pre>    <span class=\"token function\">RtlZeroMemory</span><span class=\"token punctuation\">(</span> driverObject<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span> DRIVER_OBJECT <span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">sizeof</span> <span class=\"token punctuation\">(</span> DRIVER_EXTENSION<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"414\"></td><td><pre>    driverObject<span class=\"token operator\">-></span>DriverExtension <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PDRIVER_EXTENSION<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>driverObject <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"415\"></td><td><pre>    driverObject<span class=\"token operator\">-></span>DriverExtension<span class=\"token operator\">-></span>DriverObject <span class=\"token operator\">=</span> driverObject<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"416\"></td><td><pre></pre></td></tr><tr><td data-num=\"417\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> IRP_MJ_MAXIMUM_FUNCTION<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"418\"></td><td><pre>        driverObject<span class=\"token operator\">-></span>MajorFunction<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> IopInvalidDeviceRequest<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"419\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"420\"></td><td><pre></pre></td></tr><tr><td data-num=\"421\"></td><td><pre>    driverObject<span class=\"token operator\">-></span>Type <span class=\"token operator\">=</span> IO_TYPE_DRIVER<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"422\"></td><td><pre>    driverObject<span class=\"token operator\">-></span>Size <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span> DRIVER_OBJECT <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"423\"></td><td><pre>    ntHeaders <span class=\"token operator\">=</span> <span class=\"token function\">RtlImageNtHeader</span><span class=\"token punctuation\">(</span> imageBaseAddress <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"424\"></td><td><pre>    entryPoint <span class=\"token operator\">=</span> ntHeaders<span class=\"token operator\">-></span>OptionalHeader<span class=\"token punctuation\">.</span>AddressOfEntryPoint<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"425\"></td><td><pre>    entryPoint <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>ULONG_PTR<span class=\"token punctuation\">)</span> imageBaseAddress<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"426\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>ntHeaders<span class=\"token operator\">-></span>OptionalHeader<span class=\"token punctuation\">.</span>DllCharacteristics <span class=\"token operator\">&amp;</span> IMAGE_DLLCHARACTERISTICS_WDM_DRIVER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"427\"></td><td><pre>        driverObject<span class=\"token operator\">-></span>Flags <span class=\"token operator\">|=</span> DRVO_LEGACY_DRIVER<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"428\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"429\"></td><td><pre>    driverObject<span class=\"token operator\">-></span>DriverInit <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PDRIVER_INITIALIZE<span class=\"token punctuation\">)</span> entryPoint<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"430\"></td><td><pre>    driverObject<span class=\"token operator\">-></span>DriverSection <span class=\"token operator\">=</span> sectionPointer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"431\"></td><td><pre>    driverObject<span class=\"token operator\">-></span>DriverStart <span class=\"token operator\">=</span> imageBaseAddress<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"432\"></td><td><pre>    driverObject<span class=\"token operator\">-></span>DriverSize <span class=\"token operator\">=</span> ntHeaders<span class=\"token operator\">-></span>OptionalHeader<span class=\"token punctuation\">.</span>SizeOfImage<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"433\"></td><td><pre></pre></td></tr><tr><td data-num=\"434\"></td><td><pre>    status <span class=\"token operator\">=</span> <span class=\"token function\">ObInsertObject</span><span class=\"token punctuation\">(</span> driverObject<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"435\"></td><td><pre>                             <span class=\"token punctuation\">(</span>PACCESS_STATE<span class=\"token punctuation\">)</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"436\"></td><td><pre>                             FILE_READ_DATA<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"437\"></td><td><pre>                             <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"438\"></td><td><pre>                             <span class=\"token punctuation\">(</span>PVOID <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"439\"></td><td><pre>                             <span class=\"token operator\">&amp;</span>driverHandle <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"440\"></td><td><pre></pre></td></tr><tr><td data-num=\"441\"></td><td><pre>    <span class=\"token function\">ExReleaseResourceLite</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">&amp;</span>IopDriverLoadResource <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"442\"></td><td><pre></pre></td></tr><tr><td data-num=\"443\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">NT_SUCCESS</span><span class=\"token punctuation\">(</span> status <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"444\"></td><td><pre>        <span class=\"token function\">IopBootLog</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>baseName<span class=\"token punctuation\">,</span> FALSE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"445\"></td><td><pre>        <span class=\"token keyword\">goto</span> IopLoadExit<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"446\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"447\"></td><td><pre></pre></td></tr><tr><td data-num=\"448\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"449\"></td><td><pre>    <span class=\"token comment\">// Reference the handle and obtain a pointer to the driver object so that</span></pre></td></tr><tr><td data-num=\"450\"></td><td><pre>    <span class=\"token comment\">// the handle can be deleted without the object going away.</span></pre></td></tr><tr><td data-num=\"451\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"452\"></td><td><pre></pre></td></tr><tr><td data-num=\"453\"></td><td><pre>    status <span class=\"token operator\">=</span> <span class=\"token function\">ObReferenceObjectByHandle</span><span class=\"token punctuation\">(</span> driverHandle<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"454\"></td><td><pre>                                        <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"455\"></td><td><pre>                                        IoDriverObjectType<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"456\"></td><td><pre>                                        <span class=\"token function\">KeGetPreviousMode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"457\"></td><td><pre>                                        <span class=\"token punctuation\">(</span>PVOID <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>driverObject<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"458\"></td><td><pre>                                        <span class=\"token punctuation\">(</span>POBJECT_HANDLE_INFORMATION<span class=\"token punctuation\">)</span> <span class=\"token constant\">NULL</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"459\"></td><td><pre></pre></td></tr><tr><td data-num=\"460\"></td><td><pre>    <span class=\"token function\">ASSERT</span><span class=\"token punctuation\">(</span>status <span class=\"token operator\">==</span> STATUS_SUCCESS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"461\"></td><td><pre></pre></td></tr><tr><td data-num=\"462\"></td><td><pre>    <span class=\"token function\">NtClose</span><span class=\"token punctuation\">(</span> driverHandle <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"463\"></td><td><pre></pre></td></tr><tr><td data-num=\"464\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"465\"></td><td><pre>    <span class=\"token comment\">// Load the Registry information in the appropriate fields of the device</span></pre></td></tr><tr><td data-num=\"466\"></td><td><pre>    <span class=\"token comment\">// object.</span></pre></td></tr><tr><td data-num=\"467\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"468\"></td><td><pre></pre></td></tr><tr><td data-num=\"469\"></td><td><pre>    driverObject<span class=\"token operator\">-></span>HardwareDatabase <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"470\"></td><td><pre>        <span class=\"token operator\">&amp;</span>CmRegistryMachineHardwareDescriptionSystemName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"471\"></td><td><pre></pre></td></tr><tr><td data-num=\"472\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"473\"></td><td><pre>    <span class=\"token comment\">// Store the name of the device driver in the driver object so that it</span></pre></td></tr><tr><td data-num=\"474\"></td><td><pre>    <span class=\"token comment\">// can be easily found by the error log thread.</span></pre></td></tr><tr><td data-num=\"475\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"476\"></td><td><pre></pre></td></tr><tr><td data-num=\"477\"></td><td><pre>    driverObject<span class=\"token operator\">-></span>DriverName<span class=\"token punctuation\">.</span>Buffer <span class=\"token operator\">=</span> <span class=\"token function\">ExAllocatePool</span><span class=\"token punctuation\">(</span> PagedPool<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"478\"></td><td><pre>                                                      driverName<span class=\"token punctuation\">.</span>MaximumLength <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"479\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>driverObject<span class=\"token operator\">-></span>DriverName<span class=\"token punctuation\">.</span>Buffer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"480\"></td><td><pre>        driverObject<span class=\"token operator\">-></span>DriverName<span class=\"token punctuation\">.</span>MaximumLength <span class=\"token operator\">=</span> driverName<span class=\"token punctuation\">.</span>MaximumLength<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"481\"></td><td><pre>        driverObject<span class=\"token operator\">-></span>DriverName<span class=\"token punctuation\">.</span>Length <span class=\"token operator\">=</span> driverName<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"482\"></td><td><pre></pre></td></tr><tr><td data-num=\"483\"></td><td><pre>        <span class=\"token function\">RtlCopyMemory</span><span class=\"token punctuation\">(</span> driverObject<span class=\"token operator\">-></span>DriverName<span class=\"token punctuation\">.</span>Buffer<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"484\"></td><td><pre>                       driverName<span class=\"token punctuation\">.</span>Buffer<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"485\"></td><td><pre>                       driverName<span class=\"token punctuation\">.</span>MaximumLength <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"486\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"487\"></td><td><pre></pre></td></tr><tr><td data-num=\"488\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"489\"></td><td><pre>    <span class=\"token comment\">// Query the name of the registry path for this driver so that it can</span></pre></td></tr><tr><td data-num=\"490\"></td><td><pre>    <span class=\"token comment\">// be passed to the driver.</span></pre></td></tr><tr><td data-num=\"491\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"492\"></td><td><pre></pre></td></tr><tr><td data-num=\"493\"></td><td><pre>    registryPath <span class=\"token operator\">=</span> <span class=\"token function\">ExAllocatePool</span><span class=\"token punctuation\">(</span> NonPagedPool<span class=\"token punctuation\">,</span> PAGE_SIZE <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"494\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>registryPath<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"495\"></td><td><pre>        <span class=\"token function\">ObMakeTemporaryObject</span><span class=\"token punctuation\">(</span> driverObject <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"496\"></td><td><pre>        <span class=\"token function\">ObDereferenceObject</span><span class=\"token punctuation\">(</span> driverObject <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"497\"></td><td><pre>        status <span class=\"token operator\">=</span> STATUS_INSUFFICIENT_RESOURCES<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"498\"></td><td><pre>        <span class=\"token keyword\">goto</span> IopLoadExit<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"499\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"500\"></td><td><pre></pre></td></tr><tr><td data-num=\"501\"></td><td><pre>    status <span class=\"token operator\">=</span> <span class=\"token function\">NtQueryObject</span><span class=\"token punctuation\">(</span> KeyHandle<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"502\"></td><td><pre>                            ObjectNameInformation<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"503\"></td><td><pre>                            registryPath<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"504\"></td><td><pre>                            PAGE_SIZE<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"505\"></td><td><pre>                            <span class=\"token operator\">&amp;</span>i <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"506\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">NT_SUCCESS</span><span class=\"token punctuation\">(</span> status <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"507\"></td><td><pre>        <span class=\"token function\">ObMakeTemporaryObject</span><span class=\"token punctuation\">(</span> driverObject <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"508\"></td><td><pre>        <span class=\"token function\">ObDereferenceObject</span><span class=\"token punctuation\">(</span> driverObject <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"509\"></td><td><pre>        <span class=\"token function\">ExFreePool</span><span class=\"token punctuation\">(</span> registryPath <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"510\"></td><td><pre>        <span class=\"token keyword\">goto</span> IopLoadExit<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"511\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"512\"></td><td><pre></pre></td></tr><tr><td data-num=\"513\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\">DBG</span></span></pre></td></tr><tr><td data-num=\"514\"></td><td><pre>    <span class=\"token function\">KeQuerySystemTime</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>stime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"515\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"516\"></td><td><pre></pre></td></tr><tr><td data-num=\"517\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"518\"></td><td><pre>    <span class=\"token comment\">// Store the service key name of the device driver in the driver object</span></pre></td></tr><tr><td data-num=\"519\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"520\"></td><td><pre></pre></td></tr><tr><td data-num=\"521\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>serviceName<span class=\"token punctuation\">.</span>Buffer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"522\"></td><td><pre>        driverObject<span class=\"token operator\">-></span>DriverExtension<span class=\"token operator\">-></span>ServiceKeyName<span class=\"token punctuation\">.</span>Buffer <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"523\"></td><td><pre>            <span class=\"token function\">ExAllocatePool</span><span class=\"token punctuation\">(</span> NonPagedPool<span class=\"token punctuation\">,</span> serviceName<span class=\"token punctuation\">.</span>MaximumLength <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"524\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>driverObject<span class=\"token operator\">-></span>DriverExtension<span class=\"token operator\">-></span>ServiceKeyName<span class=\"token punctuation\">.</span>Buffer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"525\"></td><td><pre>            driverObject<span class=\"token operator\">-></span>DriverExtension<span class=\"token operator\">-></span>ServiceKeyName<span class=\"token punctuation\">.</span>MaximumLength <span class=\"token operator\">=</span> serviceName<span class=\"token punctuation\">.</span>MaximumLength<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"526\"></td><td><pre>            driverObject<span class=\"token operator\">-></span>DriverExtension<span class=\"token operator\">-></span>ServiceKeyName<span class=\"token punctuation\">.</span>Length <span class=\"token operator\">=</span> serviceName<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"527\"></td><td><pre></pre></td></tr><tr><td data-num=\"528\"></td><td><pre>            <span class=\"token function\">RtlCopyMemory</span><span class=\"token punctuation\">(</span> driverObject<span class=\"token operator\">-></span>DriverExtension<span class=\"token operator\">-></span>ServiceKeyName<span class=\"token punctuation\">.</span>Buffer<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"529\"></td><td><pre>                           serviceName<span class=\"token punctuation\">.</span>Buffer<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"530\"></td><td><pre>                           serviceName<span class=\"token punctuation\">.</span>MaximumLength <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"531\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"532\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"533\"></td><td><pre></pre></td></tr><tr><td data-num=\"534\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"535\"></td><td><pre>    <span class=\"token comment\">// Now invoke the driver's initialization routine to initialize itself.</span></pre></td></tr><tr><td data-num=\"536\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"537\"></td><td><pre></pre></td></tr><tr><td data-num=\"538\"></td><td><pre>    status <span class=\"token operator\">=</span> driverObject<span class=\"token operator\">-></span><span class=\"token function\">DriverInit</span><span class=\"token punctuation\">(</span> driverObject<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>registryPath<span class=\"token operator\">-></span>Name <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"539\"></td><td><pre></pre></td></tr><tr><td data-num=\"540\"></td><td><pre>    <span class=\"token operator\">*</span>DriverEntryStatus <span class=\"token operator\">=</span> status<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"541\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">NT_SUCCESS</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"542\"></td><td><pre></pre></td></tr><tr><td data-num=\"543\"></td><td><pre>        status <span class=\"token operator\">=</span> STATUS_FAILED_DRIVER_ENTRY<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"544\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"545\"></td><td><pre></pre></td></tr><tr><td data-num=\"546\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\">DBG</span></span></pre></td></tr><tr><td data-num=\"547\"></td><td><pre></pre></td></tr><tr><td data-num=\"548\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"549\"></td><td><pre>    <span class=\"token comment\">// If DriverInit took longer than 5 seconds, print a message.</span></pre></td></tr><tr><td data-num=\"550\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"551\"></td><td><pre></pre></td></tr><tr><td data-num=\"552\"></td><td><pre>    <span class=\"token function\">KeQuerySystemTime</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>etime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"553\"></td><td><pre>    dtime  <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>ULONG<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>etime<span class=\"token punctuation\">.</span>QuadPart <span class=\"token operator\">-</span> stime<span class=\"token punctuation\">.</span>QuadPart<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">1000000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"554\"></td><td><pre></pre></td></tr><tr><td data-num=\"555\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dtime <span class=\"token operator\">></span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"556\"></td><td><pre>        <span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"IOLOAD: Driver %wZ took %d.%ds to %s\\n\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"557\"></td><td><pre>            <span class=\"token operator\">&amp;</span>driverName<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"558\"></td><td><pre>            dtime<span class=\"token operator\">/</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"559\"></td><td><pre>            dtime<span class=\"token operator\">%</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"560\"></td><td><pre>            <span class=\"token function\">NT_SUCCESS</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token string\">\"initialize\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"fail initialization\"</span></pre></td></tr><tr><td data-num=\"561\"></td><td><pre>            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"562\"></td><td><pre></pre></td></tr><tr><td data-num=\"563\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"564\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"565\"></td><td><pre></pre></td></tr><tr><td data-num=\"566\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"567\"></td><td><pre>    <span class=\"token comment\">// Workaround for broken NT 4.0 3D labs driver</span></pre></td></tr><tr><td data-num=\"568\"></td><td><pre>    <span class=\"token comment\">// They zero out some function table entries by mistake.</span></pre></td></tr><tr><td data-num=\"569\"></td><td><pre></pre></td></tr><tr><td data-num=\"570\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> IRP_MJ_MAXIMUM_FUNCTION<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"571\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>driverObject<span class=\"token operator\">-></span>MajorFunction<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"572\"></td><td><pre>            <span class=\"token function\">ASSERT</span><span class=\"token punctuation\">(</span>driverObject<span class=\"token operator\">-></span>MajorFunction<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"573\"></td><td><pre>            driverObject<span class=\"token operator\">-></span>MajorFunction<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> IopInvalidDeviceRequest<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"574\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"575\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"576\"></td><td><pre></pre></td></tr><tr><td data-num=\"577\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"578\"></td><td><pre>    <span class=\"token comment\">// If DriverInit doesn't work, then simply unload the image and mark the driver</span></pre></td></tr><tr><td data-num=\"579\"></td><td><pre>    <span class=\"token comment\">// object as temporary.  This will cause everything to be deleted.</span></pre></td></tr><tr><td data-num=\"580\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"581\"></td><td><pre></pre></td></tr><tr><td data-num=\"582\"></td><td><pre>    <span class=\"token function\">ExFreePool</span><span class=\"token punctuation\">(</span> registryPath <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"583\"></td><td><pre></pre></td></tr><tr><td data-num=\"584\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"585\"></td><td><pre>    <span class=\"token comment\">// If we load the driver because we think it is a legacy driver and</span></pre></td></tr><tr><td data-num=\"586\"></td><td><pre>    <span class=\"token comment\">// it does not create any device object in its DriverEntry.  We will</span></pre></td></tr><tr><td data-num=\"587\"></td><td><pre>    <span class=\"token comment\">// unload this driver.</span></pre></td></tr><tr><td data-num=\"588\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"589\"></td><td><pre></pre></td></tr><tr><td data-num=\"590\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">NT_SUCCESS</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token function\">IopIsLegacyDriver</span><span class=\"token punctuation\">(</span>driverObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"591\"></td><td><pre></pre></td></tr><tr><td data-num=\"592\"></td><td><pre>        status <span class=\"token operator\">=</span> <span class=\"token function\">IopPnpDriverStarted</span><span class=\"token punctuation\">(</span>driverObject<span class=\"token punctuation\">,</span> KeyHandle<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>serviceName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"593\"></td><td><pre></pre></td></tr><tr><td data-num=\"594\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">NT_SUCCESS</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"595\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>driverObject<span class=\"token operator\">-></span>DriverUnload<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"596\"></td><td><pre>                driverObject<span class=\"token operator\">-></span>Flags <span class=\"token operator\">|=</span> DRVO_UNLOAD_INVOKED<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"597\"></td><td><pre>                driverObject<span class=\"token operator\">-></span><span class=\"token function\">DriverUnload</span><span class=\"token punctuation\">(</span>driverObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"598\"></td><td><pre>                <span class=\"token function\">IopBootLog</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>baseName<span class=\"token punctuation\">,</span> FALSE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"599\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"600\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\">DBG</span></span></pre></td></tr><tr><td data-num=\"601\"></td><td><pre>                <span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"IopLoadDriver: A PnP driver %wZ does not support DriverUnload routine.\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>driverName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"602\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"603\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"604\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"605\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"606\"></td><td><pre></pre></td></tr><tr><td data-num=\"607\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">NT_SUCCESS</span><span class=\"token punctuation\">(</span> status <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"608\"></td><td><pre>        <span class=\"token function\">ObMakeTemporaryObject</span><span class=\"token punctuation\">(</span> driverObject <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"609\"></td><td><pre>        <span class=\"token function\">ObDereferenceObject</span><span class=\"token punctuation\">(</span> driverObject <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"610\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"611\"></td><td><pre></pre></td></tr><tr><td data-num=\"612\"></td><td><pre>        <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"613\"></td><td><pre>        <span class=\"token comment\">// Free the memory occupied by the driver's initialization routines.</span></pre></td></tr><tr><td data-num=\"614\"></td><td><pre>        <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"615\"></td><td><pre></pre></td></tr><tr><td data-num=\"616\"></td><td><pre>        <span class=\"token function\">IopBootLog</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>baseName<span class=\"token punctuation\">,</span> TRUE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"617\"></td><td><pre>        <span class=\"token function\">MmFreeDriverInitialization</span><span class=\"token punctuation\">(</span> driverObject<span class=\"token operator\">-></span>DriverSection <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"618\"></td><td><pre>        <span class=\"token function\">IopReadyDeviceObjects</span><span class=\"token punctuation\">(</span> driverObject <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"619\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"620\"></td><td><pre></pre></td></tr><tr><td data-num=\"621\"></td><td><pre>IopLoadExit<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"622\"></td><td><pre></pre></td></tr><tr><td data-num=\"623\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">NT_SUCCESS</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>status <span class=\"token operator\">==</span> STATUS_IMAGE_ALREADY_LOADED<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"624\"></td><td><pre>        <span class=\"token function\">HeadlessKernelAddLogEntry</span><span class=\"token punctuation\">(</span>HEADLESS_LOG_LOAD_SUCCESSFUL<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"625\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"626\"></td><td><pre>        <span class=\"token function\">HeadlessKernelAddLogEntry</span><span class=\"token punctuation\">(</span>HEADLESS_LOG_LOAD_FAILED<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"627\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"628\"></td><td><pre></pre></td></tr><tr><td data-num=\"629\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"630\"></td><td><pre>    <span class=\"token comment\">// Free any pool that was allocated by this routine that has not yet</span></pre></td></tr><tr><td data-num=\"631\"></td><td><pre>    <span class=\"token comment\">// been freed.</span></pre></td></tr><tr><td data-num=\"632\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"633\"></td><td><pre></pre></td></tr><tr><td data-num=\"634\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>driverName<span class=\"token punctuation\">.</span>Buffer <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"635\"></td><td><pre>        <span class=\"token function\">ExFreePool</span><span class=\"token punctuation\">(</span> driverName<span class=\"token punctuation\">.</span>Buffer <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"636\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"637\"></td><td><pre></pre></td></tr><tr><td data-num=\"638\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>keyBasicInformation <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"639\"></td><td><pre>        <span class=\"token function\">ExFreePool</span><span class=\"token punctuation\">(</span> keyBasicInformation <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"640\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"641\"></td><td><pre></pre></td></tr><tr><td data-num=\"642\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>serviceName<span class=\"token punctuation\">.</span>Buffer <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"643\"></td><td><pre>        <span class=\"token function\">ExFreePool</span><span class=\"token punctuation\">(</span>serviceName<span class=\"token punctuation\">.</span>Buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"644\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"645\"></td><td><pre></pre></td></tr><tr><td data-num=\"646\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>baseName<span class=\"token punctuation\">.</span>Buffer <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"647\"></td><td><pre>        <span class=\"token function\">ExFreePool</span><span class=\"token punctuation\">(</span>baseName<span class=\"token punctuation\">.</span>Buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"648\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"649\"></td><td><pre></pre></td></tr><tr><td data-num=\"650\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"651\"></td><td><pre>    <span class=\"token comment\">// If this routine is about to return a failure, then let the Configuration</span></pre></td></tr><tr><td data-num=\"652\"></td><td><pre>    <span class=\"token comment\">// Manager know about it.  But, if STATUS_PLUGPLAY_NO_DEVICE, the device was</span></pre></td></tr><tr><td data-num=\"653\"></td><td><pre>    <span class=\"token comment\">// disabled by hardware profile.  In this case we don't need to report it.</span></pre></td></tr><tr><td data-num=\"654\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"655\"></td><td><pre></pre></td></tr><tr><td data-num=\"656\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">NT_SUCCESS</span><span class=\"token punctuation\">(</span> status <span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>status <span class=\"token operator\">!=</span> STATUS_PLUGPLAY_NO_DEVICE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"657\"></td><td><pre></pre></td></tr><tr><td data-num=\"658\"></td><td><pre>        NTSTATUS lStatus<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"659\"></td><td><pre>        PULONG errorControl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"660\"></td><td><pre>        PKEY_VALUE_FULL_INFORMATION keyValueInformation<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"661\"></td><td><pre></pre></td></tr><tr><td data-num=\"662\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>status <span class=\"token operator\">!=</span> STATUS_IMAGE_ALREADY_LOADED<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"663\"></td><td><pre></pre></td></tr><tr><td data-num=\"664\"></td><td><pre>            <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"665\"></td><td><pre>            <span class=\"token comment\">// If driver was loaded, do not call IopDriverLoadingFailed to change</span></pre></td></tr><tr><td data-num=\"666\"></td><td><pre>            <span class=\"token comment\">// the driver loading status.  Because, obviously, the driver is</span></pre></td></tr><tr><td data-num=\"667\"></td><td><pre>            <span class=\"token comment\">// running.</span></pre></td></tr><tr><td data-num=\"668\"></td><td><pre>            <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"669\"></td><td><pre></pre></td></tr><tr><td data-num=\"670\"></td><td><pre>            <span class=\"token function\">IopDriverLoadingFailed</span><span class=\"token punctuation\">(</span>KeyHandle<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"671\"></td><td><pre>            lStatus <span class=\"token operator\">=</span> <span class=\"token function\">IopGetRegistryValue</span><span class=\"token punctuation\">(</span> KeyHandle<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"672\"></td><td><pre>                                           L<span class=\"token string\">\"ErrorControl\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"673\"></td><td><pre>                                           <span class=\"token operator\">&amp;</span>keyValueInformation <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"674\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">NT_SUCCESS</span><span class=\"token punctuation\">(</span> lStatus <span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>keyValueInformation<span class=\"token operator\">-></span>DataLength<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"675\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">NT_SUCCESS</span><span class=\"token punctuation\">(</span> lStatus <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"676\"></td><td><pre>                    <span class=\"token function\">ExFreePool</span><span class=\"token punctuation\">(</span> keyValueInformation <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"677\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"678\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"679\"></td><td><pre>                errorControl <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PULONG<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>PUCHAR<span class=\"token punctuation\">)</span> keyValueInformation <span class=\"token operator\">+</span> keyValueInformation<span class=\"token operator\">-></span>DataOffset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"680\"></td><td><pre>                <span class=\"token function\">CmBootLastKnownGood</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">*</span>errorControl <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"681\"></td><td><pre>                <span class=\"token function\">ExFreePool</span><span class=\"token punctuation\">(</span> keyValueInformation <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"682\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"683\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"684\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"685\"></td><td><pre></pre></td></tr><tr><td data-num=\"686\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"687\"></td><td><pre>    <span class=\"token comment\">// Close the caller's handle and return the final status from the load</span></pre></td></tr><tr><td data-num=\"688\"></td><td><pre>    <span class=\"token comment\">// operation.</span></pre></td></tr><tr><td data-num=\"689\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"690\"></td><td><pre></pre></td></tr><tr><td data-num=\"691\"></td><td><pre>    <span class=\"token function\">ObCloseHandle</span><span class=\"token punctuation\">(</span> KeyHandle <span class=\"token punctuation\">,</span> KernelMode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"692\"></td><td><pre>    <span class=\"token keyword\">return</span> status<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"693\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>其中这个链表就是我们在 0 环的断的链表，链表由操作系统填充。</p>\n<p><img data-src=\"image003.png\" alt=\"\" /></p>\n<p>前期是读取注册表获取驱动信息，然后申请资源然后在  <code>PsLoadedModuleList</code>  这个全局变量插入一个驱动对象。</p>\n<p>接着向下分析，看到有驱动对象相关的操作：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>driverObject<span class=\"token operator\">-></span>DriverExtension <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PDRIVER_EXTENSION<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>driverObject <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>driverObject<span class=\"token operator\">-></span>DriverExtension<span class=\"token operator\">-></span>DriverObject <span class=\"token operator\">=</span> driverObject<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>不知道为什么使驱动对象加 1，使驱动扩展节的第一个驱动对象指向自己</p>\n<p><img data-src=\"image004.png\" alt=\"\" /></p>\n<p>接着就是一系列的赋值操作，其中有一个驱动初始化的函数，里面有驱动的入口函数：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>driverObject<span class=\"token operator\">-></span>DriverInit <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PDRIVER_INITIALIZE<span class=\"token punctuation\">)</span> entryPoint<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><img data-src=\"image005.png\" alt=\"\" /></p>\n<p>可以发现是 PE 映像。</p>\n<p>下面是给节区赋值：</p>\n<p><code>driverObject-&gt;DriverSection = sectionPointer;</code></p>\n<p><code>sectionPointer</code>  这样被赋值了</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>status <span class=\"token operator\">=</span> <span class=\"token function\">MmLoadSystemImage</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">&amp;</span>baseName<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>                                <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                                <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                                <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                                <span class=\"token operator\">&amp;</span>sectionPointer<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                                <span class=\"token punctuation\">(</span>PVOID <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>imageBaseAddress <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>跟一下  <code>MmLoadSystemImage</code>  这个函数:</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>NTSTATUS</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">MmLoadSystemImage</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    IN PUNICODE_STRING ImageFileName<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    IN PUNICODE_STRING NamePrefix OPTIONAL<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    IN PUNICODE_STRING LoadedBaseName OPTIONAL<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    IN ULONG LoadFlags<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    OUT PVOID <span class=\"token operator\">*</span>ImageHandle<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    OUT PVOID <span class=\"token operator\">*</span>ImageBaseAddress</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>我们只看其对倒数第二个函数的操作：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">*</span>ImageHandle <span class=\"token operator\">=</span> DataTableEntry<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>发现有对其赋值的操作，查看  <code>DataTableEntry</code> :</p>\n<p>查看其声明  <code>PKLDR_DATA_TABLE_ENTRY DataTableEntry;</code></p>\n<p>查看类型：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_KLDR_DATA_TABLE_ENTRY</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    LIST_ENTRY InLoadOrderLinks<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    PVOID ExceptionTable<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    ULONG ExceptionTableSize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// ULONG padding on IA64</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    PVOID GpValue<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    PNON_PAGED_DEBUG_INFO NonPagedDebugInfo<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    PVOID DllBase<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    PVOID EntryPoint<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    ULONG SizeOfImage<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    UNICODE_STRING FullDllName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    UNICODE_STRING BaseDllName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    ULONG Flags<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    USHORT LoadCount<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    USHORT __Unused5<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    PVOID SectionPointer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    ULONG CheckSum<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">// ULONG padding on IA64</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    PVOID LoadedImports<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    PVOID PatchInformation<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span> KLDR_DATA_TABLE_ENTRY<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>PKLDR_DATA_TABLE_ENTRY<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>还是这个链表。</p>\n<p>接着向下分析：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>status <span class=\"token operator\">=</span> <span class=\"token function\">ObInsertObject</span><span class=\"token punctuation\">(</span> driverObject<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>                             <span class=\"token punctuation\">(</span>PACCESS_STATE<span class=\"token punctuation\">)</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                             FILE_READ_DATA<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                             <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                             <span class=\"token punctuation\">(</span>PVOID <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                             <span class=\"token operator\">&amp;</span>driverHandle <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这个函数的介绍是：这个例程在当前进程句柄表中插入一个对象。</p>\n<p>接着下面的函数是资源相关的，暂时不分析。</p>\n<p>接着又是测试  <code>ObReferenceObjectByHandle</code>  函数，</p>\n<p>WRK 中的函数介绍为：给定一个对象的句柄，这个例程返回一个指向具有适当引用计数的对象主体的指针。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>status <span class=\"token operator\">=</span> <span class=\"token function\">ObReferenceObjectByHandle</span><span class=\"token punctuation\">(</span> driverHandle<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>                                    <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                                    IoDriverObjectType<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                                    <span class=\"token function\">KeGetPreviousMode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                                    <span class=\"token punctuation\">(</span>PVOID <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>driverObject<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                                    <span class=\"token punctuation\">(</span>POBJECT_HANDLE_INFORMATION<span class=\"token punctuation\">)</span> <span class=\"token constant\">NULL</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">ASSERT</span><span class=\"token punctuation\">(</span>status <span class=\"token operator\">==</span> STATUS_SUCCESS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token function\">NtClose</span><span class=\"token punctuation\">(</span> driverHandle <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>判读是否成功后就关闭句柄了。</p>\n<p>接着向下分析直到看到调用入口点了：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>status <span class=\"token operator\">=</span> driverObject<span class=\"token operator\">-></span><span class=\"token function\">DriverInit</span><span class=\"token punctuation\">(</span> driverObject<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>registryPath<span class=\"token operator\">-></span>Name <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">*</span>DriverEntryStatus <span class=\"token operator\">=</span> status<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">NT_SUCCESS</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  status <span class=\"token operator\">=</span> STATUS_FAILED_DRIVER_ENTRY<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>也就是说只要符合 PE 文件格式的，我们自己可以构造，就是用 mian 函数构造两个参数，分别接受这个两个对象，一样的可以贴到这个内核里面，通过服务注册，因为从上到下来看它并没用做什么校验。--- 火哥原话 …… 没听懂。</p>\n<p><strong>这里还有一个扩展知识</strong><br />\n调用  <code>DriverInit</code>  函数时有一个返回，如果不成功，还会把这个返回值给下一个函数，而下一个函数会把这个加载失败的驱动给去掉。而这种一次性的加载能干什么呢？<br />\n如果我们是想提权，直接在 DriverEntry 中构建一个调用门或者构建一个中断，然后把我们的函数拷贝到自己分配的一块内存，把 ShellCode 拷进去，这样我们驱动返回失败，驱动被摘除，只留下了一块内存（函数）了，基本就检测不到了。</p>\n<p><code>IopLoadExit</code>  后面都是释放了内存。</p>\n<p>如图：</p>\n<p><img data-src=\"image006.png\" alt=\"\" /></p>\n<p>系统已经自己抹去 PE 指纹了，初始化函数已经没了。</p>\n<p>操作系统并没有把驱动对象放到全局变量中保存，只是一个局部变量，唯一做得就是放到链表中保存，搞定这个链表就把驱动隐藏了。</p>\n<p>操作系统若不释放的话，谁都能找到这个驱动的入口的点了:</p>\n<p><img data-src=\"image008.png\" alt=\"\" /></p>\n<p>当操作系统抹去 PE 指纹后，就不是一个 PE 文件了，只是一块内存注入到了内核空间中（高 2G 上）。<br />\n所以在这里，所有的东西都被抹掉了，只能通过这个链表才能找的着，那我们如何在这里动手脚呢？</p>\n<p>还是需要看这两个结构体：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kd<span class=\"token operator\">></span> <span class=\"token operator\">?</span><span class=\"token operator\">?</span> <span class=\"token operator\">/</span>s pdriver</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">_DRIVER_OBJECT</span> <span class=\"token operator\">*</span> <span class=\"token number\">0x89d35f38</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x000</span> Type             <span class=\"token operator\">:</span> <span class=\"token number\">0</span>n4</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x002</span> Size             <span class=\"token operator\">:</span> <span class=\"token number\">0</span>n168</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x004</span> DeviceObject     <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>null<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x008</span> Flags            <span class=\"token operator\">:</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x00c</span> DriverStart      <span class=\"token operator\">:</span> <span class=\"token number\">0xba4a0000</span> Void</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x010</span> DriverSize       <span class=\"token operator\">:</span> <span class=\"token number\">0x6000</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x014</span> DriverSection    <span class=\"token operator\">:</span> <span class=\"token number\">0x89e01618</span> Void</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x018</span> DriverExtension  <span class=\"token operator\">:</span> <span class=\"token number\">0x89d35fe0</span> _DRIVER_EXTENSION</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x01c</span> DriverName       <span class=\"token operator\">:</span> _UNICODE_STRING <span class=\"token string\">\"\\Driver\\DriverHidden111\"</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x024</span> HardwareDatabase <span class=\"token operator\">:</span> <span class=\"token number\">0x8067f260</span> _UNICODE_STRING <span class=\"token string\">\"\\REGISTRY\\MACHINE\\HARDWARE\\DESCRIPTION\\SYSTEM\"</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x028</span> FastIoDispatch   <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>null<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x02c</span> DriverInit       <span class=\"token operator\">:</span> <span class=\"token number\">0xba4a4000</span>     <span class=\"token keyword\">long</span>  DriverHidden111<span class=\"token operator\">!</span>GsDriverEntry<span class=\"token operator\">+</span><span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x030</span> DriverStartIo    <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>null<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x034</span> DriverUnload     <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>null<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x038</span> MajorFunction    <span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">28</span><span class=\"token punctuation\">]</span> <span class=\"token number\">0x804f55ce</span>     <span class=\"token keyword\">long</span>  nt<span class=\"token operator\">!</span>IopInvalidDeviceRequest<span class=\"token operator\">+</span><span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>kd<span class=\"token operator\">></span> dt _LDR_DATA_TABLE_ENTRY <span class=\"token number\">0x89e01618</span> </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>nt<span class=\"token operator\">!</span>_LDR_DATA_TABLE_ENTRY</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x000</span> InLoadOrderLinks <span class=\"token operator\">:</span> _LIST_ENTRY <span class=\"token punctuation\">[</span> <span class=\"token number\">0x8055e720</span> <span class=\"token operator\">-</span> <span class=\"token number\">0x8a1b5c30</span> <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x008</span> InMemoryOrderLinks <span class=\"token operator\">:</span> _LIST_ENTRY <span class=\"token punctuation\">[</span> <span class=\"token number\">0xffffffff</span> <span class=\"token operator\">-</span> <span class=\"token number\">0xffffffff</span> <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x010</span> InInitializationOrderLinks <span class=\"token operator\">:</span> _LIST_ENTRY <span class=\"token punctuation\">[</span> <span class=\"token number\">0x12</span> <span class=\"token operator\">-</span> <span class=\"token number\">0x0</span> <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x018</span> DllBase          <span class=\"token operator\">:</span> <span class=\"token number\">0xba4a0000</span> Void</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x01c</span> EntryPoint       <span class=\"token operator\">:</span> <span class=\"token number\">0xba4a4000</span> Void</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x020</span> SizeOfImage      <span class=\"token operator\">:</span> <span class=\"token number\">0x6000</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x024</span> FullDllName      <span class=\"token operator\">:</span> _UNICODE_STRING <span class=\"token string\">\"\\??\\C:\\Documents and Settings\\Administrator\\桌面\\DriverHidden111.sys\"</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x02c</span> BaseDllName      <span class=\"token operator\">:</span> _UNICODE_STRING <span class=\"token string\">\"DriverHidden111.sys\"</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x034</span> Flags            <span class=\"token operator\">:</span> <span class=\"token number\">0x9104000</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x038</span> LoadCount        <span class=\"token operator\">:</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x03a</span> TlsIndex         <span class=\"token operator\">:</span> <span class=\"token number\">0x2d</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x03c</span> HashLinks        <span class=\"token operator\">:</span> _LIST_ENTRY <span class=\"token punctuation\">[</span> <span class=\"token number\">0xffffffff</span> <span class=\"token operator\">-</span> <span class=\"token number\">0xa576</span> <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x03c</span> SectionPointer   <span class=\"token operator\">:</span> <span class=\"token number\">0xffffffff</span> Void</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x040</span> CheckSum         <span class=\"token operator\">:</span> <span class=\"token number\">0xa576</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x044</span> TimeDateStamp    <span class=\"token operator\">:</span> <span class=\"token number\">0xfffffffe</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x044</span> LoadedImports    <span class=\"token operator\">:</span> <span class=\"token number\">0xfffffffe</span> Void</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x048</span> EntryPointActivationContext <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>null<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"38\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x04c</span> PatchInformation <span class=\"token operator\">:</span> <span class=\"token number\">0x00720044</span> Void</pre></td></tr></table></figure><p>为了看着方便直接就简化了：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kd<span class=\"token operator\">></span> <span class=\"token operator\">?</span><span class=\"token operator\">?</span> <span class=\"token operator\">/</span>s pdriver</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">_DRIVER_OBJECT</span> <span class=\"token operator\">*</span> <span class=\"token number\">0x89d35f38</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x000</span> Type             <span class=\"token operator\">:</span> <span class=\"token number\">0</span>n4</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x002</span> Size             <span class=\"token operator\">:</span> <span class=\"token number\">0</span>n168</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   ……</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x00c</span> DriverStart      <span class=\"token operator\">:</span> <span class=\"token number\">0xba4a0000</span> Void</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x010</span> DriverSize       <span class=\"token operator\">:</span> <span class=\"token number\">0x6000</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x014</span> DriverSection    <span class=\"token operator\">:</span> <span class=\"token number\">0x89e01618</span> Void</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   ……</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x02c</span> DriverInit       <span class=\"token operator\">:</span> <span class=\"token number\">0xba4a4000</span>     <span class=\"token keyword\">long</span>  DriverHidden111<span class=\"token operator\">!</span>GsDriverEntry<span class=\"token operator\">+</span><span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   ……</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>kd<span class=\"token operator\">></span> dt _LDR_DATA_TABLE_ENTRY <span class=\"token number\">0x89e01618</span> </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>nt<span class=\"token operator\">!</span>_LDR_DATA_TABLE_ENTRY</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  ……</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x018</span> DllBase          <span class=\"token operator\">:</span> <span class=\"token number\">0xba4a0000</span> Void</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x01c</span> EntryPoint       <span class=\"token operator\">:</span> <span class=\"token number\">0xba4a4000</span> Void</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x020</span> SizeOfImage      <span class=\"token operator\">:</span> <span class=\"token number\">0x6000</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  ……</pre></td></tr></table></figure><hr />\n<p>上面逆 IopLoadDriver 函数 主要得到的信息就是：驱动对象不是全局变量，在这个函数结束后就被释放了，唯一保存的地方就是  <code>_LDR_DATA_TABLE_ENTRY</code>  链表中，但为什么我们断链后 PCHunter 仍然能后发现我们的驱动呢？</p>\n<p>其实 PCHunter 并不是遍历链表找驱动，而是进行特征码扫描，去寻找驱动对象的特征，从而定位驱动对象这个结构体。</p>\n<p>PCHunter 是在哪里定位扫描的呢？</p>\n<p>不知道……</p>\n<hr />\n<p>有哪些特征码呢？</p>\n<p>根据  <code>_DRIVER_OBJECT</code>  结构体我们能发现一些固有的 “特征”，这些可以拿来作为特征码遍历内存。</p>\n<p>从结构体来看，加载完后暂时没用的可以作为特征的结构有如下：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>CSHORT Type<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>CSHORT Size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>PVOID DriverStart<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>ULONG DriverSize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>PVOID DriverSection<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>PDRIVER_EXTENSION DriverExtension<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>UNICODE_STRING DriverName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>PUNICODE_STRING HardwareDatabase<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>PFAST_IO_DISPATCH FastIoDispatch<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>PDRIVER_INITIALIZE DriverInit<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>PDRIVER_STARTIO DriverStartIo<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>PDRIVER_UNLOAD DriverUnload<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>其实只要抹掉  <code>DriverSection</code>  就行了，但保险起见可以都抹除了。</p>\n<h1 id=\"编写代码绕过pchunter\"><a class=\"anchor\" href=\"#编写代码绕过pchunter\">#</a> 编写代码绕过 PCHunter</h1>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 遍历内核模块</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;ntddk.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_LDR_DATA_TABLE_ENTRY</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tLIST_ENTRY InLoadOrderLinks<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tLIST_ENTRY InMemoryOrderLinks<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tLIST_ENTRY InInitializationOrderLinks<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tPVOID DllBase<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tPVOID EntryPoint<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tULONG SizeOfImage<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tUNICODE_STRING FullDllName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tUNICODE_STRING BaseDllName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\tULONG Flags<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tUSHORT LoadCount<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tUSHORT TlsIndex<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token keyword\">union</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\tLIST_ENTRY HashLinks<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t<span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t\tPVOID SectionPointer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t\tULONG CheckSum<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token keyword\">union</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t<span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t\tULONG TimeDateStamp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t<span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t\tPVOID LoadedImports<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">_ACTIVATION_CONTEXT</span><span class=\"token operator\">*</span> EntryPointActivationContext<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\tPVOID PatchInformation<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span> LDR_DATA_TABLE_ENTRY<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span> PLDR_DATA_TABLE_ENTRY<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>HANDLE hThread<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>VOID <span class=\"token function\">ThreadRun</span><span class=\"token punctuation\">(</span>_In_ PVOID StartContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"线程开始执行！\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\tLARGE_INTEGER times<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\ttimes<span class=\"token punctuation\">.</span>QuadPart <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">30</span> <span class=\"token operator\">*</span> <span class=\"token number\">1000</span> <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t<span class=\"token function\">KeDelayExecutionThread</span><span class=\"token punctuation\">(</span>KernelMode<span class=\"token punctuation\">,</span> FALSE<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>times<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\tPDRIVER_OBJECT pDriver <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PDRIVER_OBJECT<span class=\"token punctuation\">)</span>StartContext<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\tpDriver<span class=\"token operator\">-></span>DriverSize <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\tpDriver<span class=\"token operator\">-></span>DriverSection <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\tpDriver<span class=\"token operator\">-></span>DriverStart <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\tpDriver<span class=\"token operator\">-></span>DriverInit <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\tpDriver<span class=\"token operator\">-></span>DriverStartIo <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\tpDriver<span class=\"token operator\">-></span>FastIoDispatch <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\tpDriver<span class=\"token operator\">-></span>DriverExtension <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t<span class=\"token function\">ZwClose</span><span class=\"token punctuation\">(</span>hThread<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"线程结束执行！\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>VOID <span class=\"token function\">DriverUnload</span><span class=\"token punctuation\">(</span>PDRIVER_OBJECT pdriver<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是驱动，我卸载了\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>NTSTATUS <span class=\"token function\">DriverEntry</span><span class=\"token punctuation\">(</span>PDRIVER_OBJECT pdriver<span class=\"token punctuation\">,</span> PUNICODE_STRING reg_path<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是驱动，我运行了\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t__asm <span class=\"token keyword\">int</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\tPLDR_DATA_TABLE_ENTRY pLdtePre<span class=\"token punctuation\">;</span> <span class=\"token comment\">// </span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\tPLDR_DATA_TABLE_ENTRY pLdteCur<span class=\"token punctuation\">;</span> <span class=\"token comment\">// </span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\tPLDR_DATA_TABLE_ENTRY pLdteNex<span class=\"token punctuation\">;</span> <span class=\"token comment\">// </span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>\tpLdteCur <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PLDR_DATA_TABLE_ENTRY<span class=\"token punctuation\">)</span>pdriver<span class=\"token operator\">-></span>DriverSection<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\tpLdtePre <span class=\"token operator\">=</span> pLdteCur<span class=\"token operator\">-></span>InLoadOrderLinks<span class=\"token punctuation\">.</span>Blink<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\tpLdteNex <span class=\"token operator\">=</span> pLdteCur<span class=\"token operator\">-></span>InLoadOrderLinks<span class=\"token punctuation\">.</span>Flink<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\tpLdtePre<span class=\"token operator\">-></span>InLoadOrderLinks<span class=\"token punctuation\">.</span>Flink <span class=\"token operator\">=</span> pLdteCur<span class=\"token operator\">-></span>InLoadOrderLinks<span class=\"token punctuation\">.</span>Flink<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\tpLdteNex<span class=\"token operator\">-></span>InLoadOrderLinks<span class=\"token punctuation\">.</span>Blink <span class=\"token operator\">=</span> pLdteCur<span class=\"token operator\">-></span>InLoadOrderLinks<span class=\"token punctuation\">.</span>Blink<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>\tpdriver<span class=\"token operator\">-></span>DriverUnload <span class=\"token operator\">=</span> DriverUnload<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"76\"></td><td><pre>\t<span class=\"token function\">PsCreateSystemThread</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>hThread<span class=\"token punctuation\">,</span> GENERIC_ALL<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> ThreadRun<span class=\"token punctuation\">,</span> pdriver<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"78\"></td><td><pre>\t<span class=\"token keyword\">return</span> STATUS_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这里有点不好的地方就是无法卸载此驱动，就算在  <code>UnloadDriver</code>  填写了恢复代码。具体详情需要分析  <code>IopUnloadDriver</code>   看它什么时候调用该函数。</p>\n<p>结果：</p>\n<p><img data-src=\"image009.png\" alt=\"\" /></p>\n<p>经过火哥测试，在 win7 下也是可以隐藏的。</p>\n",
            "tags": [
                "隐藏驱动",
                "IopLoadDriver"
            ]
        },
        {
            "id": "https://or0kit.github.io/Bin/Core/Drive-Development/%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91-%E5%86%85%E6%A0%B8%E7%BC%96%E7%A8%8B%E5%B8%B8%E7%94%A8%E6%8A%80%E5%B7%A7/",
            "url": "https://or0kit.github.io/Bin/Core/Drive-Development/%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91-%E5%86%85%E6%A0%B8%E7%BC%96%E7%A8%8B%E5%B8%B8%E7%94%A8%E6%8A%80%E5%B7%A7/",
            "title": "驱动开发-内核编程常用技巧",
            "date_published": "2021-12-06T14:12:04.000Z",
            "content_html": "<h1 id=\"\"><a class=\"anchor\" href=\"#\">#</a> </h1>\n",
            "tags": []
        },
        {
            "id": "https://or0kit.github.io/Bin/Core/Drive-Development/%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91-64%E4%BD%8D%E4%B8%8E32%E4%BD%8D%E5%86%85%E6%A0%B8%E5%BC%80%E5%8F%91%E5%B7%AE%E5%BC%82/",
            "url": "https://or0kit.github.io/Bin/Core/Drive-Development/%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91-64%E4%BD%8D%E4%B8%8E32%E4%BD%8D%E5%86%85%E6%A0%B8%E5%BC%80%E5%8F%91%E5%B7%AE%E5%BC%82/",
            "title": "驱动开发-64位与32位内核开发差异",
            "date_published": "2021-12-06T14:11:07.000Z",
            "content_html": "<h1 id=\"\"><a class=\"anchor\" href=\"#\">#</a> </h1>\n",
            "tags": []
        },
        {
            "id": "https://or0kit.github.io/Bin/Core/Drive-Development/%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91-%E5%86%85%E6%A0%B8%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80plus/",
            "url": "https://or0kit.github.io/Bin/Core/Drive-Development/%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91-%E5%86%85%E6%A0%B8%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80plus/",
            "title": "驱动开发-内核编程基础plus",
            "date_published": "2021-12-06T14:08:01.000Z",
            "content_html": "<h1 id=\"楔子\"><a class=\"anchor\" href=\"#楔子\">#</a> 楔子</h1>\n<p>学习一下常用的驱动编程机制。</p>\n<h1 id=\"上下文环境\"><a class=\"anchor\" href=\"#上下文环境\">#</a> 上下文环境</h1>\n<p>应用层 EXE 有独立进程的概念。当这个 EXE 运行的时候，开发者可以很清楚地知道程序的定运行在哪一个线程中。对于内核驱动开发来说，进程的概念啊显得相当模糊，初学者往往不清楚自己的驱动代码具体运行在什么进程或线程中。</p>\n<p>这就是需要了解的上下文 (Context) 概念，上下文泛指 CPU 在执行代码时，该代码所处的环境与状态。通俗来讲，这些环境包括（不仅限）：当前代码所属线程、中断请求级别、CPU 寄存器各状态。</p>\n<p>这里可以做一个小实验，写代码验证一下。<br />\n写一个简单的驱动代码，测试驱动入口函数和驱动卸载函数在执行时是属于哪一个进程的，只要在这两个函数中调用  <code>PsGetCurrentProcessId</code>  函数获取当前进程 ID 就行。</p>\n<p>这里我就直接说结果了。</p>\n<p>无论是驱动入口函数还是驱动卸载函数，都隶属于进程 ID 为 4 的进程，也就是 SYSTEM 进程。</p>\n<p>SYSTEM 进程其实是操作系统虚拟出来的一个进程，代表系统内核。一般来说内核代码都处于 SYSTEM 进程空间中，但驱动对象（DRIVER_OBJECT）的派遣例程一般工作在发起请求的进程中。</p>\n<p><strong>地址空间</strong>，对 32 位系统来说，应用层程序有独立的 2GB 低地址虚拟内存空间，而高地址的 2GB 是内核共享的地址空间。<br />\n在 64 位 Windows 中，虚拟地址空间的理论大小为 2 的 64 次方字节，但实际使用的仅一小部分，范围从  <code>0x000`00000000</code>  至  <code>0x7FF`FFFFFFFF</code>  的 8TB 用于应用层空间，范围从  <code>0xFFFF0800`00000000</code>  至  <code>0xFFFFFFFF`FFFFFFFF</code>  的 248TB 用于内核空间。</p>\n<h1 id=\"中断请求级别\"><a class=\"anchor\" href=\"#中断请求级别\">#</a> 中断请求级别</h1>\n<h1 id=\"链表\"><a class=\"anchor\" href=\"#链表\">#</a> 链表</h1>\n<p>链表作为内核</p>\n<h1 id=\"自旋锁\"><a class=\"anchor\" href=\"#自旋锁\">#</a> 自旋锁</h1>\n<h1 id=\"注册表\"><a class=\"anchor\" href=\"#注册表\">#</a> 注册表</h1>\n<p>注册表是 Windows 系统中最重要的数据配置存储结构，存储着系统绝大部分的核心配置信息。注册表实际上也是一种文件。这些文件大多数存储在<strong>系统盘</strong> system32\\config 目录下。</p>\n<p>在资源管理器中我没有权限访问，懒得更改了，我在 cmd 中查看如下：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>C:\\Windows\\System32\\config&gt;dir</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>C:\\Windows\\System32\\config 的目录</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>2022&#x2F;05&#x2F;09  13:09    &lt;DIR&gt;          .</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>2022&#x2F;05&#x2F;09  13:09    &lt;DIR&gt;          ..</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>2022&#x2F;05&#x2F;06  00:57           524,288 BBI</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>2022&#x2F;01&#x2F;26  16:46            28,672 BCD-Template</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>2022&#x2F;05&#x2F;09  18:04        38,797,312 COMPONENTS</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>2022&#x2F;05&#x2F;06  00:57           786,432 DEFAULT</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>2022&#x2F;05&#x2F;09  17:31         8,118,272 DRIVERS</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>2022&#x2F;01&#x2F;26  18:14            32,768 ELAM</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>2022&#x2F;01&#x2F;26  16:37    &lt;DIR&gt;          Journal</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>2022&#x2F;01&#x2F;26  16:37    &lt;DIR&gt;          RegBack</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>2022&#x2F;05&#x2F;06  00:57           131,072 SAM</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>2022&#x2F;05&#x2F;06  00:57            65,536 SECURITY</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>2022&#x2F;05&#x2F;06  00:57       118,489,088 SOFTWARE</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>2022&#x2F;05&#x2F;06  00:57        24,903,680 SYSTEM</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>2022&#x2F;01&#x2F;26  16:37    &lt;DIR&gt;          systemprofile</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>2022&#x2F;01&#x2F;26  16:37    &lt;DIR&gt;          TxR</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>2022&#x2F;01&#x2F;26  16:40             8,192 userdiff</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>              11 个文件    191,885,312 字节</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>               6 个目录 50,612,371,456 可用字节</pre></td></tr></table></figure><p>可以看到  <code>SOFTWARE</code>  、  <code>SYSTEM</code>  、  <code>SAM</code>  、等文件，这些文件被以<strong>内存映射</strong>的方式映射到内核空间，然后以一种被称为 “HIVE&quot; 的方式组织起来、注册表 API 实际上操作的是这份 HIVE 内存数据，对 HIVE 数据的改动，最终会被回写到 config 目录下对应的文件中。</p>\n<p>如果只是想单纯的使用注册表做数据读取或存储，可以没有必要深入去研究内核对注册表的实现方式。</p>\n<h2 id=\"注册表的打开与关闭\"><a class=\"anchor\" href=\"#注册表的打开与关闭\">#</a> 注册表的打开与关闭</h2>\n<h2 id=\"注册表的修改\"><a class=\"anchor\" href=\"#注册表的修改\">#</a> 注册表的修改</h2>\n<h2 id=\"注册表的读取\"><a class=\"anchor\" href=\"#注册表的读取\">#</a> 注册表的读取</h2>\n<h2 id=\"作业\"><a class=\"anchor\" href=\"#作业\">#</a> 作业</h2>\n<h3 id=\"注册表实现驱动的自启\"><a class=\"anchor\" href=\"#注册表实现驱动的自启\">#</a> 注册表实现驱动的自启</h3>\n<p>驱动文件的转移</p>\n<h1 id=\"文件操作\"><a class=\"anchor\" href=\"#文件操作\">#</a> 文件操作</h1>\n<h2 id=\"文件的打开与关闭\"><a class=\"anchor\" href=\"#文件的打开与关闭\">#</a> 文件的打开与关闭</h2>\n<h2 id=\"文件的读写\"><a class=\"anchor\" href=\"#文件的读写\">#</a> 文件的读写</h2>\n<h2 id=\"文件的删除\"><a class=\"anchor\" href=\"#文件的删除\">#</a> 文件的删除</h2>\n<p>强行删除<br />\n文件的保护</p>\n<h2 id=\"作业-2\"><a class=\"anchor\" href=\"#作业-2\">#</a> 作业</h2>\n<p>在内核中实现文件的拷贝</p>\n<h1 id=\"线程与事件\"><a class=\"anchor\" href=\"#线程与事件\">#</a> 线程与事件</h1>\n<h2 id=\"使用系统线程\"><a class=\"anchor\" href=\"#使用系统线程\">#</a> 使用系统线程</h2>\n<h2 id=\"使用同步事件\"><a class=\"anchor\" href=\"#使用同步事件\">#</a> 使用同步事件</h2>\n",
            "tags": [
                "上下文环境",
                "中断请求级别",
                "链表",
                "自旋锁",
                "注册表",
                "地址空间",
                "文件操作",
                "线程与事件"
            ]
        },
        {
            "id": "https://or0kit.github.io/Bin/Core/Drive-Development/%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91-%E5%9F%BA%E4%BA%8EVS+WDK%E7%9A%84%E9%A9%B1%E5%8A%A8%E8%B0%83%E8%AF%95/",
            "url": "https://or0kit.github.io/Bin/Core/Drive-Development/%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91-%E5%9F%BA%E4%BA%8EVS+WDK%E7%9A%84%E9%A9%B1%E5%8A%A8%E8%B0%83%E8%AF%95/",
            "title": "驱动开发-基于VS+WDK的驱动调试",
            "date_published": "2021-11-20T06:22:33.000Z",
            "content_html": "<h1 id=\"基于vs-wdk-的环境调试\"><a class=\"anchor\" href=\"#基于vs-wdk-的环境调试\">#</a> 基于 VS + WDK 的环境调试</h1>\n<p>物理机为 win10,Visual Studio 的办事本是 2019，配合 WDK10 版本。</p>\n<p>VMware 虚拟机内安装了一个 Win10 操作系统，虚拟机网卡使用 NAT 方式，具体情如下：</p>\n<blockquote>\n<p>调试机器：Windows10  IP：192.168.2.105<br />\n 被调试机器：Windows10  IP：192.168.252.135</p>\n</blockquote>\n<p>调试使用网络作为调试机器与被调试机器之间的连接方式，但是注意防火墙，为了避免不必要的麻烦建议关闭防火墙，或配置防火墙放行规则，不管怎样，要保持调试机器与被调试机器之间网络的畅通。</p>\n<h2 id=\"配置被调试机\"><a class=\"anchor\" href=\"#配置被调试机\">#</a> 配置被调试机</h2>\n<p>以管理员权限运行 <code>cmd</code> , 输入： <code>bcdedit/debug on</code>  命令。这个命令的作用是把被调试机器设置成调试模式。</p>\n<p>再输入： <code>bcdedit /dbgsettings net hostip:192.168.2.105 port:50011</code> 。</p>\n<p>这个命令的作用是使用网络进行调试的连接方式，  <code>hostip</code>  值调试机器的 IP，  <code>port</code>  标识使用的网络端口，建议范围是  <code>49152-65535</code> 。</p>\n<p>命令执行完后会显示一个  <code>Key</code> ，需要保存这个  <code>Key</code> ，用于后面调试机器的配置。</p>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<h2 id=\"配置调试机\"><a class=\"anchor\" href=\"#配置调试机\">#</a> 配置调试机</h2>\n<p>首先打开 VS，找到  <code>Configure Devices</code></p>\n<p><img data-src=\"image002.png\" alt=\"\" /></p>\n<p>点击 <code>Add New Device</code>  弹出的配置对话框，在 “Dispaly name” 下面输入设备的名字，例如： “MyFirstDevice”；<br />\n在 “Device Type” 下面的下拉框中选择 “Computer”；我的 vs2019 版本中没有这个选项，忽略。<br />\n在 “Network host name” 下面输入被调试机器的 “hostname”，也可以输入 “IP”；<br />\n在最后一项 “Provisioning Options” 中，选择第二项 “Manually configure debuggers and do not  provision”，意思是说手动配置被调试机器的调试选项以及手动分发驱动文件。</p>\n<p>整体配置如下：</p>\n<p><img data-src=\"image003.png\" alt=\"\" /></p>\n<p>完成后点击下一步。</p>\n<p>需要注意的是，如果被调试机器只有一个网卡，则最后一个 “bus Parameters” 可以不填，否则需要根据 PCI 规范，填入相应设备的总线号（Bus number）、设备号 (Device Number) 以及功能号（Function number），因为我的被调试机只有一块网卡，所以这个值留空。</p>\n<p>整体配置如下：</p>\n<p><img data-src=\"image004.png\" alt=\"\" /></p>\n<h1 id=\"进行调试\"><a class=\"anchor\" href=\"#进行调试\">#</a> 进行调试</h1>\n<p>开始调试前介绍两个断点函数</p>\n<p><code>KdBreakPoint()</code>  ：只对 Debug 版的驱动有效。<br />\n <code>DbgBreakPoint()</code> ： 对 Release 版的有效。</p>\n<p>驱动代码如下：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;ntddk.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 卸载函数</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>VOID <span class=\"token function\">DriverUnload</span><span class=\"token punctuation\">(</span>PDRIVER_OBJECT driver<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"驱动程序停止运行了.\\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>NTSTATUS <span class=\"token function\">DriverEntry</span><span class=\"token punctuation\">(</span>PDRIVER_OBJECT pdriver<span class=\"token punctuation\">,</span> PUNICODE_STRING pRegPath<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是驱动，我被加载了。\\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token function\">DbgBreakPoint</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tpdriver<span class=\"token operator\">-></span>DriverUnload <span class=\"token operator\">=</span> DriverUnload<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token keyword\">return</span> STATUS_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>首先编译生成 sys 文件，然后在 VS 的菜单中找到 “调试”--&gt;“附加到进程”，在弹出的对话框中，选择 “连接类型” 为 “Windows Kernel Mode Debugger”，“连接目标” 选择为刚才我们配置好的 “MyFirst Device”，在可用进程中选择 “Kernel”，如下所示：</p>\n<p><img data-src=\"image005.png\" alt=\"\" /></p>\n<p>点击附加后 vs 中会出现一个 “Debugger Immediate Window” 界面，界面显示如图所示：</p>\n<p><img data-src=\"image006.png\" alt=\"\" /></p>\n<p>这表示当前调试使用网络连接的方式，正在等待被连接。接下来重启被调试机器，让被调试机器的调试配置生效。</p>\n<p>被调试机器在重启过程中，会主动连接设置的 50011 端口，连接建立好之后，可以在 “Debugger Immediate Window” 界面看到如下信息：</p>\n<p><img data-src=\"image007.png\" alt=\"\" /></p>\n<p>最后把 sys 文件放入被调试机器中，运行加载该驱动，由于有断点所以会被断下，我们就可以 F10 单步调试了。</p>\n<h1 id=\"reference\"><a class=\"anchor\" href=\"#reference\">#</a> Reference</h1>\n<p>谭文 陈铭霖《Windows 内核编程》</p>\n",
            "tags": [
                "驱动调试"
            ]
        },
        {
            "id": "https://or0kit.github.io/Bin/Core/Drive-Development/%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91-%E8%BF%87%E5%86%99%E6%8B%B7%E8%B4%9D/",
            "url": "https://or0kit.github.io/Bin/Core/Drive-Development/%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91-%E8%BF%87%E5%86%99%E6%8B%B7%E8%B4%9D/",
            "title": "驱动开发-过写拷贝",
            "date_published": "2021-10-29T08:15:32.000Z",
            "content_html": "<h1 id=\"要求\"><a class=\"anchor\" href=\"#要求\">#</a> 要求</h1>\n<ol>\n<li>自己写代码加载、卸载驱动</li>\n<li>段页的知识：绕过写拷贝。</li>\n</ol>\n<blockquote>\n<p>两个思路：<br />\n（1）、另外申请一个线性地址，映射到 MessageBoxA 的物理页，设置 PTE 的 R/W 属性，使其可读写。<br />\n（2）、修改 VAD 树，将写拷贝改为可读可写。</p>\n</blockquote>\n<ol start=\"3\">\n<li>R3R0 通信</li>\n<li>写 HOOK</li>\n<li>ShellCode</li>\n<li>ShellCode 放哪？</li>\n</ol>\n<p>在 ring3：<br />\n注册和卸载驱动<br />\n找到 User32，定位 Messagebox 函数地址，传给 0 环</p>\n<p>编写 shellcode 注入进 user32，对 Messagebox 进行 INLINE HOOK<br />\n 打印使用 Messagebox 的程序<br />\n在 ring0：</p>\n<p>与 3 环通信，并接受 Messagebox 的地址，修改其 PTE 与 PDE 的属性<br />\n修改完后给 3 环发送信息，告知 ring 3 可以开始 inline hook</p>\n<h1 id=\"驱动中设备扩展的使用\"><a class=\"anchor\" href=\"#驱动中设备扩展的使用\">#</a> 驱动中设备扩展的使用</h1>\n<p>驱动的设备对象中有一个字段是设备扩展<br />\n该设备扩展的大小是不固定的，依据在创建设备对象时给定的大小分配内存。</p>\n<p>详细参见：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNDkwODczL2FydGljbGUvZGV0YWlscy8xMDc1ODc5MTg=\">https://blog.csdn.net/qq_41490873/article/details/107587918</span></p>\n<h1 id=\"不使用-shellcode-注入\"><a class=\"anchor\" href=\"#不使用-shellcode-注入\">#</a> 不使用 ShellCode 注入</h1>\n<p>驱动编程<br />\n 0 环 - 3 环通信常规方式（设备读写）<br />\n修改 PTE 过写拷贝<br />\n调用门提权（有一套 API 实现以系统权限调用用户程序里的裸函数，支持传参）<br />\n中断门 HOOK<br />\n 设备扩展内存<br />\n双端链表模拟队列</p>\n<p>参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0t3YW5zeS9hcnRpY2xlL2RldGFpbHMvMTA5MzEzMjM3\">https://blog.csdn.net/Kwansy/article/details/109313237</span></p>\n<h1 id=\"代码\"><a class=\"anchor\" href=\"#代码\">#</a> 代码</h1>\n<p>github:&lt;&gt;</p>\n",
            "tags": []
        },
        {
            "id": "https://or0kit.github.io/Bin/Core/Drive-Development/%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91%E2%80%94%E4%BD%BF%E7%94%A8SCM%E5%8A%A0%E8%BD%BD%E9%A9%B1%E5%8A%A8/",
            "url": "https://or0kit.github.io/Bin/Core/Drive-Development/%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91%E2%80%94%E4%BD%BF%E7%94%A8SCM%E5%8A%A0%E8%BD%BD%E9%A9%B1%E5%8A%A8/",
            "title": "驱动开发—使用SCM加载驱动",
            "date_published": "2021-10-12T02:59:22.000Z",
            "content_html": "<h1 id=\"正文\"><a class=\"anchor\" href=\"#正文\">#</a> 正文</h1>\n<p>Windows 系统加载驱动的方法有很多，其中最正确的方法就是使用 SCM（Server Control manager，服务控制管理器）来完成此操作。<br />\n使用 SCM 记载驱动是需要我们注意两点：</p>\n<ul>\n<li>SCM 会操作注册表</li>\n<li>SCM 加载驱动是不可分页的</li>\n</ul>\n<p>这个机制会使驱动的回调函数、IRP 处理函数与其他重要代码不会被页换出，而总是驻留在内存中，以此来保证这个驱动不会因为这些原因导致 BsoD。</p>\n<h1 id=\"代码实现\"><a class=\"anchor\" href=\"#代码实现\">#</a> 代码实现</h1>\n<p>接下来用代码来演示如何加载和卸载一个驱动。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>VOID <span class=\"token function\">SCMLoadDriver</span><span class=\"token punctuation\">(</span>PUCHAR lpszDriverFullPath<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token comment\">//1. 使用 OpenSCManager 函数打开 SCM</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token comment\">//SCM 句柄</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tSC_HANDLE hSCM <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tPUCHAR lpszDriverName <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tDWORD dwRtn <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token comment\">// 获取驱动名</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token function\">_splitpath</span><span class=\"token punctuation\">(</span>lpszDriverFullPath<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> lpszDriverName<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\thSCM <span class=\"token operator\">=</span> <span class=\"token function\">OpenSCManager</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> SC_MANAGER_ALL_ACCESS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hSCM <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t<span class=\"token function\">MessageBox</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> L<span class=\"token string\">\"Error!\"</span><span class=\"token punctuation\">,</span> L<span class=\"token string\">\"OpenSCManager fail!\"</span><span class=\"token punctuation\">,</span> MB_OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t<span class=\"token function\">CloseServiceHandle</span><span class=\"token punctuation\">(</span>hSCM<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token comment\">//2. 使用 CreateService 函数利用 SCM 句柄创建一个服务</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token comment\">//NT 驱动服务句柄</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\tSC_HANDLE hService <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\thService <span class=\"token operator\">=</span> <span class=\"token function\">CreateService</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\thSCM<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\tlpszDriverName<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\tlpszDriverName<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\tSERVICE_ALL_ACCESS<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\tSERVICE_KERNEL_DRIVER<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\tSERVICE_DEMAND_START<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\tSERVICE_ERROR_IGNORE<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\tlpszDriverFullPath<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t<span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hService <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\tdwRtn <span class=\"token operator\">=</span> <span class=\"token function\">GetLastError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\t<span class=\"token function\">MessageBox</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> L<span class=\"token string\">\"Error!\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>L<span class=\"token string\">\"CreateeeeeeeService fail! ErrorCode:%d\"</span><span class=\"token punctuation\">,</span> dwRtn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> MB_OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\t<span class=\"token function\">CloseServiceHandle</span><span class=\"token punctuation\">(</span>hService<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\t<span class=\"token function\">CloseServiceHandle</span><span class=\"token punctuation\">(</span>hSCM<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t<span class=\"token comment\">//3. 使用 StartService 函数启动我们刚刚创建的服务</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">StartService</span><span class=\"token punctuation\">(</span>hService<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\tdwRtn <span class=\"token operator\">=</span> <span class=\"token function\">GetLastError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\t<span class=\"token function\">MessageBox</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> L<span class=\"token string\">\"Error!\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>L<span class=\"token string\">\"StartService fail! ErrorCode:%d\"</span><span class=\"token punctuation\">,</span> dwRtn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> MB_OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t\t<span class=\"token function\">CloseServiceHandle</span><span class=\"token punctuation\">(</span>hService<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t\t<span class=\"token function\">CloseServiceHandle</span><span class=\"token punctuation\">(</span>hSCM<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "OpenSCManager",
                "CreateService"
            ]
        },
        {
            "id": "https://or0kit.github.io/Bin/Core/Drive-Development/%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91-0%E7%8E%AF%E4%B8%8E3%E7%8E%AF%E7%9A%84%E9%80%9A%E4%BF%A1%EF%BC%88%E5%B8%B8%E8%A7%84%E6%96%B9%E6%B3%95%EF%BC%89/",
            "url": "https://or0kit.github.io/Bin/Core/Drive-Development/%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91-0%E7%8E%AF%E4%B8%8E3%E7%8E%AF%E7%9A%84%E9%80%9A%E4%BF%A1%EF%BC%88%E5%B8%B8%E8%A7%84%E6%96%B9%E6%B3%95%EF%BC%89/",
            "title": "驱动开发-0环与3环的通信（常规方法）",
            "date_published": "2021-09-24T15:54:24.000Z",
            "content_html": "<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<p>非常规方法是 0 环  <code>INLINE HOOK</code></p>\n<h1 id=\"正文\"><a class=\"anchor\" href=\"#正文\">#</a> 正文</h1>\n<p>驱动程序原本的目的是用来控制硬件，为了控制驱动运行，我们需要在 3 环向驱动发数据，所以我们需要有一种方法来建立 0 环到 3 环的通信。</p>\n<p>虽然驱动程序的目的是用来控制硬件的，但我们也可以用驱动做一些安全相关的事情，因为驱动运行在 0 环。</p>\n<p>本文介绍常规方式，也就是创建设备对象的方式。</p>\n<h2 id=\"设备对象\"><a class=\"anchor\" href=\"#设备对象\">#</a> 设备对象</h2>\n<ol>\n<li>我们在<strong>开发窗口程序</strong>的时候，消息被封装成一个结构体：<strong>MSG</strong></li>\n<li>在<strong>内核开发</strong>时，消息被封装成另外一个结构体：<strong>IRP（I/O Request Package）</strong></li>\n<li>在<strong>窗口程序</strong>中，能够接收消息的只能是<strong>窗口对象</strong></li>\n<li>在<strong>内核</strong>中，能够接收 IRP 消息的只能是<strong>设备对象</strong></li>\n</ol>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<p><img data-src=\"image002.png\" alt=\"\" /></p>\n<p>可以发现 3 环窗口程序中的 MSG 结构体和窗口对象，与 0 环的设备对象和 IRP 结构体的关系很像。</p>\n<h2 id=\"创建设备对象\"><a class=\"anchor\" href=\"#创建设备对象\">#</a> 创建设备对象</h2>\n<p>调用 IoCreateDevice 函数创建设备对象，例如：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>NTSTATUS <span class=\"token function\">IoCreateDevice</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    _In_  PDRIVER_OBJECT DriverObject<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    _In_  ULONG DeviceExtensionSize<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    _In_opt_ PUNICODE_STRING DeviceName<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    _In_  DEVICE_TYPE DeviceType<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    _In_  ULONG DeviceCharacteristics<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    _In_  BOOLEAN Exclusive<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    PDEVICE_OBJECT <span class=\"token operator\">*</span>DeviceObject  <span class=\"token comment\">// 二级指针</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong>参数说明</strong></p>\n<ul>\n<li>\n<p>DriverObject<br />\n 一个指向调用该函数的驱动程序对象。每一个驱动程序在它的 DriverEntry 过程里接收一个指向它的驱动程序对象.<br />\nWDM 功能和过滤驱动程序也在他们的 AddDevice 过程接受一个驱动程序对象的指针</p>\n</li>\n<li>\n<p>DeviceExtensionSize<br />\n 指定驱动程序为设备扩展对象而定义的结构体的大小。</p>\n</li>\n<li>\n<p>DeviceName<br />\n (可选的参数) 指向一个以零结尾的包含 Unicode 字符串的缓冲区，那是这个设备的名称，该字符串必须是一个完整的设备路径名.<br />\nWDM 功能驱动程序和过滤驱动程序它们的设备对象没有名字.</p>\n</li>\n</ul>\n<p>注意：如果设备名未提供 (即这个参数是 NULL),IoCreateDevice 创建的设备对象将不会有一个 DACL 与之相关联</p>\n<ul>\n<li>\n<p>DeviceType<br />\n 指定一个由一个系统定义的 FILE_DEVICE_XXX 常量，表明了这个设备的类型<br />\n (如 FILE_DEVICE_DISK,FILE_DEVICE_KEYBOARD 等), 或供应商定义的一种新型设备的类型</p>\n</li>\n<li>\n<p>DeviceCharacteristics<br />\n 指定一个或多个系统定义的常量，连接在一起，提供有关驱动程序的设备其他信息。对于可能的设备特征信息，<br />\n 见 <code>DEVICE_OBJECT</code>  结构体.</p>\n</li>\n<li>\n<p>Exclusive<br />\n 如果指定设备是独占的，大部分驱动程序设置这个值为 FALSE, 如果是独占的话设置为 TRUE，非独占设置为 FALSE.</p>\n</li>\n<li>\n<p>DeviceObject<br />\n 一个指向 DEVICE_OBJECT 结构体指针的指针，这是一个指针的指针，指向的指针用来接收 DEVICE_OBJECT 结构体的指针.</p>\n</li>\n</ul>\n<p><strong>返回值</strong></p>\n<p>IoCreateDevice 函数成功时返回 STATUS_SUCCESS, 失败时返回适当的 NTSTATUS 错误代码.<br />\n 这时这个函数返回值:　<br />\n <code>STATUS_INSUFFICIENT_RESOURCES</code> <br />\n <code>STATUS_OBJECT_NAME_EXISTS</code> <br />\n <code>STATUS_OBJECT_NAME_COLLISION</code></p>\n<p><strong>调用要求</strong></p>\n<blockquote>\n<p>包含文件:wdm.h,ntddk.h</p>\n</blockquote>\n<p><strong>扩展</strong></p>\n<p>通常设备对象都把自己的名字放到 / Device 目录中。在 Windows 2000 中，设备的名称有两个用途。第一个用途，设备命名后，其它内核模式部件可以通过调用 <code>IoGetDeviceObjectPointer</code>  函数找到该设备，找到设备对象后，就可以向该设备的驱动程序发送 IRP。</p>\n<p>另一个用途，允许应用程序打开命名设备的句柄，这样它们就可以向驱动程序发送 IRP。应用程序可以使用标准的 <code>CreateFile</code>  API 打开命名设备句柄，然后用 <code>ReadFile</code> 、 <code>WriteFile</code> ，和 <code>DeviceIoControl</code>  向驱动程序发出请求。应用程序打开设备句柄时使用 <code>//./</code>  路径前缀而不是标准的 <code>UNC</code>  (统一命名约定) 名称，如 <code>C:/MYFILE.CPP</code>  或 <code>//FRED/C-Drive/HISFILE.CPP</code> 。在内部，I/O 管理器在执行名称搜索前自动把 <code>//./</code>  转换成 <code>/??/</code> 。为了把 <code>/??</code>  目录中的名字与名字在其它目录 (例如，在 / Device 目录) 中的对象相连接，对象管理器实现了一种称为符号连接 (symbolic link) 的对象。IRP 就是应用程序调用驱动程序。</p>\n<h2 id=\"数据交互的方式\"><a class=\"anchor\" href=\"#数据交互的方式\">#</a> 数据交互的方式</h2>\n<p>设置交互数据的方式</p>\n<p><code>pDeviceObj-&gt;Flags |= DO_BUFFERED_IO;</code></p>\n<blockquote>\n<p>缓冲区方式读写 ( <code>DO_BUFFERED_IO</code> ) ：操作系统将应用程序提供缓冲区的数据复制到内核模式下的地址中。<br />\n优点：方便；缺点：效率低<br />\n适合数据量较小时使用</p>\n</blockquote>\n<blockquote>\n<p>直接方式读写 ( <code>DO_DIRECT_IO</code> )  ：操作系统会将用户模式下的缓冲区锁住。<br />\n然后操作系统将这段缓冲区在内核模式地址再次映射一遍。<br />\n这样，用户模式的缓冲区和内核模式的缓冲区指向的是同一区域的物理内存。<br />\n优点：效率高；缺点：单独占用物理页面，无法再进行其它操作（例如文件读写）<br />\n适合数据量较大时使用</p>\n</blockquote>\n<blockquote>\n<p>其他方式读写（在调用 IoCreateDevice 创建设备后对 pDevObj-&gt;Flags 即不设置 DO_BUFFERED_IO 也不设置 DO_DIRECT_IO 此时就是其他方式）：在使用其他方式读写设备时，派遣函数直接读写应用程序提供的缓冲区地址。<br />\n在驱动程序中，直接操作应用程序的缓冲区地址是很危险的。<br />\n只有驱动程序与应用程序运行在相同线程上下文的情况下，才能使用这种方式</p>\n</blockquote>\n<h2 id=\"符号链接\"><a class=\"anchor\" href=\"#符号链接\">#</a> 符号链接</h2>\n<p>特别说明:</p>\n<ol>\n<li>设备名称的作用是给内核对象用的，如果要在 Ring3 访问，必须要有符号链接。 其实就是一个别名，没有这个别名，在 Ring3 不可见。</li>\n<li>内核模式下，符号链接是以 <code>\\??\\</code>  开头的，如 C 盘就是 <code>\\??\\C:</code></li>\n<li>而在用户模式下，则是以 <code>\\\\.\\</code>  开头的，如 C 盘就是 <code>\\\\.\\C:</code></li>\n</ol>\n<h2 id=\"irp与派遣函数\"><a class=\"anchor\" href=\"#irp与派遣函数\">#</a> IRP 与派遣函数</h2>\n<p>描述：</p>\n<ol>\n<li>当对窗口对象传递消息时，窗口对象会根据我们所传入的消息类型执行对应的回调函数</li>\n<li>当调用 CreateFile 等函数时，操作系统会将它们封装成一个结构体，此时就可以传递给设备对象，设备对象根据 IRP 的类型调用对应的派遣函数</li>\n</ol>\n<p><img data-src=\"image002.png\" alt=\"\" /></p>\n<h2 id=\"irp的类型\"><a class=\"anchor\" href=\"#irp的类型\">#</a> IRP 的类型</h2>\n<p>描述：当应用层通过 <code>CreateFile</code> ， <code>ReadFile</code> ， <code>WriteFile</code> ， <code>CloseHandle</code>  等函数对设备进行打开、读取、写入、关闭的时候，会使操作系统产生出 <code>IRP_MJ_CREATE</code> ， <code>IRP_MJ_READ</code> ， <code>IRP_MJ_WRITE</code> ， <code>IRP_MJ_CLOSE</code>  等不同的 IRP。</p>\n<p>其它类型的 IRP</p>\n<p><img data-src=\"image003.png\" alt=\"\" /></p>\n<h2 id=\"派遣函数\"><a class=\"anchor\" href=\"#派遣函数\">#</a> 派遣函数</h2>\n<h3 id=\"派遣函数注册位置\"><a class=\"anchor\" href=\"#派遣函数注册位置\">#</a> 派遣函数注册位置</h3>\n<pre><code>kd&gt; dt _DRIVER_OBJECT\nnt!_DRIVER_OBJECT\n   +0x000 Type             : Int2B\n   +0x002 Size             : Int2B\n   +0x004 DeviceObject     : Ptr32 _DEVICE_OBJECT\n   +0x008 Flags            : Uint4B\n   +0x00c DriverStart      : Ptr32 Void\n   +0x010 DriverSize       : Uint4B\n....\n   +0x030 DriverStartIo    : Ptr32     void \n   +0x034 DriverUnload     : Ptr32     void \t\t//卸载函数\n   +0x038 MajorFunction    : [28] Ptr32     long \t//派遣函数\n</code></pre>\n<h3 id=\"注册派遣函数\"><a class=\"anchor\" href=\"#注册派遣函数\">#</a> 注册派遣函数</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>NTSTATUS <span class=\"token function\">DriverEntry</span><span class=\"token punctuation\">(</span> 。。。。<span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 设置卸载函数   </span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    pDriverObject<span class=\"token operator\">-></span>DriverUnload <span class=\"token operator\">=</span> 卸载函数<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 设置派遣函数   </span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    pDriverObject<span class=\"token operator\">-></span>MajorFunction<span class=\"token punctuation\">[</span>IRP_MJ_CREATE<span class=\"token punctuation\">]</span> \t<span class=\"token operator\">=</span> 派遣函数<span class=\"token number\">1</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    pDriverObject<span class=\"token operator\">-></span>MajorFunction<span class=\"token punctuation\">[</span>IRP_MJ_CLOSE<span class=\"token punctuation\">]</span> \t<span class=\"token operator\">=</span> 派遣函数<span class=\"token number\">2</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    pDriverObject<span class=\"token operator\">-></span>MajorFunction<span class=\"token punctuation\">[</span>IRP_MJ_WRITE<span class=\"token punctuation\">]</span> \t<span class=\"token operator\">=</span> 派遣函数<span class=\"token number\">3</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    pDriverObject<span class=\"token operator\">-></span>MajorFunction<span class=\"token punctuation\">[</span>IRP_MJ_READ<span class=\"token punctuation\">]</span> \t<span class=\"token operator\">=</span> 派遣函数<span class=\"token number\">4</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    pDriverObject<span class=\"token operator\">-></span>MajorFunction<span class=\"token punctuation\">[</span>IRP_MJ_CLEANUP<span class=\"token punctuation\">]</span> \t<span class=\"token operator\">=</span> 派遣函数<span class=\"token number\">5</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    pDriverObject<span class=\"token operator\">-></span>MajorFunction<span class=\"token punctuation\">[</span>IRP_MJ_SET_INFORMATION<span class=\"token punctuation\">]</span> \t<span class=\"token operator\">=</span> 派遣函数<span class=\"token number\">6</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    pDriverObject<span class=\"token operator\">-></span>MajorFunction<span class=\"token punctuation\">[</span>IRP_MJ_DEVICE_CONTROL<span class=\"token punctuation\">]</span> \t<span class=\"token operator\">=</span> 派遣函数<span class=\"token number\">7</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    pDriverObject<span class=\"token operator\">-></span>MajorFunction<span class=\"token punctuation\">[</span>IRP_MJ_SHUTDOWN<span class=\"token punctuation\">]</span> \t\t<span class=\"token operator\">=</span> 派遣函数<span class=\"token number\">8</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    pDriverObject<span class=\"token operator\">-></span>MajorFunction<span class=\"token punctuation\">[</span>IRP_MJ_SYSTEM_CONTROL<span class=\"token punctuation\">]</span> \t<span class=\"token operator\">=</span> 派遣函数<span class=\"token number\">9</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>IRP_MJ_MAXIMUM_FUNCTION   派遣函数的最大值</pre></td></tr></table></figure><h3 id=\"派遣函数的格式\"><a class=\"anchor\" href=\"#派遣函数的格式\">#</a> 派遣函数的格式</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 派遣函数的格式：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>NTSTATUS <span class=\"token function\">MyDispatchFunction</span><span class=\"token punctuation\">(</span>PDEVICE_OBJECT pDevObj<span class=\"token punctuation\">,</span> PIRP pIrp<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token comment\">// 处理自己的业务...</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token comment\">// 设置返回状态</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tpIrp<span class=\"token operator\">-></span>IoStatus<span class=\"token punctuation\">.</span>Status <span class=\"token operator\">=</span> STATUS_SUCCESS<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//  getlasterror () 得到的就是这个值</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tpIrp<span class=\"token operator\">-></span>IoStatus<span class=\"token punctuation\">.</span>Information <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">//  返回给 3 环多少数据 没有填 0</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token function\">IoCompleteRequest</span><span class=\"token punctuation\">(</span>pIrp<span class=\"token punctuation\">,</span> IO_NO_INCREMENT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">return</span> STATUS_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"实验\"><a class=\"anchor\" href=\"#实验\">#</a> 实验</h2>\n<h3 id=\"r0代码\"><a class=\"anchor\" href=\"#r0代码\">#</a> R0 代码</h3>\n<p>格式都是这样</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;ntddk.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">DEVICE_NAME</span> <span class=\"token expression\">L</span><span class=\"token string\">\"\\\\Device\\\\MyDevice\"</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// Ring3 用 CreateFile 打开设备时，用 \"\\\\\\\\.\\\\MyTestDriver\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">SYMBOLICLINK_NAME</span> <span class=\"token expression\">L</span><span class=\"token string\">\"\\\\??\\\\MyTestDriver\"</span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 0-2047 是保留的  2048~4095</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">OPER1</span> <span class=\"token expression\"><span class=\"token function\">CTL_CODE</span><span class=\"token punctuation\">(</span>FILE_DEVICE_UNKNOWN<span class=\"token punctuation\">,</span> <span class=\"token number\">0x800</span><span class=\"token punctuation\">,</span> METHOD_BUFFERED<span class=\"token punctuation\">,</span> FILE_ANY_ACCESS<span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">OPER2</span> <span class=\"token expression\"><span class=\"token function\">CTL_CODE</span><span class=\"token punctuation\">(</span>FILE_DEVICE_UNKNOWN<span class=\"token punctuation\">,</span> <span class=\"token number\">0x900</span><span class=\"token punctuation\">,</span> METHOD_BUFFERED<span class=\"token punctuation\">,</span> FILE_ANY_ACCESS<span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 卸载函数</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>VOID <span class=\"token function\">DriverUnload</span><span class=\"token punctuation\">(</span>PDRIVER_OBJECT pDriver<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tUNICODE_STRING SymbolicLinkName <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"驱动程序停止运行了 . \\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token comment\">// 删除符号链接 删除设备</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token function\">RtlInitUnicodeString</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>SymbolicLinkName<span class=\"token punctuation\">,</span> SYMBOLICLINK_NAME<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token function\">IoDeleteSymbolicLink</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>SymbolicLinkName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token function\">IoDeleteDevice</span><span class=\"token punctuation\">(</span>pDriver<span class=\"token operator\">-></span>DeviceObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">// IRP_MJ_CREATE 处理函数</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>NTSTATUS <span class=\"token function\">IrpCreateProc</span><span class=\"token punctuation\">(</span>PDEVICE_OBJECT pDevObj<span class=\"token punctuation\">,</span> PIRP pIrp<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"DispatchCreate ... \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token comment\">// 返回状态如果不设置 Ring3 返回的是失败</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\tpIrp<span class=\"token operator\">-></span>IoStatus<span class=\"token punctuation\">.</span>Status <span class=\"token operator\">=</span> STATUS_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\tpIrp<span class=\"token operator\">-></span>IoStatus<span class=\"token punctuation\">.</span>Information <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token function\">IoCompleteRequest</span><span class=\"token punctuation\">(</span>pIrp<span class=\"token punctuation\">,</span> IO_NO_INCREMENT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token keyword\">return</span> STATUS_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token comment\">// IRP_MJ_CLOSE 处理函数</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>NTSTATUS <span class=\"token function\">IrpCloseProc</span><span class=\"token punctuation\">(</span>PDEVICE_OBJECT pDevObj<span class=\"token punctuation\">,</span> PIRP pIrp<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"DispatchClose ... \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\tpIrp<span class=\"token operator\">-></span>IoStatus<span class=\"token punctuation\">.</span>Status <span class=\"token operator\">=</span> STATUS_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\tpIrp<span class=\"token operator\">-></span>IoStatus<span class=\"token punctuation\">.</span>Information <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t<span class=\"token function\">IoCompleteRequest</span><span class=\"token punctuation\">(</span>pIrp<span class=\"token punctuation\">,</span> IO_NO_INCREMENT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t<span class=\"token keyword\">return</span> STATUS_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token comment\">// IRP_MJ_DEVICE_CONTROL 处理函数 用来处理与 Ring3 交互</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>NTSTATUS <span class=\"token function\">IrpDeviceControlProc</span><span class=\"token punctuation\">(</span>PDEVICE_OBJECT pDevObj<span class=\"token punctuation\">,</span> PIRP pIrp<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\tNTSTATUS status <span class=\"token operator\">=</span> STATUS_INVALID_DEVICE_REQUEST<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\tPIO_STACK_LOCATION pIrpStack<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\tULONG uIoControlCode<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\tPVOID pIoBuffer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\tULONG uInLength<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\tULONG uOutLength<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\tULONG uRead<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\tULONG uWrite <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t<span class=\"token comment\">// 设置临时变量的值</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\tpIrpStack <span class=\"token operator\">=</span> <span class=\"token function\">IoGetCurrentIrpStackLocation</span><span class=\"token punctuation\">(</span>pIrp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t<span class=\"token comment\">// 获取控制码</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\tuIoControlCode <span class=\"token operator\">=</span> pIrpStack<span class=\"token operator\">-></span>Parameters<span class=\"token punctuation\">.</span>DeviceIoControl<span class=\"token punctuation\">.</span>IoControlCode<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t<span class=\"token comment\">// 获取缓冲区地址 (输入和输出的缓冲区都是一个)</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\tpIoBuffer <span class=\"token operator\">=</span> pIrp<span class=\"token operator\">-></span>AssociatedIrp<span class=\"token punctuation\">.</span>SystemBuffer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t<span class=\"token comment\">// Ring3 发送数据的长度</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\tuInLength <span class=\"token operator\">=</span> pIrpStack<span class=\"token operator\">-></span>Parameters<span class=\"token punctuation\">.</span>DeviceIoControl<span class=\"token punctuation\">.</span>InputBufferLength<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t<span class=\"token comment\">// Ring0 发送数据的长度</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\tuOutLength <span class=\"token operator\">=</span> pIrpStack<span class=\"token operator\">-></span>Parameters<span class=\"token punctuation\">.</span>DeviceIoControl<span class=\"token punctuation\">.</span>OutputBufferLength<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\t<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>uIoControlCode<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\t<span class=\"token keyword\">case</span> OPER1<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>\t\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"IrpDeviceControlProc -> OPER1 ... \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\t\tpIrp<span class=\"token operator\">-></span>IoStatus<span class=\"token punctuation\">.</span>Information <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>\t\tstatus <span class=\"token operator\">=</span> STATUS_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>\t<span class=\"token keyword\">case</span> OPER2<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>\t\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"IrpDeviceControlProc -> OPER2 接收字节数：%d \\n\"</span><span class=\"token punctuation\">,</span> uInLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>\t\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"IrpDeviceControlProc -> OPER2 输出字节数：%d \\n\"</span><span class=\"token punctuation\">,</span> uOutLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>\t\t<span class=\"token comment\">// Read From Buffer</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>\t\t<span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>uRead<span class=\"token punctuation\">,</span> pIoBuffer<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>\t\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"IrpDeviceControlProc -> OPER2 ... %x \\n\"</span><span class=\"token punctuation\">,</span> uRead<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>\t\t<span class=\"token comment\">// Write To Buffer</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>\t\t<span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>pIoBuffer<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>uWrite<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>\t\t<span class=\"token comment\">// Set Status</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>\t\tpIrp<span class=\"token operator\">-></span>IoStatus<span class=\"token punctuation\">.</span>Information <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>\t\tstatus <span class=\"token operator\">=</span> STATUS_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>\t<span class=\"token comment\">// 设置返回状态</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>\tpIrp<span class=\"token operator\">-></span>IoStatus<span class=\"token punctuation\">.</span>Status <span class=\"token operator\">=</span> status<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>\t<span class=\"token function\">IoCompleteRequest</span><span class=\"token punctuation\">(</span>pIrp<span class=\"token punctuation\">,</span> IO_NO_INCREMENT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>\t<span class=\"token keyword\">return</span> status<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre></pre></td></tr><tr><td data-num=\"101\"></td><td><pre><span class=\"token comment\">// 入口函数 相当于 Main 函数</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>NTSTATUS <span class=\"token function\">DriverEntry</span><span class=\"token punctuation\">(</span>PDRIVER_OBJECT pDriver<span class=\"token punctuation\">,</span> PUNICODE_STRING reg_path<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>\tNTSTATUS status <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>\tULONG    uIndex <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>\tPDEVICE_OBJECT pDeviceObj <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>\tUNICODE_STRING Devicename<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>\tUNICODE_STRING SymbolicLinkName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"驱动程序开始运行了 . \\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>\t<span class=\"token comment\">// 创建设备名称</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>\t<span class=\"token function\">RtlInitUnicodeString</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>Devicename<span class=\"token punctuation\">,</span> DEVICE_NAME<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>\t<span class=\"token comment\">// 创建设备</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>\tstatus <span class=\"token operator\">=</span> <span class=\"token function\">IoCreateDevice</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>\t\tpDriver<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>\t\t<span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>\t\t<span class=\"token operator\">&amp;</span>Devicename<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>\t\tFILE_DEVICE_UNKNOWN<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>\t\tFILE_DEVICE_SECURE_OPEN<span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"122\"></td><td><pre>\t\tFALSE<span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"123\"></td><td><pre>\t\t<span class=\"token operator\">&amp;</span>pDeviceObj</pre></td></tr><tr><td data-num=\"124\"></td><td><pre>\t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>status <span class=\"token operator\">!=</span> STATUS_SUCCESS<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>\t\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"创建设备失败! \\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> status<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>\t<span class=\"token comment\">// 设置交互数据的方式</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>\tpDeviceObj<span class=\"token operator\">-></span>Flags <span class=\"token operator\">|=</span> DO_BUFFERED_IO<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>\t<span class=\"token comment\">// 创建符号链接名称</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>\t<span class=\"token function\">RtlInitUnicodeString</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>SymbolicLinkName<span class=\"token punctuation\">,</span> SYMBOLICLINK_NAME<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>\t<span class=\"token comment\">// 创建符号链接</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>\tstatus <span class=\"token operator\">=</span> <span class=\"token function\">IoCreateSymbolicLink</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>SymbolicLinkName<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>Devicename<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>status <span class=\"token operator\">!=</span> STATUS_SUCCESS<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>\t\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"创建符号链接失败! \\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>\t\t<span class=\"token function\">IoDeleteDevice</span><span class=\"token punctuation\">(</span>pDeviceObj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> status<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>\t<span class=\"token comment\">// 设置分发函数和卸载函数</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre>\tpDriver<span class=\"token operator\">-></span>MajorFunction<span class=\"token punctuation\">[</span>IRP_MJ_CREATE<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> IrpCreateProc<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>\tpDriver<span class=\"token operator\">-></span>MajorFunction<span class=\"token punctuation\">[</span>IRP_MJ_CLOSE<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> IrpCloseProc<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>\tpDriver<span class=\"token operator\">-></span>MajorFunction<span class=\"token punctuation\">[</span>IRP_MJ_DEVICE_CONTROL<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> IrpDeviceControlProc<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre>\tpDriver<span class=\"token operator\">-></span>DriverUnload <span class=\"token operator\">=</span> DriverUnload<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre></pre></td></tr><tr><td data-num=\"151\"></td><td><pre>\t<span class=\"token keyword\">return</span> STATUS_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"r3代码\"><a class=\"anchor\" href=\"#r3代码\">#</a> R3 代码</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">_CRT_SECURE_NO_WARNINGS</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;windows.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;winioctl.h></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">IN_BUFFER_MAXLENGTH</span>  <span class=\"token expression\"><span class=\"token number\">0x10</span>\t</span><span class=\"token comment\">// 输入缓存最大长度</span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">OUT_BUFFER_MAXLENGTH</span> <span class=\"token expression\"><span class=\"token number\">0x10</span>\t</span><span class=\"token comment\">// 输出缓存最大长度</span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">OPER1</span> <span class=\"token expression\"><span class=\"token function\">CTL_CODE</span><span class=\"token punctuation\">(</span>FILE_DEVICE_UNKNOWN<span class=\"token punctuation\">,</span> <span class=\"token number\">0x800</span><span class=\"token punctuation\">,</span> METHOD_BUFFERED<span class=\"token punctuation\">,</span> FILE_ANY_ACCESS<span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">OPER2</span> <span class=\"token expression\"><span class=\"token function\">CTL_CODE</span><span class=\"token punctuation\">(</span>FILE_DEVICE_UNKNOWN<span class=\"token punctuation\">,</span> <span class=\"token number\">0x900</span><span class=\"token punctuation\">,</span> METHOD_BUFFERED<span class=\"token punctuation\">,</span> FILE_ANY_ACCESS<span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">SYMBOLICLINK_NAME</span> <span class=\"token string\">\"\\\\\\\\.\\\\MyTestDriver\"</span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>HANDLE g_hDevice<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 驱动句柄</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">/***************************************************************************/</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">// 打开驱动服务句柄</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">// 打开三环链接名：\\\\\\\\.\\\\Driver</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">/***************************************************************************/</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>BOOL <span class=\"token function\">Open</span><span class=\"token punctuation\">(</span>PCHAR pLinkName<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\tTCHAR szBuffer<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token comment\">// 在 3 环获取驱动程序</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\tg_hDevice <span class=\"token operator\">=</span> <span class=\"token function\">CreateFile</span><span class=\"token punctuation\">(</span>pLinkName<span class=\"token punctuation\">,</span> GENERIC_READ <span class=\"token operator\">|</span> GENERIC_WRITE<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> OPEN_EXISTING<span class=\"token punctuation\">,</span> FILE_ATTRIBUTE_NORMAL<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\tDWORD err <span class=\"token operator\">=</span> <span class=\"token function\">GetLastError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token function\">sprintf</span><span class=\"token punctuation\">(</span>szBuffer<span class=\"token punctuation\">,</span> <span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>g_hDevice <span class=\"token operator\">!=</span> INVALID_HANDLE_VALUE<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> TRUE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> FALSE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token comment\">/***************************************************************************/</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token comment\">// 与驱动通信的函数</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token comment\">/***************************************************************************/</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>BOOL <span class=\"token function\">IoControl</span><span class=\"token punctuation\">(</span>DWORD dwIoCode<span class=\"token punctuation\">,</span> PVOID InBuff<span class=\"token punctuation\">,</span> DWORD InBuffLen<span class=\"token punctuation\">,</span> PVOID OutBuff<span class=\"token punctuation\">,</span> DWORD OutBuffLen<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\tDWORD dw<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token comment\">// 驱动句柄 / 操作码 / 输入缓冲区地址 / 输入缓冲区长度 / 输出缓冲区地址 / 输出缓冲区长度 / 返回长度 / 指向 OVERLAPPED 此处为 NULL</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t<span class=\"token function\">DeviceIoControl</span><span class=\"token punctuation\">(</span>g_hDevice<span class=\"token punctuation\">,</span> dwIoCode<span class=\"token punctuation\">,</span> InBuff<span class=\"token punctuation\">,</span> InBuffLen<span class=\"token punctuation\">,</span> OutBuff<span class=\"token punctuation\">,</span> OutBuffLen<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>dw<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t<span class=\"token keyword\">return</span> TRUE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\tDWORD dwInBuffer <span class=\"token operator\">=</span> <span class=\"token number\">0x11223344</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\tTCHAR szOutBuffer<span class=\"token punctuation\">[</span>OUT_BUFFER_MAXLENGTH<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t<span class=\"token comment\">//1. 通过符号链接，打开设备</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t<span class=\"token function\">Open</span><span class=\"token punctuation\">(</span>SYMBOLICLINK_NAME<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t<span class=\"token comment\">//2. 测试通信</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t<span class=\"token function\">IoControl</span><span class=\"token punctuation\">(</span>OPER2<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>dwInBuffer<span class=\"token punctuation\">,</span> IN_BUFFER_MAXLENGTH<span class=\"token punctuation\">,</span> szOutBuffer<span class=\"token punctuation\">,</span> OUT_BUFFER_MAXLENGTH<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\"</span><span class=\"token punctuation\">,</span> szOutBuffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t<span class=\"token comment\">//3. 关闭设备</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t<span class=\"token function\">CloseHandle</span><span class=\"token punctuation\">(</span>g_hDevice<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t<span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"reference\"><a class=\"anchor\" href=\"#reference\">#</a> Reference</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxOTg4NDQ4L2FydGljbGUvZGV0YWlscy8xMDM1MTk0Nzg=\">https://blog.csdn.net/qq_41988448/article/details/103519478</span><br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0t3YW5zeS9hcnRpY2xlL2RldGFpbHMvMTA5MTcwMTI5\">https://blog.csdn.net/Kwansy/article/details/109170129</span><br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cueHVlYnV5dWFuLmNvbS84Mzg0OTkuaHRtbA==\">https://www.xuebuyuan.com/838499.html</span><br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS9Jb0NyZWF0ZURldmljZSUyOCUyOS8zMDcxNTM2\">https://baike.baidu.com/item/IoCreateDevice()/3071536</span></p>\n",
            "tags": [
                "0环与3环的通信（常规方法）"
            ]
        },
        {
            "id": "https://or0kit.github.io/Bin/Core/Drive-Development/%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91-%E5%86%85%E6%A0%B8%E7%A9%BA%E9%97%B4%E5%92%8C%E5%86%85%E6%A0%B8%E6%A8%A1%E5%9D%97/",
            "url": "https://or0kit.github.io/Bin/Core/Drive-Development/%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91-%E5%86%85%E6%A0%B8%E7%A9%BA%E9%97%B4%E5%92%8C%E5%86%85%E6%A0%B8%E6%A8%A1%E5%9D%97/",
            "title": "驱动开发-内核空间和内核模块",
            "date_published": "2021-09-24T15:53:44.000Z",
            "content_html": "<h1 id=\"内核空间\"><a class=\"anchor\" href=\"#内核空间\">#</a> 内核空间</h1>\n<p>每个进程的低 2G 都是独立的，它们所对应的物理页都是不一样的，而高 2G 所对应的物理页都是相同的。</p>\n<p>概念图:</p>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<h2 id=\"实验验证\"><a class=\"anchor\" href=\"#实验验证\">#</a> 实验验证</h2>\n<p>写一个驱动程序定义一个全局变量，在不同进程中查看。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;ntddk.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>ULONG g_Value <span class=\"token operator\">=</span> <span class=\"token number\">0x12345678</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>VOID <span class=\"token function\">DriverUnload</span><span class=\"token punctuation\">(</span>PDRIVER_OBJECT pdriver<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是驱动，我卸载了\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>NTSTATUS <span class=\"token function\">DriverEntry</span><span class=\"token punctuation\">(</span>PDRIVER_OBJECT pdriver<span class=\"token punctuation\">,</span> PUNICODE_STRING reg_path<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是驱动我运行了\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%p\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>g_Value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tpdriver<span class=\"token operator\">-></span>DriverUnload <span class=\"token operator\">=</span> DriverUnload<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">return</span> STATUS_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"image002.png\" alt=\"\" /><br />\n<img data-src=\"image003.png\" alt=\"\" /></p>\n<h1 id=\"内核模块\"><a class=\"anchor\" href=\"#内核模块\">#</a> 内核模块</h1>\n<p>硬件的种类繁多，不可能做一个兼容所有硬件的内核，因此，微软提供规定的接口格式，让硬件驱动人员按照规定的格式编写 “驱动程序”<br />\n 这些驱动程序每一个都是一个模块，称为 “内核模块”，可以加载到内核中，并遵守 PE 结构。但本质上讲，任意一个.sys 文件与内核文件没有区别<br />\n不管是我们自己编写的 .sys 文件，还是 Windows 自带的内核文件（如 ntoskrnl.exe），它们在内核中的地位是相同的，都是内核模块中的其中一个</p>\n<p><img data-src=\"image004.png\" alt=\"\" /></p>\n<h1 id=\"驱动对象\"><a class=\"anchor\" href=\"#驱动对象\">#</a> 驱动对象</h1>\n<h2 id=\"_driver_object结构体\"><a class=\"anchor\" href=\"#_driver_object结构体\">#</a>  <code>_DRIVER_OBJECT</code>  结构体</h2>\n<pre><code>kd&gt; dt _DRIVER_OBJECT\nnt!_DRIVER_OBJECT\n  +0x000 Type             : Int2B\n  +0x002 Size             : Int2B\n  +0x004 DeviceObject     : Ptr32 _DEVICE_OBJECT\n  +0x008 Flags            : Uint4B\n  +0x00c DriverStart      : Ptr32 Void\n  +0x010 DriverSize       : Uint4B\n  +0x014 DriverSection    : Ptr32 Void\n  +0x018 DriverExtension  : Ptr32 _DRIVER_EXTENSION\n  +0x01c DriverName       : _UNICODE_STRING\n  +0x024 HardwareDatabase : Ptr32 _UNICODE_STRING\n  +0x028 FastIoDispatch   : Ptr32 _FAST_IO_DISPATCH\n  +0x02c DriverInit       : Ptr32     long \n  +0x030 DriverStartIo    : Ptr32     void \n  +0x034 DriverUnload     : Ptr32     void \n  +0x038 MajorFunction    : [28] Ptr32     long \n</code></pre>\n<p>其中对我们来说比较重要的结构:<br />\n <code>DriverStart：</code> 驱动模块在内核中的地址<br />\n <code>DriverSize：</code> 驱动模块在内核中的大小<br />\n <code>DriverName：</code> 驱动模块在内核中的名字<br />\n <code>DriverSection：</code> 指向  <code>_LDR_DATA_TABLE_ENTRY</code>  结构体</p>\n<h2 id=\"_ldr_data_table_entry-结构体\"><a class=\"anchor\" href=\"#_ldr_data_table_entry-结构体\">#</a>  <code>_LDR_DATA_TABLE_ENTRY</code>  结构体</h2>\n<p>描述：包含了当前内核模块的具体信息，以及其它内核模块的双向链表。</p>\n<pre><code>kd&gt; dt _LDR_DATA_TABLE_ENTRY\nnt!_LDR_DATA_TABLE_ENTRY\n  +0x000 InLoadOrderLinks : _LIST_ENTRY\n  +0x008 InMemoryOrderLinks : _LIST_ENTRY\n  +0x010 InInitializationOrderLinks : _LIST_ENTRY\n  +0x018 DllBase          : Ptr32 Void\n  +0x01c EntryPoint       : Ptr32 Void\n  +0x020 SizeOfImage      : Uint4B\n  +0x024 FullDllName      : _UNICODE_STRING\n  +0x02c BaseDllName      : _UNICODE_STRING\n  +0x034 Flags            : Uint4B\n  +0x038 LoadCount        : Uint2B\n  +0x03a TlsIndex         : Uint2B\n  +0x03c HashLinks        : _LIST_ENTRY\n  +0x03c SectionPointer   : Ptr32 Void\n  +0x040 CheckSum         : Uint4B\n  +0x044 TimeDateStamp    : Uint4B\n  +0x044 LoadedImports    : Ptr32 Void\n  +0x048 EntryPointActivationContext : Ptr32 Void\n  +0x04c PatchInformation : Ptr32 Void\n</code></pre>\n<p>和 3 环有点区别，在 0 环中  <code>InMemoryOrderLinks</code>  和  <code>InInitializationOrderLinks</code>  是没用的，只需要关注第一个链表  <code>InLoadOrderLinks</code> 。</p>\n<p><code>_LIST_ENTRY</code>  这个结构体存了两个地址，指向前一个节点和下一个节点。</p>\n<pre><code>kd&gt; dt _LIST_ENTRY\nntdll!_LIST_ENTRY\n  +0x000 Flink            : Ptr32 _LIST_ENTRY\n  +0x004 Blink            : Ptr32 _LIST_ENTRY\n</code></pre>\n<p>比较重要的结构:<br />\n <code>InLoadOrderLinks：</code> 双向链表，包含所有内核模块<br />\n <code>DllBase：</code> 当前内核模块起始地址<br />\n <code>SizeOfImage：</code> 当前内核模块的大小<br />\n <code>FullDllName：</code> 当前内核模块的完整路径<br />\n <code>BaseDllName：</code> 当前内核模块的模块名</p>\n<h2 id=\"遍历内核模块\"><a class=\"anchor\" href=\"#遍历内核模块\">#</a> 遍历内核模块</h2>\n<p>我们可以发现，我们可以由一个内核模块遍历处所有的内核模块。</p>\n<p>通过这个  <code>InLoadOrderLinks</code> ，我们可以遍历整个高 2G 的模块了。 <code>InLoadOrderLinks.Flink</code>  指向的就是下一个  <code>_LDR_DATA_TABLE_ENTRY</code> 。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 遍历内核模块</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;ntddk.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_LDR_DATA_TABLE_ENTRY</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tLIST_ENTRY InLoadOrderLinks<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tLIST_ENTRY InMemoryOrderLinks<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tLIST_ENTRY InInitializationOrderLinks<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tPVOID DllBase<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tPVOID EntryPoint<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tUINT32 SizeOfImage<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\tUNICODE_STRING FullDllName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tUNICODE_STRING BaseDllName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tUINT32 Flags<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tUINT16 LoadCount<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tUINT16 TlsIndex<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\tLIST_ENTRY HashLinks<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\tPVOID SectionPointer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\tUINT32 CheckSum<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\tUINT32 TimeDateStamp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\tPVOID LoadedImports<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\tPVOID EntryPointActivationContext<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\tPVOID PatchInformation<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span> LDR_DATA_TABLE_ENTRY<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span> PLDR_DATA_TABLE_ENTRY<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>VOID <span class=\"token function\">DriverUnload</span><span class=\"token punctuation\">(</span>PDRIVER_OBJECT pdriver<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是驱动，我卸载了\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>NTSTATUS <span class=\"token function\">DriverEntry</span><span class=\"token punctuation\">(</span>PDRIVER_OBJECT pdriver<span class=\"token punctuation\">,</span> PUNICODE_STRING reg_path<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是驱动，我运行了\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\tPLDR_DATA_TABLE_ENTRY pLdteHead<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 内核模块链表头</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\tPLDR_DATA_TABLE_ENTRY pLdteCur<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 遍历指针</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\tpLdteHead <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PLDR_DATA_TABLE_ENTRY<span class=\"token punctuation\">)</span>pdriver<span class=\"token operator\">-></span>DriverSection<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\tpLdteCur <span class=\"token operator\">=</span> pLdteHead<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t<span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"DllBase: %p, SizeOfImage: %08X %wZ\\n\"</span><span class=\"token punctuation\">,</span> pLdteCur<span class=\"token operator\">-></span>DllBase<span class=\"token punctuation\">,</span> pLdteCur<span class=\"token operator\">-></span>SizeOfImage<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span>pLdteCur<span class=\"token operator\">-></span>FullDllName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\tpLdteCur <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PLDR_DATA_TABLE_ENTRY<span class=\"token punctuation\">)</span>pLdteCur<span class=\"token operator\">-></span>InLoadOrderLinks<span class=\"token punctuation\">.</span>Flink<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>pLdteHead <span class=\"token operator\">!=</span> pLdteCur<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\tpdriver<span class=\"token operator\">-></span>DriverUnload <span class=\"token operator\">=</span> DriverUnload<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t<span class=\"token keyword\">return</span> STATUS_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"image005.png\" alt=\"\" /></p>\n<h1 id=\"定位未导出函数pspterminateprocess\"><a class=\"anchor\" href=\"#定位未导出函数pspterminateprocess\">#</a> 定位未导出函数 PspTerminateProcess</h1>\n<p>我们想找未导出函数  <code>PspTerminateProcess</code> ，用来杀进程的。学习以下几种方法。</p>\n<h2 id=\"windbgpdb\"><a class=\"anchor\" href=\"#windbgpdb\">#</a> windbg+pdb</h2>\n<p>在有内核 PDB 的情况下，用 windbg 可以直接找到该函数：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kd<span class=\"token operator\">></span>  u PspTerminateProcess l2e</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  nt<span class=\"token operator\">!</span>PspTerminateProcess<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token number\">805</span>d3482 <span class=\"token number\">8</span>bff            mov     edi<span class=\"token punctuation\">,</span>edi</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token number\">805</span>d3484 <span class=\"token number\">55</span>              push    ebp</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token number\">805</span>d3485 <span class=\"token number\">8</span>bec            mov     ebp<span class=\"token punctuation\">,</span>esp</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token number\">805</span>d3487 <span class=\"token number\">56</span>              push    esi</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token number\">805</span>d3488 <span class=\"token number\">64</span>a124010000    mov     eax<span class=\"token punctuation\">,</span>dword ptr fs<span class=\"token operator\">:</span><span class=\"token punctuation\">[</span><span class=\"token number\">00000124</span>h<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token number\">805</span>d348e <span class=\"token number\">8</span>b7508          mov     esi<span class=\"token punctuation\">,</span>dword ptr <span class=\"token punctuation\">[</span>ebp<span class=\"token operator\">+</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token number\">805</span>d3491 <span class=\"token number\">3</span>b7044          cmp     esi<span class=\"token punctuation\">,</span>dword ptr <span class=\"token punctuation\">[</span>eax<span class=\"token operator\">+</span><span class=\"token number\">44</span>h<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token number\">805</span>d3494 <span class=\"token number\">7507</span>            jne     nt<span class=\"token operator\">!</span>PspTerminateProcess<span class=\"token operator\">+</span><span class=\"token number\">0</span><span class=\"token function\">x1b</span> <span class=\"token punctuation\">(</span><span class=\"token number\">805</span>d349d<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token number\">805</span>d3496 b80d0000c0      mov     eax<span class=\"token punctuation\">,</span><span class=\"token number\">0</span>C000000Dh</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token number\">805</span>d349b eb5a            jmp     nt<span class=\"token operator\">!</span>PspTerminateProcess<span class=\"token operator\">+</span><span class=\"token number\">0</span><span class=\"token function\">x75</span> <span class=\"token punctuation\">(</span><span class=\"token number\">805</span>d34f7<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token number\">805</span>d349d <span class=\"token number\">57</span>              push    edi</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token number\">805</span>d349e <span class=\"token number\">8</span>dbe48020000    lea     edi<span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span>esi<span class=\"token operator\">+</span><span class=\"token number\">248</span>h<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token number\">805</span>d34a4 f6470120        test    byte ptr <span class=\"token punctuation\">[</span>edi<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span>h</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token number\">805</span>d34a8 <span class=\"token number\">7412</span>            je      nt<span class=\"token operator\">!</span>PspTerminateProcess<span class=\"token operator\">+</span><span class=\"token number\">0</span><span class=\"token function\">x3a</span> <span class=\"token punctuation\">(</span><span class=\"token number\">805</span>d34bc<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token number\">805</span>d34aa <span class=\"token number\">8</span>d8674010000    lea     eax<span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span>esi<span class=\"token operator\">+</span><span class=\"token number\">174</span>h<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token number\">805</span>d34b0 <span class=\"token number\">50</span>              push    eax</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token number\">805</span>d34b1 <span class=\"token number\">56</span>              push    esi</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token number\">805</span>d34b2 <span class=\"token number\">6854345</span>d80      push    offset nt<span class=\"token operator\">!</span>NtTerminateProcess<span class=\"token operator\">+</span><span class=\"token number\">0</span><span class=\"token function\">x14c</span> <span class=\"token punctuation\">(</span><span class=\"token number\">805</span>d3454<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token number\">805</span>d34b7 e8f2eeffff      call    nt<span class=\"token operator\">!</span><span class=\"token function\">PspCatchCriticalBreak</span> <span class=\"token punctuation\">(</span><span class=\"token number\">805</span>d23ae<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token number\">805</span>d34bc <span class=\"token number\">6</span>a08            push    <span class=\"token number\">8</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token number\">805</span>d34be <span class=\"token number\">58</span>              pop     eax</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token number\">805</span>d34bf f00907          lock or dword ptr <span class=\"token punctuation\">[</span>edi<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>eax</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token number\">805</span>d34c2 <span class=\"token number\">6</span>a00            push    <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token number\">805</span>d34c4 <span class=\"token number\">56</span>              push    esi</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token number\">805</span>d34c5 e8ca560000      call    nt<span class=\"token operator\">!</span><span class=\"token function\">PsGetNextProcessThread</span> <span class=\"token punctuation\">(</span><span class=\"token number\">805</span>d8b94<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  <span class=\"token number\">805</span>d34ca <span class=\"token number\">8</span>bf8            mov     edi<span class=\"token punctuation\">,</span>eax</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token number\">805</span>d34cc <span class=\"token number\">85ff</span>            test    edi<span class=\"token punctuation\">,</span>edi</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  <span class=\"token number\">805</span>d34ce <span class=\"token number\">741</span>e            je      nt<span class=\"token operator\">!</span>PspTerminateProcess<span class=\"token operator\">+</span><span class=\"token number\">0</span><span class=\"token function\">x6c</span> <span class=\"token punctuation\">(</span><span class=\"token number\">805</span>d34ee<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  <span class=\"token number\">805</span>d34d0 ff750c          push    dword ptr <span class=\"token punctuation\">[</span>ebp<span class=\"token operator\">+</span><span class=\"token number\">0</span>Ch<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  <span class=\"token number\">805</span>d34d3 <span class=\"token number\">57</span>              push    edi</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>  <span class=\"token number\">805</span>d34d4 e807fdffff      call    nt<span class=\"token operator\">!</span><span class=\"token function\">PspTerminateThreadByPointer</span> <span class=\"token punctuation\">(</span><span class=\"token number\">805</span>d31e0<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>  <span class=\"token number\">805</span>d34d9 <span class=\"token number\">57</span>              push    edi</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>  <span class=\"token number\">805</span>d34da <span class=\"token number\">56</span>              push    esi</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>  <span class=\"token number\">805</span>d34db e8b4560000      call    nt<span class=\"token operator\">!</span><span class=\"token function\">PsGetNextProcessThread</span> <span class=\"token punctuation\">(</span><span class=\"token number\">805</span>d8b94<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>  <span class=\"token number\">805</span>d34e0 <span class=\"token number\">8</span>bf8            mov     edi<span class=\"token punctuation\">,</span>eax</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>  <span class=\"token number\">805</span>d34e2 <span class=\"token number\">85ff</span>            test    edi<span class=\"token punctuation\">,</span>edi</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>  <span class=\"token number\">805</span>d34e4 <span class=\"token number\">75</span>ea            jne     nt<span class=\"token operator\">!</span>PspTerminateProcess<span class=\"token operator\">+</span><span class=\"token number\">0</span><span class=\"token function\">x4e</span> <span class=\"token punctuation\">(</span><span class=\"token number\">805</span>d34d0<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>  <span class=\"token number\">805</span>d34e6 <span class=\"token number\">3986</span>bc000000    cmp     dword ptr <span class=\"token punctuation\">[</span>esi<span class=\"token operator\">+</span><span class=\"token number\">0</span>BCh<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>eax</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>  <span class=\"token number\">805</span>d34ec <span class=\"token number\">7406</span>            je      nt<span class=\"token operator\">!</span>PspTerminateProcess<span class=\"token operator\">+</span><span class=\"token number\">0</span><span class=\"token function\">x72</span> <span class=\"token punctuation\">(</span><span class=\"token number\">805</span>d34f4<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>  <span class=\"token number\">805</span>d34ee <span class=\"token number\">56</span>              push    esi</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>  <span class=\"token number\">805</span>d34ef e86e05ffff      call    nt<span class=\"token operator\">!</span><span class=\"token function\">ObClearProcessHandleTable</span> <span class=\"token punctuation\">(</span><span class=\"token number\">805</span>c3a62<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>  <span class=\"token number\">805</span>d34f4 <span class=\"token number\">33</span>c0            xor     eax<span class=\"token punctuation\">,</span>eax</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>  <span class=\"token number\">805</span>d34f6 <span class=\"token number\">5f</span>              pop     edi</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>  <span class=\"token number\">805</span>d34f7 <span class=\"token number\">5</span>e              pop     esi</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>  <span class=\"token number\">805</span>d34f8 <span class=\"token number\">5</span>d              pop     ebp</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>  <span class=\"token number\">805</span>d34f9 c20800          ret     <span class=\"token number\">8</span></pre></td></tr></table></figure><p>805d3482 就是函数头，然而这个值由于重定位，可能会变的，所以我们就要用其他办法，确保每次都能找到这个函数。</p>\n<h2 id=\"通过已导出函数\"><a class=\"anchor\" href=\"#通过已导出函数\">#</a> 通过已导出函数</h2>\n<p>第二种办法是根据已导出函数找未导出函数，在驱动里找已导出函数使用的函数是  <code>MmGetSystemRoutineAddress</code>  。我们通过 IDA 交叉引用，并没有找到调用 PspTerminateProcess 的导出函数。</p>\n<h2 id=\"模块基址偏移\"><a class=\"anchor\" href=\"#模块基址偏移\">#</a> 模块基址 + 偏移</h2>\n<p>虽然模块基址会变，但是函数相对基址的偏移是不变的，通过这个规律也可以找到想要的函数。<br />\nPspTerminateProcess 相对内核基址的偏移 = 8062f050 - 804D8000 = 157050<br />\n 只要找到内核基址，加上 0x157050 就是 PspTerminateProcess 的地址。</p>\n<h2 id=\"特征码匹配最常用\"><a class=\"anchor\" href=\"#特征码匹配最常用\">#</a> 特征码匹配（最常用）</h2>\n<p>特征码提取时，<strong>要避免使用全局变量等和重定位有关的指令</strong>，也要<strong>避免提取这种所有函数都有的指令</strong>。</p>\n<pre><code>805d3482 8bff            mov     edi,edi\n805d3484 55              push    ebp\n805d3485 8bec            mov     ebp,esp\n805d3487 56              push    esi\n</code></pre>\n<p>我是跳着提取特征码的:</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 函数 PspTerminateProcess 开头对应的硬编码</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>pShellCode<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\t\t\t<span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>UINT32<span class=\"token punctuation\">)</span><span class=\"token number\">0x8b55ff8b</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 相对函数开头偏移 0X0C 个字节后对应的硬编码</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>pShellCode<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\t\t\t<span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>UINT32<span class=\"token punctuation\">)</span><span class=\"token number\">0x3b08758b</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 相对函数开头偏移 0X22 个字节后对应的硬编码</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>pShellCode <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\t\t<span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>UINT32<span class=\"token punctuation\">)</span><span class=\"token number\">0x200147f6</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 相对函数开头偏移 0X48 个字节后对应的硬编码</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>pShellCode <span class=\"token operator\">+</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\t\t<span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>UINT32<span class=\"token punctuation\">)</span><span class=\"token number\">0xff85f88b</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 相对函数开头偏移 0X6A 个字节后对应的硬编码</span></pre></td></tr></table></figure><p>代码如下：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;ntifs.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">FristOffset</span>\t\t<span class=\"token expression\"><span class=\"token number\">0x0</span></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">SecondOffset</span>\t<span class=\"token expression\"><span class=\"token number\">0x0C</span></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">ThirdOffset</span>\t\t<span class=\"token expression\"><span class=\"token number\">0x22</span></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">FourthOffset</span>\t<span class=\"token expression\"><span class=\"token number\">0x48</span></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">FifthOffset</span>\t\t<span class=\"token expression\"><span class=\"token number\">0x6A</span></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_LDR_DATA_TABLE_ENTRY</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tLIST_ENTRY InLoadOrderLinks<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tLIST_ENTRY InMemoryOrderLinks<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tLIST_ENTRY InInitializationOrderLinks<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\tPVOID DllBase<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tPVOID EntryPoint<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tUINT32 SizeOfImage<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tUNICODE_STRING FullDllName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tUNICODE_STRING BaseDllName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\tUINT32 Flages<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\tUINT16 LoadCount<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\tUINT16 TlsIndex<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\tLIST_ENTRY HashLinks<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\tPVOID SectionPointer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\tUINT32 CheckSum<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\tUINT32 TimeDateStamp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\tPVOID LoadedImports<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\tPVOID EntryPointActivationContext<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\tPVOID PatchInformation<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span>LDR_DATA_TABLE_ENTRY<span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>PLDR_DATA_TABLE_ENTRY<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token comment\">// 定义 PspTerminateProcess 函数指针</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token function\">NTSTATUS</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>_PspTerminateProcess<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>PEPROCESS pEprocess<span class=\"token punctuation\">,</span> NTSTATUS ExitCode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>_PspTerminateProcess PspTerminateProcess <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>VOID <span class=\"token function\">DriverUnload</span><span class=\"token punctuation\">(</span>PDRIVER_OBJECT pdriver<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是驱动，我停止加载了\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token comment\">// 获取内核基址，大小</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>VOID <span class=\"token function\">GetKernelBase</span><span class=\"token punctuation\">(</span>IN PDRIVER_OBJECT driver<span class=\"token punctuation\">,</span> OUT PVOID<span class=\"token operator\">*</span> pKrnlBase<span class=\"token punctuation\">,</span> OUT PUINT32 uKrnlImageSize<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\tPLDR_DATA_TABLE_ENTRY pLdteHead<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 内核模块链表头</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\tPLDR_DATA_TABLE_ENTRY pLdteCur<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 遍历指针</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\tUNICODE_STRING usBaseDllNameNtoskrnl<span class=\"token punctuation\">,</span> usDllNameNtkrnlpa<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 内核模块名</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t<span class=\"token comment\">// 两种分页模式下的内核模块</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t<span class=\"token function\">RtlInitUnicodeString</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>usBaseDllNameNtoskrnl<span class=\"token punctuation\">,</span> L<span class=\"token string\">\"ntoskrnl.exe\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t<span class=\"token function\">RtlInitUnicodeString</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>usDllNameNtkrnlpa<span class=\"token punctuation\">,</span> L<span class=\"token string\">\"ntkrnlpa.exe\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\tpLdteHead <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PLDR_DATA_TABLE_ENTRY<span class=\"token punctuation\">)</span>driver<span class=\"token operator\">-></span>DriverSection<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\tpLdteCur <span class=\"token operator\">=</span> pLdteHead<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t<span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t\t\t<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">(</span><span class=\"token function\">RtlCompareUnicodeString</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>pLdteCur<span class=\"token operator\">-></span>BaseDllName<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>usBaseDllNameNtoskrnl<span class=\"token punctuation\">,</span> TRUE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t\t\t\t<span class=\"token operator\">||</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">(</span><span class=\"token function\">RtlCompareUnicodeString</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>pLdteCur<span class=\"token operator\">-></span>BaseDllName<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>usBaseDllNameNtoskrnl<span class=\"token punctuation\">,</span> TRUE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t\t\t<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t\t\t<span class=\"token operator\">*</span>pKrnlBase <span class=\"token operator\">=</span> pLdteCur<span class=\"token operator\">-></span>DllBase<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t\t\t<span class=\"token operator\">*</span>uKrnlImageSize <span class=\"token operator\">=</span> pLdteCur<span class=\"token operator\">-></span>SizeOfImage<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t\tpLdteCur <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PLDR_DATA_TABLE_ENTRY<span class=\"token punctuation\">)</span>pLdteCur<span class=\"token operator\">-></span>InLoadOrderLinks<span class=\"token punctuation\">.</span>Flink<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>pLdteHead <span class=\"token operator\">!=</span> pLdteCur<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>PVOID <span class=\"token function\">GetUndocumentFunctionAddress</span><span class=\"token punctuation\">(</span>PUCHAR pStartAddress<span class=\"token punctuation\">,</span> PUINT32 pShellcode<span class=\"token punctuation\">,</span> UINT32 maxSize<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\t<span class=\"token class-name\">size_t</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\tPUCHAR Tmp <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>\tpStartAddress <span class=\"token operator\">+=</span> <span class=\"token number\">0xFB000</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 从内核基址 0x804d8000 到这个函数的位置 0x805d3482 需要循环遍历 0xFB482 (1029250) 次，此举是为了节约时间……</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">MmIsAddressValid</span><span class=\"token punctuation\">(</span>pStartAddress<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>\t\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pStartAddress地址不合法，或者地址指向内存不可读！\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"地址合法，开始查找...\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> maxSize<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>\t\tTmp <span class=\"token operator\">=</span> pStartAddress <span class=\"token operator\">+</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"84\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>\t\t\t<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>PUINT32<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>Tmp<span class=\"token punctuation\">[</span>FristOffset<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> pShellcode<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>\t\t\t<span class=\"token operator\">&amp;&amp;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>\t\t\t<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>PUINT32<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>Tmp<span class=\"token punctuation\">[</span>SecondOffset<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> pShellcode<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>\t\t\t<span class=\"token operator\">&amp;&amp;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>\t\t\t<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>PUINT32<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>Tmp<span class=\"token punctuation\">[</span>ThirdOffset<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> pShellcode<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>\t\t\t<span class=\"token operator\">&amp;&amp;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>\t\t\t<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>PUINT32<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>Tmp<span class=\"token punctuation\">[</span>FourthOffset<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> pShellcode<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>\t\t\t<span class=\"token operator\">&amp;&amp;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>\t\t\t<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>PUINT32<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>Tmp<span class=\"token punctuation\">[</span>FifthOffset<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> pShellcode<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>\t\t\t<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"96\"></td><td><pre>\t\t<span class=\"token comment\">//DbgPrint(\"i=%d\\n\", i);</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>\t\t<span class=\"token comment\">//UINT32 S1 = *(PUINT32)&amp;Tmp[FristOffset],</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>\t\t<span class=\"token comment\">//\tS2 = *(PUINT32)&amp;Tmp[SecondOffset],</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>\t\t<span class=\"token comment\">//\tS3 = *(PUINT32)&amp;Tmp[ThirdOffset],</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>\t\t<span class=\"token comment\">//\tS4 = *(PUINT32)&amp;Tmp[FourthOffset],</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>\t\t<span class=\"token comment\">//\tS5 = *(PUINT32)&amp;Tmp[FifthOffset];</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>\t\t<span class=\"token comment\">//DbgPrint(\"S1=%08X\\tS2=%08X\\tS3=%08X\\tS4=%08X\\tS5=%08X\\n\", S1, S2, S3, S4, S5);</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>\t\t<span class=\"token comment\">//if (</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>\t\t<span class=\"token comment\">//\t(S1 == pShellcode[0])</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>\t\t<span class=\"token comment\">//\t&amp;&amp;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>\t\t<span class=\"token comment\">//\t(S2 == pShellcode[1])</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>\t\t<span class=\"token comment\">//\t&amp;&amp;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>\t\t<span class=\"token comment\">//\t(S3 == pShellcode[2])</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>\t\t<span class=\"token comment\">//\t&amp;&amp;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>\t\t<span class=\"token comment\">//\t(S4 == pShellcode[3])</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>\t\t<span class=\"token comment\">//\t&amp;&amp;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>\t\t<span class=\"token comment\">//\t(S5 == pShellcode[4])</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>\t\t<span class=\"token comment\">//\t)</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span>\t\t</pre></td></tr><tr><td data-num=\"117\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> Tmp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>\t\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>\t\t\t<span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span>\t\t</pre></td></tr><tr><td data-num=\"123\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>NTSTATUS <span class=\"token function\">DriverEntry</span><span class=\"token punctuation\">(</span>PDRIVER_OBJECT pdriver<span class=\"token punctuation\">,</span> PUNICODE_STRING reg_path<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是驱动，我加载了！\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>\tpdriver<span class=\"token operator\">-></span>DriverUnload <span class=\"token operator\">=</span> DriverUnload<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>\t<span class=\"token comment\">// 内核基址</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>\tPVOID pKrnlBase\t\t\t<span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>\t<span class=\"token comment\">// 内核基址的大小</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>\tUINT32 uKrnlImageSize\t<span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"134\"></td><td><pre></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>\t<span class=\"token comment\">// 申请一块内存，我只是为了方便传递参数</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>\tPUINT32 pShellCode\t\t<span class=\"token operator\">=</span> <span class=\"token function\">ExAllocatePoolWithTag</span><span class=\"token punctuation\">(</span>NonPagedPool<span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ShellCode\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>\t<span class=\"token comment\">// 函数 PspTerminateProcess 开头对应的硬编码</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>\tpShellCode<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\t\t\t<span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>UINT32<span class=\"token punctuation\">)</span><span class=\"token number\">0x8b55ff8b</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>\t<span class=\"token comment\">// 相对函数开头偏移 0X0C 个字节后对应的硬编码</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>\tpShellCode<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\t\t\t<span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>UINT32<span class=\"token punctuation\">)</span><span class=\"token number\">0x3b08758b</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>\t<span class=\"token comment\">// 相对函数开头偏移 0X22 个字节后对应的硬编码</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>\t<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>pShellCode <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\t\t<span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>UINT32<span class=\"token punctuation\">)</span><span class=\"token number\">0x200147f6</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>\t<span class=\"token comment\">// 相对函数开头偏移 0X48 个字节后对应的硬编码</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>\t<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>pShellCode <span class=\"token operator\">+</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\t\t<span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>UINT32<span class=\"token punctuation\">)</span><span class=\"token number\">0xff85f88b</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>\t<span class=\"token comment\">// 相对函数开头偏移 0X6A 个字节后对应的硬编码</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre>\t<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>pShellCode <span class=\"token operator\">+</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\t    <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>UINT32<span class=\"token punctuation\">)</span><span class=\"token number\">0xe8560674</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>\t<span class=\"token comment\">// 获取内核基址和大小</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre>\t<span class=\"token function\">GetKernelBase</span><span class=\"token punctuation\">(</span>pdriver<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>pKrnlBase<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>uKrnlImageSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre></pre></td></tr><tr><td data-num=\"151\"></td><td><pre>\t<span class=\"token comment\">// 遍历内核内存定位未导出函数</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre>\t PVOID p <span class=\"token operator\">=</span> <span class=\"token function\">GetUndocumentFunctionAddress</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>PUCHAR<span class=\"token punctuation\">)</span>pKrnlBase<span class=\"token punctuation\">,</span> pShellCode<span class=\"token punctuation\">,</span> uKrnlImageSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"153\"></td><td><pre>\t <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"154\"></td><td><pre>\t <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"155\"></td><td><pre>\t\t <span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"成功找到函数首地址：%x\\n\"</span><span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"156\"></td><td><pre>\t\t <span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"开始尝试调用函数...\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"157\"></td><td><pre></pre></td></tr><tr><td data-num=\"158\"></td><td><pre>\t\t <span class=\"token comment\">/****** 调用 PspTerminateProcess (IN PEPROCESS Process, IN NTSTATUS ExitStatus) 函数 ******/</span></pre></td></tr><tr><td data-num=\"159\"></td><td><pre>\t\t PEPROCESS hProcess<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"160\"></td><td><pre>\t\t <span class=\"token function\">PsLookupProcessByProcessId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>HANDLE<span class=\"token punctuation\">)</span><span class=\"token number\">224</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>hProcess<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"161\"></td><td><pre>\t\t PspTerminateProcess <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>_PspTerminateProcess<span class=\"token punctuation\">)</span>p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"162\"></td><td><pre>\t\t <span class=\"token function\">PspTerminateProcess</span><span class=\"token punctuation\">(</span>hProcess<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"163\"></td><td><pre>\t\t <span class=\"token comment\">/****** 调用 PspTerminateProcess (IN PEPROCESS Process, IN NTSTATUS ExitStatus) 函数 ******/</span></pre></td></tr><tr><td data-num=\"164\"></td><td><pre></pre></td></tr><tr><td data-num=\"165\"></td><td><pre>\t\t <span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"函数调用结束.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"166\"></td><td><pre>\t <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"167\"></td><td><pre>\t <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"168\"></td><td><pre>\t\t <span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"查找失败！\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"169\"></td><td><pre></pre></td></tr><tr><td data-num=\"170\"></td><td><pre>\t <span class=\"token keyword\">return</span> STATUS_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"171\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"image008.png\" alt=\"\" /></p>\n<p>编程的过程中碰到不少非常离谱的事情，简直称得上玄学！编译执行了好几遍都蓝屏，于是就去问别人，问了一堆人都说没问题，调试了半个小时，还是原来的代码又重新编译执行了一遍竟然可以运行了？？？？？？</p>\n<h1 id=\"reference\"><a class=\"anchor\" href=\"#reference\">#</a> Reference</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0t3YW5zeS9hcnRpY2xlL2RldGFpbHMvMTA5MTQ1MTEw\">https://blog.csdn.net/Kwansy/article/details/109145110</span><br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxOTg4NDQ4L2FydGljbGUvZGV0YWlscy8xMDM1MTQwMDc=\">https://blog.csdn.net/qq_41988448/article/details/103514007</span></p>\n",
            "tags": [
                "内核空间",
                "内核模块",
                "遍历内核模块",
                "定位未导出函数PspTiminateProcess"
            ]
        },
        {
            "id": "https://or0kit.github.io/Bin/Core/Drive-Development/%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91-%E5%86%85%E6%A0%B8%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/",
            "url": "https://or0kit.github.io/Bin/Core/Drive-Development/%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91-%E5%86%85%E6%A0%B8%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/",
            "title": "驱动开发-内核编程基础",
            "date_published": "2021-09-03T14:52:35.000Z",
            "content_html": "<h1 id=\"未文档化函数-未导出函数\"><a class=\"anchor\" href=\"#未文档化函数-未导出函数\">#</a> 未文档化函数、未导出函数</h1>\n<p>未文档化就是 WDK 文档里搜不到，但是在导出表里的函数，要使用这种函数可以使用 GetProcAddress 函数获取函数地址；</p>\n<p>未导出函数就是不在导出表的函数，可以通过<strong>特征码</strong>搜索或者<strong>解析内核 PDB</strong> 的方式找到函数地址，通过函数指针调用。</p>\n<h1 id=\"wdk数据类型\"><a class=\"anchor\" href=\"#wdk数据类型\">#</a> WDK 数据类型</h1>\n<p>WDK 数据类型在 ntdef.h 中定义，下面列举部分，注意，并没有 UINT</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> UCHAR<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">short</span> USHORT<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> ULONG<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"ntstatus-返回值\"><a class=\"anchor\" href=\"#ntstatus-返回值\">#</a> NTSTATUS 返回值</h1>\n<p>很多内核函数的返回值都是 NTSTATUS，这是一个 4 字节整型。<br />\n例如：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>STATUS_SUCCESS\t\t<span class=\"token number\">0x00000000</span>\t成功</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>STATUS_INVALID_PARAMETER\t<span class=\"token number\">0xC000000D</span>\t参数无效</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>STATUS_BUFFER_OVERFLOW\t<span class=\"token number\">0x80000005</span>\t缓冲区长度不够</pre></td></tr></table></figure><h1 id=\"内核异常处理\"><a class=\"anchor\" href=\"#内核异常处理\">#</a> 内核异常处理</h1>\n<p>在内核中，一个小小的错误就可能导致蓝屏，比如：读写一个无效的内存地址。为了让自己的内核程序更加健壮，强烈建议大家在编写内核程序时，使用异常处。<br />\nWindows 提供了结构化异常处理机制，一般的编译器都是支持的，如下：</p>\n<pre><code>__try&#123;\n\t//可能出错的代码\n&#125;\n__except(filter_value) &#123;\n\t//出错时要执行的代码\n&#125;\n</code></pre>\n<p>出现异常时，可根据 filter_value 的值来决定程序该如果执行，当 filter_value 的值为：<br />\n <code>EXCEPTION_EXECUTE_HANDLER(1)</code> ，代码进入 except 块<br />\n <code>EXCEPTION_CONTINUE_SEARCH(0)</code> ，不处理异常，由上一层调用函数处理<br />\n <code>EXCEPTION_CONTINUE_EXECUTION(-1)</code> ，回去继续执行错误处的代码</p>\n<p>在火哥的视频中，火哥说加了这玩意该蓝屏还是蓝屏…… 试了试确实……。</p>\n<p>演示代码：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;ntddk.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>VOID <span class=\"token function\">DriverUnload</span><span class=\"token punctuation\">(</span>PDRIVER_OBJECT pdriver<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是驱动，我卸载了\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>NTSTATUS <span class=\"token function\">DriverEntry</span><span class=\"token punctuation\">(</span>PDRIVER_OBJECT pdriver<span class=\"token punctuation\">,</span> PUNICODE_STRING pReg<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t__try</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\tPULONG ptr <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t<span class=\"token operator\">*</span>ptr <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token function\">__except</span> <span class=\"token punctuation\">(</span>EXCEPTION_EXECUTE_HANDLER<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"非法访问内存.\\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\tpdriver<span class=\"token operator\">-></span>DriverUnload <span class=\"token operator\">=</span> DriverUnload<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token keyword\">return</span> STATUS_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"image001.png\" alt=\"\" /></p>\n<h1 id=\"常用的内核内存函数\"><a class=\"anchor\" href=\"#常用的内核内存函数\">#</a> 常用的内核内存函数</h1>\n<table>\n<thead>\n<tr>\n<th>C 语言</th>\n<th>内核</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>malloc</td>\n<td>ExAllocatePool</td>\n</tr>\n<tr>\n<td>memset</td>\n<td>RtlFillMemory</td>\n</tr>\n<tr>\n<td>memcpy</td>\n<td>RtlMoveMemory</td>\n</tr>\n<tr>\n<td>free</td>\n<td>ExFreePool</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"内核字符串及常用字符串函数\"><a class=\"anchor\" href=\"#内核字符串及常用字符串函数\">#</a> 内核字符串及常用字符串函数</h1>\n<p>为了提高安全性，内核中的字符串不再是字符串首地址指针作为开始，0 作为结尾，而是采用了以下两个结构体：</p>\n<p><strong>ANSI_STRING 字符串：</strong></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_STRING</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    USHORT Length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    USHORT MaximumLength<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    PCHAR Buffer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span>STRING<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong>UNICODE_STRING 字符串：</strong></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_UNICODE_STRING</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    USHORT Length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    USHORT MaxmumLength<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    PWSTR Buffer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span> UNICODE_STRING<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>下面的表格列出了常用的字符串函数：</p>\n<table>\n<thead>\n<tr>\n<th>功能</th>\n<th>ANSI_STRING 字符串</th>\n<th>UNICODE_STRING 字符串</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>创建</td>\n<td>RtlInitAnsiString</td>\n<td>RtlInitUnicodeString</td>\n</tr>\n<tr>\n<td>复制</td>\n<td>RtlCopyString</td>\n<td>RtlCopyUnicodeString</td>\n</tr>\n<tr>\n<td>比较</td>\n<td>RtlCompareString</td>\n<td>RtlCompareUnicoodeString</td>\n</tr>\n<tr>\n<td>转换</td>\n<td>RtlAnsiStringToUnicodeString</td>\n<td>RtlUnicodeStringToAnsiString</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"课后练习\"><a class=\"anchor\" href=\"#课后练习\">#</a> 课后练习</h1>\n<ol>\n<li>\n<p>申请一块内存，并在内存中存储 GDT、IDT 的所有数据。然后在 debugview 中显示出来，最后释放内存。</p>\n</li>\n<li>\n<p>编写代码，实现如下功能：</p>\n</li>\n</ol>\n<blockquote>\n<p>初始化一个字符串（）<br />\n拷贝一个字符串<br />\n比较两个字符串是否相等<br />\n ANSI_STRING 与 UNICODE_STRING 字符串相互转换</p>\n</blockquote>\n<h2 id=\"第1题\"><a class=\"anchor\" href=\"#第1题\">#</a> 第 1 题</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;ntddk.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;ntdef.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 卸载函数</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>VOID <span class=\"token function\">DriverUnload</span><span class=\"token punctuation\">(</span>PDRIVER_OBJECT pdriver<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"驱动程序停止运行了.\\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 入口函数，相当于 main</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>NTSTATUS <span class=\"token function\">DriverEntry</span><span class=\"token punctuation\">(</span>PDRIVER_OBJECT pdriver<span class=\"token punctuation\">,</span> PUNICODE_STRING pRegPath<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\tUCHAR GDT<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> IDT<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tULONG GDTAddr<span class=\"token punctuation\">,</span> IDTAddr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tUSHORT GDTLen<span class=\"token punctuation\">,</span> IDTLen<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tPULONG pbuffer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tULONG i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t__asm <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\tsgdt GDT<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\tsidt IDT<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\tGDTAddr <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>PULONG<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>GDT<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token comment\">//GDTAddr = *(PULONG)(GDT+2);</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\tGDTLen <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>PUSHORT<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>GDT<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\tIDTAddr <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>PULONG<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>IDT<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\tIDTLen <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>PUSHORT<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>IDT<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GDTAddr:%#010X,GDTLen:%#06X\\n\"</span><span class=\"token punctuation\">,</span> GDTAddr<span class=\"token punctuation\">,</span> GDTLen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"IDTAddr:%#010X,IDTLen:%#06X\\n\"</span><span class=\"token punctuation\">,</span> IDTAddr<span class=\"token punctuation\">,</span> IDTLen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\tpbuffer <span class=\"token operator\">=</span> <span class=\"token function\">ExAllocatePoolWithTag</span><span class=\"token punctuation\">(</span>NonPagedPool<span class=\"token punctuation\">,</span> GDTLen<span class=\"token punctuation\">,</span> <span class=\"token string\">\"MemGdt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pbuffer <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"申请内存失败1\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> STATUS_UNSUCCESSFUL<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t<span class=\"token function\">RtlMoveMemory</span><span class=\"token punctuation\">(</span>pbuffer<span class=\"token punctuation\">,</span> GDTAddr<span class=\"token punctuation\">,</span> GDTLen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"在新开辟的内存%p中打印GDT\\n\"</span><span class=\"token punctuation\">,</span> pbuffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> GDTLen<span class=\"token punctuation\">;</span> i<span class=\"token operator\">+=</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%08X %08X %08X %08X %08X\\n\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t\t\tpbuffer <span class=\"token operator\">+</span> i<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t\t\t<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>PULONG<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>pbuffer <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t\t\t<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>PULONG<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>pbuffer <span class=\"token operator\">+</span> i <span class=\"token operator\">+</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t\t\t<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>PULONG<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>pbuffer <span class=\"token operator\">+</span> i <span class=\"token operator\">+</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t\t\t<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>PULONG<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>pbuffer <span class=\"token operator\">+</span> i <span class=\"token operator\">+</span> <span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t<span class=\"token function\">ExFreePoolWithTag</span><span class=\"token punctuation\">(</span>pbuffer<span class=\"token punctuation\">,</span> <span class=\"token string\">\"MemGdt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\tpbuffer <span class=\"token operator\">=</span> <span class=\"token function\">ExAllocatePoolWithTag</span><span class=\"token punctuation\">(</span>NonPagedPool<span class=\"token punctuation\">,</span> IDTLen<span class=\"token punctuation\">,</span> <span class=\"token string\">\"MemIdt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pbuffer <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"申请内存失败2\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> STATUS_UNSUCCESSFUL<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t<span class=\"token function\">RtlMoveMemory</span><span class=\"token punctuation\">(</span>pbuffer<span class=\"token punctuation\">,</span> GDTAddr<span class=\"token punctuation\">,</span> GDTLen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre></pre></td></tr><tr><td data-num=\"68\"></td><td><pre></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"在新开辟的内存%p中打印IDT\\n\"</span><span class=\"token punctuation\">,</span> pbuffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> GDTLen<span class=\"token punctuation\">;</span> i <span class=\"token operator\">+=</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>\t\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%08X %08X %08X %08X %08X\\n\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>\t\t\tpbuffer <span class=\"token operator\">+</span> i<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\t\t\t<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>PULONG<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>pbuffer <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>\t\t\t<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>PULONG<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>pbuffer <span class=\"token operator\">+</span> i <span class=\"token operator\">+</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>\t\t\t<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>PULONG<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>pbuffer <span class=\"token operator\">+</span> i <span class=\"token operator\">+</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>\t\t\t<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>PULONG<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>pbuffer <span class=\"token operator\">+</span> i <span class=\"token operator\">+</span> <span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>\t<span class=\"token function\">ExFreePoolWithTag</span><span class=\"token punctuation\">(</span>pbuffer<span class=\"token punctuation\">,</span> <span class=\"token string\">\"MemGdt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>\tpdriver<span class=\"token operator\">-></span>DriverUnload <span class=\"token operator\">=</span> DriverUnload<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>\t<span class=\"token keyword\">return</span> STATUS_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"image002.png\" alt=\"\" /></p>\n<h2 id=\"第2题\"><a class=\"anchor\" href=\"#第2题\">#</a> 第 2 题</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;ntddk.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;ntdef.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>VOID <span class=\"token function\">DriverUnload</span><span class=\"token punctuation\">(</span>PDRIVER_OBJECT pdriver<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"驱动程序停止运行了\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>NTSTATUS <span class=\"token function\">DriverEntry</span><span class=\"token punctuation\">(</span>PDRIVER_OBJECT pdriver<span class=\"token punctuation\">,</span> PUNICODE_STRING pReg<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tANSI_STRING AnsiString1<span class=\"token punctuation\">,</span> AnsiString2<span class=\"token punctuation\">,</span> AnsiString3<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\tUNICODE_STRING UnicodeString1<span class=\"token punctuation\">,</span> UnicodeString2<span class=\"token punctuation\">,</span> UnicodeString3<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tCHAR Buf1<span class=\"token punctuation\">[</span><span class=\"token number\">256</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> Buf2<span class=\"token punctuation\">[</span><span class=\"token number\">256</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tWCHAR wcBuf1<span class=\"token punctuation\">[</span><span class=\"token number\">256</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> wcBuf2<span class=\"token punctuation\">[</span><span class=\"token number\">256</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token comment\">// 初始化字符串</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token function\">RtlInitAnsiString</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>AnsiString1<span class=\"token punctuation\">,</span> <span class=\"token string\">\"This is AnsiString1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token function\">RtlInitUnicodeString</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>UnicodeString1<span class=\"token punctuation\">,</span> L<span class=\"token string\">\"This is UnicodeString1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token function\">RtlInitEmptyAnsiString</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>AnsiString2<span class=\"token punctuation\">,</span> Buf1<span class=\"token punctuation\">,</span> <span class=\"token number\">256</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>CHAR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token function\">RtlInitEmptyAnsiString</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>AnsiString3<span class=\"token punctuation\">,</span> Buf2<span class=\"token punctuation\">,</span> <span class=\"token number\">256</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>CHAR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token function\">RtlInitEmptyUnicodeString</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>UnicodeString2<span class=\"token punctuation\">,</span> wcBuf1<span class=\"token punctuation\">,</span> <span class=\"token number\">256</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>WCHAR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token function\">RtlInitEmptyUnicodeString</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>UnicodeString3<span class=\"token punctuation\">,</span> wcBuf2<span class=\"token punctuation\">,</span> <span class=\"token number\">256</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>WCHAR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"打印AnsiString1。 Buffer:%s Length:%d MaximumLength:%d\\n\"</span><span class=\"token punctuation\">,</span> AnsiString1<span class=\"token punctuation\">.</span>Buffer<span class=\"token punctuation\">,</span> AnsiString1<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">,</span> AnsiString1<span class=\"token punctuation\">.</span>MaximumLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"打印UnicodeString1。 \\nBuffer:%ws \\nLength:%d \\nMaximumLength:%d\\n\"</span><span class=\"token punctuation\">,</span> UnicodeString1<span class=\"token punctuation\">.</span>Buffer<span class=\"token punctuation\">,</span> UnicodeString1<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">,</span> UnicodeString1<span class=\"token punctuation\">.</span>MaximumLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token comment\">// 拷贝字符串</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token function\">RtlCopyString</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>AnsiString2<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>AnsiString1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token function\">RtlCopyUnicodeString</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>UnicodeString2<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>UnicodeString1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"打印AnsiString2。Buffer:%s Length:%d MaximumLength:%d\\n\"</span><span class=\"token punctuation\">,</span> AnsiString2<span class=\"token punctuation\">.</span>Buffer<span class=\"token punctuation\">,</span> AnsiString2<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">,</span> AnsiString2<span class=\"token punctuation\">.</span>MaximumLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"打印UnicodeString2。\\nBuffer:%ws \\nLength：%d \\nMaximumLength:%d\\n\"</span><span class=\"token punctuation\">,</span> UnicodeString2<span class=\"token punctuation\">.</span>Buffer<span class=\"token punctuation\">,</span> UnicodeString2<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">,</span> UnicodeString2<span class=\"token punctuation\">.</span>MaximumLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token comment\">// 比较字符串</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">RtlCompareString</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>AnsiString1<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>AnsiString2<span class=\"token punctuation\">,</span> TRUE<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"AnsiString1与AnsiString2相等\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"AnsiString1与AnsiString2不相等\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">RtlCompareUnicodeString</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>UnicodeString1<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>UnicodeString2<span class=\"token punctuation\">,</span> TRUE<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"UnicodeString1与UnicodeString2相等\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"UnicodeString1与UnicodeString2不相等\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t<span class=\"token comment\">// 转化字符串</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t<span class=\"token function\">RtlAnsiStringToUnicodeString</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>UnicodeString3<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>AnsiString1<span class=\"token punctuation\">,</span> TRUE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t<span class=\"token function\">RtlUnicodeStringToAnsiString</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>AnsiString3<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span> UnicodeString1<span class=\"token punctuation\">,</span> TRUE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"打印AnsiString3。Buffer:%s Length:%d MaximumLength:%d\\n\"</span><span class=\"token punctuation\">,</span> AnsiString3<span class=\"token punctuation\">.</span>Buffer<span class=\"token punctuation\">,</span> AnsiString3<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">,</span> AnsiString3<span class=\"token punctuation\">.</span>MaximumLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"打印UnicodeString3。\\nBuffer:%ws \\nLength：%d \\nMaximumLength:%d\\n\"</span><span class=\"token punctuation\">,</span> UnicodeString3<span class=\"token punctuation\">.</span>Buffer<span class=\"token punctuation\">,</span> UnicodeString3<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">,</span> UnicodeString3<span class=\"token punctuation\">.</span>MaximumLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\tpdriver<span class=\"token operator\">-></span>DriverUnload <span class=\"token operator\">=</span> DriverUnload<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t<span class=\"token keyword\">return</span> STATUS_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"image003.png\" alt=\"\" /></p>\n",
            "tags": [
                "内核编程基础",
                "ANSI_STRING",
                "UNICODE_STRING",
                "内核内存"
            ]
        },
        {
            "id": "https://or0kit.github.io/Bin/Core/Drive-Development/%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91-%E8%B0%83%E8%AF%95%E9%A9%B1%E5%8A%A8%E7%A8%8B%E5%BA%8F/",
            "url": "https://or0kit.github.io/Bin/Core/Drive-Development/%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91-%E8%B0%83%E8%AF%95%E9%A9%B1%E5%8A%A8%E7%A8%8B%E5%BA%8F/",
            "title": "驱动开发-调试驱动程序",
            "date_published": "2021-09-03T14:52:10.000Z",
            "content_html": "<h1 id=\"代码\"><a class=\"anchor\" href=\"#代码\">#</a> 代码</h1>\n<p>在驱动代码中加入汇编指令  <code>int 3</code>  ，这样 windbg 就会接管中断异常，就可以进行调试了。但在 x64 的驱动中不能这样写。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;ntddk.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>VOID <span class=\"token function\">DriverUnload</span><span class=\"token punctuation\">(</span>PDRIVER_OBJECT pdriver<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是驱动，我卸载了\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>NTSTATUS <span class=\"token function\">DriverEntry</span><span class=\"token punctuation\">(</span>PDRIVER_OBJECT pdriver<span class=\"token punctuation\">,</span> PUNICODE_STRING pReg<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t__asm <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\tmov eax<span class=\"token punctuation\">,</span> eax<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\tmov ecx<span class=\"token punctuation\">,</span> ecx<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是驱动，我运行了\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tpdriver<span class=\"token operator\">-></span>DriverUnload <span class=\"token operator\">=</span> DriverUnload<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token keyword\">return</span> STATUS_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>多了一个源代码窗口。</p>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n",
            "tags": [
                "调试驱动程序"
            ]
        },
        {
            "id": "https://or0kit.github.io/Bin/Core/Drive-Development/%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91-%E7%AC%AC%E4%B8%80%E4%B8%AA%E9%A9%B1%E5%8A%A8%E7%A8%8B%E5%BA%8F/",
            "url": "https://or0kit.github.io/Bin/Core/Drive-Development/%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91-%E7%AC%AC%E4%B8%80%E4%B8%AA%E9%A9%B1%E5%8A%A8%E7%A8%8B%E5%BA%8F/",
            "title": "驱动开发-第一个驱动程序",
            "date_published": "2021-09-03T14:52:00.000Z",
            "content_html": "<h1 id=\"配置vs2019wdk10\"><a class=\"anchor\" href=\"#配置vs2019wdk10\">#</a> 配置 VS2019+WDK10</h1>\n<p>参见：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ4OTk1NjExL2FydGljbGUvZGV0YWlscy8xMTIxOTU0OTc=\">https://blog.csdn.net/m0_48995611/article/details/112195497</span></p>\n<h1 id=\"编写代码\"><a class=\"anchor\" href=\"#编写代码\">#</a> 编写代码</h1>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;ntddk.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>VOID <span class=\"token function\">DriverUnload</span><span class=\"token punctuation\">(</span>PDRIVER_OBJECT pdriver<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是驱动，我卸载了\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>NTSTATUS <span class=\"token function\">DriverEntry</span><span class=\"token punctuation\">(</span>PDRIVER_OBJECT pdriver<span class=\"token punctuation\">,</span> PUNICODE_STRING pReg<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是驱动，我运行了\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tpdriver<span class=\"token operator\">-></span>DriverUnload <span class=\"token operator\">=</span> DriverUnload<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">return</span> STATUS_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>注意用 release 版。<br />\nDbgView 设置</p>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<p>结果：</p>\n<p><img data-src=\"image002.png\" alt=\"\" /></p>\n",
            "tags": [
                "配置VS2019+WDK10",
                "第一个驱动程序"
            ]
        }
    ]
}