{
    "version": "https://jsonfeed.org/version/1",
    "title": "Or0kit • All posts by \"内核学习\" category",
    "description": "临渊羡鱼，不如退而结网",
    "home_page_url": "https://Or0kit.github.io",
    "items": [
        {
            "id": "https://or0kit.github.io/Bin/Core/WindowsXp/MessageMechanism/%E6%B6%88%E6%81%AF%E6%9C%BA%E5%88%B6-05%E5%86%85%E6%A0%B8%E5%9B%9E%E8%B0%83%E6%9C%BA%E5%88%B6/",
            "url": "https://or0kit.github.io/Bin/Core/WindowsXp/MessageMechanism/%E6%B6%88%E6%81%AF%E6%9C%BA%E5%88%B6-05%E5%86%85%E6%A0%B8%E5%9B%9E%E8%B0%83%E6%9C%BA%E5%88%B6/",
            "title": "消息机制-05内核回调机制",
            "date_published": "2022-04-25T07:17:22.000Z",
            "content_html": "<h1 id=\"pass\"><a class=\"anchor\" href=\"#pass\">#</a> Pass</h1>\n<p>过段事件再总结</p>\n",
            "tags": []
        },
        {
            "id": "https://or0kit.github.io/Bin/Core/WindowsXp/MessageMechanism/%E6%B6%88%E6%81%AF%E6%9C%BA%E5%88%B6-04%E6%B6%88%E6%81%AF%E7%9A%84%E5%88%86%E5%8F%91/",
            "url": "https://or0kit.github.io/Bin/Core/WindowsXp/MessageMechanism/%E6%B6%88%E6%81%AF%E6%9C%BA%E5%88%B6-04%E6%B6%88%E6%81%AF%E7%9A%84%E5%88%86%E5%8F%91/",
            "title": "消息机制-04消息的分发",
            "date_published": "2022-04-22T07:17:15.000Z",
            "content_html": "<h1 id=\"pass\"><a class=\"anchor\" href=\"#pass\">#</a> Pass</h1>\n<p>过段事件再总结</p>\n",
            "tags": []
        },
        {
            "id": "https://or0kit.github.io/Bin/Core/WindowsXp/MessageMechanism/%E6%B6%88%E6%81%AF%E6%9C%BA%E5%88%B6-03%E6%B6%88%E6%81%AF%E7%9A%84%E6%8E%A5%E6%94%B6/",
            "url": "https://or0kit.github.io/Bin/Core/WindowsXp/MessageMechanism/%E6%B6%88%E6%81%AF%E6%9C%BA%E5%88%B6-03%E6%B6%88%E6%81%AF%E7%9A%84%E6%8E%A5%E6%94%B6/",
            "title": "消息机制-03消息的接收",
            "date_published": "2022-04-22T07:17:12.000Z",
            "content_html": "<h1 id=\"楔子\"><a class=\"anchor\" href=\"#楔子\">#</a> 楔子</h1>\n<p>在前面我们分析了：</p>\n<p>一个 GUI 线程有一个消息队列</p>\n<p>普通线程\tGUI 线程\t <code>THREAD.W32THREAD</code> \t <code>THREADINFO</code>         消息队列</p>\n<p>一个线程可以有多个窗口，所有窗口共享一个消息队列</p>\n<p><code>WND</code>      // 窗口结构<br />\n <code>PTHREADINFO pti</code>                // 所属线程<br />\n <code>WNDPROC_PWND  lpfnWndProc</code> ;  \t// 窗口过程 (窗口回调函数)</p>\n<h1 id=\"窗口程序的创建\"><a class=\"anchor\" href=\"#窗口程序的创建\">#</a> 窗口程序的创建</h1>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;Windows.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">WIN32_LEAN_AND_MEAN</span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 声明回调函数</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>LRESULT CALLBACK <span class=\"token function\">WindowProc</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    HWND hwnd<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    UINT uMsg<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    WPARAM wParam<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    LPARAM lParam</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">int</span> WINAPI <span class=\"token function\">WinMain</span><span class=\"token punctuation\">(</span>HINSTANCE hInstance<span class=\"token punctuation\">,</span> HINSTANCE hPrevInstance<span class=\"token punctuation\">,</span> LPSTR lpCmdLine<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> nCmdShow<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">// 保存 GetLastError 的返回值</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    TCHAR szOutBuff<span class=\"token punctuation\">[</span><span class=\"token number\">0x80</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\">// 创建窗口类</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token comment\">// 初始化</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    WNDCLASSEX mywnd        <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    mywnd<span class=\"token punctuation\">.</span>cbSize            <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>WNDCLASSEX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    mywnd<span class=\"token punctuation\">.</span>style             <span class=\"token operator\">=</span> CS_HREDRAW <span class=\"token operator\">|</span> CS_VREDRAW<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token comment\">// 窗口类名</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    TCHAR wndname<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>         <span class=\"token operator\">=</span> <span class=\"token function\">TEXT</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"第一个窗口\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    mywnd<span class=\"token punctuation\">.</span>lpszClassName     <span class=\"token operator\">=</span> wndname<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token comment\">// 回调函数</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    mywnd<span class=\"token punctuation\">.</span>lpfnWndProc       <span class=\"token operator\">=</span> WindowProc<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token comment\">// 标志该窗口所在实例</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    mywnd<span class=\"token punctuation\">.</span>hInstance         <span class=\"token operator\">=</span> hInstance<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token comment\">// 设置画刷</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    mywnd<span class=\"token punctuation\">.</span>hbrBackground     <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>HBRUSH<span class=\"token punctuation\">)</span><span class=\"token function\">GetStockObject</span><span class=\"token punctuation\">(</span>WHITE_BRUSH<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token comment\">// 注册窗口类</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token function\">RegisterClassEx</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>mywnd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token comment\">// 创建窗口</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    HWND hwnd <span class=\"token operator\">=</span> <span class=\"token function\">CreateWindow</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        wndname<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token function\">TEXT</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"My First Window!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        WS_OVERLAPPEDWINDOW<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token number\">500</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token number\">500</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        hInstance<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token constant\">NULL</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token comment\">// 判断是否创建成功</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>hwnd<span class=\"token operator\">==</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        TCHAR str<span class=\"token punctuation\">[</span><span class=\"token number\">30</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token constant\">NULL</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token function\">wsprintf</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span> L<span class=\"token string\">\"%s\"</span><span class=\"token punctuation\">,</span> L<span class=\"token string\">\"CreateWindow Error!!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        <span class=\"token function\">OutputDebugString</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token comment\">// 显示窗口</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token function\">ShowWindow</span><span class=\"token punctuation\">(</span>hwnd<span class=\"token punctuation\">,</span> nCmdShow<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    <span class=\"token function\">UpdateWindow</span><span class=\"token punctuation\">(</span>hwnd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token comment\">// 消息循环</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    MSG msg<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    BOOL bRet<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>  <span class=\"token comment\">// 我们的窗口回调.</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>bRet <span class=\"token operator\">=</span> <span class=\"token function\">GetMessage</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>msg<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bRet <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>            <span class=\"token comment\">// handle the error and possibly exit</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>            <span class=\"token function\">wsprintf</span><span class=\"token punctuation\">(</span>szOutBuff<span class=\"token punctuation\">,</span> <span class=\"token function\">TEXT</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error: %d\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">GetLastError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>            <span class=\"token function\">OutputDebugString</span><span class=\"token punctuation\">(</span>szOutBuff<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>        <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>            <span class=\"token function\">TranslateMessage</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// 键盘消息转换为小写.</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>            <span class=\"token function\">DispatchMessage</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// 分发消息。将我们的消息传递给我们的回调函数处理 重要函数。此消息会将 Windows 的消息。发送给我们 定义窗口类的时候给的回调函数。这样我们就可以根据消息执行我们代码了.</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre><span class=\"token comment\">//   我们的窗口回调</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>LRESULT CALLBACK <span class=\"token function\">WindowProc</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>    HWND hWnd<span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"93\"></td><td><pre>    UINT message<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>    WPARAM wParam<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>    LPARAM lParam</pre></td></tr><tr><td data-num=\"96\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>    <span class=\"token keyword\">case</span> WM_CREATE<span class=\"token operator\">:</span>                             </pre></td></tr><tr><td data-num=\"101\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"105\"></td><td><pre>    <span class=\"token comment\">// 当窗口开始绘制的时候</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>    <span class=\"token keyword\">case</span> WM_PAINT<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>        PAINTSTRUCT ps<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>        RECT rect<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>        HDC hdc <span class=\"token operator\">=</span> <span class=\"token function\">BeginPaint</span><span class=\"token punctuation\">(</span>hWnd<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>ps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>        <span class=\"token function\">GetClientRect</span><span class=\"token punctuation\">(</span>hWnd<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>rect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>        <span class=\"token function\">DrawText</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>            hdc<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>            <span class=\"token function\">TEXT</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello window!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>            <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"117\"></td><td><pre>            <span class=\"token operator\">&amp;</span>rect<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>            DT_SINGLELINE <span class=\"token operator\">|</span> DT_CENTER <span class=\"token operator\">|</span> DT_VCENTER</pre></td></tr><tr><td data-num=\"119\"></td><td><pre>        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>        <span class=\"token function\">EndPaint</span><span class=\"token punctuation\">(</span>hWnd<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>ps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>    <span class=\"token comment\">// 打印</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>    <span class=\"token keyword\">case</span> WM_CHAR<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>        TCHAR szOutBuffer<span class=\"token punctuation\">[</span><span class=\"token number\">0x10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>        <span class=\"token function\">wsprintf</span><span class=\"token punctuation\">(</span>szOutBuffer<span class=\"token punctuation\">,</span> L<span class=\"token string\">\"%c\\n\"</span><span class=\"token punctuation\">,</span> wParam<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>        <span class=\"token function\">OutputDebugString</span><span class=\"token punctuation\">(</span>szOutBuffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"133\"></td><td><pre>    <span class=\"token keyword\">case</span> WM_DESTROY<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>        <span class=\"token function\">PostQuitMessage</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token function\">DefWindowProc</span><span class=\"token punctuation\">(</span>hWnd<span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">,</span> wParam<span class=\"token punctuation\">,</span> lParam<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"image001.png\" alt=\"\" /></p>\n<p>我们要创建一个简单的窗口就要有这么多的步骤，为什么要这么写呢？</p>\n<p><img data-src=\"image002.png\" alt=\"\" /></p>\n<p>我们在 3 环写主要是向 0 环传递这些信心，以便在 0 环创建一个窗口的结构体。</p>\n<p>我们看到的只是一个窗口，看不到的是在内核中那些结构体，因为调用了 GUI 函数，此时我们也是一个 GUI 线程了，有消息队列了，接着向后面看，有一个循环不停的取往消息队列中取消息，然后加工、分发消息。</p>\n<p>很多人只知道代码要这样写，并不清楚为什么这样写，就是不了解在 0 环做了什么事情，消息机制绝大部分的实现就是在 0 环做的，如果不了解消息机制在 0 环做了什么事情，就不会知道 3 环的代码为什么要这样写。</p>\n<p>接下来我们了解消息循环。</p>\n<h1 id=\"消息循环\"><a class=\"anchor\" href=\"#消息循环\">#</a> 消息循环</h1>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>MSG msg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token function\">GetMessage</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>msg<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\t<span class=\"token comment\">// 从消息队列中取出消息</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token function\">TranslateMessage</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 加工消息</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token function\">DispatchMessage</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 分发消息</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>使用 SendMessage 与 PostMessage 发送的消息位于同一组队列中吗？</p>\n<p>不同类型的消息被置于不同队列。(这如何在 Windows 中实现的？)</p>\n<h2 id=\"消息的接收\"><a class=\"anchor\" href=\"#消息的接收\">#</a> 消息的接收</h2>\n<p><code>GetMessage</code></p>\n<p>描述：从消息队列中取出消息</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>BOOL WINAPI <span class=\"token function\">GetMessage</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tLPMSG lpMsg<span class=\"token punctuation\">,</span>\t<span class=\"token comment\">// 返回从队列中取出的消息</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tHWND hWnd<span class=\"token punctuation\">,</span>\t\t<span class=\"token comment\">// 过滤条件一：窗口句柄</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tUINT wMsgFilterMin<span class=\"token punctuation\">,</span>\t<span class=\"token comment\">// 过滤条件二：最小值</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tUINT wMsgFilterMax\t<span class=\"token comment\">// 过滤条件三：最大值</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>主要功能：循环判断是否存在属于该窗口的消息，若存在，则将消息存储到 MSG 指定的结构中，并将消息从列表中删除。</p>\n<p><code>GetMessage --&gt; NtUserGetMessage --&gt; xxxGetMessage（这是一个宏，也就是 xxxInternalGetMessage 函数） --&gt; xxxRealInternalGetMessage</code></p>\n<p>注意：事实上，GetMessage 还做了一件很重要的事情，即在接收消息时，将 SentMessagesListHead 中的消息进行处理</p>\n<p>有关消息发送，可以通过  <code>SendMessage</code>  或者  <code>PostMessage</code>  进行发送，它们有所不同，前者是同步的，后者是异步的，我们可以做一个实验验证:</p>\n",
            "tags": [
                "窗口程序的创建",
                "消息循环"
            ]
        },
        {
            "id": "https://or0kit.github.io/Bin/Core/WindowsXp/MessageMechanism/%E6%B6%88%E6%81%AF%E6%9C%BA%E5%88%B6-02%E7%AA%97%E5%8F%A3%E4%B8%8E%E7%BA%BF%E7%A8%8B/",
            "url": "https://or0kit.github.io/Bin/Core/WindowsXp/MessageMechanism/%E6%B6%88%E6%81%AF%E6%9C%BA%E5%88%B6-02%E7%AA%97%E5%8F%A3%E4%B8%8E%E7%BA%BF%E7%A8%8B/",
            "title": "消息机制-02窗口与线程",
            "date_published": "2022-04-21T07:17:09.000Z",
            "content_html": "<h1 id=\"楔子\"><a class=\"anchor\" href=\"#楔子\">#</a> 楔子</h1>\n<p>在上一节中我们弄清楚了消息队列与线程的关系：</p>\n<p><strong>一个 GUI 线程对应着一个消息队列</strong></p>\n<p>本节要解决的问题：</p>\n<p>1、消息从哪里来？</p>\n<p>2、消息到哪里去？</p>\n<p>3、谁来做这些事情？</p>\n<h1 id=\"消息从哪里来\"><a class=\"anchor\" href=\"#消息从哪里来\">#</a> 消息从哪里来？</h1>\n<p>首先我们编写一个简单的窗口程序：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;windows.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>LRESULT CALLBACK <span class=\"token function\">WindowProc</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tIN HWND hwnd<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tIN UINT uMsg<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tIN WPARAM wParam<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tIN LPARAM lParam</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token function\">DefWindowProc</span><span class=\"token punctuation\">(</span>hwnd<span class=\"token punctuation\">,</span> uMsg<span class=\"token punctuation\">,</span> wParam<span class=\"token punctuation\">,</span> lParam<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">int</span> APIENTRY <span class=\"token function\">WinMain</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tHINSTANCE hInstance<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tHINSTANCE hPrevInstance<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tLPSTR lpCmdLine<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token keyword\">int</span> nShowCmd</pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token comment\">// 窗口的类名</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\tTCHAR className<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"My First Window\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token comment\">// 创建一个自己的窗口</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\tWNDCLASS wndclass <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\twndclass<span class=\"token punctuation\">.</span>hbrBackground <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>HBRUSH<span class=\"token punctuation\">)</span>COLOR_MENU<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\twndclass<span class=\"token punctuation\">.</span>lpfnWndProc <span class=\"token operator\">=</span> WindowProc<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\twndclass<span class=\"token punctuation\">.</span>lpszClassName <span class=\"token operator\">=</span> className<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\twndclass<span class=\"token punctuation\">.</span>hInstance <span class=\"token operator\">=</span> hInstance<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token comment\">// 注册</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token function\">RegisterClass</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>wndclass<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token comment\">// 创建窗口</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\tHWND hwnd <span class=\"token operator\">=</span> <span class=\"token function\">CreateWindow</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\tclassName<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\t<span class=\"token function\">TEXT</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我的第一个窗口\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\tWS_OVERLAPPEDWINDOW<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\t<span class=\"token number\">10</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\t<span class=\"token number\">10</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\t<span class=\"token number\">600</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\t<span class=\"token number\">300</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\t<span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\t<span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\thInstance<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\t<span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>hwnd <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t<span class=\"token comment\">// 显示窗口</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t<span class=\"token function\">ShowWindow</span><span class=\"token punctuation\">(</span>hwnd<span class=\"token punctuation\">,</span> SW_SHOW<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t<span class=\"token comment\">// 消息循环</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\tMSG msg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token function\">GetMessage</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>msg<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t\t<span class=\"token function\">TranslateMessage</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t\t<span class=\"token function\">DispatchMessage</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>然后用 VC6 自带的工具 Spy++ 捕捉消息。</p>\n<p>按以下步骤捕获消息：</p>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<p><img data-src=\"image002.png\" alt=\"\" /></p>\n<p>如图我们动一下鼠标键盘就会 产生许多消息。</p>\n<p><img data-src=\"image003.png\" alt=\"\" /></p>\n<p>接下来用代码演示，程序发送消息：</p>\n<p>一个进程执行以下代码：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;windows.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>LRESULT CALLBACK <span class=\"token function\">WindowProc</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tIN HWND hwnd<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tIN UINT uMsg<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tIN WPARAM wParam<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tIN LPARAM lParam</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>uMsg<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">case</span> <span class=\"token number\">0x401</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token function\">MessageBoxA</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"接收到消息\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"新消息\"</span><span class=\"token punctuation\">,</span> MB_OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token function\">DefWindowProc</span><span class=\"token punctuation\">(</span>hwnd<span class=\"token punctuation\">,</span> uMsg<span class=\"token punctuation\">,</span> wParam<span class=\"token punctuation\">,</span> lParam<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">int</span> APIENTRY <span class=\"token function\">WinMain</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\tHINSTANCE hInstance<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\tHINSTANCE hPrevInstance<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\tLPSTR lpCmdLine<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token keyword\">int</span> nShowCmd</pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token comment\">// 窗口的类名</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\tTCHAR className<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"My First Window\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token comment\">// 创建一个自己的窗口</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\tWNDCLASS wndclass <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\twndclass<span class=\"token punctuation\">.</span>hbrBackground <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>HBRUSH<span class=\"token punctuation\">)</span>COLOR_MENU<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\twndclass<span class=\"token punctuation\">.</span>lpfnWndProc <span class=\"token operator\">=</span> WindowProc<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\twndclass<span class=\"token punctuation\">.</span>lpszClassName <span class=\"token operator\">=</span> className<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\twndclass<span class=\"token punctuation\">.</span>hInstance <span class=\"token operator\">=</span> hInstance<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token comment\">// 注册</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t<span class=\"token function\">RegisterClass</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>wndclass<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t<span class=\"token comment\">// 创建窗口</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\tHWND hwnd <span class=\"token operator\">=</span> <span class=\"token function\">CreateWindow</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\tclassName<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\t<span class=\"token function\">TEXT</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我的第一个窗口\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\tWS_OVERLAPPEDWINDOW<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\t<span class=\"token number\">10</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\t<span class=\"token number\">10</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t\t<span class=\"token number\">600</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t\t<span class=\"token number\">300</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t\t<span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t\t<span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t\thInstance<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t\t<span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>hwnd <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t<span class=\"token comment\">// 显示窗口</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t<span class=\"token function\">ShowWindow</span><span class=\"token punctuation\">(</span>hwnd<span class=\"token punctuation\">,</span> SW_SHOW<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t<span class=\"token comment\">// 消息循环</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\tMSG msg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token function\">GetMessage</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>msg<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t\t<span class=\"token function\">TranslateMessage</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t\t<span class=\"token function\">DispatchMessage</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>另一个进程执行以下代码：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;windows.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tHWND hwnd <span class=\"token operator\">=</span> <span class=\"token function\">FindWindow</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"My First Window\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"我的第一个窗口\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token function\">SendMessage</span><span class=\"token punctuation\">(</span>hwnd<span class=\"token punctuation\">,</span> <span class=\"token number\">0x401</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>结果：</p>\n<p><img data-src=\"image004.png\" alt=\"\" /></p>\n<h1 id=\"消息到哪里去了\"><a class=\"anchor\" href=\"#消息到哪里去了\">#</a> 消息到哪里去了</h1>\n<p><strong>最终去这个消息所对应的那个线程的消息队列。</strong></p>\n<ol>\n<li>当我们使用鼠标某个窗口进行点击与滑动时，都会产生一个消息，消息会进入当前窗口对应线程的消息队列中</li>\n<li>当我们编写程序时，并不会去特地启动两个线程去监控鼠标和键盘，w32k.sys 负责了这个事情</li>\n</ol>\n<p><img data-src=\"image005.png\" alt=\"\" /></p>\n<p>以下内容参考自 ReactOS 源码：</p>\n<blockquote>\n<p>当初始化  <code>win32k.sys</code>  这个模块时，会调用一个叫做  <code>InitInputImpl</code>  的函数<br />\n这个函数会启动两个线程，分别用来监控鼠标和键盘，这两个线程都是 0 环的线程<br />\n平时我们的电脑遭遇 “死机” 时，常常是屏幕动不了，鼠标还能动，这正式由于鼠标是有一个独立的线程在监控它的行动</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//FROM ReactOS v3.12</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">InitInputImpl</span><span class=\"token punctuation\">(</span>VOID<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   Status <span class=\"token operator\">=</span> <span class=\"token function\">PsCreateSystemThread</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>RawInputThreadHandle<span class=\"token punctuation\">,</span>\t\t<span class=\"token comment\">// 监控鼠标</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                                 THREAD_ALL_ACCESS<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                                 <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                                 <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                                 <span class=\"token operator\">&amp;</span>RawInputThreadId<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                                 RawInputThreadMain<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                                 <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">NT_SUCCESS</span><span class=\"token punctuation\">(</span>Status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token function\">DPRINT1</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Win32K: Failed to create raw thread.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   Status <span class=\"token operator\">=</span> <span class=\"token function\">PsCreateSystemThread</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>KeyboardThreadHandle<span class=\"token punctuation\">,</span>\t\t<span class=\"token comment\">// 监控键盘</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                                 THREAD_ALL_ACCESS<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                                 <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                                 <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                                 <span class=\"token operator\">&amp;</span>KeyboardThreadId<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                                 KeyboardThreadMain<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                                 <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">NT_SUCCESS</span><span class=\"token punctuation\">(</span>Status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>   <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>      <span class=\"token function\">DPRINT1</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Win32K: Failed to create keyboard thread.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>   <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>我在 xp 源码中并未找到。。</p>\n<h1 id=\"如何通过窗口找到消息队列\"><a class=\"anchor\" href=\"#如何通过窗口找到消息队列\">#</a> 如何通过窗口找到消息队列</h1>\n<p>如下图： 我们发现有十几个窗口，当我们在一个窗口上点击的时候，负责鼠标消息的这个线程是如何知道我们点击的是哪一个窗口呢？<br />\n换句话说就是，它是如何通过这个窗口找到对应的线程的呢？</p>\n<p><img data-src=\"image006.png\" alt=\"\" /></p>\n<p>我们想解决这些问题，首先要明白窗口是谁画的，窗口在哪里？</p>\n<h2 id=\"窗口是谁画的\"><a class=\"anchor\" href=\"#窗口是谁画的\">#</a> 窗口是谁画的？</h2>\n<p>分析：  <code>CreateWindow</code></p>\n<p>当调用 CreateWindow 时，该函数实际上是一个宏，其 CreateWindowA 实际对应 CreateWindowExA 函数，CreateWindowW 对应 CreateWindowExW 函数。</p>\n<p>在 VS 中查看：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">CreateWindowA</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>lpClassName<span class=\"token punctuation\">,</span> lpWindowName<span class=\"token punctuation\">,</span> dwStyle<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span></span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token expression\">nWidth<span class=\"token punctuation\">,</span> nHeight<span class=\"token punctuation\">,</span> hWndParent<span class=\"token punctuation\">,</span> hMenu<span class=\"token punctuation\">,</span> hInstance<span class=\"token punctuation\">,</span> lpParam<span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token expression\"><span class=\"token function\">CreateWindowExA</span><span class=\"token punctuation\">(</span><span class=\"token number\">0L</span><span class=\"token punctuation\">,</span> lpClassName<span class=\"token punctuation\">,</span> lpWindowName<span class=\"token punctuation\">,</span> dwStyle<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span></span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token expression\">nWidth<span class=\"token punctuation\">,</span> nHeight<span class=\"token punctuation\">,</span> hWndParent<span class=\"token punctuation\">,</span> hMenu<span class=\"token punctuation\">,</span> hInstance<span class=\"token punctuation\">,</span> lpParam<span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">CreateWindowW</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>lpClassName<span class=\"token punctuation\">,</span> lpWindowName<span class=\"token punctuation\">,</span> dwStyle<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span></span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token expression\">nWidth<span class=\"token punctuation\">,</span> nHeight<span class=\"token punctuation\">,</span> hWndParent<span class=\"token punctuation\">,</span> hMenu<span class=\"token punctuation\">,</span> hInstance<span class=\"token punctuation\">,</span> lpParam<span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token expression\"><span class=\"token function\">CreateWindowExW</span><span class=\"token punctuation\">(</span><span class=\"token number\">0L</span><span class=\"token punctuation\">,</span> lpClassName<span class=\"token punctuation\">,</span> lpWindowName<span class=\"token punctuation\">,</span> dwStyle<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span></span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token expression\">nWidth<span class=\"token punctuation\">,</span> nHeight<span class=\"token punctuation\">,</span> hWndParent<span class=\"token punctuation\">,</span> hMenu<span class=\"token punctuation\">,</span> hInstance<span class=\"token punctuation\">,</span> lpParam<span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">UNICODE</span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">CreateWindow</span>  <span class=\"token expression\">CreateWindowW</span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">else</span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">CreateWindow</span>  <span class=\"token expression\">CreateWindowA</span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span> <span class=\"token comment\">// !UNICODE</span></span></pre></td></tr></table></figure><p>在 IDA 中查看:</p>\n<p>发现不管是  <code>CreateWindowExA</code>  还是  <code>CreateWindowExW</code>  都是直接调用了  <code>__CreateWindowEx</code></p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>text:77D2E4A9 ; HWND __stdcall CreateWindowExA(DWORD dwExStyle, LPCSTR lpClassName, LPCSTR lpWindowName, DWORD dwStyle, int X, int Y, int nWidth, int nHeight, HWND hWndParent, HMENU hMenu, HINSTANCE hInstance, LPVOID lpParam)</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>.text:77D2E4A9                 public _CreateWindowExA@48</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>.text:77D2E4A9 _CreateWindowExA@48 proc near           ; CODE XREF: DefMDIChildProcWorker(x,x,x,x,x)-3EA↓p</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>.text:77D2E4A9                                         ; CreateMDIWindowA(x,x,x,x,x,x,x,x,x,x)+27↓p ...</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>.text:77D2E4A9</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>.text:77D2E4A9 dwExStyle       &#x3D; dword ptr  8</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>.text:77D2E4A9 lpClassName     &#x3D; dword ptr  0Ch</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>.text:77D2E4A9 lpWindowName    &#x3D; dword ptr  10h</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>.text:77D2E4A9 dwStyle         &#x3D; dword ptr  14h</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>.text:77D2E4A9 X               &#x3D; dword ptr  18h</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>.text:77D2E4A9 Y               &#x3D; dword ptr  1Ch</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>.text:77D2E4A9 nWidth          &#x3D; dword ptr  20h</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>.text:77D2E4A9 nHeight         &#x3D; dword ptr  24h</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>.text:77D2E4A9 hWndParent      &#x3D; dword ptr  28h</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>.text:77D2E4A9 hMenu           &#x3D; dword ptr  2Ch</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>.text:77D2E4A9 hInstance       &#x3D; dword ptr  30h</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>.text:77D2E4A9 lpParam         &#x3D; dword ptr  34h</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>.text:77D2E4A9</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>.text:77D2E4A9                 mov     edi, edi</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>.text:77D2E4AB                 push    ebp</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>.text:77D2E4AC                 mov     ebp, esp</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>.text:77D2E4AE                 push    40000001h       ; int</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>.text:77D2E4B3                 push    [ebp+lpParam]   ; int</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>.text:77D2E4B6                 push    [ebp+hInstance] ; int</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>.text:77D2E4B9                 push    [ebp+hMenu]     ; int</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>.text:77D2E4BC                 push    [ebp+hWndParent] ; int</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>.text:77D2E4BF                 push    [ebp+nHeight]   ; int</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>.text:77D2E4C2                 push    [ebp+nWidth]    ; int</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>.text:77D2E4C5                 push    [ebp+Y]         ; int</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>.text:77D2E4C8                 push    [ebp+X]         ; int</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>.text:77D2E4CB                 push    [ebp+dwStyle]   ; int</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>.text:77D2E4CE                 push    [ebp+lpWindowName] ; String</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>.text:77D2E4D1                 push    [ebp+lpClassName] ; MultiByteString</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>.text:77D2E4D4                 push    [ebp+dwExStyle] ; char</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>.text:77D2E4D7                 call    __CreateWindowEx@52 ; _CreateWindowEx(x,x,x,x,x,x,x,x,x,x,x,x,x)</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>.text:77D2E4DC                 pop     ebp</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>.text:77D2E4DD                 retn    30h ; &#39;0&#39;</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>.text:77D2E4DD _CreateWindowExA@48 endp</pre></td></tr></table></figure><figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>.text:77D2D0A3 ; HWND __stdcall CreateWindowExW(DWORD dwExStyle, LPCWSTR lpClassName, LPCWSTR lpWindowName, DWORD dwStyle, int X, int Y, int nWidth, int nHeight, HWND hWndParent, HMENU hMenu, HINSTANCE hInstance, LPVOID lpParam)</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>.text:77D2D0A3                 public _CreateWindowExW@48</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>.text:77D2D0A3 _CreateWindowExW@48 proc near           ; CODE XREF: DefMDIChildProcWorker(x,x,x,x,x):loc_77D30688↓p</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>.text:77D2D0A3                                         ; CreateMDIWindowW(x,x,x,x,x,x,x,x,x,x)+27↓p ...</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>.text:77D2D0A3</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>.text:77D2D0A3 dwExStyle       &#x3D; dword ptr  8</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>.text:77D2D0A3 lpClassName     &#x3D; dword ptr  0Ch</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>.text:77D2D0A3 lpWindowName    &#x3D; dword ptr  10h</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>.text:77D2D0A3 dwStyle         &#x3D; dword ptr  14h</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>.text:77D2D0A3 X               &#x3D; dword ptr  18h</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>.text:77D2D0A3 Y               &#x3D; dword ptr  1Ch</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>.text:77D2D0A3 nWidth          &#x3D; dword ptr  20h</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>.text:77D2D0A3 nHeight         &#x3D; dword ptr  24h</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>.text:77D2D0A3 hWndParent      &#x3D; dword ptr  28h</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>.text:77D2D0A3 hMenu           &#x3D; dword ptr  2Ch</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>.text:77D2D0A3 hInstance       &#x3D; dword ptr  30h</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>.text:77D2D0A3 lpParam         &#x3D; dword ptr  34h</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>.text:77D2D0A3</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>.text:77D2D0A3                 mov     edi, edi</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>.text:77D2D0A5                 push    ebp</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>.text:77D2D0A6                 mov     ebp, esp</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>.text:77D2D0A8                 push    40000000h       ; int</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>.text:77D2D0AD                 push    [ebp+lpParam]   ; int</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>.text:77D2D0B0                 push    [ebp+hInstance] ; int</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>.text:77D2D0B3                 push    [ebp+hMenu]     ; int</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>.text:77D2D0B6                 push    [ebp+hWndParent] ; int</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>.text:77D2D0B9                 push    [ebp+nHeight]   ; int</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>.text:77D2D0BC                 push    [ebp+nWidth]    ; int</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>.text:77D2D0BF                 push    [ebp+Y]         ; int</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>.text:77D2D0C2                 push    [ebp+X]         ; int</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>.text:77D2D0C5                 push    [ebp+dwStyle]   ; int</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>.text:77D2D0C8                 push    [ebp+lpWindowName] ; String</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>.text:77D2D0CB                 push    [ebp+lpClassName] ; MultiByteString</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>.text:77D2D0CE                 push    [ebp+dwExStyle] ; char</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>.text:77D2D0D1                 call    __CreateWindowEx@52 ; _CreateWindowEx(x,x,x,x,x,x,x,x,x,x,x,x,x)</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>.text:77D2D0D6                 pop     ebp</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>.text:77D2D0D7                 retn    30h ; &#39;0&#39;</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>.text:77D2D0D7 _CreateWindowExW@48 endp</pre></td></tr></table></figure><p>查看  <code>__CreateWindowEx</code> :</p>\n<p><img data-src=\"image007.png\" alt=\"\" /></p>\n<p>发现其主要调用了  <code>VerNtUserCreateWindowEx</code></p>\n<p>接着查看：</p>\n<p><img data-src=\"image008.png\" alt=\"\" /></p>\n<p>发现其主要调用了  <code>NtUserCreateWindowEx</code></p>\n<p>查看  <code>NtUserCreateWindowEx</code>  发现其通过系统调用进 0 环了</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>.text:77D2E37D ; __stdcall NtUserCreateWindowEx(x, x, x, x, x, x, x, x, x, x, x, x, x, x, x)</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>.text:77D2E37D _NtUserCreateWindowEx@60 proc near      ; CODE XREF: VerNtUserCreateWindowEx(x,x,x,x,x,x,x,x,x,x,x,x,x)+158↑p</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>.text:77D2E37D                 mov     eax, 1157h</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>.text:77D2E382                 mov     edx, 7FFE0300h</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>.text:77D2E387                 call    dword ptr [edx]</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>.text:77D2E389                 retn    3Ch ; &#39;&lt;&#39;</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>.text:77D2E389 _NtUserCreateWindowEx@60 endp</pre></td></tr></table></figure><p>所以窗口是 0 环画的。</p>\n<h2 id=\"窗口对象\"><a class=\"anchor\" href=\"#窗口对象\">#</a> 窗口对象</h2>\n<p>窗口在内核同样也有一个对应的结构。</p>\n<p>通过分析 XP 的源码观察  <code>CreateWindow</code>  窗口的创建过程，发现其涉及了好多结构体。</p>\n<p>以下是我在 XP 源码中的发现：<br />\n从此函数开始：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>PTHREADINFO <span class=\"token function\">PtiCurrent</span><span class=\"token punctuation\">(</span>VOID<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">ConnectIfNecessary</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>PTHREADINFO<span class=\"token punctuation\">)</span><span class=\"token function\">NtCurrentTebShared</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>Win32ThreadInfo<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">tagTHREADINFO</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    W32THREAD<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">//***************************************** begin: USER specific fields</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    PTL             ptl<span class=\"token punctuation\">;</span>                <span class=\"token comment\">// Listhead for thread lock list</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    PPROCESSINFO    ppi<span class=\"token punctuation\">;</span>                <span class=\"token comment\">// process info struct for this thread</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    PQ              pq<span class=\"token punctuation\">;</span>                 <span class=\"token comment\">// keyboard and mouse input queue</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    PKL             spklActive<span class=\"token punctuation\">;</span>         <span class=\"token comment\">// active keyboard layout for this thread</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    PCLIENTTHREADINFO pcti<span class=\"token punctuation\">;</span>             <span class=\"token comment\">// Info that must be visible from client</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    PDESKTOP        rpdesk<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    PDESKTOPINFO    pDeskInfo<span class=\"token punctuation\">;</span>          <span class=\"token comment\">// Desktop info visible to client</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    PCLIENTINFO     pClientInfo<span class=\"token punctuation\">;</span>        <span class=\"token comment\">// Client info stored in TEB</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    DWORD           TIF_flags<span class=\"token punctuation\">;</span>          <span class=\"token comment\">// TIF_ flags go here.</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    PUNICODE_STRING pstrAppName<span class=\"token punctuation\">;</span>        <span class=\"token comment\">// Application module name.</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    PSMS            psmsSent<span class=\"token punctuation\">;</span>           <span class=\"token comment\">// Most recent SMS this thread has sent</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    PSMS            psmsCurrent<span class=\"token punctuation\">;</span>        <span class=\"token comment\">// Received SMS this thread is currently processing</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    PSMS            psmsReceiveList<span class=\"token punctuation\">;</span>    <span class=\"token comment\">// SMSs to be processed</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    LONG            timeLast<span class=\"token punctuation\">;</span>           <span class=\"token comment\">// Time and ID of last message</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    ULONG_PTR       idLast<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">int</span>             exitCode<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    HDESK           hdesk<span class=\"token punctuation\">;</span>              <span class=\"token comment\">// Desktop handle</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">int</span>             cPaintsReady<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    UINT            cTimersReady<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    PMENUSTATE      pMenuState<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token keyword\">union</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        PTDB            ptdb<span class=\"token punctuation\">;</span>           <span class=\"token comment\">// Win16Task Schedule data for WOW thread</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        PWINDOWSTATION  pwinsta<span class=\"token punctuation\">;</span>        <span class=\"token comment\">// Window station for SYSTEM thread</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    PSVR_INSTANCE_INFO psiiList<span class=\"token punctuation\">;</span>        <span class=\"token comment\">// thread DDEML instance list</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    DWORD           dwExpWinVer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    DWORD           dwCompatFlags<span class=\"token punctuation\">;</span>      <span class=\"token comment\">// The Win 3.1 Compat flags</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    DWORD           dwCompatFlags2<span class=\"token punctuation\">;</span>     <span class=\"token comment\">// new DWORD to extend compat flags for NT5+ features</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    PQ              pqAttach<span class=\"token punctuation\">;</span>           <span class=\"token comment\">// calculation variabled used in</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>                                        <span class=\"token comment\">// zzzAttachThreadInput()</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    PTHREADINFO     ptiSibling<span class=\"token punctuation\">;</span>         <span class=\"token comment\">// pointer to sibling thread info</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    PMOVESIZEDATA   pmsd<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    DWORD           fsHooks<span class=\"token punctuation\">;</span>                <span class=\"token comment\">// WHF_ Flags for which hooks are installed</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    PHOOK           sphkCurrent<span class=\"token punctuation\">;</span>            <span class=\"token comment\">// Hook this thread is currently processing</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    PSBTRACK        pSBTrack<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    HANDLE          hEventQueueClient<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    PKEVENT         pEventQueueServer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    LIST_ENTRY      PtiLink<span class=\"token punctuation\">;</span>            <span class=\"token comment\">// Link to other threads on desktop</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token keyword\">int</span>             iCursorLevel<span class=\"token punctuation\">;</span>       <span class=\"token comment\">// keep track of each thread's level</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    POINT           ptLast<span class=\"token punctuation\">;</span>             <span class=\"token comment\">// Position of last message</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    PWND            spwndDefaultIme<span class=\"token punctuation\">;</span>    <span class=\"token comment\">// Default IME Window for this thread</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    PIMC            spDefaultImc<span class=\"token punctuation\">;</span>       <span class=\"token comment\">// Default input context for this thread</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    HKL             hklPrev<span class=\"token punctuation\">;</span>            <span class=\"token comment\">// Previous active keyboard layout</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    <span class=\"token keyword\">int</span>             cEnterCount<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    MLIST           mlPost<span class=\"token punctuation\">;</span>             <span class=\"token comment\">// posted message list.</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    USHORT          fsChangeBitsRemoved<span class=\"token punctuation\">;</span><span class=\"token comment\">// Bits removed during PeekMessage</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>    WCHAR           wchInjected<span class=\"token punctuation\">;</span>        <span class=\"token comment\">// character from last VK_PACKET</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    DWORD           fsReserveKeys<span class=\"token punctuation\">;</span>      <span class=\"token comment\">// Keys that must be sent to the active</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>                                        <span class=\"token comment\">// active console window.</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>    PKEVENT        <span class=\"token operator\">*</span>apEvent<span class=\"token punctuation\">;</span>            <span class=\"token comment\">// Wait array for xxxPollAndWaitForSingleObject</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>    ACCESS_MASK     amdesk<span class=\"token punctuation\">;</span>             <span class=\"token comment\">// Granted desktop access</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    UINT            cWindows<span class=\"token punctuation\">;</span>           <span class=\"token comment\">// Number of windows owned by this thread</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    UINT            cVisWindows<span class=\"token punctuation\">;</span>        <span class=\"token comment\">// Number of visible windows on this thread</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>    PHOOK           aphkStart<span class=\"token punctuation\">[</span>CWINHOOKS<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// Hooks registered for this thread</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>    CLIENTTHREADINFO  cti<span class=\"token punctuation\">;</span>              <span class=\"token comment\">// Use this when no desktop is available</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre></pre></td></tr><tr><td data-num=\"84\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">GENERIC_INPUT</span></span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>    HANDLE          hPrevHidData<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\">DBG</span></span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>    UINT            cNestedCalls<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre><span class=\"token punctuation\">&#125;</span> THREADINFO<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>其中  <code>W32THREAD</code></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// This is the header shared info for W32 threads.  It is followed by the</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// NtUser per thread information.</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_W32THREAD</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    PETHREAD        pEThread<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    ULONG           RefCount<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    PTL             ptlW32<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    KERNEL_PVOID    pgdiDcattr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    KERNEL_PVOID    pgdiBrushAttr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    KERNEL_PVOID    pUMPDObjs<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    KERNEL_PVOID    pUMPDHeap<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    ULONG           dwEngAcquireCount<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    KERNEL_PVOID    pSemTable<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    KERNEL_PVOID    pUMPDObj<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\"><span class=\"token function\">defined</span><span class=\"token punctuation\">(</span>_WIN64<span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    KERNEL_PVOID    pProxyPort<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    KERNEL_PVOID    pClientID<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span> W32THREAD<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span> KPTR_MODIFIER PW32THREAD<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * Extended structures for message thunking.</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_CREATESTRUCTEX</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    CREATESTRUCT cs<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    LARGE_STRING strName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    LARGE_STRING strClass<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span> CREATESTRUCTEX<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>PCREATESTRUCTEX<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/* WM_CREATE/WM_NCCREATE lParam struct */</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">tagCREATESTRUCT</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">void</span> FAR<span class=\"token operator\">*</span> lpCreateParams<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    HINSTANCE hInstance<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    HMENU     hMenu<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    HWND      hwndParent<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">int</span>       cy<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">int</span>       cx<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">int</span>       y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">int</span>       x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    LONG      style<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    LPCSTR    lpszName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    LPCSTR    lpszClass<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    DWORD     dwExStyle<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span> CREATESTRUCT<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>通过分析  <code>xxxCreateWindowEx</code>  函数，最终发现窗口实例结构：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * sizeof(THROBJHEAD) must be equal to sizeof(PROCOBJHEAD)</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * This is to make sure that DESKHEAD fields are always at the same offset.</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_THROBJHEAD</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    HEAD<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    PTHREADINFO pti<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span> THROBJHEAD<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span> KPTR_MODIFIER PTHROBJHEAD<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_THRDESKHEAD</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    THROBJHEAD<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    DESKHEAD<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span> THRDESKHEAD<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>PTHRDESKHEAD<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">tagWND</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    THRDESKHEAD   head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    WW<span class=\"token punctuation\">;</span>         <span class=\"token comment\">// WOW-USER common fields. Defined in wowuserp.h</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                <span class=\"token comment\">// The presence of \"state\" at the start of this structure is</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                <span class=\"token comment\">// assumed by the STATEOFFSET macro.</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    PWND                 spwndNext<span class=\"token punctuation\">;</span>    <span class=\"token comment\">// Handle to the next window</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    PWND                 spwndPrev<span class=\"token punctuation\">;</span>    <span class=\"token comment\">// Handle to the previous window</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    PWND                 spwndParent<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Backpointer to the parent window.</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    PWND                 spwndChild<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// Handle to child</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    PWND                 spwndOwner<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// Popup window owner field</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    RECT                 rcWindow<span class=\"token punctuation\">;</span>     <span class=\"token comment\">// Window outer rectangle</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    RECT                 rcClient<span class=\"token punctuation\">;</span>     <span class=\"token comment\">// Client rectangle</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    WNDPROC_PWND         lpfnWndProc<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Can be WOW address or standard address</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    PCLS                 pcls<span class=\"token punctuation\">;</span>         <span class=\"token comment\">// Pointer to window class</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    KHRGN                hrgnUpdate<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// Accumulated paint region</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    PPROPLIST            ppropList<span class=\"token punctuation\">;</span>    <span class=\"token comment\">// Pointer to property list</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    PSBINFO              pSBInfo<span class=\"token punctuation\">;</span>      <span class=\"token comment\">// Words used for scrolling</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    PMENU                spmenuSys<span class=\"token punctuation\">;</span>    <span class=\"token comment\">// Handle to system menu</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    PMENU                spmenu<span class=\"token punctuation\">;</span>       <span class=\"token comment\">// Menu handle or ID</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    KHRGN                hrgnClip<span class=\"token punctuation\">;</span>     <span class=\"token comment\">// Clipping region for this window</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    LARGE_UNICODE_STRING strName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token keyword\">int</span>                  cbwndExtra<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// Extra bytes in window</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    PWND                 spwndLastActive<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Last active in owner/ownee list</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    KHIMC                hImc<span class=\"token punctuation\">;</span>         <span class=\"token comment\">// Associated input context handle</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    KERNEL_ULONG_PTR     dwUserData<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// Reserved for random application data</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_ACTIVATION_CONTEXT</span>  <span class=\"token operator\">*</span> KPTR_MODIFIER pActCtx<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">LAME_BUTTON</span></span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    KERNEL_PVOID    pStackTrace<span class=\"token punctuation\">;</span>       <span class=\"token comment\">// Creation stack trace; used by lame</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                                       <span class=\"token comment\">// button.</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span> <span class=\"token comment\">// LAME_BUTTON</span></span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token punctuation\">&#125;</span> WND<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这个就是窗口在内核对应的结构体</p>\n<h2 id=\"消息进入窗口消息队列的过程\"><a class=\"anchor\" href=\"#消息进入窗口消息队列的过程\">#</a> 消息进入窗口消息队列的过程</h2>\n<ol>\n<li>当使用鼠标在某个窗口上点击时，鼠标监控线程检测到点击的窗口对象</li>\n<li>根据窗口对象成员，找到窗口对应线程</li>\n<li>将消息放入该线程的消息队列中</li>\n</ol>\n<h1 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h1>\n<ol>\n<li>窗口在 0 环创建</li>\n<li>窗口句柄是全局的</li>\n<li>一个线程可以使用多个窗口，但每个窗口只能属于一个线程</li>\n</ol>\n<h1 id=\"reference\"><a class=\"anchor\" href=\"#reference\">#</a> Reference</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxOTg4NDQ4L2FydGljbGUvZGV0YWlscy8xMTI4Mjc4MjI=\">https://blog.csdn.net/qq_41988448/article/details/112827822</span></p>\n",
            "tags": [
                "消息队列与线程"
            ]
        },
        {
            "id": "https://or0kit.github.io/Bin/Core/WindowsXp/MessageMechanism/%E6%B6%88%E6%81%AF%E6%9C%BA%E5%88%B6-01%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E5%9C%A8%E5%93%AA/",
            "url": "https://or0kit.github.io/Bin/Core/WindowsXp/MessageMechanism/%E6%B6%88%E6%81%AF%E6%9C%BA%E5%88%B6-01%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E5%9C%A8%E5%93%AA/",
            "title": "消息机制-01消息队列在哪",
            "date_published": "2022-04-20T07:17:06.000Z",
            "content_html": "<h1 id=\"楔子\"><a class=\"anchor\" href=\"#楔子\">#</a> 楔子</h1>\n<p>接触过编程的人，或多或少用到过消息机制，但大多数人（包括我自己）只是知道相关 API 的基本用法，却不知道它是如何实现的</p>\n<p>从本章起，我们将带着以下几个问题一起来学习消息机制：</p>\n<ol>\n<li>什么是窗口句柄？在哪里？有什么用？</li>\n<li>什么是消息？什么是消息队列？消息队列在哪？</li>\n<li>什么是窗口过程？窗口过程是谁调用的？没有消息循环窗口过程会执行吗？</li>\n<li>为什么要有 w32k.sys 这个模块？</li>\n<li>为什么只有使用图形界面的程序才可以访问 KeServiceDescriptorTableShadow?</li>\n<li>界面 &quot;卡死&quot; 的时候为什么鼠标还可以动？</li>\n</ol>\n<h1 id=\"画一个简单的窗口\"><a class=\"anchor\" href=\"#画一个简单的窗口\">#</a> 画一个简单的窗口</h1>\n<p>从设计层面理解 Windows 的消息机制是怎么来的。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">_WIN32_WINNT</span> <span class=\"token expression\"><span class=\"token number\">0x500</span></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;windows.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_Color</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tDWORD r<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tDWORD g<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tDWORD b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span>Color<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_WindowClass</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tDWORD x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tDWORD y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tDWORD width<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tDWORD height<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\tColor color<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span>WindowClass<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">// 按照 WindowClass 的参数，将 hdc 中的数据打印到指定设备</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">PaintWindows</span><span class=\"token punctuation\">(</span>HDC hdc<span class=\"token punctuation\">,</span> WindowClass <span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\tHBRUSH hBrush<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\thBrush <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>HBRUSH<span class=\"token punctuation\">)</span><span class=\"token function\">GetStockObject</span><span class=\"token punctuation\">(</span>DC_BRUSH<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token function\">SelectObject</span><span class=\"token punctuation\">(</span>hdc<span class=\"token punctuation\">,</span> hBrush<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\">// 画刷</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token function\">SetDCBrushColor</span><span class=\"token punctuation\">(</span>hdc<span class=\"token punctuation\">,</span> <span class=\"token function\">RGB</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-></span>color<span class=\"token punctuation\">.</span>r<span class=\"token punctuation\">,</span> p<span class=\"token operator\">-></span>color<span class=\"token punctuation\">.</span>g<span class=\"token punctuation\">,</span> p<span class=\"token operator\">-></span>color<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token function\">MoveToEx</span><span class=\"token punctuation\">(</span>hdc<span class=\"token punctuation\">,</span> p<span class=\"token operator\">-></span>x<span class=\"token punctuation\">,</span> p<span class=\"token operator\">-></span>y<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token function\">LineTo</span><span class=\"token punctuation\">(</span>hdc<span class=\"token punctuation\">,</span> p<span class=\"token operator\">-></span>x<span class=\"token operator\">+</span>p<span class=\"token operator\">-></span>width<span class=\"token punctuation\">,</span> p<span class=\"token operator\">-></span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token function\">LineTo</span><span class=\"token punctuation\">(</span>hdc<span class=\"token punctuation\">,</span> p<span class=\"token operator\">-></span>x<span class=\"token operator\">+</span>p<span class=\"token operator\">-></span>width<span class=\"token punctuation\">,</span> p<span class=\"token operator\">-></span>y<span class=\"token operator\">+</span>p<span class=\"token operator\">-></span>height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token function\">LineTo</span><span class=\"token punctuation\">(</span>hdc<span class=\"token punctuation\">,</span> p<span class=\"token operator\">-></span>x<span class=\"token punctuation\">,</span> p<span class=\"token operator\">-></span>y<span class=\"token operator\">+</span>p<span class=\"token operator\">-></span>height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token function\">LineTo</span><span class=\"token punctuation\">(</span>hdc<span class=\"token punctuation\">,</span> p<span class=\"token operator\">-></span>x<span class=\"token punctuation\">,</span> p<span class=\"token operator\">-></span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token function\">Rectangle</span><span class=\"token punctuation\">(</span>hdc<span class=\"token punctuation\">,</span> p<span class=\"token operator\">-></span>x<span class=\"token punctuation\">,</span> p<span class=\"token operator\">-></span>y<span class=\"token punctuation\">,</span> p<span class=\"token operator\">-></span>width<span class=\"token punctuation\">,</span> p<span class=\"token operator\">-></span>height<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t<span class=\"token function\">DeleteObject</span><span class=\"token punctuation\">(</span>hBrush<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t<span class=\"token keyword\">char</span> cMessage<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 消息</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\tHWND hwnd<span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\">// 画在哪</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\tHDC hdc<span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\">// 显卡缓存</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t<span class=\"token comment\">// 设置窗口参数，长宽高之类的</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\tWindowClass wClass<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\twClass<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\twClass<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\twClass<span class=\"token punctuation\">.</span>width <span class=\"token operator\">=</span> <span class=\"token number\">800</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\twClass<span class=\"token punctuation\">.</span>height <span class=\"token operator\">=</span> <span class=\"token number\">400</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\twClass<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">.</span>r <span class=\"token operator\">=</span> <span class=\"token number\">0xEF</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\twClass<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">.</span>g <span class=\"token operator\">=</span> <span class=\"token number\">0xEB</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\twClass<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">.</span>b <span class=\"token operator\">=</span> <span class=\"token number\">0xDE</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t<span class=\"token comment\">// 画在哪</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\thwnd <span class=\"token operator\">=</span> <span class=\"token function\">GetDesktopWindow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t<span class=\"token comment\">//hwnd = FindWindow(\"dbgviewClass\", NULL);</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t<span class=\"token comment\">// 获取 DC 设备句柄：可以把 DC 理解成显卡缓存</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\thdc <span class=\"token operator\">=</span> <span class=\"token function\">GetWindowDC</span><span class=\"token punctuation\">(</span>hwnd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t\t<span class=\"token comment\">// 画窗口</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t\t<span class=\"token function\">PaintWindows</span><span class=\"token punctuation\">(</span>hdc<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>wClass<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>\t\tcMessage <span class=\"token operator\">=</span> <span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\t\t<span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>cMessage<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\t\t<span class=\"token keyword\">case</span> <span class=\"token string\">'a'</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\t\t\twClass<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">.</span>r <span class=\"token operator\">+=</span> <span class=\"token number\">0x10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>\t\t\twClass<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">.</span>g <span class=\"token operator\">+=</span> <span class=\"token number\">0x10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>\t\t\twClass<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">.</span>b <span class=\"token operator\">+=</span> <span class=\"token number\">0x10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>\t\t<span class=\"token keyword\">case</span> <span class=\"token string\">'b'</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>\t\t\twClass<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">.</span>r <span class=\"token operator\">-=</span> <span class=\"token number\">0x10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>\t\t\twClass<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">.</span>g <span class=\"token operator\">-=</span> <span class=\"token number\">0x10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>\t\t\twClass<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">.</span>b <span class=\"token operator\">-=</span> <span class=\"token number\">0x10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>运行结果：</p>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<p>我们发现我们画的这个傻瓜窗口：</p>\n<ol>\n<li>被其它窗口覆盖后就消失了</li>\n<li>只能接收键盘发送的消息</li>\n</ol>\n<p>那么如何使窗口能够接收所有消息呢？</p>\n<p>答案：将所有消息放入一块内存中，这块内存被称之为 “消息队列”</p>\n<h1 id=\"消息队列\"><a class=\"anchor\" href=\"#消息队列\">#</a> 消息队列</h1>\n<p>描述：本质上是一种数据结构，当对象接收到消息时，将接收到的所有消息放入消息队列中，等待对象进行处理<br />\n规则：先进先出</p>\n<p><img data-src=\"image002.png\" alt=\"\" /></p>\n<h2 id=\"消息队列在哪\"><a class=\"anchor\" href=\"#消息队列在哪\">#</a> 消息队列在哪？</h2>\n<p>我们假设把消息队列放到用户空间，那么就要有一个专用进程去把这些消息放到各个进程的消息队列中，这就涉及了跨进程通信的问题，因为是这个专用进程负责监听消息，它首先能得到这些消息，然后在分发给其他进程的消息队列，这样的话就会有大量的时间花费在跨进程通信上，Windows 并没有采用这种解决方案，Linux 采用的是这种解决方案。</p>\n<p>在 Linux 中：专用进程</p>\n<ol>\n<li>使用专用进程捕获所有消息</li>\n<li>判断消息所属进程，进行分发，将消息分配到目标进程的消息队列中</li>\n</ol>\n<p><img data-src=\"image003.png\" alt=\"\" /></p>\n<p><strong>微软的解决方案：GUI 线程</strong></p>\n<p>注意 GUI 和 GDI 的区别。</p>\n<p>&lt;1&gt; 当线程刚创建的时候，都是普通线程：<br />\n <code>Thread.ServiceTable-&gt; KeServiceDescriptorTable</code></p>\n<p>&lt;2&gt; 当线程第一次调用  <code>Win32k.sys</code>  时，会调用一个函数：  <code>PsConvertToGuiThread</code></p>\n<p>主要做几件事：<br />\na. 扩充内核栈，必须换成 64KB 的大内核栈，因为普通内核栈只有 12KB 大小。<br />\nb. 创建一个包含消息队列的结构体，并挂到 KTHREAD 上。<br />\nc.  <code>Thread.ServiceTable-&gt; KeServiceDescriptorTableShadow</code> <br />\nd. 把需要的内存数据映射到本进程空间</p>\n<p>Windows 把消息队列存到了 0 环。</p>\n<h2 id=\"如何查找消息队列\"><a class=\"anchor\" href=\"#如何查找消息队列\">#</a> 如何查找消息队列</h2>\n<p>////////<strong> 那么在内核中可以借此判断线程是窗口程序还是控制台程序呢？</strong><br />\n在  <code>KTHREAD</code>  中有一个成员  <code>+0x130 Win32Thread      : Ptr32 Void</code> ，若当前程序使用了图形界面相关的 API，这个成员就指向一个结构体 <code>THREADINFO</code> ，其成员 <code>PQ  pq;</code>  包含了当前线程的消息队列。</p>\n<p>以下是我在 XP 源码中的发现：<br />\n从此函数开始：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>PTHREADINFO <span class=\"token function\">PtiCurrent</span><span class=\"token punctuation\">(</span>VOID<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">ConnectIfNecessary</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>PTHREADINFO<span class=\"token punctuation\">)</span><span class=\"token function\">NtCurrentTebShared</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>Win32ThreadInfo<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">tagTHREADINFO</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    W32THREAD<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">//***************************************** begin: USER specific fields</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    PTL             ptl<span class=\"token punctuation\">;</span>                <span class=\"token comment\">// Listhead for thread lock list</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    PPROCESSINFO    ppi<span class=\"token punctuation\">;</span>                <span class=\"token comment\">// process info struct for this thread</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    PQ              pq<span class=\"token punctuation\">;</span>                 <span class=\"token comment\">// keyboard and mouse input queue</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>……</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>……</pre></td></tr></table></figure><p>下面是结构体 <code>Q</code>  或者说 <code>tagQ</code>  的结构：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * Structure definition for messages as they exist on a Q. Same as MSG</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * structure except for the link-pointer and flags at the end.</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">tagQMSG</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    PQMSG           pqmsgNext<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    PQMSG           pqmsgPrev<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    MSG             msg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    LONG_PTR        ExtraInfo<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    DWORD           dwQEvent<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    PTHREADINFO     pti<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span> QMSG<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">tagMLIST</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    PQMSG pqmsgRead<span class=\"token punctuation\">;</span>        <span class=\"token comment\">// next message to be read. This is a FIFO queue</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    PQMSG pqmsgWriteLast<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// last message  added to the queue. Used mainly for coalescing</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    DWORD cMsgs<span class=\"token punctuation\">;</span>            <span class=\"token comment\">// Count of messages. Used for optimizations and to enforce a max.</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span> MLIST<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>PMLIST<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"21\"></td><td><pre> * Message Queue structure.</pre></td></tr><tr><td data-num=\"22\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"23\"></td><td><pre> * Note, if you need to add a WORD sized value,</pre></td></tr><tr><td data-num=\"24\"></td><td><pre> * do so after xbtnDblClk.</pre></td></tr><tr><td data-num=\"25\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">tagQ</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    MLIST       mlInput<span class=\"token punctuation\">;</span>            <span class=\"token comment\">// raw mouse and key message list.</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    PTHREADINFO ptiSysLock<span class=\"token punctuation\">;</span>         <span class=\"token comment\">// Thread currently allowed to process input</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    ULONG_PTR    idSysLock<span class=\"token punctuation\">;</span>          <span class=\"token comment\">// Last message removed or to be removed before unlocking</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    ULONG_PTR    idSysPeek<span class=\"token punctuation\">;</span>          <span class=\"token comment\">// Last message peeked</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    PTHREADINFO ptiMouse<span class=\"token punctuation\">;</span>           <span class=\"token comment\">// Last thread to get mouse msg.</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    PTHREADINFO ptiKeyboard<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    PWND        spwndCapture<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    PWND        spwndFocus<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    PWND        spwndActive<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    PWND        spwndActivePrev<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    UINT        codeCapture<span class=\"token punctuation\">;</span>        <span class=\"token comment\">// type of captue. See *_CAP* defines in this file</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    UINT        msgDblClk<span class=\"token punctuation\">;</span>          <span class=\"token comment\">// last mouse down message removed</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    WORD        xbtnDblClk<span class=\"token punctuation\">;</span>         <span class=\"token comment\">// last xbutton down</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    DWORD       timeDblClk<span class=\"token punctuation\">;</span>         <span class=\"token comment\">// max time for next button down to be taken as double click</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    HWND        hwndDblClk<span class=\"token punctuation\">;</span>         <span class=\"token comment\">// window that got last button down</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    POINT       ptDblClk<span class=\"token punctuation\">;</span>           <span class=\"token comment\">// last button down position. See SYSMET(C?DOUBLECLK)</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    BYTE        afKeyRecentDown<span class=\"token punctuation\">[</span>CBKEYSTATERECENTDOWN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    BYTE        afKeyState<span class=\"token punctuation\">[</span>CBKEYSTATE<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    CARET       caret<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    PCURSOR     spcurCurrent<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token keyword\">int</span>         iCursorLevel<span class=\"token punctuation\">;</span>       <span class=\"token comment\">// show/hide count. &lt; 0 if the cursor is not visible</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    DWORD       QF_flags<span class=\"token punctuation\">;</span>            <span class=\"token comment\">// QF_ flags go here</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    USHORT      cThreads<span class=\"token punctuation\">;</span>            <span class=\"token comment\">// Count of threads using this queue</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    USHORT      cLockCount<span class=\"token punctuation\">;</span>          <span class=\"token comment\">// Count of threads that don't want this queue freed</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    UINT        msgJournal<span class=\"token punctuation\">;</span>         <span class=\"token comment\">// See SetJournalTimer. Journal message to be delivered when timer goes off</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    LONG_PTR    ExtraInfo<span class=\"token punctuation\">;</span>          <span class=\"token comment\">// Extra info for last qmsg read. See GetMessageExtraInfo</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token punctuation\">&#125;</span> Q<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h1>\n<p>&lt;1&gt; 消息队列存储在 0 环，通过 KTHREAD.Win32Thread 可以找到</p>\n<p>&lt;2&gt; 并不是所有线程都要消息队列，只有 GUI 线程才有消息队列</p>\n<p>&lt;3&gt; 一个 GUI 线程对应 1 个消息队列</p>\n<h1 id=\"reference\"><a class=\"anchor\" href=\"#reference\">#</a> Reference</h1>\n<p>滴水课件</p>\n",
            "tags": [
                "消息队列",
                "PsConvertToGuiThread",
                "win32k.sys",
                "GUI线程"
            ]
        },
        {
            "id": "https://or0kit.github.io/Bin/Core/WindowsXp/MemoryManagement/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86-05%E6%97%A0%E5%A4%84%E4%B8%8D%E5%9C%A8%E7%9A%84%E7%BC%BA%E9%A1%B5%E5%BC%82%E5%B8%B8/",
            "url": "https://or0kit.github.io/Bin/Core/WindowsXp/MemoryManagement/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86-05%E6%97%A0%E5%A4%84%E4%B8%8D%E5%9C%A8%E7%9A%84%E7%BC%BA%E9%A1%B5%E5%BC%82%E5%B8%B8/",
            "title": "内存管理-05无处不在的缺页异常",
            "date_published": "2022-04-16T07:17:03.000Z",
            "content_html": "<h1 id=\"缺页异常的由来\"><a class=\"anchor\" href=\"#缺页异常的由来\">#</a> 缺页异常的由来</h1>\n<p>先来复习一下 PTE：</p>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<p>P 位  代表当前页面是否有效。</p>\n<p>当 CPU 访问一个地址，其 PTE 的 P 位为 0，此时会产生缺页异常；</p>\n<p>在 windows 中，缺页异常是时刻在发生的。</p>\n<p>Windows 利用缺页异常机制让我们更加有效的访问内存。</p>\n<p>海哥原话：当我们的物理内存大小只有 2MB 时，当我们需要用到某个物理页的时候，将对应物理页的 P 位置 1，当我们不再需要使用该物理页时，再将其 P 位置 0，这样的内存使用效率是非常低的。</p>\n<p>因此 windows 不是这样设计的 —— 只有正在使用的线性地址，才会被挂上物理页，当物理页在一段时间内不被使用或不够用的情况下，操作系统会将当前物理页中的数据拷贝至硬盘中，然后将当前物理页供给 “别人” 使用，当需要再次用到该物理页的数据时，则将 “别人” 的数据再拷贝出来，将 “自己 &quot; 的数据从硬盘中拷回，被拷至硬盘中的物理页数据会被写入到一个文件中，也就是我们平时常说的<strong>虚拟内存</strong></p>\n<p>也就是 C 盘中的  <code>pagefile.sys</code>  文件。</p>\n<p>当物理页占用情况较为紧张时，这个文件用于存放物理页的临时数据作为备份。</p>\n<h1 id=\"virtualalloc-函数\"><a class=\"anchor\" href=\"#virtualalloc-函数\">#</a> VirtualAlloc 函数</h1>\n<p>保留与提交的误区</p>\n<p>还是这个函数，前面我们已经验证过了。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>LPVOID VirtualAlloc<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tLPVOID lpAddress<span class=\"token punctuation\">,</span> \t<span class=\"token comment\">// 要分配的内存区域的地址</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tDWORD dwSize<span class=\"token punctuation\">,</span> \t\t<span class=\"token comment\">// 分配的大小</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tDWORD flAllocationType<span class=\"token punctuation\">,</span> \t<span class=\"token comment\">// 类型：MEM_RESERVE MEM_COMMIT</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tDWORD flProtect \t<span class=\"token comment\">// 该内存的初始保护属性</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>MEM_RESERVE：保留线性地址</p>\n<p>MEM_COMMIT：可以有物理页，但不是立即有或者一直有</p>\n<h1 id=\"无处不在的缺页\"><a class=\"anchor\" href=\"#无处不在的缺页\">#</a> 无处不在的缺页</h1>\n<p><img data-src=\"image002.png\" alt=\"\" /></p>\n<ol>\n<li>当物理页被放入页面文件时，PTE 结构如图 a 所示</li>\n<li>当该进程再次读取该物理页对应的线性地址时，由于 P 位为 0，因此会触发缺页异常处理程序</li>\n<li>在 windows xp 中，缺页异常处理程序位于 IDT [0xE]</li>\n<li>此时，缺页异常处理程序会再次查询当前 PTE 的属性，若 1-4 位，5-9 位，12-31 位都有值，说明当前 PTE 是有效的，但是物理页被存放到了页面文件中</li>\n<li>然后，缺页异常处理程序根据 PTE 中得到的值去查询 pagefile.sys，将原来的物理页的内容挂入新的物理页，然后将 P 位置 1，再将新的物理页的物理地址挂入 PTE 的第 12-31 位</li>\n<li>在用户看来，两次读取同一个线性地址，中间这一系列复杂过程是透明的，而只能观察到两次都成功读取了同一个值</li>\n</ol>\n<h1 id=\"execute_writecopy写拷贝\"><a class=\"anchor\" href=\"#execute_writecopy写拷贝\">#</a> EXECUTE_WRITECOPY（写拷贝）</h1>\n<p>描述：当程序正常加载一个 EXE 或者 DLL 时，其 VadRoot 中的内存属性为 Mapped EXE，权限为 EXECUTE_WRITECOPY，当试图对其某一内容进行修改时，无法对其它进程中的同一个模块产生影响</p>\n<p>原理：</p>\n<p>当试图对其某一内容进行修改时，系统会检查其线性地址对应的物理页的 PTE 属性，若 R/W 属性为 0 时，触发缺页异常<br />\n缺页异常处理程序检查 VadRoot 中对应线性地址所在空间的 MMVAD_FLAGS 中的 Protection 成员，若值位 0x111 时，表示权限为 EXECUTE_WRITECOPY<br />\n 此时，缺页异常处理程序将当前线性地址对应的物理页内容进行拷贝，将其写入一个新的物理页，然后将当前进程需要修改的线性地址挂入新的物理页上，然后对需要修改的内容进行写入</p>\n<p>解决方法：可通过编写驱动程序先将需要修改的线性地址对应的物理页的 PTE 的 R/W 位置为 1，再对需要修改的地方进行修改。</p>\n<p>以前写过过写拷贝全局监控函数的。</p>\n<h1 id=\"reference\"><a class=\"anchor\" href=\"#reference\">#</a> Reference</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxOTg4NDQ4L2FydGljbGUvZGV0YWlscy8xMTI2NDczODg=\">https://blog.csdn.net/qq_41988448/article/details/112647388</span></p>\n",
            "tags": [
                "缺页异常"
            ]
        },
        {
            "id": "https://or0kit.github.io/Bin/Core/WindowsXp/MemoryManagement/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86-04%E7%89%A9%E7%90%86%E5%86%85%E5%AD%98%E7%9A%84%E7%AE%A1%E7%90%86/",
            "url": "https://or0kit.github.io/Bin/Core/WindowsXp/MemoryManagement/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86-04%E7%89%A9%E7%90%86%E5%86%85%E5%AD%98%E7%9A%84%E7%AE%A1%E7%90%86/",
            "title": "内存管理-04物理内存的管理",
            "date_published": "2022-04-16T07:17:01.000Z",
            "content_html": "<h1 id=\"物理内存\"><a class=\"anchor\" href=\"#物理内存\">#</a> 物理内存</h1>\n<p>&lt;1&gt; 最大物理内存</p>\n<pre><code>10-10-12分页  最多识别物理内存为4GB\n\n2-9-9-12分页  最多识别物理内存为64GB\n</code></pre>\n<p>&lt;2&gt; 操作系统限制</p>\n<p>为什么在 xp 中，明明是 2-9-9-12 分页，单仍然无法超越 4GB 呢？</p>\n<p>具体可以分析  <code>MmAddPhysicalMemoryEx</code>  函数。存粹是操作系统限制。</p>\n<p>&lt;3&gt; 实际物理内存</p>\n<p><code>MmNumberOfPhysicalPages</code>  * 4 = 物理内存  (页为单位)</p>\n<h1 id=\"物理内存如何管理\"><a class=\"anchor\" href=\"#物理内存如何管理\">#</a> 物理内存如何管理</h1>\n<p>在 XP 上一个物理页的大小是 4096 BYTE = 0x1000 BYTE = 4 KB  = 4 * 1024B</p>\n<p>查看 XP 上的物理页：</p>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<p>对于物理内存，操作系统采用帧管理数据库的模式。<br />\n一个物理页就是一帧，被称之为帧数据库：</p>\n<p>其实就是数组，数组的指针： <code>_MMPFN* MmPfnDatabase</code>  而数组的长度是：  <code>MmNumberOfPhysicalPages</code></p>\n<p>而数组成员都是  <code>_MMPFN</code>  结构</p>\n<p>在 windbg 中查看：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kd&gt; dt _MMPFN</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>nt!_MMPFN</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   +0x000 u1               : __unnamed</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   +0x004 PteAddress       : Ptr32 _MMPTE</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   +0x008 u2               : __unnamed</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   +0x00c u3               : __unnamed</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   +0x010 OriginalPte      : _MMPTE</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   +0x018 u4               : __unnamed</pre></td></tr></table></figure><p>在 xp 源码中查看：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_MMPFN</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">union</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        PFN_NUMBER Flink<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        WSLE_NUMBER WsIndex<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        PKEVENT Event<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        NTSTATUS ReadStatus<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        SINGLE_LIST_ENTRY NextStackPfn<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> u1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    PMMPTE PteAddress<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">union</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        PFN_NUMBER Blink<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        ULONG_PTR ShareCount<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> u2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">union</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        MMPFNENTRY e1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            USHORT ShortFlags<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            USHORT ReferenceCount<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> e2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> u3<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\"><span class=\"token function\">defined</span> <span class=\"token punctuation\">(</span>_WIN64<span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    ULONG UsedPageTableEntries<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    MMPTE OriginalPte<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">union</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        ULONG_PTR EntireFrame<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\"><span class=\"token function\">defined</span> <span class=\"token punctuation\">(</span>_WIN64<span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            ULONG_PTR PteFrame<span class=\"token operator\">:</span> <span class=\"token number\">58</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">else</span></span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            ULONG_PTR PteFrame<span class=\"token operator\">:</span> <span class=\"token number\">26</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            ULONG_PTR InPageError <span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            ULONG_PTR VerifierAllocation <span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            ULONG_PTR AweAllocation <span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            ULONG_PTR LockCharged <span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// maintained for DBG only</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            ULONG_PTR KernelStack <span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// only for valid (not trans) pages</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            ULONG_PTR Reserved <span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> u4<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token punctuation\">&#125;</span> MMPFN<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>PMMPFN<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>可以发现这个结构体  <code>_MMPFN</code>  的大小是 0x1C。</p>\n<p>在 XP 中查看帧结构数组的基址：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kd&gt; dd MmPfnDatabase l1</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>805630c8  80e00000</pre></td></tr></table></figure><p><code>80e00000+0x1C</code>  就是第二个物理页的帧结构数组，那么我们如何知道这个数组对应的物理页呢？</p>\n<p>这里操作系统的设计非常巧妙，帧结构数组的索引对应着相应的物理页，如果索引为  <code>0</code>  则对应的物理页地址为  <code>0 * 4kB</code>  ；如果索引为  <code>1</code>  则对应的物理页地址为  <code>1 * 4kB</code>  。</p>\n<h2 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结：</h2>\n<p>物理页的数量是由  <code>MmNumberOfPhysicalPages</code>  决定的<br />\n物理页如何管理：每一个物理页都对应一个  <code>MMPFN</code>  的结构<br />\n如何通过帧数组找物理页和如何通过物理页找帧数组都已经知道了。</p>\n<h1 id=\"物理页的状态\"><a class=\"anchor\" href=\"#物理页的状态\">#</a> 物理页的状态</h1>\n<p>物理页有着不同的状态，正在被使用的和没有被使用的，又分为好多状态。</p>\n<p><code>_MMPFN</code>  结构体成员  <code>u3</code>  ：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">union</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    MMPFNENTRY e1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        USHORT ShortFlags<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        USHORT ReferenceCount<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> e2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span> u3<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>我们查看其成员  <code>e1</code>  的结构：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_MMPFNENTRY</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    ULONG Modified <span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    ULONG ReadInProgress <span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    ULONG WriteInProgress <span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    ULONG PrototypePte<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    ULONG PageColor <span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    ULONG ParityError <span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    ULONG PageLocation <span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    ULONG RemovalRequested <span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    ULONG CacheAttribute <span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    ULONG Rom <span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    ULONG LockCharged <span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    ULONG DontUse <span class=\"token operator\">:</span> <span class=\"token number\">16</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//overlays USHORT for reference count field.</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span> MMPFNENTRY<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>其中的  <code>ULONG PageLocation : 3;</code>  成员就决定了当前物理页处于什么状态。</p>\n<p>以下是没有被使用的几种状态：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>0：MmZeroedPageListHead</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>1：MmFreePageListHead</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>2：MmStandbyPageListHead</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>3：MmModifiedPageListHead</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>4：MmModifiedNoWritePageListHead</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>5：MmBadPageListHead</pre></td></tr></table></figure><h2 id=\"操作系统的6个链表\"><a class=\"anchor\" href=\"#操作系统的6个链表\">#</a> 操作系统的 6 个链表</h2>\n<p>&lt;1&gt; MmBadPageListHead<br />\n 坏链</p>\n<p>&lt;2&gt; MmZeroedPageListHead<br />\n 零化链表（是系统在空闲的时候进行零化的，不是程序自己清零的那种）</p>\n<p>&lt;3&gt; MmFreePageListHead<br />\n 空闲链表（物理页是周转使用的，刚被释放的物理页是没有清 0，系统空闲的时候有专门的线程从这个队列摘取物理页，加以清 0 后再挂入 MmZeroedPageListHead）</p>\n<p>&lt;4&gt; MmStandbyPageListHead<br />\n 备用链表（当系统内存不够的时候，操作系统会把物理内存中的数据交换到硬盘上，此时页面不是直接挂到空闲链表上去，而是挂到备用链表上，虽然我释放了，但里边的内容还是有意义的）</p>\n<p>&lt;5&gt; MmModifiedPageListHead</p>\n<p>&lt;6&gt; MmModifiedNoWritePageListHead</p>\n<p>具体可以参考 《Windows 内核原理与实现》</p>\n<p>我们看一下这些链表的结构：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_MMPFNLIST</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    PFN_NUMBER Total<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    MMLISTS ListName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    PFN_NUMBER Flink<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    PFN_NUMBER Blink<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span> MMPFNLIST<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>MMPFNLIST MmZeroedPageListHead <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                    <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// Total</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                    ZeroedPageList<span class=\"token punctuation\">,</span> <span class=\"token comment\">// ListName</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                    MM_EMPTY_LIST<span class=\"token punctuation\">,</span> <span class=\"token comment\">//Flink</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                    MM_EMPTY_LIST  <span class=\"token comment\">// Blink</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>MMPFNLIST MmFreePageListHead <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                    <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// Total</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                    FreePageList<span class=\"token punctuation\">,</span> <span class=\"token comment\">// ListName</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                    MM_EMPTY_LIST<span class=\"token punctuation\">,</span> <span class=\"token comment\">//Flink</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                    MM_EMPTY_LIST  <span class=\"token comment\">// Blink</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>MMPFNLIST MmStandbyPageListHead <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                    <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// Total</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                    StandbyPageList<span class=\"token punctuation\">,</span> <span class=\"token comment\">// ListName</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                    MM_EMPTY_LIST<span class=\"token punctuation\">,</span> <span class=\"token comment\">//Flink</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                    MM_EMPTY_LIST  <span class=\"token comment\">// Blink</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>MMPFNLIST MmModifiedPageListHead <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                    <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// Total</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                    ModifiedPageList<span class=\"token punctuation\">,</span> <span class=\"token comment\">// ListName</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                    MM_EMPTY_LIST<span class=\"token punctuation\">,</span> <span class=\"token comment\">//Flink</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                    MM_EMPTY_LIST  <span class=\"token comment\">// Blink</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>MMPFNLIST MmModifiedNoWritePageListHead <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                    <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// Total</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                    ModifiedNoWritePageList<span class=\"token punctuation\">,</span> <span class=\"token comment\">// ListName</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                    MM_EMPTY_LIST<span class=\"token punctuation\">,</span> <span class=\"token comment\">//Flink</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                    MM_EMPTY_LIST  <span class=\"token comment\">// Blink</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>MMPFNLIST MmBadPageListHead <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                    <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// Total</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                    BadPageList<span class=\"token punctuation\">,</span> <span class=\"token comment\">// ListName</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                    MM_EMPTY_LIST<span class=\"token punctuation\">,</span> <span class=\"token comment\">//Flink</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                    MM_EMPTY_LIST  <span class=\"token comment\">// Blink</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token comment\">// Note the ROM page listhead is deliberately not in the set</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token comment\">// of MmPageLocationList ranges.</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>MMPFNLIST MmRomPageListHead <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>                    <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// Total</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>                    StandbyPageList<span class=\"token punctuation\">,</span> <span class=\"token comment\">// ListName</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>                    MM_EMPTY_LIST<span class=\"token punctuation\">,</span> <span class=\"token comment\">//Flink</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>                    MM_EMPTY_LIST  <span class=\"token comment\">// Blink</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>PMMPFNLIST MmPageLocationList<span class=\"token punctuation\">[</span>NUMBER_OF_PAGE_LISTS<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>                                      <span class=\"token operator\">&amp;</span>MmZeroedPageListHead<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>                                      <span class=\"token operator\">&amp;</span>MmFreePageListHead<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>                                      <span class=\"token operator\">&amp;</span>MmStandbyPageListHead<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>                                      <span class=\"token operator\">&amp;</span>MmModifiedPageListHead<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>                                      <span class=\"token operator\">&amp;</span>MmModifiedNoWritePageListHead<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>                                      <span class=\"token operator\">&amp;</span>MmBadPageListHead<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>                                      <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>                                      <span class=\"token constant\">NULL</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>那我们该如何把这些串起来呢？<br />\n先来看一张表：</p>\n<p><img data-src=\"image002.png\" alt=\"\" /></p>\n<p>理解这六个链表是如何和 MMPFN 结构串起来的。</p>\n<p>在 Windbg 中查看一下  <code>MmZeroedPageListHead</code>  链表：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kd&gt; dd MmZeroedPageListHead l4</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>805528e8  0008ed15 00000000 0005a628 00039e07</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>kd&gt; dt _MMPFNLIST 805528e8</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>nt!_MMPFNLIST</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   +0x000 Total            : 0x8ed15</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   +0x004 ListName         : 0 ( ZeroedPageList )</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   +0x008 Flink            : 0x5a628</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   +0x00c Blink            : 0x39e07</pre></td></tr></table></figure><figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kd&gt; dd 80e00000 + 0x5a628*0x1C</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>817e2c60  000363b8 c058a679 ffffffff 00003000</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>kd&gt; dd 80e00000 + 000363b8*0x1C</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>813ee820  000902a8 c0006d01 0005a628 00003000</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>kd&gt; dd 80e00000 + 000902a8*0x1C</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>81dc4a60  0007fdb8 c0710af1 000363b8 00003000</pre></td></tr></table></figure><h2 id=\"正在使用中的内存\"><a class=\"anchor\" href=\"#正在使用中的内存\">#</a> 正在使用中的内存</h2>\n<p>查看一个进程所占用的所有物理页：</p>\n<p>这里以  <code>DbgView</code>  为例:</p>\n<p>在 Windbg 中查看 <code>DbgView</code>  的  <code>EPROCESS</code>  结构体：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kd&gt; dt _EPROCESS 89e21830</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>nt!_EPROCESS</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  ……</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  ……</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  +0x1f8 Vm               : _MMSUPPORT</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  ……</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  ……</pre></td></tr></table></figure><figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kd&gt; dt _MMSUPPORT 89e21830+0x1f8</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>nt!_MMSUPPORT</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   +0x000 LastTrimTime     : _LARGE_INTEGER 0x01d86059&#96;8f011bc0</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   +0x008 Flags            : _MMSUPPORT_FLAGS</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   +0x00c PageFaultCount   : 0x41b</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   +0x010 PeakWorkingSetSize : 0x3da</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   +0x014 WorkingSetSize   : 0x3d5</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   +0x018 MinimumWorkingSetSize : 0x32</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   +0x01c MaximumWorkingSetSize : 0x159</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   +0x020 VmWorkingSetList : 0xc0883000 _MMWSL</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   +0x024 WorkingSetExpansionLinks : _LIST_ENTRY [ 0x8a063dd4 - 0x89d34ee4 ]</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   +0x02c Claim            : 0</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   +0x030 NextEstimationSlot : 0</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   +0x034 NextAgingSlot    : 0</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   +0x038 EstimatedAvailable : 0</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   +0x03c GrowthSinceLastEstimate : 0x41b</pre></td></tr></table></figure>",
            "tags": [
                "物理内存",
                "MmAddPhysicalMemoryEx"
            ]
        },
        {
            "id": "https://or0kit.github.io/Bin/Core/WindowsXp/MemoryManagement/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86-03Mapped%20Memory/",
            "url": "https://or0kit.github.io/Bin/Core/WindowsXp/MemoryManagement/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86-03Mapped%20Memory/",
            "title": "内存管理-03Mapped Memory",
            "date_published": "2022-04-15T07:16:58.000Z",
            "content_html": "<h1 id=\"mapped-memory\"><a class=\"anchor\" href=\"#mapped-memory\">#</a> Mapped Memory</h1>\n<p>前面了解了私有内存，接下来认识一下映射内存，这种内存的好处是可以跟其他进程共享物理页。</p>\n<p>在前面的用 <code>!vad</code>  查看内存结构中，可以发现后面有文件路径的就是映射内存。</p>\n<p>可以共享一个物理页，也可以共享一份文件。</p>\n<h2 id=\"实验演示\"><a class=\"anchor\" href=\"#实验演示\">#</a> 实验演示</h2>\n<h3 id=\"共享物理页\"><a class=\"anchor\" href=\"#共享物理页\">#</a> 共享物理页</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;Windows.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">BUFSIZ</span> <span class=\"token expression\"><span class=\"token number\">0x200</span></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MapFileName</span> <span class=\"token string\">\"SharedMemory\"</span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token comment\">// 内核对象：1、物理页  2、文件</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tHANDLE g_hMapFile <span class=\"token operator\">=</span> <span class=\"token function\">CreateFileMapping</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\tINVALID_HANDLE_VALUE<span class=\"token punctuation\">,</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\tPAGE_READWRITE<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>BUFSIZ<span class=\"token punctuation\">,</span>MapFileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token comment\">// 将物理页与线性地址进行映射</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tLPTSTR g_lpBuff <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>LPTSTR<span class=\"token punctuation\">)</span><span class=\"token function\">MapViewOfFile</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\tg_hMapFile<span class=\"token punctuation\">,</span>FILE_MAP_ALL_ACCESS<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t<span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>BUFSIZ<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>PDWORD<span class=\"token punctuation\">)</span>g_lpBuff <span class=\"token operator\">=</span> <span class=\"token number\">0x12345678</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A进程写入地址：%p，内容：%x\\t\\n\"</span><span class=\"token punctuation\">,</span>g_lpBuff<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>PDWORD<span class=\"token punctuation\">)</span>g_lpBuff<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"image001.png\" alt=\"\" /></p>\n<p>接下来我们观察内存结构</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kd&gt; !vad 0x8a098e90</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>VAD   Level     Start       End Commit</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>……</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>……</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>89acf150  8       3a0       3a0      0 Mapped       READWRITE          Pagefile section, shared commit 0x1</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>……</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>……</pre></td></tr></table></figure><p>可以看到是一个页的大小。所以映射内存也是以页为单位的。</p>\n<p>接下来在 B 进程中读取一下共享内存</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;Windows.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">BUFSIZ</span> <span class=\"token expression\"><span class=\"token number\">0x200</span></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MapFileName</span> <span class=\"token string\">\"SharedMemory\"</span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token comment\">// 内核对象：1、物理页  2、文件</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tHANDLE g_hMapFile <span class=\"token operator\">=</span> <span class=\"token function\">OpenFileMapping</span><span class=\"token punctuation\">(</span>FILE_MAP_ALL_ACCESS<span class=\"token punctuation\">,</span>FALSE<span class=\"token punctuation\">,</span>MapFileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token comment\">// 将物理页与线性地址进行映射</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\tLPTSTR g_lpBuff <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>LPTSTR<span class=\"token punctuation\">)</span><span class=\"token function\">MapViewOfFile</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\tg_hMapFile<span class=\"token punctuation\">,</span>FILE_MAP_ALL_ACCESS<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t<span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>BUFSIZ<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"B进程读地址：%p，内容：%x\\t\\n\"</span><span class=\"token punctuation\">,</span>g_lpBuff<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>PDWORD<span class=\"token punctuation\">)</span>g_lpBuff<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"image002.png\" alt=\"\" /></p>\n<p>查看 B 进程的内存结构：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kd&gt; !vad 0x8a05b8b8</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>VAD   Level     Start       End Commit</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>……</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>……</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>8a0ff3b0  8       3a0       3a0      0 Mapped       READWRITE          Pagefile section, shared commit 0x1</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>……</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>……</pre></td></tr></table></figure><p>可以看到也是一个页的大小。</p>\n<h3 id=\"共享文件\"><a class=\"anchor\" href=\"#共享文件\">#</a> 共享文件</h3>\n<p>文件映射进内存</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;Windows.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MapFileName</span> <span class=\"token string\">\"SharedMemory\"</span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tHANDLE g_hFile <span class=\"token operator\">=</span> <span class=\"token function\">CreateFile</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token string\">\"C:\\\\Hello.exe\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\tGENERIC_READ<span class=\"token operator\">|</span>GENERIC_WRITE<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\tFILE_SHARE_READ<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\tOPEN_ALWAYS<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\tFILE_ATTRIBUTE_NORMAL<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t<span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tHANDLE g_hMapFile <span class=\"token operator\">=</span> <span class=\"token function\">CreateFileMapping</span><span class=\"token punctuation\">(</span>g_hFile<span class=\"token punctuation\">,</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span>PAGE_READWRITE<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> BUFSIZ<span class=\"token punctuation\">,</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token keyword\">void</span><span class=\"token operator\">*</span> g_lpBuff <span class=\"token operator\">=</span> <span class=\"token function\">MapViewOfFile</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\tg_hMapFile<span class=\"token punctuation\">,</span>FILE_MAP_ALL_ACCESS<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t<span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>BUFSIZ<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"共享内存地址：%p\\t\\n\"</span><span class=\"token punctuation\">,</span>g_lpBuff<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"image003.png\" alt=\"\" /></p>\n<p>观察内存结构:</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kd&gt; !vad 0x8a0a6b00</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>VAD   Level     Start       End Commit</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>……</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>……</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>89ad82d8  8       3a0       3a0      0 Mapped       READWRITE          \\Hello.exe</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>……</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>89ac3e88  3     7c800     7c91d      6 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\kernel32.dll</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>89e0fbc0  2     7c920     7c9b2      5 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\ntdll.dll</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>……</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>……</pre></td></tr></table></figure><p>可以看到在我们映射的  <code>Hello.exe</code>  文件。这种共享文件特别适合那种大的文件。</p>\n<p>** 细心的人可能发现了。** 我们的文件是  <code>READWRITE</code>  而有的是  <code>EXECUTE_WRITECOPY</code> ?</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;Windows.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token function\">LoadLibrary</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"C:\\\\Hello.exe\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>观察内存结构:</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kd&gt; !vad 0x89ad1e98</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>VAD   Level     Start       End Commit</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>……</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>……</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>89ac98d0  8       3a0       3aa      4 Mapped  Exe  EXECUTE_WRITECOPY  \\Hello.exe</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>……</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>……</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>89d0ec98  8     77fc0     77fd0      2 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\secur32.dll</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>89ad18c8  3     7c800     7c91d      6 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\kernel32.dll</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>8a15c988  2     7c920     7c9b2      5 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\ntdll.dll</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>……</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>……</pre></td></tr></table></figure><p>通过这些我们应该明白了什么是  <code>LoadLibrary</code>  。跟映射文件唯一的区别就是属性， <code>LoadLibrary</code>  的属性只有一种就是  <code>EXECUTE_WRITECOPY</code> 。</p>\n<p>当了解这些后我们对内存就会了如指掌，如果想模块隐藏只能申请一块私有内存然后在里面填写数据，拉伸、抹去 PE 指纹，这样想要检测就很难了。</p>\n",
            "tags": [
                "共享物理页",
                "共享文件",
                "LoadLibrary的本质"
            ]
        },
        {
            "id": "https://or0kit.github.io/Bin/Core/WindowsXp/MemoryManagement/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86-02Private%20Memory/",
            "url": "https://or0kit.github.io/Bin/Core/WindowsXp/MemoryManagement/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86-02Private%20Memory/",
            "title": "内存管理-02Private Memory",
            "date_published": "2022-04-15T07:16:55.000Z",
            "content_html": "<h1 id=\"申请内存的两种方式\"><a class=\"anchor\" href=\"#申请内存的两种方式\">#</a> 申请内存的两种方式</h1>\n<p>&lt;1&gt; 通过  <code>VirtualAlloc</code>  /  <code>VirtualAllocEx</code>  申请的：Private Memory</p>\n<p>&lt;2&gt; 通过  <code>CreateFileMapping</code>  映射的：Mapped Memory</p>\n<h2 id=\"验证内存种类\"><a class=\"anchor\" href=\"#验证内存种类\">#</a> 验证内存种类</h2>\n<p>接下来写代码去验证上面的两种内存种类。</p>\n<p>在复习一下  <code>VirtualAlloc</code>  函数：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>LPVOID VirtualAlloc<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tLPVOID lpAddress<span class=\"token punctuation\">,</span> \t<span class=\"token comment\">// 要分配的内存区域的地址</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tDWORD dwSize<span class=\"token punctuation\">,</span> \t\t<span class=\"token comment\">// 分配的大小</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tDWORD flAllocationType<span class=\"token punctuation\">,</span> \t<span class=\"token comment\">// 分配的类型</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tDWORD flProtect \t<span class=\"token comment\">// 该内存的初始保护属性</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>参数介绍：</p>\n<p>申请内存的地址。可以指定地址，但是物理页我们不知道哪里的地址是否可用，所以一般为 NULL 。<br />\n申请内存的大小。一般以页的整数倍进行申请，如：两页 0x1000*2 。<br />\n申请内存的类型。<br />\n常用的有两种类型：<br />\n <code>MEM_RESERVE</code>  : 先申请线性内存，但不占用物理内存<br />\n <code>MEM_COMMIT</code>  : 占用线性内存和物理内存。<strong>一会就打破这个认知！</strong><br />\n内存的状态。可读、可写、可执行。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;Windows.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">void</span><span class=\"token operator\">*</span> p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tp <span class=\"token operator\">=</span> <span class=\"token function\">VirtualAlloc</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x1000</span><span class=\"token punctuation\">,</span>MEM_COMMIT<span class=\"token punctuation\">,</span>PAGE_READWRITE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"p:%p\\t\\n\"</span><span class=\"token punctuation\">,</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token function\">VirtualFree</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>MEM_FREE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>先运行，不申请内存，查看此进程的内存结构：</p>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<p>申请后：</p>\n<p><img data-src=\"image002.png\" alt=\"\" /></p>\n<h2 id=\"验证-mem_reserve-与-mem_commit\"><a class=\"anchor\" href=\"#验证-mem_reserve-与-mem_commit\">#</a> 验证 MEM_RESERVE 与 MEM_COMMIT</h2>\n<p>我们使用 VirtualAlloc 这个函数的时候，第三个参数要传分配的类型，常见的一个是  <code>MEM_COMMIT</code>  ，另一个是  <code>MEM_RESERVE</code>  。</p>\n<p>前者申请后就会提供一个物理页，而后者会有记录但不会给你物理页，真的是这样的吗？</p>\n<p>之前的代码里我们传递的参数是 <code>MEM_COMMIT</code> ，但我们并没有给申请的地址赋值，我们来查看一下是否有物理页：</p>\n<p><img data-src=\"image003.png\" alt=\"\" /></p>\n<p>可以看到并没有 PTE，也就是没有挂物理页。</p>\n<p>更改上面的代码，给申请的地址赋值：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;Windows.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">void</span><span class=\"token operator\">*</span> p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tp <span class=\"token operator\">=</span> <span class=\"token function\">VirtualAlloc</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x1000</span><span class=\"token punctuation\">,</span>MEM_COMMIT<span class=\"token punctuation\">,</span>PAGE_READWRITE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"p:%p\\t\\n\"</span><span class=\"token punctuation\">,</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>p<span class=\"token operator\">=</span><span class=\"token number\">666</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token function\">VirtualFree</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>MEM_FREE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>可以看到：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kd&gt; !vtop 0aac01e0 0x3c0000</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>X86VtoP: Virt 00000000003c0000, pagedir 000000000aac01e0</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>X86VtoP: PAE PDPE 000000000aac01e0 - 000000004e48a801</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>X86VtoP: PAE PDE 000000004e48a008 - 000000004e723867</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>X86VtoP: PAE PTE 000000004e723e00 - 800000004ea37867</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>X86VtoP: PAE Mapped phys 000000004ea37000</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>Virtual address 3c0000 translates to physical address 4ea37000.</pre></td></tr></table></figure><p>可以看到挂上物理页了。也就是说，就算使用 MEM_COMMIT 参数，如果不用的话，物理页也不会给你的。</p>\n<h1 id=\"堆与栈\"><a class=\"anchor\" href=\"#堆与栈\">#</a> 堆与栈</h1>\n<p>一个由 C/C++ 编译的程序占用的内存分为以下几个部分</p>\n<ol>\n<li>栈区（stack）: 由编译器自动分配释放 ，存放函数的参数值，局部变量的值等。其操作方式类似于数据结构中的栈</li>\n<li>堆区（heap）: 一般由程序员分配释放， 若程序员不释放，程序结束时可能由 OS 回收 。注意它与数据结构中的堆是两回事，分配方式倒是类似于链表。</li>\n<li>全局区（静态区）（static）: 全局变量和静态变量的存储是放在一块的，初始化的全局变量和静态变量在一块区域， 未初始化的全局变量和未初始化的静态变量在相邻的另一块区域。  程序结束后有系统释放</li>\n<li>文字常量区：常量字符串就是放在这里的。 程序结束后由系统释放</li>\n<li>程序代码区：存放函数体的二进制代码。</li>\n</ol>\n<h2 id=\"堆内存与-malloc-分析\"><a class=\"anchor\" href=\"#堆内存与-malloc-分析\">#</a> 堆内存与 malloc 分析</h2>\n<p>在 c 程序中我们经常用 malloc 来 “申请内存”。<br />\n但它不是真正申请内存，它的底层实现是  <code>HeapAlloc</code>  ，就是申请堆内存，而这堆内存是进程创建好后操作系统就分配好了的。<br />\n我们来做个实验验证一下：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;Windows.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tLPVOID p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    p <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"p: 0x%X\\n\"</span><span class=\"token punctuation\">,</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在没执行 malloc 前看一下进程的内存结构：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kd&gt; !vad 0x8a0fdfc0</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>VAD   Level     Start       End Commit</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>8a1ce638  1        10        10      1 Private      READWRITE          </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>8a056258  2        20        20      1 Private      READWRITE          </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>8a0fdfc0  0        30       12f      4 Private      READWRITE          </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>8a074aa0  3       130       132      0 Mapped       READONLY           Pagefile section, shared commit 0x3</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>89d0eb38  2       140       23f      9 Private      READWRITE          </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>89e05778  4       240       24f      6 Private      READWRITE          </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>8a0dfa00  3       250       25f      0 Mapped       READWRITE          Pagefile section, shared commit 0x3</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>89ace2a8  5       260       275      0 Mapped       READONLY           \\WINDOWS\\system32\\unicode.nls</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>8a09a2e8  4       280       2c0      0 Mapped       READONLY           \\WINDOWS\\system32\\locale.nls</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>8a112a20  6       2d0       310      0 Mapped       READONLY           \\WINDOWS\\system32\\sortkey.nls</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>89ad4380  5       320       325      0 Mapped       READONLY           \\WINDOWS\\system32\\sorttbls.nls</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>89d1bcb8  7       330       370      0 Mapped       READONLY           Pagefile section, shared commit 0x41</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>8a09be68  6       380       38f      3 Private      READWRITE          </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>8a167bd0  7       390       392      0 Mapped       READONLY           \\WINDOWS\\system32\\ctype.nls</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>89d91d08  8       3a0       3ad      0 Mapped       READWRITE          Pagefile section, shared commit 0xe</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>8a04df30  9       3b0       3b0      1 Private      READWRITE          </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>89ac7148  1       400       42d      7 Mapped  Exe  EXECUTE_WRITECOPY  \\Documents and Settings\\Administrator\\My Documents\\TestHeapAndStack\\Debug\\TestHeapAndStack.exe</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>8a1f8b78  4     76d70     76d91      2 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\apphelp.dll</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>89ad66a8  5     77bd0     77bd7      2 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\version.dll</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>8a19ad48  6     77da0     77e48      6 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\advapi32.dll</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>8a16f5b8  7     77e50     77ee2      2 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\rpcrt4.dll</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>89ad5388  8     77fc0     77fd0      2 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\secur32.dll</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>89dbbc00  3     7c800     7c91d      6 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\kernel32.dll</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>89d11fd8  2     7c920     7c9b2      5 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\ntdll.dll</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>89ad1d20  4     7f6f0     7f7ef      0 Mapped       EXECUTE_READ       Pagefile section, shared commit 0x7</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>8a175400  3     7ffa0     7ffd2      0 Mapped       READONLY           Pagefile section, shared commit 0x33</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>8a0a5dc8  4     7ffdd     7ffdd      1 Private      READWRITE          </pre></td></tr><tr><td data-num=\"30\"></td><td><pre>89d18918  5     7ffdf     7ffdf      1 Private      READWRITE</pre></td></tr></table></figure><p>执行 malloc 后，程序打印出的地址为： <code>p: 003807A8</code> ，此时再看内存结构：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kd&gt; !vad 0x8a0fdfc0</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>VAD   Level     Start       End Commit</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>8a1ce638  1        10        10      1 Private      READWRITE          </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>8a056258  2        20        20      1 Private      READWRITE          </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>8a0fdfc0  0        30       12f      4 Private      READWRITE          </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>8a074aa0  3       130       132      0 Mapped       READONLY           Pagefile section, shared commit 0x3</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>89d0eb38  2       140       23f      9 Private      READWRITE          </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>89e05778  4       240       24f      6 Private      READWRITE          </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>8a0dfa00  3       250       25f      0 Mapped       READWRITE          Pagefile section, shared commit 0x3</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>89ace2a8  5       260       275      0 Mapped       READONLY           \\WINDOWS\\system32\\unicode.nls</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>8a09a2e8  4       280       2c0      0 Mapped       READONLY           \\WINDOWS\\system32\\locale.nls</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>8a112a20  6       2d0       310      0 Mapped       READONLY           \\WINDOWS\\system32\\sortkey.nls</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>89ad4380  5       320       325      0 Mapped       READONLY           \\WINDOWS\\system32\\sorttbls.nls</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>89d1bcb8  7       330       370      0 Mapped       READONLY           Pagefile section, shared commit 0x41</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>8a09be68  6       380       38f      5 Private      READWRITE          </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>8a167bd0  7       390       392      0 Mapped       READONLY           \\WINDOWS\\system32\\ctype.nls</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>89d91d08  8       3a0       3ad      0 Mapped       READWRITE          Pagefile section, shared commit 0xe</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>8a04df30  9       3b0       3b0      1 Private      READWRITE          </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>89ac7148  1       400       42d      7 Mapped  Exe  EXECUTE_WRITECOPY  \\Documents and Settings\\Administrator\\My Documents\\TestHeapAndStack\\Debug\\TestHeapAndStack.exe</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>8a1f8b78  4     76d70     76d91      2 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\apphelp.dll</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>89ad66a8  5     77bd0     77bd7      2 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\version.dll</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>8a19ad48  6     77da0     77e48      6 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\advapi32.dll</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>8a16f5b8  7     77e50     77ee2      2 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\rpcrt4.dll</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>89ad5388  8     77fc0     77fd0      2 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\secur32.dll</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>89dbbc00  3     7c800     7c91d      6 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\kernel32.dll</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>89d11fd8  2     7c920     7c9b2      5 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\ntdll.dll</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>89ad1d20  4     7f6f0     7f7ef      0 Mapped       EXECUTE_READ       Pagefile section, shared commit 0x7</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>8a175400  3     7ffa0     7ffd2      0 Mapped       READONLY           Pagefile section, shared commit 0x33</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>8a0a5dc8  4     7ffdd     7ffdd      1 Private      READWRITE          </pre></td></tr><tr><td data-num=\"30\"></td><td><pre>89d18918  5     7ffdf     7ffdf      1 Private      READWRITE</pre></td></tr></table></figure><p><code>8a09be68  6       380       38f      5 Private      READWRITE </code>  这个线性地址早已存在。<br />\n所以 malloc 就是从已经分配好的线性地址也就是堆内存中取出地址来用。</p>\n<h2 id=\"栈内存与全局变量区的内存\"><a class=\"anchor\" href=\"#栈内存与全局变量区的内存\">#</a> 栈内存与全局变量区的内存</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;Windows.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> x<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">int</span> y <span class=\"token operator\">=</span> <span class=\"token number\">0x12345678</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"x:%x y:%x \\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在运行前 (可以下断点) 查看进程的内存结构：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>VAD   Level     Start       End Commit</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>8a108ef0  1        10        10      1 Private      READWRITE</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>89d0f8e8  2        20        20      1 Private      READWRITE</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>8a1d4360  0        30       12f      4 Private      READWRITE</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>89d1ef10  3       130       132      0 Mapped       READONLY           Pagefile section, shared commit 0x3</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>89e01950  2       140       23f      8 Private      READWRITE          </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>8a056258  4       240       24f      6 Private      READWRITE          </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>8a19ef10  3       250       25f      0 Mapped       READWRITE          Pagefile section, shared commit 0x3</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>8a16f160  5       260       275      0 Mapped       READONLY           \\WINDOWS\\system32\\unicode.nls</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>89d19408  4       280       2c0      0 Mapped       READONLY           \\WINDOWS\\system32\\locale.nls</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>89dabd28  6       2d0       310      0 Mapped       READONLY           \\WINDOWS\\system32\\sortkey.nls</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>89ad47b8  5       320       325      0 Mapped       READONLY           \\WINDOWS\\system32\\sorttbls.nls</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>8a12e820  7       330       370      0 Mapped       READONLY           Pagefile section, shared commit 0x41</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>89d79bc8  6       380       38f      3 Private      READWRITE          </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>8a062d58  7       390       392      0 Mapped       READONLY           \\WINDOWS\\system32\\ctype.nls</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>89d9a2a8  8       3a0       3ad      0 Mapped       READWRITE          Pagefile section, shared commit 0xe</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>89d0eb38  9       3b0       3b0      1 Private      READWRITE          </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>8a0348b8  1       400       42e      8 Mapped  Exe  EXECUTE_WRITECOPY  \\Documents and Settings\\Administrator\\My Documents\\TestHeapAndStack\\Debug\\TestHeapAndStack.exe</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>8a065420  4     76d70     76d91      2 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\apphelp.dll</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>89d1ad68  5     77bd0     77bd7      2 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\version.dll</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>8a034a78  6     77da0     77e48      6 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\advapi32.dll</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>89d03940  7     77e50     77ee2      2 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\rpcrt4.dll</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>89dbc488  8     77fc0     77fd0      2 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\secur32.dll</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>89cf8798  3     7c800     7c91d      6 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\kernel32.dll</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>8a0348e8  2     7c920     7c9b2      5 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\ntdll.dll</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>89cf87c8  4     7f6f0     7f7ef      0 Mapped       EXECUTE_READ       Pagefile section, shared commit 0x7</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>89ad22e8  3     7ffa0     7ffd2      0 Mapped       READONLY           Pagefile section, shared commit 0x33</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>8a072a00  4     7ffdb     7ffdb      1 Private      READWRITE          </pre></td></tr><tr><td data-num=\"29\"></td><td><pre>89da64c0  5     7ffdf     7ffdf      1 Private      READWRITE</pre></td></tr></table></figure><p>运行后打印信息如下： <code>x:0042AC50 y:0012FF7C</code>  其内存结构如下：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>8a108ef0  1        10        10      1 Private      READWRITE</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>89d0f8e8  2        20        20      1 Private      READWRITE</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>8a1d4360  0        30       12f      4 Private      READWRITE</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>89d1ef10  3       130       132      0 Mapped       READONLY           Pagefile section, shared commit 0x3</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>89e01950  2       140       23f      8 Private      READWRITE          </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>8a056258  4       240       24f      6 Private      READWRITE          </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>8a19ef10  3       250       25f      0 Mapped       READWRITE          Pagefile section, shared commit 0x3</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>8a16f160  5       260       275      0 Mapped       READONLY           \\WINDOWS\\system32\\unicode.nls</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>89d19408  4       280       2c0      0 Mapped       READONLY           \\WINDOWS\\system32\\locale.nls</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>89dabd28  6       2d0       310      0 Mapped       READONLY           \\WINDOWS\\system32\\sortkey.nls</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>89ad47b8  5       320       325      0 Mapped       READONLY           \\WINDOWS\\system32\\sorttbls.nls</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>8a12e820  7       330       370      0 Mapped       READONLY           Pagefile section, shared commit 0x41</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>89d79bc8  6       380       38f      5 Private      READWRITE          </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>8a062d58  7       390       392      0 Mapped       READONLY           \\WINDOWS\\system32\\ctype.nls</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>89d9a2a8  8       3a0       3ad      0 Mapped       READWRITE          Pagefile section, shared commit 0xe</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>89d0eb38  9       3b0       3b0      1 Private      READWRITE          </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>8a0348b8  1       400       42e      8 Mapped  Exe  EXECUTE_WRITECOPY  \\Documents and Settings\\Administrator\\My Documents\\TestHeapAndStack\\Debug\\TestHeapAndStack.exe</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>8a065420  4     76d70     76d91      2 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\apphelp.dll</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>89d1ad68  5     77bd0     77bd7      2 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\version.dll</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>8a034a78  6     77da0     77e48      6 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\advapi32.dll</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>89d03940  7     77e50     77ee2      2 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\rpcrt4.dll</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>89dbc488  8     77fc0     77fd0      2 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\secur32.dll</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>89cf8798  3     7c800     7c91d      6 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\kernel32.dll</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>8a0348e8  2     7c920     7c9b2      5 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\ntdll.dll</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>89cf87c8  4     7f6f0     7f7ef      0 Mapped       EXECUTE_READ       Pagefile section, shared commit 0x7</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>89ad22e8  3     7ffa0     7ffd2      0 Mapped       READONLY           Pagefile section, shared commit 0x33</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>8a072a00  4     7ffdb     7ffdb      1 Private      READWRITE          </pre></td></tr><tr><td data-num=\"28\"></td><td><pre>89da64c0  5     7ffdf     7ffdf      1 Private      READWRITE</pre></td></tr></table></figure><p>可以发现这两处内存地址也是提前申请好的。</p>\n<p>至此结束。</p>\n",
            "tags": [
                "VirtualAlloc",
                "MEM_COMMIT与MEM_RESERVE",
                "malloc",
                "堆内存",
                "栈内存",
                "全局区内存"
            ]
        },
        {
            "id": "https://or0kit.github.io/Bin/Core/WindowsXp/MemoryManagement/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86-01%E7%BA%BF%E6%80%A7%E5%9C%B0%E5%9D%80%E7%9A%84%E7%AE%A1%E7%90%86/",
            "url": "https://or0kit.github.io/Bin/Core/WindowsXp/MemoryManagement/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86-01%E7%BA%BF%E6%80%A7%E5%9C%B0%E5%9D%80%E7%9A%84%E7%AE%A1%E7%90%86/",
            "title": "内存管理-01线性地址的管理",
            "date_published": "2022-04-14T07:16:52.000Z",
            "content_html": "<h1 id=\"楔子\"><a class=\"anchor\" href=\"#楔子\">#</a> 楔子</h1>\n<p>Windows 的内存管理是非常复杂的，目前仅学习其线性地址、私有内存、映射内存、物理内存是如何管理的。</p>\n<h1 id=\"线性地址的管理\"><a class=\"anchor\" href=\"#线性地址的管理\">#</a> 线性地址的管理</h1>\n<p>进程空间地址的划分：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">分区</th>\n<th style=\"text-align:left\">x86 32 位 Windows</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">空指针赋值区</td>\n<td style=\"text-align:left\">0x00000000 - 0x0000FFFF</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">用户模式区</td>\n<td style=\"text-align:left\">0x00010000 - 0x7FFEFFFF</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">64KB 禁入区</td>\n<td style=\"text-align:left\">0x7FFF0000 - 0x7FFFFFFF</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">内核</td>\n<td style=\"text-align:left\">0x80000000 - 0xFFFFFFFF</td>\n</tr>\n</tbody>\n</table>\n<p>进程虽然名义上有 4G 的虚拟内存空间，但只有低 2G 才是属于自己的，高 2G 是共享的内核空间。</p>\n<p>学过之前的知识，上面那些不能访问的地址，只要挂上一个物理页，我们也是可以访问的。</p>\n<p>但是在应用层我们必须得知道哪些地址可以访问哪些地址不能访问，以及哪些地址已经申请了线性地址，所以这就需要记录了。<br />\n记录哪些线性地址分配了，那些线性地址没有分配，无论是内核空间还是用户空间都需要记录。</p>\n<p>下图是 Windows 20003 SP1 的内核空间内存结构图：</p>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<p>详细的内容在《Windows 内核原理与实现》一书中有。</p>\n<p>下面学习用户空间是如何记录的。</p>\n<p>当你在一个进程空间中申请内存的时候，系统会查哪一个线性地址没有被占用。</p>\n<p>那么 Windows 是查询什么呢？学过数据结构的都知道，树的查询效率是要比链表高的，所以 Windows 在用户空间设计了一个二叉树，这上面记录着进程中线性地址的使用情况。</p>\n<p>而这个二叉树结构在进程结构体  <code>EPROCESS</code>  上:</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>EPROCESS</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t...</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t+0x11c VadRoot</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t...</pre></td></tr></table></figure><p>结构体说明：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kd&gt; dt _MMVAD</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>nt!_MMVAD</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   +0x000 StartingVpn      : Uint4B        &#x2F;&#x2F; 线性地址开始位置 (页为单位)</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   +0x004 EndingVpn        : Uint4B        &#x2F;&#x2F; 线性地址结束位置 (页为单位)</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   +0x008 Parent           : Ptr32 _MMVAD  &#x2F;&#x2F; 父节点</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   +0x00c LeftChild        : Ptr32 _MMVAD  &#x2F;&#x2F; 左子树</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   +0x010 RightChild       : Ptr32 _MMVAD  &#x2F;&#x2F; 右子树</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   +0x014 u                : __unnamed</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   +0x018 ControlArea      : Ptr32 _CONTROL_AREA</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   +0x01c FirstPrototypePte : Ptr32 _MMPTE</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   +0x020 LastContiguousPte : Ptr32 _MMPTE</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   +0x024 u2               : __unnamed</pre></td></tr></table></figure><p>Windows XP 的源码中的定义为：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_MMVAD</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    ULONG_PTR StartingVpn<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    ULONG_PTR EndingVpn<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_MMVAD</span> <span class=\"token operator\">*</span>Parent<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_MMVAD</span> <span class=\"token operator\">*</span>LeftChild<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_MMVAD</span> <span class=\"token operator\">*</span>RightChild<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">union</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        ULONG_PTR LongFlags<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        MMVAD_FLAGS VadFlags<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> u<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    PCONTROL_AREA ControlArea<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    PMMPTE FirstPrototypePte<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    PMMPTE LastContiguousPte<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">union</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        ULONG LongFlags2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        MMVAD_FLAGS2 VadFlags2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> u2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span> MMVAD<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>PMMVAD<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"实验验证\"><a class=\"anchor\" href=\"#实验验证\">#</a> 实验验证</h2>\n<p>在虚拟机中我打开了 DbgView.exe 进程，接下来查看其  <code>EPROCESS</code>  结构体，看看其  <code>+0x11c</code>  的位置:</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kd&gt; !process 0 0</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>**** NT ACTIVE PROCESS DUMP ****</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>……</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>……</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Failed to get VadRoot</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>PROCESS 89e21830  SessionId: 0  Cid: 0758    Peb: 7ffdd000  ParentCid: 043c</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    DirBase: 0aac01a0  ObjectTable: e3365a28  HandleCount:  56.</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    Image: Dbgview.exe</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>kd&gt; dt _EPROCESS 89e21830</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>nt!_EPROCESS</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  ……</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  ……</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   +0x11c VadRoot          : 0x8a173990 Void</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   +0x120 VadHint          : 0x89d23eb0 Void</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   +0x124 CloneRoot        : (null) </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   +0x128 NumberOfPrivatePages : 0xbb</pre></td></tr></table></figure><p>查看  <code>VadRoot</code>  的结构：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kd&gt; dt _MMVAD 0x8a173990</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>nt!_MMVAD</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   +0x000 StartingVpn      : 0x9e0</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   +0x004 EndingVpn        : 0xadf</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   +0x008 Parent           : (null) </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   +0x00c LeftChild        : 0x89dac868 _MMVAD</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   +0x010 RightChild       : 0x89d23eb0 _MMVAD</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   +0x014 u                : __unnamed</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   +0x018 ControlArea      : 0x0a080004 _CONTROL_AREA</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   +0x01c FirstPrototypePte : 0x7266744e _MMPTE</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   +0x020 LastContiguousPte : 0x89cf0f28 _MMPTE</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   +0x024 u2               : __unnamed</pre></td></tr></table></figure><p>我们遍历其右分支：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kd&gt; dt 0x89d23eb0 _MMVAD</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>nt!_MMVAD</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   +0x000 StartingVpn      : 0x7c800</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   +0x004 EndingVpn        : 0x7c91d</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   +0x008 Parent           : 0x8a173990 _MMVAD</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   +0x00c LeftChild        : 0x89d12ae8 _MMVAD</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   +0x010 RightChild       : 0x8a164b48 _MMVAD</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   +0x014 u                : __unnamed</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   +0x018 ControlArea      : 0x8a076430 _CONTROL_AREA</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   +0x01c FirstPrototypePte : 0xe158d6e0 _MMPTE</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   +0x020 LastContiguousPte : 0xfffffffc _MMPTE</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   +0x024 u2               : __unnamed</pre></td></tr></table></figure><p>我们可以看到从  <code>0x7c800</code>  到  <code>0x7c91d</code>  (以页为单位) 都是被占用的，那么我们如何查看是被谁占用的呢？</p>\n<h3 id=\"查看是谁占用的内存\"><a class=\"anchor\" href=\"#查看是谁占用的内存\">#</a> 查看是谁占用的内存</h3>\n<p>注意  <code>MMVAD</code>  中的  <code>   +0x018 ControlArea      : 0x8a076430 _CONTROL_AREA</code></p>\n<p>我们在 Windbg 中查看：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kd&gt; dt _CONTROL_AREA 0x8a076430</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>nt!_CONTROL_AREA</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   +0x000 Segment          : 0xe158d6a0 _SEGMENT</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   +0x004 DereferenceList  : _LIST_ENTRY [ 0x0 - 0x0 ]</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   +0x00c NumberOfSectionReferences : 1</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   +0x010 NumberOfPfnReferences : 0xa6</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   +0x014 NumberOfMappedViews : 0x15</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   +0x018 NumberOfSubsections : 5</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   +0x01a FlushInProgressCount : 0</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   +0x01c NumberOfUserReferences : 0x16</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   +0x020 u                : __unnamed</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   +0x024 FilePointer      : 0x8a0763b8 _FILE_OBJECT</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   +0x028 WaitingForDeletion : (null) </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   +0x02c ModifiedWriteCount : 0</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   +0x02e NumberOfSystemCacheViews : 0</pre></td></tr></table></figure><p>观察到其  <code>+0x024 FilePointer      : 0x8a0763b8 _FILE_OBJECT</code></p>\n<p>接着查看：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kd&gt; dt _FILE_OBJECT 0x8a0763b8</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>nt!_FILE_OBJECT</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   +0x000 Type             : 0n5</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   +0x002 Size             : 0n112</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   +0x004 DeviceObject     : 0x89d68030 _DEVICE_OBJECT</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   +0x008 Vpb              : 0x8a0cb298 _VPB</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   +0x00c FsContext        : 0xe15415c8 Void</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   +0x010 FsContext2       : 0xe1541720 Void</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   +0x014 SectionObjectPointer : 0x8a076314 _SECTION_OBJECT_POINTERS</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   +0x018 PrivateCacheMap  : (null) </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   +0x01c FinalStatus      : 0n0</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   +0x020 RelatedFileObject : 0x8a198770 _FILE_OBJECT</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   +0x024 LockOperation    : 0 &#39;&#39;</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   +0x025 DeletePending    : 0 &#39;&#39;</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   +0x026 ReadAccess       : 0x1 &#39;&#39;</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   +0x027 WriteAccess      : 0 &#39;&#39;</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   +0x028 DeleteAccess     : 0 &#39;&#39;</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   +0x029 SharedRead       : 0x1 &#39;&#39;</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   +0x02a SharedWrite      : 0 &#39;&#39;</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>   +0x02b SharedDelete     : 0x1 &#39;&#39;</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>   +0x02c Flags            : 0x44042</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>   +0x030 FileName         : _UNICODE_STRING &quot;\\WINDOWS\\system32\\kernel32.dll&quot;</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>   +0x038 CurrentByteOffset : _LARGE_INTEGER 0x0</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>   +0x040 Waiters          : 0</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>   +0x044 Busy             : 0</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>   +0x048 LastLock         : (null) </pre></td></tr><tr><td data-num=\"27\"></td><td><pre>   +0x04c Lock             : _KEVENT</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>   +0x05c Event            : _KEVENT</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>   +0x06c CompletionContext : (null)</pre></td></tr></table></figure><p>可以发现是  <code>+0x030 FileName         : _UNICODE_STRING &quot;\\WINDOWS\\system32\\kernel32.dll&quot;</code> 。</p>\n<p>如果  <code>_CONTROL_AREA</code>  指向的地址是空的，那么线性地址被真正的物理页占用着。<br />\n既所有的内存都可以分为两类，一类是 VirtualAllocate 申请的私有内存，一类是映射的内存。</p>\n<h3 id=\"遍历进程的内存结构\"><a class=\"anchor\" href=\"#遍历进程的内存结构\">#</a> 遍历进程的内存结构</h3>\n<p>这个时候我们已经可以遍历进程的整个内存结构了，但是一个一个手动遍历非常麻烦，所以 Windows 提供了  <code>!vad</code>  命令：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kd&gt; !vad 0x8a173990</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>VAD   Level     Start       End Commit</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>8a180608  3        10        10      1 Private      READWRITE          </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>8a03c0a8  4        20        20      1 Private      READWRITE          </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>89cf1438  2        30       12f      6 Private      READWRITE          </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>8a15c740  4       130       132      0 Mapped       READONLY           Pagefile section, shared commit 0x3</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>89d06a70  3       140       141      0 Mapped       READONLY           Pagefile section, shared commit 0x2</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>89d27138  5       150       24f     21 Private      READWRITE          </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>8a0e5cd8  4       250       25f      6 Private      READWRITE          </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>8a15eb50  6       260       26f      0 Mapped       READWRITE          Pagefile section, shared commit 0x3</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>8a1314d8  5       270       285      0 Mapped       READONLY           \\WINDOWS\\system32\\unicode.nls</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>8a1d19c8  7       290       2d0      0 Mapped       READONLY           \\WINDOWS\\system32\\locale.nls</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>8a1c0890  6       2e0       320      0 Mapped       READONLY           \\WINDOWS\\system32\\sortkey.nls</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>89d12b78  8       330       335      0 Mapped       READONLY           \\WINDOWS\\system32\\sorttbls.nls</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>89db5160  7       340       380      0 Mapped       READONLY           Pagefile section, shared commit 0x41</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>8a170c98  8       390       39f      4 Private      READWRITE          </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>8a0fdb70  9       3a0       3a2      0 Mapped       READONLY           \\WINDOWS\\system32\\ctype.nls</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>89cf23c8 10       3b0       3bf      8 Private      READWRITE          </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>8a02d2f0 11       3c0       3c0      1 Private      READWRITE          </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>89dac8a8 12       3d0       3d0      1 Private      READWRITE          </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>8a1c0830 14       3e0       3e1      0 Mapped       READONLY           Pagefile section, shared commit 0x2</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>8a16b8d0 13       3f0       3f1      0 Mapped       READONLY           Pagefile section, shared commit 0x2</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>89dac868  1       400       486     25 Mapped  Exe  EXECUTE_WRITECOPY  \\Documents and Settings\\Administrator\\ 桌面 \\Dbgview.exe</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>89da6cb8  3       490       557      0 Mapped       EXECUTE_READ       Pagefile section, shared commit 0x8</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>8a04e768  2       560       662      0 Mapped       READONLY           Pagefile section, shared commit 0x103</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>8a15c658  4       670       96f      0 Mapped       EXECUTE_READ       Pagefile section, shared commit 0x2b</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>8a110a50  5       970       97f      6 Private      READWRITE          </pre></td></tr><tr><td data-num=\"28\"></td><td><pre>8a0e2a58  3       980       980      0 Mapped       READWRITE          Pagefile section, shared commit 0x1</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>8a02f590  5       990       9cf      0 Mapped       READWRITE          Pagefile section, shared commit 0x10</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>8a02f528  4       9d0       9dd      0 Mapped       READWRITE          Pagefile section, shared commit 0xe</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>8a173990  0       9e0       adf    106 Private      READWRITE          </pre></td></tr><tr><td data-num=\"32\"></td><td><pre>89d0d8d0  5       ae0       ae0      1 Private      READWRITE          </pre></td></tr><tr><td data-num=\"33\"></td><td><pre>89d0de90  7       af0       af0      0 Private Phys READWRITE          </pre></td></tr><tr><td data-num=\"34\"></td><td><pre>8a02f5f8  6       b00       b00      0 Mapped       READWRITE          Pagefile section, shared commit 0x1</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>89d912a8  7       b10       b13      0 Mapped       READWRITE          Pagefile section, shared commit 0x4</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>89cf14f0  4       b30       baf      1 Private      READWRITE          </pre></td></tr><tr><td data-num=\"37\"></td><td><pre>8a10fa30  7       bb0       caf      2 Private      READWRITE          </pre></td></tr><tr><td data-num=\"38\"></td><td><pre>89da4e90  6       cc0       cc7      8 Private      READWRITE          </pre></td></tr><tr><td data-num=\"39\"></td><td><pre>8a0df250  7       cd0       d4f      0 Mapped       READWRITE          Pagefile section, shared commit 0x6</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>89da6b20  5     5adc0     5adf6      2 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\uxtheme.dll</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>89e1c140  3     62c20     62c28      2 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\lpk.dll</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>89d12ae8  2     71a10     71a17      2 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\ws2help.dll</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>89e055d0  3     71a20     71a36      2 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\ws2_32.dll</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>89dbbb80  6     71a90     71aa1      2 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\mpr.dll</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>8a039b30 11     73640     7366d      2 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\MSCTFIME.IME</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>8a04c6e0 10     73fa0     7400a     17 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\usp10.dll</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>89d27178 11     74680     746cb      3 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\MSCTF.dll</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>8a12bb30  9     76300     7631c      2 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\imm32.dll</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>89da6c88  8     76320     76366      5 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\comdlg32.dll</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>8a039ac8  9     76990     76acd      8 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\ole32.dll</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>8a106bf8  7     77180     77282      2 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\WinSxS\\x86_Microsoft.Windows.Common-Controls_6595b64144ccf1df_6.0.2600.6028_x-ww_61e65202\\comctl32.dll</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>8a1314a8  5     77be0     77c37      8 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\msvcrt.dll</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>8a0df9b0  6     77d10     77d9f      3 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\user32.dll</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>8a1368c8  4     77da0     77e48      6 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\advapi32.dll</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>89db5190  5     77e50     77ee2      2 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\rpcrt4.dll</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>8a164a88  7     77ef0     77f39      3 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\gdi32.dll</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>89da6c58  8     77f40     77fb5      2 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\shlwapi.dll</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>89da7650  6     77fc0     77fd0      2 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\secur32.dll</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>89d23eb0  1     7c800     7c91d      6 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\kernel32.dll</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>8a164b48  2     7c920     7c9b2      5 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\ntdll.dll</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>89da6d50  5     7d590     7dd83     31 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\shell32.dll</pre></td></tr><tr><td data-num=\"62\"></td><td><pre>8a1c0860  4     7f6f0     7f7ef      0 Mapped       EXECUTE_READ       Pagefile section, shared commit 0x7</pre></td></tr><tr><td data-num=\"63\"></td><td><pre>8a164ab8  3     7ffa0     7ffd2      0 Mapped       READONLY           Pagefile section, shared commit 0x33</pre></td></tr><tr><td data-num=\"64\"></td><td><pre>8a02eae0  4     7ffdd     7ffdd      1 Private      READWRITE          </pre></td></tr><tr><td data-num=\"65\"></td><td><pre>8a128ab0  6     7ffde     7ffde      1 Private      READWRITE          </pre></td></tr><tr><td data-num=\"66\"></td><td><pre>89dd5830  5     7ffdf     7ffdf      1 Private      READWRITE          </pre></td></tr><tr><td data-num=\"67\"></td><td><pre></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>Total VADs: 64, average level: 6, maximum depth: 14</pre></td></tr><tr><td data-num=\"69\"></td><td><pre>Total private commit: 0x13e pages (1272 KB)</pre></td></tr><tr><td data-num=\"70\"></td><td><pre>Total shared commit:  0x1e7 pages (1948 KB)</pre></td></tr></table></figure><p>这个时候进程所有的内存使用情况都显现出来了。</p>\n<p>这个可以用于对抗模块隐藏，就算在三环断掉了那几条链也没用，在这里仍然可以看得到，如果把这里也抹去了，操作系统分配线性地址的时候可能会出现错误，在已经被占用地址上有分配了。</p>\n<h3 id=\"内存属性\"><a class=\"anchor\" href=\"#内存属性\">#</a> 内存属性</h3>\n<p>在前面的 MMVAD 中的  <code>+0x014 u                : __unnamed</code>  ， 其实它是一个联合体：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">union</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        ULONG_PTR LongFlags<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        MMVAD_FLAGS VadFlags<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span> u<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>在 Windbg 中查看；</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kd&gt; dt _MMVAD_FLAGS</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>nt!_MMVAD_FLAGS</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   +0x000 CommitCharge     : Pos 0, 19 Bits</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   +0x000 PhysicalMapping  : Pos 19, 1 Bit</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   +0x000 ImageMap         : Pos 20, 1 Bit</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   +0x000 UserPhysicalPages : Pos 21, 1 Bit</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   +0x000 NoChange         : Pos 22, 1 Bit</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   +0x000 WriteWatch       : Pos 23, 1 Bit</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   +0x000 Protection       : Pos 24, 5 Bits</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   +0x000 LargePages       : Pos 29, 1 Bit</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   +0x000 MemCommit        : Pos 30, 1 Bit</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   +0x000 PrivateMemory    : Pos 31, 1 Bit</pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>kd&gt; dt _MMVAD_FLAGS 0x8a173990+0x14</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>nt!_MMVAD_FLAGS</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   +0x000 CommitCharge     : 0y0000000000001101010 (0x6a)</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   +0x000 PhysicalMapping  : 0y0</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   +0x000 ImageMap         : 0y0</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>   +0x000 UserPhysicalPages : 0y0</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>   +0x000 NoChange         : 0y0</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>   +0x000 WriteWatch       : 0y0</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>   +0x000 Protection       : 0y00100 (0x4)</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>   +0x000 LargePages       : 0y0</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>   +0x000 MemCommit        : 0y0</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>   +0x000 PrivateMemory    : 0y1</pre></td></tr></table></figure><p>在 XP 源码中查看：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\"><span class=\"token function\">defined</span> <span class=\"token punctuation\">(</span>_WIN64<span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">COMMIT_SIZE</span> <span class=\"token expression\"><span class=\"token number\">51</span></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">else</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">COMMIT_SIZE</span> <span class=\"token expression\"><span class=\"token number\">19</span></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_MMVAD_FLAGS</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    ULONG_PTR CommitCharge <span class=\"token operator\">:</span> COMMIT_SIZE<span class=\"token punctuation\">;</span> <span class=\"token comment\">//limits system to 4k pages or bigger!</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    ULONG_PTR PhysicalMapping <span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    ULONG_PTR ImageMap <span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    ULONG_PTR UserPhysicalPages <span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    ULONG_PTR NoChange <span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    ULONG_PTR WriteWatch <span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    ULONG_PTR Protection <span class=\"token operator\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    ULONG_PTR LargePages <span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    ULONG_PTR MemCommit<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    ULONG_PTR PrivateMemory <span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">//used to tell VAD from VAD_SHORT</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span> MMVAD_FLAGS<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>认识其重要的几个成员:</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>nt!_MMVAD_FLAGS</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   +0x000 CommitCharge</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   +0x000 PhysicalMapping</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   +0x000 ImageMap        &#x2F;&#x2F; 1 镜像文件  0 其他</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   +0x000 Protection      &#x2F;&#x2F; 保护属性： 1 READONLY  2  EXECUTE  3  EXECUTE _READ  4 READWITER 5 WRITECOPY  6  EXECUTE _READWITER   7 EXECUTE_WRITECOPY  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   +0x000 PrivateMemory \t&#x2F;&#x2F; 标识当前的内存状态 1 PrivateMemory  0 Map</pre></td></tr></table></figure><p>如果想实现模块隐藏这一块是必须要绕过去的。</p>\n",
            "tags": [
                "线性地址的管理",
                "VAD树",
                "_MMVAD",
                "_MMVAD_FLAGS"
            ]
        },
        {
            "id": "https://or0kit.github.io/Bin/Core/Drive-Development/%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91-%E5%86%85%E6%A0%B8%E9%87%8D%E8%BD%BD/",
            "url": "https://or0kit.github.io/Bin/Core/Drive-Development/%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91-%E5%86%85%E6%A0%B8%E9%87%8D%E8%BD%BD/",
            "title": "驱动开发-内核重载",
            "date_published": "2022-03-30T02:18:07.000Z",
            "content_html": "<h1 id=\"重载内核解决什么问题\"><a class=\"anchor\" href=\"#重载内核解决什么问题\">#</a> 重载内核解决什么问题？</h1>\n<p>内核中的很多函数被层层 HOOK，重载一份内核可以绕过这些 HOOK。</p>\n<h1 id=\"重载内核的步骤\"><a class=\"anchor\" href=\"#重载内核的步骤\">#</a> 重载内核的步骤</h1>\n<p>&lt;1&gt; 申请内存，按内存对齐展开</p>\n<p>&lt;2&gt; 根据重定位表修复全局变量</p>\n<p>&lt;3&gt; 修复 IAT 表</p>\n<p>这些都是 PE 的知识，这样内核文件在高 2G 内存中就又加载了一份。</p>\n<p>但如何让操作系统走我们新内核文件的函数呢？</p>\n<p>&lt;1&gt; 找到新加载的内核的系统服务表，并且填充</p>\n<p>&lt;2&gt; Hook KiFastCallEntry 让系统调用走我们的系统服务表。</p>\n<p>KiFastCallEntry 中有一行汇编指令是查找系统服务表。</p>\n<h1 id=\"重载内核的弊端\"><a class=\"anchor\" href=\"#重载内核的弊端\">#</a> 重载内核的弊端</h1>\n<p>&lt;1&gt; 改动太大，即使抹去 PE 指纹也无法完全隐形。</p>\n<p>&lt;2&gt; 最好的办法不是重载内核，而是需要什么函数自己来实现。</p>\n<h1 id=\"代码实现重载xp的内核\"><a class=\"anchor\" href=\"#代码实现重载xp的内核\">#</a> 代码实现重载 xp 的内核。</h1>\n<p>使用内核函数操作文件、内存。</p>\n<p>写的时候网上冲浪发现了一篇博客：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYnMucGVkaXkuY29tL3RocmVhZC0yNTM0MjUuaHRt\">https://bbs.pediy.com/thread-253425.htm</span>，这个博主说了一些关于重定位的事情：</p>\n<p><strong>关键难点是重定位，由于我们自己重载的新内核没有执行 DriverEntry, 数据都没有初始化，所以在重定位的时候凡是指向数据的地址都要重定位到老内核，是代码的地址就正常重定位到新内核。</strong></p>\n<p>重载后可能会不稳定，导致蓝屏。</p>\n<h2 id=\"第一步内核文件的全路径\"><a class=\"anchor\" href=\"#第一步内核文件的全路径\">#</a> 第一步：内核文件的全路径</h2>\n<p>遍历内核模块，找到内核文件。</p>\n<p><strong>这里我遇到了一个问题没有解决不了。</strong></p>\n<p>通过内核模块遍历获取内核文件的全路径，发现前面没根路径，于是就把根路径添加上了，一直调用  <code>ZwCreateFile</code>  失败。<br />\n先贴在这里了。</p>\n<p>信息如下:</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>我是驱动，我运行了 </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\\??\\C:\\WINDOWS\\system32\\ntkrnlpa.exe </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>打开文件失败</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>0 </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>C0000033 </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>0</pre></td></tr></table></figure><p>一直报  <code>C0000033</code>   <code>STATUS_OBJECT_NAME_INVALID</code>  错误，好像是路径有问题？</p>\n<p>于是我直接把路径写死了不这样获取了。</p>\n<h2 id=\"第二步-修复重定位表和iat\"><a class=\"anchor\" href=\"#第二步-修复重定位表和iat\">#</a> 第二步： 修复重定位表和 IAT</h2>\n<p>下面就要修复重定位表和 IAT 了。</p>\n<p>修复重定位表这里我也学着看雪的那个博主的判断一下要修复的地址是否在可执行的节中，如果不在则不管这个地址了，让其仍然去老内核中。</p>\n<p><strong>后来实验的时候发现这样判断不行，好多节都有可执行的属性，于是我就只修复.text 中的数据了。</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>BOOLEAN <span class=\"token function\">AddressIsExecuteable</span><span class=\"token punctuation\">(</span>IN ULONG pAddress<span class=\"token punctuation\">,</span> IN PIMAGE_SECTION_HEADER pSectionHeader<span class=\"token punctuation\">,</span> IN ULONG ulSectionNum<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tBOOLEAN bFlag <span class=\"token operator\">=</span> FALSE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token comment\">// 循环判断数据在哪个节中</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> t <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> t <span class=\"token operator\">&lt;</span> ulSectionNum<span class=\"token punctuation\">;</span> t<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span>\t\t</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token comment\">// 节的起始和结束位置</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\tULONG Begin <span class=\"token operator\">=</span> pSectionHeader<span class=\"token punctuation\">[</span>t<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>VirtualAddress<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\tULONG End <span class=\"token operator\">=</span> pSectionHeader<span class=\"token punctuation\">[</span>t<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>VirtualAddress <span class=\"token operator\">+</span> pSectionHeader<span class=\"token punctuation\">[</span>t<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>Misc<span class=\"token punctuation\">.</span>VirtualSize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t<span class=\"token comment\">//DbgPrint(\"pSectionHeader:[%X]\\t\\n\", pSectionHeader);</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t<span class=\"token comment\">//DbgPrint(\"Begin:[%X]\\t\\n\", Begin);</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t<span class=\"token comment\">//DbgPrint(\"End:[%X]\\t\\n\", End);</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t<span class=\"token comment\">//DbgPrint(\"pSectionHeader[t].Characteristics:[%X]\\t\\n\", pSectionHeader[t].Characteristics);</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t<span class=\"token comment\">//__asm int 3;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t<span class=\"token comment\">// 判断</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pAddress <span class=\"token operator\">>=</span> Begin <span class=\"token operator\">&amp;&amp;</span> pAddress <span class=\"token operator\">&lt;=</span> End<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span>\t</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t\t<span class=\"token comment\">// 只修复 .text 节区</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">strcmp</span><span class=\"token punctuation\">(</span>pSectionHeader<span class=\"token punctuation\">[</span>t<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">,</span> <span class=\"token string\">\".text\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t\t\t<span class=\"token comment\">//DbgPrint(\"pSectionHeader[t].Name:[%s]\\t\\n\", pSectionHeader[t].Name);</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t\t\t<span class=\"token comment\">//__asm int 3;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">return</span> TRUE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t\t<span class=\"token comment\">// bFlag = ((pSectionHeader[t].Characteristics &amp; 0x20000020) == 0x20000020) ? TRUE : FALSE;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> bFlag<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token comment\">//DbgPrint(\"pAddress:[%X] not in the section \\t\\n\", pAddress);</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t<span class=\"token keyword\">return</span> bFlag<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"修复重定位表\"><a class=\"anchor\" href=\"#修复重定位表\">#</a> 修复重定位表</h3>\n<blockquote>\n<p><strong>这里我碰到了一个坑，我在用  <code>LDR_DATA_TABLE_ENTRY</code>  结构体中的遍历内核文件时，也顺便把其中记录的内核加载基址，也获取了一下，我以为这个就是内核文件的 ImageBase，可是并不是，内核在启动的时候加载基址也是变化的。内核文件的 ImageBase 也是 0x400000。重定位时需要注意！</strong></p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>NTSTATUS <span class=\"token function\">RepairRelocation</span><span class=\"token punctuation\">(</span>IN OUT PVOID pKernelImageBuffer<span class=\"token punctuation\">,</span> IN ULONG KernelBase<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_TYPE</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\tUSHORT Offset <span class=\"token operator\">:</span> <span class=\"token number\">12</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\tUSHORT Type <span class=\"token operator\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span>TypeOffset<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span> PTypeOffset<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tNTSTATUS status <span class=\"token operator\">=</span> STATUS_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token comment\">// PE 头 查找重定位表</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tPIMAGE_DOS_HEADER pDosHeader <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PIMAGE_DOS_HEADER<span class=\"token punctuation\">)</span>pKernelImageBuffer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tPIMAGE_NT_HEADERS pNtHeader <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PIMAGE_NT_HEADERS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>pDosHeader<span class=\"token operator\">-></span>e_lfanew <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>ULONG<span class=\"token punctuation\">)</span>pKernelImageBuffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\tPIMAGE_FILE_HEADER pFileHeader <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PIMAGE_FILE_HEADER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ULONG<span class=\"token punctuation\">)</span>pNtHeader <span class=\"token operator\">+</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tPIMAGE_OPTIONAL_HEADER pOptionHeader <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PIMAGE_OPTIONAL_HEADER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ULONG<span class=\"token punctuation\">)</span>pFileHeader <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>ULONG<span class=\"token punctuation\">)</span>IMAGE_SIZEOF_FILE_HEADER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tPIMAGE_SECTION_HEADER pSectionHeader <span class=\"token operator\">=</span> <span class=\"token function\">IMAGE_FIRST_SECTION</span><span class=\"token punctuation\">(</span>pNtHeader<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tPIMAGE_BASE_RELOCATION pReloc <span class=\"token operator\">=</span> pOptionHeader<span class=\"token operator\">-></span>DataDirectory<span class=\"token punctuation\">[</span>IMAGE_DIRECTORY_ENTRY_BASERELOC<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>VirtualAddress <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>ULONG<span class=\"token punctuation\">)</span>pDosHeader<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token comment\">// ULONG Items = 0, Items1 = 0, Items2 = 0;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token comment\">//  遍历重定位表，并对目标代码进行重定位</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>pReloc<span class=\"token operator\">-></span>SizeOfBlock <span class=\"token operator\">&amp;&amp;</span> pReloc<span class=\"token operator\">-></span>VirtualAddress<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t<span class=\"token comment\">// 重定位项数目</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\tULONG ulCount <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>pReloc<span class=\"token operator\">-></span>SizeOfBlock <span class=\"token operator\">-</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t<span class=\"token comment\">// 需要定位数据的起始 RVA</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\tULONG ulRva <span class=\"token operator\">=</span> pReloc<span class=\"token operator\">-></span>VirtualAddress<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t<span class=\"token comment\">// 解析需要重定位的项数</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\tPTypeOffset pRelocationArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PTypeOffset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>pReloc <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> ulCount<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pRelocationArray<span class=\"token operator\">-></span>Type <span class=\"token operator\">==</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\t\t\t<span class=\"token comment\">// 需要重定位的数据 RVA = VirtualAddress + TypeOffset 低 12 位</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\t\t\t<span class=\"token comment\">// 获取要修改的地址的 RVA</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\t\t\tULONG RepairAddrOffset <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>ulRva <span class=\"token operator\">+</span> pRelocationArray<span class=\"token operator\">-></span>Offset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\t\t\tPULONG pRepairAddr <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PULONG<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>RepairAddrOffset <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>ULONG<span class=\"token punctuation\">)</span>pKernelImageBuffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\t\t\t<span class=\"token comment\">// 判断要修复的地址是否在</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">AddressIsExecuteable</span><span class=\"token punctuation\">(</span>RepairAddrOffset<span class=\"token punctuation\">,</span> pSectionHeader<span class=\"token punctuation\">,</span> pFileHeader<span class=\"token operator\">-></span>NumberOfSections<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\t\t\t\t</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\t\t\t\t<span class=\"token comment\">// 修正需要重定位项的在新内核中的值</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\t\t\t\t<span class=\"token operator\">*</span>pRepairAddr <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>ULONG<span class=\"token punctuation\">)</span>pKernelImageBuffer <span class=\"token operator\">-</span> pOptionHeader<span class=\"token operator\">-></span>ImageBase<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t\t\t\t\t<span class=\"token comment\">//Items++;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t\t\t\t\t<span class=\"token comment\">//Items1++;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t\t\t\t\t<span class=\"token comment\">// 不需要修复的值。 什么都不做就行。</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t\t\t\t\t<span class=\"token comment\">//DbgPrint(\"FixAddress to Old Kernel:[%X]\\t\\n\", *pRepairAddr);</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t\t\t\t\t<span class=\"token operator\">*</span>pRepairAddr <span class=\"token operator\">+=</span> KernelBase <span class=\"token operator\">-</span> pOptionHeader<span class=\"token operator\">-></span>ImageBase<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t\t\t\t\t<span class=\"token comment\">//Items++;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t\t\t\t\t<span class=\"token comment\">//Items2++;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t\t\tpRelocationArray<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t\tpReloc <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PIMAGE_BASE_RELOCATION<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ULONG<span class=\"token punctuation\">)</span>pReloc <span class=\"token operator\">+</span> pReloc<span class=\"token operator\">-></span>SizeOfBlock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t<span class=\"token comment\">//DbgPrint(\"Items: [%X],Items1: [%X], Items2: [%X]\\t\\n\", Items, Items1, Items2);</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t<span class=\"token keyword\">return</span> status<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"修复iat\"><a class=\"anchor\" href=\"#修复iat\">#</a> 修复 IAT</h3>\n<p>在内核中获取模块基址，还是通过  <code>LDR_DATA_TABLE_ENTRY</code>  结构体遍历获取，这里我直接搬运了一位大佬的代码，设计的太好了。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">union</span> OD_OR_NAME</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\tCHAR<span class=\"token operator\">*</span> Name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\tUSHORT Od<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span>EXP_FUN_NAME<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">//API 导出模式</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">enum</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tNameFlag <span class=\"token operator\">=</span> <span class=\"token number\">0x1</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tOrderFlag <span class=\"token operator\">=</span> <span class=\"token number\">0x2</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span>EXP_FUN_MODE<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>NTSTATUS <span class=\"token function\">GetFunAddrOfModule</span><span class=\"token punctuation\">(</span>IN PVOID pModule<span class=\"token punctuation\">,</span> IN EXP_FUN_NAME unFuntionName<span class=\"token punctuation\">,</span> IN EXP_FUN_MODE eMode<span class=\"token punctuation\">,</span> OUT PULONG FuncAddress<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token comment\">//__asm int 3;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tNTSTATUS status <span class=\"token operator\">=</span> STATUS_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token comment\">// PE 查找导出表</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tPIMAGE_DOS_HEADER pDosHeader <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PIMAGE_DOS_HEADER<span class=\"token punctuation\">)</span>pModule<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token comment\">//DbgPrint(\"pDosHeader:%X\\t\\n\", pDosHeader);</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tPIMAGE_NT_HEADERS pNtHeader <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PIMAGE_NT_HEADERS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>pDosHeader<span class=\"token operator\">-></span>e_lfanew <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>ULONG<span class=\"token punctuation\">)</span>pModule<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token comment\">//DbgPrint(\"pNtHeader:%X\\t\\n\", pNtHeader);</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tPIMAGE_FILE_HEADER pFileHeader <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PIMAGE_FILE_HEADER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ULONG<span class=\"token punctuation\">)</span>pNtHeader <span class=\"token operator\">+</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token comment\">//DbgPrint(\"pFileHeader:%X\\t\\n\", pFileHeader);</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\tPIMAGE_OPTIONAL_HEADER pOptionHeader <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PIMAGE_OPTIONAL_HEADER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ULONG<span class=\"token punctuation\">)</span>pFileHeader <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>ULONG<span class=\"token punctuation\">)</span>IMAGE_SIZEOF_FILE_HEADER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token comment\">//DbgPrint(\"pOptionHeader:%X\\t\\n\", pOptionHeader);</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tPIMAGE_DATA_DIRECTORY pDirectory <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PIMAGE_DATA_DIRECTORY<span class=\"token punctuation\">)</span>pOptionHeader<span class=\"token operator\">-></span>DataDirectory<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token comment\">//DbgPrint(\"pDirectory:%X\\t\\n\", pDirectory);</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tPIMAGE_EXPORT_DIRECTORY pExportTabel <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PIMAGE_EXPORT_DIRECTORY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ULONG<span class=\"token punctuation\">)</span>pModule <span class=\"token operator\">+</span> pOptionHeader<span class=\"token operator\">-></span>DataDirectory<span class=\"token punctuation\">[</span>IMAGE_DIRECTORY_ENTRY_EXPORT<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>VirtualAddress<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token comment\">//DbgPrint(\"pExportTabel:%X\\t\\n\", pExportTabel);</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token comment\">//__asm int 3;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\tPULONG dwNameTable <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PULONG<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ULONG<span class=\"token punctuation\">)</span>pModule <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>pExportTabel<span class=\"token operator\">-></span>AddressOfNames<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\tPUSHORT wOrdinalsTable <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PUSHORT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ULONG<span class=\"token punctuation\">)</span>pModule <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>pExportTabel<span class=\"token operator\">-></span>AddressOfNameOrdinals<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\tPULONG dwAddressTable <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PULONG<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ULONG<span class=\"token punctuation\">)</span>pModule <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>pExportTabel<span class=\"token operator\">-></span>AddressOfFunctions<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>eMode <span class=\"token operator\">==</span> NameFlag<span class=\"token punctuation\">)</span><span class=\"token comment\">// 按名称导出</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>pExportTabel<span class=\"token operator\">-></span>NumberOfNames<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\t\tCHAR<span class=\"token operator\">*</span> cImportName <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>CHAR<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ULONG<span class=\"token punctuation\">)</span>pModule <span class=\"token operator\">+</span> dwNameTable<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">strcmp</span><span class=\"token punctuation\">(</span>cImportName<span class=\"token punctuation\">,</span> unFuntionName<span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\t<span class=\"token operator\">*</span>FuncAddress <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ULONG<span class=\"token punctuation\">)</span>pModule <span class=\"token operator\">+</span> dwAddressTable<span class=\"token punctuation\">[</span>wOrdinalsTable<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t<span class=\"token keyword\">else</span><span class=\"token comment\">// 按序号导出</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t\t<span class=\"token operator\">*</span>FuncAddress <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>ULONG<span class=\"token punctuation\">)</span>pModule <span class=\"token operator\">+</span> dwAddressTable<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>unFuntionName<span class=\"token punctuation\">.</span>Od<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>pExportTabel<span class=\"token operator\">-></span>Base<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>FuncAddress <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> STATUS_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> STATUS_UNSUCCESSFUL<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>NTSTATUS <span class=\"token function\">RepairIAT</span><span class=\"token punctuation\">(</span>IN PDRIVER_OBJECT pDriver<span class=\"token punctuation\">,</span> IN OUT PVOID pKernelImageBuffer<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tNTSTATUS status <span class=\"token operator\">=</span> STATUS_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token comment\">// PE 头 定位大导入表  IAT 表</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tPIMAGE_DOS_HEADER pDosHeader <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PIMAGE_DOS_HEADER<span class=\"token punctuation\">)</span>pKernelImageBuffer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tPIMAGE_NT_HEADERS pNtHeader <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PIMAGE_NT_HEADERS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>pDosHeader<span class=\"token operator\">-></span>e_lfanew <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>ULONG<span class=\"token punctuation\">)</span>pDosHeader<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tPIMAGE_OPTIONAL_HEADER pOptionHeader <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>pNtHeader<span class=\"token operator\">-></span>OptionalHeader<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tPIMAGE_IMPORT_DESCRIPTOR pImportTable <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PIMAGE_IMPORT_DESCRIPTOR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ULONG<span class=\"token punctuation\">)</span>pDosHeader <span class=\"token operator\">+</span> pOptionHeader<span class=\"token operator\">-></span>DataDirectory<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>VirtualAddress<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token comment\">// 遍历 INT 表</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>pImportTable<span class=\"token operator\">-></span>OriginalFirstThunk <span class=\"token operator\">||</span> pImportTable<span class=\"token operator\">-></span>FirstThunk<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t<span class=\"token comment\">// 在里面定义，变量的值每次都会重新设置为空</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t<span class=\"token comment\">// 模块基址</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\tPVOID pModuleBase <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t<span class=\"token comment\">// 模块名字</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\tCHAR szName<span class=\"token punctuation\">[</span><span class=\"token number\">0x50</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\tANSI_STRING asName <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\tUNICODE_STRING usName <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t<span class=\"token comment\">// 获取模块名，由模块名字获取模块基址</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\tPCHAR MdName <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PCHAR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>pImportTable<span class=\"token operator\">-></span>Name <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>ULONG<span class=\"token punctuation\">)</span>pDosHeader<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t<span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>szName<span class=\"token punctuation\">,</span> MdName<span class=\"token punctuation\">,</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>MdName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t<span class=\"token function\">RtlInitAnsiString</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>asName<span class=\"token punctuation\">,</span> szName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\tstatus <span class=\"token operator\">=</span> <span class=\"token function\">RtlAnsiStringToUnicodeString</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>usName<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>asName<span class=\"token punctuation\">,</span> TRUE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">NT_SUCCESS</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\t\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"RtlAnsiStringToUnicodeString failed!\\t\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> status<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\t<span class=\"token comment\">//DbgPrint(\"usName:%ws\\t\\n\", usName.Buffer);</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\t<span class=\"token comment\">// 获取模块基址</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\tstatus <span class=\"token operator\">=</span> <span class=\"token function\">GetModuleBase</span><span class=\"token punctuation\">(</span>pDriver<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>usName<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>pModuleBase<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">NT_SUCCESS</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\t\t<span class=\"token function\">RtlFreeUnicodeString</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>usName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\t\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GetModuleBase failed!\\t\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> status<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span> <span class=\"token operator\">==</span> pModuleBase<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t\t\t<span class=\"token function\">RtlFreeUnicodeString</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>usName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t\t\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ModuleBase = 0 !\\t\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> STATUS_UNSUCCESSFUL<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t\t<span class=\"token comment\">// 修复 IAT 表</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t\tPIMAGE_THUNK_DATA32 pThunkData <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PIMAGE_THUNK_DATA32<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ULONG<span class=\"token punctuation\">)</span>pKernelImageBuffer <span class=\"token operator\">+</span> pImportTable<span class=\"token operator\">-></span>FirstThunk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>PULONG<span class=\"token punctuation\">)</span>pThunkData<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t\t\tEXP_FUN_NAME emFunName <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t\t\tULONG dwProcAddress <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t\t\t<span class=\"token comment\">//__asm int 3;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t\t\t<span class=\"token comment\">// IMAGE_THUNK_DATA32 是一个 4 字节数据</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t\t\t<span class=\"token comment\">// 如果最高位是 1，那么除去最高位就是导出序号</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\t\t\t<span class=\"token comment\">// 如果最高位是 0，那么这个值是 RVA 指向 IMAGE_IMPORT_BY_NAME</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>PULONG<span class=\"token punctuation\">)</span>pThunkData<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x80000000</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0x80000000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\t\t\t\temFunName<span class=\"token punctuation\">.</span>Od <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>PULONG<span class=\"token punctuation\">)</span>pThunkData<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x7FFFFFFF</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\t\t\t\tstatus <span class=\"token operator\">=</span> <span class=\"token function\">GetFunAddrOfModule</span><span class=\"token punctuation\">(</span>pModuleBase<span class=\"token punctuation\">,</span> emFunName<span class=\"token punctuation\">,</span> OrderFlag<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>dwProcAddress<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">NT_SUCCESS</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>\t\t\t\t\t<span class=\"token function\">RtlFreeUnicodeString</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>usName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\t\t\t\t\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1 GetFunAddrOfModule failed !\\t\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>\t\t\t\t\t<span class=\"token keyword\">return</span> STATUS_UNSUCCESSFUL<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>\t\t\t\t<span class=\"token comment\">//DbgPrint(\"1 dwProcAddress:%X\\t\\n\", dwProcAddress);</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>\t\t\t\t<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>PULONG<span class=\"token punctuation\">)</span>pThunkData<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> dwProcAddress<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>\t\t\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>\t\t\t\tPIMAGE_IMPORT_BY_NAME pIBN <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PIMAGE_IMPORT_BY_NAME<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>PULONG<span class=\"token punctuation\">)</span>pThunkData<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>ULONG<span class=\"token punctuation\">)</span>pKernelImageBuffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>\t\t\t\t<span class=\"token comment\">// 按名字导入</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>\t\t\t\temFunName<span class=\"token punctuation\">.</span>Name <span class=\"token operator\">=</span> pIBN<span class=\"token operator\">-></span>Name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>\t\t\t\tstatus <span class=\"token operator\">=</span> <span class=\"token function\">GetFunAddrOfModule</span><span class=\"token punctuation\">(</span>pModuleBase<span class=\"token punctuation\">,</span> emFunName<span class=\"token punctuation\">,</span> NameFlag<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>dwProcAddress<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">NT_SUCCESS</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>\t\t\t\t\t<span class=\"token function\">RtlFreeUnicodeString</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>usName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>\t\t\t\t\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2 GetFunAddrOfModule failed !\\t\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>\t\t\t\t\t<span class=\"token keyword\">return</span> STATUS_UNSUCCESSFUL<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>\t\t\t\t<span class=\"token comment\">//DbgPrint(\"2 dwProcAddress:%X\\t\\n\", dwProcAddress);</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>\t\t\t\t<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>PULONG<span class=\"token punctuation\">)</span>pThunkData<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> dwProcAddress<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>\t\t\tpThunkData<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>\t\tpImportTable <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PIMAGE_IMPORT_DESCRIPTOR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ULONG<span class=\"token punctuation\">)</span>pImportTable <span class=\"token operator\">+</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>IMAGE_IMPORT_DESCRIPTOR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>\t<span class=\"token keyword\">return</span> status<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"第三步让操作系统走我们新内核文件的函数\"><a class=\"anchor\" href=\"#第三步让操作系统走我们新内核文件的函数\">#</a> 第三步：让操作系统走我们新内核文件的函数</h2>\n<p>初始化新加载的内核的系统服务表</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>PKSYSTEM_SERVICE_TABLE <span class=\"token function\">InitNewSSDT</span><span class=\"token punctuation\">(</span>IN PVOID pKernelImageBuffer<span class=\"token punctuation\">,</span> IN ULONG uKernelOldBase<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token comment\">// 新内核地址 - 老内核地址，得到相对偏移</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tULONG uNewKernelInc <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>ULONG<span class=\"token punctuation\">)</span>pKernelImageBuffer <span class=\"token operator\">-</span> uKernelOldBase<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token comment\">//DbgPrint(\"KeServiceDescriptorTable: [%X]\\r\\n\", KeServiceDescriptorTable);</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token comment\">//DbgPrint(\"pKernelImageBuffer: [%X]\\r\\n\", pKernelImageBuffer);</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token comment\">//DbgPrint(\"uKernelOldBase: [%X]\\r\\n\", uKernelOldBase);</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token comment\">//DbgPrint(\"uNewKernelInc: [%X]\\r\\n\", uNewKernelInc);</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token comment\">// __asm int 3;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token comment\">// 老内核的 ssdt 指针加上相对偏移，得到新内核的 ssdt 指针</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tPKSYSTEM_SERVICE_TABLE pNewSSDT <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PKSYSTEM_SERVICE_TABLE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ULONG<span class=\"token punctuation\">)</span>KeServiceDescriptorTable <span class=\"token operator\">+</span> uNewKernelInc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">MmIsAddressValid</span><span class=\"token punctuation\">(</span>pNewSSDT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pNewSSDT is unaviable!\\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token comment\">// 修正新的 SSDT 成员</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token comment\">// 函数地址表</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\tpNewSSDT<span class=\"token operator\">-></span>ServiceTableBase <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PULONG<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ULONG<span class=\"token punctuation\">)</span>pKernelImageBuffer <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>ULONG<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>KeServiceDescriptorTable<span class=\"token operator\">-></span>ServiceTableBase<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> uKernelOldBase <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token comment\">// 依次遍历修改</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>ULONG uIndex <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> uIndex <span class=\"token operator\">&lt;</span> KeServiceDescriptorTable<span class=\"token operator\">-></span>NumberOfServices<span class=\"token punctuation\">;</span> uIndex<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\t<span class=\"token comment\">// 函数地址再加上相对加载地址，得到新的的 ssdt 函数地址</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\tpNewSSDT<span class=\"token operator\">-></span>ServiceTableBase<span class=\"token punctuation\">[</span>uIndex<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> uNewKernelInc<span class=\"token punctuation\">;</span>\t\t</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">MmIsAddressValid</span><span class=\"token punctuation\">(</span>pNewSSDT<span class=\"token operator\">-></span>ServiceTableBase<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pNewSSDT->ServiceTableBase: %X\\r\\n\"</span><span class=\"token punctuation\">,</span> pNewSSDT<span class=\"token operator\">-></span>ServiceTableBase<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t<span class=\"token comment\">// 函数数量</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\tpNewSSDT<span class=\"token operator\">-></span>NumberOfServices <span class=\"token operator\">=</span> KeServiceDescriptorTable<span class=\"token operator\">-></span>NumberOfServices<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t<span class=\"token comment\">// 计算相对函数参数地址表的偏移</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\tULONG uOffset2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>ULONG<span class=\"token punctuation\">)</span>KeServiceDescriptorTable<span class=\"token operator\">-></span>ParamTableBase <span class=\"token operator\">-</span> uKernelOldBase<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t<span class=\"token comment\">// 函数参数表</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\tpNewSSDT<span class=\"token operator\">-></span>ParamTableBase <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PULONG<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ULONG<span class=\"token punctuation\">)</span>pKernelImageBuffer <span class=\"token operator\">+</span> uOffset2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t<span class=\"token comment\">//DbgPrint(\"pNewSSDT->ServiceTableBase: %X\\r\\n\", pNewSSDT->ServiceTableBase);</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t<span class=\"token comment\">//DbgPrint(\"pNewSSDT->NumberOfServices: %X\\r\\n\", pNewSSDT->NumberOfServices);</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t<span class=\"token comment\">//DbgPrint(\"pNewSSDT->ParamTableBase: %X\\r\\n\", pNewSSDT->ParamTableBase);</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t<span class=\"token comment\">//__asm int 3;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t<span class=\"token keyword\">return</span> pNewSSDT<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>Hook KiFastCallEntry 让系统调用走我们的系统服务表。</p>\n<p>代码懒得放了，附上 Github 的链接： <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL09yMGtpdC9YcEtlcm5lbE92ZXJsb2Fk\">https://github.com/Or0kit/XpKernelOverload</span></p>\n<h2 id=\"验证是否成功\"><a class=\"anchor\" href=\"#验证是否成功\">#</a> 验证是否成功</h2>\n<p>我在  <code>SSDTFilter</code>  函数中下了断点，并且验证了是否是  <code>NtOpenProcess</code>  函数</p>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<p>可以发现已经过滤了其他函数，我们只让这个函数走我们新内核中的代码。</p>\n<p><strong>一定得注意，不同的 Windows 它们 SSDT 中的函数的序号是不一样的！在 XP sp3 中  <code>NtOpenProcess</code>  是 0x7A。</strong></p>\n<p>然后我们在 Windbg 中找到我们内核的  <code>NtOpenProcess</code>  函数的地址，然后给这个函数下断点，以此验证是否执行到新内核中：</p>\n<p><img data-src=\"image002.png\" alt=\"\" /></p>\n<p>如图，已经断下来了！</p>\n<p>接下来我们在验证一下是否能过所有 Hook:</p>\n<p>我这里先加载了一个 Hook 了  <code>NtOpenProcess</code>  的驱动，其作用是一直打印  <code>NtOpenProcess</code>  的参数：</p>\n<p><img data-src=\"image003.png\" alt=\"\" /></p>\n<p>然后我们加载重载内核的代码（我在其中下了断点）,</p>\n<p>先看一下 Hook  <code>NtOpenProcess</code>  的代码：</p>\n<p><img data-src=\"image004.png\" alt=\"\" /></p>\n<p>这是断下来时打印的信息：</p>\n<p><img data-src=\"image005.png\" alt=\"\" /></p>\n<p>很明显当调用号是 0x7A 时 系统回去执行我们的 HOOK 函数。</p>\n<p>但是我们重载了内核后，就可以过滤掉这些 HOOK 了！</p>\n<p><img data-src=\"image006.png\" alt=\"\" /></p>\n<p>接着验证一下 OpenProcess 函数的正常使用：</p>\n<p><img data-src=\"image007.png\" alt=\"\" /></p>\n<p>我用 OD 附加了记事本，用 StudyPE+ 载入了进程中的记事本文件，均正常！</p>\n<p>至此内核重载完成。</p>\n<h1 id=\"reference\"><a class=\"anchor\" href=\"#reference\">#</a> Reference</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYnMucGVkaXkuY29tL3RocmVhZC0yNTM0MjUuaHRt\">https://bbs.pediy.com/thread-253425.htm</span><br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3doYXRkYXkvYXJ0aWNsZS9kZXRhaWxzLzE0MTYwODc1\">https://blog.csdn.net/whatday/article/details/14160875</span></p>\n",
            "tags": [
                "内核重载"
            ]
        },
        {
            "id": "https://or0kit.github.io/Bin/Core/WindowsXp/MultiCoreSynchronization/%E5%A4%9A%E6%A0%B8%E5%90%8C%E6%AD%A5-01%E4%B8%B4%E7%95%8C%E5%8C%BA%E4%B8%8E%E8%87%AA%E6%97%8B%E9%94%81/",
            "url": "https://or0kit.github.io/Bin/Core/WindowsXp/MultiCoreSynchronization/%E5%A4%9A%E6%A0%B8%E5%90%8C%E6%AD%A5-01%E4%B8%B4%E7%95%8C%E5%8C%BA%E4%B8%8E%E8%87%AA%E6%97%8B%E9%94%81/",
            "title": "多核同步-01临界区与自旋锁",
            "date_published": "2022-03-13T12:35:28.000Z",
            "content_html": "<h1 id=\"楔子\"><a class=\"anchor\" href=\"#楔子\">#</a> 楔子</h1>\n<p>并发执行的定义是，多个程序在一段重叠的时间段中开始、运行与结束，但这些程序并没有在任何一个时刻同时在执行。<br />\n并行执行，则意味着在同一个时刻，存在两个以上任务在同时运行。</p>\n<p>单核（是分时执行，不是真正的同时）</p>\n<p>多核（在某一个时刻，会同时有多个线程再执行）</p>\n<p>同步则是保证在并发执行的环境中各个线程可以有序的执行为了实现</p>\n<p><strong>只要提到并发就是多个线程操纵同一个资源的问题。</strong><br />\n有些指令是可以在多核下执行的，并不会影响什么，如读的操作，但是写就不行了，必须得保证有序。</p>\n<p>疑问：单核同步与多核同步一样吗？</p>\n<h1 id=\"临界区\"><a class=\"anchor\" href=\"#临界区\">#</a> 临界区</h1>\n<p>为什么要引入临界区呢？看一下以下代码</p>\n<h2 id=\"演示代码\"><a class=\"anchor\" href=\"#演示代码\">#</a> 演示代码</h2>\n<p><code>DWORD  dwVal = 0;</code> \t// 全局变量</p>\n<p>线程中的代码：</p>\n<p><code>dwVal ++;</code> \t// 只有一行  安全吗？</p>\n<p>对应的汇编代码：</p>\n<pre><code>mov\teax,[0x12345678]\nadd\teax,1\nmov\t[0x12345678],eax\n</code></pre>\n<p>上面的汇编代码是不安全的，不论是单核还是多核，在多线程下，不同的线程抢占时间片，以上代码就会出现执行顺序的错乱。</p>\n<h2 id=\"原子操作\"><a class=\"anchor\" href=\"#原子操作\">#</a> 原子操作</h2>\n<p><strong>所谓原子操作是指不会被线程调度机制打断的操作；</strong><br />\n<strong>这种操作一旦开始，就一直运行到结束，中间不会有任何 context switch （切换到另一个线程）。</strong></p>\n<p>LOCK 指令可以将将指令转换为原子指令。</p>\n<p><code>INC DWORD PTR DS:[0x12345678]</code> \t一行汇编代码，安全吗？</p>\n<p>这样一行指令在单核下是安全的，在多核下并不安全。</p>\n<p>改成</p>\n<p><code>LOCK INC DWORD PTR DS:[0x12345678]</code></p>\n<p>这样，这行指令就变成的原子指令，当一个核正在读取这个指令时其他核就不能读取这条指令了。</p>\n<p>查看 kernel32 中的  <code>InterlockedIncrement</code></p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>LONG __stdcall InterlockedIncrement (volatile LONG *lpAddend)</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>public _InterlockedIncrement@4</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>_InterlockedIncrement@4 proc near       ; </pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>lpAddend        &#x3D; dword ptr  4</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>mov     ecx, [esp+lpAddend] ; 获取加数变量的指针</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>mov     eax, 1          ; 设置增量值</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>lock xadd [ecx], eax    ; interlocked increment    联锁增量</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>inc     eax             ; 调整返回值</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>retn    4</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>_InterlockedIncrement@4 endp</pre></td></tr></table></figure><p><strong>xadd 指令将第一个操作数 (目标操作数) 与第二个操作数 (源操作数) 交换，然后将两个值的和加载到目标操作数中，该指令可以与 LOCK 前缀一起使用，允许该指令以原子方式执行。</strong></p>\n<p>原子操作相关的 API：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>InterlockedIncrement</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>InterlockedExchangeAdd</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>InterlockedDecrement</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>InterlockedFlushSList</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>InterlockedExchange</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>InterlockedPopEntrySList</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>InterlockedCompareExchange</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>InterlockedPushEntrySList</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr></table></figure><p><strong>什么时候加锁：我们只有一行代码是担心多核同时访问的，其他的代码多核访问并不影响！</strong></p>\n<h2 id=\"自己实现临界区\"><a class=\"anchor\" href=\"#自己实现临界区\">#</a> 自己实现临界区</h2>\n<p>如果执行多行原子指令安全吗？如下的场景：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>关键代码A\t<span class=\"token comment\">//N 行代码要求原子操作</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>关键代码B\t<span class=\"token comment\">// 单独加 LOCK 可以吗？</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>关键代码C</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr></table></figure><p>其实也不安全，当执行完第一行指令后，线程是可以被切换的，还是无法保证其执行的顺序。</p>\n<p>如何保证执行完这些代码后才让其他核继续执行呢？</p>\n<p>这就要设计一个临界区了。</p>\n<p><strong>临界区：一次只允许一个线程进入直到离开。</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>DWORD dwFlag <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 实现临界区的方式就是加锁</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>                  <span class=\"token comment\">// 锁：全局变量  进去加一 出去减一</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>dwFlag  <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\t\t<span class=\"token comment\">// 进入临界区\t</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span>\t</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tdwFlag   <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\t</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tdwFlag   <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\t<span class=\"token comment\">// 离开临界区</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这样设计也不是安全的，因为是先判断再修改的 dwFlag ，进入临界区后在还没有修改 dwflag 为 1 时线程被切走了，就不行了，另一个线程也可以进入临界区了等等，会造成一些列问题。</p>\n<p>之前利用互斥体、事件、信号量等等在多核的情况下也是安全的因为把线程都挂起了，只是效率不高罢了。</p>\n<p>临界区是只要保证一次就只有一个线程进入就行，怎么实现的都行！</p>\n<p>在单核的情况下实现临界区：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>全局变量：Flag &#x3D; 0</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>进入临界区：\t\t</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Lab：</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tmov eax,1</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\txadd [Flag],eax</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tcmp eax,0</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tjz endLab</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tdec [Flag]</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t&#x2F;&#x2F; 线程等待 Sleep..</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>endLab:</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tret</pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>离开临界区：</pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>dec [Flag]</pre></td></tr></table></figure><p>以上代码在单核下是安全的，想要在多核下也是安全的，就要加 lock 指令了：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>全局变量：Flag &#x3D; 0</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>进入临界区：\t\t</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Lab：</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tmov eax,1</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tlock xadd [Flag],eax</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tcmp eax,0</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tjz endLab</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tdec [Flag]</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t&#x2F;&#x2F; 线程等待 Sleep..</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>endLab:</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tret</pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>离开临界区：</pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>lock dec [Flag]</pre></td></tr></table></figure><h2 id=\"代码实现临界区\"><a class=\"anchor\" href=\"#代码实现临界区\">#</a> 代码实现临界区</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;Windows.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 实现临界区</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">bool</span> g_lock <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">__declspec</span><span class=\"token punctuation\">(</span>naked<span class=\"token punctuation\">)</span> __fastcall <span class=\"token function\">Enter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">bool</span><span class=\"token operator\">*</span> Lock<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t__asm <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t__Start<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\tmov eax<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\tlock xadd dword ptr <span class=\"token punctuation\">[</span>ecx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> eax<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\tcmp eax<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\tjnz __Waiting<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\tretn<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t__Waiting<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\tlock dec <span class=\"token punctuation\">[</span>ecx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\tpush ecx<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\tpush <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\tpush <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\tcall SleepEx<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\tpop ecx<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\tjmp __Start<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">__declspec</span><span class=\"token punctuation\">(</span>naked<span class=\"token punctuation\">)</span> __fastcall <span class=\"token function\">Leave</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">bool</span><span class=\"token operator\">*</span> Lock<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t__asm <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\tlock dec <span class=\"token punctuation\">[</span>ecx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\tretn<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Func1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>size_t i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">1000000</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\t<span class=\"token function\">Enter</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>g_lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\tx<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\t<span class=\"token function\">Leave</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>g_lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span>\t</pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Func2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>size_t i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">1000000</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t\t<span class=\"token function\">Enter</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>g_lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t\tx<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t\t<span class=\"token function\">Leave</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>g_lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre> </pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t<span class=\"token function\">CreateThread</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>LPTHREAD_START_ROUTINE<span class=\"token punctuation\">)</span>Func1<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t<span class=\"token function\">CreateThread</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>LPTHREAD_START_ROUTINE<span class=\"token punctuation\">)</span>Func2<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t<span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>不加临界区：</p>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<p>加临界区：</p>\n<p><img data-src=\"image002.png\" alt=\"\" /></p>\n<p>这个临界区的设计还是有问题的，就是如果我们执行完 SleepEx 后，进入临界区的线程还没有出来就有问题了。</p>\n<h2 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h2>\n<p>xadd 这种指令解决了我们哪些问题？</p>\n<p>为什么要这样设计？</p>\n<p>如果我们用</p>\n<p>LOCK INC DWORD PTR DS:[Flag]<br />\ncmp [Flag],0</p>\n<p>这样是不行了，如果在执行完 inc 后被线程被切换，另一个线程又执行了一遍，，我们是无法保证只有一个线程访问临界区的。</p>\n<p>但如果我们用上面的代码：</p>\n<p>一个线程进来了执行了  <code>xadd</code>  后  <code>eax=0</code>   <code>flag=1</code>  ，假设这个时候被切走了，又一个线程执行这段代码，再次执行  <code>xadd</code>  这时  <code>eax=1</code>  ，也就无法执行后面的代码了，只能在临界区中等待，保证了只有一个线程进入临界区。</p>\n<p>这个等待时间我们自己设置，那么等待多久好呢？等待结束后，还是进不去临界区怎么办呢？或者在等待期间，临界区已经可以进入了，但我们仍处于等待阶段怎么办呢？</p>\n<p>这些问题学完后面的知识就可以解决了。</p>\n<h1 id=\"自旋锁\"><a class=\"anchor\" href=\"#自旋锁\">#</a> 自旋锁</h1>\n<p>上面我们确保临界区的方法是把其他的线程休眠，也就是线程切换，我们了解过线程切换的本质，线程切换是不是太浪费效率了呢？有没有一种轻量级的实现方法呢？</p>\n<p>Windows 设计了自旋锁，查看其 API：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>__fastcall KiAcquireSpinLock (x)</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        public @KiAcquireSpinLock@4</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        lock bts dword ptr [ecx], 0 ; ecx &#x3D; 参数</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                                    ; bts 指令：</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                                    ; 取 [ecx] 二进制比特位的第 0 位，存在 cf 标志位中</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                                    ; 将 [ecx] 二进制比特位的第 0 位设置为 1</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        jb      short loc_469B98 ; cf&#x3D;1 时跳转</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        retn</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>loc_469B98:  </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        test    dword ptr [ecx], 1 ; 判断参数是否又为 0 了，既判断进入了临界区的线程是否离开了临界区。</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        jz      short @KiAcquireSpinLock@4 </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        pause</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        jmp     short loc_469B98</pre></td></tr></table></figure><p>模拟一下其流程：</p>\n<p><strong>注意是 fastcall 传参。</strong><br />\n<strong>线程第一次执行这个函数时，假设参数是 0，那么执行完  <code>bts</code>  指令后，  <code>CF = 0</code>   参数  <code>x=1</code>  不会跳转，然后线程进入临界。</strong><br />\n<strong>如果在这个线程进入临界区后，其他核的线程又开始执行这个函数，那么此时这个参数就是 1（因为是全局变量），这个时候再执行  <code>bts</code>  指令后  <code>CF=1</code>   <code>x=1</code>  这时会跳转，然后判断参数是否又为 0 了，既判断进入了临界区的线程是否离开了临界区，如果离开了临界区则重新调用该函数，如果没有则执行  <code>pause</code>  指令，该指令会让 cpu 空转一会儿，具体是多少我没找到相关资料，在滴水的视频中，有人说是 20 纳秒，然后就循环判断了，直到可以进入临界区。</strong></p>\n<h2 id=\"自旋锁的优点和缺点\"><a class=\"anchor\" href=\"#自旋锁的优点和缺点\">#</a> 自旋锁的优点和缺点</h2>\n<p>在多核的环境中效率很高，但在单核的环境中不行。</p>\n<h2 id=\"作业\"><a class=\"anchor\" href=\"#作业\">#</a> 作业</h2>\n<p><strong>在内核环境下如何对一个高并发的函数进行 HOOK 而不会出错？</strong></p>\n<p>这个问题的关键是，hook 后一般是 e8 /e9 后跟 4 字节，总共 5 字节，但没办法一次性改 5 个字节，可能改了第一个字节，正要改后 4 个字节时，别的线程进来了，就会出错。</p>\n<p>之前学习的 INLINE HOOK 修改字节的方法是使用  <code>memcpy</code>  这样在内核中 HOOK 一个高并发的函数有很大的几率出错，可能会直接蓝屏。</p>\n<p>在网上看到三种办法：</p>\n<p>短跳中转 利用  <code>EB</code>  指令修改前 2 字节跳到某个长跳的方式。<br />\n中断门 中断门也是只用改两个字节，需要先构造中断门。<br />\n找一条一次性修改 8 字节的指令，这个指令就是  <code>cmpxchg8b</code>  .</p>\n<p>代码实现 INLINE Hook 线程交换的函数  <code>SwapContext</code>  ：</p>\n<p>在  <code>Windbg</code>  中  <code>u SwapContext</code>  得到  <code>SwapContext</code>  函数的地址是   <code>80546bc0</code></p>\n<p>本次 Hook 要用  <code>cmpxchg8b</code>  指令一次性修改 8 个字节，而  <code>SwapContext</code>  函数的前 8 个字节为：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>0: kd&gt; u SwapContext</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>nt!SwapContext:</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>80546bc0 0ac9            or      cl,cl</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>80546bc2 26c6462d02      mov     byte ptr es:[esi+2Dh],2</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>80546bc7 9c              pushfd</pre></td></tr></table></figure><p>既：  <code>0a c9 26 c6 46 2d 02 9c</code></p>\n<p>而我们要使其改为  <code>jmp xxxxxxxx</code>  --&gt;   <code>E9 xxxxxxxx</code></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>* 在多核的环境下 Hook xp sp3 的 SwapContext  函数</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>**/</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;ntddk.h></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>ULONG SwapContextAddress <span class=\"token operator\">=</span> <span class=\"token number\">0x80546bc0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>ULONG NextAddress <span class=\"token operator\">=</span> <span class=\"token number\">0x80546bc8</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>ULONG OldCode<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// 关闭内存页写入保护</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">_declspec</span><span class=\"token punctuation\">(</span>naked<span class=\"token punctuation\">)</span> <span class=\"token function\">disablePageWriteProtect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    _asm</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        push eax<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        mov eax<span class=\"token punctuation\">,</span> cr0<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token operator\">and</span> eax<span class=\"token punctuation\">,</span> <span class=\"token operator\">~</span><span class=\"token number\">0x10000</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        mov cr0<span class=\"token punctuation\">,</span> eax<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        pop eax<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        ret<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\">// 开启内存页写入保护</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">_declspec</span><span class=\"token punctuation\">(</span>naked<span class=\"token punctuation\">)</span> <span class=\"token function\">enablePageWriteProtect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    _asm</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        push eax<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        mov eax<span class=\"token punctuation\">,</span> cr0<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token operator\">or</span> eax<span class=\"token punctuation\">,</span> <span class=\"token number\">0x10000</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        mov cr0<span class=\"token punctuation\">,</span> eax<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        pop eax<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        ret<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token comment\">// 打印新线程和老线程的 ETHREAD </span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token comment\">// </span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>VOID <span class=\"token function\">__declspec</span><span class=\"token punctuation\">(</span>naked<span class=\"token punctuation\">)</span> <span class=\"token function\">MySwapContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t__asm sub esp<span class=\"token punctuation\">,</span> <span class=\"token number\">0x50</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 提升堆栈，提高容错性。</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\tULONG NewThread<span class=\"token punctuation\">,</span> OldThread<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t__asm <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t\tmov NewThread<span class=\"token punctuation\">,</span> esi<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t\tmov OldThread<span class=\"token punctuation\">,</span> edi<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>NewThread <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span> <span class=\"token operator\">||</span> OldThread <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"New Thread ETHREAD Address:%X,Old Thread ETHREAD Address:%X\\t\\n\"</span><span class=\"token punctuation\">,</span> NewThread<span class=\"token punctuation\">,</span> OldThread<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t__asm add esp<span class=\"token punctuation\">,</span> <span class=\"token number\">0x50</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t<span class=\"token comment\">// 执行被覆盖的 SwapContext 的代码</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t__asm <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t\t<span class=\"token operator\">or</span> cl<span class=\"token punctuation\">,</span> cl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t\tmov  byte ptr es <span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>esi <span class=\"token operator\">+</span> <span class=\"token number\">0x2D</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t\tpushfd<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t\tjmp NextAddress<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre></pre></td></tr><tr><td data-num=\"68\"></td><td><pre></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>VOID <span class=\"token function\">DriverUnload</span><span class=\"token punctuation\">(</span>PDRIVER_OBJECT pDriver<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    <span class=\"token comment\">// 0a c9 26 c6 46 2d 02 9c</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>    OldCode<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0xC626C90A</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    OldCode<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x9C022D46</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    <span class=\"token function\">disablePageWriteProtect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>    _asm <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>        pushad<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>        pushfd<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>        mov esi<span class=\"token punctuation\">,</span> <span class=\"token number\">0x805428E0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>        mov edx<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>esi<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>        mov eax<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>esi <span class=\"token operator\">+</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>        mov ebx<span class=\"token punctuation\">,</span> OldCode<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>        mov ecx<span class=\"token punctuation\">,</span> OldCode<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 这个必须得填 4</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>        lock CMPXCHG8B<span class=\"token punctuation\">[</span>esi<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>        popfd<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>        popad<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>    <span class=\"token function\">enablePageWriteProtect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是驱动，我卸载了\\t\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>NTSTATUS <span class=\"token function\">DriverEntry</span><span class=\"token punctuation\">(</span>PDRIVER_OBJECT pDriver<span class=\"token punctuation\">,</span> PUNICODE_STRING pRegPath<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>\tpDriver<span class=\"token operator\">-></span>DriverUnload <span class=\"token operator\">=</span> DriverUnload<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是驱动,我运行了\\t\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>\t<span class=\"token comment\">// 在 Windbg 中 u SwapContext 得到 SwapContext 函数的地址是  80546bc0</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>\t<span class=\"token comment\">//jmpCode  =  目标地址 - 当前地址 - 当前指令长度</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"99\"></td><td><pre>    <span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"HookSwapContext:%p\\n\"</span><span class=\"token punctuation\">,</span> MySwapContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>    ULONG JmpCode <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>ULONG<span class=\"token punctuation\">)</span>MySwapContext <span class=\"token operator\">-</span> SwapContextAddress <span class=\"token operator\">-</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"103\"></td><td><pre>    <span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"JmpCode:%X\\n\"</span><span class=\"token punctuation\">,</span> JmpCode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>    ULONG Code<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">0xE9</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre></pre></td></tr><tr><td data-num=\"106\"></td><td><pre> </pre></td></tr><tr><td data-num=\"107\"></td><td><pre>    PUCHAR pCode <span class=\"token operator\">=</span> Code<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>    <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>pCode<span class=\"token operator\">+</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x90</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>    <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>ULONG<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>pCode<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> JmpCode<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>    <span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Code[0]:%X\\n\"</span><span class=\"token punctuation\">,</span> Code<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>    <span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Code[1]:%X\\n\"</span><span class=\"token punctuation\">,</span> Code<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>    <span class=\"token function\">disablePageWriteProtect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>    __asm <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>        pushad<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>        pushfd<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>        mov esi<span class=\"token punctuation\">,</span> SwapContextAddress<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>        mov eax<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>esi<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>        mov edx<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>esi <span class=\"token operator\">+</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>        mov ebx<span class=\"token punctuation\">,</span> Code<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>        mov ecx<span class=\"token punctuation\">,</span> Code<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 这个必须得填 4</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>        <span class=\"token keyword\">int</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>        lock CMPXCHG8B<span class=\"token punctuation\">[</span>esi<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"126\"></td><td><pre>        CMPXCHG8B 的用法</pre></td></tr><tr><td data-num=\"127\"></td><td><pre>        该指令判断指定内存中的 8 字节内容和 EDX:EAX （edx 高 32 位，eax, 低 32 位）中的 64 字节内容是否相同，</pre></td></tr><tr><td data-num=\"128\"></td><td><pre>        如果相同，就把 ECX : EBX（ecx 高 32 位，ebx, 低 32 位）中的内容替换到指定内存。</pre></td></tr><tr><td data-num=\"129\"></td><td><pre>        如果不相同，就把指定内存中的值替换到 ECX : EBX 中。</pre></td></tr><tr><td data-num=\"130\"></td><td><pre>        */</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>        popfd<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>        popad<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>    <span class=\"token function\">enablePageWriteProtect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>    <span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"高并发HOOK成功!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>\t<span class=\"token keyword\">return</span> STATUS_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在 Windbg 中查看：</p>\n<p><img data-src=\"image003.png\" alt=\"\" /></p>\n<p>如果打印的话虚拟机就会卡住，winbdg 中会一直显示打印系信息。</p>\n<p>一步步调试查看是否修改成功。</p>\n<p><img data-src=\"image004.png\" alt=\"\" /></p>\n<p><img data-src=\"image005.png\" alt=\"\" /></p>\n<p>没问题！</p>\n<h1 id=\"reference\"><a class=\"anchor\" href=\"#reference\">#</a> Reference</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNDkwODczL2FydGljbGUvZGV0YWlscy8xMDU4ODIyNjg=\">https://blog.csdn.net/qq_41490873/article/details/105882268</span><br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NoYXJlbmZpc2gvYXJ0aWNsZS9kZXRhaWxzLzEyMTYyNTEwNg==\">https://blog.csdn.net/sharenfish/article/details/121625106</span><br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0t3YW5zeS9hcnRpY2xlL2RldGFpbHMvMTA5OTk1MTk2\">https://blog.csdn.net/Kwansy/article/details/109995196</span></p>\n",
            "tags": [
                "自旋锁",
                "临界区"
            ]
        },
        {
            "id": "https://or0kit.github.io/Bin/Core/WindowsXp/SystemCall/%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8-%E6%80%BB%E7%BB%93/",
            "url": "https://or0kit.github.io/Bin/Core/WindowsXp/SystemCall/%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8-%E6%80%BB%E7%BB%93/",
            "title": "系统调用-总结",
            "date_published": "2022-03-13T06:37:38.000Z",
            "content_html": "<h1 id=\"楔子\"><a class=\"anchor\" href=\"#楔子\">#</a> 楔子</h1>\n<p>学完 APC 后，梳理一下学到的知识，看看能不能从 3 环进 0 环再回 3 环来。</p>\n<h1 id=\"流程梳理\"><a class=\"anchor\" href=\"#流程梳理\">#</a> 流程梳理</h1>\n<p>以 R3 函数  <code>ReadProcessMemory</code>  为例</p>\n<p>先分析函数调用流程</p>\n<p><code>ReadProcessMemory</code>  调用了从 ntdll 中 导入的函数  <code>NtReadVirtualMemory</code></p>\n<p>在  <code>ntdll</code>  中查看 此函数</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>_NtReadVirtualMemory@20 proc near    \t\t\t\t</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>mov     eax, 0BAh       ; NtReadVirtualMemory\t\t\t\t</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>mov     edx, 7FFE0300h\t\t\t\t</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> call    dword ptr [edx]\t\t\t\t</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>retn    14h</pre></td></tr></table></figure><p>可以看到这个函数只有短短几行汇编代码：给 eax 赋个值，然后给 edx 个地址，然后 call 一下 edx 指向的地址，然后就平栈（由于 STDCALL 调用约定）返回了。</p>\n<p>首先我们要知道 这里调用的是什么函数</p>\n<p>在 0x7FFE0000 的位置是一个名为  <code>KUSER_SHARED_DATA</code>  的结构体，这个结构体与 0 环 FFDF0000 存储的数据一模一样，是由同一个物理页映射的。\t\t\t\t\t\t\t\t\t\t\t\t\t<br />\n在其偏移 0x300 的位置有一个成员其存储的就是调用方式，如今的 CPU 都支持快速调用了，所以一般存储的是 ntdll 中的 KiFastSystemCall 函数</p>\n<p>查看这个函数</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>_KiFastSystemCall@0 proc near \t\t\t\t\t\t\t\t\t\t\t\t\t</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>mov edx, esp\t\t\t\t\t\t\t\t\t\t\t\t\t</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> sysenter</pre></td></tr></table></figure><p>将 esp 存储在 edx 中后就执行了 sysenter 指令</p>\n<p>sysenter 指令就是取出了存储在 MSR 寄存器中的 CS、ESP、EIP，这是提升权限所必须的</p>\n<p>这个时候 EIP 改变了，在我的计算机上 MSR [176] 中存储的地址是内核文件中的 KiFastCallEntry 函数</p>\n<p>快速调用进 0 环后，0 环的堆栈指向 TrapFrame+0x78 的位置，接下来的\t\t\t\t\t\t<br />\n就是填充这个结构了。\t\t\t\t\t\t<br />\n填充完毕后，也就是保存好 3 环的堆栈和寄存器环境后\t\t\t\t\t\t<br />\n准备调用 0 环的函数。\t\t\t\t\t\t<br />\n调用完函数后 ebp 和 esp 又指向了 TrapFrame</p>\n<p>判断 ETHREAD 是否有用户 APC 需要处理，如果有就处理 APC，一直到没有用户 APC 需要处理，这里是一个循环。<br />\n没有用户 APC 需要处理后就跳出了循环</p>\n<p>后面的一些汇编代码我在内核中跟了一下。</p>\n<p>如下：</p>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<p>以上汇编代码只有在最后跳到了 KiSystemCallExit2 中 其他判断都没跳。</p>\n",
            "tags": [
                "API进出内核"
            ]
        },
        {
            "id": "https://or0kit.github.io/Bin/Core/WindowsXp/Apc/APC%E6%9C%BA%E5%88%B6-04APC%E7%9A%84%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B/",
            "url": "https://or0kit.github.io/Bin/Core/WindowsXp/Apc/APC%E6%9C%BA%E5%88%B6-04APC%E7%9A%84%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B/",
            "title": "APC机制-04APC的执行过程",
            "date_published": "2022-03-06T07:34:20.000Z",
            "content_html": "<h1 id=\"楔子\"><a class=\"anchor\" href=\"#楔子\">#</a> 楔子</h1>\n<p>APC 函数的执行与插入并不是同一个线程，具体点说：</p>\n<p>在 A 线程中向 B 线程插入一个 APC，插入的动作是在 A 线程中完成的，但什么时候执行则由 B 线程决定！，所以叫 “异步过程调用”。</p>\n<p>内核 APC 函数与用户 APC 函数的执行时间和执行方式也有区别的。</p>\n<h1 id=\"apc的执行过程\"><a class=\"anchor\" href=\"#apc的执行过程\">#</a> APC 的执行过程</h1>\n<p>首先研究一下内核 APC 函数在什么时候执行。</p>\n<h2 id=\"线程切换\"><a class=\"anchor\" href=\"#线程切换\">#</a> 线程切换</h2>\n<p><code>SwapContext</code> \t<strong>判断是否有内核 APC</strong> -&gt;  <code>KiSwapThread</code>  -&gt;  <code>KiDeliverApc</code> \t执行内核 APC 函数。</p>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<p><img data-src=\"image002.png\" alt=\"\" /></p>\n<h2 id=\"系统调用-中断或异常\"><a class=\"anchor\" href=\"#系统调用-中断或异常\">#</a> 系统调用、中断或异常</h2>\n<p>由 0 环返回 3 环的时候。这个执行点的条件是有用户 APC 需要执行，如果没有用户 APC 需要执行就直接返回了。</p>\n<p>在单核 ntoskrnl.exe 中是  <code>_KiServiceExit</code>  函数 在多核 ntkrnlpa.exe 中是在函数  <code>KiFastCallEntry</code>  的下面。</p>\n<p><img data-src=\"image003.png\" alt=\"\" /></p>\n<h2 id=\"分析-kideliverapc-函数\"><a class=\"anchor\" href=\"#分析-kideliverapc-函数\">#</a> 分析 KiDeliverApc 函数</h2>\n<p>无论有用户 APC 还是内核 APC 需要执行都会调用这个函数。</p>\n<p><strong>在 IDA 中分析完毕后，发现关于执行内核 APC 有两种情况，既  <code>NormalRoutine</code>  为空和不为空，先执行特殊的。<br />\n在执行用户 APC 时也是一样，分为  <code>NormalRoutine</code>  为空和不为空，若是不为空就调用了  <code>KiInitializeUserApc</code>  函数。若是为空就执行  <code>KeTestAlertThread</code>  函数，这里调用这个函数又判断了用户 APC 列表是否是空表，如果不为空把   <code>Thread-&gt;ApcState.UserApcPending = TRUE;</code>  后就返回了。</strong></p>\n<p><img data-src=\"image004.png\" alt=\"\" /></p>\n<p>对于其中的一些关键操作，分为处理内核 APC 和用户 APC 分别进行讨论。</p>\n<h3 id=\"kideliverapc中处理内核apc的流程\"><a class=\"anchor\" href=\"#kideliverapc中处理内核apc的流程\">#</a> KiDeliverApc 中处理内核 APC 的流程</h3>\n<details class=\"info\"><summary>处理普通内核APC (点击展开)</summary><div>\n<ol>\n<li>\n<p>判断第一个链表是否为空</p>\n</li>\n<li>\n<p>判断 KTHREAD.ApcState.KernelApcInProgress 是否为 1</p>\n</li>\n<li>\n<p>判断是否禁用内核 APC (KTHREAD.KernelApcDisable 是否为 1)</p>\n</li>\n<li>\n<p>将当前 KAPC 结构体从链表中摘除</p>\n</li>\n<li>\n<p>执行 KAPC.KernelRoutine 指定的函数 释放 KAPC 结构体占用的空间</p>\n</li>\n<li>\n<p>将 KTHREAD.ApcState.KernelApcInProgress 设置为 1 标识正在执行内核 APC</p>\n</li>\n<li>\n<p>执行真正的内核 APC 函数 (KAPC.NormalRoutine)</p>\n</li>\n<li>\n<p>执行完毕 将 KernelApcInProgress 改为 0</p>\n</li>\n<li>\n<p>循环</p>\n</li>\n</ol>\n</div></details>\n<p>总结：</p>\n<ol>\n<li>内核 APC 在线程切换的时候就会执行，这也就意味着，只要插入内核 APC 很快就会执行。</li>\n<li>在执行用户 APC 之前会先执行内核 APC。</li>\n<li>内核 APC 在内核空间执行，不需要换栈，一个循环全部执行完毕。</li>\n</ol>\n<h3 id=\"kideliverapc中处理用户apc的流程\"><a class=\"anchor\" href=\"#kideliverapc中处理用户apc的流程\">#</a> KiDeliverApc 中处理用户 APC 的流程</h3>\n<p><strong>执行用户 APC 时的堆栈操作</strong></p>\n<p>处理用户 APC 要比内核 APC 复杂的多，因为，用户 APC 函数要在用户空间执行的，这里涉及到大量换栈的操作：</p>\n<p>当线程从用户层进入内核层时，要保留原来的运行环境，比如各种寄存器，栈的位置等等  (_Trap_Frame)，然后切换成内核的堆栈，如果正常返回，恢复堆栈环境即可。</p>\n<p>但如果有用户 APC 要执行的话，就意味着线程要提前返回到用户空间去执行，而且返回的位置不是线程进入内核时的位置，而是返回到其他的位置，每处理一个用户 APC 都会涉及到：  <code>内核--&gt;用户空间--&gt;再回到内核空间</code></p>\n<p>堆栈的操作比较复杂，如果不了解堆栈的操作细节不可能理解用户 APC 是如何执行的！</p>\n<details class=\"info\"><summary>处理用户APC流程 （点击展开）</summary><div>\n<ol>\n<li>\n<p>判断用户 APC 链表是否为空</p>\n</li>\n<li>\n<p>判断第一个参数是为 1</p>\n</li>\n<li>\n<p>判断 ApcState.UserApcPending 是否为 1</p>\n</li>\n<li>\n<p>将 ApcState.UserApcPending 设置为 0</p>\n</li>\n<li>\n<p>链表操作 将当前 APC 从用户队列中拆除</p>\n</li>\n<li>\n<p>调用函数 (KAPC.KernelRoutine) 释放 KAPC 结构体内存空间</p>\n</li>\n<li>\n<p>调用 KiInitializeUserApc 函数</p>\n</li>\n</ol>\n</div></details>\n<p><strong>想要继续了解处理用户 APC 时是如何处理堆栈问题的就要接着分析  <code>KiInitializeUserApc</code>  函数了。</strong></p>\n<h2 id=\"分析-kiinitializeuserapc-函数\"><a class=\"anchor\" href=\"#分析-kiinitializeuserapc-函数\">#</a> 分析 KiInitializeUserApc 函数</h2>\n<p>线程进 0 环时，原来的运行环境 (寄存器栈顶等) 保存到  <code>_Trap_Frame</code>  结构体中，如果要提前返回 3 环去处理用户 APC，就必须要修改  <code>_Trap_Frame</code>  结构体：</p>\n<p>比如：进 0 环时的位置存储在 EIP 中，现在要提前返回，而且返回的并不是原来的位置，那就意味着必须要修改 EIP 为新的返回位置。还有堆栈 ESP, 也要修改为处理 APC 需要的堆栈。那原来的值怎么办呢？处理完 APC 后该如何返回原来的位置呢？</p>\n<p><code>KiInitializeUserApc</code>  要做的第一件事就是备份：</p>\n<p>将原来  <code>_Trap_Frame</code>  里的值备份到一个新的结构体中 (CONTEXT)，这个功能由其子函数  <code>KeContextFromKframes</code>  来完成。</p>\n<p>在 IDA 中查看其汇编。</p>\n<p><img data-src=\"image005.png\" alt=\"\" /></p>\n<p>也可结合其源码分析，有整个流程的详细注释。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>VOID</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">KiInitializeUserApc</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    IN PKEXCEPTION_FRAME ExceptionFrame<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    IN PKTRAP_FRAME TrapFrame<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    IN PKNORMAL_ROUTINE NormalRoutine<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    IN PVOID NormalContext<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    IN PVOID SystemArgument1<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    IN PVOID SystemArgument2</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">/*++</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>Routine Description:</pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    This function is called to initialize the context for a user mode APC.</pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>Arguments:</pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    ExceptionFrame - Supplies a pointer to an exception frame.</pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    TrapFrame - Supplies a pointer to a trap frame.</pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    NormalRoutine - Supplies a pointer to the user mode APC routine.</pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    NormalContext - Supplies a pointer to the user context for the APC</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        routine.</pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    SystemArgument1 - Supplies the first system supplied value.</pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    SystemArgument2 - Supplies the second system supplied value.</pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>Return Value:</pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    None.</pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>--*/</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    EXCEPTION_RECORD ExceptionRecord<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    CONTEXT ContextFrame<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    LONG Length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    ULONG UserStack<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token comment\">// APCs are not defined for V86 mode; however, it is possible a</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token comment\">// thread is trying to set it's context to V86 mode - this isn't</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token comment\">// going to work, but we don't want to crash the system so we</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token comment\">// check for the possibility before hand.</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token comment\">// APCs 没有在虚拟 86 模式下定义；然而，线程可能试图将它的 context 设置为虚拟 86 模式</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token comment\">// 这将不会工作，但我们不想崩溃系统，所以我们检查之前的可能性。</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>TrapFrame<span class=\"token operator\">-></span>EFlags <span class=\"token operator\">&amp;</span> EFLAGS_V86_MASK<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token comment\">// Move machine state from trap and exception frames to the context frame.</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    ContextFrame<span class=\"token punctuation\">.</span>ContextFlags <span class=\"token operator\">=</span> CONTEXT_FULL <span class=\"token operator\">|</span> CONTEXT_DEBUG_REGISTERS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token function\">KeContextFromKframes</span><span class=\"token punctuation\">(</span>TrapFrame<span class=\"token punctuation\">,</span> ExceptionFrame<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>ContextFrame<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token comment\">// Transfer the context information to the user stack, initialize the</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    <span class=\"token comment\">// APC routine parameters, and modify the trap frame so execution will</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    <span class=\"token comment\">// continue in user mode at the user mode APC dispatch routine.</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    <span class=\"token comment\">// 将上下文信息传递给用户栈，初始化 APC 例程参数，并修改 trap frame，以便在用户模式下继续执行 APC 调度例程。</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre></pre></td></tr><tr><td data-num=\"72\"></td><td><pre></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>    try <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>        <span class=\"token function\">ASSERT</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>TrapFrame<span class=\"token operator\">-></span>SegCs <span class=\"token operator\">&amp;</span> MODE_MASK<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> KernelMode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Assert usermode frame</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>        <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>        <span class=\"token comment\">// Compute length of context record and new aligned user stack pointer.</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>        <span class=\"token comment\">// 计算 context record 的长度 并提升堆栈 且设置用户堆栈指针的对齐。</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>        Length <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>CONTEXT<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> CONTEXT_ROUND<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>                    <span class=\"token operator\">~</span>CONTEXT_ROUND<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>KAPC_RECORD<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>        UserStack <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>ContextFrame<span class=\"token punctuation\">.</span>Esp <span class=\"token operator\">&amp;</span> <span class=\"token operator\">~</span>CONTEXT_ROUND<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> Length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>        <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>        <span class=\"token comment\">// Probe user stack area for writability and then transfer the</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>        <span class=\"token comment\">// context record to the user stack.</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>        <span class=\"token comment\">// 探测用户堆栈区域的可写性，然后将上下文记录传输到用户堆栈。</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>        <span class=\"token function\">ProbeForWrite</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>PCHAR<span class=\"token punctuation\">)</span>UserStack<span class=\"token punctuation\">,</span> Length<span class=\"token punctuation\">,</span> CONTEXT_ALIGN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>        <span class=\"token function\">RtlCopyMemory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>PULONG<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>UserStack <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>KAPC_RECORD<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>                     <span class=\"token operator\">&amp;</span>ContextFrame<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>CONTEXT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>        <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>        <span class=\"token comment\">// Force correct R3 selectors into TrapFrame.</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>        <span class=\"token comment\">// 在 TrapFrame 中直接修正 R3 的段选择子</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>        TrapFrame<span class=\"token operator\">-></span>SegCs <span class=\"token operator\">=</span> <span class=\"token function\">SANITIZE_SEG</span><span class=\"token punctuation\">(</span>KGDT_R3_CODE<span class=\"token punctuation\">,</span> UserMode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>        TrapFrame<span class=\"token operator\">-></span>HardwareSegSs <span class=\"token operator\">=</span> <span class=\"token function\">SANITIZE_SEG</span><span class=\"token punctuation\">(</span>KGDT_R3_DATA<span class=\"token punctuation\">,</span> UserMode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>        TrapFrame<span class=\"token operator\">-></span>SegDs <span class=\"token operator\">=</span> <span class=\"token function\">SANITIZE_SEG</span><span class=\"token punctuation\">(</span>KGDT_R3_DATA<span class=\"token punctuation\">,</span> UserMode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>        TrapFrame<span class=\"token operator\">-></span>SegEs <span class=\"token operator\">=</span> <span class=\"token function\">SANITIZE_SEG</span><span class=\"token punctuation\">(</span>KGDT_R3_DATA<span class=\"token punctuation\">,</span> UserMode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>        TrapFrame<span class=\"token operator\">-></span>SegFs <span class=\"token operator\">=</span> <span class=\"token function\">SANITIZE_SEG</span><span class=\"token punctuation\">(</span>KGDT_R3_TEB<span class=\"token punctuation\">,</span> UserMode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>        TrapFrame<span class=\"token operator\">-></span>SegGs <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>        TrapFrame<span class=\"token operator\">-></span>EFlags <span class=\"token operator\">=</span> <span class=\"token function\">SANITIZE_FLAGS</span><span class=\"token punctuation\">(</span> ContextFrame<span class=\"token punctuation\">.</span>EFlags<span class=\"token punctuation\">,</span> UserMode <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>        <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>        <span class=\"token comment\">// If thread is supposed to have IOPL, then force it on in eflags</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>        <span class=\"token comment\">// 如果线程应该有 IOPL，那么直接把它赋给 eflags</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">KeGetCurrentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>Iopl<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>            TrapFrame<span class=\"token operator\">-></span>EFlags <span class=\"token operator\">|=</span> <span class=\"token punctuation\">(</span>EFLAGS_IOPL_MASK <span class=\"token operator\">&amp;</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// IOPL = 3</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>        <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>        <span class=\"token comment\">// Set the address of the user APC routine, the APC parameters, the</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>        <span class=\"token comment\">// new frame pointer, and the new stack pointer in the current trap</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>        <span class=\"token comment\">// frame. Set the continuation address so control will be transferred</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>        <span class=\"token comment\">// to the user APC dispatcher.</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>        <span class=\"token comment\">// 设置当前 trap frame 中用户 APC 例程地址、APC 参数、新的帧指针和新的栈指针。</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>        <span class=\"token comment\">// 设置延续地址，这样控制将被转移到用户 APC 调度程序。</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>        TrapFrame<span class=\"token operator\">-></span>HardwareEsp <span class=\"token operator\">=</span> UserStack<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>        TrapFrame<span class=\"token operator\">-></span>Eip <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>ULONG<span class=\"token punctuation\">)</span>KeUserApcDispatcher<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>        TrapFrame<span class=\"token operator\">-></span>ErrCode <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>        <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>PULONG<span class=\"token punctuation\">)</span>UserStack<span class=\"token punctuation\">)</span><span class=\"token operator\">++</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>ULONG<span class=\"token punctuation\">)</span>NormalRoutine<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>        <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>PULONG<span class=\"token punctuation\">)</span>UserStack<span class=\"token punctuation\">)</span><span class=\"token operator\">++</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>ULONG<span class=\"token punctuation\">)</span>NormalContext<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>        <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>PULONG<span class=\"token punctuation\">)</span>UserStack<span class=\"token punctuation\">)</span><span class=\"token operator\">++</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>ULONG<span class=\"token punctuation\">)</span>SystemArgument1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>        <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>PULONG<span class=\"token punctuation\">)</span>UserStack<span class=\"token punctuation\">)</span><span class=\"token operator\">++</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>ULONG<span class=\"token punctuation\">)</span>SystemArgument2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token function\">except</span> <span class=\"token punctuation\">(</span><span class=\"token function\">KiCopyInformation</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>ExceptionRecord<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>                                <span class=\"token punctuation\">(</span><span class=\"token function\">GetExceptionInformation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>ExceptionRecord<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>        <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>        <span class=\"token comment\">// Set the address of the exception to the current program address</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>        <span class=\"token comment\">// and raise the exception by calling the exception dispatcher.</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>        <span class=\"token comment\">// 将异常的地址设置为当前程序的地址，并通过调用异常调度程序引发异常。</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>        ExceptionRecord<span class=\"token punctuation\">.</span>ExceptionAddress <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PVOID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>TrapFrame<span class=\"token operator\">-></span>Eip<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>        <span class=\"token function\">KiDispatchException</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>ExceptionRecord<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>                            ExceptionFrame<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>                            TrapFrame<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>                            UserMode<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>                            TRUE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"kiinitializeuserapc-函数流程\"><a class=\"anchor\" href=\"#kiinitializeuserapc-函数流程\">#</a> KiInitializeUserApc 函数流程</h2>\n<ol>\n<li>判断是否是虚拟 8086 模式，如果是函数直接返回。</li>\n<li>设置 ContextFlags 并调用 KeContextFromKframes  将 trap 和 exception frames 移动到 context frame。</li>\n<li>判断帧栈是否是用户模式</li>\n<li>计算 context record 的长度 并提升堆栈 且设置用户堆栈指针的对齐。</li>\n<li>探测用户堆栈区域的可写性，然后将上下文记录传输到用户堆栈。</li>\n<li>在 TrapFrame 中直接修正 R3 的段选择子，如果线程应该有 IOPL，那么直接把它赋给 eflags</li>\n<li>设置当前 trap frame 中用户 APC 例程地址、APC 参数、新的帧指针和新的栈指针。设置延续地址，这样控制将被转移到用户 APC 调度程序</li>\n<li>如果在步骤 3 至 7 中出现异常，则会将异常的地址设置为当前程序的地址，并通过调用异常调度程序引发异常。</li>\n</ol>\n<h3 id=\"如何在3环执行用户apc\"><a class=\"anchor\" href=\"#如何在3环执行用户apc\">#</a> 如何在 3 环执行用户 APC</h3>\n<p>可以观察到修改了  <code>TrapFrame</code>  中存储的 EIP 的值，将其改为了  <code>KeUserApcDispatcher</code>  这是一个函数，在 ntdll 中是  <code>KiUserApcDispatcher</code>  函数。</p>\n<p>在  <code>ntdll.dll</code>  当中，我们用 IDA 打开看看：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>.text:7C92E430 ; __stdcall KiUserApcDispatcher(x, x, x, x, x)</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>.text:7C92E430                 public _KiUserApcDispatcher@20</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>.text:7C92E430 _KiUserApcDispatcher@20 proc near       ; DATA XREF: .text:off_7C923428↑o</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>.text:7C92E430</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>.text:7C92E430 arg_C           &#x3D; byte ptr  10h</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>.text:7C92E430</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>.text:7C92E430                 lea     edi, [esp+arg_C] ;  (edi)-&gt;context frame</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>.text:7C92E434                 pop     eax             ; (eax)-&gt;specified function</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>.text:7C92E435                 call    eax</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>.text:7C92E437                 push    1</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>.text:7C92E439                 push    edi</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>.text:7C92E43A                 call    _ZwContinue@8   ; stdCall   _ZwContinue, &lt;edi, 1&gt;</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>.text:7C92E43A                                         ;</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>.text:7C92E43A                                         ; 1 - set alert argument true</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>.text:7C92E43A                                         ; ebp - addr of context frame</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>.text:7C92E43A                                         ; execute system service to continue</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>.text:7C92E43F                 nop</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>.text:7C92E43F _KiUserApcDispatcher@20</pre></td></tr></table></figure><p>这里需要对着堆栈图进行分析了。</p>\n<p><img data-src=\"image006.png\" alt=\"\" /></p>\n<p>当用户在 3 环调用 QueueUserAPC 函数来插入 APC 时，不需要提供  <code>NormalRoutine</code>  ，这个参数是在 QueueUserAPC 内部指定的：  <code>BaseDispatchAPC</code></p>\n<p><code>BaseDispatchAPC</code>  的源码如下，主要调用了 APC 函数。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>VOID</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">BaseDispatchAPC</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    LPVOID lpApcArgument1<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    LPVOID lpApcArgument2<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    LPVOID lpApcArgument3</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    PAPCFUNC pfnAPC<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    ULONG_PTR dwData<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    PACTIVATION_CONTEXT ActivationContext<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    NTSTATUS Status<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    RTL_CALLER_ALLOCATED_ACTIVATION_CONTEXT_STACK_FRAME ActivationFrame <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>ActivationFrame<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> RTL_CALLER_ALLOCATED_ACTIVATION_CONTEXT_STACK_FRAME_FORMAT_WHISTLER <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    pfnAPC <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PAPCFUNC<span class=\"token punctuation\">)</span> lpApcArgument1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    dwData <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>ULONG_PTR<span class=\"token punctuation\">)</span> lpApcArgument2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    ActivationContext <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PACTIVATION_CONTEXT<span class=\"token punctuation\">)</span> lpApcArgument3<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ActivationContext <span class=\"token operator\">==</span> INVALID_ACTIVATION_CONTEXT<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>pfnAPC<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>dwData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token function\">RtlActivateActivationContextUnsafeFast</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>ActivationFrame<span class=\"token punctuation\">,</span> ActivationContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        __try <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>pfnAPC<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>dwData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> __finally <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token function\">RtlDeactivateActivationContextUnsafeFast</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>ActivationFrame<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token function\">RtlReleaseActivationContext</span><span class=\"token punctuation\">(</span>ActivationContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>三环的  <code>APC</code>  执行完毕后就回来 执行 ntdll 中的  <code>ZwContinue</code>  了。</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>.text:7C92D040 ; __stdcall ZwContinue(x, x)</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>.text:7C92D040                 public _ZwContinue@8</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>.text:7C92D040 _ZwContinue@8   proc near               ; CODE XREF: KiUserApcDispatcher(x,x,x,x,x)+A↓p</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>.text:7C92D040                                         ; KiUserExceptionDispatcher(x,x)+17↓p ...</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>.text:7C92D040                 mov     eax, 20h ; &#39; &#39;  ; NtContinue</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>.text:7C92D045                 mov     edx, 7FFE0300h</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>.text:7C92D04A                 call    dword ptr [edx]</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>.text:7C92D04C                 retn    8</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>.text:7C92D04C _ZwContinue@8   endp</pre></td></tr></table></figure><p>通过快速调用进 0 环后调用了内核函数  <code>NtContinue</code> 。</p>\n<p><code>NtContinue</code>  又调用了  <code>KiContinue</code>  函数。</p>\n<p><code>ZwContinue</code>  函数的意义：</p>\n<ol>\n<li>\n<p>返回内核，如果还有用户 APC，重复上面的执行过程。</p>\n</li>\n<li>\n<p>如果没有需要执行的用户 APC，会将 CONTEXT 赋值给 Trap_Frame 结构体。就像从来没有修改过一样。ZwContinue 后面的代码不会执行，线程从哪里进 0 环仍然会从哪里回去。</p>\n</li>\n</ol>\n<h1 id=\"reference\"><a class=\"anchor\" href=\"#reference\">#</a> Reference</h1>\n<p>滴水课件</p>\n",
            "tags": []
        },
        {
            "id": "https://or0kit.github.io/Bin/Core/WindowsXp/Apc/APC%E6%9C%BA%E5%88%B6-03APC%E7%9A%84%E6%8C%82%E5%85%A5%E8%BF%87%E7%A8%8B/",
            "url": "https://or0kit.github.io/Bin/Core/WindowsXp/Apc/APC%E6%9C%BA%E5%88%B6-03APC%E7%9A%84%E6%8C%82%E5%85%A5%E8%BF%87%E7%A8%8B/",
            "title": "APC机制-03APC的挂入过程",
            "date_published": "2022-02-25T11:23:40.000Z",
            "content_html": "<h1 id=\"楔子\"><a class=\"anchor\" href=\"#楔子\">#</a> 楔子</h1>\n<p>无论是正常状态还是挂靠状态，都有两个 APC 队列，一个内核队列，一个用户队列。</p>\n<p>每当要挂入一个 APC 函数时，不管是内核 APC 还是用户 APC，内核都要准备一个  <code>KAPC</code>  的数据结构，并且将这个  <code>KAPC</code>  结构挂到相应的 APC 队列中。</p>\n<h1 id=\"kapc-结构\"><a class=\"anchor\" href=\"#kapc-结构\">#</a> KAPC 结构</h1>\n<pre><code>kd&gt; dt _KAPC\nnt!_KAPC\n   +0x000 Type\t\t        //类型  APC类型为0x12\n   +0x002 Size\t\t        //本结构体的大小  0x30\n   +0x004 Spare0    \t    //未使用                             \n   +0x008 Thread \t\t    //目标线程                                  \n   +0x00c ApcListEntry\t    //APC队列挂的位置\n   +0x014 KernelRoutine\t    //指向一个函数(释放APC)\n   +0x018 RundownRoutine    //略 \n   +0x01c NormalRoutine\t    //用户APC总入口  或者 真正的内核apc函数\n   +0x020 NormalContext\t    //内核APC：NULL  用户APC：真正的APC函数\n   +0x024 SystemArgument1   //APC函数的参数\t\n   +0x028 SystemArgument2   //APC函数的参数\n   +0x02c ApcStateIndex\t    //挂哪个队列，有四个值：0 1 2 3\n   +0x02d ApcMode\t        //内核APC 用户APC\n   +0x02e Inserted\t        //表示本apc是否已挂入队列 挂入前：0  挂入后  1\n</code></pre>\n<h1 id=\"apcstateindex\"><a class=\"anchor\" href=\"#apcstateindex\">#</a> ApcStateIndex</h1>\n<p>与 KTHREAD (+0x165) 的属性同名，但含义不一样：</p>\n<p>ApcStateIndex 有四个值：<br />\n0 原始环境 1 挂靠环境 2 当前环境 3 插入 APC 时的当前环境</p>\n<p>正常情况下：<br />\nApcStatePointer [0]  指向 ApcState<br />\nApcStatePointer [1]  指向 SavedApcState<br />\n 挂靠情况下：<br />\nApcStatePointer [0]  指向 SavedApcState<br />\nApcStatePointer [1]  指向 ApcState</p>\n<p>2 初始化的时候，当前线程的 ApcState，不管挂靠还是没挂靠，我只选当前的 APC 状态。 判断是否为  <code>2</code>  的状态可以在  <code>KeInitializeApc</code>  中观察到。</p>\n<p>3 插入的时候，当前线程的 ApcState，如果在初始化的时候还没有挂靠，在准备插入的时候线程挂靠了，如果值为 3 就会使 KAPC 中的 ApcStateIndex 与 KTHREAD 中的 ApcStateIndex 一样。 判断是否为 <code>3</code>  的状态可以在  <code>KiInsertQueueApc</code>  中观察到。</p>\n<h1 id=\"alertable属性说明是否运行被apc吵醒\"><a class=\"anchor\" href=\"#alertable属性说明是否运行被apc吵醒\">#</a> Alertable 属性说明 (是否运行被 APC 吵醒)</h1>\n<p>结合  <code>KiInsertQueueApc</code>  函数</p>\n<pre><code>kd&gt; dt _KTHREAD\nntdll!_KTHREAD\n   ...\n   +0x164 Alertable        : UChar\n   ...\n\nDWORD SleepEx(\n  DWORD dwMilliseconds, // time-out interval\n  BOOL bAlertable        \t// early completion option\n);\nDWORD WaitForSingleObjectEx(\n  HANDLE hHandle,        \t// handle to object\n  DWORD dwMilliseconds, // time-out interval\n  BOOL bAlertable        \t// alertable option\n);\n</code></pre>\n<p>总结:</p>\n<p>1、 <code>Alertable=0</code>  当前插入的 APC 函数未必有机会执行： <code>UserApcPending = 0</code></p>\n<p>2、 <code>Alertable=1  UserApcPending = 1</code>  将目标线程唤醒 (从等待链表中摘出来，并挂到调度链表)</p>\n<h1 id=\"挂入流程\"><a class=\"anchor\" href=\"#挂入流程\">#</a> 挂入流程</h1>\n<p>从 R3 到 R0 的调用流程</p>\n<p>用户层调用：QueueUserAPC (kernel32.dll) -&gt; NtQueueApcThread (ntkrnlpa.exe)  -&gt;  内核层调用 KeInitializeApc (分配空间 初始化 KAPC 结构体) -&gt; KeInsertQueueApc -&gt; KiInsertQueueApc (将 KAPC 插入指定 APC 队列)</p>\n<h2 id=\"各层函数分析\"><a class=\"anchor\" href=\"#各层函数分析\">#</a> 各层函数分析</h2>\n<p>分析一下各层的函数的都做了什么事情。</p>\n<h3 id=\"queueuserapckernel32dll\"><a class=\"anchor\" href=\"#queueuserapckernel32dll\">#</a> QueueUserAPC(kernel32.dll)</h3>\n<p>首先了解一下这个函数</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>WINBASEAPI</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>DWORD</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>WINAPI</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">QueueUserAPC</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    PAPCFUNC pfnAPC<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    HANDLE hThread<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    ULONG_PTR dwData</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">/*++</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>Routine Description:</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    这个函数用于将用户模式的 APC 队列到指定的线程。当指定的线程执行 alertable 等待时，APC 将被触发。</pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>Arguments:</pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    pfnAPC - 提供 APC 例程的地址，以便在 APC 触发时执行。</pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    hHandle - 为线程对象提供一个句柄。调用者必须具有对该线程的线程设置上下文访问权限。</pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    dwData - 提供一个 DWORD 传递给 APC</pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>Return Value:</pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    TRUE - The operations was successful</pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    FALSE - The operation failed. GetLastError () is not defined.</pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>--*/</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    NTSTATUS Status<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    PVOID Argument1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PVOID<span class=\"token punctuation\">)</span> pfnAPC<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    PVOID Argument2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PVOID<span class=\"token punctuation\">)</span> dwData<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    PVOID Argument3 <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    ACTIVATION_CONTEXT_BASIC_INFORMATION acbi <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    Status <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token function\">RtlQueryInformationActivationContext</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            RTL_QUERY_INFORMATION_ACTIVATION_CONTEXT_FLAG_USE_ACTIVE_ACTIVATION_CONTEXT<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            ActivationContextBasicInformation<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            <span class=\"token operator\">&amp;</span>acbi<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>acbi<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">NT_SUCCESS</span><span class=\"token punctuation\">(</span>Status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SXS: %s failing because RtlQueryInformationActivationContext() returned status %08lx\\n\"</span><span class=\"token punctuation\">,</span> __FUNCTION__<span class=\"token punctuation\">,</span> Status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token keyword\">return</span> FALSE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    Argument3 <span class=\"token operator\">=</span> acbi<span class=\"token punctuation\">.</span>ActivationContext<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>acbi<span class=\"token punctuation\">.</span>Flags <span class=\"token operator\">&amp;</span> ACTIVATION_CONTEXT_FLAG_NO_INHERIT<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token comment\">// We're not supposed to propogate the activation context; set it to a value to indicate such.</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        Argument3 <span class=\"token operator\">=</span> INVALID_ACTIVATION_CONTEXT<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    Status <span class=\"token operator\">=</span> <span class=\"token function\">NtQueueApcThread</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>                hThread<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>                <span class=\"token operator\">&amp;</span>BaseDispatchAPC<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>                Argument1<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>                Argument2<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>                Argument3</pre></td></tr><tr><td data-num=\"64\"></td><td><pre>                <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span><span class=\"token function\">NT_SUCCESS</span><span class=\"token punctuation\">(</span>Status<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>其中的  <code>RtlQueryInformationActivationContext</code>  函数也不知道有什么用，暂时不管，我们先分析主线，此函数又调用了  <code>NtQueueApcThread</code>  了</p>\n<h3 id=\"ntqueueapcthreadntkrnlpaexe\"><a class=\"anchor\" href=\"#ntqueueapcthreadntkrnlpaexe\">#</a> NtQueueApcThread(ntkrnlpa.exe)</h3>\n<p>在 Ntdll 中也有一个同名的函数，会通过快速调用，调用 ntkrnlpa 中的这个函数。这里就直接介绍这个函数了。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>NTSYSAPI</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>NTSTATUS</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>NTAPI</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">NtQueueApcThread</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    IN HANDLE ThreadHandle<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    IN PPS_APC_ROUTINE ApcRoutine<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    IN PVOID ApcArgument1<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    IN PVOID ApcArgument2<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    IN PVOID ApcArgument3</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">/*++</pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>Routine Description:</pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    This function is used to queue a user-mode APC to the specified thread. The APC</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    will fire when the specified thread does an alertable wait</pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>Arguments:</pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    ThreadHandle - Supplies a handle to a thread object.  The caller</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        must have THREAD_SET_CONTEXT access to the thread.</pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    ApcRoutine - Supplies the address of the APC routine to execute when the</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        APC fires.</pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    ApcArgument1 - Supplies the first PVOID passed to the APC</pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    ApcArgument2 - Supplies the second PVOID passed to the APC</pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    ApcArgument3 - Supplies the third PVOID passed to the APC</pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>Return Value:</pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    Returns an NT Status code indicating success or failure of the API</pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>--*/</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    PETHREAD Thread<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    NTSTATUS st<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    KPROCESSOR_MODE Mode<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    PKAPC Apc<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token function\">PAGED_CODE</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    Mode <span class=\"token operator\">=</span> <span class=\"token function\">KeGetPreviousMode</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    st <span class=\"token operator\">=</span> <span class=\"token function\">ObReferenceObjectByHandle</span> <span class=\"token punctuation\">(</span>ThreadHandle<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>                                    THREAD_SET_CONTEXT<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                                    PsThreadType<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>                                    Mode<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                                    <span class=\"token operator\">&amp;</span>Thread<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                                    <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">NT_SUCCESS</span> <span class=\"token punctuation\">(</span>st<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        st <span class=\"token operator\">=</span> STATUS_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">IS_SYSTEM_THREAD</span> <span class=\"token punctuation\">(</span>Thread<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>            st <span class=\"token operator\">=</span> STATUS_INVALID_HANDLE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>            Apc <span class=\"token operator\">=</span> <span class=\"token function\">ExAllocatePoolWithQuotaTag</span> <span class=\"token punctuation\">(</span>NonPagedPool <span class=\"token operator\">|</span> POOL_QUOTA_FAIL_INSTEAD_OF_RAISE<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>                                              <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>Apc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>                                              <span class=\"token string\">'pasP'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Apc <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>                st <span class=\"token operator\">=</span> STATUS_NO_MEMORY<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>                <span class=\"token function\">KeInitializeApc</span> <span class=\"token punctuation\">(</span>Apc<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>                                 <span class=\"token operator\">&amp;</span>Thread<span class=\"token operator\">-></span>Tcb<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>                                 OriginalApcEnvironment<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>                                 PspQueueApcSpecialApc<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>                                 <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>                                 <span class=\"token punctuation\">(</span>PKNORMAL_ROUTINE<span class=\"token punctuation\">)</span>ApcRoutine<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>                                 UserMode<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>                                 ApcArgument1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">KeInsertQueueApc</span> <span class=\"token punctuation\">(</span>Apc<span class=\"token punctuation\">,</span> ApcArgument2<span class=\"token punctuation\">,</span> ApcArgument3<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>                    <span class=\"token function\">ExFreePool</span> <span class=\"token punctuation\">(</span>Apc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>                    st <span class=\"token operator\">=</span> STATUS_UNSUCCESSFUL<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>        <span class=\"token function\">ObDereferenceObject</span> <span class=\"token punctuation\">(</span>Thread<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>    <span class=\"token keyword\">return</span> st<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>可以观察到，先申请了一块  <code>KAPC</code>  大小的内存，然后调用  <code>KeInitializeApc</code>  给 KAPC 初始化 ，初始化完成后，调用了  <code>KeInsertQueueApc</code>  插入了。</p>\n<p>注意这里有个细节：</p>\n<p><strong>验证了是否是系统进程，这是一个宏定义：  <code>#define IS_SYSTEM_THREAD(Thread)  (((Thread)-&gt;CrossThreadFlags&amp;PS_CROSS_THREAD_FLAGS_SYSTEM) != 0)</code>   利用这个特点，如果想要防止用户 APC 注入，可以更改线程标志。</strong></p>\n<h3 id=\"keinitializeapc初始化kapc结构体\"><a class=\"anchor\" href=\"#keinitializeapc初始化kapc结构体\">#</a> KeInitializeApc (初始化 KAPC 结构体)</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>VOID <span class=\"token function\">KeInitializeApc</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  IN PKAPC Apc<span class=\"token punctuation\">,</span><span class=\"token comment\">//KAPC 指针</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  IN PKTHREAD Thread<span class=\"token punctuation\">,</span><span class=\"token comment\">// 目标线程</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  IN KAPC_ENVIRONMENT TargetEnvironment<span class=\"token punctuation\">,</span><span class=\"token comment\">//0 1 2 3 四种状态</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  IN PKKERNEL_ROUTINE KernelRoutine<span class=\"token punctuation\">,</span><span class=\"token comment\">// 销毁 KAPC 的函数地址</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  IN PKRUNDOWN_ROUTINE RundownRoutine OPTIONAL<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  IN PKNORMAL_ROUTINE NormalRoutine<span class=\"token punctuation\">,</span><span class=\"token comment\">// 用户 APC 总入口或者内核 apc 函数</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  IN KPROCESSOR_MODE Mode<span class=\"token punctuation\">,</span><span class=\"token comment\">// 要插入用户 apc 队列还是内核 apc 队列</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  IN PVOID NormalContext<span class=\"token comment\">// 内核 APC：NULL  用户 APC：真正的 APC 函数</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">/*++</pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>Routine Description:</pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>这个函数初始化一个内核 APC 对象。 线程、内核例程和可选的常规例程、处理器模式和常规上下文参数都存储在 APC 对象中。 </pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>Arguments:</pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    Apc - 提供一个指向 APC 类型控制对象的指针。</pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    Thread - 提供一个指向线程类型的调度程序对象的指针。</pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    Environment - 有效值为：OriginalApcEnvironment、attacheapcenvironment、CurrentApcEnvironment 或 InsertApcEnvironment。枚举类型 0 1 2 3</pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    KernelRoutine - 提供一个指向在内核模式下 IRQL APC_LEVEL 执行的函数的指针。 </pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    RundownRoutine - 提供一个可选的函数指针，当线程终止时，如果 APC 在线程的 APC 队列中，这个函数将被调用。</pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    NormalRoutine - 提供一个指向函数的可选指针，该函数将在 IRQL 0 中以指定的处理器模式执行。 如果没有指定这个参数，则忽略 ProcessorMode 和 NormalContext 参数。</pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    ApcMode - 提供处理器模式，在这种模式下，NormalRoutine 参数指定的函数将被执行。  </pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    NormalContext - 提供指向任意数据结构的指针，该数据结构将被传递给 NormalRoutine 参数指定的函数。</pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>Return Value:</pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    None.</pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>--*/</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token function\">ASSERT</span><span class=\"token punctuation\">(</span>Environment <span class=\"token operator\">&lt;=</span> InsertApcEnvironment<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token comment\">// Initialize standard control object header.</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    Apc<span class=\"token operator\">-></span>Type <span class=\"token operator\">=</span> ApcObject<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    Apc<span class=\"token operator\">-></span>Size <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>KAPC<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token comment\">/* </pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    初始化 APC 环境、线程地址、内核例程地址、运行例程地址、普通例程地址、处理器模式和正常上下文参数。</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    如果正常的例程地址为 NULL，则处理器模式默认为 KernelMode，而 APC 是一个特殊的 APC。</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    否则，将从参数列表中提取处理器模式。</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    */</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Environment <span class=\"token operator\">==</span> CurrentApcEnvironment<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        Apc<span class=\"token operator\">-></span>ApcStateIndex <span class=\"token operator\">=</span> Thread<span class=\"token operator\">-></span>ApcStateIndex<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        <span class=\"token function\">ASSERT</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>Environment <span class=\"token operator\">&lt;=</span> Thread<span class=\"token operator\">-></span>ApcStateIndex<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>Environment <span class=\"token operator\">==</span> InsertApcEnvironment<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        Apc<span class=\"token operator\">-></span>ApcStateIndex <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>CCHAR<span class=\"token punctuation\">)</span>Environment<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    Apc<span class=\"token operator\">-></span>Thread <span class=\"token operator\">=</span> Thread<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    Apc<span class=\"token operator\">-></span>KernelRoutine <span class=\"token operator\">=</span> KernelRoutine<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>    Apc<span class=\"token operator\">-></span>RundownRoutine <span class=\"token operator\">=</span> RundownRoutine<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    Apc<span class=\"token operator\">-></span>NormalRoutine <span class=\"token operator\">=</span> NormalRoutine<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">ARGUMENT_PRESENT</span><span class=\"token punctuation\">(</span>NormalRoutine<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>        Apc<span class=\"token operator\">-></span>ApcMode <span class=\"token operator\">=</span> ApcMode<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>        Apc<span class=\"token operator\">-></span>NormalContext <span class=\"token operator\">=</span> NormalContext<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>        Apc<span class=\"token operator\">-></span>ApcMode <span class=\"token operator\">=</span> KernelMode<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>        Apc<span class=\"token operator\">-></span>NormalContext <span class=\"token operator\">=</span> NIL<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>    Apc<span class=\"token operator\">-></span>Inserted <span class=\"token operator\">=</span> FALSE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"keinsertqueueapc\"><a class=\"anchor\" href=\"#keinsertqueueapc\">#</a> KeInsertQueueApc</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>BOOLEAN</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">KeInsertQueueApc</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    IN PRKAPC Apc<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    IN PVOID SystemArgument1<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    IN PVOID SystemArgument2<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    IN KPRIORITY Increment</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">/*++</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>Routine Description:</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  这个函数将一个 APC 对象插入到 APC 队列中，该队列由 APC 对象的线程和处理器模式字段指定。</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  如果 APC 对象已经在 APC 队列中或 APC 队列被禁用，则不执行任何操作。 </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  否则，APC 对象被插入到指定的队列中，并做出适当的调度决策。  </pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>Arguments:</pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    Apc - 提供一个指向 APC 类型控制对象的指针。  </pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    SystemArgument1, SystemArgument2 - 提供一组包含执行程序提供的非类型化数据的两个参数。  </pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    Increment - 提供优先级增量，如果排队的 APC 导致一个线程等待满足。  </pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>Return Value:</pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    如果 APC 对象已经在 APC 队列中，或者禁用 APC 队列，则返回 false 值。否则，将返回一个 TRUE 的值。</pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>--*/</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    BOOLEAN Inserted<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    KLOCK_QUEUE_HANDLE LockHandle<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    KIRQL OldIrql<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    PRKTHREAD Thread<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token function\">ASSERT_APC</span><span class=\"token punctuation\">(</span>Apc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token function\">ASSERT</span><span class=\"token punctuation\">(</span><span class=\"token function\">KeGetCurrentIrql</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> DISPATCH_LEVEL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token comment\">// 将 IROL 提升到 SYNCH_LEVEL _ level，获取线程 APC 队列锁，并锁定调度程序数据库。</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    Thread <span class=\"token operator\">=</span> Apc<span class=\"token operator\">-></span>Thread<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token function\">KeAcquireInStackQueuedSpinLockRaiseToSynch</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>Thread<span class=\"token operator\">-></span>ApcQueueLock<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>LockHandle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token function\">KiLockDispatcherDatabaseAtSynchLevel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token comment\">// 如果 Apc 队列被禁用，则将 inserted 设置为 FALSE。否则，将系统参数值保存在 APC 对象中，并尝试对 APC 进行排队。</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Thread<span class=\"token operator\">-></span>ApcQueueable <span class=\"token operator\">==</span> FALSE<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        Inserted <span class=\"token operator\">=</span> FALSE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        Apc<span class=\"token operator\">-></span>SystemArgument1 <span class=\"token operator\">=</span> SystemArgument1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        Apc<span class=\"token operator\">-></span>SystemArgument2 <span class=\"token operator\">=</span> SystemArgument2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        Inserted <span class=\"token operator\">=</span> <span class=\"token function\">KiInsertQueueApc</span><span class=\"token punctuation\">(</span>Apc<span class=\"token punctuation\">,</span> Increment<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token comment\">// 从同步级别解锁调度程序数据库，将线程 APC 队列锁和较低的 IRQL 解锁到其先前的值，并返回是否插入了 APC。</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token function\">KiUnlockDispatcherDatabaseFromSynchLevel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token function\">KeReleaseInStackQueuedSpinLock</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>LockHandle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token keyword\">return</span> Inserted<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>此函数又调用  <code>KiInsertQueueApc</code>  函数</p>\n<h3 id=\"kiinsertqueueapc\"><a class=\"anchor\" href=\"#kiinsertqueueapc\">#</a> KiInsertQueueApc</h3>\n<p>KiInsertQueueApc 说明：</p>\n<ol>\n<li>\n<p>根据 KAPC 结构中的 ApcStateIndex 找到对应的 APC 队列</p>\n</li>\n<li>\n<p>再根据 KAPC 结构中的 ApcMode 确定是用户队列还是内核队列</p>\n</li>\n<li>\n<p>将 KAPC 挂到对应的队列中 (挂到 KAPC 的 ApcListEntry 处)</p>\n</li>\n<li>\n<p>再根据 KAPC 结构中的 Inserted 置 1，标识当前的 KAPC 为已插入状态</p>\n</li>\n<li>\n<p>修改 KAPC_STATE 结构中的 KernelApcPending/UserApcPending</p>\n</li>\n</ol>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>BOOLEAN</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>FASTCALL</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">KiInsertQueueApc</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    IN PKAPC Apc<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    IN KPRIORITY Increment</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">/*++</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>Routine Description:</pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    此函数将 APC 对象插入到线程的 APC 队列中。</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    线程对象的地址、APC 队列和 APC 的类型都是从 APC 对象派生出来的。</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    如果 APC 对象已经在 APC 队列中，则不执行操作并返回函数值 False。</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    如果将 APC 插入到指定的 APC 队列中，则将其插入状态设置为 true，并返回函数值 true。</pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    N.B. 在调用此例程时，必须保持线程 APC 队列锁和调度程序数据库锁定。</pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>Arguments:</pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    Apc - Supplies a pointer to a control object of type APC.</pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    Increment - Supplies the priority increment that is to be applied if</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        queuing the APC causes a thread wait to be satisfied.</pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>Return Value:</pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    If the APC object is already in an APC queue, then a value of FALSE is</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    returned. Else a value of TRUE is returned.</pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>--*/</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    KPROCESSOR_MODE ApcMode<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    PKAPC ApcEntry<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    PKAPC_STATE ApcState<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    BOOLEAN Inserted<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    PLIST_ENTRY ListEntry<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    PKTHREAD Thread<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token comment\">// 如果 APC 对象已经在 APC 队列中，则将插入设置为 FALSE。</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token comment\">// 否则将 APC 对象插入到适当的队列中，将 APC 插入状态设置为 TRUE，检查 APC 是否应该立即交付，并将插入状态设置为 TRUE。 </span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token comment\">// For multiprocessor performance, the following code utilizes the fact</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token comment\">// that kernel APC disable count is incremented before checking whether</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token comment\">// the kernel APC queue is nonempty.</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token comment\">// See KeLeaveCriticalRegion().</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    Thread <span class=\"token operator\">=</span> Apc<span class=\"token operator\">-></span>Thread<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Apc<span class=\"token operator\">-></span>Inserted<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        Inserted <span class=\"token operator\">=</span> FALSE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Apc<span class=\"token operator\">-></span>ApcStateIndex <span class=\"token operator\">==</span> InsertApcEnvironment<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>            Apc<span class=\"token operator\">-></span>ApcStateIndex <span class=\"token operator\">=</span> Thread<span class=\"token operator\">-></span>ApcStateIndex<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        ApcState <span class=\"token operator\">=</span> Thread<span class=\"token operator\">-></span>ApcStatePointer<span class=\"token punctuation\">[</span>Apc<span class=\"token operator\">-></span>ApcStateIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token comment\">// 如果 NormalRoutine 值为 NULL，【则在处理器模式选择的所有其他特殊 APC 项之后插入 APC】。  </span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        <span class=\"token comment\">// 否则，将 APC 对象插入处理器模式选择的 APC 队列的尾部，除非 APC 模式是用户模式，</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token comment\">// 特殊的 APC 例程的地址是退出线程，在这种情况下，将 APC 插入到列表的前面，并设置用户 APC 挂起。  </span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre></pre></td></tr><tr><td data-num=\"67\"></td><td><pre></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        ApcMode <span class=\"token operator\">=</span> Apc<span class=\"token operator\">-></span>ApcMode<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Apc<span class=\"token operator\">-></span>NormalRoutine <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ApcMode <span class=\"token operator\">!=</span> KernelMode<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>Apc<span class=\"token operator\">-></span>KernelRoutine <span class=\"token operator\">==</span> PsExitSpecialApc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>                Thread<span class=\"token operator\">-></span>ApcState<span class=\"token punctuation\">.</span>UserApcPending <span class=\"token operator\">=</span> TRUE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>                <span class=\"token function\">InsertHeadList</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>ApcState<span class=\"token operator\">-></span>ApcListHead<span class=\"token punctuation\">[</span>ApcMode<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>                               <span class=\"token operator\">&amp;</span>Apc<span class=\"token operator\">-></span>ApcListEntry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>                <span class=\"token comment\">// 内核模式</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>                <span class=\"token function\">InsertTailList</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>ApcState<span class=\"token operator\">-></span>ApcListHead<span class=\"token punctuation\">[</span>ApcMode<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>                               <span class=\"token operator\">&amp;</span>Apc<span class=\"token operator\">-></span>ApcListEntry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>            ListEntry <span class=\"token operator\">=</span> ApcState<span class=\"token operator\">-></span>ApcListHead<span class=\"token punctuation\">[</span>ApcMode<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>Blink<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>ListEntry <span class=\"token operator\">!=</span> <span class=\"token operator\">&amp;</span>ApcState<span class=\"token operator\">-></span>ApcListHead<span class=\"token punctuation\">[</span>ApcMode<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>                ApcEntry <span class=\"token operator\">=</span> <span class=\"token function\">CONTAINING_RECORD</span><span class=\"token punctuation\">(</span>ListEntry<span class=\"token punctuation\">,</span> KAPC<span class=\"token punctuation\">,</span> ApcListEntry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ApcEntry<span class=\"token operator\">-></span>NormalRoutine <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>                ListEntry <span class=\"token operator\">=</span> ListEntry<span class=\"token operator\">-></span>Blink<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>            <span class=\"token function\">InsertHeadList</span><span class=\"token punctuation\">(</span>ListEntry<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>Apc<span class=\"token operator\">-></span>ApcListEntry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>        Apc<span class=\"token operator\">-></span>Inserted <span class=\"token operator\">=</span> TRUE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>        <span class=\"token comment\">// 如果 APC 对象的 APC 索引与线程的 APC 索引相匹配，那么检查 APC 是否应该中断线程执行，或者让线程进入等待状态。</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Apc<span class=\"token operator\">-></span>ApcStateIndex <span class=\"token operator\">==</span> Thread<span class=\"token operator\">-></span>ApcStateIndex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>            <span class=\"token comment\">// 如果 APC 的处理器模式是内核模式，那么检查 APC 是否应该中断线程或使线程脱离等待状态。 </span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>            <span class=\"token comment\">// 否则检查 APC 是否应该对线程进行排序，使其脱离可提醒的等待状态。  </span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ApcMode <span class=\"token operator\">==</span> KernelMode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>                Thread<span class=\"token operator\">-></span>ApcState<span class=\"token punctuation\">.</span>KernelApcPending <span class=\"token operator\">=</span> TRUE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Thread<span class=\"token operator\">-></span>State <span class=\"token operator\">==</span> Running<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>                    <span class=\"token comment\">// 这个函数会获取  APC_LEVEL 等级的 IRQL</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>                    <span class=\"token function\">KiRequestApcInterrupt</span><span class=\"token punctuation\">(</span>Thread<span class=\"token operator\">-></span>NextProcessor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>Thread<span class=\"token operator\">-></span>State <span class=\"token operator\">==</span> Waiting<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>                          <span class=\"token punctuation\">(</span>Thread<span class=\"token operator\">-></span>WaitIrql <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>                          <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>Apc<span class=\"token operator\">-></span>NormalRoutine <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>                          <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>Thread<span class=\"token operator\">-></span>KernelApcDisable <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>                          <span class=\"token punctuation\">(</span>Thread<span class=\"token operator\">-></span>ApcState<span class=\"token punctuation\">.</span>KernelApcInProgress <span class=\"token operator\">==</span> FALSE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>                    <span class=\"token comment\">// 唤醒线程 使其从等待队列中移除</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>                    <span class=\"token function\">KiUnwaitThread</span><span class=\"token punctuation\">(</span>Thread<span class=\"token punctuation\">,</span> STATUS_KERNEL_APC<span class=\"token punctuation\">,</span> Increment<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>            <span class=\"token comment\">// 如果不是内核模式那么</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>Thread<span class=\"token operator\">-></span>State <span class=\"token operator\">==</span> Waiting<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>                      <span class=\"token punctuation\">(</span>Thread<span class=\"token operator\">-></span>WaitMode <span class=\"token operator\">==</span> UserMode<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>                      <span class=\"token punctuation\">(</span>Thread<span class=\"token operator\">-></span>Alertable <span class=\"token operator\">||</span> Thread<span class=\"token operator\">-></span>ApcState<span class=\"token punctuation\">.</span>UserApcPending<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>                Thread<span class=\"token operator\">-></span>ApcState<span class=\"token punctuation\">.</span>UserApcPending <span class=\"token operator\">=</span> TRUE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>                <span class=\"token function\">KiUnwaitThread</span><span class=\"token punctuation\">(</span>Thread<span class=\"token punctuation\">,</span> STATUS_USER_APC<span class=\"token punctuation\">,</span> Increment<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>        Inserted <span class=\"token operator\">=</span> TRUE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>    <span class=\"token comment\">// 返回 APC 对象是否插入到 APC 队列中。</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>    <span class=\"token keyword\">return</span> Inserted<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"作业\"><a class=\"anchor\" href=\"#作业\">#</a> 作业</h1>\n<ol>\n<li>\n<p>创建一个进程，使用 Sleep () 函数让其处于等待状态，然后向其 APC 队列插入 APC, 观蔡是否执行。</p>\n</li>\n<li>\n<p>如何让上题中的 APC 函数执行？</p>\n</li>\n</ol>\n<p>代码：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">_WIN32_WINNT</span> <span class=\"token expression\"><span class=\"token number\">0x0400</span></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;windows.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>DWORD WINAPI <span class=\"token function\">ThreadProc</span><span class=\"token punctuation\">(</span>LPVOID pM<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token comment\">//SleepEx(3000,TRUE);</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">10000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ThreadProc执行了 %d\\n\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token function\">SleepEx</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">,</span> TRUE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> k <span class=\"token operator\">&lt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> k<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ThreadProc执行了-%d\\n\"</span><span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">void</span> WINAPI <span class=\"token function\">ApcProc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> para<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ApcProc执行了-------!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">void</span> WINAPI <span class=\"token function\">ApcProc2</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> para<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ApcProc2执行了-------!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\tDWORD dwRet<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\tHANDLE handle <span class=\"token operator\">=</span> <span class=\"token function\">CreateThread</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> ThreadProc<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token comment\">// 注入 APC </span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\tdwRet <span class=\"token operator\">=</span> <span class=\"token function\">QueueUserAPC</span><span class=\"token punctuation\">(</span>ApcProc<span class=\"token punctuation\">,</span> handle<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dwRet<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Apc1插入成功！\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\tdwRet <span class=\"token operator\">=</span> <span class=\"token function\">QueueUserAPC</span><span class=\"token punctuation\">(</span>ApcProc2<span class=\"token punctuation\">,</span> handle<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dwRet<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Apc2插入成功！\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t<span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>当 APC 被唤醒的时候两个 APC 一起执行了。</p>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<p>设置为可被唤醒状态时</p>\n<p><img data-src=\"image002.png\" alt=\"\" /></p>\n",
            "tags": [
                "KAPC",
                "QueueUserAPC",
                "NtQueueApcThread",
                "KeInitializeApc",
                "KeInsertQueueApc",
                "KiInsertQueueApc"
            ]
        },
        {
            "id": "https://or0kit.github.io/Bin/Core/WindowsXp/Apc/APC%E6%9C%BA%E5%88%B6-02APC%E7%9A%84%E5%A4%87%E7%94%A8%E9%98%9F%E5%88%97/",
            "url": "https://or0kit.github.io/Bin/Core/WindowsXp/Apc/APC%E6%9C%BA%E5%88%B6-02APC%E7%9A%84%E5%A4%87%E7%94%A8%E9%98%9F%E5%88%97/",
            "title": "APC机制-02APC的备用队列",
            "date_published": "2022-02-25T11:22:59.000Z",
            "content_html": "<h1 id=\"楔子\"><a class=\"anchor\" href=\"#楔子\">#</a> 楔子</h1>\n<p>要点回顾：在上一节中我们讲过，如果想让线程做什么事情，就给它的 APC 队列里面挂一个 APC。</p>\n<p>发现在  <code>KTHREAD</code>  结构体中除了  <code>ApcState</code>  还有其他与 APC 相关的成员</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kd&gt; dt _KTHREAD</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>nt!_KTHREAD</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   ...</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   +0x034 ApcState         : _KAPC_STATE</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   ...</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   +0x138 ApcStatePointer  : [2] Ptr32 _KAPC_STATE</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  ...</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   +0x14c SavedApcState    : _KAPC_STATE</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  ...</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   +0x165 ApcStateIndex    : UChar</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   +0x166 ApcQueueable     : UChar</pre></td></tr></table></figure><p>以下内容就是为了弄清楚这些成员的作用。</p>\n<h2 id=\"savedapcstate的意义\"><a class=\"anchor\" href=\"#savedapcstate的意义\">#</a> SavedApcState 的意义</h2>\n<p>线程 APC 队列中的 APC 函数都是与进程相关联的，具体点说：A 进程的 T 线程中的所有 APC 函数，要访问的内存地址都是 A 进程的。</p>\n<p>但线程是可以挂靠到其他的进程：比如 A 进程的线程 T，通过修改 Cr3 (改为 B 进程的页目录基址)，就可以访问 B 进程地址空间，即所谓 “进程挂靠”。</p>\n<p>当 T 线程挂靠 B 进程后，APC 队列中存储的却仍然是原来的 APC！具体点说，比如某个 APC 函数要读取一个地址为 0x12345678 的数据，如果此时进行读取，读到的将是 B 进程的地址空间，这样逻辑就错误了！</p>\n<p>为了避免混乱，在 T 线程挂靠 B 进程时，会将 ApcState 中的值暂时存储到 SavedApcState 中，等回到原进程 A 时，再将 APC 队列恢复。</p>\n<p>所以，  <code>SavedApcState</code>  又称为备用 APC 队列。</p>\n<h2 id=\"挂靠环境下apcstate的意义\"><a class=\"anchor\" href=\"#挂靠环境下apcstate的意义\">#</a> 挂靠环境下 ApcState 的意义</h2>\n<p>在挂靠的环境下，也是可以向线程 APC 队列插入 APC 的，那这种情况下，使用的是哪个 APC 队列呢？</p>\n<p>当 A 进程的 T 线程挂靠 B 进程时，A 是 T 的所属进程，B 是 T 的挂靠进程。</p>\n<p><code>ApcState</code>     \tB 进程相关的 APC 函数</p>\n<p><code>SavedApcState</code> \tA 进程相关的 APC 函数</p>\n<p>在正常情况下，当前进程就是所属进程 A，如果是挂靠情况下，当前进程就是挂靠进程 B。</p>\n<p>当前进程与当前线程，有相关的 API 获取，查看这些函数，可以发现他们的本质都是取 fs:[0x124] 接着又取 0x44 。</p>\n<h2 id=\"apcstatepointer\"><a class=\"anchor\" href=\"#apcstatepointer\">#</a> ApcStatePointer</h2>\n<p>为了操作方便，_KTHREAD 结构体中定义了一个指针数组  <code>ApcStatePointer</code>  ，长度为 2。</p>\n<p>正常情况下</p>\n<div class=\"note primary no-icon\">\n<p>ApcStatePointer [0]  指向  <code>ApcState</code> <br />\nApcStatePointer [1]  指向  <code>SavedApcState</code></p>\n</div>\n<p>挂靠情况下：</p>\n<div class=\"note primary no-icon\">\n<p>ApcStatePointer [0]  指向  <code>SavedApcState</code> <br />\nApcStatePointer [1]  指向  <code>ApcState</code></p>\n</div>\n<h2 id=\"apcstateindex\"><a class=\"anchor\" href=\"#apcstateindex\">#</a> ApcStateIndex</h2>\n<p>ApcStateIndex 用来标识当前线程处于什么状态：</p>\n<p><code>0</code>  正常状态<br />\n <code>1</code>  挂靠状态</p>\n<h2 id=\"apcstatepointer-与-apcstateindex组合寻址\"><a class=\"anchor\" href=\"#apcstatepointer-与-apcstateindex组合寻址\">#</a> ApcStatePointer 与 ApcStateIndex 组合寻址</h2>\n<p>正常情况下，向 ApcState 队列中插入 APC 时：</p>\n<p>ApcStatePointer [0]  指向  <code>ApcState</code>  此时 ApcStateIndex 的值为 0<br />\nApcStatePointer [ApcStateIndex]  指向  <code>ApcState</code></p>\n<p>挂靠情况下，向 ApcState 队列中插入 APC 时：<br />\nApcStatePointer [1]  指向  <code>ApcState</code>  此时 ApcStateIndex 的值为 1<br />\nApcStatePointer [ApcStateIndex]  指向  <code>ApcState</code></p>\n<p>总结：<br />\n无论什么环境下，ApcStatePointer [ApcStateIndex] 指向的都是  <code>ApcState</code>  。<br />\n <code>ApcState</code>  则总是表示线程<strong>当前</strong>使用的 apc 状态。</p>\n<h2 id=\"apcqueueable\"><a class=\"anchor\" href=\"#apcqueueable\">#</a> ApcQueueable</h2>\n<p><strong>ApcQueueable 用于表示是否可以向线程的 APC 队列中插入 APC。</strong></p>\n<p>当线程正在执行退出的代码时，会将这个值设置为 0 ，如果此时执行插入 APC 的代码 (KeInsertQueueApc 后面会讲), 在插入函数中会判断这个值的状态，如果为 0，则插入失败。</p>\n<h2 id=\"作业\"><a class=\"anchor\" href=\"#作业\">#</a> 作业</h2>\n<p>分析 API  <code>NtReadVirtualMemory</code>  。<br />\n目的是了解挂靠到底做了什么、APC 是如何备份的、什么时候备份、什么时候还原的。</p>\n<p>回去写进程的挂靠和跨进程读写内存了。</p>\n<p><a href=\"https://or0kit.github.io/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B-%E8%BF%9B%E7%A8%8B%E6%8C%82%E9%9D%A0%E5%92%8C%E8%B7%A8%E8%BF%9B%E7%A8%8B%E8%AF%BB%E5%86%99%E5%86%85%E5%AD%98/\">https://or0kit.github.io/ 进程与线程 - 进程挂靠和跨进程读写内存 /</a></p>\n",
            "tags": [
                "APC的备用队列"
            ]
        },
        {
            "id": "https://or0kit.github.io/Bin/Core/WindowsXp/Apc/APC%E6%9C%BA%E5%88%B6-01%E5%88%9D%E8%AF%86APC/",
            "url": "https://or0kit.github.io/Bin/Core/WindowsXp/Apc/APC%E6%9C%BA%E5%88%B6-01%E5%88%9D%E8%AF%86APC/",
            "title": "APC机制-01初识APC",
            "date_published": "2022-02-24T06:35:12.000Z",
            "content_html": "<h1 id=\"楔子\"><a class=\"anchor\" href=\"#楔子\">#</a> 楔子</h1>\n<p>线程是不能被 “杀掉”、“挂起” 和 “恢复” 的，线程在执行的时候自己占据着 CPU，无论多核还是单核，线程都是自己做的这些事，那么其他线程如何控制它呢？如何改变一个线程的行为？可以给他提供一个函数，让它自己去调用，这个函数就是 APC (Asyncroneus Procedure Call)，即异步过程调用。</p>\n<p>首先有以下疑问：</p>\n<blockquote>\n<p>至于为什么会执行 APC，上述已说。<br />\n谁插入的 APC？<br />\n插入到哪里？<br />\n谁执行的 APC？<br />\n什么时候执行 APC？</p>\n</blockquote>\n<h2 id=\"apc-队列\"><a class=\"anchor\" href=\"#apc-队列\">#</a> APC 队列</h2>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kd&gt; dt _KTHREAD</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>nt!_KTHREAD</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t...</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t   +0x034 ApcState         : _KAPC_STATE</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t...</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>kd&gt; dt _KAPC_STATE</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>nt!_KAPC_STATE</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   +0x000 ApcListHead\t&#x2F;&#x2F;2 个 APC 队列 用户 APC 和内核 APC </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   +0x010 Process\t\t&#x2F;&#x2F; 线程所属或者所挂靠的进程</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   +0x014 KernelApcInProgress\t&#x2F;&#x2F; 内核 APC 是否正在执行</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   +0x015 KernelApcPending\t&#x2F;&#x2F; 是否有正在等待执行的内核 APC</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   +0x016 UserApcPending\t&#x2F;&#x2F; 是否有正在等待执行的用户 APC</pre></td></tr></table></figure><p>用户 APC：APC 函数地址位于用户空间，在用户空间执行.<br />\n 内核 APC：APC 函数地址位于内核空间，在内核空间执行.</p>\n<h2 id=\"apc-结构\"><a class=\"anchor\" href=\"#apc-结构\">#</a> APC 结构</h2>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kd&gt; dt _KAPC</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>nt!_KAPC</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   +0x000 Type</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   +0x002 Size</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   +0x004 Spare0                                 </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   +0x008 Thread                                 </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   +0x00c ApcListEntry</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   +0x014 KernelRoutine</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   +0x018 RundownRoutine</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   +0x01c NormalRoutine   &#x2F;&#x2F; 找到你提供的 APC 函数，并不完全等于 APC 函数的地址，后面会讲。</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   +0x020 NormalContext</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   +0x024 SystemArgument1</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   +0x028 SystemArgument2</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   +0x02c ApcStateIndex</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   +0x02d ApcMode</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   +0x02e Inserted</pre></td></tr></table></figure><h2 id=\"apc函数何时被执行\"><a class=\"anchor\" href=\"#apc函数何时被执行\">#</a> APC 函数何时被执行？</h2>\n<p><code>KiServiceExit</code>  函数：这个函数是系统调用、异常或中断返回用户空间的必经之路。</p>\n<p><code>KiDeliverApc</code>  函数：负责执行 APC 函数。</p>\n<h2 id=\"分析-terminatethread-和-suspendthread-函数\"><a class=\"anchor\" href=\"#分析-terminatethread-和-suspendthread-函数\">#</a> 分析 TerminateThread 和 SuspendThread 函数</h2>\n<p>分析  <code>TerminateThread</code>  /  <code>SuspendThread</code>  是如何实现的（从 3 环开始分析）以此证明控制别的线程就是通过 APC 实现的。</p>\n<p>分析流程为：</p>\n<ol>\n<li><code>TerminateThread -&gt; NtTerminateThread -&gt; PspTerminateThreadByPointer -&gt; KeInitializeApc、KeInsertQueueApc</code></li>\n<li><code>SuspendThread -&gt; NtSuspendThread -&gt; PsSuspendThread -&gt; KeSuspendThread -&gt; KiInsertQueueApc</code></li>\n</ol>\n<p>可以发现函数调用到最后都是通过 APC 控制的。</p>\n<h2 id=\"自己编写代码向某个线程插入一个用户apc\"><a class=\"anchor\" href=\"#自己编写代码向某个线程插入一个用户apc\">#</a> 自己编写代码向某个线程插入一个用户 APC</h2>\n<p>使用现成的 API 就可以，目的是体会什么是 APC。</p>\n<p>这里最简单的办法就是，自己给自己插入 APC，自己创建一个线程一直打印一句话，然后主线程给这个线程插入 APC，打印另一句话。</p>\n<p>代码如下：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>pass</pre></td></tr></table></figure>",
            "tags": [
                "APC的本质"
            ]
        },
        {
            "id": "https://or0kit.github.io/Bin/Core/WindowsXp/Process-Thread/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B-%E5%BB%B6%E8%BF%9F%E8%BF%87%E7%A8%8B%E8%B0%83%E7%94%A8-DPC/",
            "url": "https://or0kit.github.io/Bin/Core/WindowsXp/Process-Thread/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B-%E5%BB%B6%E8%BF%9F%E8%BF%87%E7%A8%8B%E8%B0%83%E7%94%A8-DPC/",
            "title": "进程与线程-延迟过程调用(DPC)",
            "date_published": "2022-02-21T07:30:24.000Z",
            "content_html": "<h1 id=\"楔子\"><a class=\"anchor\" href=\"#楔子\">#</a> 楔子</h1>\n<p>这是中断相关的知识，先了解中断请求级别（IRQL）</p>\n<div class=\"note primary\">\n<p><strong>软件 IRQL (Software IRQL)</strong></p>\n<p>PASSIVE_LEVEL 0 // Passive release level<br />\nLOW_LEVEL 0 // Lowest interrupt level<br />\nAPC_LEVEL 1 // APC interrupt level<br />\nDISPATCH_LEVEL 2 // Dispatch level</p>\n<p><strong>硬件 IRQL (Hardware IRQL)</strong></p>\n<p>DIRQL: from 3 to 26 for device ISR<br />\nPROFILE_LEVEL 27, 0x1B // Timer used for profiling.<br />\nCLOCK1_LEVEL 28, 0x1C // Interval clock 1 level - not used on x86<br />\nCLOCK2_LEVEL 28, 0x1C // Interval clock 2 level<br />\nSYNCH_LEVEL 28, 0x1C // Synchronization level<br />\nIPI_LEVEL 29, 0x1D // Interprocessor interrupt level<br />\nPOWER_LEVEL 30, 0x1E // Power failure level<br />\nHIGH_LEVEL 31, 0x1F // Highest interrupt level</p>\n</div>\n<p>数值越大代表其 IRQL 的优先级越高。</p>\n<h1 id=\"延迟过程调用dpc\"><a class=\"anchor\" href=\"#延迟过程调用dpc\">#</a> 延迟过程调用（DPC）</h1>\n<p>DPC 是 &quot;Deferred Procedure Call&quot; 的缩写。<br />\n简单介绍一下 DPC：DPC 是为了减少处于高  <code>IRQL</code>  的硬件中断处理的时间。<br />\n由于低  <code>IRQL</code>  的硬件中断不能中断高  <code>IRQL</code>  的硬件中断处理。而可能<strong>有些硬件的中断处理代码量比较大，花的时间比较多，会造成其他硬件中断的响应会等的时间比较长</strong>。</p>\n<div class=\"note primary\">\n<p>DPC 运行在  <code>DISPATCH_LEVEL</code>  上，低于任何一个硬件中断的  <code>IRQL</code>  ，所以 DPC 在执行的时候不会屏蔽任何硬件中断，但由于它高于或等于任何软件中断的  <code>IRQL</code>  ，所以它有优于任何线程的执行，也屏蔽了线程调度。可以说，DPC 是介于硬件中断和线程调度之间的一个 <code>IRQL</code> ，他可以打断当前线程的执行，凌驾于线程调度器纸上，但又不屏蔽任何硬件中断。</p>\n</div>\n<h2 id=\"dpc-队列\"><a class=\"anchor\" href=\"#dpc-队列\">#</a> DPC 队列</h2>\n<p>对单 cpu 的系统，整个系统只有一个 DPC 队列，对于多 cpu 系统有可能是一个 cpu 一个，这里我把 xp 虚拟机设置为了多核，查看了其每个核的  <code>KPRCB</code>  中  <code>+0x860 DpcListHead      : _LIST_ENTRY</code>  处的值，都不一样。</p>\n<p>所有的 DPC 都链在这个链上，这个队列是个 LIST_ENTRY 链表。</p>\n<p>链上的每项都是个  <code>KDPC</code>  结构。</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kd&gt; dt _KDPC</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>nt!_KDPC</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   +0x000 Type             : Int2B</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   +0x002 Number           : UChar  &#x2F;&#x2F; 优先级也可以称为紧迫程度分别为 0 1 2</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   +0x003 Importance       : UChar  &#x2F;&#x2F; 指明目标处理器</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   +0x004 DpcListEntry     : _LIST_ENTRY  &#x2F;&#x2F; 当前结构体在 DPC 请求队列中的链表节点</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   +0x00c DeferredRoutine  : Ptr32 void   &#x2F;&#x2F; 指向具体的 DPC 函数</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   +0x010 DeferredContext  : Ptr32 Void   &#x2F;&#x2F; 执行 DPC 函数时的上下文</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   +0x014 SystemArgument1  : Ptr32 Void   &#x2F;&#x2F; 执行 DPC 函数时的参数</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   +0x018 SystemArgument2  : Ptr32 Void</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   +0x01c Lock             : Ptr32 Uint4B &#x2F;&#x2F;DPC 的锁</pre></td></tr></table></figure><p>在 KPRCB 中挂着，等待触发时机。其中的  <code>DeferredRoutine</code>  是必须的，有没有上下文和参数都可以。具体的应该逆向函数。</p>\n<h2 id=\"dpc-的初始化\"><a class=\"anchor\" href=\"#dpc-的初始化\">#</a> DPC 的初始化</h2>\n<p>在 IDA 中查看  <code>KeInitializeDpc</code>  函数:</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>; void __stdcall KeInitializeDpc(PRKDPC Dpc, PKDEFERRED_ROUTINE DeferredRoutine, PVOID DeferredContext)</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>.text:00422EEE                 public _KeInitializeDpc@12</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>.text:00422EEE _KeInitializeDpc@12 proc near           ; CODE XREF: IopInitializeIrpStackProfiler()+29↑p</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>.text:00422EEE                                         ; VdmpDelayInterrupt(x)+26B↓p ...</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>.text:00422EEE</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>.text:00422EEE Dpc             &#x3D; dword ptr  8</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>.text:00422EEE DeferredRoutine &#x3D; dword ptr  0Ch</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>.text:00422EEE DeferredContext &#x3D; dword ptr  10h</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>.text:00422EEE</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>.text:00422EEE                 mov     edi, edi</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>.text:00422EF0                 push    ebp</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>.text:00422EF1                 mov     ebp, esp</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>.text:00422EF3                 mov     eax, [ebp+Dpc]</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>.text:00422EF6                 mov     ecx, [ebp+DeferredRoutine]</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>.text:00422EF9                 and     [eax+_KDPC.Lock], 0</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>.text:00422EFD                 mov     [eax+_KDPC.DeferredRoutine], ecx</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>.text:00422F00                 mov     ecx, [ebp+DeferredContext]</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>.text:00422F03                 mov     [eax+_KDPC.Type], 13h</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>.text:00422F08                 mov     [eax+_KDPC.Number], 0</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>.text:00422F0C                 mov     [eax+_KDPC.Importance], 1</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>.text:00422F10                 mov     [eax+_KDPC.DeferredContext], ecx</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>.text:00422F13                 pop     ebp</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>.text:00422F14                 retn    0Ch</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>.text:00422F14 _KeInitializeDpc@12 endp</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>.text:00422F14</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>.text:00422F14 ; ---------------------------------------------------------------------------</pre></td></tr></table></figure><p>就是填充结构体。</p>\n<p>参考以下代码：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>VOID</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">KeInitializeDpc</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    IN PRKDPC Dpc<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    IN PKDEFERRED_ROUTINE DeferredRoutine<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    IN PVOID DeferredContext</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">/*++</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>Routine Description:</pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    This function initializes a kernel DPC object. The deferred routine</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    and context parameter are stored in the DPC object.</pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>Arguments:</pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    Dpc - Supplies a pointer to a control object of type DPC.</pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    DeferredRoutine - Supplies a pointer to a function that is called when</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        the DPC object is removed from the current processor's DPC queue.</pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    DeferredContext - Supplies a pointer to an arbitrary data structure which is</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        to be passed to the function specified by the DeferredRoutine parameter.</pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>Return Value:</pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    None.</pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>--*/</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token comment\">// Initialize standard control object header.</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    Dpc<span class=\"token operator\">-></span>Type <span class=\"token operator\">=</span> DpcObject<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    Dpc<span class=\"token operator\">-></span>Number <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    Dpc<span class=\"token operator\">-></span>Importance <span class=\"token operator\">=</span> MediumImportance<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token comment\">// Initialize deferred routine address and deferred context parameter.</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    Dpc<span class=\"token operator\">-></span>DeferredRoutine <span class=\"token operator\">=</span> DeferredRoutine<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    Dpc<span class=\"token operator\">-></span>DeferredContext <span class=\"token operator\">=</span> DeferredContext<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    Dpc<span class=\"token operator\">-></span>Lock <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"dpc-队列的插入\"><a class=\"anchor\" href=\"#dpc-队列的插入\">#</a> DPC 队列的插入</h2>\n<p>逆向分析  <code>KeInsertQueueDpc</code>  函数</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>.text:00422F5A ; BOOLEAN __stdcall KeInsertQueueDpc (PRKDPC Dpc, PVOID SystemArgument1, PVOID SystemArgument2)</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>.text:00422F5A                 public _KeInsertQueueDpc@12</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>.text:00422F5A _KeInsertQueueDpc@12 proc near          ; CODE XREF: KeSetTimerEx (x,x,x,x,x)+7F↑p</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>.text:00422F5A                                         ; KiCalibrateTimeAdjustment (x)+52↓p ...</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>.text:00422F5A</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>.text:00422F5A var_8           &#x3D; dword ptr -8</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>.text:00422F5A NewIrql         &#x3D; byte ptr -1</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>.text:00422F5A Dpc             &#x3D; dword ptr  8</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>.text:00422F5A SystemArgument1 &#x3D; dword ptr  0Ch</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>.text:00422F5A SystemArgument2 &#x3D; dword ptr  10h</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>.text:00422F5A</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>.text:00422F5A                 mov     edi, edi</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>.text:00422F5C                 push    ebp</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>.text:00422F5D                 mov     ebp, esp</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>.text:00422F5F                 push    ecx</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>.text:00422F60                 push    ecx</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>.text:00422F61                 push    esi</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>.text:00422F62                 push    edi             ; 保存寄存器环境</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>.text:00422F63                 mov     cl, 1Fh         ; 提升 IRQL 等级。提升到了 31 了，谁也不能打断了</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>.text:00422F65                 call    ds:__imp_@KfRaiseIrql@4 ; KfRaiseIrql (x)</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>.text:00422F6B                 mov     [ebp+NewIrql], al</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>.text:00422F6E                 db      3Eh             ; eax 存储这 KPRCB 的地址</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>.text:00422F6E                 mov     eax, ds:0FFDFF020h</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>.text:00422F74                 mov     edi, [ebp+Dpc]  ; edi 指向 KDPC 结构</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>.text:00422F77                 mov     esi, eax</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>.text:00422F79                 lea     eax, [esi+_KPRCB.DpcLock]</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>.text:00422F7F                 mov     [ebp-8], eax    ; ebp-8 的位置存储着 _KPRCB.DpcLock</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>.text:00422F82                 lea     eax, [edi+_KDPC.Lock]</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>.text:00422F85                 mov     [ebp+8], eax    ; ebp + 8 存储着 _KDPC.Lock</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>.text:00422F88                 mov     eax, 0</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>.text:00422F8D                 mov     ecx, [ebp+8]    ; ecx 存储着 _KDPC.Lock</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>.text:00422F90                 mov     edx, [ebp-8]    ; edx 存储着 _KPRCB.DpcLock</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>.text:00422F93                 cmpxchg [ecx], edx      ; cmpxchg 指令介绍：</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>.text:00422F93                                         ; 将 AL、AX、EAX 或 RAX 寄存器中的值与第一个操作数（目标操作数）进行比较。</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>.text:00422F93                                         ; 如果这两个值相等，则将第二个操作数（源操作数）加载到目标操作数中。</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>.text:00422F93                                         ; 否则，目标操作数将被加载到 AL、AX、EAX 或 RAX 寄存器中。</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>.text:00422F93                                         ;</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>.text:00422F93                                         ; 如果 ecx &#x3D; 0 则 ecx &#x3D; edx</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>.text:00422F93                                         ; 如果 ecx !&#x3D; 0 则 eax &#x3D; edx</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>.text:00422F93                                         ; ----------</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>.text:00422F96                 test    eax, eax        ; 判断 eax 是否为 0</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>.text:00422F98                 mov     [ebp+8], eax</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>.text:00422F9B                 jnz     loc_42302A      ; 如果不等于 0 程序结束。</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>.text:00422F9B                                         ; 所以上面 cmpxchg 指令的目的就是使_KDPC.Lock &#x3D; _KPRCB.DpcLock</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>.text:00422FA1                 inc     [esi+_KPRCB.DpcCount]</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>.text:00422FA7                 add     [esi+_KPRCB.DpcQueueDepth], 1</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>.text:00422FAE                 cmp     [edi+_KDPC.Importance], 2 ; 查看优先级是否是最高级</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>.text:00422FB2                 mov     eax, [ebp+SystemArgument1]</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>.text:00422FB5                 mov     [edi+_KDPC.SystemArgument1], eax ; 填充 KDPC 结构体的参数成员</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>.text:00422FB8                 mov     eax, [ebp+SystemArgument2]</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>.text:00422FBB                 mov     [edi+_KDPC.SystemArgument2], eax</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>.text:00422FBE                 lea     ecx, [esi+_KPRCB.DpcListHead] ; ecx &#x3D; DpcListHead</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>.text:00422FC4                 lea     eax, [edi+_KDPC.DpcListEntry] ; eax &#x3D; 当前结构体在 DPC 请求队列中的链表节点</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>.text:00422FC7                 jnz     short loc_422FD7 ; 如果优先级不是最高则跳转</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>.text:00422FC7                                         ;</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>.text:00422FC7                                         ; 以下是链表操作，加到队头</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>.text:00422FC9                 mov     edx, [ecx+_LIST_ENTRY.Flink] ; edx &#x3D; DpcListHead</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>.text:00422FCB                 mov     [eax+_LIST_ENTRY.Flink], edx ; 把当前节点的前面指向链表的首部</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>.text:00422FCD                 mov     [eax+_LIST_ENTRY.Blink], ecx ; 把当前节点的后一个指向链表首部的前一个</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>.text:00422FD0                 mov     [edx+_LIST_ENTRY.Blink], eax ; edx &#x3D; 当前节点的 后一个_LIST_ENTRY.Blink</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>.text:00422FD3                 mov     [ecx+_LIST_ENTRY.Flink], eax ; 更新_KPRCB.DpcListHead 的值</pre></td></tr><tr><td data-num=\"62\"></td><td><pre>.text:00422FD5                 jmp     short loc_422FE4 ; 判断当前有没有要执行的 DPC</pre></td></tr><tr><td data-num=\"63\"></td><td><pre>.text:00422FD7 ; ---------------------------------------------------------------------------</pre></td></tr><tr><td data-num=\"64\"></td><td><pre>.text:00422FD7</pre></td></tr><tr><td data-num=\"65\"></td><td><pre>.text:00422FD7 loc_422FD7:                             ; CODE XREF: KeInsertQueueDpc (x,x,x)+6D↑j</pre></td></tr><tr><td data-num=\"66\"></td><td><pre>.text:00422FD7                 mov     edx, [ecx+4]    ; 以下是链表操作，加到队尾</pre></td></tr><tr><td data-num=\"67\"></td><td><pre>.text:00422FDA                 mov     [eax], ecx</pre></td></tr><tr><td data-num=\"68\"></td><td><pre>.text:00422FDC                 mov     [eax+4], edx</pre></td></tr><tr><td data-num=\"69\"></td><td><pre>.text:00422FDF                 mov     [edx], eax</pre></td></tr><tr><td data-num=\"70\"></td><td><pre>.text:00422FE1                 mov     [ecx+4], eax</pre></td></tr><tr><td data-num=\"71\"></td><td><pre>.text:00422FE4</pre></td></tr><tr><td data-num=\"72\"></td><td><pre>.text:00422FE4 loc_422FE4:                             ; CODE XREF: KeInsertQueueDpc (x,x,x)+7B↑j</pre></td></tr><tr><td data-num=\"73\"></td><td><pre>.text:00422FE4                 cmp     [esi+_KPRCB.DpcRoutineActive], 0 ; 判断当前有没有要执行的 DPC</pre></td></tr><tr><td data-num=\"74\"></td><td><pre>.text:00422FEB                 jnz     short loc_42302A ; 有的话就退出了，不插入队列</pre></td></tr><tr><td data-num=\"75\"></td><td><pre>.text:00422FED                 cmp     [esi+_KPRCB.DpcInterruptRequested], 0 ; 判断有没有中断的 DPC</pre></td></tr><tr><td data-num=\"76\"></td><td><pre>.text:00422FF4                 jnz     short loc_42302A</pre></td></tr><tr><td data-num=\"77\"></td><td><pre>.text:00422FF6                 cmp     [edi+_KDPC.Importance], 0 ; 查看优先级是否为 0</pre></td></tr><tr><td data-num=\"78\"></td><td><pre>.text:00422FFA                 jnz     short loc_423018 ; 优先级不为 0 则跳转开始触发 DPC</pre></td></tr><tr><td data-num=\"79\"></td><td><pre>.text:00422FFC                 mov     eax, [esi+_KPRCB.DpcQueueDepth]</pre></td></tr><tr><td data-num=\"80\"></td><td><pre>.text:00423002                 cmp     eax, [esi+_KPRCB.MaximumDpcQueueDepth] ; 比较 DPC 队列深度是否小于最大队列深度</pre></td></tr><tr><td data-num=\"81\"></td><td><pre>.text:00423008                 jnb     short loc_423018 ; 如果不小于则跳转</pre></td></tr><tr><td data-num=\"82\"></td><td><pre>.text:0042300A                 mov     eax, [esi+_KPRCB.DpcRequestRate]</pre></td></tr><tr><td data-num=\"83\"></td><td><pre>.text:00423010                 cmp     eax, [esi+_KPRCB.MinimumDpcRate]</pre></td></tr><tr><td data-num=\"84\"></td><td><pre>.text:00423016                 jnb     short loc_42302A ; 如果不小于则直接返回。</pre></td></tr><tr><td data-num=\"85\"></td><td><pre>.text:00423018</pre></td></tr><tr><td data-num=\"86\"></td><td><pre>.text:00423018 loc_423018:                             ; CODE XREF: KeInsertQueueDpc (x,x,x)+A0↑j</pre></td></tr><tr><td data-num=\"87\"></td><td><pre>.text:00423018                                         ; KeInsertQueueDpc (x,x,x)+AE↑j</pre></td></tr><tr><td data-num=\"88\"></td><td><pre>.text:00423018                 mov     cl, 2           ; 设置中断等级为 2</pre></td></tr><tr><td data-num=\"89\"></td><td><pre>.text:0042301A                 mov     [esi+_KPRCB.DpcInterruptRequested], 1</pre></td></tr><tr><td data-num=\"90\"></td><td><pre>.text:00423024                 call    ds:__imp_@HalRequestSoftwareInterrupt@4 ; 请求软件中断</pre></td></tr><tr><td data-num=\"91\"></td><td><pre>.text:0042302A</pre></td></tr><tr><td data-num=\"92\"></td><td><pre>.text:0042302A loc_42302A:                             ; CODE XREF: KeInsertQueueDpc (x,x,x)+41↑j</pre></td></tr><tr><td data-num=\"93\"></td><td><pre>.text:0042302A                                         ; KeInsertQueueDpc (x,x,x)+91↑j ...</pre></td></tr><tr><td data-num=\"94\"></td><td><pre>.text:0042302A                 mov     cl, [ebp+NewIrql] ; 把原来的 IRQL 还原</pre></td></tr><tr><td data-num=\"95\"></td><td><pre>.text:0042302D                 call    ds:__imp_@KfLowerIrql@4 ; KfLowerIrql (x)</pre></td></tr><tr><td data-num=\"96\"></td><td><pre>.text:00423033                 xor     eax, eax</pre></td></tr><tr><td data-num=\"97\"></td><td><pre>.text:00423035                 cmp     [ebp+8], eax</pre></td></tr><tr><td data-num=\"98\"></td><td><pre>.text:00423038                 pop     edi</pre></td></tr><tr><td data-num=\"99\"></td><td><pre>.text:00423039                 setz    al              ; 汇编指令 SETZ (SETE) SETNZ (SETNE)</pre></td></tr><tr><td data-num=\"100\"></td><td><pre>.text:00423039                                         ; 取标志寄存器中 ZF 的值，放到 AL 中。</pre></td></tr><tr><td data-num=\"101\"></td><td><pre>.text:00423039                                         ; SETNE 取得 ZF 值后，取反，再放到 AL 中。</pre></td></tr><tr><td data-num=\"102\"></td><td><pre>.text:0042303C                 pop     esi</pre></td></tr><tr><td data-num=\"103\"></td><td><pre>.text:0042303D                 leave</pre></td></tr><tr><td data-num=\"104\"></td><td><pre>.text:0042303E                 retn    0Ch</pre></td></tr><tr><td data-num=\"105\"></td><td><pre>.text:0042303E _KeInsertQueueDpc@12 endp</pre></td></tr><tr><td data-num=\"106\"></td><td><pre>.text:0042303E</pre></td></tr><tr><td data-num=\"107\"></td><td><pre>.text:0042303E ; ---------------------------------------------------------------------------</pre></td></tr></table></figure><p>参考以下代码：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">ASSERT_DPC</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>E<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>             </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token expression\"><span class=\"token function\">ASSERT</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>E<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>Type <span class=\"token operator\">==</span> DpcObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token expression\"><span class=\"token punctuation\">&#125;</span></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>BOOLEAN</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">KeInsertQueueDpc</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    IN PRKDPC Dpc<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    IN PVOID SystemArgument1<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    IN PVOID SystemArgument2</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">/*++</pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>Routine Description:</pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    This function inserts a DPC object into the DPC queue. If the DPC object</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    is already in the DPC queue, then no operation is performed. Otherwise,</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    the DPC object is inserted in the DPC queue and a dispatch interrupt is</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    requested.</pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>Arguments:</pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    Dpc - Supplies a pointer to a control object of type DPC.</pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    SystemArgument1, SystemArgument2  - Supply a set of two arguments that</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        contain untyped data provided by the executive.</pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>Return Value:</pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    If the DPC object is already in a DPC queue, then a value of FALSE is</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    returned. Otherwise a value of TRUE is returned.</pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>--*/</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    ULONG Index<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    PKSPIN_LOCK Lock<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    KIRQL OldIrql<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    PKPRCB Prcb<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    ULONG Processor<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token function\">ASSERT_DPC</span><span class=\"token punctuation\">(</span>Dpc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token comment\">// Disable interrupts.</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token function\">KeRaiseIrql</span><span class=\"token punctuation\">(</span>HIGH_LEVEL<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>OldIrql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token comment\">// Acquire the DPC queue lock for the specified target processor.</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\"><span class=\"token operator\">!</span><span class=\"token function\">defined</span><span class=\"token punctuation\">(</span>NT_UP<span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Dpc<span class=\"token operator\">-></span>Number <span class=\"token operator\">>=</span> MAXIMUM_PROCESSORS<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        Processor <span class=\"token operator\">=</span> Dpc<span class=\"token operator\">-></span>Number <span class=\"token operator\">-</span> MAXIMUM_PROCESSORS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        Prcb <span class=\"token operator\">=</span> KiProcessorBlock<span class=\"token punctuation\">[</span>Processor<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        Prcb <span class=\"token operator\">=</span> <span class=\"token function\">KeGetCurrentPrcb</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    <span class=\"token function\">KiAcquireSpinLock</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>Prcb<span class=\"token operator\">-></span>DpcLock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre></pre></td></tr><tr><td data-num=\"67\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">else</span></span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    Prcb <span class=\"token operator\">=</span> <span class=\"token function\">KeGetCurrentPrcb</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre></pre></td></tr><tr><td data-num=\"71\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    <span class=\"token comment\">// If the DPC object is not in a DPC queue, then store the system</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    <span class=\"token comment\">// arguments, insert the DPC object in the DPC queue, increment the</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>    <span class=\"token comment\">// number of DPCs queued to the target processor, increment the DPC</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>    <span class=\"token comment\">// queue depth, set the address of the DPC target DPC spinlock, and</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    <span class=\"token comment\">// request a dispatch interrupt if appropriate.</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>Lock <span class=\"token operator\">=</span> <span class=\"token function\">InterlockedCompareExchangePointer</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>Dpc<span class=\"token operator\">-></span>Lock<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>Prcb<span class=\"token operator\">-></span>DpcLock<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>        Prcb<span class=\"token operator\">-></span>DpcCount <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>        Prcb<span class=\"token operator\">-></span>DpcQueueDepth <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>        Dpc<span class=\"token operator\">-></span>SystemArgument1 <span class=\"token operator\">=</span> SystemArgument1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>        Dpc<span class=\"token operator\">-></span>SystemArgument2 <span class=\"token operator\">=</span> SystemArgument2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>        <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>        <span class=\"token comment\">// If the DPC is of high importance, then insert the DPC at the</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>        <span class=\"token comment\">// head of the DPC queue. Otherwise, insert the DPC at the end</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>        <span class=\"token comment\">// of the DPC queue.</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>        <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Dpc<span class=\"token operator\">-></span>Importance <span class=\"token operator\">==</span> HighImportance<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>            <span class=\"token function\">InsertHeadList</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>Prcb<span class=\"token operator\">-></span>DpcListHead<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>Dpc<span class=\"token operator\">-></span>DpcListEntry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>            <span class=\"token function\">InsertTailList</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>Prcb<span class=\"token operator\">-></span>DpcListHead<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>Dpc<span class=\"token operator\">-></span>DpcListEntry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>        <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>        <span class=\"token comment\">// A memory barrier is required here to synchronize with retire DPC</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>        <span class=\"token comment\">// list, which clears DpcRoutineActive and DpcInterruptRequested</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>        <span class=\"token comment\">// without owning the dispatcher lock.</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>        <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre></pre></td></tr><tr><td data-num=\"105\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\"><span class=\"token function\">defined</span><span class=\"token punctuation\">(</span>_ALPHA_<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token function\">defined</span><span class=\"token punctuation\">(</span>NT_UP<span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>        <span class=\"token function\">__MB</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre></pre></td></tr><tr><td data-num=\"109\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>        <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>        <span class=\"token comment\">// If a DPC routine is not active on the target processor, then</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>        <span class=\"token comment\">// request a dispatch interrupt if appropriate.</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>        <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>Prcb<span class=\"token operator\">-></span>DpcRoutineActive <span class=\"token operator\">==</span> FALSE<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>            <span class=\"token punctuation\">(</span>Prcb<span class=\"token operator\">-></span>DpcInterruptRequested <span class=\"token operator\">==</span> FALSE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>            <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>            <span class=\"token comment\">// Request a dispatch interrupt on the current processor if</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>            <span class=\"token comment\">// the DPC is not of low importance, the length of the DPC</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>            <span class=\"token comment\">// queue has exceeded the maximum threshold, or if the DPC</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>            <span class=\"token comment\">// request rate is below the minimum threshold.</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>            <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre></pre></td></tr><tr><td data-num=\"126\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\"><span class=\"token function\">defined</span><span class=\"token punctuation\">(</span>NT_UP<span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>Dpc<span class=\"token operator\">-></span>Importance <span class=\"token operator\">!=</span> LowImportance<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>                <span class=\"token punctuation\">(</span>Prcb<span class=\"token operator\">-></span>DpcQueueDepth <span class=\"token operator\">>=</span> Prcb<span class=\"token operator\">-></span>MaximumDpcQueueDepth<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>                <span class=\"token punctuation\">(</span>Prcb<span class=\"token operator\">-></span>DpcRequestRate <span class=\"token operator\">&lt;</span> Prcb<span class=\"token operator\">-></span>MinimumDpcRate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>                Prcb<span class=\"token operator\">-></span>DpcInterruptRequested <span class=\"token operator\">=</span> TRUE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>                <span class=\"token function\">KiRequestSoftwareInterrupt</span><span class=\"token punctuation\">(</span>DISPATCH_LEVEL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>            <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>            <span class=\"token comment\">// If the DPC is being queued to another processor and the</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>            <span class=\"token comment\">// DPC is of high importance, or the length of the other</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>            <span class=\"token comment\">// processor's DPC queue has exceeded the maximum threshold,</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>            <span class=\"token comment\">// then request a dispatch interrupt.</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>            <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre></pre></td></tr><tr><td data-num=\"142\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">else</span></span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Prcb <span class=\"token operator\">!=</span> <span class=\"token function\">KeGetCurrentPrcb</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>Dpc<span class=\"token operator\">-></span>Importance <span class=\"token operator\">==</span> HighImportance<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre>                     <span class=\"token punctuation\">(</span>Prcb<span class=\"token operator\">-></span>DpcQueueDepth <span class=\"token operator\">>=</span> Prcb<span class=\"token operator\">-></span>MaximumDpcQueueDepth<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>                    Prcb<span class=\"token operator\">-></span>DpcInterruptRequested <span class=\"token operator\">=</span> TRUE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>                    <span class=\"token function\">KiIpiSend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>KAFFINITY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> Processor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> IPI_DPC<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre></pre></td></tr><tr><td data-num=\"151\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre></pre></td></tr><tr><td data-num=\"153\"></td><td><pre>                <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"154\"></td><td><pre>                <span class=\"token comment\">// Request a dispatch interrupt on the current processor if</span></pre></td></tr><tr><td data-num=\"155\"></td><td><pre>                <span class=\"token comment\">// the DPC is not of low importance, the length of the DPC</span></pre></td></tr><tr><td data-num=\"156\"></td><td><pre>                <span class=\"token comment\">// queue has exceeded the maximum threshold, or if the DPC</span></pre></td></tr><tr><td data-num=\"157\"></td><td><pre>                <span class=\"token comment\">// request rate is below the minimum threshold.</span></pre></td></tr><tr><td data-num=\"158\"></td><td><pre>                <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"159\"></td><td><pre></pre></td></tr><tr><td data-num=\"160\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>Dpc<span class=\"token operator\">-></span>Importance <span class=\"token operator\">!=</span> LowImportance<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span></pre></td></tr><tr><td data-num=\"161\"></td><td><pre>                    <span class=\"token punctuation\">(</span>Prcb<span class=\"token operator\">-></span>DpcQueueDepth <span class=\"token operator\">>=</span> Prcb<span class=\"token operator\">-></span>MaximumDpcQueueDepth<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span></pre></td></tr><tr><td data-num=\"162\"></td><td><pre>                    <span class=\"token punctuation\">(</span>Prcb<span class=\"token operator\">-></span>DpcRequestRate <span class=\"token operator\">&lt;</span> Prcb<span class=\"token operator\">-></span>MinimumDpcRate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"163\"></td><td><pre>                    Prcb<span class=\"token operator\">-></span>DpcInterruptRequested <span class=\"token operator\">=</span> TRUE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"164\"></td><td><pre>                    <span class=\"token function\">KiRequestSoftwareInterrupt</span><span class=\"token punctuation\">(</span>DISPATCH_LEVEL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"165\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"166\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"167\"></td><td><pre></pre></td></tr><tr><td data-num=\"168\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"169\"></td><td><pre></pre></td></tr><tr><td data-num=\"170\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"171\"></td><td><pre>     <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"172\"></td><td><pre></pre></td></tr><tr><td data-num=\"173\"></td><td><pre>     <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"174\"></td><td><pre>     <span class=\"token comment\">// Release the DPC lock, enable interrupts, and return whether the</span></pre></td></tr><tr><td data-num=\"175\"></td><td><pre>     <span class=\"token comment\">// DPC was queued or not.</span></pre></td></tr><tr><td data-num=\"176\"></td><td><pre>     <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"177\"></td><td><pre></pre></td></tr><tr><td data-num=\"178\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\"><span class=\"token operator\">!</span><span class=\"token function\">defined</span><span class=\"token punctuation\">(</span>NT_UP<span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"179\"></td><td><pre></pre></td></tr><tr><td data-num=\"180\"></td><td><pre>     <span class=\"token function\">KiReleaseSpinLock</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>Prcb<span class=\"token operator\">-></span>DpcLock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"181\"></td><td><pre></pre></td></tr><tr><td data-num=\"182\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"183\"></td><td><pre></pre></td></tr><tr><td data-num=\"184\"></td><td><pre>     <span class=\"token function\">KeLowerIrql</span><span class=\"token punctuation\">(</span>OldIrql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"185\"></td><td><pre>     <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>Lock <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"186\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"dpc-移除队列\"><a class=\"anchor\" href=\"#dpc-移除队列\">#</a> DPC 移除队列</h2>\n<p>逆向  <code>KeRemoveQueueDpc</code></p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>.text:00424954 ; BOOLEAN __stdcall KeRemoveQueueDpc (PRKDPC Dpc)</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>.text:00424954                 public _KeRemoveQueueDpc@4</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>.text:00424954 _KeRemoveQueueDpc@4 proc near           ; CODE XREF: ExTimerRundown ()+90↓p</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>.text:00424954                                         ; NtCancelTimer (x,x)+AD↓p ...</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>.text:00424954</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>.text:00424954 Dpc             &#x3D; dword ptr  8</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>.text:00424954</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>.text:00424954                 mov     edi, edi</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>.text:00424956                 push    ebp</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>.text:00424957                 mov     ebp, esp</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>.text:00424959                 push    esi</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>.text:0042495A                 push    edi</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>.text:0042495B                 cli</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>.text:0042495C                 mov     esi, [ebp+Dpc]</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>.text:0042495F                 mov     edi, [esi+_KDPC.Lock]</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>.text:00424962                 test    edi, edi</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>.text:00424964                 jz      short loc_42498C</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>.text:00424966                 mov     ecx, edi</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>.text:00424968                 call    @KiAcquireSpinLock@4 ; KiAcquireSpinLock (x)</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>.text:0042496D                 cmp     edi, [esi+_KDPC.Lock]</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>.text:00424970                 jnz     short loc_424985</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>.text:00424972                 sub     dword ptr [edi-30h], 1</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>.text:00424976                 mov     eax, [esi+_KDPC.DpcListEntry.Flink] ; 链表操作，从队列中移除</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>.text:00424979                 mov     ecx, [esi+_KDPC.DpcListEntry.Blink]</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>.text:0042497C                 mov     [ecx+_LIST_ENTRY.Flink], eax</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>.text:0042497E                 mov     [eax+_LIST_ENTRY.Blink], ecx</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>.text:00424981                 and     [esi+_KDPC.Lock], 0 ; Lock &#x3D; 0</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>.text:00424985</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>.text:00424985 loc_424985:                             ; CODE XREF: KeRemoveQueueDpc (x)+1C↑j</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>.text:00424985                 mov     ecx, edi</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>.text:00424987                 call    @KiReleaseSpinLock@4 ; KiReleaseSpinLock (x)</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>.text:0042498C</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>.text:0042498C loc_42498C:                             ; CODE XREF: KeRemoveQueueDpc (x)+10↑j</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>.text:0042498C                 sti</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>.text:0042498D                 xor     eax, eax</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>.text:0042498F                 test    edi, edi</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>.text:00424991                 pop     edi</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>.text:00424992                 setnz   al</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>.text:00424995                 pop     esi</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>.text:00424996                 pop     ebp</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>.text:00424997                 retn    4</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>.text:00424997 _KeRemoveQueueDpc@4 endp</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>.text:00424997</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>.text:00424997 ; ---------------------------------------------------------------------------</pre></td></tr></table></figure><p>参考以下代码：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">ASSERT_DPC</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>E<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>             </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token expression\"><span class=\"token function\">ASSERT</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>E<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>Type <span class=\"token operator\">==</span> DpcObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token expression\"><span class=\"token punctuation\">&#125;</span></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>BOOLEAN</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">KeRemoveQueueDpc</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    IN PRKDPC Dpc</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">/*++</pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>Routine Description:</pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    This function removes a DPC object from the DPC queue. If the DPC object</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    is not in the DPC queue, then no operation is performed. Otherwise, the</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    DPC object is removed from the DPC queue and its inserted state is set</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    FALSE.</pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>Arguments:</pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    Dpc - Supplies a pointer to a control object of type DPC.</pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>Return Value:</pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    If the DPC object is not in the DPC queue, then a value of FALSE is</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    returned. Otherwise a value of TRUE is returned.</pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>--*/</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    PKSPIN_LOCK Lock<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    PKPRCB Prcb<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token function\">ASSERT_DPC</span><span class=\"token punctuation\">(</span>Dpc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token comment\">// If the DPC object is in the DPC queue, then remove it from the queue</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token comment\">// and set its inserted state to FALSE.</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token function\">_disable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    Lock <span class=\"token operator\">=</span> Dpc<span class=\"token operator\">-></span>Lock<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Lock <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token comment\">// Acquire the DPC lock of the target processor.</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\"><span class=\"token operator\">!</span><span class=\"token function\">defined</span><span class=\"token punctuation\">(</span>NT_UP<span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token function\">KiAcquireSpinLock</span><span class=\"token punctuation\">(</span>Lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token comment\">// If the specified DPC is still in the DPC queue, then remove</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        <span class=\"token comment\">// it.</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        <span class=\"token comment\">// N.B. It is possible for specified DPC to be removed from the</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        <span class=\"token comment\">//      specified DPC queue before the DPC lock is obtained.</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Lock <span class=\"token operator\">==</span> Dpc<span class=\"token operator\">-></span>Lock<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>            Prcb <span class=\"token operator\">=</span> <span class=\"token function\">CONTAINING_RECORD</span><span class=\"token punctuation\">(</span>Lock<span class=\"token punctuation\">,</span> KPRCB<span class=\"token punctuation\">,</span> DpcLock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>            Prcb<span class=\"token operator\">-></span>DpcQueueDepth <span class=\"token operator\">-=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>            <span class=\"token function\">RemoveEntryList</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>Dpc<span class=\"token operator\">-></span>DpcListEntry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre></pre></td></tr><tr><td data-num=\"70\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\"><span class=\"token function\">defined</span><span class=\"token punctuation\">(</span>_ALPHA_<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token function\">defined</span><span class=\"token punctuation\">(</span>NT_UP<span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>            <span class=\"token function\">__MB</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre></pre></td></tr><tr><td data-num=\"74\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>            Dpc<span class=\"token operator\">-></span>Lock <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>        <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>        <span class=\"token comment\">// Release the DPC lock of the target processor.</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>        <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre></pre></td></tr><tr><td data-num=\"83\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\"><span class=\"token operator\">!</span><span class=\"token function\">defined</span><span class=\"token punctuation\">(</span>NT_UP<span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>        <span class=\"token function\">KiReleaseSpinLock</span><span class=\"token punctuation\">(</span>Lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre></pre></td></tr><tr><td data-num=\"87\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>    <span class=\"token comment\">// Enable interrupts and return whether the DPC was removed from a DPC</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>    <span class=\"token comment\">// queue.</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>    <span class=\"token function\">_enable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>Lock <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"dpc的执行\"><a class=\"anchor\" href=\"#dpc的执行\">#</a> DPC 的执行</h2>\n<p>之前分析的  <code>KiDispatchInterrupt</code>  函数的开头，就有处理 DPC 的片段。</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>.text:0046EAE0 _KiDispatchInterrupt@0 proc near</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>.text:0046EAE0</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>.text:0046EAE0 var_C           &#x3D; dword ptr -0Ch</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>.text:0046EAE0 var_8           &#x3D; dword ptr -8</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>.text:0046EAE0 var_4           &#x3D; dword ptr -4</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>.text:0046EAE0</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>.text:0046EAE0                 mov     ebx, large fs:1Ch ; ebx: KPCR</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>.text:0046EAE7</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>.text:0046EAE7 loc_46EAE7:                             ; CODE XREF: KiDispatchInterrupt ()+B9↓j</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>.text:0046EAE7                 lea     eax, [ebx+_KPCR.PrcbData.DpcListHead]</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>.text:0046EAED                 cli                     ; 屏蔽中断</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>.text:0046EAEE                 cmp     eax, [eax]      ; check if DPC List is empty</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>.text:0046EAF0                 jz      short loc_46EB0F ;  if eq, list is empty</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>.text:0046EAF2                 push    ebp             ;  save register</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>.text:0046EAF3                 push    [ebx+_KPCR.NtTib.ExceptionList] ; DPC 中发生的异常与中断线程中的任何异常处理程序无关。</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>.text:0046EAF5                 mov     [ebx+_KPCR.NtTib.ExceptionList], 0FFFFFFFFh ; 终止异常列表。</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>.text:0046EAFB                 mov     edx, esp</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>.text:0046EAFD                 mov     esp, [ebx+_KPCR.PrcbData.DpcStack] ; 切换到此处理器的 DPC 堆栈。</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>.text:0046EB03                 push    edx</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>.text:0046EB04                 mov     ebp, eax        ; 设置 DPC Listhead 的地址</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>.text:0046EB06                 call    KiRetireDpcList ; 处理当前 DPC 列表</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>.text:0046EB0B                 pop     esp             ; 切换回当前线程堆栈，恢复异常列表和保存的 EBP。</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>.text:0046EB0C                 pop     dword ptr [ebx]</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>.text:0046EB0E                 pop     ebp</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>.text:0046EB0F</pre></td></tr></table></figure><p>可以看到  <code>KiDispatchInterrupt</code>  调用了  <code>KiRetireDpcList</code>  来处理 DPC 队列。</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>.text:0046EF3E ; &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; S U B R O U T I N E &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>.text:0046EF3E</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>.text:0046EF3E</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>.text:0046EF3E KiRetireDpcList proc near               ; CODE XREF: KiDispatchInterrupt ()+26↑p</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>.text:0046EF3E                                         ; KiIdleLoop ()+23↑p</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>.text:0046EF3E</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>.text:0046EF3E var_24          &#x3D; dword ptr -24h</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>.text:0046EF3E var_14          &#x3D; dword ptr -14h</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>.text:0046EF3E var_10          &#x3D; dword ptr -10h</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>.text:0046EF3E var_C           &#x3D; dword ptr -0Ch</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>.text:0046EF3E var_8           &#x3D; dword ptr -8</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>.text:0046EF3E</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>.text:0046EF3E                 push    esi</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>.text:0046EF3F                 lea     esi, [ebx+_KPCR.PrcbData.DpcLock] ; get DPC lock address</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>.text:0046EF45                 push    0</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>.text:0046EF47                 sub     esp, 0Ch</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>.text:0046EF4A                 cmp     ds:_PPerfGlobalGroupMask, 0</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>.text:0046EF51                 jnz     loc_46EFDC</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>.text:0046EF57</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>.text:0046EF57 loc_46EF57:                             ; CODE XREF: KiRetireDpcList+85↓j</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>.text:0046EF57                                         ; KiRetireDpcList+A6↓j ...</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>.text:0046EF57                 mov     large fs:_KPCR.PrcbData.DpcRoutineActive, esp ; 设置 DPC 例程激活</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>.text:0046EF5E</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>.text:0046EF5E loc_46EF5E:                             ; CODE XREF: KiRetireDpcList+6C↓j</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>.text:0046EF5E                 lock bts dword ptr [esi], 0 ; BTS 指令的作用：</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>.text:0046EF5E                                         ; 两件事:</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>.text:0046EF5E                                         ; 一、</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>.text:0046EF5E                                         ;  取 esi 比特位的第 0 位存在 CF 标志位中。</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>.text:0046EF5E                                         ; 二、</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>.text:0046EF5E                                         ;  lock bts dword ptr [esi],0</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>.text:0046EF5E                                         ;  将 dword ptr [esi] 指向的内存地址的第 0 位置 1</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>.text:0046EF63                 jb      short loc_46EFCF ; CF &#x3D; 1 则跳转</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>.text:0046EF65                 cmp     ebp, [ebp+_LIST_ENTRY.Flink] ; check if DPC list is empty</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>.text:0046EF68                 jz      short loc_46EFCA ; DPC 的锁置为 0</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>.text:0046EF6A                 mov     edx, [ebp+_LIST_ENTRY.Flink]</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>.text:0046EF6D                 mov     ecx, [edx+_LIST_ENTRY.Flink]</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>.text:0046EF6F                 mov     [ebp+_LIST_ENTRY.Flink], ecx</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>.text:0046EF72                 mov     [ecx+_LIST_ENTRY.Blink], ebp</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>.text:0046EF75                 sub     edx, 4          ; -0x4 获得 DPC 对象 KDPC 结构的首地址</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>.text:0046EF78                 mov     ecx, [edx+_KDPC.DeferredRoutine]</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>.text:0046EF7B                 push    [edx+_KDPC.SystemArgument2]</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>.text:0046EF7E                 push    [edx+_KDPC.SystemArgument1]</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>.text:0046EF81                 push    [edx+_KDPC.DeferredContext]</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>.text:0046EF84                 push    edx</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>.text:0046EF85                 mov     [edx+_KDPC.Lock], 0 ; 清除 DPC 插入状态</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>.text:0046EF8C                 dec     [ebx+_KPCR.PrcbData.DpcQueueDepth] ; 递减深度</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>.text:0046EF92                 mov     byte ptr [esi], 0 ; 释放 DPC 锁</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>.text:0046EF95                 sti                     ; enable interrupts</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>.text:0046EF96                 cmp     dword ptr [esp+1Ch], 0 ; 这里有待调试分析</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>.text:0046EF9B                 jnz     short loc_46F004</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>.text:0046EF9D</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>.text:0046EF9D loc_46EF9D:                             ; CODE XREF: KiRetireDpcList+DD↓j</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>.text:0046EF9D                 call    ecx</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>.text:0046EF9F                 cmp     [esp+14h+var_8], 0 ; 若不为 0 会分析 log 相关的</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>.text:0046EFA4                 jnz     short loc_46F01D</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>.text:0046EFA6</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>.text:0046EFA6 loc_46EFA6:                             ; CODE XREF: KiRetireDpcList+98↓j</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>.text:0046EFA6                                         ; KiRetireDpcList+F1↓j</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>.text:0046EFA6                 cli</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>.text:0046EFA7                 cmp     ebp, [ebp+_LIST_ENTRY.Flink] ; check if DPC list is empty</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>.text:0046EFAA                 jnz     short loc_46EF5E ; BTS 指令的作用：</pre></td></tr><tr><td data-num=\"62\"></td><td><pre>.text:0046EFAA                                         ; 两件事:</pre></td></tr><tr><td data-num=\"63\"></td><td><pre>.text:0046EFAA                                         ; 一、</pre></td></tr><tr><td data-num=\"64\"></td><td><pre>.text:0046EFAA                                         ;  取 esi 比特位的第 0 位存在 CF 标志位中。</pre></td></tr><tr><td data-num=\"65\"></td><td><pre>.text:0046EFAA                                         ; 二、</pre></td></tr><tr><td data-num=\"66\"></td><td><pre>.text:0046EFAA                                         ;  lock bts dword ptr [esi],0</pre></td></tr><tr><td data-num=\"67\"></td><td><pre>.text:0046EFAA                                         ;  将 dword ptr [esi] 指向的内存地址的第 0 位置 1</pre></td></tr><tr><td data-num=\"68\"></td><td><pre>.text:0046EFAC</pre></td></tr><tr><td data-num=\"69\"></td><td><pre>.text:0046EFAC loc_46EFAC:                             ; CODE XREF: KiRetireDpcList+8F↓j</pre></td></tr><tr><td data-num=\"70\"></td><td><pre>.text:0046EFAC                 mov     [ebx+_KPCR.PrcbData.DpcRoutineActive], 0</pre></td></tr><tr><td data-num=\"71\"></td><td><pre>.text:0046EFB6                 mov     [ebx+_KPCR.PrcbData.DpcInterruptRequested], 0</pre></td></tr><tr><td data-num=\"72\"></td><td><pre>.text:0046EFC0                 cmp     ebp, [ebp+_LIST_ENTRY.Flink] ; check if DPC list is empty</pre></td></tr><tr><td data-num=\"73\"></td><td><pre>.text:0046EFC3                 jnz     short loc_46EF57 ; DPC 列表不为空，则继续执行 DPC</pre></td></tr><tr><td data-num=\"74\"></td><td><pre>.text:0046EFC5                 add     esp, 10h</pre></td></tr><tr><td data-num=\"75\"></td><td><pre>.text:0046EFC8                 pop     esi</pre></td></tr><tr><td data-num=\"76\"></td><td><pre>.text:0046EFC9                 retn</pre></td></tr><tr><td data-num=\"77\"></td><td><pre>.text:0046EFCA ; ---------------------------------------------------------------------------</pre></td></tr><tr><td data-num=\"78\"></td><td><pre>.text:0046EFCA</pre></td></tr><tr><td data-num=\"79\"></td><td><pre>.text:0046EFCA loc_46EFCA:                             ; CODE XREF: KiRetireDpcList+2A↑j</pre></td></tr><tr><td data-num=\"80\"></td><td><pre>.text:0046EFCA                 mov     byte ptr [esi], 0 ; DPC 的锁置为 0</pre></td></tr><tr><td data-num=\"81\"></td><td><pre>.text:0046EFCD                 jmp     short loc_46EFAC ; 返回</pre></td></tr><tr><td data-num=\"82\"></td><td><pre>.text:0046EFCF ; ---------------------------------------------------------------------------</pre></td></tr><tr><td data-num=\"83\"></td><td><pre>.text:0046EFCF</pre></td></tr><tr><td data-num=\"84\"></td><td><pre>.text:0046EFCF loc_46EFCF:                             ; CODE XREF: KiRetireDpcList+25↑j</pre></td></tr><tr><td data-num=\"85\"></td><td><pre>.text:0046EFCF                 sti</pre></td></tr><tr><td data-num=\"86\"></td><td><pre>.text:0046EFD0</pre></td></tr><tr><td data-num=\"87\"></td><td><pre>.text:0046EFD0 loc_46EFD0:                             ; CODE XREF: KiRetireDpcList+9C↓j</pre></td></tr><tr><td data-num=\"88\"></td><td><pre>.text:0046EFD0                 test    dword ptr [esi], 1</pre></td></tr><tr><td data-num=\"89\"></td><td><pre>.text:0046EFD6                 jz      short loc_46EFA6</pre></td></tr><tr><td data-num=\"90\"></td><td><pre>.text:0046EFD8                 pause</pre></td></tr><tr><td data-num=\"91\"></td><td><pre>.text:0046EFDA                 jmp     short loc_46EFD0</pre></td></tr><tr><td data-num=\"92\"></td><td><pre>.text:0046EFDC ; ---------------------------------------------------------------------------</pre></td></tr><tr><td data-num=\"93\"></td><td><pre>.text:0046EFDC</pre></td></tr><tr><td data-num=\"94\"></td><td><pre>.text:0046EFDC loc_46EFDC:                             ; CODE XREF: KiRetireDpcList+13↑j</pre></td></tr><tr><td data-num=\"95\"></td><td><pre>.text:0046EFDC                 mov     eax, ds:_PPerfGlobalGroupMask</pre></td></tr><tr><td data-num=\"96\"></td><td><pre>.text:0046EFE1                 cmp     eax, 0</pre></td></tr><tr><td data-num=\"97\"></td><td><pre>.text:0046EFE4                 jz      loc_46EF57      ; 设置 DPC 例程激活</pre></td></tr><tr><td data-num=\"98\"></td><td><pre>.text:0046EFEA                 test    dword ptr [eax+4], 80h</pre></td></tr><tr><td data-num=\"99\"></td><td><pre>.text:0046EFF1                 jz      loc_46EF57      ; 设置 DPC 例程激活</pre></td></tr><tr><td data-num=\"100\"></td><td><pre>.text:0046EFF7                 mov     [esp+14h+var_8], 1</pre></td></tr><tr><td data-num=\"101\"></td><td><pre>.text:0046EFFF                 jmp     loc_46EF57      ; 设置 DPC 例程激活</pre></td></tr><tr><td data-num=\"102\"></td><td><pre>.text:0046F004 ; ---------------------------------------------------------------------------</pre></td></tr><tr><td data-num=\"103\"></td><td><pre>.text:0046F004</pre></td></tr><tr><td data-num=\"104\"></td><td><pre>.text:0046F004 loc_46F004:                             ; CODE XREF: KiRetireDpcList+5D↑j</pre></td></tr><tr><td data-num=\"105\"></td><td><pre>.text:0046F004                 push    ecx</pre></td></tr><tr><td data-num=\"106\"></td><td><pre>.text:0046F005                 call    ds:_WmiGetCpuClock ; WmipGetSystemTime ()</pre></td></tr><tr><td data-num=\"107\"></td><td><pre>.text:0046F00B                 pop     ecx</pre></td></tr><tr><td data-num=\"108\"></td><td><pre>.text:0046F00C                 mov     [esp+24h+var_14], eax</pre></td></tr><tr><td data-num=\"109\"></td><td><pre>.text:0046F010                 mov     [esp+24h+var_10], edx</pre></td></tr><tr><td data-num=\"110\"></td><td><pre>.text:0046F014                 mov     edx, [esp+24h+var_24]</pre></td></tr><tr><td data-num=\"111\"></td><td><pre>.text:0046F017                 mov     [esp+24h+var_C], ecx</pre></td></tr><tr><td data-num=\"112\"></td><td><pre>.text:0046F01B                 jmp     short loc_46EF9D</pre></td></tr><tr><td data-num=\"113\"></td><td><pre>.text:0046F01D ; ---------------------------------------------------------------------------</pre></td></tr><tr><td data-num=\"114\"></td><td><pre>.text:0046F01D</pre></td></tr><tr><td data-num=\"115\"></td><td><pre>.text:0046F01D loc_46F01D:                             ; CODE XREF: KiRetireDpcList+66↑j</pre></td></tr><tr><td data-num=\"116\"></td><td><pre>.text:0046F01D                 mov     eax, [esp+14h+var_14]</pre></td></tr><tr><td data-num=\"117\"></td><td><pre>.text:0046F020                 mov     edx, [esp+14h+var_10]</pre></td></tr><tr><td data-num=\"118\"></td><td><pre>.text:0046F024                 push    edx</pre></td></tr><tr><td data-num=\"119\"></td><td><pre>.text:0046F025                 push    eax</pre></td></tr><tr><td data-num=\"120\"></td><td><pre>.text:0046F026                 mov     ecx, [esp+1Ch+var_C]</pre></td></tr><tr><td data-num=\"121\"></td><td><pre>.text:0046F02A                 call    @PerfInfoLogDpc@12 ; PerfInfoLogDpc (x,x,x)</pre></td></tr><tr><td data-num=\"122\"></td><td><pre>.text:0046F02F                 jmp     loc_46EFA6</pre></td></tr><tr><td data-num=\"123\"></td><td><pre>.text:0046F02F KiRetireDpcList endp</pre></td></tr><tr><td data-num=\"124\"></td><td><pre>.text:0046F02F</pre></td></tr><tr><td data-num=\"125\"></td><td><pre>.text:0046F034</pre></td></tr><tr><td data-num=\"126\"></td><td><pre>.text:0046F034 ; &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; S U B R O U T I N E &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</pre></td></tr></table></figure><p>可以参考以下代码：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>VOID</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">KiRetireDpcList</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    PKPRCB Prcb</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">/*++</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>Routine Description:</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    This function processes the DPC list for the specified processor.</pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    N.B. This function is entered with interrupts disabled and exits with</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>         interrupts disabled.</pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>Arguments:</pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    Prcb - Supplies the address of the processor block.</pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>Return Value:</pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    None.</pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>--*/</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    PKDPC Dpc<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    PVOID DeferredContext<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    PKDEFERRED_ROUTINE DeferredRoutine<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    PLIST_ENTRY Entry<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    PLIST_ENTRY ListHead<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    PVOID SystemArgument1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    PVOID SystemArgument2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    ULONG TimerHand<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token comment\">// Loop processing DPC list entries until the specified DPC list is empty.</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token comment\">// N.B. This following code appears to have a redundant loop, but it does</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token comment\">//      not. The point of this code is to avoid as many dispatch interrupts</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token comment\">//      as possible.</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    ListHead <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>Prcb<span class=\"token operator\">-></span>DpcListHead<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token keyword\">do</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        Prcb<span class=\"token operator\">-></span>DpcRoutineActive <span class=\"token operator\">=</span> TRUE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token comment\">// If the timer hand value is nonzero, then process expired timers.</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>TimerHand <span class=\"token operator\">=</span> Prcb<span class=\"token operator\">-></span>TimerHand<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>            Prcb<span class=\"token operator\">-></span>TimerHand <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>            <span class=\"token function\">_enable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>            <span class=\"token function\">KiTimerExpiration</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token function\">UlongToHandle</span><span class=\"token punctuation\">(</span>TimerHand <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>            <span class=\"token function\">_disable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        <span class=\"token comment\">// If the DPC list is not empty, then process the DPC list.</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Prcb<span class=\"token operator\">-></span>DpcQueueDepth <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>            <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>            <span class=\"token comment\">// Acquire the DPC lock for the current processor and check if</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>            <span class=\"token comment\">// the DPC list is empty. If the DPC list is not empty, then</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>            <span class=\"token comment\">// remove the first entry from the DPC list, capture the DPC</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>            <span class=\"token comment\">// parameters, set the DPC inserted state false, decrement the</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>            <span class=\"token comment\">// DPC queue depth, release the DPC lock, enable interrupts, and</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>            <span class=\"token comment\">// call the specified DPC routine. Otherwise, release the DPC</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>            <span class=\"token comment\">// lock and enable interrupts.</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>            <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>            <span class=\"token keyword\">do</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>                <span class=\"token function\">KeAcquireSpinLockAtDpcLevel</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>Prcb<span class=\"token operator\">-></span>DpcLock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>                Entry <span class=\"token operator\">=</span> Prcb<span class=\"token operator\">-></span>DpcListHead<span class=\"token punctuation\">.</span>Flink<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Entry <span class=\"token operator\">!=</span> ListHead<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>                    <span class=\"token function\">RemoveEntryList</span><span class=\"token punctuation\">(</span>Entry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>                    Dpc <span class=\"token operator\">=</span> <span class=\"token function\">CONTAINING_RECORD</span><span class=\"token punctuation\">(</span>Entry<span class=\"token punctuation\">,</span> KDPC<span class=\"token punctuation\">,</span> DpcListEntry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>                    DeferredRoutine <span class=\"token operator\">=</span> Dpc<span class=\"token operator\">-></span>DeferredRoutine<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>                    DeferredContext <span class=\"token operator\">=</span> Dpc<span class=\"token operator\">-></span>DeferredContext<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>                    SystemArgument1 <span class=\"token operator\">=</span> Dpc<span class=\"token operator\">-></span>SystemArgument1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>                    SystemArgument2 <span class=\"token operator\">=</span> Dpc<span class=\"token operator\">-></span>SystemArgument2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>                    Dpc<span class=\"token operator\">-></span>Lock <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>                    Prcb<span class=\"token operator\">-></span>DpcQueueDepth <span class=\"token operator\">-=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>                    <span class=\"token function\">KeReleaseSpinLockFromDpcLevel</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>Prcb<span class=\"token operator\">-></span>DpcLock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>                    <span class=\"token function\">_enable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>                    <span class=\"token punctuation\">(</span>DeferredRoutine<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>Dpc<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>                                      DeferredContext<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>                                      SystemArgument1<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>                                      SystemArgument2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>                    <span class=\"token function\">ASSERT</span><span class=\"token punctuation\">(</span><span class=\"token function\">KeGetCurrentIrql</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> DISPATCH_LEVEL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>                    <span class=\"token function\">_disable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>                    <span class=\"token function\">ASSERT</span><span class=\"token punctuation\">(</span>Prcb<span class=\"token operator\">-></span>DpcQueueDepth <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>                    <span class=\"token function\">KeReleaseSpinLockFromDpcLevel</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>Prcb<span class=\"token operator\">-></span>DpcLock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>ListHead <span class=\"token operator\">!=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>PLIST_ENTRY <span class=\"token keyword\">volatile</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>ListHead<span class=\"token operator\">-></span>Flink<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>        Prcb<span class=\"token operator\">-></span>DpcRoutineActive <span class=\"token operator\">=</span> FALSE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>        Prcb<span class=\"token operator\">-></span>DpcInterruptRequested <span class=\"token operator\">=</span> FALSE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>ListHead <span class=\"token operator\">!=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>PLIST_ENTRY <span class=\"token keyword\">volatile</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>ListHead<span class=\"token operator\">-></span>Flink<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h2>\n<p>从上述的逆向分析可以得知，DPC 优先于线程切换，必须得先把 DPC 执行完，才能执行线程。验证了上述概念。</p>\n<h2 id=\"写代码验证dpc\"><a class=\"anchor\" href=\"#写代码验证dpc\">#</a> 写代码验证 DPC</h2>\n<p>代码很简单：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;ntddk.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>KDPC dpc <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>VOID <span class=\"token function\">DriverUnload</span><span class=\"token punctuation\">(</span>PDRIVER_OBJECT pDriver<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是驱动，我卸载了\\t\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>VOID <span class=\"token function\">dpcCall</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token comment\">//_In_ struct _KDPC* Dpc,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t_In_opt_ PVOID DeferredContext<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t_In_opt_ PVOID SystemArgument1<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t_In_opt_ PVOID SystemArgument2</pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Dpc执行了\\t\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>NTSTATUS <span class=\"token function\">DriverEntry</span><span class=\"token punctuation\">(</span>PDRIVER_OBJECT pDriver<span class=\"token punctuation\">,</span> PUNICODE_STRING pRegPath<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\tpDriver<span class=\"token operator\">-></span>DriverUnload <span class=\"token operator\">=</span> DriverUnload<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是驱动,我运行了\\t\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token function\">KeInitializeDpc</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>dpc<span class=\"token punctuation\">,</span> dpcCall<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token function\">KeInsertQueueDpc</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>dpc<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token keyword\">return</span> STATUS_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>截图：</p>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<h1 id=\"reference\"><a class=\"anchor\" href=\"#reference\">#</a> Reference</h1>\n<p>windows 泄露的源码<br />\n《Windows 内核原理与实现》<br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ltcXVlc3Rpb24vYXJ0aWNsZS9kZXRhaWxzLzEyODY2NDE=\">https://blog.csdn.net/imquestion/article/details/1286641</span></p>\n",
            "tags": [
                "延迟过程调用"
            ]
        },
        {
            "id": "https://or0kit.github.io/Bin/Core/WindowsXp/HadleTable/%E5%8F%A5%E6%9F%84%E8%A1%A8/",
            "url": "https://or0kit.github.io/Bin/Core/WindowsXp/HadleTable/%E5%8F%A5%E6%9F%84%E8%A1%A8/",
            "title": "句柄表",
            "date_published": "2022-01-28T13:44:50.000Z",
            "content_html": "<h1 id=\"楔子\"><a class=\"anchor\" href=\"#楔子\">#</a> 楔子</h1>\n<p>句柄表份分为进程句柄表和全局句柄表两种。</p>\n<p>当一个线程使用 OpenProcess 函数去获得另一个进程的句柄时，首先会进入 R0，根据 PID 查找全局句柄表，找到这个进程的结构体对象后，插入到自己的进程句柄表中，然后把这个对象在自己的进程句柄表中的索引作为返回值返回。</p>\n<h2 id=\"句柄的由来\"><a class=\"anchor\" href=\"#句柄的由来\">#</a> 句柄的由来</h2>\n<p>出自《Windows 内核原理与实现》129 页。</p>\n<p>Windows 执行体实现了一套对象机制来管理各种资源或实体。每种对象都有一个类型对象，类型对象定义了该类对象的一些特性和方法。对象管理器也定义了一个全局名字空间，提供了根据名称来解析对象的同一机制。类型对象通过提供自定义的 Parse 方法可以扩展此名字空间。对象管理器中的对象是执行体对象，它位于系统空间，考虑到安全性，在进程空间不能直接通过地址来引用它们。</p>\n<p>在 Windows 系统中需要使用到句柄 (handle) 来管理进程中的对象引用。当一个进程利用名称来创建或打开一个对象时，将获得一个句柄，该句柄指向所创建或打开的对象。以后，该进程无须使用名称来引用对象，使用此句柄即可访问。这样即保证了安全性，也提高了引用对象的效率。当两个应用程序以共享方式打开了同一个文件，那么，它们将分别得到各种的句柄，且都可以通过句柄操作该文件。尽管两个应用程序得到的句柄的值并不相同，但是这两个句柄所指的文件却是同一个。因此，句柄只是一个对象引用，同一个对象在不同的环境下可能有不同的引用（句柄）值。</p>\n<p>在 Windows 系统中，句柄是进程范围内的对象引用，换句话说，句柄仅在一个进程范围内才有效。一个进程的句柄传递给另一个进程后，句柄值将不再有效。</p>\n<h2 id=\"进程句柄表\"><a class=\"anchor\" href=\"#进程句柄表\">#</a> 进程句柄表</h2>\n<h3 id=\"什么是句柄内核对象\"><a class=\"anchor\" href=\"#什么是句柄内核对象\">#</a> 什么是句柄（内核对象）</h3>\n<p>当一个进程创建或打开一个内核对象时，将获得一个而句柄，通过这个句柄可以访问内核对象。</p>\n<p>如：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>HANDLE g_hMutex <span class=\"token operator\">=</span> <span class=\"token operator\">::</span><span class=\"token function\">CreateMutex</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span>FALSE<span class=\"token punctuation\">,</span> <span class=\"token string\">\"XYZ\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>HANDLE g_hMutex <span class=\"token operator\">=</span> <span class=\"token operator\">::</span><span class=\"token function\">OpenMutex</span><span class=\"token punctuation\">(</span>MUTEX_ALL_ACCESS<span class=\"token punctuation\">,</span>FALSE<span class=\"token punctuation\">,</span> <span class=\"token string\">\"XYZ\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>HANDLE g_hEvent <span class=\"token operator\">=</span> <span class=\"token operator\">::</span><span class=\"token function\">CreateEvent</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> TRUE<span class=\"token punctuation\">,</span> FALSE<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>HANDLE g_hThread <span class=\"token operator\">=</span> <span class=\"token operator\">::</span><span class=\"token function\">CreateThread</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> Proc<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这些内核对象是指创建时需要指定  <code>LPSECURITY_ATTRIBUTES</code>  参数的对象。</p>\n<p><strong>注意：</strong></p>\n<ol>\n<li>窗口、字体、笔刷等，是用户句柄，并不是内核句柄，与本章所学句柄不一样。</li>\n<li>创建句柄不等同于打开句柄，当创建的时候，操作系统会在零环为内核对象分配一个结构体（例如 CreateEvent），如果自己或他人打开了这个内核对象（例如 OpenProcess），那么将不会再次为这个内核对象分配一个结构体，而是返回一个句柄的索引值。</li>\n<li>若同一个内核对象被引用了 100 次，那么在句柄表中就会存储 100 个内核对象的地址。</li>\n</ol>\n<h3 id=\"为什么要有句柄\"><a class=\"anchor\" href=\"#为什么要有句柄\">#</a> 为什么要有句柄</h3>\n<p>句柄存在的目的是为了避免在应用层直接修改内核对象。</p>\n<p>如果直接返回内核对象的地址，那么就意味着我们可以在应用层修改这个地址，在内核层面一旦出错就会蓝屏，很不安全，所以微软设计了句柄（HANDLE）给 3 环使用。</p>\n<p>Windows 的设计句柄表的理念：</p>\n<ol>\n<li>隐藏内核对象指针</li>\n<li>句柄就是索引</li>\n</ol>\n<h3 id=\"句柄表在哪\"><a class=\"anchor\" href=\"#句柄表在哪\">#</a> 句柄表在哪</h3>\n<p>在当前进程的 EPROCESS 结构体的 0xc4 的位置</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kd&gt; dt _EPROCESS\t\t\t\t\t\t</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   +0x0c4 ObjectTable      : _HANDLE_TABLE\t\t</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>...</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>kd&gt; dt _HANDLE_TABLE </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>nt!_HANDLE_TABLE\t\t\t\t</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   +0x000 TableCode  &#x2F;&#x2F;   句柄表</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   +0x004 QuotaProcess</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   +0x008 UniqueProcessId</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   +0x00c HandleTableLock</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   +0x01c HandleTableList\t\t</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   ...</pre></td></tr></table></figure><p>下面详细介绍句柄表的结构。</p>\n<h3 id=\"句柄表的结构\"><a class=\"anchor\" href=\"#句柄表的结构\">#</a> 句柄表的结构</h3>\n<p>句柄表是一个多层结构。<br />\n <code>EPROCESS</code>  数据结构的  <code>ObjectTable</code>  域指向进程的句柄表。一个进程的句柄表包含了所有已被该进程打开的那些对象的指针。</p>\n<p><code>ObjectTable</code>  的类型为  <code>_HANDLE_TABLE</code> ，每个句柄项的而结构为  <code>HANDLE_TABLE_ENTRY</code> 。<br />\n <code>HANDLE_TABLE_ENTRY</code>  的大小为 8B，而 Windows 执行体在分配句柄表内存时按页面（4KB 大小）来申请内存。因此，执行体每申请一个新的页面来存放句柄项，则句柄表的容量增加 512。</p>\n<p>下面看一下  <code>_HANDLE_TABLE</code>  结构体，这是《Windows 内核原理与实现》一书中的，也可以参见 WRK 源码的英文介绍。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_HANDLE_TABLE</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   ULONG_PTR TableCode<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 指向句柄表的存储结构</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_EPROCESS</span> <span class=\"token operator\">*</span>QuotaProcess<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 句柄表的内存资源记录在此进程中</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   HANDLE UniqueProcessId<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 创建进程的 ID，用于回调函数</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">HANDLE_TABLE_LOCKS</span> <span class=\"token expression\"><span class=\"token number\">4</span></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   EX_PUSH_LOCK HandleTableLock<span class=\"token punctuation\">[</span>HANDLE_TABLE_LOCKS<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 句柄表锁，仅在句柄表扩展时使用 </span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   LIST_ENTRY HandleTableList<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 所有的句柄表形成一个链表</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                               <span class=\"token comment\">// 链表头为全局变量 HandleTableListHead  </span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   EX_PUSH_LOCK HandleContentionEvent<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 若在反问句柄时发生竞争，则在此推锁上等待</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   PHANDLE_TRACE_DEBUG_INFO DebugInfo<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 调试信息，仅当调试句柄时才有意义</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>   LONG ExtraInfoPages<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 审计信息所</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>   ULONG FirstFree<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 空闲链表表头的句柄索引</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>   ULONG LastFree<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 最近被释放的句柄索引，用于 FIFO 类型空闲链表</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>   ULONG NextHandleNeedingPool<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 下一次句柄表扩展的起始句柄索引</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>   LONG HandleCount<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 正在使用的句柄表项的数量</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>   <span class=\"token keyword\">union</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>      ULONG Flags<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 标志域</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>      BOOLEAN StrictFIFO <span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 是否使用 FIFO 风格的重用，即先释放先重用</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token punctuation\">&#125;</span> HANDLE_TABLE<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>PHANDLE_TABLE<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>HADNLE_TEBLE 中的 TableCode 域是一个指针，指向句柄表的最高层表项页面，它的低 2 位的值代表了当前句柄表的层数。<br />\n句柄表只有一层，该进程句柄表组多只能容纳 512 个句柄；<br />\n句柄表有两层，该进程句柄表组多只能容纳 512*1024 个句柄；<br />\n句柄表有三层，该进程句柄表组多只能容纳 512*1024*1024 个句柄；<br />\n但 Windows 执行体限定每个进程的句柄数不得超过 2 的 24 次方 也就是 16777216 个。</p>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<p><code>TableCode</code>  指向句柄表，但每个<strong>句柄表项</strong>是有结构的，下面我们来看看它的结构：</p>\n<p><img data-src=\"image003.png\" alt=\"\" /></p>\n<p>①：这一块共计两个字节，高位字节是给 SetHandleInformation 这个函数用的，比如写成如下形式，那么这个位置将被写入 0x02：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">SetHandleInformation</span><span class=\"token punctuation\">(</span>Handle<span class=\"token punctuation\">,</span>HANDLE_FLAG_PROTECT_FROM_CLOSE<span class=\"token punctuation\">,</span>HANDLE_FLAG_PROTECT_FROM_CLOSE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><code>HANDLE_FLAG_PROTECT_FROM_CLOSE</code>  宏的值为  <code>0x00000002</code>  ，取最低字节，最终 ① 这块是  <code>0x0200</code>  。<br />\n②：这块是访问掩码，是给  <code>OpenProcess</code>  这个函数用的，具体的存的值就是这个函数的第一个参数的值。<br />\n③ 和 ④ 这两个块共计四个字节，其中  <code>bit0-bit2</code>  存的是这个句柄的属性，其中  <code>bit2</code>  和  <code>bit0</code>  默认为  <code>0</code>  和  <code>1</code> ;  <code>bit1</code>  表示的函数是该句柄是否可继承，  <code>OpenProcess</code>  的第二个参数与  <code>bit1</code>  有关，31-3 位加上第三位清零存储的是内核对象的地址。低 3 位是属性，2 位默认是 0；1 位表示该句柄是否可继承；0 位默认为 1。</p>\n<div class=\"note warning\">\n<p>上述句柄的结构没有官方公开化文档，是经过逆向分析得到，可以根据自己的需要进行逆向分析。</p>\n</div>\n<p>执行体在创建进程是，首先为新进程分配一个单层句柄表。句柄表的创建工作是通过调用  <code>ExCreateHandleTable</code>  函数来完成的，该函数调用  <code>ExpAllocateHanleTable</code>  来构造出事的句柄表。随着进程中句柄数量的增加，单层句柄表被扩展为二层句柄表，再进一步被扩展为三层句柄表。句柄表的扩展时由函数  <code>ExpAllocateHandleTableEntrySlow</code>  来实现的。</p>\n<div class=\"note info\">\n<p>在句柄表  <code>HANDLE_TABLE</code>  结构中，  <code>FirstFree</code>  域记录了当前句柄表中的空闲句柄链，这是一个单链表，但并非通过指针链接起来，而是用句柄索引值来链接。句柄索引值按  <code>HANDLE_VALUE_INC</code>  逐个递增，这还是一个宏定义，其值为 4。</p>\n<p><code>FirstFree</code>  域指示了链表头的索引值，  <code>HANDLE_TABLE_ENTRY</code>  结构中的  <code>NextFreeTableEntry</code>  成员等于下一个空闲句柄的句柄索引值。因此当进程在执行过程中需要创建新的句柄时，执行体可以直接从空闲句柄链表头得到一个句柄，新的链表头编程原来链表头的  <code>NextFreeTableEntry</code> ，参见  <code>ExpAllocateHandleTableEntry</code>  函数的代码；而当释放句柄时，将待释放的句柄索引赋给  <code>FristFree</code> ，且该句柄项的  <code>NextFreeTableEntry</code>  赋为原来的  <code>FirstFree</code>  参见  <code>ExpFreeHandleTableEntry</code>  函数的代码。</p>\n<p>另外，  <code>HANDLE_TABLE</code>  结构的  <code>NextHandleNeedingPool</code>  域记录了下一次句柄表扩展的其实句柄索引，相当于当前句柄表中所有已分配页面都满了以后下一个页面的起始句柄索引。</p>\n</div>\n<p>理解了 Windows 进程句柄表的结构以后，我们看一下句柄表项的内容和句柄本身。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_HANDLE_TABLE_ENTRY</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">//  The pointer to the object overloaded with three ob attributes bits in</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">//  the lower order and the high bit to denote locked or unlocked entries</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">union</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        PVOID Object<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 指向句柄所代表的的对象</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        ULONG ObAttributes<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 最低三位有特别含义</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        PHANDLE_TABLE_ENTRY_INFO InfoTable<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 各个句柄表页面的第一个表项，使用此成员指向一张表</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        ULONG_PTR Value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">//  This field either contains the granted access mask for the handle or an</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token comment\">//  ob variation that also stores the same information.  Or in the case of</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token comment\">//  a free entry the field stores the index for the next free entry in the</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token comment\">//  free list.  This is like a FAT chain, and is used instead of pointers</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token comment\">//  to make table duplication easier, because the entries can just be</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token comment\">//  copied without needing to modify pointers.</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">union</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">union</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            ACCESS_MASK GrantedAccess<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 访问掩码</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                USHORT GrantedAccessIndex<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                USHORT CreatorBackTraceIndex<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        LONG NextFreeTableEntry<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 空闲时表示下一个空闲句柄索引</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token punctuation\">&#125;</span> HANDLE_TABLE_ENTRY<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>PHANDLE_TABLE_ENTRY<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><div class=\"note info\">\n<p>Object 指针所指的就是句柄所代表的内核对象，它的最低 3 位有特殊的含义</p>\n<table>\n<thead>\n<tr>\n<th><strong>位数</strong></th>\n<th><strong>名称</strong></th>\n<th><strong>含义</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>第 0 位</td>\n<td>OBJ_PROTECT_CLOSE</td>\n<td>表示调用者是否允许关闭该句柄</td>\n</tr>\n<tr>\n<td>第 1 位</td>\n<td>OBJ_INHERIT</td>\n<td>指示该进程所创建的子进程是否可以继承该句柄</td>\n</tr>\n<tr>\n<td>第 2 位</td>\n<td>OBJ_AUDIT_OBJECT_CLOSE</td>\n<td>指示关闭该对象时是否产生一个审计事件</td>\n</tr>\n</tbody>\n</table>\n<p>因此，想要获得句柄对象的地址需要将 Object 的低 3 位清 0，但是此时所得到的对象地址指向的是对象头，偏移 0x18 的地址才是对象的真正地址。</p>\n<p>在第二个 union 中，如果句柄表项指向一个有效的对象，那么，  <code>GranteAccess</code>  成员记录了该句柄的访问掩码；如果是一个空闲的句柄表现，那么，  <code>NextFreeTableEntry</code>  成员将加入到句柄表的空闲单链表中。</p>\n</div>\n<h3 id=\"多层句柄表的解析方法\"><a class=\"anchor\" href=\"#多层句柄表的解析方法\">#</a> 多层句柄表的解析方法</h3>\n<p>第一层<br />\n ID /4 *8</p>\n<p>第二层<br />\n ID/4 /512 计算是那个目录<br />\n ID/4%512 *8</p>\n<p>第三层<br />\n ID/4/512/1024<br />\nID/4/512<br />\nID/4%512 *8</p>\n<p>具体要逆向内核函数  <code>ExpLookupHandleTableEntry</code>  。WRK 中有这个函数。</p>\n<h3 id=\"实验观察进程的句柄表\"><a class=\"anchor\" href=\"#实验观察进程的句柄表\">#</a> 实验：观察进程的句柄表</h3>\n<p>我们得到的句柄值是一个索引，它的值除以 4 是句柄表的下标，通过下标能找到存储在句柄表里的句柄表项，每个占 8 字节。应该是微软考虑兼容的问题。</p>\n<details class=\"info\"><summary>写个for循环，连续打开100和1000次某个内核对象（点击展开）</summary><div>\n<p>代码如下：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;Windows.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tDWORD dwPid <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tHANDLE hPro <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tHWND hWnd <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\thWnd <span class=\"token operator\">=</span> <span class=\"token function\">FindWindow</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"计算器\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token function\">GetWindowThreadProcessId</span><span class=\"token punctuation\">(</span>hWnd<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>dwPid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"PID:%d\\n\"</span><span class=\"token punctuation\">,</span> dwPid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\thPro <span class=\"token operator\">=</span> <span class=\"token function\">OpenProcess</span><span class=\"token punctuation\">(</span>PROCESS_ALL_ACCESS<span class=\"token punctuation\">,</span> TRUE<span class=\"token punctuation\">,</span> dwPid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"句柄：%#X\\t\\n\"</span><span class=\"token punctuation\">,</span> hPro<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token function\">Test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>执行结果如下：</p>\n<p><img data-src=\"image002.png\" alt=\"\" /></p>\n</div></details>\n<details class=\"info\"><summary>在Windbg中查看句柄表</summary><div>\n<ol>\n<li>打开一个进程，本次实验就选择计算器了（calc.exe）</li>\n<li>执行上面的代码</li>\n<li>在 WinDbg 中定位句柄表</li>\n</ol>\n<p>首先在 windbg 查看所有进程  <code>!process 0 0</code> ，找到执行上面代码的进程，查看进程的  <code>EPROCESS</code>  结构体的 0xc4 的位置</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kd&gt; dt _EPROCESS 89d2b020</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>nt!_EPROCESS</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   +0x000 Pcb              : _KPROCESS</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   +0x06c ProcessLock      : _EX_PUSH_LOCK</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   +0x070 CreateTime       : _LARGE_INTEGER 0x01d81906&#96;e28e540a</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   +0x078 ExitTime         : _LARGE_INTEGER 0x0</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   +0x080 RundownProtect   : _EX_RUNDOWN_REF</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   +0x084 UniqueProcessId  : 0x0000013c Void</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   +0x088 ActiveProcessLinks : _LIST_ENTRY [0x89e890a8 - 0x89d31ba8]</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   +0x090 QuotaUsage       : [3] 0x618</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   +0x09c QuotaPeak        : [3] 0x808</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   +0x0a8 CommitCharge     : 0x72</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   +0x0ac PeakVirtualSize  : 0xf8f000</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   +0x0b0 VirtualSize      : 0xdf7000</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   +0x0b4 SessionProcessLinks : _LIST_ENTRY [ 0x89e890d4 - 0x89d31bd4 ]</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   +0x0bc DebugPort        : 0x89e8ba88 Void</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   +0x0c0 ExceptionPort    : 0xe15d5aa0 Void</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   +0x0c4 ObjectTable      : 0xe31af420 _HANDLE_TABLE &#x2F;&#x2F; 这里</pre></td></tr></table></figure><p>查看进程的句柄表：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kd&gt; dt _HANDLE_TABLE 0xe31af420</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>ntdll!_HANDLE_TABLE</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    [+0x000] TableCode        : 0xe179b000 [Type: unsigned long] &#x2F;&#x2F; 这个地址便是表示句柄表在哪里</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    [+0x004] QuotaProcess     : 0x89d2b020 [Type: _EPROCESS *]</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    [+0x008] UniqueProcessId  : 0x13c [Type: void *]</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    [+0x00c] HandleTableLock  [Type: _EX_PUSH_LOCK [4]]</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    [+0x01c] HandleTableList  [Type: _LIST_ENTRY]</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    [+0x024] HandleContentionEvent [Type: _EX_PUSH_LOCK]</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    [+0x028] DebugInfo        : 0x0 [Type: _HANDLE_TRACE_DEBUG_INFO *]</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    [+0x02c] ExtraInfoPages   : 0 [Type: long]</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    [+0x030] FirstFree        : 0x638 [Type: unsigned long]</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    [+0x034] LastFree         : 0x0 [Type: unsigned long]</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    [+0x038] NextHandleNeedingPool : 0x800 [Type: unsigned long]</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    [+0x03c] HandleCount      : 121 [Type: long]</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    [+0x040] Flags            : 0x0 [Type: unsigned long]</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    [+0x040 ( 0: 0)] StrictFIFO       : 0x0 [Type: unsigned char]</pre></td></tr></table></figure><p>我们以 0x7CC 这个句柄值举例，来弄清楚这个句柄值所代表的的含义。</p>\n<p>首先让这个句柄值除以 4 得到句柄表的下标，再乘以 8（可以直接用句柄值乘以 2）得到相对于句柄表首地址的偏移，这个值加上  <code>TableCode</code>  的值就是这个句柄值在句柄表中所代表的句柄项，剩下的就是分析其结构了。</p>\n<p>我们由上可知  <code>TableCode</code>  的值为： <code>0xe179b000</code> 。</p>\n<p>在 windbg 中查看：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kd&gt; dq 0xe179b000 + 0x7CC * 2</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>e179bf98  001f0fff&#96;89d31b0b 000f01ff&#96;89d71981</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>e179bfa8  000f037f&#96;89f10899 021f0003&#96;89efdf79</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>e179bfb8  020f003f&#96;e3302691 000f037f&#96;89f10899</pre></td></tr></table></figure><p>那么这个  <code>001f0fff`89d31b0b</code>  就是句柄  <code>0x7cc</code>  在句柄表中所对应的句柄项。</p>\n<p>若要根据句柄查找对应的结构体地址，我们还要对  <code>89d31b0b</code>  处理一下，由上面句柄表项的结构，我们知道后三比特位是属性，所以我们把后三比特位清零， <code>b</code>  的二进制为  <code>1011</code>  , 清空后为  <code>1000</code>  既为  <code>8</code> 。</p>\n<p>所以  <code>89d31b0b</code>  处理后为  <code>89d31b08</code>  ，但是，这个地址指向的仍然不是  <code>EPROCESS</code>  ，而是  <code>_OBJECT_HEADER</code>  结构体，这个是每一个内核对象都有的，被称为对象头：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kd&gt; dt _OBJECT_HEADER</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>nt!_OBJECT_HEADER</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   +0x000 PointerCount     : Int4B</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   +0x004 HandleCount      : Int4B</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   +0x004 NextToFree       : Ptr32 Void</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   +0x008 Type             : Ptr32 _OBJECT_TYPE</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   +0x00c NameInfoOffset   : UChar</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   +0x00d HandleInfoOffset : UChar</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   +0x00e QuotaInfoOffset  : UChar</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   +0x00f Flags            : UChar</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   +0x010 ObjectCreateInfo : Ptr32 _OBJECT_CREATE_INFORMATION</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   +0x010 QuotaBlockCharged : Ptr32 Void</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   +0x014 SecurityDescriptor : Ptr32 Void</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   +0x018 Body             : _QUAD</pre></td></tr></table></figure><p>而  <code>89d31b08</code>  指向的是一个完整的内核结构，而一个完整的内核结构一定是以  <code>_OBJECT_HEADER</code>  开头的。不管是  <code>EPROCESS</code>  还是  <code>ETHREAD</code>  结构体，都是在  <code>_OBJECT_HEADER</code>  的  <code> +0x018 Body</code>  位置开始的。所以  <code>89d31b08</code>  加上 0x18 才是计算器的  <code>EPROCESS</code>  结构体。</p>\n<p>在 windbg 中查看：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kd&gt; dt _Eprocess 89d31b08 +0x18</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>nt!_EPROCESS</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   +0x000 Pcb              : _KPROCESS</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   +0x06c ProcessLock      : _EX_PUSH_LOCK</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   ……</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   ……</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   ……</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   ……</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   ……</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   +0x174 ImageFileName    : [16]  &quot;calc.exe&quot; &#x2F;&#x2F; 可以确定我们找到了</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   +0x184 JobLinks         : _LIST_ENTRY [ 0x0 - 0x0 ]</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   +0x18c LockedPagesList  : (null) </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   ……</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   ……</pre></td></tr></table></figure></div></details>\n<details class=\"info\"><summary>总结</summary><div>\n<ol>\n<li>一个进程可以创建、打开很多内核对象，这些内核对象的地址存储在当前进程的句柄表中。我们在应用层得到的句柄值，实际上就是当前进程句柄表的索引。</li>\n<li>同一个内核对象可以被不同的进程所引用，但句柄的值可能一样也可能不一样。</li>\n<li>如果有进程被其他进程打开（使用 OpenProcess）, 那么这个进程的句柄表中就会有痕迹。</li>\n</ol>\n</div></details>\n<h3 id=\"作业\"><a class=\"anchor\" href=\"#作业\">#</a> 作业</h3>\n<details class=\"info\"><summary>遍历（解析）某个进程的句柄表</summary><div>\n<p>代码如下：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;ntddk.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_HANDLE_TABLE_ENTRY_INFO</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token comment\">//  The following field contains the audit mask for the handle if one</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token comment\">//  exists.  The purpose of the audit mask is to record all of the accesses</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token comment\">//  that may have been audited when the handle was opened in order to</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token comment\">//  support \"per operation\" based auditing.  It is computed by walking the</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token comment\">//  SACL of the object being opened and keeping a record of all of the audit</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token comment\">//  ACEs that apply to the open operation going on.  Each set bit corresponds</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token comment\">//  to an access that would be audited.  As each operation takes place, its</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token comment\">//  corresponding access bit is removed from this mask.</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\tACCESS_MASK AuditMask<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span> HANDLE_TABLE_ENTRY_INFO<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span> PHANDLE_TABLE_ENTRY_INFO<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_HANDLE_TABLE_ENTRY</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token comment\">//  The pointer to the object overloaded with three ob attributes bits in</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token comment\">//  the lower order and the high bit to denote locked or unlocked entries</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token keyword\">union</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\tPVOID Object<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 指向句柄所代表的的对象</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\tULONG ObAttributes<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 最低三位有特别含义</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\tPHANDLE_TABLE_ENTRY_INFO InfoTable<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 各个句柄表页面的第一个表项，使用此成员指向一张表</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\tULONG_PTR Value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t<span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t<span class=\"token comment\">//  This field either contains the granted access mask for the handle or an</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t<span class=\"token comment\">//  ob variation that also stores the same information.  Or in the case of</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t<span class=\"token comment\">//  a free entry the field stores the index for the next free entry in the</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t<span class=\"token comment\">//  free list.  This is like a FAT chain, and is used instead of pointers</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t<span class=\"token comment\">//  to make table duplication easier, because the entries can just be</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t<span class=\"token comment\">//  copied without needing to modify pointers.</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t<span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t<span class=\"token keyword\">union</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t\t<span class=\"token keyword\">union</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t\t\tACCESS_MASK GrantedAccess<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 访问掩码</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t\t\t<span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t\t\t\tUSHORT GrantedAccessIndex<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t\t\t\tUSHORT CreatorBackTraceIndex<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t\tLONG NextFreeTableEntry<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 空闲时表示下一个空闲句柄索引</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre></pre></td></tr><tr><td data-num=\"65\"></td><td><pre><span class=\"token punctuation\">&#125;</span> HANDLE_TABLE_ENTRY<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span> PHANDLE_TABLE_ENTRY<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre></pre></td></tr><tr><td data-num=\"67\"></td><td><pre><span class=\"token comment\">// 从 WRK 源码中复制的宏定义</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">TABLE_PAGE_SIZE</span> <span class=\"token expression\">PAGE_SIZE</span></span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">LOWLEVEL_COUNT</span> <span class=\"token expression\"><span class=\"token punctuation\">(</span>TABLE_PAGE_SIZE <span class=\"token operator\">/</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>HANDLE_TABLE_ENTRY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MIDLEVEL_COUNT</span> <span class=\"token expression\"><span class=\"token punctuation\">(</span>PAGE_SIZE <span class=\"token operator\">/</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>PHANDLE_TABLE_ENTRY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">LOWLEVEL_THRESHOLD</span> <span class=\"token expression\">LOWLEVEL_COUNT</span></span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MIDLEVEL_THRESHOLD</span> <span class=\"token expression\"><span class=\"token punctuation\">(</span>MIDLEVEL_COUNT <span class=\"token operator\">*</span> LOWLEVEL_COUNT<span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>VOID <span class=\"token function\">DriverUnload</span><span class=\"token punctuation\">(</span>PDRIVER_OBJECT pDriver<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是驱动，我卸载了\\t\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>VOID <span class=\"token function\">Func</span><span class=\"token punctuation\">(</span>PUCHAR pName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>\t<span class=\"token comment\">//VOID Func(ULONG uPid) &#123;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>\tULONG Pro<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>\t__asm <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>\t\tmov eax<span class=\"token punctuation\">,</span> fs<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0x124</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>\t\tmov eax<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>eax <span class=\"token operator\">+</span> <span class=\"token number\">0x44</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>\t\tmov Pro<span class=\"token punctuation\">,</span> eax<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>\t<span class=\"token comment\">// 进程结构体 EPROCESS +0x88 的位置是一个链接所有进程的双向链表</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>\tPLIST_ENTRY pListProcess <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PLIST_ENTRY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>Pro <span class=\"token operator\">+</span> <span class=\"token number\">0x88</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>\t<span class=\"token comment\">// 遍历进程</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>pListProcess<span class=\"token operator\">-></span>Flink <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span>PLIST_ENTRY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>Pro <span class=\"token operator\">+</span> <span class=\"token number\">0x88</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>\t\t<span class=\"token comment\">//EPROCESS 结构体</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>\t\tULONG NextProcess <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ULONG<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>pListProcess<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">0x88</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">strcmp</span><span class=\"token punctuation\">(</span>pName<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>PUCHAR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>NextProcess <span class=\"token operator\">+</span> <span class=\"token number\">0x174</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>\t\t\t<span class=\"token comment\">//if (uPid == *(PULONG)(NextProcess + 0x84))</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>\t\t\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Eprocess:%#X\\t\\n\"</span><span class=\"token punctuation\">,</span> NextProcess<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>\t\t\t<span class=\"token comment\">// 遍历句柄表</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>\t\t\t<span class=\"token comment\">// 取进程 0xc4 的地址</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>\t\t\tPULONG ObjectTable <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PULONG<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>PULONG<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>NextProcess <span class=\"token operator\">+</span> <span class=\"token number\">0xC4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>\t\t\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ObjectTable:%#X\\t\\n\"</span><span class=\"token punctuation\">,</span> ObjectTable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>\t\t\tPULONG TableCode <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PULONG<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>ObjectTable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>\t\t\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"TableCode:%#X\\t\\n\"</span><span class=\"token punctuation\">,</span> TableCode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>\t\t\t<span class=\"token comment\">// 判断有进程句柄表的层数</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>\t\t\t<span class=\"token comment\">// 取最后两 bit 位</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>\t\t\t<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>TableCode <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>\t\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">0</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>            PHANDLE_TABLE_ENTRY pTableCode <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PHANDLE_TABLE_ENTRY<span class=\"token punctuation\">)</span>TableCode<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>            <span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pTableCode:%#X\\t\\n\"</span><span class=\"token punctuation\">,</span> pTableCode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>\t\t\t\t<span class=\"token comment\">// 开始遍历句柄表，大小时一个页</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">size_t</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> LOWLEVEL_THRESHOLD <span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>\t\t\t\t\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[*]>>-----【第%d项】-----&lt;&lt;[*]\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>\t\t\t\t\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Object:%#010x\\t\\n\"</span><span class=\"token punctuation\">,</span> pTableCode<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>Object<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>\t\t\t\t\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ObAttributes:%#010x\\t\\n\"</span><span class=\"token punctuation\">,</span> pTableCode<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>ObAttributes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>\t\t\t\t\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"InfoTable:%#010x\\t\\n\"</span><span class=\"token punctuation\">,</span> pTableCode<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>InfoTable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>\t\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pTableCode<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>InfoTable <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>\t\t\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>\t\t\t\t\t\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"InfoTable->AuditMask:%#010x\\t\\n\"</span><span class=\"token punctuation\">,</span> pTableCode<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>InfoTable<span class=\"token operator\">-></span>AuditMask<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>\t\t\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>\t\t\t\t\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Value:%#010x\\t\\n\"</span><span class=\"token punctuation\">,</span> pTableCode<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>\t\t\t\t\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GrantedAccess:%#010x\\t\\n\"</span><span class=\"token punctuation\">,</span> pTableCode<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>GrantedAccess<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>\t\t\t\t\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GrantedAccessIndex:%#010x\\t\\n\"</span><span class=\"token punctuation\">,</span> pTableCode<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>GrantedAccessIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>\t\t\t\t\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"CreatorBackTraceIndex:%#010x\\t\\n\"</span><span class=\"token punctuation\">,</span> pTableCode<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>CreatorBackTraceIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>\t\t\t\t\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"NextFreeTableEntry:%#010x\\t\\n\"</span><span class=\"token punctuation\">,</span> pTableCode<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>NextFreeTableEntry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>\t\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>\t\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">2</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>\t\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">3</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre>\t\t\t<span class=\"token keyword\">default</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>\t\t\t\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*HandleTable &amp; 0x3 = %d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>TableCode <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre></pre></td></tr><tr><td data-num=\"151\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre>\t\tpListProcess <span class=\"token operator\">=</span> pListProcess<span class=\"token operator\">-></span>Flink<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"153\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"154\"></td><td><pre></pre></td></tr><tr><td data-num=\"155\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"156\"></td><td><pre></pre></td></tr><tr><td data-num=\"157\"></td><td><pre>NTSTATUS <span class=\"token function\">DriverEntry</span><span class=\"token punctuation\">(</span>PDRIVER_OBJECT pDriver<span class=\"token punctuation\">,</span> PUNICODE_STRING pRegPath<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"158\"></td><td><pre>\tpDriver<span class=\"token operator\">-></span>DriverUnload <span class=\"token operator\">=</span> DriverUnload<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"159\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是驱动,我运行了\\t\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"160\"></td><td><pre>\t<span class=\"token comment\">// 遍历所有进程，遍历该进程的句柄表</span></pre></td></tr><tr><td data-num=\"161\"></td><td><pre>\t<span class=\"token function\">Func</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"calc.exe\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"162\"></td><td><pre>\t<span class=\"token keyword\">return</span> STATUS_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"163\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>仅仅遍历了层数为 1 的句柄表。也可以遍历的更详细，遍历出每个句柄的类型。</p>\n<p><img data-src=\"image005.png\" alt=\"\" /></p>\n</div></details>\n<details class=\"info\"><summary>实现用句柄表反调试</summary><div>\n<p>思路：遍历所有其他进程句柄表，看哪个进程的句柄表中保护自己的进程，如果有，说明正在被调试。</p>\n<p>用一个驱动不停地遍历进程链表，然后遍历进程的句柄表，如果发现句柄表项和游戏 EPROCESS 相等，就意味着被 OpenProcess 了，就认为是被调试了。</p>\n<p>代码：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>暂时pass</pre></td></tr></table></figure></div></details>\n<h2 id=\"全局句柄表\"><a class=\"anchor\" href=\"#全局句柄表\">#</a> 全局句柄表</h2>\n<p>在进程中可以创建、打开很多内核对象，这些内核对象的地址都存储在当前进程的句柄表中。我们在应用层得到的句柄实际上就是句柄表的索引。进程的句柄表是私有的，每个进程都有一个自己的句柄表。除此之外，系统还有一个全局句柄表，其导出变量是： <code>PspCidTable</code></p>\n<p>所有的进程和线程无论无论是否打开，都在这个表中。<br />\n每个进程和线程都有一个唯一的编号： <code>PID</code>  和  <code>TID</code> ，这两个值其实就是全局句柄表中的索引，统称  <code>CID</code> 。进程和线程的查询，主要是以下三个函数，按照给定的  <code>PID</code>  或  <code>TID</code>  从  <code>PspCidTable</code>  从查找相应的进线程对象：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">PsLookupProcessThreadByCid</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">PsLookupProcessByProcessId</span><span class=\"token punctuation\">(</span>HANDLE ProcessId<span class=\"token punctuation\">,</span> PEPROCESS <span class=\"token operator\">*</span>Process<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">PsLookupThreadByThreadId</span><span class=\"token punctuation\">(</span>HANDLE ThreadId<span class=\"token punctuation\">,</span> PETHREAD <span class=\"token operator\">*</span>Thread<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>全局句柄表的结构如下：</p>\n<p><img data-src=\"image004.png\" alt=\"\" /></p>\n<h3 id=\"观察全局句柄表\"><a class=\"anchor\" href=\"#观察全局句柄表\">#</a> 观察全局句柄表</h3>\n<p>在 Windbg 中查看：通过 PID 的值和  <code>PspCidTable</code>  找到内核对象。</p>\n<p>随便打开一个进程，查看其 PID，我打开的计算器的 PID 为 1212，转换为 16 进制为 0x4BC。</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kd&gt; dd PspCidTable</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>805649c0  e1003c58 00000002 00000000 00000000</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>805649d0  00000000 00000000 00000000 00000000</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>805649e0  00000000 00000000 00000000 00000000</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>805649f0  00000000 00000000 00000000 00000000</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>80564a00  00000000 00000000 00000000 00000000</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>80564a10  00000000 00000000 00000000 00000000</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>80564a20  00000000 00000000 00000000 00000000</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>80564a30  00000000 00000000 00000000 00000000</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>kd&gt; dt e1003c58 _HANDLE_TABLE</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>nt!_HANDLE_TABLE</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   +0x000 TableCode        : 0xe1005000</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   +0x004 QuotaProcess     : (null) </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   +0x008 UniqueProcessId  : (null) </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   +0x00c HandleTableLock  : [4] _EX_PUSH_LOCK</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   +0x01c HandleTableList  : _LIST_ENTRY [ 0xe1003c74 - 0xe1003c74 ]</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   +0x024 HandleContentionEvent : _EX_PUSH_LOCK</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   +0x028 DebugInfo        : (null) </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   +0x02c ExtraInfoPages   : 0n0</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>   +0x030 FirstFree        : 0x39c</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>   +0x034 LastFree         : 0x770</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>   +0x038 NextHandleNeedingPool : 0x800</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>   +0x03c HandleCount      : 0n279</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>   +0x040 Flags            : 1</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>   +0x040 StrictFIFO       : 0y1</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>kd&gt; dq 0xe1005000 + 4BC * 2</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>e1005978  00000000&#96;89ee8021 0000055c&#96;00000000</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>e1005988  000000e8&#96;00000000 00000000&#96;89efe8a9</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>e1005998  00000728&#96;00000000 0000070c&#96;00000000</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>e10059a8  00000000&#96;89d4e6a1 000004a0&#96;00000000</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>e10059b8  00000000&#96;8a05c6a9 00000304&#96;00000000</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>e10059c8  00000000&#96;8a0f1da1 00000000&#96;8a0f16c9</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>e10059d8  00000000&#96;89cd7161 00000000&#96;8a08e661</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>e10059e8  000003f8&#96;00000000 00000000&#96;8a19b021</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>kd&gt; dt _EPROCESS 89ee8020 &#x2F;&#x2F; 去掉低三位的属性</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>nt!_EPROCESS</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>   +0x000 Pcb              : _KPROCESS</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>   ……</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>   ……</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>   +0x174 ImageFileName    : [16]  &quot;calc.exe&quot; &#x2F;&#x2F; 找到了</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>   ……</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>   ……</pre></td></tr></table></figure><h1 id=\"reference\"><a class=\"anchor\" href=\"#reference\">#</a> Reference</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxOTg4NDQ4L2FydGljbGUvZGV0YWlscy8xMDQ5NDUzMTE=\">https://blog.csdn.net/qq_41988448/article/details/104945311</span></p>\n<p>《Windows 内核原理与实现》</p>\n",
            "tags": [
                "进程句柄表",
                "全局句柄表"
            ]
        },
        {
            "id": "https://or0kit.github.io/Bin/Core/WindowsXp/Process-Thread/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B-%E8%BF%9B%E7%A8%8B%E6%8C%82%E9%9D%A0%E5%92%8C%E8%B7%A8%E8%BF%9B%E7%A8%8B%E8%AF%BB%E5%86%99%E5%86%85%E5%AD%98/",
            "url": "https://or0kit.github.io/Bin/Core/WindowsXp/Process-Thread/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B-%E8%BF%9B%E7%A8%8B%E6%8C%82%E9%9D%A0%E5%92%8C%E8%B7%A8%E8%BF%9B%E7%A8%8B%E8%AF%BB%E5%86%99%E5%86%85%E5%AD%98/",
            "title": "进程与线程-进程挂靠和跨进程读写内存",
            "date_published": "2022-01-23T16:55:34.000Z",
            "content_html": "<h1 id=\"楔子\"><a class=\"anchor\" href=\"#楔子\">#</a> 楔子</h1>\n<p>需要有 APC 的基础，学完句柄表和 APC 后再回来分析。</p>\n<p>额外小知识   <code>NUMA</code></p>\n<p>要点回顾：</p>\n<p>一个进程可以包含多个线程</p>\n<p>一个进程至少要有一个线程</p>\n<p>进程为线程提供资源，也就是提供 Cr3 的值，Cr3 中存储的是页目录表基址，Cr3 确定了，线程能访问的内存也就确定了。</p>\n<h1 id=\"进程挂靠\"><a class=\"anchor\" href=\"#进程挂靠\">#</a> 进程挂靠</h1>\n<p>首先要了解以下知识</p>\n<h2 id=\"进程与线程的关系\"><a class=\"anchor\" href=\"#进程与线程的关系\">#</a> 进程与线程的关系</h2>\n<p>线程代码：</p>\n<p>mov eax,dword ptr ds:[0x12345678]</p>\n<p>CPU 如何解析 0x12345678 这个地址呢？</p>\n<ol>\n<li>\n<p>CPU 解析线性地址时要通过页目录表来找对应的物理页，页目录表基址存在<br />\n Cr3 寄存器中。</p>\n</li>\n<li>\n<p>当前的 Cr3 的值来源于当前的进程 (_KPROCESS.DirectoryTableBase (+0x018))。</p>\n</li>\n</ol>\n<h2 id=\"线程与进程的关联\"><a class=\"anchor\" href=\"#线程与进程的关联\">#</a> 线程与进程的关联</h2>\n<p>线程是如何找到进程的呢？线程与进程是如何关联的呢？</p>\n<p>在线程的结构体中：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>+0x034 ApcState</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t\t+0x000 ApcListHead </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   \t\t+0x010 Process </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   \t\t+0x014 KernelApcInProgress</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   \t\t+0x015 KernelApcPending</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   \t\t+0x016 UserApcPending</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t+0x220 ThreadsProcess</pre></td></tr></table></figure><p>有两处与进程相关的成员：  <code>Process</code>  与  <code>ThreadsProcess</code>  ，那么这两个成员与线程有什么关系呢？</p>\n<h2 id=\"0x044负责提供cr3\"><a class=\"anchor\" href=\"#0x044负责提供cr3\">#</a> 0x044 负责提供 Cr3</h2>\n<p>(分析 SwapContext 函数) 线程切换的时候，会比较_KTHREAD 结构体 0x044 处指定的 EPROCESS 是否为同一个，如果不是同一个，会将 0x044 处指定的 EPROCESS 的 DirectoryTableBase 的值取出，赋值给 Cr3。</p>\n<p>所以，线程需要的 Cr3 的值来源于 0x044 处偏移指定的 EPROCESS.</p>\n<p>可以得出以下结论：</p>\n<p>0x220 亲生父母：这个线程谁创建的<br />\n 0x044 养父母：谁在为这个线程提供资源 (也就是提供 Cr3)<br />\n 一般情况下，0x220 与 0x44 指向的是同一个进程</p>\n<p>那么 Cr3 的值可以随便改吗？</p>\n<h2 id=\"修改cr3的值\"><a class=\"anchor\" href=\"#修改cr3的值\">#</a> 修改 Cr3 的值</h2>\n<p>正常情况下，Cr3 的值是由养父母提供的，但 Cr3 的值也可以改成和当前线程毫不相干的其他进程的 DirectoryTableBase。</p>\n<p>线程代码：</p>\n<p>mov cr3,A.DirectoryTableBase<br />\nmov eax,dword ptr ds:[0x12345678]\t\t//A 进程的 0x12345678 内存<br />\n mov cr3,B.DirectoryTableBase<br />\nmov eax,dword ptr ds:[0x12345678]\t\t//B 进程的 0x12345678 内存<br />\n mov cr3,C.DirectoryTableBase<br />\nmov eax,dword ptr ds:[0x12345678]\t\t//C 进程的 0x12345678 内存</p>\n<p>将当前 Cr3 的值改为其他进程，称为 “进程挂靠”。</p>\n<p>那可不可以只修改 Cr3 而不修改养父母？不可以，如果不修改养父母的值，一旦产生线程切换，就会变成自己读自己！</p>\n<p>如果我们自己来写这个代码，在切换 Cr3 后关闭中断，并且不调用会导致线程切换的 API，就可以不用修改养父母的值。</p>\n<h2 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h2>\n<p>正常情况下，当前线程使用的 Cr3 是由其所属进程提供的 (ETHREAD 0x44 偏移处指定的 EPROCESS)，正是因为如此，A 进程中的线程只能访问 A 的内存。</p>\n<p>如果要让 A 进程中的线程能够访问 B 进程的内存，就必须要修改 Cr3 的值为 B 进程的页目录表基址 (B.DirectoryTableBase)，这就是所谓的 “进程挂靠”。</p>\n<h1 id=\"跨进程读写内存\"><a class=\"anchor\" href=\"#跨进程读写内存\">#</a> 跨进程读写内存</h1>\n<p>跨进程的本质是 “进程挂靠”，正常情况下，A 进程的线程只能访问 A 进程的地址空间，如果 A 进程的线程想访问 B 进程的地址空间，就要修改当前的 Cr3 的值为 B 进程的页目录表基值 (KPROCESS.DirectoryTableBase)。<br />\n即： <code>mov cr3,B.DirectoryTableBase</code></p>\n<h2 id=\"跨进程操作\"><a class=\"anchor\" href=\"#跨进程操作\">#</a> 跨进程操作</h2>\n<p>A 进制中的线程代码：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>mov cr3,B.DirectoryTableBase\t\t&#x2F;&#x2F; 切换 Cr3 的值为 B 进程</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>mov eax,dword ptr ds:[0x12345678]\t\t&#x2F;&#x2F; 将进程 B 0x12345678 的值存的 eax 中</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>mov dword ptr ds:[0x00401234],eax\t\t&#x2F;&#x2F; 将数据存储到 0x00401234 中</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>mov cr3,A.DirectoryTableBase\t\t&#x2F;&#x2F; 切换回 Cr3 的值</pre></td></tr></table></figure><p>此时  <code>0x00401234</code>  中的数据还有吗？如何将数据传递给 A 进程的变量呢？</p>\n<h2 id=\"ntreadvirtualmemory-流程解析\"><a class=\"anchor\" href=\"#ntreadvirtualmemory-流程解析\">#</a> NtReadVirtualMemory 流程解析</h2>\n<p>一些关键函数的声明为：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>NTSTATUS</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">NtReadVirtualMemory</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     IN HANDLE ProcessHandle<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 为进程对象提供一个打开的句柄。</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     IN PVOID BaseAddress<span class=\"token punctuation\">,</span><span class=\"token comment\">// 提供要读取的指定进程中的基址。</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     OUT PVOID Buffer<span class=\"token punctuation\">,</span><span class=\"token comment\">// 提供缓冲区的地址，该缓冲区接收来自指定进程地址空间的内容。</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>     IN SIZE_T BufferSize<span class=\"token punctuation\">,</span><span class=\"token comment\">// 提供要从指定进程读取的请求字节数。</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     OUT PSIZE_T NumberOfBytesRead OPTIONAL <span class=\"token comment\">// 接收传输到指定缓冲区的实际字节数。</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>NTSTATUS</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token function\">MmCopyVirtualMemory</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    IN PEPROCESS FromProcess<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    IN CONST VOID <span class=\"token operator\">*</span>FromAddress<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    IN PEPROCESS ToProcess<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    OUT PVOID ToAddress<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    IN SIZE_T BufferSize<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    IN KPROCESSOR_MODE PreviousMode<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    OUT PSIZE_T NumberOfBytesCopied</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>NTSTATUS</pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token function\">MiDoMappedCopy</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>     IN PEPROCESS FromProcess<span class=\"token punctuation\">,</span><span class=\"token comment\">// 为进程对象提供一个打开的句柄。</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>     IN CONST VOID <span class=\"token operator\">*</span>FromAddress<span class=\"token punctuation\">,</span><span class=\"token comment\">// 提供要读取的指定进程中的基址。</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>     IN PEPROCESS ToProcess<span class=\"token punctuation\">,</span><span class=\"token comment\">// 为进程对象提供一个打开的句柄。</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>     OUT PVOID ToAddress<span class=\"token punctuation\">,</span><span class=\"token comment\">// 提供缓冲区的地址，该缓冲区接收来自指定进程地址空间的内容。</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>     IN SIZE_T BufferSize<span class=\"token punctuation\">,</span><span class=\"token comment\">// 提供要从指定进程读取的请求字节数。</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>     IN KPROCESSOR_MODE PreviousMode<span class=\"token punctuation\">,</span><span class=\"token comment\">// 提供以前的处理器模式。</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>     OUT PSIZE_T NumberOfBytesRead<span class=\"token comment\">// 接收传输到指定缓冲区的实际字节数。</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>NTSTATUS</pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token function\">MiDoPoolCopy</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>     IN PEPROCESS FromProcess<span class=\"token punctuation\">,</span><span class=\"token comment\">// 为进程对象提供一个打开的句柄。</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>     IN CONST VOID <span class=\"token operator\">*</span>FromAddress<span class=\"token punctuation\">,</span><span class=\"token comment\">// 提供要读取的指定进程中的基址。</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>     IN PEPROCESS ToProcess<span class=\"token punctuation\">,</span><span class=\"token comment\">// 为进程对象提供一个打开的句柄。</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>     OUT PVOID ToAddress<span class=\"token punctuation\">,</span><span class=\"token comment\">// 提供缓冲区的地址，该缓冲区接收来自指定进程地址空间的内容。</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>     IN SIZE_T BufferSize<span class=\"token punctuation\">,</span><span class=\"token comment\">// 提供要从指定进程读取的请求字节数。</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>     IN KPROCESSOR_MODE PreviousMode<span class=\"token punctuation\">,</span><span class=\"token comment\">// 提供以前的处理器模式。</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>     OUT PSIZE_T NumberOfBytesRead<span class=\"token comment\">// 接收传输到指定缓冲区的实际字节数。</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>     <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token comment\">/*-- 这个函数将一个线程附加到目标进程的地址空间，并返回上一个附加进程前的 APC 状态信息。--*/</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>VOID</pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token function\">KeStackAttachProcess</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    IN PRKPROCESS Process<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    OUT PRKAPC_STATE ApcState</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token comment\">/*-- 这个函数将一个线程从另一个进程的地址空间中分离出来，并恢复之前的连接状态。--*/</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>VOID</pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token function\">KeUnstackDetachProcess</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    IN PRKAPC_STATE ApcState <span class=\"token comment\">// 提供一个指向 APC 状态结构的指针，该结构是由之前对堆栈附加进程的调用返回的。</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"逆向分析-ntreadvirtualmemory\"><a class=\"anchor\" href=\"#逆向分析-ntreadvirtualmemory\">#</a> 逆向分析 NtReadVirtualMemory</h3>\n<details class=\"primary\"><summary>NtReadVirtualMemory 逆向分析  （点击展开）</summary><div>\n<pre><code>; NTSTATUS __stdcall NtReadVirtualMemory(HANDLE ProcessHandle, PVOID BaseAddress, PVOID Buffer, SIZE_T NumberOfBytesToRead, PSIZE_T NumberOfBytesRead)\nPAGE:004DD2F6 _NtReadVirtualMemory@20 proc near       ; DATA XREF: .text:0042D858↑o\nPAGE:004DD2F6\nPAGE:004DD2F6 var_2C          = dword ptr -2Ch\nPAGE:004DD2F6 var_28          = dword ptr -28h\nPAGE:004DD2F6 Object          = dword ptr -24h\nPAGE:004DD2F6 AccessMode      = byte ptr -20h\nPAGE:004DD2F6 var_1C          = dword ptr -1Ch\nPAGE:004DD2F6 ms_exc          = CPPEH_RECORD ptr -18h\nPAGE:004DD2F6 ProcessHandle   = dword ptr  8\nPAGE:004DD2F6 BaseAddress     = dword ptr  0Ch\nPAGE:004DD2F6 Buffer          = dword ptr  10h\nPAGE:004DD2F6 NumberOfBytesToRead= dword ptr  14h\nPAGE:004DD2F6 NumberOfBytesRead= dword ptr  18h\nPAGE:004DD2F6\nPAGE:004DD2F6 ; __unwind &#123; // __SEH_prolog\nPAGE:004DD2F6                 push    1Ch\nPAGE:004DD2F8                 push    offset stru_402EF0\nPAGE:004DD2FD                 call    __SEH_prolog\nPAGE:004DD302                 mov     eax, large fs:124h ; eax = 当前的KTHREAD\nPAGE:004DD308                 mov     edi, eax        ; edi = eax\nPAGE:004DD30A                 mov     al, [edi+_KTHREAD.PreviousMode]\nPAGE:004DD310                 mov     [ebp+AccessMode], al\nPAGE:004DD313                 mov     esi, [ebp+NumberOfBytesToRead]\nPAGE:004DD316                 test    al, al          ; 如果不是内核模式 （KernelMode = 0） 则对参数做一系列的验证。\nPAGE:004DD318                 jz      short loc_4DD380\nPAGE:004DD31A                 mov     eax, [ebp+BaseAddress]\nPAGE:004DD31D                 lea     edx, [eax+esi]\nPAGE:004DD320                 cmp     edx, eax\nPAGE:004DD322                 jb      short loc_4DD379\nPAGE:004DD324                 mov     eax, [ebp+Buffer]\nPAGE:004DD327                 lea     ecx, [eax+esi]\nPAGE:004DD32A                 cmp     ecx, eax\nPAGE:004DD32C                 jb      short loc_4DD379\nPAGE:004DD32E                 mov     eax, _MmHighestUserAddress ; MmHighestUserAddress = 0x7FFEFFFF  最高的用户层地址\nPAGE:004DD333                 cmp     edx, eax\nPAGE:004DD335                 ja      short loc_4DD379\nPAGE:004DD337                 cmp     ecx, eax\nPAGE:004DD339                 ja      short loc_4DD379\nPAGE:004DD33B                 mov     ebx, [ebp+NumberOfBytesRead] ; 判断 NumberOfBytesRead 参数是否存在（是否为NULL）\nPAGE:004DD33B                                         ;\nPAGE:004DD33B                                         ; if(NumberOfBytesRead)（是否为NULL）&#123;\nPAGE:004DD33B                                         ;\nPAGE:004DD33B                                         ; ……………………\nPAGE:004DD33B                                         ; &#125;\nPAGE:004DD33B                                         ; 不为NULL 执行 jz 跳走\nPAGE:004DD33E                 test    ebx, ebx\nPAGE:004DD340                 jz      short loc_4DD383\nPAGE:004DD342                 and     [ebp+ms_exc.registration.TryLevel], 0\nPAGE:004DD346                 mov     eax, _MmUserProbeAddress ; _MmUserProbeAddress = 0x7FFF0000 保护页的起始地址\nPAGE:004DD34B                 cmp     ebx, eax\nPAGE:004DD34D                 jb      short loc_4DD355\nPAGE:004DD34F                 mov     dword ptr [eax], 0\nPAGE:004DD355\nPAGE:004DD355 loc_4DD355:                             ; CODE XREF: NtReadVirtualMemory(x,x,x,x,x)+57↑j\nPAGE:004DD355                 mov     eax, [ebx]\nPAGE:004DD357                 mov     [ebx], eax\nPAGE:004DD359                 or      [ebp+ms_exc.registration.TryLevel], 0FFFFFFFFh\nPAGE:004DD35D                 jmp     short loc_4DD383\nPAGE:004DD35F ; ---------------------------------------------------------------------------\nPAGE:004DD35F\nPAGE:004DD35F loc_4DD35F:                             ; DATA XREF: .text:stru_402EF0↑o\nPAGE:004DD35F                 mov     eax, [ebp+ms_exc.exc_ptr]\nPAGE:004DD362                 mov     eax, [eax]\nPAGE:004DD364                 mov     eax, [eax]\nPAGE:004DD366                 mov     [ebp+var_2C], eax\nPAGE:004DD369                 xor     eax, eax\nPAGE:004DD36B                 inc     eax\nPAGE:004DD36C                 retn\nPAGE:004DD36D ; ---------------------------------------------------------------------------\nPAGE:004DD36D\nPAGE:004DD36D loc_4DD36D:                             ; DATA XREF: .text:stru_402EF0↑o\nPAGE:004DD36D                 mov     esp, [ebp+ms_exc.old_esp]\nPAGE:004DD370                 or      [ebp+ms_exc.registration.TryLevel], 0FFFFFFFFh\nPAGE:004DD374                 mov     eax, [ebp+var_2C]\nPAGE:004DD377                 jmp     short loc_4DD3F2\nPAGE:004DD379 ; ---------------------------------------------------------------------------\nPAGE:004DD379\nPAGE:004DD379 loc_4DD379:                             ; CODE XREF: NtReadVirtualMemory(x,x,x,x,x)+2C↑j\nPAGE:004DD379                                         ; NtReadVirtualMemory(x,x,x,x,x)+36↑j ...\nPAGE:004DD379                 mov     eax, 0C0000005h\nPAGE:004DD37E                 jmp     short loc_4DD3F2\nPAGE:004DD380 ; ---------------------------------------------------------------------------\nPAGE:004DD380\nPAGE:004DD380 loc_4DD380:                             ; CODE XREF: NtReadVirtualMemory(x,x,x,x,x)+22↑j\nPAGE:004DD380                 mov     ebx, [ebp+NumberOfBytesRead] ; ebx = NumberOfBytesRead\nPAGE:004DD383\nPAGE:004DD383 loc_4DD383:                             ; CODE XREF: NtReadVirtualMemory(x,x,x,x,x)+4A↑j\nPAGE:004DD383                                         ; NtReadVirtualMemory(x,x,x,x,x)+67↑j\nPAGE:004DD383                 xor     eax, eax\nPAGE:004DD385                 mov     [ebp+var_28], eax ; [ebp+var_28] = 0\nPAGE:004DD388                 mov     [ebp+var_1C], eax\nPAGE:004DD38B                 cmp     esi, eax\nPAGE:004DD38D                 jz      short loc_4DD3D2 ; ebx = NumberOfBytesRead\nPAGE:004DD38F                 push    eax             ; HandleInformation\nPAGE:004DD390                 lea     eax, [ebp+Object] ; eax = [ebp+Object] 的地址\nPAGE:004DD390                                         ;\nPAGE:004DD390                                         ; 函数执行成功后[ebp+Object]会指向一个对象体。\nPAGE:004DD390                                         ; 此处返回的是 进程结构体 EPROCESS\nPAGE:004DD393                 push    eax             ; Object\nPAGE:004DD394                 push    dword ptr [ebp+AccessMode] ; AccessMode\nPAGE:004DD397                 push    _PsProcessType  ; ObjectType\nPAGE:004DD39D                 push    10h             ; DesiredAccess\nPAGE:004DD39F                 push    [ebp+ProcessHandle] ; Handle\nPAGE:004DD3A2                 call    _ObReferenceObjectByHandle@24 ; ObReferenceObjectByHandle(x,x,x,x,x,x)\nPAGE:004DD3A7                 mov     [ebp+var_1C], eax\nPAGE:004DD3AA                 test    eax, eax\nPAGE:004DD3AC                 jnz     short loc_4DD3D2 ; ebx = NumberOfBytesRead\nPAGE:004DD3AE                 lea     eax, [ebp+var_28] ; 取临时变量的地址\nPAGE:004DD3B1                 push    eax             ; 从右向左 压入第一个参数 其值是一个地址 。\nPAGE:004DD3B2                 push    dword ptr [ebp+AccessMode] ; 其值为 CPU的工作模式\nPAGE:004DD3B5                 push    esi             ; 压入 NumberOfBytesToRead 也就是从指定进程读取的请求字节数\nPAGE:004DD3B5                                         ;\nPAGE:004DD3B5                                         ; 注意区分 NumberOfBytesRead  和 NumberOfBytesToRead\nPAGE:004DD3B6                 push    [ebp+Buffer]    ; Address\nPAGE:004DD3B9                 push    [edi+_KTHREAD.ApcState.Process] ; 当前线程的进程KPROCESS\nPAGE:004DD3BC                 push    [ebp+BaseAddress] ; int\nPAGE:004DD3BF                 push    [ebp+Object]    ; 目标进程的KPROCESS\nPAGE:004DD3C2                 call    _MmCopyVirtualMemory@28 ; NTSTATUS\nPAGE:004DD3C2                                         ; MmCopyVirtualMemory(\nPAGE:004DD3C2                                         ;     IN PEPROCESS FromProcess,\nPAGE:004DD3C2                                         ;     IN CONST VOID *FromAddress,\nPAGE:004DD3C2                                         ;     IN PEPROCESS ToProcess,\nPAGE:004DD3C2                                         ;     OUT PVOID ToAddress,\nPAGE:004DD3C2                                         ;     IN SIZE_T BufferSize,\nPAGE:004DD3C2                                         ;     IN KPROCESSOR_MODE PreviousMode,\nPAGE:004DD3C2                                         ;     OUT PSIZE_T NumberOfBytesCopied\nPAGE:004DD3C2                                         ;     )\nPAGE:004DD3C7                 mov     [ebp+var_1C], eax ; 如果成功的话返回值为0 var_1C = 0\nPAGE:004DD3CA                 mov     ecx, [ebp+Object] ; Object\nPAGE:004DD3CD                 call    @ObfDereferenceObject@4 ; 这个例程减少指定对象的引用计数，如果计数变为0，则执行 任何(whatever) 清除操作。\nPAGE:004DD3D2\nPAGE:004DD3D2 loc_4DD3D2:                             ; CODE XREF: NtReadVirtualMemory(x,x,x,x,x)+97↑j\nPAGE:004DD3D2                                         ; NtReadVirtualMemory(x,x,x,x,x)+B6↑j\nPAGE:004DD3D2                 test    ebx, ebx        ; ebx = NumberOfBytesRead\nPAGE:004DD3D4                 jz      short loc_4DD3EF\nPAGE:004DD3D6                 mov     [ebp+ms_exc.registration.TryLevel], 1\nPAGE:004DD3DD                 mov     eax, [ebp+var_28] ; var_28 指向了 传输到指定缓冲区的实际字节数。\nPAGE:004DD3E0                 mov     [ebx], eax      ; 传输到指定缓冲区的实际字节数 赋给 NumberOfBytesRead\nPAGE:004DD3E2                 jmp     short loc_4DD3EB\nPAGE:004DD3E4 ; ---------------------------------------------------------------------------\nPAGE:004DD3E4\nPAGE:004DD3E4 loc_4DD3E4:                             ; DATA XREF: .text:stru_402EF0↑o\nPAGE:004DD3E4                 xor     eax, eax\nPAGE:004DD3E6                 inc     eax\nPAGE:004DD3E7                 retn\nPAGE:004DD3E8 ; ---------------------------------------------------------------------------\nPAGE:004DD3E8\nPAGE:004DD3E8 loc_4DD3E8:                             ; DATA XREF: .text:stru_402EF0↑o\nPAGE:004DD3E8                 mov     esp, [ebp+ms_exc.old_esp]\nPAGE:004DD3EB\nPAGE:004DD3EB loc_4DD3EB:                             ; CODE XREF: NtReadVirtualMemory(x,x,x,x,x)+EC↑j\nPAGE:004DD3EB                 or      [ebp+ms_exc.registration.TryLevel], 0FFFFFFFFh\nPAGE:004DD3EF\nPAGE:004DD3EF loc_4DD3EF:                             ; CODE XREF: NtReadVirtualMemory(x,x,x,x,x)+DE↑j\nPAGE:004DD3EF                 mov     eax, [ebp+var_1C] ; 一切正常执行的话 eax = 0 既宏定义 STATUS_SUCCESS\nPAGE:004DD3F2\nPAGE:004DD3F2 loc_4DD3F2:                             ; CODE XREF: NtReadVirtualMemory(x,x,x,x,x)+81↑j\nPAGE:004DD3F2                                         ; NtReadVirtualMemory(x,x,x,x,x)+88↑j\nPAGE:004DD3F2                 call    __SEH_epilog\nPAGE:004DD3F7                 retn    14h\nPAGE:004DD3F7 ; &#125; // starts at 4DD2F6\nPAGE:004DD3F7 _NtReadVirtualMemory@20 endp\nPAGE:004DD3F7\nPAGE:004DD3F7 ; ---------------------------------------------------------------------------\n</code></pre>\n</div></details>\n<p>主要调用了 MmCopyVirtualMemory 函数。</p>\n<h3 id=\"逆向分析-mmcopyvirtualmemory\"><a class=\"anchor\" href=\"#逆向分析-mmcopyvirtualmemory\">#</a> 逆向分析 MmCopyVirtualMemory</h3>\n<details class=\"primary\"><summary>MmCopyVirtualMemory (点击展开)</summary><div>\n<pre><code>; int __stdcall MmCopyVirtualMemory(PEX_RUNDOWN_REF FromProcess, int, PRKPROCESS, volatile void *Address, SIZE_T Length, KPROCESSOR_MODE AccessMode, int NumberOfBytesRead)\nPAGE:004DD258 _MmCopyVirtualMemory@28 proc near       ; CODE XREF: IopCheckHardErrorsDisabled(x)+73↑p\nPAGE:004DD258                                         ; LpcpCopyRequestData(x,x,x,x,x,x,x):loc_4CEE57↑p ...\nPAGE:004DD258\nPAGE:004DD258 FromProcess     = dword ptr  8\nPAGE:004DD258 FromAddress     = dword ptr  0Ch\nPAGE:004DD258 ToProcess       = dword ptr  10h\nPAGE:004DD258 Address         = dword ptr  14h\nPAGE:004DD258 Length          = dword ptr  18h\nPAGE:004DD258 AccessMode      = byte ptr  1Ch\nPAGE:004DD258 NumberOfBytesRead= dword ptr  20h\nPAGE:004DD258\nPAGE:004DD258                 mov     edi, edi\nPAGE:004DD25A                 push    ebp\nPAGE:004DD25B                 mov     ebp, esp\nPAGE:004DD25D                 cmp     [ebp+Length], 0 ; NumberOfBytesToRead 判断  从指定进程读取的请求字节数，是否为0\nPAGE:004DD261                 jnz     short loc_4DD26A\nPAGE:004DD263                 xor     eax, eax\nPAGE:004DD265                 jmp     loc_4DD2ED      ;  为 0 就直接返回了\nPAGE:004DD26A ; ---------------------------------------------------------------------------\nPAGE:004DD26A\nPAGE:004DD26A loc_4DD26A:                             ; CODE XREF: MmCopyVirtualMemory(x,x,x,x,x,x,x)+9↑j\nPAGE:004DD26A                 push    ebx\nPAGE:004DD26B                 mov     ebx, [ebp+FromProcess] ; ebx = 要读取的进程的 EPROCESS 结构体。\nPAGE:004DD26E                 mov     ecx, ebx\nPAGE:004DD270                 mov     eax, large fs:124h\nPAGE:004DD276                 cmp     ebx, [eax+_KTHREAD.ApcState.Process] ; 判断要读取的进程 是否是当前进程\nPAGE:004DD279                 jnz     short loc_4DD27E\nPAGE:004DD27B                 mov     ecx, [ebp+ToProcess]\nPAGE:004DD27E\nPAGE:004DD27E loc_4DD27E:                             ; CODE XREF: MmCopyVirtualMemory(x,x,x,x,x,x,x)+21↑j\nPAGE:004DD27E                 add     ecx, 80h ; '€'  ; 取 目标EPROCESS 的 RundownProtect 成员的值\nPAGE:004DD284                 mov     [ebp+FromProcess], ecx\nPAGE:004DD287                 call    @ExAcquireRundownProtection@4 ; 获得rundown保护\nPAGE:004DD28C                 test    al, al          ; 判断是否成功\nPAGE:004DD28E                 jnz     short loc_4DD297 ; 如果成功就跳走\nPAGE:004DD290                 mov     eax, 0C000010Ah ; 返回  STATUS_PROCESS_IS_TERMINATING\nPAGE:004DD295                 jmp     short loc_4DD2EC ; 如果失败，函数执行失败 返回\nPAGE:004DD297 ; ---------------------------------------------------------------------------\nPAGE:004DD297\nPAGE:004DD297 loc_4DD297:                             ; CODE XREF: MmCopyVirtualMemory(x,x,x,x,x,x,x)+36↑j\nPAGE:004DD297                 cmp     [ebp+Length], 1FFh ; 判读要读取的字节大小是否超过0x1FF\nPAGE:004DD29E                 push    esi\nPAGE:004DD29F                 push    edi\nPAGE:004DD2A0                 mov     edi, [ebp+NumberOfBytesRead] ; edi =  指向NumberOfBytesRead的地址\nPAGE:004DD2A0                                         ;\nPAGE:004DD2A0                                         ; 在 NtReadVirtualMemory  中传来的此值是一个地址。\nPAGE:004DD2A0                                         ; 应该是返回用的\nPAGE:004DD2A3                 jbe     short loc_4DD2C8 ; 小于等于则跳转\nPAGE:004DD2A5                 push    edi             ; 压入 指向NumberOfBytesRead的地址\nPAGE:004DD2A6                 push    dword ptr [ebp+AccessMode] ; AccessMode\nPAGE:004DD2A9                 push    [ebp+Length]    ; Length\nPAGE:004DD2AC                 push    [ebp+Address]   ; ToAddress\nPAGE:004DD2AF                 push    [ebp+ToProcess] ; ToProcess\nPAGE:004DD2B2                 push    [ebp+FromAddress] ; FromAddress\nPAGE:004DD2B5                 push    ebx             ; FromProcess\nPAGE:004DD2B6                 call    _MiDoMappedCopy@28 ; NTSTATUS\nPAGE:004DD2B6                                         ; MiDoMappedCopy (\nPAGE:004DD2B6                                         ;     IN PEPROCESS FromProcess,\nPAGE:004DD2B6                                         ;     IN CONST VOID *FromAddress,\nPAGE:004DD2B6                                         ;     IN PEPROCESS ToProcess,\nPAGE:004DD2B6                                         ;     OUT PVOID ToAddress,\nPAGE:004DD2B6                                         ;     IN SIZE_T BufferSize,\nPAGE:004DD2B6                                         ;     IN KPROCESSOR_MODE PreviousMode,\nPAGE:004DD2B6                                         ;     OUT PSIZE_T NumberOfBytesRead\nPAGE:004DD2B6                                         ;     )\nPAGE:004DD2BB                 mov     esi, eax\nPAGE:004DD2BD                 cmp     esi, 0C00000A1h\nPAGE:004DD2C3                 jnz     short loc_4DD2E0\nPAGE:004DD2C5                 and     dword ptr [edi], 0\nPAGE:004DD2C8\nPAGE:004DD2C8 loc_4DD2C8:                             ; CODE XREF: MmCopyVirtualMemory(x,x,x,x,x,x,x)+4B↑j\nPAGE:004DD2C8                 push    edi             ; 压入 指向NumberOfBytesRead的地址\nPAGE:004DD2C9                 push    dword ptr [ebp+AccessMode] ; AccessMode\nPAGE:004DD2CC                 push    [ebp+Length]    ; Length\nPAGE:004DD2CF                 push    [ebp+Address]   ; ToAddress\nPAGE:004DD2D2                 push    [ebp+ToProcess] ; ToProcess\nPAGE:004DD2D5                 push    [ebp+FromAddress] ; FromAddress\nPAGE:004DD2D8                 push    ebx             ; FromProcess\nPAGE:004DD2D9                 call    _MiDoPoolCopy@28 ; NTSTATUS\nPAGE:004DD2D9                                         ; MiDoPoolCopy (\nPAGE:004DD2D9                                         ;      IN PEPROCESS FromProcess,\nPAGE:004DD2D9                                         ;      IN CONST VOID *FromAddress,\nPAGE:004DD2D9                                         ;      IN PEPROCESS ToProcess,\nPAGE:004DD2D9                                         ;      OUT PVOID ToAddress,\nPAGE:004DD2D9                                         ;      IN SIZE_T BufferSize,\nPAGE:004DD2D9                                         ;      IN KPROCESSOR_MODE PreviousMode,\nPAGE:004DD2D9                                         ;      OUT PSIZE_T NumberOfBytesRead\nPAGE:004DD2D9                                         ;      )\nPAGE:004DD2DE                 mov     esi, eax\nPAGE:004DD2E0\nPAGE:004DD2E0 loc_4DD2E0:                             ; CODE XREF: MmCopyVirtualMemory(x,x,x,x,x,x,x)+6B↑j\nPAGE:004DD2E0                 mov     ecx, [ebp+FromProcess] ; RunRef\nPAGE:004DD2E3                 call    @ExReleaseRundownProtection@4 ; ExReleaseRundownProtection(x)\nPAGE:004DD2E8                 pop     edi\nPAGE:004DD2E9                 mov     eax, esi\nPAGE:004DD2EB                 pop     esi\nPAGE:004DD2EC\nPAGE:004DD2EC loc_4DD2EC:                             ; CODE XREF: MmCopyVirtualMemory(x,x,x,x,x,x,x)+3D↑j\nPAGE:004DD2EC                 pop     ebx\nPAGE:004DD2ED\nPAGE:004DD2ED loc_4DD2ED:                             ; CODE XREF: MmCopyVirtualMemory(x,x,x,x,x,x,x)+D↑j\nPAGE:004DD2ED                 pop     ebp\nPAGE:004DD2EE                 retn    1Ch\nPAGE:004DD2EE _MmCopyVirtualMemory@28 endp\n</code></pre>\n</div></details>\n<p>这个函数会  <code>cmp     [ebp+Length], 1FFh </code> ; 判读要读取的字节大小是否超过 0x1FF，如果没有超过就会调用  <code>_MiDoPoolCopy</code>  函数，超过的话就会调用  <code>_MiDoMappedCopy</code> 。</p>\n<p><code>_MiDoMappedCopy</code>  有些地方没逆懂，但关键地方都一样。详细看  <code>_MiDoPoolCopy</code>  了。</p>\n<h3 id=\"逆向分析-_midopoolcopy\"><a class=\"anchor\" href=\"#逆向分析-_midopoolcopy\">#</a> 逆向分析 _MiDoPoolCopy</h3>\n<details class=\"primary\"><summary>_MiDoPoolCopy (点击展开)</summary><div>\n<p><img data-src=\"image004.png\" alt=\"\" /></p>\n</div></details>\n<h3 id=\"逆向分析-kestackattachprocess\"><a class=\"anchor\" href=\"#逆向分析-kestackattachprocess\">#</a> 逆向分析 KeStackAttachProcess</h3>\n<details class=\"primary\"><summary>KeStackAttachProcess (点击展开)</summary><div>\n<p><img data-src=\"image003.png\" alt=\"\" /></p>\n</div></details>\n<h3 id=\"逆向分析-kiattachprocess\"><a class=\"anchor\" href=\"#逆向分析-kiattachprocess\">#</a> 逆向分析 KiAttachProcess</h3>\n<details class=\"primary\"><summary>KiAttachProcess (点击展开)</summary><div>\n<p><img data-src=\"image002.png\" alt=\"\" /></p>\n</div></details>\n<h3 id=\"逆向分析-kiswapprocess\"><a class=\"anchor\" href=\"#逆向分析-kiswapprocess\">#</a> 逆向分析 KiSwapProcess</h3>\n<details class=\"primary\"><summary>KiSwapProcess (点击展开)</summary><div>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n</div></details>\n<h3 id=\"函数调用流程中的各个函数总结\"><a class=\"anchor\" href=\"#函数调用流程中的各个函数总结\">#</a> 函数调用流程中的各个函数总结</h3>\n<details class=\"info\"><summary>NtReadVirtualMemory实现路径 (点击展开)</summary><div>\n<ol>\n<li>\n<p><code>NtReadVirtualMemory</code>  做了一些验证后调用了  <code>MmCopyVirtualMemory</code></p>\n</li>\n<li>\n<p><code>MmCopyVirtualMemory</code>  在这个函数中判断了缓冲区的大小，如果缓冲区大小大于池移动阈值，则尝试通过直接映射写入内存。这里根据情况调用  <code>MiDoMappedCopy</code>  和  <code>MiDoPoolCopy</code> 。</p>\n</li>\n<li>\n<p><code>MiDoMappedCopy</code>  函数有很多结构体还没学，暂时逆不懂，先逆  <code>MiDoPoolCopy</code>  了。  <code>MiDoPoolCopy</code>  函数在读取内存的方法是先在内核层申请一份和要读取的字节大小一样的内存，然后调用了  <code>KeStackAttachProcess</code>  函数。</p>\n<ul>\n<li>这里先说  <code>KeStackAttachProcess</code>  函数了，这个函数首先判断了要附加的进程是不是当前进程，然后又判断当前线程是不是已经处于挂靠状态了，如果处于挂靠状态的话，把原来的 APC 状态保存到 ApcState 变量中，否则的话就把原来的 APC 状态保存到线程结构体的 KTHREAD 的  <code>SavedApcState</code>  成员中。  这里是判断之后调用  <code>KiAttachProcess </code> 函数时传递的参数不一样来实现的。</li>\n</ul>\n<p>如下：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Thread<span class=\"token operator\">-></span>ApcStateIndex <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 已经处于挂靠状态</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>            <span class=\"token function\">KiAttachProcess</span><span class=\"token punctuation\">(</span>Thread<span class=\"token punctuation\">,</span> Process<span class=\"token punctuation\">,</span> OldIrql<span class=\"token punctuation\">,</span> ApcState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 会把原来的 APC 状态赋给 ApcState 变量，是上层函数返回的变量。</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 没有处于挂靠状态</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token function\">KiAttachProcess</span><span class=\"token punctuation\">(</span>Thread<span class=\"token punctuation\">,</span> Process<span class=\"token punctuation\">,</span> OldIrql<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>Thread<span class=\"token operator\">-></span>SavedApcState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 传递当前线程的 SavedApcState，用它来接收以前的 APC 状态。</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            ApcState<span class=\"token operator\">-></span>Process <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 标识一下，在 KeStackAttachProcess 中会判断</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>\n<p>在 <code>KiAttachProcess </code> 函数中，先把当前线程 KTEHREAD 的 ApcState 成员保存了一份赋值给了一个指针变量 ，这个指针变量是这个函数的参数，如果线程已将处于挂靠状态，那么这个指针变量就是上层函数的临时变量，如果没有处于挂靠状态那么这个指针变量就是当前线程 KTHREAD 的 <code>SavedApcState</code>  成员。<br />\n然后把当前线程 KTHREAD 的  <code>ApcState</code>  保存到了这个指针变量中，<strong>这一步既保存了没挂靠前的 APC 状态</strong>，之后初始化新的线程 KTHREAD 的  <code>ApcState</code>  成员。<br />\n然后判断目标进程的状态是否在内存中，如果在内存中，就把所有处于 ready 状态的线程，移动到全局就绪链表中，然后调用了  <code>KiSwapProcess</code>  函数后就返回了。<br />\n如果进程的状态不是在内存中，则判断其状态是不是 ProcessOutOfMemory 既不在内存中，如果是则设置其状态为正在转移，然后把进程 KPROCESS 的  <code>SwapListEntry</code>  成员挂入到  <code>KiProcessInSwapListHead</code>  中。<br />\n<strong> <code>SwapListEntry</code>  成员在《Windows 内核原理与实现》一书中有介绍：  <code>KiProcessInSwapListHead</code>  这是等待被插入的进程链表，它是一个单链表。当一个进程要被换出内存时，通过此成员加入到以  <code>KiProcessOutSwapListHead</code>  为链头的单链表中；当一个进程要被换入内存时，通过此成员加入到以  <code>KiProcessInSwapListHead</code>  为链头的单链表中。</strong><br />\n如果状态不是 ProcessOutOfMemory 的话，会直接执行这一步： 清除前一个进程中的活动处理器位，并设置被附加进程中的活动处理器位。<br />\n绕后调用了  <code>KiSwapThread</code>  函数</p>\n<ul>\n<li>调用  <code>KiSwapProcess</code>  函数：这个函数主要更新了 GDT 中的 LDT 描述符和 IDT 中的 int 2h, 并交换 CR3 来将地址空间交换到另一个进程。 它还将 I/O 权限映射交换到新进程。</li>\n<li>调用  <code>KiSwapThread</code> ，主动调用线程切换，既把目标进程的线程激活，使其在内存中，直到线程切换切回来，因为 APC 的状态已经更换成了目标进程，而 Cr3 是取线程的 APC 状态中的进程 KPROCESS 中的  <code>DirectoryTableBase</code>  成员， 所以切换回来后，线程的 Cr3 也就改了，至此挂靠完成了。真是巧妙呀。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>挂靠后又回到了  <code>MiDoPoolCopy</code>  函数中，然后就开始复制内存了，把目标进程空间的内存，复制到了内核空间。然后调用了  <code>KeUnstackDetachProcess</code>  解除了挂靠状态， <code>KeUnstackDetachProcess</code>  最终也是调用了  <code>KiSwapProcess</code>  函数不在细说了。解除挂靠后又挂靠了回了原来的自己的进程，然后把在内核空间的内存数据复制到了，原来线程空间指定的缓存区中，然后就解除挂靠了，之后又释放了在内核空间申请的内存空间，统计了一下复制了多少字节数后返回了。</p>\n</li>\n</ol>\n</div></details>\n<h2 id=\"ntwritevirtualmemory-流程分析\"><a class=\"anchor\" href=\"#ntwritevirtualmemory-流程分析\">#</a> NtWriteVirtualMemory 流程分析</h2>\n<p>此函数的调用流程与  <code>NtReadVirtualMemory</code>  一样。</p>\n<p>NtReadVirtualMemory -&gt; MmCopyVirtualMemory -&gt; MiDoMappedCopy 或者 MiDoPoolCopy</p>\n<details class=\"info\"><summary>（点击展开）</summary><div>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>PAGE:004DD400 ; NTSTATUS __stdcall NtWriteVirtualMemory (HANDLE ProcessHandle, PVOID BaseAddress, PVOID Buffer, SIZE_T NumberOfBytesToWrite, PSIZE_T NumberOfBytesWritten)</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>PAGE:004DD400 _NtWriteVirtualMemory@20 proc near      ; DATA XREF: .text:0042D9C4↑o</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>PAGE:004DD400</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>PAGE:004DD400 var_2C          &#x3D; dword ptr -2Ch</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>PAGE:004DD400 NumberOfBytesRead&#x3D; dword ptr -28h</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>PAGE:004DD400 Object          &#x3D; dword ptr -24h</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>PAGE:004DD400 AccessMode      &#x3D; byte ptr -20h</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>PAGE:004DD400 Status          &#x3D; dword ptr -1Ch</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>PAGE:004DD400 ms_exc          &#x3D; CPPEH_RECORD ptr -18h</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>PAGE:004DD400 ProcessHandle   &#x3D; dword ptr  8</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>PAGE:004DD400 BaseAddress     &#x3D; dword ptr  0Ch</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>PAGE:004DD400 Buffer          &#x3D; dword ptr  10h</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>PAGE:004DD400 NumberOfBytesToWrite&#x3D; dword ptr  14h</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>PAGE:004DD400 NumberOfBytesWritten&#x3D; dword ptr  18h</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>PAGE:004DD400</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>PAGE:004DD400 ; __unwind &#123; &#x2F;&#x2F;__SEH_prolog</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>PAGE:004DD400                 push    1Ch</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>PAGE:004DD402                 push    offset stru_402F08</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>PAGE:004DD407                 call    __SEH_prolog</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>PAGE:004DD40C                 mov     eax, large fs:124h</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>PAGE:004DD412                 mov     edi, eax        ; edi &#x3D; 当先线程的 KTHREAD</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>PAGE:004DD414                 mov     al, [edi+_KTHREAD.PreviousMode]</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>PAGE:004DD41A                 mov     [ebp+AccessMode], al</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>PAGE:004DD41D                 mov     esi, [ebp+NumberOfBytesToWrite] ; esi &#x3D; NumberOfBytesToWrite</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>PAGE:004DD420                 test    al, al          ; 与操作 判断 al 是否等于 0，既当前模式是否是内核模式</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>PAGE:004DD422                 jz      short loc_4DD48A</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>PAGE:004DD424                 mov     eax, [ebp+BaseAddress]</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>PAGE:004DD427                 lea     edx, [eax+esi]  ; edx &#x3D; BaseAddress + NuberOfBytesToWrite</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>PAGE:004DD42A                 cmp     edx, eax</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>PAGE:004DD42C                 jb      short loc_4DD483</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>PAGE:004DD42E                 mov     eax, [ebp+Buffer]</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>PAGE:004DD431                 lea     ecx, [eax+esi]</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>PAGE:004DD434                 cmp     ecx, eax</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>PAGE:004DD436                 jb      short loc_4DD483</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>PAGE:004DD438                 mov     eax, _MmHighestUserAddress</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>PAGE:004DD43D                 cmp     edx, eax</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>PAGE:004DD43F                 ja      short loc_4DD483</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>PAGE:004DD441                 cmp     ecx, eax</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>PAGE:004DD443                 ja      short loc_4DD483 ; if ( (BaseAddress + NuberOfBytesToWrite &gt; BaseAddress) ||</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>PAGE:004DD443                                         ; (Buffer + NuberOfBytesToWrite &gt; Buffer) ||</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>PAGE:004DD443                                         ; (BaseAddress + NuberOfBytesToWrite) &gt; MM_HIGHEST_USER_ADDRESS) ||</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>PAGE:004DD443                                         ; (Buffer + NuberOfBytesToWrite) &gt; MM_HIGHEST_USER_ADDRESS))</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>PAGE:004DD443                                         ;</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>PAGE:004DD443                                         ; )&#123;</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>PAGE:004DD443                                         ;    return ……</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>PAGE:004DD443                                         ; &#125;</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>PAGE:004DD445                 mov     ebx, [ebp+NumberOfBytesWritten]</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>PAGE:004DD448                 test    ebx, ebx        ; 判断 NumberOfBytesWritten 是否为 空 因为是可选参数</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>PAGE:004DD44A                 jz      short loc_4DD48D ; 如果为空就跳转</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>PAGE:004DD44C                 and     [ebp+ms_exc.registration.TryLevel], 0</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>PAGE:004DD450                 mov     eax, _MmUserProbeAddress ; _MmUserProbeAddress &#x3D; 0x7FFF0000 保护页的起始地址</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>PAGE:004DD455                 cmp     ebx, eax        ; 比较一下</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>PAGE:004DD457                 jb      short loc_4DD45F ; 小于就跳转</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>PAGE:004DD459                 mov     dword ptr [eax], 0</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>PAGE:004DD45F</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>PAGE:004DD45F loc_4DD45F:                             ; CODE XREF: NtWriteVirtualMemory (x,x,x,x,x)+57↑j</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>PAGE:004DD45F                 mov     eax, [ebx]      ; 判读一下这个值是否可读可写</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>PAGE:004DD461                 mov     [ebx], eax      ; ProbeForWriteUlong_ptr (Address) &#123;</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>PAGE:004DD461                                         ;     if ((Address) &gt;&#x3D; (ULONG_PTR * const) MM_USER_PROBE_ADDRESS) &#123;</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>PAGE:004DD461                                         ;         *(volatile ULONG_PTR * const) MM_USER_PROBE_ADDRESS &#x3D; 0;</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>PAGE:004DD461                                         ;     &#125;</pre></td></tr><tr><td data-num=\"62\"></td><td><pre>PAGE:004DD461                                         ;</pre></td></tr><tr><td data-num=\"63\"></td><td><pre>PAGE:004DD461                                         ;     *(volatile ULONG_PTR *)(Address) &#x3D; *(volatile ULONG_PTR *)(Address);</pre></td></tr><tr><td data-num=\"64\"></td><td><pre>PAGE:004DD461                                         ; &#125;</pre></td></tr><tr><td data-num=\"65\"></td><td><pre>PAGE:004DD463                 or      [ebp+ms_exc.registration.TryLevel], 0FFFFFFFFh</pre></td></tr><tr><td data-num=\"66\"></td><td><pre>PAGE:004DD467                 jmp     short loc_4DD48D</pre></td></tr><tr><td data-num=\"67\"></td><td><pre>PAGE:004DD469 ; ---------------------------------------------------------------------------</pre></td></tr><tr><td data-num=\"68\"></td><td><pre>PAGE:004DD469</pre></td></tr><tr><td data-num=\"69\"></td><td><pre>PAGE:004DD469 loc_4DD469:                             ; DATA XREF: .text:stru_402F08↑o</pre></td></tr><tr><td data-num=\"70\"></td><td><pre>PAGE:004DD469                 mov     eax, [ebp+ms_exc.exc_ptr]</pre></td></tr><tr><td data-num=\"71\"></td><td><pre>PAGE:004DD46C                 mov     eax, [eax]</pre></td></tr><tr><td data-num=\"72\"></td><td><pre>PAGE:004DD46E                 mov     eax, [eax]</pre></td></tr><tr><td data-num=\"73\"></td><td><pre>PAGE:004DD470                 mov     [ebp+var_2C], eax</pre></td></tr><tr><td data-num=\"74\"></td><td><pre>PAGE:004DD473                 xor     eax, eax</pre></td></tr><tr><td data-num=\"75\"></td><td><pre>PAGE:004DD475                 inc     eax</pre></td></tr><tr><td data-num=\"76\"></td><td><pre>PAGE:004DD476                 retn</pre></td></tr><tr><td data-num=\"77\"></td><td><pre>PAGE:004DD477 ; ---------------------------------------------------------------------------</pre></td></tr><tr><td data-num=\"78\"></td><td><pre>PAGE:004DD477</pre></td></tr><tr><td data-num=\"79\"></td><td><pre>PAGE:004DD477 loc_4DD477:                             ; DATA XREF: .text:stru_402F08↑o</pre></td></tr><tr><td data-num=\"80\"></td><td><pre>PAGE:004DD477                 mov     esp, [ebp+ms_exc.old_esp]</pre></td></tr><tr><td data-num=\"81\"></td><td><pre>PAGE:004DD47A                 or      [ebp+ms_exc.registration.TryLevel], 0FFFFFFFFh</pre></td></tr><tr><td data-num=\"82\"></td><td><pre>PAGE:004DD47E                 mov     eax, [ebp+var_2C]</pre></td></tr><tr><td data-num=\"83\"></td><td><pre>PAGE:004DD481                 jmp     short loc_4DD4FC</pre></td></tr><tr><td data-num=\"84\"></td><td><pre>PAGE:004DD483 ; ---------------------------------------------------------------------------</pre></td></tr><tr><td data-num=\"85\"></td><td><pre>PAGE:004DD483</pre></td></tr><tr><td data-num=\"86\"></td><td><pre>PAGE:004DD483 loc_4DD483:                             ; CODE XREF: NtWriteVirtualMemory (x,x,x,x,x)+2C↑j</pre></td></tr><tr><td data-num=\"87\"></td><td><pre>PAGE:004DD483                                         ; NtWriteVirtualMemory (x,x,x,x,x)+36↑j ...</pre></td></tr><tr><td data-num=\"88\"></td><td><pre>PAGE:004DD483                 mov     eax, 0C0000005h</pre></td></tr><tr><td data-num=\"89\"></td><td><pre>PAGE:004DD488                 jmp     short loc_4DD4FC</pre></td></tr><tr><td data-num=\"90\"></td><td><pre>PAGE:004DD48A ; ---------------------------------------------------------------------------</pre></td></tr><tr><td data-num=\"91\"></td><td><pre>PAGE:004DD48A</pre></td></tr><tr><td data-num=\"92\"></td><td><pre>PAGE:004DD48A loc_4DD48A:                             ; CODE XREF: NtWriteVirtualMemory (x,x,x,x,x)+22↑j</pre></td></tr><tr><td data-num=\"93\"></td><td><pre>PAGE:004DD48A                 mov     ebx, [ebp+NumberOfBytesWritten]</pre></td></tr><tr><td data-num=\"94\"></td><td><pre>PAGE:004DD48D</pre></td></tr><tr><td data-num=\"95\"></td><td><pre>PAGE:004DD48D loc_4DD48D:                             ; CODE XREF: NtWriteVirtualMemory (x,x,x,x,x)+4A↑j</pre></td></tr><tr><td data-num=\"96\"></td><td><pre>PAGE:004DD48D                                         ; NtWriteVirtualMemory (x,x,x,x,x)+67↑j</pre></td></tr><tr><td data-num=\"97\"></td><td><pre>PAGE:004DD48D                 xor     eax, eax</pre></td></tr><tr><td data-num=\"98\"></td><td><pre>PAGE:004DD48F                 mov     [ebp+NumberOfBytesRead], eax ; NumberOfBytesRead &#x3D; 0</pre></td></tr><tr><td data-num=\"99\"></td><td><pre>PAGE:004DD492                 mov     [ebp+Status], eax</pre></td></tr><tr><td data-num=\"100\"></td><td><pre>PAGE:004DD495                 cmp     esi, eax        ; esi &#x3D; NumberOfBytesToWrite</pre></td></tr><tr><td data-num=\"101\"></td><td><pre>PAGE:004DD495                                         ; 判断要写入的字节数是否为 0</pre></td></tr><tr><td data-num=\"102\"></td><td><pre>PAGE:004DD497                 jz      short loc_4DD4DC</pre></td></tr><tr><td data-num=\"103\"></td><td><pre>PAGE:004DD499                 push    eax             ; HandleInformation</pre></td></tr><tr><td data-num=\"104\"></td><td><pre>PAGE:004DD49A                 lea     eax, [ebp+Object]</pre></td></tr><tr><td data-num=\"105\"></td><td><pre>PAGE:004DD49D                 push    eax             ; Object</pre></td></tr><tr><td data-num=\"106\"></td><td><pre>PAGE:004DD49E                 push    dword ptr [ebp+AccessMode] ; AccessMode</pre></td></tr><tr><td data-num=\"107\"></td><td><pre>PAGE:004DD4A1                 push    _PsProcessType  ; ObjectType</pre></td></tr><tr><td data-num=\"108\"></td><td><pre>PAGE:004DD4A7                 push    20h ; &#39; &#39;       ; DesiredAccess</pre></td></tr><tr><td data-num=\"109\"></td><td><pre>PAGE:004DD4A9                 push    [ebp+ProcessHandle] ; Handle</pre></td></tr><tr><td data-num=\"110\"></td><td><pre>PAGE:004DD4AC                 call    _ObReferenceObjectByHandle@24 ; ObReferenceObjectByHandle (x,x,x,x,x,x)</pre></td></tr><tr><td data-num=\"111\"></td><td><pre>PAGE:004DD4B1                 mov     [ebp+Status], eax ; Status &#x3D; ObReferenceObjectByHandle (ProcessHandle,</pre></td></tr><tr><td data-num=\"112\"></td><td><pre>PAGE:004DD4B1                                         ;                                            PROCESS_VM_WRITE,</pre></td></tr><tr><td data-num=\"113\"></td><td><pre>PAGE:004DD4B1                                         ;                                            PsProcessType,</pre></td></tr><tr><td data-num=\"114\"></td><td><pre>PAGE:004DD4B1                                         ;                                            PreviousMode,</pre></td></tr><tr><td data-num=\"115\"></td><td><pre>PAGE:004DD4B1                                         ;                                            (PVOID *)&amp;Process,</pre></td></tr><tr><td data-num=\"116\"></td><td><pre>PAGE:004DD4B1                                         ;                                            NULL);</pre></td></tr><tr><td data-num=\"117\"></td><td><pre>PAGE:004DD4B4                 test    eax, eax        ; 判断是否执行成功</pre></td></tr><tr><td data-num=\"118\"></td><td><pre>PAGE:004DD4B6                 jnz     short loc_4DD4DC</pre></td></tr><tr><td data-num=\"119\"></td><td><pre>PAGE:004DD4B8                 lea     eax, [ebp+NumberOfBytesRead]</pre></td></tr><tr><td data-num=\"120\"></td><td><pre>PAGE:004DD4BB                 push    eax             ; NumberOfBytesRead</pre></td></tr><tr><td data-num=\"121\"></td><td><pre>PAGE:004DD4BC                 push    dword ptr [ebp+AccessMode] ; AccessMode</pre></td></tr><tr><td data-num=\"122\"></td><td><pre>PAGE:004DD4BF                 push    esi             ; Length</pre></td></tr><tr><td data-num=\"123\"></td><td><pre>PAGE:004DD4C0                 push    [ebp+BaseAddress] ; Address</pre></td></tr><tr><td data-num=\"124\"></td><td><pre>PAGE:004DD4C3                 push    [ebp+Object]    ; 目标进程 KPROCESS</pre></td></tr><tr><td data-num=\"125\"></td><td><pre>PAGE:004DD4C6                 push    [ebp+Buffer]    ; int</pre></td></tr><tr><td data-num=\"126\"></td><td><pre>PAGE:004DD4C9                 push    [edi+_KTHREAD.ApcState.Process] ; 当前线程的进程 KPROCESS</pre></td></tr><tr><td data-num=\"127\"></td><td><pre>PAGE:004DD4CC                 call    _MmCopyVirtualMemory@28 ; NTSTATUS</pre></td></tr><tr><td data-num=\"128\"></td><td><pre>PAGE:004DD4CC                                         ; MmCopyVirtualMemory (</pre></td></tr><tr><td data-num=\"129\"></td><td><pre>PAGE:004DD4CC                                         ;     IN PEPROCESS FromProcess,</pre></td></tr><tr><td data-num=\"130\"></td><td><pre>PAGE:004DD4CC                                         ;     IN CONST VOID *FromAddress,</pre></td></tr><tr><td data-num=\"131\"></td><td><pre>PAGE:004DD4CC                                         ;     IN PEPROCESS ToProcess,</pre></td></tr><tr><td data-num=\"132\"></td><td><pre>PAGE:004DD4CC                                         ;     OUT PVOID ToAddress,</pre></td></tr><tr><td data-num=\"133\"></td><td><pre>PAGE:004DD4CC                                         ;     IN SIZE_T BufferSize,</pre></td></tr><tr><td data-num=\"134\"></td><td><pre>PAGE:004DD4CC                                         ;     IN KPROCESSOR_MODE PreviousMode,</pre></td></tr><tr><td data-num=\"135\"></td><td><pre>PAGE:004DD4CC                                         ;     OUT PSIZE_T NumberOfBytesCopied</pre></td></tr><tr><td data-num=\"136\"></td><td><pre>PAGE:004DD4CC                                         ;     )</pre></td></tr><tr><td data-num=\"137\"></td><td><pre>PAGE:004DD4D1                 mov     [ebp+Status], eax</pre></td></tr><tr><td data-num=\"138\"></td><td><pre>PAGE:004DD4D4                 mov     ecx, [ebp+Object] ; Object</pre></td></tr><tr><td data-num=\"139\"></td><td><pre>PAGE:004DD4D7                 call    @ObfDereferenceObject@4 ; ObfDereferenceObject (x)</pre></td></tr><tr><td data-num=\"140\"></td><td><pre>PAGE:004DD4DC</pre></td></tr><tr><td data-num=\"141\"></td><td><pre>PAGE:004DD4DC loc_4DD4DC:                             ; CODE XREF: NtWriteVirtualMemory (x,x,x,x,x)+97↑j</pre></td></tr><tr><td data-num=\"142\"></td><td><pre>PAGE:004DD4DC                                         ; NtWriteVirtualMemory (x,x,x,x,x)+B6↑j</pre></td></tr><tr><td data-num=\"143\"></td><td><pre>PAGE:004DD4DC                 test    ebx, ebx</pre></td></tr><tr><td data-num=\"144\"></td><td><pre>PAGE:004DD4DE                 jz      short loc_4DD4F9</pre></td></tr><tr><td data-num=\"145\"></td><td><pre>PAGE:004DD4E0                 mov     [ebp+ms_exc.registration.TryLevel], 1</pre></td></tr><tr><td data-num=\"146\"></td><td><pre>PAGE:004DD4E7                 mov     eax, [ebp+NumberOfBytesRead]</pre></td></tr><tr><td data-num=\"147\"></td><td><pre>PAGE:004DD4EA                 mov     [ebx], eax</pre></td></tr><tr><td data-num=\"148\"></td><td><pre>PAGE:004DD4EC                 jmp     short loc_4DD4F5</pre></td></tr><tr><td data-num=\"149\"></td><td><pre>PAGE:004DD4EE ; ---------------------------------------------------------------------------</pre></td></tr><tr><td data-num=\"150\"></td><td><pre>PAGE:004DD4EE</pre></td></tr><tr><td data-num=\"151\"></td><td><pre>PAGE:004DD4EE loc_4DD4EE:                             ; DATA XREF: .text:stru_402F08↑o</pre></td></tr><tr><td data-num=\"152\"></td><td><pre>PAGE:004DD4EE                 xor     eax, eax</pre></td></tr><tr><td data-num=\"153\"></td><td><pre>PAGE:004DD4F0                 inc     eax</pre></td></tr><tr><td data-num=\"154\"></td><td><pre>PAGE:004DD4F1                 retn</pre></td></tr><tr><td data-num=\"155\"></td><td><pre>PAGE:004DD4F2 ; ---------------------------------------------------------------------------</pre></td></tr><tr><td data-num=\"156\"></td><td><pre>PAGE:004DD4F2</pre></td></tr><tr><td data-num=\"157\"></td><td><pre>PAGE:004DD4F2 loc_4DD4F2:                             ; DATA XREF: .text:stru_402F08↑o</pre></td></tr><tr><td data-num=\"158\"></td><td><pre>PAGE:004DD4F2                 mov     esp, [ebp+ms_exc.old_esp]</pre></td></tr><tr><td data-num=\"159\"></td><td><pre>PAGE:004DD4F5</pre></td></tr><tr><td data-num=\"160\"></td><td><pre>PAGE:004DD4F5 loc_4DD4F5:                             ; CODE XREF: NtWriteVirtualMemory (x,x,x,x,x)+EC↑j</pre></td></tr><tr><td data-num=\"161\"></td><td><pre>PAGE:004DD4F5                 or      [ebp+ms_exc.registration.TryLevel], 0FFFFFFFFh</pre></td></tr><tr><td data-num=\"162\"></td><td><pre>PAGE:004DD4F9</pre></td></tr><tr><td data-num=\"163\"></td><td><pre>PAGE:004DD4F9 loc_4DD4F9:                             ; CODE XREF: NtWriteVirtualMemory (x,x,x,x,x)+DE↑j</pre></td></tr><tr><td data-num=\"164\"></td><td><pre>PAGE:004DD4F9                 mov     eax, [ebp+Status]</pre></td></tr><tr><td data-num=\"165\"></td><td><pre>PAGE:004DD4FC</pre></td></tr><tr><td data-num=\"166\"></td><td><pre>PAGE:004DD4FC loc_4DD4FC:                             ; CODE XREF: NtWriteVirtualMemory (x,x,x,x,x)+81↑j</pre></td></tr><tr><td data-num=\"167\"></td><td><pre>PAGE:004DD4FC                                         ; NtWriteVirtualMemory (x,x,x,x,x)+88↑j</pre></td></tr><tr><td data-num=\"168\"></td><td><pre>PAGE:004DD4FC                 call    __SEH_epilog</pre></td></tr><tr><td data-num=\"169\"></td><td><pre>PAGE:004DD501                 retn    14h</pre></td></tr><tr><td data-num=\"170\"></td><td><pre>PAGE:004DD501 ; &#125; &#x2F;&#x2F;starts at 4DD400</pre></td></tr><tr><td data-num=\"171\"></td><td><pre>PAGE:004DD501 _NtWriteVirtualMemory@20 endp</pre></td></tr><tr><td data-num=\"172\"></td><td><pre>PAGE:004DD501</pre></td></tr><tr><td data-num=\"173\"></td><td><pre>PAGE:004DD501 ; ---------------------------------------------------------------------------</pre></td></tr></table></figure></div></details>\n<p>传递的参数不一样，就造成了不一样的效果。</p>\n<p>分完就会发现读写的操作完全是一个逆过程。</p>\n<h1 id=\"总结-2\"><a class=\"anchor\" href=\"#总结-2\">#</a> 总结</h1>\n<p>NtReadVirtualMemory 流程解析：</p>\n<p><img data-src=\"image005.png\" alt=\"\" /></p>\n<p>NtWriteVirtualMemory 流程解析：</p>\n<p><img data-src=\"image006.png\" alt=\"\" /></p>\n<p>分析其不同：<br />\nNtReadVirtualMemory</p>\n<p><img data-src=\"image007.png\" alt=\"\" /></p>\n<p>NtWriteVirtualMemory</p>\n<p><img data-src=\"image008.png\" alt=\"\" /></p>\n<h2 id=\"实践\"><a class=\"anchor\" href=\"#实践\">#</a> 实践</h2>\n<p>重写函数</p>\n<p>R0 R3 ?</p>\n",
            "tags": [
                "进程挂靠",
                "跨进程读写内存",
                "APC",
                "逆向分析NtReadVirtualMemory",
                "逆向分析NtWriteVIrtualMemory"
            ]
        },
        {
            "id": "https://or0kit.github.io/Bin/Core/WindowsXp/Process-Thread/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B-Windows%E7%BA%BF%E7%A8%8B%E5%88%87%E6%8D%A2/",
            "url": "https://or0kit.github.io/Bin/Core/WindowsXp/Process-Thread/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B-Windows%E7%BA%BF%E7%A8%8B%E5%88%87%E6%8D%A2/",
            "title": "进程与线程-Windows线程切换",
            "date_published": "2022-01-21T07:33:33.000Z",
            "content_html": "<h1 id=\"楔子\"><a class=\"anchor\" href=\"#楔子\">#</a> 楔子</h1>\n<p>线程切换是操作系统的核心内容，几乎所有的内核 API 都会调用切换线程的函数。</p>\n<blockquote>\n<p>我们要解决以下这些问题，带着问题去学习。</p>\n</blockquote>\n<ol>\n<li>SwapContext 有几个参数，分别是什么？</li>\n<li>SwapContext 在哪里实现了线程切换</li>\n<li>线程切换的时候，会切换 CR3 吗？切换 CR3 的条件是什么？</li>\n<li>中断门提权时，CPU 会从 TSS 得到 ESP0 和 SS0，TSS 中存储的一定是当前线程的 ESP0 和 SS0 吗？如何做到的？</li>\n<li>FS:[0] 在 3 环指向 TEB，但是线程有很多，FS:[0] 指向的是哪个线程的 TEB，如何做到的？</li>\n<li>0 环的 ExceptionList 在哪里备份的？</li>\n<li>IdleThread 是什么？什么时候执行？找到这个函数.</li>\n<li>如何找到下一个就绪线程？</li>\n<li>模拟线程切换与 Windows 线程切换有哪些区别？</li>\n</ol>\n<h1 id=\"windows线程切换\"><a class=\"anchor\" href=\"#windows线程切换\">#</a> Windows 线程切换</h1>\n<h2 id=\"主动切换切换\"><a class=\"anchor\" href=\"#主动切换切换\">#</a> 主动切换切换</h2>\n<p>在上一篇模模拟 Windows 线程切换 (ThreadSwitch) 中，有一个重要的函数： <code>SwitchContext</code>  只有调用这个函数，就会导致线程切换。<br />\nWindows 也有类似的函数： <code>KiSwapContext</code></p>\n<h3 id=\"kiswapcontext函数\"><a class=\"anchor\" href=\"#kiswapcontext函数\">#</a> KiSwapContext 函数</h3>\n<p>此函数在内核文件  <code>ntkrnlpa.exe</code> / <code>ntoskrnl.exe</code>  中。</p>\n<p>在 IDA 中查看其反汇编：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>.text:0046EA9C ; __fastcall KiSwapContext (x)</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>.text:0046EA9C @KiSwapContext@4 proc near              ; CODE XREF: KiSwapThread ()+85↑p</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>.text:0046EA9C</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>.text:0046EA9C var_10          &#x3D; dword ptr -10h</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>.text:0046EA9C var_C           &#x3D; dword ptr -0Ch</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>.text:0046EA9C var_8           &#x3D; dword ptr -8</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>.text:0046EA9C var_4           &#x3D; dword ptr -4</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>.text:0046EA9C</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>.text:0046EA9C                 sub     esp, 10h        ; 使用 fastcall 调用方式。</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>.text:0046EA9C                                         ; 寄存器传参，因此要将使用到的寄存器保存在堆栈中。</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>.text:0046EA9F                 mov     [esp+0Ch], ebx  ; 入栈</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>.text:0046EAA3                 mov     [esp+8], esi</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>.text:0046EAA7                 mov     [esp+4], edi</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>.text:0046EAAB                 mov     [esp], ebp</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>.text:0046EAAE                 mov     ebx, large fs:1Ch ; _KPCR.SelfPcr</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>.text:0046EAB5                 mov     esi, ecx        ; ecx: 新线程的_ETHREAD</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>.text:0046EAB7                 mov     edi, [ebx+124h] ; 取当前正在运行的线程的结构体</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>.text:0046EABD                 mov     [ebx+124h], esi ; 修改 KPCR，换成新线程的 ETHREAD 结构体</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>.text:0046EAC3                 mov     cl, [edi+58h]   ; _ETHREAD.Tcb.WaitIrql</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>.text:0046EAC6                 call    SwapContext</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>.text:0046EACB                 mov     ebp, [esp]      ; 恢复新线程各种寄存器</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>.text:0046EACE                 mov     edi, [esp+4]</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>.text:0046EAD2                 mov     esi, [esp+8]</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>.text:0046EAD6                 mov     ebx, [esp+0Ch]</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>.text:0046EADA                 add     esp, 10h</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>.text:0046EADD                 retn</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>.text:0046EADD @KiSwapContext@4 endp</pre></td></tr></table></figure><p>这个函数并不是真正的线程切换，只是更改了 KPCR 中的 ETHREAD 结构体。把要旧的结构体换成了新的。</p>\n<p>关于  <code>SwapContext</code>  函数，后面在详细对其逆向分析。</p>\n<h3 id=\"查看调用kiswapcontext的函数\"><a class=\"anchor\" href=\"#查看调用kiswapcontext的函数\">#</a> 查看调用 KiSwapContext 的函数</h3>\n<p>在 IDA 中使用交叉引用：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Direction</th>\n<th style=\"text-align:left\">Type</th>\n<th style=\"text-align:left\">Address</th>\n<th style=\"text-align:left\">Text</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">Up</td>\n<td style=\"text-align:left\">p</td>\n<td style=\"text-align:left\">KiSwapThread()+85</td>\n<td style=\"text-align:left\">call    @KiSwapContext@4; KiSwapContext(x)</td>\n</tr>\n</tbody>\n</table>\n<p>发现 KiSwapThread 调用的 KiSwaoContext 。接着查看 KiSwapThread 的交叉引用：</p>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<p>发现有 7 个函数调用了 KiSwapThread 。我们再随便找一个函数，查看其交叉引用：</p>\n<p><img data-src=\"image002.png\" alt=\"\" /></p>\n<p>发现有 270 个函数，这就意味着我们调用了这里面的任何一个函数都会导致线程切换，而这些函数还有上层调用的它们的函数，所以我们可以得出一个结论：<strong>Windows 中绝大部分 API 都调用了 SwapContext 函数</strong>，也就是说，当前线程只要调用了 API，就会导致线程切换。</p>\n<h3 id=\"swapcontext-函数\"><a class=\"anchor\" href=\"#swapcontext-函数\">#</a> SwapContext 函数</h3>\n<p>这个函数目前我还不能完全理解。大部分是偷看海哥视频里的注释。</p>\n<p>在 IDA 中逆向分析如下：</p>\n<p><img data-src=\"image003.png\" alt=\"\" /></p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>.text:0046EBC0 SwapContext     proc near               ; CODE XREF: KiUnlockDispatcherDatabase (x)+99↑p</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>.text:0046EBC0                                         ; KiSwapContext (x)+2A↑p ...</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>.text:0046EBC0</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>.text:0046EBC0 ; FUNCTION CHUNK AT .text:0046ED48 SIZE 00000033 BYTES</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>.text:0046EBC0</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>.text:0046EBC0                 or      cl, cl</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>.text:0046EBC2                 mov     es:[esi+_ETHREAD.Tcb.State], 2 ; 1 就绪 2 运行 5 等待</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>.text:0046EBC7                 pushf</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>.text:0046EBC8                 lea     ecx, [ebx+540h]</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>.text:0046EBCE                 call    @KeAcquireQueuedSpinLockAtDpcLevel@4 ; KeAcquireQueuedSpinLockAtDpcLevel (x)</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>.text:0046EBD3                 lea     ecx, [ebx+_KPCR.PrcbData.LockQueue]</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>.text:0046EBD9                 call    @KeReleaseQueuedSpinLockFromDpcLevel@4 ; KeReleaseQueuedSpinLockFromDpcLevel (x)</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>.text:0046EBDE</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>.text:0046EBDE loc_46EBDE:                             ; CODE XREF: KiIdleLoop ()+7C↓j</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>.text:0046EBDE                 mov     ecx, [ebx+_KPCR.NtTib.ExceptionList] ; 保存本线程切换时的内核 SEH 链表</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>.text:0046EBE0                 cmp     [ebx+_KPCR.PrcbData.DpcRoutineActive], 0 ; 是否有 DPC 有就蓝屏</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>.text:0046EBE7                 push    ecx</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>.text:0046EBE8                 jnz     loc_46ED71</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>.text:0046EBEE                 cmp     ds:_PPerfGlobalGroupMask, 0 ; LOG 用的 Windows 自己调试用的 别的地方没有用</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>.text:0046EBF5                 jnz     loc_46ED48</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>.text:0046EBFB</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>.text:0046EBFB loc_46EBFB:                             ; CODE XREF: SwapContext+190↓j</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>.text:0046EBFB                                         ; SwapContext+1A1↓j ...</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>.text:0046EBFB                 mov     ebp, cr0        ; cr0 控制寄存器可以判断当前环境是实模式还是保护模式，是否开启分页模式，写保护</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>.text:0046EBFE                 mov     edx, ebp</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>.text:0046EC00                 cmp     [edi+_ETHREAD.Tcb.NpxState], 0 ; NpxState 与浮点处理器相关，运行浮点用这个，没运行就不用。</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>.text:0046EC04                 jz      loc_46ED23      ; cr0 寄存器相关的</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>.text:0046EC0A</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>.text:0046EC0A loc_46EC0A:                             ; CODE XREF: _ScPatchFxe+E↓j</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>.text:0046EC0A                 mov     cl, [esi+_ETHREAD.Tcb.DebugActive]</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>.text:0046EC0D                 mov     [ebx+_KPCR.DebugActive], cl ; 新的线程的调试状态，更新到 KPCR 中</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>.text:0046EC10                 cli                     ; cli 不会被时钟中断了</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>.text:0046EC11                 mov     [edi+_ETHREAD.Tcb.KernelStack], esp ; 把当前的 esp 存储到旧线程的 ETHREAD 中</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>.text:0046EC14                 mov     eax, [esi+_ETHREAD.Tcb.InitialStack] ; 新线程的栈底</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>.text:0046EC17                 mov     ecx, [esi+_ETHREAD.Tcb.StackLimit]</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>.text:0046EC1A                 sub     eax, 210h       ; 减去 210H 就是将上面保存的浮点寄存器去掉 现在是真正的栈底了</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>.text:0046EC1F                 mov     [ebx+_KPCR.NtTib.StackLimit], ecx ; 更新 KPCR</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>.text:0046EC22                 mov     [ebx+_KPCR.NtTib.StackBase], eax ; 更新 KPCR</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>.text:0046EC25                 xor     ecx, ecx</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>.text:0046EC27                 mov     cl, [esi+_ETHREAD.Tcb.NpxState] ; 判断 NpxState 有没有浮点支持。</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>.text:0046EC27                                         ; 如果上一个线程和要替换的线程对浮点支持是一样的那就不用换 CR0，不一样就要换。</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>.text:0046EC2A                 and     edx, 0FFFFFFF1h</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>.text:0046EC2D                 or      ecx, edx</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>.text:0046EC2F                 or      ecx, [eax+20Ch]</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>.text:0046EC35                 cmp     ebp, ecx</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>.text:0046EC37                 jnz     loc_46ED1B</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>.text:0046EC3D                 lea     ecx, [ecx+0]</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>.text:0046EC40</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>.text:0046EC40 loc_46EC40:                             ; CODE XREF: SwapContext+15E↓j</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>.text:0046EC40                 test    dword ptr [eax-1Ch], 20000h ; 检查是否是虚拟 8086 模式，</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>.text:0046EC40                                         ; 如果不是的话 eax-10h 也就是减掉_KTRAP_FRAME 中的</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>.text:0046EC40                                         ; +0x07c V86Es            : Uint4B</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>.text:0046EC40                                         ; +0x080 V86Ds            : Uint4B</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>.text:0046EC40                                         ; +0x084 V86Fs            : Uint4B</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>.text:0046EC40                                         ; +0x088 V86Gs            : Uint4B</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>.text:0046EC40                                         ; 4 个成员。</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>.text:0046EC40                                         ; 如果是那就不减。</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>.text:0046EC47                 jnz     short loc_46EC4C ; 取 TSS（TSS 就是 3 环向 0 环切的时候，去 TSS 取 ESP0 和 SS0 别的没用）</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>.text:0046EC49                 sub     eax, 10h</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>.text:0046EC4C</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>.text:0046EC4C loc_46EC4C:                             ; CODE XREF: SwapContext+87↑j</pre></td></tr><tr><td data-num=\"62\"></td><td><pre>.text:0046EC4C                 mov     ecx, [ebx+_KPCR.TSS] ; 取 TSS（TSS 就是 3 环向 0 环切的时候，去 TSS 取 ESP0 和 SS0 别的没用）</pre></td></tr><tr><td data-num=\"63\"></td><td><pre>.text:0046EC4F                 mov     [ecx+_KTSS.Esp0], eax ; 更新 TTS 中的 Esp0</pre></td></tr><tr><td data-num=\"64\"></td><td><pre>.text:0046EC52                 mov     esp, [esi+_ETHREAD.Tcb.KernelStack] ; 将新线程的 esp 存到当前的 esp 寄存器中</pre></td></tr><tr><td data-num=\"65\"></td><td><pre>.text:0046EC55                 mov     eax, [esi+_ETHREAD.Tcb.Teb] ; 当前线程有很多状态 一份在 ETHREAD 里面 还有一个备份在 FS 中</pre></td></tr><tr><td data-num=\"66\"></td><td><pre>.text:0046EC55                                         ; 这样的好处是 在 3 环可以通过 fs 获取当前线程的信息</pre></td></tr><tr><td data-num=\"67\"></td><td><pre>.text:0046EC58                 mov     [ebx+_KPCR.NtTib.Self], eax ; 临时存储新线程的 TEB</pre></td></tr><tr><td data-num=\"68\"></td><td><pre>.text:0046EC5B                 sti                     ; 开启时钟中断</pre></td></tr><tr><td data-num=\"69\"></td><td><pre>.text:0046EC5C                 mov     eax, [edi+_ETHREAD.Tcb.ApcState.Process]</pre></td></tr><tr><td data-num=\"70\"></td><td><pre>.text:0046EC5F                 cmp     eax, [esi+_ETHREAD.Tcb.ApcState.Process] ; 查看是否是同一个进程内的线程切换</pre></td></tr><tr><td data-num=\"71\"></td><td><pre>.text:0046EC62                 mov     [edi+_ETHREAD.Tcb.IdleSwapBlock], 0</pre></td></tr><tr><td data-num=\"72\"></td><td><pre>.text:0046EC66                 jz      short loc_46ECA8 ; 如果是一个进程内的线程切换，则跳转。</pre></td></tr><tr><td data-num=\"73\"></td><td><pre>.text:0046EC68                 mov     edi, [esi+_ETHREAD.Tcb.ApcState.Process] ; 如果不是一个进程，取出新线程的进程结构体</pre></td></tr><tr><td data-num=\"74\"></td><td><pre>.text:0046EC6B                 mov     ecx, [ebx+_KPCR.SetMember]</pre></td></tr><tr><td data-num=\"75\"></td><td><pre>.text:0046EC6E                 xor     [eax+34h], ecx</pre></td></tr><tr><td data-num=\"76\"></td><td><pre>.text:0046EC71                 xor     [edi+_EPROCESS.Pcb.ActiveProcessors], ecx ; ActiveProcessors 记录了当前进程正在哪些处理器上运行</pre></td></tr><tr><td data-num=\"77\"></td><td><pre>.text:0046EC74                 test    [edi+_EPROCESS.Pcb.LdtDescriptor.LimitLow], 0FFFFh ; 判断 LDT</pre></td></tr><tr><td data-num=\"78\"></td><td><pre>.text:0046EC7A                 jnz     short loc_46ECED</pre></td></tr><tr><td data-num=\"79\"></td><td><pre>.text:0046EC7C                 xor     eax, eax</pre></td></tr><tr><td data-num=\"80\"></td><td><pre>.text:0046EC7E</pre></td></tr><tr><td data-num=\"81\"></td><td><pre>.text:0046EC7E loc_46EC7E:                             ; CODE XREF: SwapContext+156↓j</pre></td></tr><tr><td data-num=\"82\"></td><td><pre>.text:0046EC7E                 lldt    ax              ; 修改 LDT 寄存器</pre></td></tr><tr><td data-num=\"83\"></td><td><pre>.text:0046EC81                 lea     ecx, [ebx+540h]</pre></td></tr><tr><td data-num=\"84\"></td><td><pre>.text:0046EC87                 call    @KeReleaseQueuedSpinLockFromDpcLevel@4 ; KeReleaseQueuedSpinLockFromDpcLevel (x)</pre></td></tr><tr><td data-num=\"85\"></td><td><pre>.text:0046EC8C                 xor     eax, eax</pre></td></tr><tr><td data-num=\"86\"></td><td><pre>.text:0046EC8E                 mov     gs, eax         ; GS 清零</pre></td></tr><tr><td data-num=\"87\"></td><td><pre>.text:0046EC90                 assume gs:nothing</pre></td></tr><tr><td data-num=\"88\"></td><td><pre>.text:0046EC90                 mov     eax, [edi+_EPROCESS.Pcb.DirectoryTableBase] ; 取新线程的 CR3</pre></td></tr><tr><td data-num=\"89\"></td><td><pre>.text:0046EC93                 mov     ebp, [ebx+_KPCR.TSS]</pre></td></tr><tr><td data-num=\"90\"></td><td><pre>.text:0046EC96                 mov     ecx, dword ptr [edi+_EPROCESS.Pcb.IopmOffset]</pre></td></tr><tr><td data-num=\"91\"></td><td><pre>.text:0046EC99                 mov     [ebp+_KTSS.CR3], eax</pre></td></tr><tr><td data-num=\"92\"></td><td><pre>.text:0046EC9C                 mov     cr3, eax        ; 切换 CR3</pre></td></tr><tr><td data-num=\"93\"></td><td><pre>.text:0046EC9F                 mov     [ebp+_KTSS.IoMapBase], cx  ; 存储 IO 权限位图到 TSS。当前线程的的 IO 权限位图 Windows 2000 以后不用了。</pre></td></tr><tr><td data-num=\"94\"></td><td><pre>.text:0046ECA3                 jmp     short loc_46ECB3</pre></td></tr><tr><td data-num=\"95\"></td><td><pre>.text:0046ECA3 ; ---------------------------------------------------------------------------</pre></td></tr><tr><td data-num=\"96\"></td><td><pre>.text:0046ECA5                 align 4</pre></td></tr><tr><td data-num=\"97\"></td><td><pre>.text:0046ECA8</pre></td></tr><tr><td data-num=\"98\"></td><td><pre>.text:0046ECA8 loc_46ECA8:                             ; CODE XREF: SwapContext+A6↑j</pre></td></tr><tr><td data-num=\"99\"></td><td><pre>.text:0046ECA8                 lea     ecx, [ebx+540h]</pre></td></tr><tr><td data-num=\"100\"></td><td><pre>.text:0046ECAE                 call    @KeReleaseQueuedSpinLockFromDpcLevel@4 ; KeReleaseQueuedSpinLockFromDpcLevel (x)</pre></td></tr><tr><td data-num=\"101\"></td><td><pre>.text:0046ECB3</pre></td></tr><tr><td data-num=\"102\"></td><td><pre>.text:0046ECB3 loc_46ECB3:                             ; CODE XREF: SwapContext+E3↑j</pre></td></tr><tr><td data-num=\"103\"></td><td><pre>.text:0046ECB3                 mov     eax, [ebx+_KPCR.NtTib.Self]</pre></td></tr><tr><td data-num=\"104\"></td><td><pre>.text:0046ECB6                 mov     ecx, [ebx+_KPCR.GDT] ;  假设 GDT 表在 0x8003f000</pre></td></tr><tr><td data-num=\"105\"></td><td><pre>.text:0046ECB6                                         ; ecx &#x3D; 0x8003f000</pre></td></tr><tr><td data-num=\"106\"></td><td><pre>.text:0046ECB6                                         ; 3 环 FS &#x3D; 0x3B</pre></td></tr><tr><td data-num=\"107\"></td><td><pre>.text:0046ECB6                                         ; 所以 FS 在 GDT 表里的地址是 0x8003f03B</pre></td></tr><tr><td data-num=\"108\"></td><td><pre>.text:0046ECB6                                         ; 下面的操作是修改 FS 的段描述符，这样 3 环 FS 就能找到 TEB 了</pre></td></tr><tr><td data-num=\"109\"></td><td><pre>.text:0046ECB9                 mov     [ecx+3Ah], ax</pre></td></tr><tr><td data-num=\"110\"></td><td><pre>.text:0046ECBD                 shr     eax, 10h</pre></td></tr><tr><td data-num=\"111\"></td><td><pre>.text:0046ECC0                 mov     [ecx+3Ch], al</pre></td></tr><tr><td data-num=\"112\"></td><td><pre>.text:0046ECC3                 mov     [ecx+3Fh], ah</pre></td></tr><tr><td data-num=\"113\"></td><td><pre>.text:0046ECC6                 inc     [esi+_ETHREAD.Tcb.ContextSwitches]</pre></td></tr><tr><td data-num=\"114\"></td><td><pre>.text:0046ECC9                 inc     [ebx+_KPCR.PrcbData.KeContextSwitches]</pre></td></tr><tr><td data-num=\"115\"></td><td><pre>.text:0046ECCF                 pop     ecx</pre></td></tr><tr><td data-num=\"116\"></td><td><pre>.text:0046ECD0                 mov     [ebx], ecx</pre></td></tr><tr><td data-num=\"117\"></td><td><pre>.text:0046ECD2                 cmp     byte ptr [esi+49h], 0</pre></td></tr><tr><td data-num=\"118\"></td><td><pre>.text:0046ECD6                 jnz     short loc_46ECDC</pre></td></tr><tr><td data-num=\"119\"></td><td><pre>.text:0046ECD8                 popf</pre></td></tr><tr><td data-num=\"120\"></td><td><pre>.text:0046ECD9                 xor     eax, eax</pre></td></tr><tr><td data-num=\"121\"></td><td><pre>.text:0046ECDB                 retn</pre></td></tr></table></figure><p>结合以下的两张图可以的更好理解 <code>SwapContext</code>  函数，关于这两张图，后面会详细说明。</p>\n<p><img data-src=\"image004.png\" alt=\"\" />   <img data-src=\"image005.png\" alt=\"\" /></p>\n<h3 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h3>\n<ol>\n<li>Windows 中绝大部分 API 都调用了 SwapContext 函数</li>\n</ol>\n<p>也就是说，当线程只要调用了 API，就是导致线程切换。</p>\n<ol start=\"2\">\n<li>线程切换时会比较是否属于同一个进程，如果不是，切换 Cr3</li>\n</ol>\n<p>Cr3 换了，进程也就切换了。</p>\n<p>那么如果不调用 API，就可以一直占用 CPU 吗？</p>\n<h2 id=\"线程被动切换\"><a class=\"anchor\" href=\"#线程被动切换\">#</a> 线程被动切换</h2>\n<p>一个线程并不是必须自身调用 API 来实现线程切换，其他可以引起中断。</p>\n<p>两类：①异常 / 中断；②时钟中断。</p>\n<h3 id=\"时钟中断\"><a class=\"anchor\" href=\"#时钟中断\">#</a> 时钟中断</h3>\n<p>时钟中断走 0x30 号中断，系统每过 20ms 触发一次时钟中断来 (可能) 切换线程。</p>\n<p>如要获取当前的时钟间隔值，可使用 Win32 API： <code>GetSystemTimeAdjustment</code></p>\n<p>时钟中断的执行流程如下：</p>\n<p><img data-src=\"image006.png\" alt=\"\" /></p>\n<h4 id=\"总结-2\"><a class=\"anchor\" href=\"#总结-2\">#</a> 总结</h4>\n<p>线程切换的几种情况：</p>\n<ol>\n<li>主动调用 API 函数</li>\n<li>时钟中断</li>\n<li>异常处理</li>\n</ol>\n<p>如果一个线程不调用 API，在代码中屏蔽中断 (CLI 指令), 并且不会出现异常，那么当前线程将永久占有 CPU, 单核占有率 100%，2 核就是 50%。</p>\n<h3 id=\"时间片管理\"><a class=\"anchor\" href=\"#时间片管理\">#</a> 时间片管理</h3>\n<p>在上面我们知道时钟中断会导致线程进行切换，但并不是说只要有时钟中断就一定会切换线程，时钟中断时，两种情况会导致线程切换：</p>\n<p>1、当前的线程 CPU 时间片到期</p>\n<p>2、有备用线程 (KPCR.PrcbData.NextThread)</p>\n<h4 id=\"关于cpu时间片\"><a class=\"anchor\" href=\"#关于cpu时间片\">#</a> 关于 CPU 时间片</h4>\n<ol>\n<li>当一个新的线程开始执行时，初始化程序会在 <code>_KTHREAD.Quantum</code>  赋初始值，该值的大小由 <code>_KPROCESS.ThreadQuantum</code>  决定<br />\n (观察 <code>ThreadQuantum</code>  大小)</li>\n</ol>\n<p>这是属于某个进程的线程的  <code>Quantum</code>  的值</p>\n<p><img data-src=\"image007.png\" alt=\"\" /></p>\n<p>这是其进程的  <code>ThreadQuantum</code>  的值</p>\n<p><img data-src=\"image008.png\" alt=\"\" /></p>\n<ol start=\"2\">\n<li>每次时钟中断会调用 <code>KeUpdateRunTime</code>  函数，该函数每次将当前线程 <code>Quantum</code>  减少 3 个单位，如果减到 0，则将 <code>KPCR.PrcbData.QuantumEnd</code>  的值设置为非 0。</li>\n</ol>\n<p>在 IDA 中逆向分析  <code>KeUpdateRunTime</code>  函数：</p>\n<p><img data-src=\"image009.png\" alt=\"\" /></p>\n<p><code>KPCR.PrcbData.QuantumEnd</code>  的值代表着时间片是否用完，没有用完时它的值是 0 ，用完的话就是非 0 了。</p>\n<ol start=\"3\">\n<li><code>KiDispatchInterrupt</code>  判断时间片到期：</li>\n</ol>\n<p>调用 <code>KiQuantumEnd</code>  (重新设置时间片、找到要运行的线程)</p>\n<p>这是时钟中断最后要执行的函数。</p>\n<p>在 IDA 中逆向分析  <code>KiDispatchInterrupt</code>  函数：</p>\n<p><img data-src=\"image010.png\" alt=\"\" /></p>\n<p><code>KiQuantumEnd</code>  这个函数做的事情主要就是这个：</p>\n<p><img data-src=\"image011.png\" alt=\"\" /></p>\n<p>重新设置时间片：进程中原本是多少，还设置成多少。<br />\n之后会调用 <code>KiFindReadyThread</code>  切换线程的状态，然后执行  <code>SwapContext</code>  切换线程。</p>\n<p>在 IDA 中看 <code>KiFindReadyThread</code>  的关键操作：</p>\n<p><img data-src=\"image012.png\" alt=\"\" /></p>\n<p>从汇编的角度看双向链表的添加操作……</p>\n<h4 id=\"有备用线程的情况下\"><a class=\"anchor\" href=\"#有备用线程的情况下\">#</a> 有备用线程的情况下</h4>\n<p>分析 <code>KiDispatchInterrupt</code>  函数我们可以得知另一种情况，当时间片没有耗尽，但存在备用线程时，仍然会切换线程，若没有备用线程就直接返回了。</p>\n<p><img data-src=\"image013.png\" alt=\"\" /></p>\n<h2 id=\"线程切换的三种情况总述\"><a class=\"anchor\" href=\"#线程切换的三种情况总述\">#</a> 线程切换的三种情况总述</h2>\n<p>1)、当前线程主动调用 API：</p>\n<p>API 函数 ---&gt;  <code>KiSwapThread</code>   ---&gt;  <code>KiSwapContext</code>  ---&gt;  <code>SwapContext</code></p>\n<p>(2)、当前线程时间片到期：</p>\n<p><code>KiDispatchInterrupt</code>  ---&gt;  <code>KiQuantumEnd</code>  ---&gt;  <code>KiFindReadyThread</code>  ---&gt;  <code>SwapContext</code></p>\n<p>(3)、有备用线程 (KPCR.PrcbData.NextThread)</p>\n<p><code>KiDispatchInterrupt</code>  ---&gt;  <code>KiFindReadyThread</code>  ---&gt;  <code>SwapContext</code></p>\n<h2 id=\"线程切换与tss\"><a class=\"anchor\" href=\"#线程切换与tss\">#</a> 线程切换与 TSS</h2>\n<p><code>SwapContext</code>  这个函数是 Windows 线程切换的核心，无论是主动切换还是系统时钟导致的线程切换，最终都会调用这个函数。在这个函数中除了切换堆栈以外，还做了很多其他的事情，了解这些细节对我们学习操作系统至关重要。</p>\n<p>我们了解一下线程切换与 TSS 的关系。</p>\n<h3 id=\"内核堆栈\"><a class=\"anchor\" href=\"#内核堆栈\">#</a> 内核堆栈</h3>\n<p>在_KTHREAD 结构体中有三个成员：<br />\n <code>InitialStack</code>  栈底<br />\n <code>KernelStack</code>  栈顶<br />\n <code>StackLimit</code>  栈的边界</p>\n<p>由此我们可以大致了解内核堆栈信息：</p>\n<p><img data-src=\"image014.png\" alt=\"\" /></p>\n<h3 id=\"内核堆栈的结构\"><a class=\"anchor\" href=\"#内核堆栈的结构\">#</a> 内核堆栈的结构</h3>\n<p>对于内核堆栈的结构，在通过逆向 <code>SwapContext</code>  函数时，我们已经发现了一些端倪，如下：</p>\n<p><img data-src=\"image015.png\" alt=\"\" /></p>\n<p>也就是说从线程的 <code>InitialStack</code>  栈底开始往上 0x210 个字节 是存储着浮点寄存器的值，而后紧接着就是 <code>_Trap_Frame</code>  结构</p>\n<p><img data-src=\"image005.png\" alt=\"\" /></p>\n<p>之后又判断了是否处于虚拟 8086 模式，对 0 环栈底做了进一步的处理。附上 <code>_Trap_Frame</code>  结构图：</p>\n<p><img data-src=\"image016.png\" alt=\"\" /></p>\n<h3 id=\"调用api进0环\"><a class=\"anchor\" href=\"#调用api进0环\">#</a> 调用 API 进 0 环</h3>\n<p>普通调用：通过 <code>TSS.ESP0</code>  得到 0 环堆栈。---- 既中断门提权</p>\n<p>快速调用：从 MSR 得到一个临时 0 环栈，代码执行后仍然<br />\n通过 TSS.ESP0 得到当前线程 0 环堆栈。</p>\n<p><img data-src=\"image017.png\" alt=\"\" /></p>\n<h3 id=\"如何用tss保存所有线程的esp0\"><a class=\"anchor\" href=\"#如何用tss保存所有线程的esp0\">#</a> 如何用 TSS 保存所有线程的 ESP0</h3>\n<p>Intel 设计 TSS 的目的是为了任务切换 (线程切换), 但 Windows 与 Linux<br />\n 并没有使用。而是采用堆栈来保存线程的各种寄存器。</p>\n<p>一个 CPU 只有一个 TSS, 但是线程很多，如何用一个 TSS 来保存所有<br />\n线程的 ESP0 呢？</p>\n<p>在 <code>SwapContext</code>  函数中查找与 TTS 相关的代码（这里改了后面肯定是要用的）：</p>\n<p><img data-src=\"image018.png\" alt=\"\" /></p>\n<p>发现有三个位置与 TSS 有联系，其中第一处就是我们要找的答案，eax 存储的就是处理后的线程的 0 环 ESP。<br />\n<strong>每一次线程切换都会更新这个值，把对应线程的 0 环堆栈存储在 TTS.Esp0 的位置。</strong></p>\n<p>第二处是把当前线程所属进程的 CR3 也存储到了 TSS 中。<br />\n第三处是 IO 权限位图。</p>\n<h2 id=\"线程切换与fs\"><a class=\"anchor\" href=\"#线程切换与fs\">#</a> 线程切换与 FS</h2>\n<p>FS:[0] 寄存器在 3 环时指向 TEB, 进入 0 环后 FS:[0] 指向 KPCR。但系统中同时存在很多个线程，这就意味着 FS:[0] 在 3 环时指向的 TEB 要有多个 (每个线程一份)。</p>\n<p>但在实际的使用中我们发现，当我们在 3 环查看不同线程的 FS 寄存器时，FS 的段选择子都是相同的，那是如何实现通过一个 FS 寄存器指向多个 TEB 呢？</p>\n<p>我们还是分析 <code>SwapContext</code>  函数中查找与 FS 相关的代码：</p>\n<p><img data-src=\"image019.png\" alt=\"\" /></p>\n<p><strong>线程切换的时候每次都在 GDT 表中索引为 0x3B 的地址构建每个线程关于 TEB 的段描述符</strong></p>\n<p>附上段描述符的结构：</p>\n<p><img data-src=\"image020.png\" alt=\"\" /></p>\n<h2 id=\"线程切换与线程优先级\"><a class=\"anchor\" href=\"#线程切换与线程优先级\">#</a> 线程切换与线程优先级</h2>\n<p>在 <code>KiSwapThread</code>  与 <code>KiQuantumEnd</code>  函数中都是通过 <code>KiFindReadyThread</code>  来找下一个要切换的线程， <code>KiFindReadyThread</code>  是根据什么条件来选择下一个要执行的线程呢？</p>\n<h3 id=\"调度链表32个\"><a class=\"anchor\" href=\"#调度链表32个\">#</a> 调度链表（32 个）</h3>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kd&gt; dd KiDispatcherReadyListHead</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>8055bc20  8055bc20 8055bc20 8055bc28 8055bc28</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>8055bc30  8055bc30 8055bc30 8055bc38 8055bc38</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>8055bc40  8055bc40 8055bc40 8055bc48 8055bc48</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>8055bc50  8055bc50 8055bc50 8055bc58 8055bc58</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>8055bc60  8055bc60 8055bc60 8055bc68 8055bc68</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>8055bc70  8055bc70 8055bc70 8055bc78 8055bc78</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>8055bc80  8055bc80 8055bc80 8055bc88 8055bc88</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>8055bc90  8055bc90 8055bc90 8055bc98 8055bc98</pre></td></tr></table></figure><p><code>KiFindReadyThread</code>  查找方式：<br />\n按照优先级别进行查找：31..30..29..28.....</p>\n<p>也就是说，在<strong>本次查找</strong>中，如果级别 31 的链表里面有线程，那么就不会查找级别为 30 的链表！</p>\n<p>根据我学过的计算机操作系统的知识，由于调度算法，每次查找线程的时候，线程的优先级都会动态调整的。</p>\n<h3 id=\"如何高效查找\"><a class=\"anchor\" href=\"#如何高效查找\">#</a> 如何高效查找</h3>\n<p>调度链表有 32 个，每次都从头开始查找效率太低，所以 Windows 使用一个 DWORD 类型变量的变量来记录，利用其 32 个比特位的特性。<br />\n当向调度链表 (32 个) 中挂入或者摘除某个线程时，会判断当前级别的链表是否为空，为空将 DWORD 变量对应位置 0，否则置 1。</p>\n<p>如下图：</p>\n<p><img data-src=\"image021.png\" alt=\"\" /></p>\n<p>这个变量： <code>_kiReadySummary</code></p>\n<p>多 cpu 会随机寻找 <code>KiDispatcherReadyListHead</code>  指向的数组中的线程。线程可以绑定某个 cpu（使用 api： <code>setThreadAffinityMask</code> ）</p>\n<p>这里可以逆向分析一下 <code>KiFindReadyThread</code>  函数。详细见：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vb25ldHJhaW5lZS9wLzEyNzUyMTgzLmh0bWw=\">https://www.cnblogs.com/onetrainee/p/12752183.html</span></p>\n<h3 id=\"如果没有就绪线程怎么办\"><a class=\"anchor\" href=\"#如果没有就绪线程怎么办\">#</a> 如果没有就绪线程怎么办？</h3>\n<p>PrcbData：</p>\n<p>+0x004 CurrentThread    : Ptr32 _KTHREAD<br />\n+0x008 NextThread       : Ptr32 _KTHREAD<br />\n+0x00c IdleThread       : Ptr32 _KTHREAD</p>\n<p><img data-src=\"image022.png\" alt=\"\" /></p>\n<p>并且还修改了  <code>_KiIdleSummary</code>  这个变量。</p>\n<p>那我们如何找这个空闲线程的函数呢？</p>\n<p>用 Windbg 下断后，查看当前的  <code>KPRCB</code>  结构体，找到  <code>IdleThread</code>  线程的  <code>ETHREAD</code>  结构体。</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kd&gt; dt _KPRCB 0xFFDFF120</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>nt!_KPRCB</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   +0x000 MinorVersion     : 1</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   +0x002 MajorVersion     : 1</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   +0x004 CurrentThread    : 0x8055ce60 _KTHREAD</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   +0x008 NextThread       : (null) </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   +0x00c IdleThread       : 0x8055ce60 _KTHREAD</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   +0x010 Number           : 0 &#39;&#39;</pre></td></tr></table></figure><p>查看  <code>IdleThread</code>  线程的  <code>ETHREAD</code>  结构体。</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kd&gt; dt _ETHREAD 0x8055ce60 </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>nt!_ETHREAD</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   +0x000 Tcb              : _KTHREAD</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   +0x1c0 CreateTime       : _LARGE_INTEGER 0x0</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   +0x1c0 NestedFaultCount : 0y00</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   +0x1c0 ApcNeeded        : 0y0</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   +0x1c8 ExitTime         : _LARGE_INTEGER 0x0</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   +0x1c8 LpcReplyChain    : _LIST_ENTRY [ 0x0 - 0x0 ]</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   +0x1c8 KeyedWaitChain   : _LIST_ENTRY [ 0x0 - 0x0 ]</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   +0x1d0 ExitStatus       : 0n0</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   +0x1d0 OfsChain         : (null) </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   +0x1d4 PostBlockList    : _LIST_ENTRY [ 0x0 - 0x0 ]</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   +0x1dc TerminationPort  : (null) </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   +0x1dc ReaperLink       : (null) </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   +0x1dc KeyedWaitValue   : (null) </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   +0x1e0 ActiveTimerListLock : 0</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   +0x1e4 ActiveTimerListHead : _LIST_ENTRY [ 0x0 - 0x0 ]</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   +0x1ec Cid              : _CLIENT_ID</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   +0x1f4 LpcReplySemaphore : _KSEMAPHORE</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>   +0x1f4 KeyedWaitSemaphore : _KSEMAPHORE</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>   +0x208 LpcReplyMessage  : (null) </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>   +0x208 LpcWaitingOnPort : (null) </pre></td></tr><tr><td data-num=\"23\"></td><td><pre>   +0x20c ImpersonationInfo : (null) </pre></td></tr><tr><td data-num=\"24\"></td><td><pre>   +0x210 IrpList          : _LIST_ENTRY [ 0x0 - 0x0 ]</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>   +0x218 TopLevelIrp      : 0</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>   +0x21c DeviceToVerify   : (null) </pre></td></tr><tr><td data-num=\"27\"></td><td><pre>   +0x220 ThreadsProcess   : (null) </pre></td></tr><tr><td data-num=\"28\"></td><td><pre>   +0x224 StartAddress     : (null) </pre></td></tr><tr><td data-num=\"29\"></td><td><pre>   +0x228 Win32StartAddress : (null) </pre></td></tr><tr><td data-num=\"30\"></td><td><pre>   +0x228 LpcReceivedMessageId : 0</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>   +0x22c ThreadListEntry  : _LIST_ENTRY [ 0x0 - 0x0 ]</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>   +0x234 RundownProtect   : _EX_RUNDOWN_REF</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>   +0x238 ThreadLock       : _EX_PUSH_LOCK</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>   +0x23c LpcReplyMessageId : 0</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>   +0x240 ReadClusterSize  : 0</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>   +0x244 GrantedAccess    : 0x1f03ff</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>   +0x248 CrossThreadFlags : 0</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>   +0x248 Terminated       : 0y0</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>   +0x248 DeadThread       : 0y0</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>   +0x248 HideFromDebugger : 0y0</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>   +0x248 ActiveImpersonationInfo : 0y0</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>   +0x248 SystemThread     : 0y0</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>   +0x248 HardErrorsAreDisabled : 0y0</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>   +0x248 BreakOnTermination : 0y0</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>   +0x248 SkipCreationMsg  : 0y0</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>   +0x248 SkipTerminationMsg : 0y0</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>   +0x24c SameThreadPassiveFlags : 0</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>   +0x24c ActiveExWorker   : 0y0</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>   +0x24c ExWorkerCanWaitUser : 0y0</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>   +0x24c MemoryMaker      : 0y0</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>   +0x250 SameThreadApcFlags : 0</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>   +0x250 LpcReceivedMsgIdValid : 0y0</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>   +0x250 LpcExitThreadCalled : 0y0</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>   +0x250 AddressSpaceOwner : 0y0</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>   +0x254 ForwardClusterOnly : 0 &#39;&#39;</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>   +0x255 DisablePageFaultClustering : 0 &#39;&#39;</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>   +0x258 KernelStackReference : 0</pre></td></tr></table></figure><p>发现其  <code>+0x224 StartAddress     : (null)</code>  的值为空。找不到线程开始的地方。</p>\n<p>这里还是得逆向分析  <code>SwapContext</code>  函数：</p>\n<p>切换完 esp 后： <code>  mov     esp, [esi+_ETHREAD.Tcb.KernelStack] ; 将新线程的esp存到当前的esp寄存器中</code></p>\n<p>我们观察有几个出栈操作（pop、popf）</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>.text:0046ECCF                 pop     ecx</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>.text:0046ECD0                 mov     [ebx], ecx</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>.text:0046ECD2                 cmp     byte ptr [esi+49h], 0</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>.text:0046ECD6                 jnz     short loc_46ECDC</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>.text:0046ECD8                 popf</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>.text:0046ECD9                 xor     eax, eax</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>.text:0046ECDB                 retn</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>loc_46ECDC: </pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>.text:0046ECDC                 popf</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>.text:0046ECDD                 jnz     short loc_46ECE2</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>.text:0046ECDF                 mov     al, 1</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>.text:0046ECE1                 retn</pre></td></tr></table></figure><p><strong>发现总共执行了两次出栈操作</strong>，那我们直接去找 IdleThread 线程的 <code>_ETHREAD.Tcb.KernelStack</code>  的值</p>\n<p><code>[+0x028] KernelStack      : 0x8055244c [Type: void *]</code> <br />\n 在 windbg 中查看：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kd&gt; dd 0x8055244c </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>8055244c  00000000 ffdff980 80546e6c 00000000</pre></td></tr></table></figure><p>总共执行了两次出栈操作那么  <code>esp+8</code>  的位置就是  <code>retn</code>  返回  <code>eip</code>  要执行的地方。</p>\n<p>在本次实验中的值是  <code>80546e6c</code> ，在 windbg 中查看：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kd&gt; u 80546e6c </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>nt!KiIdleLoop+0x10:</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>80546e6c f390            pause</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>80546e6e fb              sti</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>80546e6f 90              nop</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>80546e70 90              nop</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>80546e71 fa              cli</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>80546e72 3b6d00          cmp     ebp,dword ptr [ebp]</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>80546e75 740d            je      nt!KiIdleLoop+0x28 (80546e84)</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>80546e77 b102            mov     cl,2</pre></td></tr></table></figure><p>发现执行的是  <code>KiIdleLoop+0x10</code>  的地方，所以  <code>KiIdleLoop</code>  就是我们要找的  <code>IdleThread</code>  线程的函数。</p>\n<p>可是这里我有个问题，执行了  <code>pop  ecx</code>  和  <code>popf</code>  ESP 的值不应该是加 6 吗？为什么去找 ESP 加 8 的位置呢？</p>\n<h1 id=\"总结-3\"><a class=\"anchor\" href=\"#总结-3\">#</a> 总结</h1>\n<ol>\n<li>SwapContext 有几个参数，分别是什么？</li>\n</ol>\n<p><img data-src=\"image023.png\" alt=\"\" /></p>\n<ol start=\"2\">\n<li>SwapContext 在哪里实现了线程切换</li>\n</ol>\n<p><img data-src=\"image024.png\" alt=\"\" /></p>\n<ol start=\"3\">\n<li>线程切换的时候，会切换 CR3 吗？切换 CR3 的条件是什么？</li>\n</ol>\n<p><img data-src=\"image025.png\" alt=\"\" /></p>\n<p>这里我们能够知道一个小知识：<strong>线程能读写地址，是由 0x44 位置的进程结构体的 CR3 决定的，并不是 0x220 的位置。</strong></p>\n<ol start=\"4\">\n<li>中断门提权时，CPU 会从 TSS 得到 ESP0 和 SS0，TSS 中存储的一定是当前线程的 ESP0 和 SS0 吗？如何做到的？</li>\n</ol>\n<p>上面已经详细解释了。<br />\n并没有存 SS0 的代码，因为所有线程的 SS0 的值是固定不变的，系统启动时已经填到 TSS 里，不需要在这里改了。</p>\n<p><img data-src=\"image026.png\" alt=\"\" /></p>\n<ol start=\"5\">\n<li>FS:[0] 在 3 环指向 TEB，但是线程有很多，FS:[0] 指向的是哪个线程的 TEB，如何做到的？</li>\n</ol>\n<p>上面已经详细解释了。<br />\n<strong>线程切换的时候每次都在 GDT 表中索引为 0x3B 的地址构建每个线程关于 TEB 的段描述符</strong></p>\n<p><img data-src=\"image019.png\" alt=\"\" /></p>\n<ol start=\"6\">\n<li>0 环的 ExceptionList 在哪里备份的？</li>\n</ol>\n<p><img data-src=\"image027.png\" alt=\"\" /></p>\n<ol start=\"7\">\n<li>IdleThread 是什么？什么时候执行？找到这个函数.</li>\n</ol>\n<p><img data-src=\"image022.png\" alt=\"\" /></p>\n<p>如何找到这个线程的函数上面也讲了。</p>\n<ol start=\"8\">\n<li>如何找到下一个就绪线程？</li>\n</ol>\n<p><code>KiFindReadyThread</code>  函数</p>\n<ol start=\"9\">\n<li>模拟线程切换与 Windows 线程切换有哪些区别？</li>\n</ol>\n<p>3 环与 0 环，真正的线程有两个栈，一个是 3 环的一个是 0 环的，模拟线程只有一个栈，还没用到异常链表、ss、TSS。</p>\n",
            "tags": [
                "Windows线程切换",
                "KiSwapContext",
                "SwapContext",
                "时钟中断",
                "时间片管理",
                "线程切换与TSS",
                "线程切换与FS",
                "线程切换与线程优先级"
            ]
        },
        {
            "id": "https://or0kit.github.io/Bin/Core/WindowsXp/Process-Thread/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B-%E6%A8%A1%E6%8B%9F%E7%BA%BF%E7%A8%8B%E5%88%87%E6%8D%A2/",
            "url": "https://or0kit.github.io/Bin/Core/WindowsXp/Process-Thread/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B-%E6%A8%A1%E6%8B%9F%E7%BA%BF%E7%A8%8B%E5%88%87%E6%8D%A2/",
            "title": "进程与线程-模拟线程切换",
            "date_published": "2022-01-17T06:46:30.000Z",
            "content_html": "<h1 id=\"模拟线程切换\"><a class=\"anchor\" href=\"#模拟线程切换\">#</a> 模拟线程切换</h1>\n<p>开始学习 Windows 的线程切换，线程切换比较复杂，为了更好的学习，我们要先读一份代码。</p>\n<p>关键结构体：</p>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<p>调度链表</p>\n<p><img data-src=\"image002.png\" alt=\"\" /></p>\n<p>创建结构体，挂到链表里，正在运行的线程在 KPCR 中，等待线程 与 33 个调度线程的，线程的状态，</p>\n<p>初始化线程的堆栈</p>\n<p><img data-src=\"image003.png\" alt=\"\" /></p>\n<h1 id=\"分析代码\"><a class=\"anchor\" href=\"#分析代码\">#</a> 分析代码</h1>\n<p>配合海哥的教程代码很好理解。</p>\n<h2 id=\"threadh\"><a class=\"anchor\" href=\"#threadh\">#</a> Thread.h</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\">once</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;windows.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 最大支持的线程数</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MAXGMTHREAD</span> <span class=\"token expression\"><span class=\"token number\">100</span></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 线程信息的结构</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">char</span><span class=\"token operator\">*</span> name<span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t<span class=\"token comment\">// 线程名 相当于线程 ID</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token keyword\">int</span> Flags<span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t<span class=\"token comment\">// 线程状态</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">int</span> SleepMillsecondDot<span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">// 休眠时间</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">void</span><span class=\"token operator\">*</span> initialStack<span class=\"token punctuation\">;</span>\t\t\t\t\t<span class=\"token comment\">// 线程堆栈起始位置</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token keyword\">void</span><span class=\"token operator\">*</span> StackLimit<span class=\"token punctuation\">;</span>\t\t\t\t\t<span class=\"token comment\">// 线程堆栈界限</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token keyword\">void</span><span class=\"token operator\">*</span> KernelStack<span class=\"token punctuation\">;</span>\t\t\t\t\t<span class=\"token comment\">// 线程堆栈当前位置，也就是 ESP</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token keyword\">void</span><span class=\"token operator\">*</span> lpParameter<span class=\"token punctuation\">;</span>\t\t\t\t\t<span class=\"token comment\">// 线程函数的参数</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token keyword\">void</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> lpParameter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 线程函数</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span>GMThread_t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">GMSleep</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> MilliSeconds<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">RegisterGMThread</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> lpParameter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span><span class=\"token operator\">*</span> lpParameter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Scheduling</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>模拟线程结构体，其中的  <code>initialStack</code>   <code>StackLimit</code>   <code>KernelStack</code>  是线程切换过程中关键的的参数。</p>\n<h2 id=\"threadcorecpp\"><a class=\"anchor\" href=\"#threadcorecpp\">#</a> ThreadCore.cpp</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ThreadCore.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 定义线程栈的大小</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">GMTHREADSTACKSIZE</span> <span class=\"token expression\"><span class=\"token number\">0x80000</span></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 当前线程的索引</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">int</span> CurrentThreadIndex <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 这样初始化使每个结构体的第一个成员为 NULL，其余全为 0，调试可看。</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 线程的列表</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>GMThread_t GMThreadList<span class=\"token punctuation\">[</span>MAXGMTHREAD<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">// 线程状态的标志</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">enum</span> <span class=\"token class-name\">FLAGS</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tGMTHREAD_CREATE <span class=\"token operator\">=</span> <span class=\"token number\">0x1</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\tGMTHREAD_READY <span class=\"token operator\">=</span> <span class=\"token number\">0x2</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\tGMTHREAD_SLEEP <span class=\"token operator\">=</span> <span class=\"token number\">0x4</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\tGMTHREAD_EXIT <span class=\"token operator\">=</span> <span class=\"token number\">0x8</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">// 启动线程的函数</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">GMThreadStartup</span><span class=\"token punctuation\">(</span>GMThread_t<span class=\"token operator\">*</span> GMThreadp<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\tGMThreadp<span class=\"token operator\">-></span><span class=\"token function\">func</span><span class=\"token punctuation\">(</span>GMThreadp<span class=\"token operator\">-></span>lpParameter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\tGMThreadp<span class=\"token operator\">-></span>Flags <span class=\"token operator\">=</span> GMTHREAD_EXIT<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token function\">Scheduling</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token comment\">// 空闲线程的函数</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">IdleGMThread</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> lpParameter<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"IdleGMThread---------------\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t<span class=\"token function\">Scheduling</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token comment\">// 向栈中压入一个 uint 值</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">PushStack</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span> Stackpp<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> v<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t<span class=\"token operator\">*</span>Stackpp <span class=\"token operator\">-=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//ebp - 4</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t<span class=\"token operator\">*</span><span class=\"token operator\">*</span>Stackpp <span class=\"token operator\">=</span> v<span class=\"token punctuation\">;</span><span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token comment\">// 初始化线程的信息</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">initGMThread</span><span class=\"token punctuation\">(</span>GMThread_t<span class=\"token operator\">*</span> GMThreadp<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> lpParameter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span><span class=\"token operator\">*</span> lpParameter<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> StackPages<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> StackDWordParam<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t<span class=\"token comment\">// 结构初始化赋值</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\tGMThreadp<span class=\"token operator\">-></span>Flags <span class=\"token operator\">=</span> GMTHREAD_CREATE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\tGMThreadp<span class=\"token operator\">-></span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\tGMThreadp<span class=\"token operator\">-></span>func <span class=\"token operator\">=</span> func<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\tGMThreadp<span class=\"token operator\">-></span>lpParameter <span class=\"token operator\">=</span> lpParameter<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t<span class=\"token comment\">// 申请空间</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\tStackPages <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">VirtualAlloc</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> GMTHREADSTACKSIZE<span class=\"token punctuation\">,</span> MEM_COMMIT<span class=\"token punctuation\">,</span> PAGE_READWRITE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t<span class=\"token comment\">// 初始化</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t<span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>StackPages<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> GMTHREADSTACKSIZE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t<span class=\"token comment\">// 初始化堆栈地址 </span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\tGMThreadp<span class=\"token operator\">-></span>initialStack <span class=\"token operator\">=</span> StackPages <span class=\"token operator\">+</span> GMTHREADSTACKSIZE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>\t<span class=\"token comment\">// 堆栈限制</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\tGMThreadp<span class=\"token operator\">-></span>StackLimit <span class=\"token operator\">=</span> StackPages<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\t<span class=\"token comment\">// 堆栈地址 </span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\tStackDWordParam <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>GMThreadp<span class=\"token operator\">-></span>initialStack<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>\t<span class=\"token comment\">// 入栈</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>\t<span class=\"token function\">PushStack</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>StackDWordParam<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>GMThreadp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 通过这个指针来找到线程函数，线程参数</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\t<span class=\"token function\">PushStack</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>StackDWordParam<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token number\">0x12345678</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 平衡堆栈的 (不用管，此值无意义)</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>\t<span class=\"token function\">PushStack</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>StackDWordParam<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>GMThreadStartup<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 线程入口函数 这个函数负责调用线程函数</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>\t<span class=\"token function\">PushStack</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>StackDWordParam<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">//push ebp  此值无意义，是寄存器初始值</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>\t<span class=\"token function\">PushStack</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>StackDWordParam<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">//push edi  此值无意义</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>\t<span class=\"token function\">PushStack</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>StackDWordParam<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">//push esi\t此值无意义</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>\t<span class=\"token function\">PushStack</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>StackDWordParam<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">//push ebx\t此值无意义</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>\t<span class=\"token function\">PushStack</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>StackDWordParam<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">//push ecx\t此值无意义</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>\t<span class=\"token function\">PushStack</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>StackDWordParam<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">//push edx\t此值无意义</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>\t<span class=\"token function\">PushStack</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>StackDWordParam<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">//push eax\t此值无意义</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>\t<span class=\"token comment\">// 当前线程的栈顶</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>\tGMThreadp<span class=\"token operator\">-></span>KernelStack <span class=\"token operator\">=</span> StackDWordParam<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>\t<span class=\"token comment\">// 当前线程状态</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>\tGMThreadp<span class=\"token operator\">-></span>Flags <span class=\"token operator\">=</span> GMTHREAD_READY<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre></pre></td></tr><tr><td data-num=\"92\"></td><td><pre><span class=\"token comment\">// 将一个函数注册为单独线程执行</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">RegisterGMThread</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> lpParameter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span><span class=\"token operator\">*</span> lpParameter<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>\t<span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> GMThreadList<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token operator\">==</span> <span class=\"token function\">_stricmp</span><span class=\"token punctuation\">(</span>GMThreadList<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>\t<span class=\"token function\">initGMThread</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>GMThreadList<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> func<span class=\"token punctuation\">,</span> lpParameter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x55AA0000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre></pre></td></tr><tr><td data-num=\"108\"></td><td><pre><span class=\"token comment\">// 切换线程\t1：当前线程结构体指针 2：要切换的线程结构体指针</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre><span class=\"token function\">__declspec</span><span class=\"token punctuation\">(</span>naked<span class=\"token punctuation\">)</span> <span class=\"token keyword\">void</span> <span class=\"token function\">SwitchContext</span><span class=\"token punctuation\">(</span>GMThread_t<span class=\"token operator\">*</span> SrcGMThreadp<span class=\"token punctuation\">,</span> GMThread_t<span class=\"token operator\">*</span> DstGMThreadp<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>\t__asm</pre></td></tr><tr><td data-num=\"112\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>\t\t<span class=\"token comment\">// 提升堆栈</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>\t\tpush ebp</pre></td></tr><tr><td data-num=\"115\"></td><td><pre>\t\tmov ebp<span class=\"token punctuation\">,</span> esp</pre></td></tr><tr><td data-num=\"116\"></td><td><pre></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>\t\t<span class=\"token comment\">// 保存当前线程寄存器</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>\t\tpush edi</pre></td></tr><tr><td data-num=\"119\"></td><td><pre>\t\tpush esi</pre></td></tr><tr><td data-num=\"120\"></td><td><pre>\t\tpush ebx</pre></td></tr><tr><td data-num=\"121\"></td><td><pre>\t\tpush ecx</pre></td></tr><tr><td data-num=\"122\"></td><td><pre>\t\tpush edx</pre></td></tr><tr><td data-num=\"123\"></td><td><pre>\t\tpush eax</pre></td></tr><tr><td data-num=\"124\"></td><td><pre></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>\t\tmov esi<span class=\"token punctuation\">,</span> SrcGMThreadp</pre></td></tr><tr><td data-num=\"126\"></td><td><pre>\t\tmov edi<span class=\"token punctuation\">,</span> DstGMThreadp</pre></td></tr><tr><td data-num=\"127\"></td><td><pre></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>\t\tmov<span class=\"token punctuation\">[</span>esi <span class=\"token operator\">+</span> GMThread_t<span class=\"token punctuation\">.</span>KernelStack<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> esp</pre></td></tr><tr><td data-num=\"129\"></td><td><pre>\t\t<span class=\"token comment\">// 经典线程切换，另外一个线程复活</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>\t\tmov esp<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>edi <span class=\"token operator\">+</span> GMThread_t<span class=\"token punctuation\">.</span>KernelStack<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>\t\tpop eax</pre></td></tr><tr><td data-num=\"133\"></td><td><pre>\t\tpop edx</pre></td></tr><tr><td data-num=\"134\"></td><td><pre>\t\tpop ecx</pre></td></tr><tr><td data-num=\"135\"></td><td><pre>\t\tpop ebx</pre></td></tr><tr><td data-num=\"136\"></td><td><pre>\t\tpop esi</pre></td></tr><tr><td data-num=\"137\"></td><td><pre>\t\tpop edi</pre></td></tr><tr><td data-num=\"138\"></td><td><pre></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>\t\tpop ebp</pre></td></tr><tr><td data-num=\"140\"></td><td><pre>\t\tret\t<span class=\"token comment\">// 把 startup (线程函数入口) 弹到 eip 执行的就是线程函数了</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre></pre></td></tr><tr><td data-num=\"144\"></td><td><pre><span class=\"token comment\">// 这个函数会让出 cpu，从队列里重新选择一个线程执行</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Scheduling</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>\t<span class=\"token comment\">// 获取自系统启动以来经过的毫秒数</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>\t<span class=\"token keyword\">int</span> TickCount <span class=\"token operator\">=</span> <span class=\"token function\">GetTickCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre></pre></td></tr><tr><td data-num=\"150\"></td><td><pre>\tGMThread_t<span class=\"token operator\">*</span> SrcGMThreadp <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>GMThreadList<span class=\"token punctuation\">[</span>CurrentThreadIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"151\"></td><td><pre>\tGMThread_t<span class=\"token operator\">*</span> DstGMThreadp <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>GMThreadList<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre></pre></td></tr><tr><td data-num=\"153\"></td><td><pre></pre></td></tr><tr><td data-num=\"154\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> GMThreadList<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"155\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"156\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>GMThreadList<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>Flags <span class=\"token operator\">&amp;</span> GMTHREAD_SLEEP<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"157\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"158\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>TickCount <span class=\"token operator\">></span> GMThreadList<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>SleepMillsecondDot<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"159\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"160\"></td><td><pre>\t\t\t\tGMThreadList<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>Flags <span class=\"token operator\">=</span> GMTHREAD_READY<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"161\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"162\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"163\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>GMThreadList<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>Flags <span class=\"token operator\">&amp;</span> GMTHREAD_READY<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"164\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"165\"></td><td><pre>\t\t\tDstGMThreadp <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>GMThreadList<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"166\"></td><td><pre>\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"167\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"168\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"169\"></td><td><pre>\t<span class=\"token comment\">// 获取队列中下一个线程的索引</span></pre></td></tr><tr><td data-num=\"170\"></td><td><pre>\tCurrentThreadIndex <span class=\"token operator\">=</span> DstGMThreadp <span class=\"token operator\">-</span> GMThreadList<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"171\"></td><td><pre></pre></td></tr><tr><td data-num=\"172\"></td><td><pre>\t<span class=\"token function\">SwitchContext</span><span class=\"token punctuation\">(</span>SrcGMThreadp<span class=\"token punctuation\">,</span> DstGMThreadp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"173\"></td><td><pre></pre></td></tr><tr><td data-num=\"174\"></td><td><pre>\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"175\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"176\"></td><td><pre></pre></td></tr><tr><td data-num=\"177\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">GMSleep</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> MilliSeconds<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"178\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"179\"></td><td><pre>\tGMThread_t<span class=\"token operator\">*</span> GMThreadp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"180\"></td><td><pre>\tGMThreadp <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>GMThreadList<span class=\"token punctuation\">[</span>CurrentThreadIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"181\"></td><td><pre></pre></td></tr><tr><td data-num=\"182\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>GMThreadp<span class=\"token operator\">-></span>Flags <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"183\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"184\"></td><td><pre>\t\tGMThreadp<span class=\"token operator\">-></span>Flags <span class=\"token operator\">=</span> GMTHREAD_SLEEP<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"185\"></td><td><pre>\t\tGMThreadp<span class=\"token operator\">-></span>SleepMillsecondDot <span class=\"token operator\">=</span> <span class=\"token function\">GetTickCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> MilliSeconds<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"186\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"187\"></td><td><pre></pre></td></tr><tr><td data-num=\"188\"></td><td><pre>\t<span class=\"token function\">Scheduling</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"189\"></td><td><pre>\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"190\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>注意在  <code>GMThreadStartup</code>  函数中  <code>GMThreadp-&gt;func(GMThreadp-&gt;lpParameter);</code> <br />\n 我们在前面的模拟初始化线程结构体中，设置的线程函数是不一样的。<br />\n但，它是如何找线程的参数的呢？<br />\n这个函数 <code>void GMThreadStartup(GMThread_t* GMThreadp)</code>  我们并没有传参呀？</p>\n<p>这里看一下反汇编就明白了</p>\n<p><img data-src=\"image004.png\" alt=\"\" /></p>\n<p>虽然我们没有传参，但我们定义这个函数的时候是有参数的，所以程序编译的时候，它会直接找  <code>ebp+8</code>  的位置，那  <code>ebp+8</code>  它能正确找到参数吗？可以！！</p>\n<p>继续观察这个图：</p>\n<p><img data-src=\"image003.png\" alt=\"\" /></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">24</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token function\">GMThreadStartup</span><span class=\"token punctuation\">(</span>GMThread_t<span class=\"token operator\">*</span> GMThreadp<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token number\">25</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">0057</span>C020  push        ebp  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">0057</span>C021  mov         ebp<span class=\"token punctuation\">,</span>esp</pre></td></tr></table></figure><p>当执行  <code>ret</code>  指令后，esp-4 esp 指向了 9（这个值是随便压入栈的）并且 eip 指向了堆栈中存储 Startup 函数地址的位置，既程序开始执行  <code>GMThreadStartup</code>  函数，然后执行了  <code>push ebp</code>  和  <code>mov  ebp,esp</code>  后，esp 和 ebp 都指向了堆栈中原来存储 Startup 函数地址的位置，并且这个值也被替换为了，原来的 esp 的值（这个 esp 的值也是我们随便压入栈的）。</p>\n<p>这个时候已经清楚的知道了 ebp 和 esp 的值， 在堆栈中  <code>ebp+8</code>  的位置正是每个线程的模拟结构体！</p>\n<p>非常的巧妙！我称之为艺术（嘿嘿没见过世面…）！！大拇指.png</p>\n<h2 id=\"maincpp\"><a class=\"anchor\" href=\"#maincpp\">#</a> main.cpp</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ThreadCore.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token keyword\">int</span> CurrentThreadIndex<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">extern</span> GMThread_t GMThreadList<span class=\"token punctuation\">[</span>MAXGMTHREAD<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Thread1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Thread%d\\n\"</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t<span class=\"token function\">GMSleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Thread2</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Thread%d\\n\"</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t<span class=\"token function\">GMSleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Thread3</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Thread%d\\n\"</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t<span class=\"token function\">GMSleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Thread4</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Thread%d\\n\"</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\t<span class=\"token function\">GMSleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 模拟调用 API 函数</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t<span class=\"token function\">RegisterGMThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token string\">\"Thread1\"</span><span class=\"token punctuation\">,</span> Thread1<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t<span class=\"token function\">RegisterGMThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token string\">\"Thread2\"</span><span class=\"token punctuation\">,</span> Thread2<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t<span class=\"token function\">RegisterGMThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token string\">\"Thread3\"</span><span class=\"token punctuation\">,</span> Thread3<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t<span class=\"token function\">RegisterGMThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token string\">\"Thread4\"</span><span class=\"token punctuation\">,</span> Thread4<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t\t<span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 模拟时钟中断</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t\t<span class=\"token function\">Scheduling</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这个就没什么好说的了。</p>\n<h1 id=\"课后作业\"><a class=\"anchor\" href=\"#课后作业\">#</a> 课后作业</h1>\n<p>写两个函数实现线程的挂起和恢复功能。</p>\n<p>就是模拟  <code>SuspendThread()</code>  和  <code>ResumeThread()</code>  函数</p>\n<p><strong>回顾一下以前的知识点：如何让线程停下来？</strong><br />\n让自己停下来: <code>Sleep()</code> <br />\n 让别人停下来: <code>SuspendThread()</code> <br />\n 线程恢复:  <code>ResumeThread()</code></p>\n<p>海哥说用最简约的方式写。<br />\n不就是改线程的状态吗！</p>\n<h2 id=\"代码\"><a class=\"anchor\" href=\"#代码\">#</a> 代码</h2>\n<p>写的时候也有其他疑问，要不要模拟操作系统添加一个 context 呢？要不要定义一个等待链表呢？如何随时挂起一个线程？不过海哥在视频里说了，用最简约的方式写，也是哈，操作系统考虑的事情很多，我们不用考虑那么多，没必要啊！</p>\n<p>线程 1 调用挂起函数，挂起哪个线程？  线程都有名字。</p>\n<p>调用恢复函数，恢复哪个函数？这个也可以使用名字。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 挂起函数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">GMSuspend</span><span class=\"token punctuation\">(</span>LPCSTR ThreadName<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token class-name\">size_t</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token comment\">// 由线程名字查找线程</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> GMThreadList<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token operator\">==</span> <span class=\"token function\">strcmp</span><span class=\"token punctuation\">(</span>GMThreadList<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> ThreadName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t\t<span class=\"token comment\">// 修改线程状态</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t\tGMThreadList<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>Flags <span class=\"token operator\">=</span> GMTHREAD_SUSPEND<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">// 恢复线程</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">GMResume</span><span class=\"token punctuation\">(</span>LPCSTR ThreadName<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token class-name\">size_t</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token comment\">// 由线程名字查找线程</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> GMThreadList<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token operator\">==</span> <span class=\"token function\">strcmp</span><span class=\"token punctuation\">(</span>GMThreadList<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> ThreadName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t\t<span class=\"token comment\">// 修改线程状态</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t\tGMThreadList<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>Flags <span class=\"token operator\">=</span> GMTHREAD_READY<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>修改了一下 线程 1 的函数：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Thread1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tbool Flags <span class=\"token operator\">=</span> true<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>Flags<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t\t<span class=\"token keyword\">case</span> true<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是Thread%d，我要运行1秒哦^v^，我运行的时候其他线程不许运行哦。\\n\"</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t\t\t<span class=\"token function\">GMSuspend</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Thread2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t\t\t<span class=\"token function\">GMSuspend</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Thread3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t\t\t<span class=\"token function\">GMSuspend</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Thread4\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t\t\tFlags <span class=\"token operator\">=</span> false<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t\t<span class=\"token keyword\">default</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是Thread%d，现在大家可以一起执行了哦^v^\\n\"</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t\t\t<span class=\"token function\">GMResume</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Thread2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t\t\t<span class=\"token function\">GMResume</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Thread3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t\t\t<span class=\"token function\">GMResume</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Thread4\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t\t\tFlags <span class=\"token operator\">=</span> true<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t<span class=\"token function\">GMSleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>截图：</p>\n<p><img data-src=\"image005.png\" alt=\"\" /></p>\n<h1 id=\"模拟线程切换总结\"><a class=\"anchor\" href=\"#模拟线程切换总结\">#</a> 模拟线程切换总结</h1>\n<ol>\n<li>\n<p>线程不是被动切换的，而是主动让出 CPU.</p>\n</li>\n<li>\n<p>线程切换并没有使用 TSS 来保存寄存器，而是使用堆栈.</p>\n</li>\n<li>\n<p>线程切换的过程就是堆栈切换的过程.</p>\n</li>\n</ol>\n",
            "tags": [
                "模拟线程切换",
                "模拟挂起与恢复函数"
            ]
        },
        {
            "id": "https://or0kit.github.io/Bin/Core/WindowsXp/Process-Thread/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B-%E8%BF%9B%E7%A8%8B%E7%9A%84%E5%88%9B%E5%BB%BA/",
            "url": "https://or0kit.github.io/Bin/Core/WindowsXp/Process-Thread/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B-%E8%BF%9B%E7%A8%8B%E7%9A%84%E5%88%9B%E5%BB%BA/",
            "title": "进程与线程-进程的创建",
            "date_published": "2022-01-11T13:39:45.000Z",
            "content_html": "<h1 id=\"楔子\"><a class=\"anchor\" href=\"#楔子\">#</a> 楔子</h1>\n<p>我们已经知道了进程和线程是如何在 Windows 中表示的，在内核层和执行体层分别包含了哪些信息。现在我们来看看 Windows 执行体是如何管理进程和线程的，包括进程和线程的创建和终止过程，以及进程和线程是如何创建起来的。</p>\n<h1 id=\"小知识获取当前进程或线程\"><a class=\"anchor\" href=\"#小知识获取当前进程或线程\">#</a> 小知识：获取当前进程或线程</h1>\n<p><strong>内核层函数 KeGetCurrentThread 是一个重要的函数</strong>，它返回当前处理器上正在运行的线程的 KTHREAD 结构指针。通过此结构信息，可以进一步得到 KPROCESS 、ETHREAD 和 EPROCESS 结构。在 WRK 中， KeGetCurrentThread 是这样实现的：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>FORCEINLINE</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">_KTHREAD</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>NTAPI <span class=\"token function\">KeGetCurrentThread</span> <span class=\"token punctuation\">(</span>VOID<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\"><span class=\"token punctuation\">(</span>_MSC_FULL_VER <span class=\"token operator\">>=</span> <span class=\"token number\">13012035</span><span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">_KTHREAD</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>ULONG_PTR<span class=\"token punctuation\">)</span> <span class=\"token function\">__readfsdword</span> <span class=\"token punctuation\">(</span><span class=\"token function\">FIELD_OFFSET</span> <span class=\"token punctuation\">(</span>KPCR<span class=\"token punctuation\">,</span> PrcbData<span class=\"token punctuation\">.</span>CurrentThread<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">else</span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    __asm <span class=\"token punctuation\">&#123;</span>  mov eax<span class=\"token punctuation\">,</span> fs<span class=\"token operator\">:</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> KPCR<span class=\"token punctuation\">.</span>PrcbData<span class=\"token punctuation\">.</span>CurrentThread <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>WRK 本身自带的编译器（tools\\x86\\cl.exe）版本（13.10.4035）大于 13012035 所以上面的代码取第一个条件分支，它展开来实际上只是一条指令。</p>\n<p>第二条分支， <code>mov eax, fs:[0] KPCR.PrcbData.CurrentThread</code>  应该等同于  <code>mov eax,fs:[0x124]</code> <br />\n 下面四种书写方式等价：<br />\n <code>MOV　AX, [BX+SI+1000H]</code> <br />\n <code>MOV　AX, 1000H[BX+SI]</code> <br />\n <code>MOV　AX, 1000H[BX][SI]</code> <br />\n <code>MOV　AX, 1000H[SI][BX]</code></p>\n<p>获取了当前线程的 KTHREAD 结构指针以后，便可以很方便的获取 ETHREAD 、 KPROCESS 和 EPROCESS 结构的指针了。</p>\n<p><strong>执行体层上获得当前线程和进程的函数</strong>分别是 PsGetCurrentThread 和 PsGetCurrentProcess ，代码如下：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">_PsGetCurrentProcess</span><span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token function\">CONTAINING_RECORD</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token function\">KeGetCurrentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>ApcState<span class=\"token punctuation\">.</span>Process<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>EPROCESS<span class=\"token punctuation\">,</span>Pcb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">_PsGetCurrentThread</span><span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>PETHREAD<span class=\"token punctuation\">)</span><span class=\"token function\">KeGetCurrentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>PEPROCESS</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">PsGetCurrentProcess</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    VOID</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">_PsGetCurrentProcess</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>PETHREAD</pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token function\">PsGetCurrentThread</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    VOID</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">_PsGetCurrentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>我们看到，_PsGetCurrentProcess 宏从当前线程 KTHREAD 结构的 ApcState 成员中获得当前线程所属进程的 KPROCESS 结构。 这里之所以从 ApcState 成员中获取进程结构指针，而不是从 KTHREAD 的 Process 域 或 ETHREAD 的 ThreadProcess 域获取进程结构指针，<strong>是因为即使当前线程附载到其他进程中（通过 KeAttachProcess 函数），或者有回到原先的进程中（通过 KeDetachProcess 函数），这种做法也总是能够获得正确的当前进程结构的指针</strong>。 这里涉及 APC 相关的知识，还没学，暂时不深究。</p>\n<h1 id=\"进程创建过程\"><a class=\"anchor\" href=\"#进程创建过程\">#</a> 进程创建过程</h1>\n<p>看了几本书，还是没有捋顺知识点，先埋个坑。多看看书后再往下写了。CR3 的值在实模式下就被初始化好了，在一个链表中。</p>\n<h2 id=\"从r3-createprocess-分析进程创建过程\"><a class=\"anchor\" href=\"#从r3-createprocess-分析进程创建过程\">#</a> 从 R3  <code>CreateProcess</code>  分析进程创建过程</h2>\n<p>由于逆向的流程很复杂，我们先看 Xp 源码。</p>\n<p>BOOL<br />\nWINAPI<br />\nCreateProcessA(<br />\nLPCSTR lpApplicationName,<br />\nLPSTR lpCommandLine,<br />\nLPSECURITY_ATTRIBUTES lpProcessAttributes,<br />\nLPSECURITY_ATTRIBUTES lpThreadAttributes,<br />\nBOOL bInheritHandles,<br />\nDWORD dwCreationFlags,<br />\nLPVOID lpEnvironment,<br />\nLPCSTR lpCurrentDirectory,<br />\nLPSTARTUPINFOA lpStartupInfo,<br />\nLPPROCESS_INFORMATION lpProcessInformation<br />\n)</p>\n",
            "tags": [
                "进程的创建",
                "获取当前进程"
            ]
        },
        {
            "id": "https://or0kit.github.io/Bin/Core/WindowsXp/Process-Thread/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B-%E7%AD%89%E5%BE%85%E9%93%BE%E8%A1%A8%E4%B8%8E%E8%B0%83%E5%BA%A6%E9%93%BE%E8%A1%A8/",
            "url": "https://or0kit.github.io/Bin/Core/WindowsXp/Process-Thread/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B-%E7%AD%89%E5%BE%85%E9%93%BE%E8%A1%A8%E4%B8%8E%E8%B0%83%E5%BA%A6%E9%93%BE%E8%A1%A8/",
            "title": "进程与线程-等待链表与调度链表",
            "date_published": "2022-01-11T08:43:18.000Z",
            "content_html": "<h1 id=\"楔子\"><a class=\"anchor\" href=\"#楔子\">#</a> 楔子</h1>\n<p>进程结构体 EPROCESS (0x50 和 0x190) 是 2 个链表，里面圈着当前进程所有的线程。</p>\n<p>对进程断链，程序可以正常运行，原因是 CPU 执行与调度是以线程为单位的，进程断链只是影响一些遍历系统进程的 API，并不会影响程序执行。</p>\n<p>对线程断链也是一样的，断链后在 Windbg 或者 OD 中无法看到被断掉的线程，但并不影响其执行 (仍然再跑)。</p>\n<p>为什么程序还可以跑呢？</p>\n<p>肯定是操作系统找到线程的表不是我们断掉的这个。<br />\n接下来我们就要了解操作系统的等待链表与调度链表了，在此之前回顾一下计操相关的知识。</p>\n<h1 id=\"线程的三种状态\"><a class=\"anchor\" href=\"#线程的三种状态\">#</a> 线程的三种状态</h1>\n<h2 id=\"wait-等待-挂起-阻塞\"><a class=\"anchor\" href=\"#wait-等待-挂起-阻塞\">#</a> wait (等待、挂起、阻塞……)</h2>\n<p>导致线程等待的原因有多种，例如调用了 Sleep, WaitForSingleObject 等函数，或者在创建时和运行时让线程挂起的 API，例如 SuspendThread 函数。</p>\n<p>等待线程存储在等待链表头 KiWaitListHead 中， KiWaitListHead 是一个全局变量，在 Windbg 中查看：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kd&gt; dd KiWaitListHead</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>8055d4a8  8a18ce00 8a06d858</pre></td></tr></table></figure><p>0x80553d88 存储了 KiWaitListHead ，这是一个 _LIST_ENTRY，它属于某个线程 _KTHREAD + 0x60 的位置。</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>+0x060 WaitListEntry    : _LIST_ENTRY</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   +0x060 SwapListEntry    : _SINGLE_LIST_ENTRY</pre></td></tr></table></figure><p>_KTHREAD + 0x60 是一个共用体 union，线程处于等待或者调度状态就会存到这个位置的链表里，如果是等待状态，这个地方就是等待链表；如果是调度状态，这里就是调度链表。</p>\n<h2 id=\"running运行中\"><a class=\"anchor\" href=\"#running运行中\">#</a> running（运行中）</h2>\n<p>一个核只有一个运行中的线程，运行中的线程存储在 KPCR 中。</p>\n<h2 id=\"ready就绪等待调度\"><a class=\"anchor\" href=\"#ready就绪等待调度\">#</a> ready（就绪，等待调度）</h2>\n<p>所有就绪线程根据 32 个不同的优先级，各自存储在 32 个链表中。</p>\n<p>通过全局变量 KiDispatcherReadyListHead 可以查看这 32 个链表的链表头：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kd&gt; dd KiDispatcherReadyListHead L70</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>8055df80  8055df80 8055df80 8055df88 8055df88</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>8055df90  8055df90 8055df90 8055df98 8055df98</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>8055dfa0  8055dfa0 8055dfa0 8055dfa8 8055dfa8</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>8055dfb0  8055dfb0 8055dfb0 8055dfb8 8055dfb8</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>8055dfc0  8055dfc0 8055dfc0 8055dfc8 8055dfc8</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>8055dfd0  8055dfd0 8055dfd0 8055dfd8 8055dfd8</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>8055dfe0  8055dfe0 8055dfe0 8055dfe8 8055dfe8</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>8055dff0  8055dff0 8055dff0 8055dff8 8055dff8</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>8055e000  8055e000 8055e000 8055e008 8055e008</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>8055e010  8055e010 8055e010 8055e018 8055e018</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>8055e020  8055e020 8055e020 8055e028 8055e028</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>8055e030  8055e030 8055e030 8055e038 8055e038</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>8055e040  8055e040 8055e040 8055e048 8055e048</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>8055e050  8055e050 8055e050 8055e058 8055e058</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>8055e060  8055e060 8055e060 8055e068 8055e068</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>8055e070  8055e070 8055e070 8055e078 8055e078</pre></td></tr></table></figure><p>每两个 4 字节就构成了一个 LIST_ENTRY，我们发现这里 32 个链表都是空的，原因是现在 windbg 把系统挂起了，所有线程都处于等待状态，不能被调度了。</p>\n<p>32 个链表对应 32 个优先级 0-31，默认优先级是 8，优先级越高越优先。我推测空闲线程 IdleThread 的优先级是最低的。</p>\n<h1 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h1>\n<p>那些所谓的进程隐藏、线程隐藏都不可能彻底隐藏起来，比拼的是谁更底层罢了。通过遍历这两个链表就可以找到所有进程和线程了。一旦把这两个链表断链，那么进程和线程就不会被操作系统维护，也就不会运行了。</p>\n",
            "tags": [
                "等待链表",
                "调度链表"
            ]
        },
        {
            "id": "https://or0kit.github.io/Bin/Core/WindowsXp/Process-Thread/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B-KPCR/",
            "url": "https://or0kit.github.io/Bin/Core/WindowsXp/Process-Thread/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B-KPCR/",
            "title": "进程与线程-KPCR",
            "date_published": "2022-01-11T08:42:21.000Z",
            "content_html": "<h1 id=\"内容回顾\"><a class=\"anchor\" href=\"#内容回顾\">#</a> 内容回顾</h1>\n<p>进程在内核中对应结构体：  <code>EPROCESS</code></p>\n<p>线程在内核中对应结构体：  <code>ETHREAD</code></p>\n<p>CPU 在内核中也有一个对应的结构体，每一个 CPU 有一个，叫  <code>KPCR\t</code></p>\n<h1 id=\"kpcr介绍\"><a class=\"anchor\" href=\"#kpcr介绍\">#</a> KPCR 介绍</h1>\n<ol>\n<li>\n<p>当线程进入 0 环时，FS:[0] 指向 KPCR (3 环时 FS:[0] -&gt; TEB)</p>\n</li>\n<li>\n<p>每个 CPU 都有一个 KPCR 结构体 (一个核一个)</p>\n</li>\n<li>\n<p>KPCR 中存储了 CPU 本身要用的一些重要数据：GDT、IDT 以及线程相关的一些信息。</p>\n</li>\n</ol>\n<h1 id=\"_kpcr-_nt_tib-_kprcb\"><a class=\"anchor\" href=\"#_kpcr-_nt_tib-_kprcb\">#</a> _KPCR, _NT_TIB, _KPRCB</h1>\n<p>KPCR  叫 CPU 控制区（Processor Control Region）</p>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<h2 id=\"_nt_tib-是-_kpcr-的前-0x1c-字节\"><a class=\"anchor\" href=\"#_nt_tib-是-_kpcr-的前-0x1c-字节\">#</a> _NT_TIB 是 _KPCR 的前 0x1c 字节</h2>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ntdll!_NT_TIB</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   +0x000 ExceptionList    : Ptr32 _EXCEPTION_REGISTRATION_RECORD</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t异常链表，执行到 _try _catch 时，会在这个链表里添加异常处理函数</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   +0x004 StackBase        : Ptr32 Void</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   +0x008 StackLimit       : Ptr32 Void</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   0 环当前线程的栈基址和栈大小</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   +0x00c SubSystemTib     : Ptr32 Void</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   +0x010 FiberData        : Ptr32 Void</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   +0x010 Version          : Uint4B</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   +0x014 ArbitraryUserPointer : Ptr32 Void</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   +0x018 Self             : Ptr32 _NT_TIB</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   指向自己的指针</pre></td></tr></table></figure><h2 id=\"_kpcr\"><a class=\"anchor\" href=\"#_kpcr\">#</a> _KPCR</h2>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>nt!_KPCR</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   +0x000 NtTib            : _NT_TIB</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   +0x01c SelfPcr          : Ptr32 _KPCR</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   指向自己的指针</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   +0x020 Prcb             : Ptr32 _KPRCB</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   指向 _KPRCB，即 _KPCR + 0x120 偏移处的结构</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   +0x024 Irql             : UChar</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   +0x028 IRR              : Uint4B</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   +0x02c IrrActive        : Uint4B</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   +0x030 IDR              : Uint4B</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   +0x034 KdVersionBlock   : Ptr32 Void</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   +0x038 IDT              : Ptr32 _KIDTENTRY</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   +0x03c GDT              : Ptr32 _KGDTENTRY</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   IDT, GDT 表基址</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   +0x040 TSS              : Ptr32 _KTSS</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   指向 TSS 表，里面存储了 0 环栈顶 ESP0 和 0 环堆栈段 SS0，中断门提权要用</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>   </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>   +0x044 MajorVersion     : Uint2B</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>   +0x046 MinorVersion     : Uint2B</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>   +0x048 SetMember        : Uint4B</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>   +0x04c StallScaleFactor : Uint4B</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>   +0x050 DebugActive      : UChar</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>   +0x051 Number           : UChar</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>   CPU 编号</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>   </pre></td></tr><tr><td data-num=\"29\"></td><td><pre>   +0x052 Spare0           : UChar</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>   +0x053 SecondLevelCacheAssociativity : UChar</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>   +0x054 VdmAlert         : Uint4B</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>   +0x058 KernelReserved   : [14] Uint4B</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>   +0x090 SecondLevelCacheSize : Uint4B</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>   +0x094 HalReserved      : [16] Uint4B</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>   +0x0d4 InterruptMode    : Uint4B</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>   +0x0d8 Spare1           : UChar</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>   +0x0dc KernelReserved2  : [17] Uint4B</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>   +0x120 PrcbData         : _KPRCB</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>   扩展结构体</pre></td></tr></table></figure><h2 id=\"_kprcb\"><a class=\"anchor\" href=\"#_kprcb\">#</a> _KPRCB</h2>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ntdll!_KPRCB</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   +0x000 MinorVersion     : Uint2B</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   +0x002 MajorVersion     : Uint2B</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   +0x004 CurrentThread    : Ptr32 _KTHREAD</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   当前线程</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   +0x008 NextThread       : Ptr32 _KTHREAD</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   即将切换的下一个线程</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   +0x00c IdleThread       : Ptr32 _KTHREAD</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   空闲线程 &#x2F;&#x2F; 所有线程都执行完了，CPU 就致执行这个</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   +0x010 Number           : Char</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   CPU 编号</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   +0x011 Reserved         : Char</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   +0x012 BuildType        : Uint2B</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   +0x014 SetMember        : Uint4B</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   +0x018 CpuType          : Char</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>   +0x019 CpuID            : Char</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>   +0x01a CpuStep          : Uint2B</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>   +0x01c ProcessorState   : _KPROCESSOR_STATE</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>   +0x33c KernelReserved   : [16] Uint4B</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>   +0x37c HalReserved      : [16] Uint4B</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>   +0x3bc PrcbPad0         : [92] UChar</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>   +0x418 LockQueue        : [16] _KSPIN_LOCK_QUEUE</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>   +0x498 PrcbPad1         : [8] UChar</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>   +0x4a0 NpxThread        : Ptr32 _KTHREAD</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>   +0x4a4 InterruptCount   : Uint4B</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>   +0x4a8 KernelTime       : Uint4B</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>   +0x4ac UserTime         : Uint4B</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>   +0x4b0 DpcTime          : Uint4B</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>   +0x4b4 DebugDpcTime     : Uint4B</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>   +0x4b8 InterruptTime    : Uint4B</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>   +0x4bc AdjustDpcThreshold : Uint4B</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>   +0x4c0 PageColor        : Uint4B</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>   +0x4c4 SkipTick         : Uint4B</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>   +0x4c8 MultiThreadSetBusy : UChar</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>   +0x4c9 Spare2           : [3] UChar</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>   +0x4cc ParentNode       : Ptr32 _KNODE</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>   +0x4d0 MultiThreadProcessorSet : Uint4B</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>   +0x4d4 MultiThreadSetMaster : Ptr32 _KPRCB</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>   +0x4d8 ThreadStartCount : [2] Uint4B</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>   +0x4e0 CcFastReadNoWait : Uint4B</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>   +0x4e4 CcFastReadWait   : Uint4B</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>   +0x4e8 CcFastReadNotPossible : Uint4B</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>   +0x4ec CcCopyReadNoWait : Uint4B</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>   +0x4f0 CcCopyReadWait   : Uint4B</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>   +0x4f4 CcCopyReadNoWaitMiss : Uint4B</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>   +0x4f8 KeAlignmentFixupCount : Uint4B</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>   +0x4fc KeContextSwitches : Uint4B</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>   +0x500 KeDcacheFlushCount : Uint4B</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>   +0x504 KeExceptionDispatchCount : Uint4B</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>   +0x508 KeFirstLevelTbFills : Uint4B</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>   +0x50c KeFloatingEmulationCount : Uint4B</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>   +0x510 KeIcacheFlushCount : Uint4B</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>   +0x514 KeSecondLevelTbFills : Uint4B</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>   +0x518 KeSystemCalls    : Uint4B</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>   +0x51c SpareCounter0    : [1] Uint4B</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>   +0x520 PPLookasideList  : [16] _PP_LOOKASIDE_LIST</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>   +0x5a0 PPNPagedLookasideList : [32] _PP_LOOKASIDE_LIST</pre></td></tr><tr><td data-num=\"62\"></td><td><pre>   +0x6a0 PPPagedLookasideList : [32] _PP_LOOKASIDE_LIST</pre></td></tr><tr><td data-num=\"63\"></td><td><pre>   +0x7a0 PacketBarrier    : Uint4B</pre></td></tr><tr><td data-num=\"64\"></td><td><pre>   +0x7a4 ReverseStall     : Uint4B</pre></td></tr><tr><td data-num=\"65\"></td><td><pre>   +0x7a8 IpiFrame         : Ptr32 Void</pre></td></tr><tr><td data-num=\"66\"></td><td><pre>   +0x7ac PrcbPad2         : [52] UChar</pre></td></tr><tr><td data-num=\"67\"></td><td><pre>   +0x7e0 CurrentPacket    : [3] Ptr32 Void</pre></td></tr><tr><td data-num=\"68\"></td><td><pre>   +0x7ec TargetSet        : Uint4B</pre></td></tr><tr><td data-num=\"69\"></td><td><pre>   +0x7f0 WorkerRoutine    : Ptr32     void </pre></td></tr><tr><td data-num=\"70\"></td><td><pre>   +0x7f4 IpiFrozen        : Uint4B</pre></td></tr><tr><td data-num=\"71\"></td><td><pre>   +0x7f8 PrcbPad3         : [40] UChar</pre></td></tr><tr><td data-num=\"72\"></td><td><pre>   +0x820 RequestSummary   : Uint4B</pre></td></tr><tr><td data-num=\"73\"></td><td><pre>   +0x824 SignalDone       : Ptr32 _KPRCB</pre></td></tr><tr><td data-num=\"74\"></td><td><pre>   +0x828 PrcbPad4         : [56] UChar</pre></td></tr><tr><td data-num=\"75\"></td><td><pre>   +0x860 DpcListHead      : _LIST_ENTRY</pre></td></tr><tr><td data-num=\"76\"></td><td><pre>   +0x868 DpcStack         : Ptr32 Void</pre></td></tr><tr><td data-num=\"77\"></td><td><pre>   +0x86c DpcCount         : Uint4B</pre></td></tr><tr><td data-num=\"78\"></td><td><pre>   +0x870 DpcQueueDepth    : Uint4B</pre></td></tr><tr><td data-num=\"79\"></td><td><pre>   +0x874 DpcRoutineActive : Uint4B</pre></td></tr><tr><td data-num=\"80\"></td><td><pre>   +0x878 DpcInterruptRequested : Uint4B</pre></td></tr><tr><td data-num=\"81\"></td><td><pre>   +0x87c DpcLastCount     : Uint4B</pre></td></tr><tr><td data-num=\"82\"></td><td><pre>   +0x880 DpcRequestRate   : Uint4B</pre></td></tr><tr><td data-num=\"83\"></td><td><pre>   +0x884 MaximumDpcQueueDepth : Uint4B</pre></td></tr><tr><td data-num=\"84\"></td><td><pre>   +0x888 MinimumDpcRate   : Uint4B</pre></td></tr><tr><td data-num=\"85\"></td><td><pre>   +0x88c QuantumEnd       : Uint4B</pre></td></tr><tr><td data-num=\"86\"></td><td><pre>   +0x890 PrcbPad5         : [16] UChar</pre></td></tr><tr><td data-num=\"87\"></td><td><pre>   +0x8a0 DpcLock          : Uint4B</pre></td></tr><tr><td data-num=\"88\"></td><td><pre>   +0x8a4 PrcbPad6         : [28] UChar</pre></td></tr><tr><td data-num=\"89\"></td><td><pre>   +0x8c0 CallDpc          : _KDPC</pre></td></tr><tr><td data-num=\"90\"></td><td><pre>   +0x8e0 ChainedInterruptList : Ptr32 Void</pre></td></tr><tr><td data-num=\"91\"></td><td><pre>   +0x8e4 LookasideIrpFloat : Int4B</pre></td></tr><tr><td data-num=\"92\"></td><td><pre>   +0x8e8 SpareFields0     : [6] Uint4B</pre></td></tr><tr><td data-num=\"93\"></td><td><pre>   +0x900 VendorString     : [13] UChar</pre></td></tr><tr><td data-num=\"94\"></td><td><pre>   +0x90d InitialApicId    : UChar</pre></td></tr><tr><td data-num=\"95\"></td><td><pre>   +0x90e LogicalProcessorsPerPhysicalProcessor : UChar</pre></td></tr><tr><td data-num=\"96\"></td><td><pre>   +0x910 MHz              : Uint4B</pre></td></tr><tr><td data-num=\"97\"></td><td><pre>   +0x914 FeatureBits      : Uint4B</pre></td></tr><tr><td data-num=\"98\"></td><td><pre>   +0x918 UpdateSignature  : _LARGE_INTEGER</pre></td></tr><tr><td data-num=\"99\"></td><td><pre>   +0x920 NpxSaveArea      : _FX_SAVE_AREA</pre></td></tr><tr><td data-num=\"100\"></td><td><pre>   +0xb30 PowerState       : _PROCESSOR_POWER_STATE</pre></td></tr></table></figure><h1 id=\"reference\"><a class=\"anchor\" href=\"#reference\">#</a> Reference</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0t3YW5zeS9hcnRpY2xlL2RldGFpbHMvMTA5NTQ1NDI5\">https://blog.csdn.net/Kwansy/article/details/109545429</span></p>\n",
            "tags": [
                "KPCR结构体"
            ]
        },
        {
            "id": "https://or0kit.github.io/Bin/Core/WindowsXp/Process-Thread/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B-%E7%BA%BF%E7%A8%8B%E7%BB%93%E6%9E%84%E4%BD%93/",
            "url": "https://or0kit.github.io/Bin/Core/WindowsXp/Process-Thread/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B-%E7%BA%BF%E7%A8%8B%E7%BB%93%E6%9E%84%E4%BD%93/",
            "title": "进程与线程-线程结构体",
            "date_published": "2022-01-01T00:53:34.000Z",
            "content_html": "<h1 id=\"线程\"><a class=\"anchor\" href=\"#线程\">#</a> 线程</h1>\n<p>Windows 是一款微内核、抢占式多任务、软实时的操作系统。<strong>Windows 的任务调度主要以线程为单位进行</strong>，线程拥有 33 个优先级，数值为 0~32，其中 0 为最低优先级，32 为最高优先级，最高和最低优先级均保留给系统使用。用户可以使用的优先级为 1～31。</p>\n<h1 id=\"线程结构体-ethread\"><a class=\"anchor\" href=\"#线程结构体-ethread\">#</a> 线程结构体 ETHREAD</h1>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kd&gt; dt _ETHREAD</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>nt!_ETHREAD</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   +0x000 Tcb              : _KTHREAD</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   +0x1c0 CreateTime       : _LARGE_INTEGER</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   +0x1c0 NestedFaultCount : Pos 0, 2 Bits</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   +0x1c0 ApcNeeded        : Pos 2, 1 Bit</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   +0x1c8 ExitTime         : _LARGE_INTEGER</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   +0x1c8 LpcReplyChain    : _LIST_ENTRY</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   +0x1c8 KeyedWaitChain   : _LIST_ENTRY</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   +0x1d0 ExitStatus       : Int4B</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   +0x1d0 OfsChain         : Ptr32 Void</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   +0x1d4 PostBlockList    : _LIST_ENTRY</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   +0x1dc TerminationPort  : Ptr32 _TERMINATION_PORT</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   +0x1dc ReaperLink       : Ptr32 _ETHREAD</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   +0x1dc KeyedWaitValue   : Ptr32 Void</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   +0x1e0 ActiveTimerListLock : Uint4B</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   +0x1e4 ActiveTimerListHead : _LIST_ENTRY</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   +0x1ec Cid              : _CLIENT_ID</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   +0x1f4 LpcReplySemaphore : _KSEMAPHORE</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>   +0x1f4 KeyedWaitSemaphore : _KSEMAPHORE</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>   +0x208 LpcReplyMessage  : Ptr32 Void</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>   +0x208 LpcWaitingOnPort : Ptr32 Void</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>   +0x20c ImpersonationInfo : Ptr32 _PS_IMPERSONATION_INFORMATION</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>   +0x210 IrpList          : _LIST_ENTRY</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>   +0x218 TopLevelIrp      : Uint4B</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>   +0x21c DeviceToVerify   : Ptr32 _DEVICE_OBJECT</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>   +0x220 ThreadsProcess   : Ptr32 _EPROCESS</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>   +0x224 StartAddress     : Ptr32 Void</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>   +0x228 Win32StartAddress : Ptr32 Void</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>   +0x228 LpcReceivedMessageId : Uint4B</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>   +0x22c ThreadListEntry  : _LIST_ENTRY</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>   +0x234 RundownProtect   : _EX_RUNDOWN_REF</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>   +0x238 ThreadLock       : _EX_PUSH_LOCK</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>   +0x23c LpcReplyMessageId : Uint4B</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>   +0x240 ReadClusterSize  : Uint4B</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>   +0x244 GrantedAccess    : Uint4B</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>   +0x248 CrossThreadFlags : Uint4B</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>   +0x248 Terminated       : Pos 0, 1 Bit</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>   +0x248 DeadThread       : Pos 1, 1 Bit</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>   +0x248 HideFromDebugger : Pos 2, 1 Bit</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>   +0x248 ActiveImpersonationInfo : Pos 3, 1 Bit</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>   +0x248 SystemThread     : Pos 4, 1 Bit</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>   +0x248 HardErrorsAreDisabled : Pos 5, 1 Bit</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>   +0x248 BreakOnTermination : Pos 6, 1 Bit</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>   +0x248 SkipCreationMsg  : Pos 7, 1 Bit</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>   +0x248 SkipTerminationMsg : Pos 8, 1 Bit</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>   +0x24c SameThreadPassiveFlags : Uint4B</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>   +0x24c ActiveExWorker   : Pos 0, 1 Bit</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>   +0x24c ExWorkerCanWaitUser : Pos 1, 1 Bit</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>   +0x24c MemoryMaker      : Pos 2, 1 Bit</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>   +0x250 SameThreadApcFlags : Uint4B</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>   +0x250 LpcReceivedMsgIdValid : Pos 0, 1 Bit</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>   +0x250 LpcExitThreadCalled : Pos 1, 1 Bit</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>   +0x250 AddressSpaceOwner : Pos 2, 1 Bit</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>   +0x254 ForwardClusterOnly : UChar</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>   +0x255 DisablePageFaultClustering : UChar</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>   +0x258 KernelStackReference : Uint4B</pre></td></tr></table></figure><p>其中第一个成员也是一个结构体 _KTHREAD</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kd&gt; dt _KTHREAD</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>nt!_KTHREAD</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   +0x000 Header           : _DISPATCHER_HEADER</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   +0x010 MutantListHead   : _LIST_ENTRY</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   +0x018 InitialStack     : Ptr32 Void</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   +0x01c StackLimit       : Ptr32 Void</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   +0x020 Teb              : Ptr32 Void</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   +0x024 TlsArray         : Ptr32 Void</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   +0x028 KernelStack      : Ptr32 Void</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   +0x02c DebugActive      : UChar</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   +0x02d State            : UChar</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   +0x02e Alerted          : [2] UChar</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   +0x030 Iopl             : UChar</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   +0x031 NpxState         : UChar</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   +0x032 Saturation       : Char</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   +0x033 Priority         : Char</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   +0x034 ApcState         : _KAPC_STATE</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   +0x04c ContextSwitches  : Uint4B</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   +0x050 IdleSwapBlock    : UChar</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>   +0x051 VdmSafe          : UChar</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>   +0x052 Spare0           : [2] UChar</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>   +0x054 WaitStatus       : Int4B</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>   +0x058 WaitIrql         : UChar</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>   +0x059 WaitMode         : Char</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>   +0x05a WaitNext         : UChar</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>   +0x05b WaitReason       : UChar</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>   +0x05c WaitBlockList    : Ptr32 _KWAIT_BLOCK</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>   +0x060 WaitListEntry    : _LIST_ENTRY</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>   +0x060 SwapListEntry    : _SINGLE_LIST_ENTRY</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>   +0x068 WaitTime         : Uint4B</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>   +0x06c BasePriority     : Char</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>   +0x06d DecrementCount   : UChar</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>   +0x06e PriorityDecrement : Char</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>   +0x06f Quantum          : Char</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>   +0x070 WaitBlock        : [4] _KWAIT_BLOCK</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>   +0x0d0 LegoData         : Ptr32 Void</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>   +0x0d4 KernelApcDisable : Uint4B</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>   +0x0d8 UserAffinity     : Uint4B</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>   +0x0dc SystemAffinityActive : UChar</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>   +0x0dd PowerState       : UChar</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>   +0x0de NpxIrql          : UChar</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>   +0x0df InitialNode      : UChar</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>   +0x0e0 ServiceTable     : Ptr32 Void</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>   +0x0e4 Queue            : Ptr32 _KQUEUE</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>   +0x0e8 ApcQueueLock     : Uint4B</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>   +0x0f0 Timer            : _KTIMER</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>   +0x118 QueueListEntry   : _LIST_ENTRY</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>   +0x120 SoftAffinity     : Uint4B</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>   +0x124 Affinity         : Uint4B</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>   +0x128 Preempted        : UChar</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>   +0x129 ProcessReadyQueue : UChar</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>   +0x12a KernelStackResident : UChar</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>   +0x12b NextProcessor    : UChar</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>   +0x12c CallbackStack    : Ptr32 Void</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>   +0x130 Win32Thread      : Ptr32 Void</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>   +0x134 TrapFrame        : Ptr32 _KTRAP_FRAME</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>   +0x138 ApcStatePointer  : [2] Ptr32 _KAPC_STATE</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>   +0x140 PreviousMode     : Char</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>   +0x141 EnableStackSwap  : UChar</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>   +0x142 LargeStack       : UChar</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>   +0x143 ResourceIndex    : UChar</pre></td></tr><tr><td data-num=\"62\"></td><td><pre>   +0x144 KernelTime       : Uint4B</pre></td></tr><tr><td data-num=\"63\"></td><td><pre>   +0x148 UserTime         : Uint4B</pre></td></tr><tr><td data-num=\"64\"></td><td><pre>   +0x14c SavedApcState    : _KAPC_STATE</pre></td></tr><tr><td data-num=\"65\"></td><td><pre>   +0x164 Alertable        : UChar</pre></td></tr><tr><td data-num=\"66\"></td><td><pre>   +0x165 ApcStateIndex    : UChar</pre></td></tr><tr><td data-num=\"67\"></td><td><pre>   +0x166 ApcQueueable     : UChar</pre></td></tr><tr><td data-num=\"68\"></td><td><pre>   +0x167 AutoAlignment    : UChar</pre></td></tr><tr><td data-num=\"69\"></td><td><pre>   +0x168 StackBase        : Ptr32 Void</pre></td></tr><tr><td data-num=\"70\"></td><td><pre>   +0x16c SuspendApc       : _KAPC</pre></td></tr><tr><td data-num=\"71\"></td><td><pre>   +0x19c SuspendSemaphore : _KSEMAPHORE</pre></td></tr><tr><td data-num=\"72\"></td><td><pre>   +0x1b0 ThreadListEntry  : _LIST_ENTRY</pre></td></tr><tr><td data-num=\"73\"></td><td><pre>   +0x1b8 FreezeCount      : Char</pre></td></tr><tr><td data-num=\"74\"></td><td><pre>   +0x1b9 SuspendCount     : Char</pre></td></tr><tr><td data-num=\"75\"></td><td><pre>   +0x1ba IdealProcessor   : UChar</pre></td></tr><tr><td data-num=\"76\"></td><td><pre>   +0x1bb DisableBoost     : UChar</pre></td></tr></table></figure><h2 id=\"kthread-主要成员\"><a class=\"anchor\" href=\"#kthread-主要成员\">#</a> KTHREAD 主要成员</h2>\n<ol>\n<li><strong>+0x000 Header : _DISPATCHER_HEADER</strong></li>\n</ol>\n<p>和 KPROCESS 类似，开头是一个 Header，拥有此属性的内核对象可以 “被等待”（WaitForSingleObject）</p>\n<ol start=\"2\">\n<li><strong>+0x018 InitialStack : Ptr32 Void<br />\n+0x01c StackLimit : Ptr32 Void<br />\n+0x028 KernelStack : Ptr32 Void</strong></li>\n</ol>\n<p>线程切换相关</p>\n<p>InitialStack 初始栈顶，也可以理解成 ebp0<br />\nStackLimit 栈的大小<br />\n KernelStack 线程切换时，旧线程的 esp0 存到它的 KernelStack，然后把新线程的 KernelStack 写到 TSS</p>\n<ol start=\"3\">\n<li><strong>+0x020 Teb : Ptr32 Void</strong></li>\n</ol>\n<p>TEB，Thread Environment Block，线程环境块。<br />\n大小 4KB, 位于用户地址空间。<br />\n3 环可以通过 FS:[0] 找到 TEB</p>\n<ol start=\"4\">\n<li><strong>+0x02c DebugActive : UChar</strong></li>\n</ol>\n<p>是否处于调试状态</p>\n<ol start=\"5\">\n<li><strong>+0x034 ApcState : _KAPC_STATE</strong><br />\n<strong>+0x0e8 ApcQueueLock : Uint4B</strong><br />\n<strong>+0x138 ApcStatePointer : [2] Ptr32 _KAPC_STATE</strong><br />\n<strong>+0x14c SavedApcState : _KAPC_STATE</strong></li>\n</ol>\n<p>APC 相关属性。其中 **+0x034 ApcState : _KAPC_STATE** 的结构如下：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kd&gt; dt _KAPC_STATE</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>nt!_KAPC_STATE</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   +0x000 ApcListHead      : [2] _LIST_ENTRY</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   +0x010 Process          : Ptr32 _KPROCESS</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   +0x014 KernelApcInProgress : UChar</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   +0x015 KernelApcPending : UChar</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   +0x016 UserApcPending   : UChar</pre></td></tr></table></figure><p>故在  <code>+0x44</code>  的位置是当前线程的进程结构体  <code>EPROCESS</code>  的地址</p>\n<ol start=\"6\">\n<li><strong>+0x02d State : UChar</strong></li>\n</ol>\n<p>线程状态：就绪、等待、运行。</p>\n<ol start=\"7\">\n<li><strong>+0x06c BasePriority : Char</strong></li>\n</ol>\n<p>其初始值是所属进程的 BasePriority 值 (KPROCESS-&gt;BasePriority)，以后可以通过 KeSetBasePriorityThread () 函数重新设定</p>\n<ol start=\"8\">\n<li><strong>+0x070 WaitBlock : [4] _KWAIT_BLOCK</strong></li>\n</ol>\n<p>等待哪个对象（WaitForSingleObject）</p>\n<ol start=\"9\">\n<li><strong>+0x0e0 ServiceTable : Ptr32 Void</strong></li>\n</ol>\n<p>指向系统服务表基址</p>\n<ol start=\"10\">\n<li><strong>+0x134 TrapFrame</strong></li>\n</ol>\n<p>进 0 环时保存环境</p>\n<ol start=\"11\">\n<li><strong>+0x140 PreviousMode : Char</strong></li>\n</ol>\n<p>某些内核函数会判断程序是 0 环调用还是 3 环调用的</p>\n<ol start=\"12\">\n<li><strong>+0x1b0 ThreadListEntry : _LIST_ENTRY</strong></li>\n</ol>\n<p>双向链表，一个进程所有的线程都挂在一个链表中，挂的就是这个位置，有两个这样的链表</p>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<h2 id=\"_ethread-主要成员\"><a class=\"anchor\" href=\"#_ethread-主要成员\">#</a> _ETHREAD 主要成员</h2>\n<ol>\n<li><strong>+0x1ec Cid : _CLIENT_ID</strong></li>\n</ol>\n<p>进程 ID、线程 ID</p>\n<ol start=\"2\">\n<li><strong>+0x220 ThreadsProcess : Ptr32 _EPROCESS</strong></li>\n</ol>\n<p>指向自己所属进程结构体。这个值和 +0x44 那里的值一样。</p>\n<ol start=\"3\">\n<li><strong>+0x22c ThreadListEntry : _LIST_ENTRY</strong></li>\n</ol>\n<p>双向链表，一个进程所有的线程都挂在一个链表中，挂的就是这个位置，有两个这样的链表</p>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<h1 id=\"课后实验\"><a class=\"anchor\" href=\"#课后实验\">#</a> 课后实验</h1>\n<p>断链线程结构体，实现隐藏，并思考为什么断链后线程还能够执行。</p>\n<p>并没有写恢复 代码如下：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;ntddk.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>VOID <span class=\"token function\">DriverUnload</span><span class=\"token punctuation\">(</span>PDRIVER_OBJECT pDriver<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是驱动，我卸载了\\t\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>NTSTATUS <span class=\"token function\">_NtThreadHide</span><span class=\"token punctuation\">(</span>PUCHAR lpImageFileName<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tPEPROCESS pEPROCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t__asm</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\tmov eax<span class=\"token punctuation\">,</span> fs<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0x124</span><span class=\"token punctuation\">]</span> </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\tmov eax<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>eax <span class=\"token operator\">+</span> <span class=\"token number\">0x220</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\tmov pEPROCESS<span class=\"token punctuation\">,</span> eax</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\tPLIST_ENTRY pHeader <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PCHAR<span class=\"token punctuation\">)</span>pEPROCESS <span class=\"token operator\">+</span> <span class=\"token number\">0x88</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\tPLIST_ENTRY pCur <span class=\"token operator\">=</span> pHeader<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">strcmp</span><span class=\"token punctuation\">(</span>lpImageFileName<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>PCHAR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ULONG<span class=\"token punctuation\">)</span>pCur <span class=\"token operator\">-</span> <span class=\"token number\">0x88</span> <span class=\"token operator\">+</span> <span class=\"token number\">0x174</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t\tPLIST_ENTRY pEThreadHeader1<span class=\"token punctuation\">,</span> pEThreadHeader2<span class=\"token punctuation\">,</span> pEThreadCur<span class=\"token punctuation\">,</span> pEThreadNext<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t\tULONG uSizeOfLIST_ENTRY <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>LIST_ENTRY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t\tlpImageFileName <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PCHAR<span class=\"token punctuation\">)</span>pCur <span class=\"token operator\">+</span> <span class=\"token number\">0xec</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"该进程名称: %s\\n\"</span><span class=\"token punctuation\">,</span> lpImageFileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t\tpEThreadHeader1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PCHAR<span class=\"token punctuation\">)</span>pCur <span class=\"token operator\">-</span> <span class=\"token number\">0x88</span> <span class=\"token operator\">+</span> <span class=\"token number\">0x50</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 模块链表头</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t\tpEThreadHeader2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PCHAR<span class=\"token punctuation\">)</span>pCur <span class=\"token operator\">-</span> <span class=\"token number\">0x88</span> <span class=\"token operator\">+</span> <span class=\"token number\">0x190</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 模块链表头</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t\tpEThreadCur <span class=\"token operator\">=</span> pEThreadHeader1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\t\t<span class=\"token keyword\">do</span> </pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\t\t\tpEThreadNext <span class=\"token operator\">=</span> pEThreadCur<span class=\"token operator\">-></span>Blink<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\t\t\tpEThreadCur<span class=\"token operator\">-></span>Flink <span class=\"token operator\">=</span> pEThreadCur<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\t\t\tpEThreadCur<span class=\"token operator\">-></span>Blink <span class=\"token operator\">=</span> pEThreadCur<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\t\t\tpEThreadCur <span class=\"token operator\">=</span> pEThreadNext<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\t\t\t</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>pEThreadHeader1 <span class=\"token operator\">==</span> pEThreadCur<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\t\tpEThreadCur <span class=\"token operator\">=</span> pEThreadHeader2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\t\t<span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\t\t\tpEThreadNext <span class=\"token operator\">=</span> pEThreadCur<span class=\"token operator\">-></span>Blink<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t\t\t\tpEThreadCur<span class=\"token operator\">-></span>Flink <span class=\"token operator\">=</span> pEThreadCur<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 指向自己，不能直接置为 0, 否则会触发蓝屏</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t\t\t\tpEThreadCur<span class=\"token operator\">-></span>Blink <span class=\"token operator\">=</span> pEThreadCur<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t\t\t\tpEThreadCur <span class=\"token operator\">=</span> pEThreadNext<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>pEThreadHeader1 <span class=\"token operator\">==</span> pEThreadCur<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t\t\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"线程隐藏成功!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> STATUS_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t\tpCur <span class=\"token operator\">=</span> pCur<span class=\"token operator\">-></span>Blink<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>pCur <span class=\"token operator\">!=</span> pHeader<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t<span class=\"token keyword\">return</span> STATUS_ABANDONED<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>NTSTATUS <span class=\"token function\">DriverEntry</span><span class=\"token punctuation\">(</span>PDRIVER_OBJECT pDriver<span class=\"token punctuation\">,</span> PUNICODE_STRING pRegPath<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\tpDriver<span class=\"token operator\">-></span>DriverUnload <span class=\"token operator\">=</span> DriverUnload<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是驱动,我运行了\\t\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t<span class=\"token comment\">// 线程断链</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">NT_SUCCESS</span><span class=\"token punctuation\">(</span><span class=\"token function\">_NtThreadHide</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Dbgview.exe\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> STATUS_UNSUCCESSFUL<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\t<span class=\"token keyword\">return</span> STATUS_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"image002.png\" alt=\"\" /></p>\n<p>断链后</p>\n<p><img data-src=\"image003.png\" alt=\"\" /></p>\n<p>断链后还可以运行。</p>\n<p>尝试用调试器附加：</p>\n<p><img data-src=\"image004.png\" alt=\"\" /></p>\n<p>这个时候 xp 已经卡死了</p>\n<h1 id=\"reference\"><a class=\"anchor\" href=\"#reference\">#</a> Reference</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzg5MDk1OS9hcnRpY2xlL2RldGFpbHMvMTE0NTI3NDEx\">https://blog.csdn.net/weixin_43890959/article/details/114527411</span><br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0t3YW5zeS9hcnRpY2xlL2RldGFpbHMvMTA5NTI5MjY0\">https://blog.csdn.net/Kwansy/article/details/109529264</span></p>\n",
            "tags": [
                "ETHREAD",
                "KTHREAD"
            ]
        },
        {
            "id": "https://or0kit.github.io/Bin/Core/WindowsXp/Process-Thread/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B-%E8%BF%9B%E7%A8%8B%E7%BB%93%E6%9E%84%E4%BD%93/",
            "url": "https://or0kit.github.io/Bin/Core/WindowsXp/Process-Thread/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B-%E8%BF%9B%E7%A8%8B%E7%BB%93%E6%9E%84%E4%BD%93/",
            "title": "进程与线程-进程结构体",
            "date_published": "2022-01-01T00:53:20.000Z",
            "content_html": "<h1 id=\"进程\"><a class=\"anchor\" href=\"#进程\">#</a> 进程</h1>\n<p>进程最重要的作用是提供了 CR3，10-10-12 分页下 CR3 指向页目录表，2-9-9-12 分页下 CR3 指向页目录指针表。<br />\n每个进程至少有一个线程。<br />\n本质上，没有进程切换，只有线程切换。线程切换时会判断是否是同一个进程的线程，若不是同一进程则切换 CR3，这样看来进程也就切换了。<br />\n我们说进程是空间概念，进程为它的线程提供了 CR3，那么它的线程访问同一个线性地址时，就能访问到同一个物理页。<br />\nwindbg 中的  <code>attach</code>  和  <code>.process</code>  本质就是切换 CR3。</p>\n<h1 id=\"进程结构体-eproccess\"><a class=\"anchor\" href=\"#进程结构体-eproccess\">#</a> 进程结构体 EPROCCESS</h1>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kd&gt; dt _EPROCESS </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>nt!_EPROCESS</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   +0x000 Pcb              : _KPROCESS</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   +0x06c ProcessLock      : _EX_PUSH_LOCK</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   +0x070 CreateTime       : _LARGE_INTEGER</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   +0x078 ExitTime         : _LARGE_INTEGER</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   +0x080 RundownProtect   : _EX_RUNDOWN_REF</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   +0x084 UniqueProcessId  : Ptr32 Void</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   +0x088 ActiveProcessLinks : _LIST_ENTRY</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   +0x090 QuotaUsage       : [3] Uint4B</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   +0x09c QuotaPeak        : [3] Uint4B</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   +0x0a8 CommitCharge     : Uint4B</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   +0x0ac PeakVirtualSize  : Uint4B</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   +0x0b0 VirtualSize      : Uint4B</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   +0x0b4 SessionProcessLinks : _LIST_ENTRY</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   +0x0bc DebugPort        : Ptr32 Void</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   +0x0c0 ExceptionPort    : Ptr32 Void</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   +0x0c4 ObjectTable      : Ptr32 _HANDLE_TABLE</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   +0x0c8 Token            : _EX_FAST_REF</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>   +0x0cc WorkingSetLock   : _FAST_MUTEX</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>   +0x0ec WorkingSetPage   : Uint4B</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>   +0x0f0 AddressCreationLock : _FAST_MUTEX</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>   +0x110 HyperSpaceLock   : Uint4B</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>   +0x114 ForkInProgress   : Ptr32 _ETHREAD</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>   +0x118 HardwareTrigger  : Uint4B</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>   +0x11c VadRoot          : Ptr32 Void</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>   +0x120 VadHint          : Ptr32 Void</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>   +0x124 CloneRoot        : Ptr32 Void</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>   +0x128 NumberOfPrivatePages : Uint4B</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>   +0x12c NumberOfLockedPages : Uint4B</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>   +0x130 Win32Process     : Ptr32 Void</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>   +0x134 Job              : Ptr32 _EJOB</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>   +0x138 SectionObject    : Ptr32 Void</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>   +0x13c SectionBaseAddress : Ptr32 Void</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>   +0x140 QuotaBlock       : Ptr32 _EPROCESS_QUOTA_BLOCK</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>   +0x144 WorkingSetWatch  : Ptr32 _PAGEFAULT_HISTORY</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>   +0x148 Win32WindowStation : Ptr32 Void</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>   +0x14c InheritedFromUniqueProcessId : Ptr32 Void</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>   +0x150 LdtInformation   : Ptr32 Void</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>   +0x154 VadFreeHint      : Ptr32 Void</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>   +0x158 VdmObjects       : Ptr32 Void</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>   +0x15c DeviceMap        : Ptr32 Void</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>   +0x160 PhysicalVadList  : _LIST_ENTRY</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>   +0x168 PageDirectoryPte : _HARDWARE_PTE</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>   +0x168 Filler           : Uint8B</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>   +0x170 Session          : Ptr32 Void</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>   +0x174 ImageFileName    : [16] UChar</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>   +0x184 JobLinks         : _LIST_ENTRY</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>   +0x18c LockedPagesList  : Ptr32 Void</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>   +0x190 ThreadListHead   : _LIST_ENTRY</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>   +0x198 SecurityPort     : Ptr32 Void</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>   +0x19c PaeTop           : Ptr32 Void</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>   +0x1a0 ActiveThreads    : Uint4B</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>   +0x1a4 GrantedAccess    : Uint4B</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>   +0x1a8 DefaultHardErrorProcessing : Uint4B</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>   +0x1ac LastThreadExitStatus : Int4B</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>   +0x1b0 Peb              : Ptr32 _PEB</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>   +0x1b4 PrefetchTrace    : _EX_FAST_REF</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>   +0x1b8 ReadOperationCount : _LARGE_INTEGER</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>   +0x1c0 WriteOperationCount : _LARGE_INTEGER</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>   +0x1c8 OtherOperationCount : _LARGE_INTEGER</pre></td></tr><tr><td data-num=\"62\"></td><td><pre>   +0x1d0 ReadTransferCount : _LARGE_INTEGER</pre></td></tr><tr><td data-num=\"63\"></td><td><pre>   +0x1d8 WriteTransferCount : _LARGE_INTEGER</pre></td></tr><tr><td data-num=\"64\"></td><td><pre>   +0x1e0 OtherTransferCount : _LARGE_INTEGER</pre></td></tr><tr><td data-num=\"65\"></td><td><pre>   +0x1e8 CommitChargeLimit : Uint4B</pre></td></tr><tr><td data-num=\"66\"></td><td><pre>   +0x1ec CommitChargePeak : Uint4B</pre></td></tr><tr><td data-num=\"67\"></td><td><pre>   +0x1f0 AweInfo          : Ptr32 Void</pre></td></tr><tr><td data-num=\"68\"></td><td><pre>   +0x1f4 SeAuditProcessCreationInfo : _SE_AUDIT_PROCESS_CREATION_INFO</pre></td></tr><tr><td data-num=\"69\"></td><td><pre>   +0x1f8 Vm               : _MMSUPPORT</pre></td></tr><tr><td data-num=\"70\"></td><td><pre>   +0x238 LastFaultCount   : Uint4B</pre></td></tr><tr><td data-num=\"71\"></td><td><pre>   +0x23c ModifiedPageCount : Uint4B</pre></td></tr><tr><td data-num=\"72\"></td><td><pre>   +0x240 NumberOfVads     : Uint4B</pre></td></tr><tr><td data-num=\"73\"></td><td><pre>   +0x244 JobStatus        : Uint4B</pre></td></tr><tr><td data-num=\"74\"></td><td><pre>   +0x248 Flags            : Uint4B</pre></td></tr><tr><td data-num=\"75\"></td><td><pre>   +0x248 CreateReported   : Pos 0, 1 Bit</pre></td></tr><tr><td data-num=\"76\"></td><td><pre>   +0x248 NoDebugInherit   : Pos 1, 1 Bit</pre></td></tr><tr><td data-num=\"77\"></td><td><pre>   +0x248 ProcessExiting   : Pos 2, 1 Bit</pre></td></tr><tr><td data-num=\"78\"></td><td><pre>   +0x248 ProcessDelete    : Pos 3, 1 Bit</pre></td></tr><tr><td data-num=\"79\"></td><td><pre>   +0x248 Wow64SplitPages  : Pos 4, 1 Bit</pre></td></tr><tr><td data-num=\"80\"></td><td><pre>   +0x248 VmDeleted        : Pos 5, 1 Bit</pre></td></tr><tr><td data-num=\"81\"></td><td><pre>   +0x248 OutswapEnabled   : Pos 6, 1 Bit</pre></td></tr><tr><td data-num=\"82\"></td><td><pre>   +0x248 Outswapped       : Pos 7, 1 Bit</pre></td></tr><tr><td data-num=\"83\"></td><td><pre>   +0x248 ForkFailed       : Pos 8, 1 Bit</pre></td></tr><tr><td data-num=\"84\"></td><td><pre>   +0x248 HasPhysicalVad   : Pos 9, 1 Bit</pre></td></tr><tr><td data-num=\"85\"></td><td><pre>   +0x248 AddressSpaceInitialized : Pos 10, 2 Bits</pre></td></tr><tr><td data-num=\"86\"></td><td><pre>   +0x248 SetTimerResolution : Pos 12, 1 Bit</pre></td></tr><tr><td data-num=\"87\"></td><td><pre>   +0x248 BreakOnTermination : Pos 13, 1 Bit</pre></td></tr><tr><td data-num=\"88\"></td><td><pre>   +0x248 SessionCreationUnderway : Pos 14, 1 Bit</pre></td></tr><tr><td data-num=\"89\"></td><td><pre>   +0x248 WriteWatch       : Pos 15, 1 Bit</pre></td></tr><tr><td data-num=\"90\"></td><td><pre>   +0x248 ProcessInSession : Pos 16, 1 Bit</pre></td></tr><tr><td data-num=\"91\"></td><td><pre>   +0x248 OverrideAddressSpace : Pos 17, 1 Bit</pre></td></tr><tr><td data-num=\"92\"></td><td><pre>   +0x248 HasAddressSpace  : Pos 18, 1 Bit</pre></td></tr><tr><td data-num=\"93\"></td><td><pre>   +0x248 LaunchPrefetched : Pos 19, 1 Bit</pre></td></tr><tr><td data-num=\"94\"></td><td><pre>   +0x248 InjectInpageErrors : Pos 20, 1 Bit</pre></td></tr><tr><td data-num=\"95\"></td><td><pre>   +0x248 VmTopDown        : Pos 21, 1 Bit</pre></td></tr><tr><td data-num=\"96\"></td><td><pre>   +0x248 Unused3          : Pos 22, 1 Bit</pre></td></tr><tr><td data-num=\"97\"></td><td><pre>   +0x248 Unused4          : Pos 23, 1 Bit</pre></td></tr><tr><td data-num=\"98\"></td><td><pre>   +0x248 VdmAllowed       : Pos 24, 1 Bit</pre></td></tr><tr><td data-num=\"99\"></td><td><pre>   +0x248 Unused           : Pos 25, 5 Bits</pre></td></tr><tr><td data-num=\"100\"></td><td><pre>   +0x248 Unused1          : Pos 30, 1 Bit</pre></td></tr><tr><td data-num=\"101\"></td><td><pre>   +0x248 Unused2          : Pos 31, 1 Bit</pre></td></tr><tr><td data-num=\"102\"></td><td><pre>   +0x24c ExitStatus       : Int4B</pre></td></tr><tr><td data-num=\"103\"></td><td><pre>   +0x250 NextPageColor    : Uint2B</pre></td></tr><tr><td data-num=\"104\"></td><td><pre>   +0x252 SubSystemMinorVersion : UChar</pre></td></tr><tr><td data-num=\"105\"></td><td><pre>   +0x253 SubSystemMajorVersion : UChar</pre></td></tr><tr><td data-num=\"106\"></td><td><pre>   +0x252 SubSystemVersion : Uint2B</pre></td></tr><tr><td data-num=\"107\"></td><td><pre>   +0x254 PriorityClass    : UChar</pre></td></tr><tr><td data-num=\"108\"></td><td><pre>   +0x255 WorkingSetAcquiredUnsafe : UChar</pre></td></tr><tr><td data-num=\"109\"></td><td><pre>   +0x258 Cookie           : Uint4B</pre></td></tr></table></figure><p>其中第一个成员也是一个结构体 _KPROCESS</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kd&gt; dt _KPROCESS</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>ntdll!_KPROCESS</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   +0x000 Header           : _DISPATCHER_HEADER</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   +0x010 ProfileListHead  : _LIST_ENTRY</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   +0x018 DirectoryTableBase : [2] Uint4B</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   +0x020 LdtDescriptor    : _KGDTENTRY</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   +0x028 Int21Descriptor  : _KIDTENTRY</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   +0x030 IopmOffset       : Uint2B</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   +0x032 Iopl             : UChar</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   +0x033 Unused           : UChar</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   +0x034 ActiveProcessors : Uint4B</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   +0x038 KernelTime       : Uint4B</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   +0x03c UserTime         : Uint4B</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   +0x040 ReadyListHead    : _LIST_ENTRY</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   +0x048 SwapListEntry    : _SINGLE_LIST_ENTRY</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   +0x04c VdmTrapcHandler  : Ptr32 Void</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   +0x050 ThreadListHead   : _LIST_ENTRY</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   +0x058 ProcessLock      : Uint4B</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   +0x05c Affinity         : Uint4B</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>   +0x060 StackCount       : Uint2B</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>   +0x062 BasePriority     : Char</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>   +0x063 ThreadQuantum    : Char</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>   +0x064 AutoAlignment    : UChar</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>   +0x065 State            : UChar</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>   +0x066 ThreadSeed       : UChar</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>   +0x067 DisableBoost     : UChar</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>   +0x068 PowerState       : UChar</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>   +0x069 DisableQuantum   : UChar</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>   +0x06a IdealNode        : UChar</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>   +0x06b Flags            : _KEXECUTE_OPTIONS</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>   +0x06b ExecuteOptions   : UChar</pre></td></tr></table></figure><h2 id=\"kprocess主要成员介绍\"><a class=\"anchor\" href=\"#kprocess主要成员介绍\">#</a> KPROCESS 主要成员介绍</h2>\n<p>内核层的进程对象。K 开头的是内核层的。</p>\n<h3 id=\"0x000-header-_dispatcher_header\"><a class=\"anchor\" href=\"#0x000-header-_dispatcher_header\">#</a> <strong>+0x000 Header           : _DISPATCHER_HEADER</strong></h3>\n<p>分发器对象 （dispatcher object），现在只需知道进程是可以被等待的就行。“可等待” 对象，比如 Mutex 互斥体、Event 事件等（WaitForSingleObject）</p>\n<h3 id=\"0x018-directorytablebase-2-uint4b\"><a class=\"anchor\" href=\"#0x018-directorytablebase-2-uint4b\">#</a> <strong>+0x018 DirectoryTableBase : [2] Uint4B</strong></h3>\n<p>一个只有两项的数组，其中第一项指向该进程的也目录表地址，第二项指向该进程的超空间（hyper space）的页目录表地址。</p>\n<h3 id=\"0x020-ldtdescriptor-_kgdtentry-0x028-int21descriptor-_kidtentry\"><a class=\"anchor\" href=\"#0x020-ldtdescriptor-_kgdtentry-0x028-int21descriptor-_kidtentry\">#</a> <strong>【+0x020 LdtDescriptor    : _KGDTENTRY】、【+0x028 Int21Descriptor  : _KIDTENTRY】</strong></h3>\n<p>历史遗留，16 位 Windows 段选择子不够 每个进程都有一个 LDT 表<br />\n Int21Descriptor  是 DOS 下要用的</p>\n<h3 id=\"0x034-activeprocessors-uint4b\"><a class=\"anchor\" href=\"#0x034-activeprocessors-uint4b\">#</a> <strong>+0x034 ActiveProcessors : Uint4B</strong></h3>\n<p>ActiveProcessors 域记录了当前进程正在哪些处理器上运行。</p>\n<h3 id=\"0x038-kerneltime-uint4b-0x03c-usertime-uint4b\"><a class=\"anchor\" href=\"#0x038-kerneltime-uint4b-0x03c-usertime-uint4b\">#</a> <strong>【+0x038 KernelTime       : Uint4B】、【+0x03c UserTime         : Uint4B】</strong></h3>\n<p>统计信息 记录了一个进程在内核模式 / 用户模式下所花的时间。进程的  <code>KernelTime</code>  和  <code>UserTime</code>  时间值等于所属线程对应的 <code>KernelTime</code>  和  <code>UserTime</code>  值的和。但是，由于仅当一个线程结束时才更新其进程的这两个时间值，所以，若一个进程中尚未有任何一个线程结束，则这两个域中的值为 0。</p>\n<h3 id=\"0x040-readylisthead-_list_entry\"><a class=\"anchor\" href=\"#0x040-readylisthead-_list_entry\">#</a> <strong>+0x040 ReadyListHead    : _LIST_ENTRY</strong></h3>\n<p><code>ReadyListHead</code>  是一个双向链表的表头，该链表记录了这个进程中处于就绪状态但尚未被加入全局就绪链表的线程，这个域的意义在于，当一个进程被换出内存以后，它所属的线程一旦就绪，则被挂到此链表中，并要求换入该进程；以后，当该进程被换入内存时， <code>ReadyListHead</code>  中的所有线程被加入到系统全局的就绪线程链表中。注意， <code>ReadyListHead</code>  链表中的每一项都是一个指向 <code>KTHREAD</code>  对象的 <code>WaitlistEntry</code>  域的地址，所以，从链表中的每一项都可以定位到对应的线程对象。例如，下面的代码片段是从 <code>KilnSwapProcesses</code>  函数中摘录的，从代码中可以看到 <code>ReadyListHead</code>  链表的用法。这段代码的意图是，将链表中的每个线程加入到全局就绪线程链表中（通过调用 <code>KiReadyThread</code>  来完成）。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Process<span class=\"token operator\">-></span>State<span class=\"token operator\">=</span>ProcessInMemory；</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>NextEntry<span class=\"token operator\">=</span>Process<span class=\"token operator\">-></span>ReadyListHead<span class=\"token punctuation\">.</span>Flink<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>NextEntry l<span class=\"token operator\">=</span><span class=\"token operator\">&amp;</span>Process<span class=\"token operator\">-></span>ReadyListHead<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  Thread<span class=\"token operator\">=</span><span class=\"token function\">CONTAINING_RECORD</span><span class=\"token punctuation\">(</span>NextEntry<span class=\"token punctuation\">,</span>KTHREAD<span class=\"token punctuation\">,</span>WaitListEntry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token function\">RemoveEntryList</span><span class=\"token punctuation\">(</span>NextEntry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  Thread<span class=\"token operator\">-></span>ProcessReadyQueue <span class=\"token operator\">=</span>FALSE；</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token function\">KiReadyThread</span><span class=\"token punctuation\">(</span>Thread<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  NextEntry<span class=\"token operator\">=</span>Process<span class=\"token operator\">-></span>ReadyListHead<span class=\"token punctuation\">.</span>Flink<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"0x048-swaplistentry-_single_list_entry\"><a class=\"anchor\" href=\"#0x048-swaplistentry-_single_list_entry\">#</a> <strong>+0x048 SwapListEntry    : _SINGLE_LIST_ENTRY</strong></h3>\n<p>SwapListEntry 域是一个单链表项，当一个进程要被换出内存时，它通过此域加入到以 KiProcessOurSwapListHead 为链头的单链表中；当一个进程要被换入内存时，它通过此域加入到以 KiProcessInSwapListHead 为链头的单链表中。这里，KiProcessOurSwapListHead 和 KiProcessInSwapListHead 是全局变量。</p>\n<h3 id=\"0x05c-affinity-uint4b\"><a class=\"anchor\" href=\"#0x05c-affinity-uint4b\">#</a> <strong>+0x05c Affinity         : Uint4B</strong></h3>\n<p>Affinity 域指定了该进程的线程可以在哪些处理器上运行，其类型是 KAFFINITY, 这是一个 32 位或 64 位整数，其二进制表示的每位分别对应于当前机器上的一个处理器 (或核)。</p>\n<p>规定进程里面的所有线程能在哪个 CPU 上跑，如果值为 1，那这个进程的所以线程只能在 0 号 CPU 上跑 (00000001)\t\t\t\t<br />\n如果值为 3，那这个进程的所以线程能在 0、1 号 CPU 上跑 (000000011)\t<br />\n如果值为 4，那这个进程的所以线程能在 2 号 CPU 上跑 (000000100)\t<br />\n如果值为 5，那这个进程的所以线程能在 0，2 号 CPU 上跑 (000000101)\t<br />\n4 个字节共 32 位  所以最多 32 核 Windows64 位 就 64 核\t\t\t<br />\n如果只有一个 CPU 把这个设置为 4 那么这个进程就死了</p>\n<h3 id=\"0x062-basepriority-char\"><a class=\"anchor\" href=\"#0x062-basepriority-char\">#</a> <strong>+0x062 BasePriority     : Char</strong></h3>\n<p>基础优先级或最低优先级 该进程中的所有线程最起码的优先级.</p>\n<h3 id=\"0x065-state-uchar\"><a class=\"anchor\" href=\"#0x065-state-uchar\">#</a> <strong>+0x065 State            : UChar</strong></h3>\n<p>State 域说明了一个进程是否在内存中，共有六种可能的状态： <code>ProcessInMemory</code> 、 <code>ProcessOutOfMemory</code> 、 <code>ProcessInTransition</code> 、 <code>ProcessOutTransition</code> 、 <code>ProcessInSwap</code>  和 <code>ProcessOutSwap</code> 。所谓一个进程在内存中，或者已被换出，或者正在转移过程中，是指该进程的虚拟地址空间需要占据足够的物理内存，或者虚拟空间中的内容已被换出物理内存，或者正在换入或换出过程之中。</p>\n<h2 id=\"eprocess其他成员\"><a class=\"anchor\" href=\"#eprocess其他成员\">#</a> EPROCESS 其他成员</h2>\n<p>执行体层的进程和线程对象。E 开头的。</p>\n<h3 id=\"0x070-createtime-_large_integer-0x078-exittime-_large_integer\"><a class=\"anchor\" href=\"#0x070-createtime-_large_integer-0x078-exittime-_large_integer\">#</a> <strong>【+0x070 CreateTime       : _LARGE_INTEGER】、【+0x078 ExitTime         : _LARGE_INTEGER】</strong></h3>\n<p>进程的创建 / 退出时间。 没什么用，不准确。</p>\n<h3 id=\"0x084-uniqueprocessid-ptr32-void\"><a class=\"anchor\" href=\"#0x084-uniqueprocessid-ptr32-void\">#</a> <strong>+0x084 UniqueProcessId  : Ptr32 Void</strong></h3>\n<p>进程的编号 任务管理器中的 PID</p>\n<h3 id=\"0x088-activeprocesslinks-_list_entry\"><a class=\"anchor\" href=\"#0x088-activeprocesslinks-_list_entry\">#</a> <strong>+0x088 ActiveProcessLinks : _LIST_ENTRY</strong></h3>\n<p>双向链表 所有的活动进程都连接在一起，构成了一个链表<br />\n PsActiveProcessHead 指向全局链表头</p>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<h3 id=\"0x090-quotausage-3-uint4b-0x09c-quotapeak-3-uint4b\"><a class=\"anchor\" href=\"#0x090-quotausage-3-uint4b-0x09c-quotapeak-3-uint4b\">#</a> <strong>【+0x090 QuotaUsage       : [3] Uint4B】、【+0x09c QuotaPeak        : [3] Uint4B】</strong></h3>\n<p>物理页相关的统计信息</p>\n<h3 id=\"0x0a8-commitcharge-uint4b-0x0ac-peakvirtualsize-uint4b-0x0b0-virtualsize-uint4b\"><a class=\"anchor\" href=\"#0x0a8-commitcharge-uint4b-0x0ac-peakvirtualsize-uint4b-0x0b0-virtualsize-uint4b\">#</a> <strong>【+0x0a8 CommitCharge     : Uint4B】、【+0x0ac PeakVirtualSize  : Uint4B】、【+0x0b0 VirtualSize      : Uint4B】</strong></h3>\n<p>虚拟内存相关的统计信息</p>\n<h3 id=\"0x11c-vadroot-ptr32-void\"><a class=\"anchor\" href=\"#0x11c-vadroot-ptr32-void\">#</a> <strong>+0x11c VadRoot          : Ptr32 Void</strong></h3>\n<p>标识 0-2G 哪些地址被占用了</p>\n<h3 id=\"0x0bc-debugport-ptr32-void-0x0c0-exceptionport-ptr32-void\"><a class=\"anchor\" href=\"#0x0bc-debugport-ptr32-void-0x0c0-exceptionport-ptr32-void\">#</a> <strong>【+0x0bc DebugPort        : Ptr32 Void】、【+0x0c0 ExceptionPort    : Ptr32 Void】</strong></h3>\n<p>调试相关</p>\n<h3 id=\"0x0c4-objecttable-ptr32-_handle_table\"><a class=\"anchor\" href=\"#0x0c4-objecttable-ptr32-_handle_table\">#</a> <strong>+0x0c4 ObjectTable      : Ptr32 _HANDLE_TABLE</strong></h3>\n<p>句柄表</p>\n<h3 id=\"0x174-imagefilename-16-uchar\"><a class=\"anchor\" href=\"#0x174-imagefilename-16-uchar\">#</a> <strong>+0x174 ImageFileName    : [16] UChar</strong></h3>\n<p>进程镜像文件名 最多 16 个字节</p>\n<h3 id=\"0x1a0-activethreads-uint4b\"><a class=\"anchor\" href=\"#0x1a0-activethreads-uint4b\">#</a> <strong>+0x1a0 ActiveThreads    : Uint4B</strong></h3>\n<p>活动线程的数量</p>\n<h3 id=\"0x1b0-peb-ptr32-_peb\"><a class=\"anchor\" href=\"#0x1b0-peb-ptr32-_peb\">#</a> <strong>+0x1b0 Peb              : Ptr32 _PEB</strong></h3>\n<p>PEB ((Process Environment Block 进程环境块)：进程在 3 环的一个结构体，里面包含了进程的模块列表、是否处于调试状态等信息。</p>\n<p>关于 PEB 或者其他成员更加详细的说明：参考 潘爱民老师《Windows 内核原理与实现》 中的第 3 章</p>\n<h1 id=\"本章总结\"><a class=\"anchor\" href=\"#本章总结\">#</a> 本章总结</h1>\n<p>0 环查看当前进程<br />\n通过 KPCR 找当前线程，然后找其 + 0x220 找当前进程。<br />\n后面通过学习进程的创建，来观察进程结构体是如何填充的。</p>\n<h1 id=\"实验练习\"><a class=\"anchor\" href=\"#实验练习\">#</a> 实验练习</h1>\n<blockquote>\n<ol>\n<li>体会 DebugPort 的作用：用调试器（调试器最好没有插件）调试程序，然后把 进程结构体的 DebugPort 清零，在调试器里接着调试，观察会发生什么。</li>\n</ol>\n</blockquote>\n<p>就不写代码更改了，直接用 windbg 修改了。<br />\n调试时 DebugPort 的值：</p>\n<p><img data-src=\"image002.png\" alt=\"\" /></p>\n<p><img data-src=\"image003.png\" alt=\"\" /></p>\n<p>清空这个值后，在调试器里执行单步：</p>\n<p><img data-src=\"image004.png\" alt=\"\" /></p>\n<p>直接报异常了。</p>\n<blockquote>\n<ol start=\"2\">\n<li>0 环进程断链</li>\n</ol>\n</blockquote>\n<p>代码如下：</p>\n<p>没有写恢复的。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;ntddk.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>VOID <span class=\"token function\">DriverUnload</span><span class=\"token punctuation\">(</span>PDRIVER_OBJECT pDriver<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是驱动，我卸载了\\t\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>NTSTATUS <span class=\"token function\">EProcessBreakChain</span><span class=\"token punctuation\">(</span>PUCHAR ProcessName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tULONG Pro<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token comment\">// 由 KPCR+0x124 的位置得到当前 CPU 正在处理的线程的结构体的指针，_KTHREAD + 0x44 的位置能够得到此线程的进程结构体的地址</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t__asm <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\tmov eax<span class=\"token punctuation\">,</span> fs<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0x124</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\tmov ecx<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>eax <span class=\"token operator\">+</span> <span class=\"token number\">0x44</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\tmov Pro<span class=\"token punctuation\">,</span> ecx<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token comment\">// 进程结构体 EPROCESS +0x88 的位置是一个链接所有进程的双向链表</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\tPLIST_ENTRY pListProcess <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PLIST_ENTRY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>Pro <span class=\"token operator\">+</span> <span class=\"token number\">0x88</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token comment\">// 遍历进程</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>pListProcess<span class=\"token operator\">-></span>Flink <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span>PLIST_ENTRY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>Pro <span class=\"token operator\">+</span> <span class=\"token number\">0x88</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t<span class=\"token comment\">//EPROCESS 结构体</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\tULONG NextProcess <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ULONG<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>pListProcess<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">0x88</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">strcmp</span><span class=\"token punctuation\">(</span>ProcessName<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>PCHAR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>NextProcess <span class=\"token operator\">+</span> <span class=\"token number\">0x174</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"FindProcess:%s PEPROCESS:%X\\t\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>PCHAR<span class=\"token punctuation\">)</span>NextProcess <span class=\"token operator\">+</span> <span class=\"token number\">0x174</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> NextProcess<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t\t<span class=\"token comment\">// 断链</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t\tPLIST_ENTRY CurPro <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PLIST_ENTRY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>NextProcess<span class=\"token operator\">+</span> <span class=\"token number\">0x88</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t\tPLIST_ENTRY BlinkPro <span class=\"token operator\">=</span> CurPro<span class=\"token operator\">-></span>Blink<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t\tPLIST_ENTRY FlinkPro <span class=\"token operator\">=</span> CurPro<span class=\"token operator\">-></span>Flink<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t\tBlinkPro<span class=\"token operator\">-></span>Flink <span class=\"token operator\">=</span> FlinkPro<span class=\"token operator\">-></span>Flink<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\t\tFlinkPro<span class=\"token operator\">-></span>Blink <span class=\"token operator\">=</span> BlinkPro<span class=\"token operator\">-></span>Flink<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> STATUS_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\tpListProcess <span class=\"token operator\">=</span> pListProcess<span class=\"token operator\">-></span>Flink<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token keyword\">return</span> STATUS_UNSUCCESSFUL<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>NTSTATUS <span class=\"token function\">DriverEntry</span><span class=\"token punctuation\">(</span>PDRIVER_OBJECT pDriver<span class=\"token punctuation\">,</span> PUNICODE_STRING pRegPath<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\tNTSTATUS ntStatus <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\tpDriver<span class=\"token operator\">-></span>DriverUnload <span class=\"token operator\">=</span> DriverUnload<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是驱动,我运行了\\t\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t<span class=\"token comment\">//r0 进程断链</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t<span class=\"token comment\">// 遍历进程\t 断链</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\tntStatus <span class=\"token operator\">=</span> <span class=\"token function\">EProcessBreakChain</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Dbgview.exe\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">NT_SUCCESS</span><span class=\"token punctuation\">(</span>ntStatus<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"断链失败！！\\t\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> ntStatus<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"断链成功！！\\t\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t<span class=\"token keyword\">return</span> STATUS_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"image001.png\" alt=\"\" /></p>\n<h1 id=\"reference\"><a class=\"anchor\" href=\"#reference\">#</a> Reference</h1>\n<p>潘爱民前辈的《Windows 内核原理与实现》一书。</p>\n",
            "tags": [
                "EPROCESS",
                "KPROCESS"
            ]
        },
        {
            "id": "https://or0kit.github.io/Bin/Core/WindowsXp/SystemCall/%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8-%E8%AF%BE%E5%90%8E%E7%BB%83%E4%B9%A0/",
            "url": "https://or0kit.github.io/Bin/Core/WindowsXp/SystemCall/%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8-%E8%AF%BE%E5%90%8E%E7%BB%83%E4%B9%A0/",
            "title": "系统调用-课后练习",
            "date_published": "2022-01-01T00:52:24.000Z",
            "content_html": "<h1 id=\"系统调用阶段总结\"><a class=\"anchor\" href=\"#系统调用阶段总结\">#</a> 系统调用阶段总结</h1>\n<p>把本阶段的课后作业练习一下</p>\n<h2 id=\"在ssdt表中追加一个函数地址\"><a class=\"anchor\" href=\"#在ssdt表中追加一个函数地址\">#</a> 在 SSDT 表中追加一个函数地址</h2>\n<p>在 SSDT 表中追加一个函数地址 (NtReadVirtualMemory), 自己编写 API 的 3 环部分调用这个新增的函数 (注意：使用 2-9-9-12 分页)。</p>\n<p><strong>发现函数表后面刚好有四个字节，然后就是参数表了，这四个字节的值为： <code>0000011c </code> 刚好是函数表函数的个数，覆盖后暂时没出问题。</strong></p>\n<h3 id=\"代码如下\"><a class=\"anchor\" href=\"#代码如下\">#</a> 代码如下</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 在 SSDT 表中追加一个函数地址 (NtReadVirtualMemory), 自己编写 API 的 3 环部分调用这个新增的函数 (注意：使用 2-9-9-12 分页)。</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;ntifs.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>VOID <span class=\"token function\">DriverUnload</span><span class=\"token punctuation\">(</span>PDRIVER_OBJECT pDriver<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token comment\">// 恢复懒得写了</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是驱动，我卸载了\\t\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>VOID <span class=\"token function\">PageProtectOn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t__asm <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\tmov  eax<span class=\"token punctuation\">,</span> cr0</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\tor eax<span class=\"token punctuation\">,</span> <span class=\"token number\">10000</span>h</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\tmov  cr0<span class=\"token punctuation\">,</span> eax</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\tsti</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>VOID <span class=\"token function\">PageProtectOff</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t__asm <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\tcli</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\tmov  eax<span class=\"token punctuation\">,</span> cr0</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\tand eax<span class=\"token punctuation\">,</span> not <span class=\"token number\">10000</span>h</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\tmov  cr0<span class=\"token punctuation\">,</span> eax</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>VOID <span class=\"token function\">ModifySSDT</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token keyword\">extern</span> PULONG KeServiceDescriptorTable<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token comment\">// 获取函数表的指针</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\tPULONG pFuncTable <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PULONG<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>KeServiceDescriptorTable<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pFuncTable:%p\\t\\n\"</span><span class=\"token punctuation\">,</span> pFuncTable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t<span class=\"token comment\">// 获取函数个数的指针</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\tPULONG pLimit <span class=\"token operator\">=</span> KeServiceDescriptorTable <span class=\"token operator\">+</span> <span class=\"token number\">0x2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"uLimit:%p\\t\\n\"</span><span class=\"token punctuation\">,</span> pLimit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t<span class=\"token comment\">// 获取参数表的指针</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\tPUCHAR pArgumentTable <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>KeServiceDescriptorTable <span class=\"token operator\">+</span> <span class=\"token number\">0x3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pArgumentTable:%p\\t\\n\"</span><span class=\"token punctuation\">,</span> pArgumentTable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t<span class=\"token comment\">// 开始修改</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t<span class=\"token comment\">// 取函数表的后一项的地址，新加的函数就是这个地址，因为索引是从 0 开始的。</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\tPULONG ModifyAddress1 <span class=\"token operator\">=</span> pFuncTable <span class=\"token operator\">+</span> <span class=\"token operator\">*</span>pLimit<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t<span class=\"token comment\">// 取参数表的后一项的地址，新加的函数就是这个地址，因为索引是从 0 开始的。</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\tPUCHAR ModifyAddress2 <span class=\"token operator\">=</span> pArgumentTable <span class=\"token operator\">+</span> <span class=\"token operator\">*</span>pLimit<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ModifyAddress1:%p\\t\\n\"</span><span class=\"token punctuation\">,</span> ModifyAddress1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ModifyAddress2:%p\\t\\n\"</span><span class=\"token punctuation\">,</span> ModifyAddress2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t<span class=\"token comment\">// 修改为 ReadProcessMemory -> NtReadVirtualMemory -> 0xBA</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t<span class=\"token function\">PageProtectOff</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t<span class=\"token operator\">*</span>ModifyAddress1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>ULONG<span class=\"token punctuation\">)</span>pFuncTable<span class=\"token punctuation\">[</span><span class=\"token number\">0xBA</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t<span class=\"token operator\">*</span>pLimit <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t<span class=\"token operator\">*</span>ModifyAddress2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>UCHAR<span class=\"token punctuation\">)</span>pArgumentTable<span class=\"token punctuation\">[</span><span class=\"token number\">0xBA</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t<span class=\"token function\">PageProtectOn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ModifyAddress1:%p\\t\\n\"</span><span class=\"token punctuation\">,</span> ModifyAddress1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*uLimit:%X\\t\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>pLimit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ModifyAddress2:%p\\t\\n\"</span><span class=\"token punctuation\">,</span> ModifyAddress2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>NTSTATUS <span class=\"token function\">DriverEntry</span><span class=\"token punctuation\">(</span>PDRIVER_OBJECT pDriver<span class=\"token punctuation\">,</span> PUNICODE_STRING pRegPath<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\tpDriver<span class=\"token operator\">-></span>DriverUnload <span class=\"token operator\">=</span> DriverUnload<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"68\"></td><td><pre>\t<span class=\"token comment\">// 修改 SSDT 表，增加一项。修改页保护</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\t<span class=\"token function\">ModifySSDT</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre></pre></td></tr><tr><td data-num=\"71\"></td><td><pre></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\t<span class=\"token keyword\">return</span> STATUS_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>R3Call</strong></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">_CRT_SECURE_NO_WARNINGS</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;Windows.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">__declspec</span><span class=\"token punctuation\">(</span>naked<span class=\"token punctuation\">)</span> <span class=\"token keyword\">void</span> <span class=\"token function\">ModZwWriteVirtualMemory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t__asm <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\tmov     eax<span class=\"token punctuation\">,</span> <span class=\"token number\">0x11C</span><span class=\"token punctuation\">;</span> NtReadVirtualMemory</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\tmov     edx<span class=\"token punctuation\">,</span> <span class=\"token number\">7FF</span>E0300h</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\tcall    dword ptr<span class=\"token punctuation\">[</span>edx<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\tretn    <span class=\"token number\">0x14</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>BOOL WINAPI <span class=\"token function\">WriteProcessMemory_FAST</span><span class=\"token punctuation\">(</span>HANDLE hProcess<span class=\"token punctuation\">,</span> LPCVOID lpBaseAddress<span class=\"token punctuation\">,</span> LPVOID lpBuffer<span class=\"token punctuation\">,</span> DWORD nSize<span class=\"token punctuation\">,</span> LPDWORD lpNumberOfBytesWritten<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tLONG NtStatus<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t__asm</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t<span class=\"token comment\">// 模拟 WriteProcessMemory</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\tlea eax<span class=\"token punctuation\">,</span> lpNumberOfBytesWritten<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\tpush eax<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\tpush lpNumberOfBytesWritten<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\tpush nSize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\tpush lpBuffer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\tpush lpBaseAddress<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\tpush hProcess<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\tcall ModZwWriteVirtualMemory</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\tmov NtStatus<span class=\"token punctuation\">,</span> eax<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lpNumberOfBytesWritten <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t<span class=\"token operator\">*</span>lpNumberOfBytesWritten <span class=\"token operator\">=</span> nSize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token comment\">// 错误检查</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>NtStatus <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> FALSE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t<span class=\"token keyword\">return</span> TRUE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token comment\">// 提权函数：提升为 DEBUG 权限</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>BOOL <span class=\"token function\">EnableDebugPrivilege</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\tHANDLE hToken<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\tBOOL fOk <span class=\"token operator\">=</span> FALSE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">OpenProcessToken</span><span class=\"token punctuation\">(</span><span class=\"token function\">GetCurrentProcess</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> TOKEN_ADJUST_PRIVILEGES<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>hToken<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t\tTOKEN_PRIVILEGES tp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t\ttp<span class=\"token punctuation\">.</span>PrivilegeCount <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t\t<span class=\"token function\">LookupPrivilegeValue</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> SE_DEBUG_NAME<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>tp<span class=\"token punctuation\">.</span>Privileges<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>Luid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t\ttp<span class=\"token punctuation\">.</span>Privileges<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>Attributes <span class=\"token operator\">=</span> SE_PRIVILEGE_ENABLED<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t\t<span class=\"token function\">AdjustTokenPrivileges</span><span class=\"token punctuation\">(</span>hToken<span class=\"token punctuation\">,</span> FALSE<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>tp<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>tp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t\tfOk <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token function\">GetLastError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> ERROR_SUCCESS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t\t<span class=\"token function\">CloseHandle</span><span class=\"token punctuation\">(</span>hToken<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t<span class=\"token keyword\">return</span> fOk<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t<span class=\"token function\">EnableDebugPrivilege</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\tDWORD pid<span class=\"token punctuation\">,</span> addr<span class=\"token punctuation\">,</span> dwRead<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t<span class=\"token keyword\">char</span> buff<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"依次输入PID和要读的线性地址（均为16进制）...\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%x %x\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>pid<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\t<span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"buff:%p\\n\"</span><span class=\"token punctuation\">,</span> buff<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\t<span class=\"token function\">WriteProcessMemory_FAST</span><span class=\"token punctuation\">(</span><span class=\"token function\">OpenProcess</span><span class=\"token punctuation\">(</span>PROCESS_ALL_ACCESS<span class=\"token punctuation\">,</span> FALSE<span class=\"token punctuation\">,</span> pid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>LPCVOID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>addr<span class=\"token operator\">+</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> buff<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>dwRead<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"读取了%d个字节，内容是: \\\"%s\\\"\\n\"</span><span class=\"token punctuation\">,</span> dwRead<span class=\"token punctuation\">,</span> buff<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\t<span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>TestReWriteR3ApI</strong></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;windows.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;Tlhelp32.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 获取进程自身的 PID</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    HANDLE hSnapshot <span class=\"token operator\">=</span> <span class=\"token function\">CreateToolhelp32Snapshot</span><span class=\"token punctuation\">(</span>TH32CS_SNAPPROCESS<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>INVALID_HANDLE_VALUE <span class=\"token operator\">==</span> hSnapshot<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    PROCESSENTRY32 pi<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    pi<span class=\"token punctuation\">.</span>dwSize <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>PROCESSENTRY32<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 第一次使用必须初始化成员</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    BOOL bRet <span class=\"token operator\">=</span> <span class=\"token function\">Process32First</span><span class=\"token punctuation\">(</span>hSnapshot<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>pi<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>bRet<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">strcmp</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"TestReWriteR3API.exe\"</span><span class=\"token punctuation\">,</span> pi<span class=\"token punctuation\">.</span>szExeFile<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"进程ID = %X \\r\\n\"</span><span class=\"token punctuation\">,</span> pi<span class=\"token punctuation\">.</span>th32ProcessID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        bRet <span class=\"token operator\">=</span> <span class=\"token function\">Process32Next</span><span class=\"token punctuation\">(</span>hSnapshot<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>pi<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token function\">CloseHandle</span><span class=\"token punctuation\">(</span>hSnapshot<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">char</span> str<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"hahahaha\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%p--%s\\n\"</span><span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>截图：</p>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<h2 id=\"ssdt-hook-实现进程保护\"><a class=\"anchor\" href=\"#ssdt-hook-实现进程保护\">#</a> SSDT HOOK 实现进程保护</h2>\n<p>将系统服务表中某个函数改成自己的函数，使任务管理器右键无法关闭自己，只有点击自己的关闭按钮才可以正常关闭。</p>\n<p>方法是 SSDT HOOK NtTerminateProcess 函数，进行一系列的判断。就保护记事本 (notepad.exe) 了。</p>\n<p>个人思路是：</p>\n<blockquote>\n<p>先判断要结束的进程是否是记事本 (notepad.exe), 不是则调用老的 TerminateProcess 函数。如果是在判断当前进程是否是记事本 (notepad.exe)。</p>\n</blockquote>\n<p>判断当前进程是否是记事本 (notepad.exe)：<br />\n1、当前进程句柄的值是 0xFFFFFFFF ，只需要判断一下进程句柄是否是 0xFFFFFFFF 就知道是否是当前进程自己点击关闭按钮了。<br />\n2、调用 API，获取记事本的 pid，然后再 hook 的函数中获取当前进程的 pid，进行判断。<br />\n3、查 KPCR -&gt; 获取当前线程结构体 -&gt; 获取当前进程结构体 -&gt; 查当前进程的名字、也可以查当前进程的 pid // 因为我写博客写的有点晚，写这篇博客的时候进程与线程已经学了一些了。</p>\n<h3 id=\"代码如下-2\"><a class=\"anchor\" href=\"#代码如下-2\">#</a> 代码如下</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;ntddk.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">//SST 系统服务表</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_KSYSTEM_SERVICE_TABLE</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tPULONG FuncTable<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tULONG Count<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tULONG ServiceLimit<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tPUCHAR ArgumentTable<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span>KSST<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span> PKSST<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">//SSDT </span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_SSDT</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tKSST ServiceTable<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\tKSST ServiceTableShadow<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\tKSST un1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\tKSST un2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span>SSDT<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span> PSSDT<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">// 函数指针</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token function\">BOOLEAN</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>pTerminateProcess<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>\tHANDLE hProcess<span class=\"token punctuation\">,</span> ULONG uExitCode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">// 获取 SSDT 的导出变量</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">extern</span> PSSDT KeServiceDescriptorTable<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>ULONG OldNtTerminateProcess<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token comment\">// 声明函数</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>VOID <span class=\"token function\">DriverUnload</span><span class=\"token punctuation\">(</span>PDRIVER_OBJECT pDriver<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>NTSTATUS <span class=\"token function\">MyTerminateProcess</span><span class=\"token punctuation\">(</span>HANDLE hProcess<span class=\"token punctuation\">,</span> ULONG uExitCode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>VOID <span class=\"token function\">HookFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>VOID <span class=\"token function\">UnHookFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>VOID <span class=\"token function\">PageProtectOn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>VOID <span class=\"token function\">PageProtectOff</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>VOID <span class=\"token function\">DriverUnload</span><span class=\"token punctuation\">(</span>PDRIVER_OBJECT pDriver<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t<span class=\"token function\">UnHookFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是驱动我卸载了\\t\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>VOID <span class=\"token function\">PageProtectOn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t__asm <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\tmov  eax<span class=\"token punctuation\">,</span> cr0</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t\tor eax<span class=\"token punctuation\">,</span> <span class=\"token number\">10000</span>h</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t\tmov  cr0<span class=\"token punctuation\">,</span> eax</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t\tsti</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>VOID <span class=\"token function\">PageProtectOff</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t__asm <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t\tcli</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t\tmov  eax<span class=\"token punctuation\">,</span> cr0</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t\tand eax<span class=\"token punctuation\">,</span> not <span class=\"token number\">10000</span>h</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t\tmov  cr0<span class=\"token punctuation\">,</span> eax</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>VOID <span class=\"token function\">HookFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The start of the hook!\\t\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t<span class=\"token function\">PageProtectOff</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\tKeServiceDescriptorTable<span class=\"token operator\">-></span>ServiceTable<span class=\"token punctuation\">.</span>FuncTable<span class=\"token punctuation\">[</span><span class=\"token number\">0x101</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>ULONG<span class=\"token punctuation\">)</span>MyTerminateProcess<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\t<span class=\"token function\">PageProtectOn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>VOID <span class=\"token function\">UnHookFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\t<span class=\"token function\">PageProtectOff</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>\tKeServiceDescriptorTable<span class=\"token operator\">-></span>ServiceTable<span class=\"token punctuation\">.</span>FuncTable<span class=\"token punctuation\">[</span><span class=\"token number\">0x101</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> OldNtTerminateProcess<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>\t<span class=\"token function\">PageProtectOn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The end of the hook!\\t\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>NTSTATUS <span class=\"token function\">MyTerminateProcess</span><span class=\"token punctuation\">(</span>HANDLE hProcess<span class=\"token punctuation\">,</span>\tULONG uExitCode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>\tULONG NotepadPid<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>\tPUCHAR pImageFileName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>\tULONG pEprocess<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>\tNTSTATUS status <span class=\"token operator\">=</span> <span class=\"token function\">ObReferenceObjectByHandle</span><span class=\"token punctuation\">(</span>hProcess<span class=\"token punctuation\">,</span> FILE_READ_DATA<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> KernelMode<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>PVOID<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>pEprocess<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">NT_SUCCESS</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> status<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>\t<span class=\"token comment\">// 判断要关闭的是否是记事本 (notepad.exe)，这里进程名的字符字符串最大是 16，所以不用担心越界</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>\tpImageFileName <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PUCHAR<span class=\"token punctuation\">)</span>pEprocess <span class=\"token operator\">+</span> <span class=\"token number\">0x174</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">strcmp</span><span class=\"token punctuation\">(</span>pImageFileName<span class=\"token punctuation\">,</span> <span class=\"token string\">\"notepad.exe\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hProcess <span class=\"token operator\">==</span> <span class=\"token punctuation\">(</span>HANDLE<span class=\"token punctuation\">)</span><span class=\"token number\">0xFFFFFFFF</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>\t\t\t<span class=\"token comment\">// 通过关闭按钮关闭</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>pTerminateProcess<span class=\"token punctuation\">)</span>OldNtTerminateProcess<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>hProcess<span class=\"token punctuation\">,</span> uExitCode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>\t\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>\t\t\t<span class=\"token comment\">// 通过任务管理器关闭</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>\t\t\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Terminate denied. %s: NtTerminateProcess(%x, %x)\\n\"</span><span class=\"token punctuation\">,</span> pImageFileName<span class=\"token punctuation\">,</span> hProcess<span class=\"token punctuation\">,</span> uExitCode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> STATUS_ACCESS_DENIED<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"106\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>pTerminateProcess<span class=\"token punctuation\">)</span>OldNtTerminateProcess<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>hProcess<span class=\"token punctuation\">,</span> uExitCode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>NTSTATUS <span class=\"token function\">DriverEntry</span><span class=\"token punctuation\">(</span>PDRIVER_OBJECT pDriver<span class=\"token punctuation\">,</span> PUNICODE_STRING pRegPath<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>\tpDriver<span class=\"token operator\">-></span>DriverUnload <span class=\"token operator\">=</span> DriverUnload<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>\t<span class=\"token comment\">// 定义老的 NtTerminateProcess</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>\tOldNtTerminateProcess <span class=\"token operator\">=</span> KeServiceDescriptorTable<span class=\"token operator\">-></span>ServiceTable<span class=\"token punctuation\">.</span>FuncTable<span class=\"token punctuation\">[</span><span class=\"token number\">0x101</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"OldNtTerminateProcess:%X\\t\\n\"</span><span class=\"token punctuation\">,</span> OldNtTerminateProcess<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>\t<span class=\"token comment\">//SSDT HOOK TerminateProcess</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>\t<span class=\"token function\">HookFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>\t<span class=\"token keyword\">return</span> STATUS_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>截图：</p>\n<p><img data-src=\"image002.png\" alt=\"\" /></p>\n<p><strong>发现在这里点击结束任务</strong>，还是可以结束。</p>\n<p><img data-src=\"image003.png\" alt=\"\" /></p>\n<p>不论是点击结束进程或是进程树，都无法结束</p>\n<p><img data-src=\"image004.png\" alt=\"\" /></p>\n<p>驱动卸载后，hook 也就卸载了。</p>\n<h2 id=\"ssdt-hook-实现-findwindowa-监视器\"><a class=\"anchor\" href=\"#ssdt-hook-实现-findwindowa-监视器\">#</a> SSDT HOOK 实现 FindWindowA 监视器</h2>\n<p>FinWindowsA 是 Shadow 表中的函数。</p>\n<p>3 环调用流程分析</p>\n<p>FinWindowsA -&gt; 调用一系列的 ASCII 转 Unicode 函数，最终调用 -&gt; NtUserFindWindowEx</p>\n<p>传入服务号为 0x117A 。<strong>注意真正的编号还要与 0xFFF 进行与操作</strong>。</p>\n<p>win32k.sys 系统服务表可能会缺页，要在驱动里访问它，做法是创建一个已经调用过 GDI 函数的进程（不一定是窗口程序），然后通过 DeviceIoControl 函数和驱动通信，这样执行驱动代码时所属进程已经给 win32k.sys 系统服务表挂上物理页了，访问就不会蓝屏。这里参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0t3YW5zeS9hcnRpY2xlL2RldGFpbHMvMTA5NTEwNjA2\">https://blog.csdn.net/Kwansy/article/details/109510606</span> 博主的文章，具体要自己逆向创建 GDI 线程的部分，才能清晰。</p>\n<p>并且还可以发现一个细节：<strong>当 3 环程序向驱动发起通信时，驱动所属进程就是 3 环的程序</strong></p>\n<h3 id=\"代码如下-3\"><a class=\"anchor\" href=\"#代码如下-3\">#</a> 代码如下</h3>\n<pre><code class=\"language-c\">\n</code></pre>\n<h1 id=\"reference\"><a class=\"anchor\" href=\"#reference\">#</a> Reference</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0t3YW5zeS9hcnRpY2xlL2RldGFpbHMvMTA5NTEwNjA2\">https://blog.csdn.net/Kwansy/article/details/109510606</span><br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0t3YW5zeS9hcnRpY2xlL2RldGFpbHMvMTA5NDkwNjU3\">https://blog.csdn.net/Kwansy/article/details/109490657</span></p>\n",
            "tags": [
                "系统调用阶段总结"
            ]
        },
        {
            "id": "https://or0kit.github.io/Bin/Core/WindowsXp/SystemCall/%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8-SSDT%E9%9A%90%E8%97%8F-%E6%80%9D%E8%B7%AF-%E5%AE%9E%E6%88%98/",
            "url": "https://or0kit.github.io/Bin/Core/WindowsXp/SystemCall/%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8-SSDT%E9%9A%90%E8%97%8F-%E6%80%9D%E8%B7%AF-%E5%AE%9E%E6%88%98/",
            "title": "系统调用-SSDT HOOK隐藏-思路-实战",
            "date_published": "2022-01-01T00:52:22.000Z",
            "content_html": "<h1 id=\"ssdt-hook隐藏思路\"><a class=\"anchor\" href=\"#ssdt-hook隐藏思路\">#</a> SSDT HOOK 隐藏思路</h1>\n<p>通过逆向分析 API 由 3 环进 0 环的过程，找到其中涉及系统服务表（SST）的位置，可以分析出一些能动手脚的地方。</p>\n<ol>\n<li>\n<p>增加函数项，修改原有代码服务号。</p>\n</li>\n<li>\n<p>修改线程结构体_KTHREAD + E0 （这里存放着 SSDT 的地址），改成我们的自己构造的 SSDT。<br />\n针对的检测是：检测老的 SSDT 有没有被挂钩，但我们不动操作系统的 SSDT 这样就可以绕过了。</p>\n</li>\n</ol>\n<blockquote>\n<p>首先找到进程再找其内的线程结构体，然后修改为我们构造的 SSDT 的地址，既要先拷贝一份 SSDT，并且因为线程可能会被切换，我们要设置一个定时器不停的遍历修改。<br />\n或者修改把线程 E0 赋给 edi 的值，既 INLINE HOOK 修改这里。</p>\n</blockquote>\n<ol start=\"3\">\n<li>系统调用过程中有两个环节是 找到要调用的函数 以及 去调用这个函数，我们可以改找到的函数，改调用的函数。</li>\n</ol>\n<p>另外火哥还说了 改所有线程的 E0，在切换线程的地方 HOOK 等等……。</p>\n<p>在 SSDT 这里能做的前辈们差不多都已经做过了…… 我们主要学习的是思想。・</p>\n<h1 id=\"代码实现\"><a class=\"anchor\" href=\"#代码实现\">#</a> 代码实现</h1>\n<p><strong>Hook.h</strong></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\">once</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ssdt.h\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 被 HOOK 函数的函数指针</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">//HOOK NtOpenProcess 函数</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token function\">NTSTATUS</span><span class=\"token punctuation\">(</span>NTAPI <span class=\"token operator\">*</span>PNTOPENPROCESS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     PHANDLE ProcessHandle<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>     ACCESS_MASK DesiredAccess<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>     POBJECT_ATTRIBUTES ObjectAttributes<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>     PCLIENT_ID ClientId</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">// 函数声明</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>VOID <span class=\"token function\">HookNtOpenProcess</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>VOID <span class=\"token function\">UnHookNtOpenProcess</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>VOID <span class=\"token function\">PageProtectOn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>VOID <span class=\"token function\">PageProtectOff</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>NTSTATUS NTAPI <span class=\"token function\">ModifyNtOpenProcess</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>     PHANDLE ProcessHandle<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>     ACCESS_MASK DesiredAccess<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>     POBJECT_ATTRIBUTES ObjectAttributes<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>     PCLIENT_ID ClientId</pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token comment\">// 原来的函数地址</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>ULONG uOldNtOpenProcess<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong>Hook.c</strong></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"Hook.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>VOID <span class=\"token function\">PageProtectOff</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t__asm</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\tcli<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 关闭中断</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\tmov eax<span class=\"token punctuation\">,</span> cr0<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\tor eax<span class=\"token punctuation\">,</span> <span class=\"token number\">0x10000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// WP 位置 1</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\tmov cr0<span class=\"token punctuation\">,</span> eax<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>VOID <span class=\"token function\">PageProtectOn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t__asm</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\tsti<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 恢复中断</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\tmov eax<span class=\"token punctuation\">,</span> cr0<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\tand eax<span class=\"token punctuation\">,</span> not <span class=\"token number\">0x10000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// WP 位置 0</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\tmov cr0<span class=\"token punctuation\">,</span> eax<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>VOID <span class=\"token function\">HookNtOpenProcess</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The start of the hook!\\t\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token function\">PageProtectOff</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\tMySSDT<span class=\"token operator\">-></span>ServiceTable<span class=\"token punctuation\">.</span>FuncTable<span class=\"token punctuation\">[</span><span class=\"token number\">0x7A</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>ULONG<span class=\"token punctuation\">)</span>ModifyNtOpenProcess<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token function\">PageProtectOn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>VOID <span class=\"token function\">UnHookNtOpenProcess</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token function\">PageProtectOff</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\tMySSDT<span class=\"token operator\">-></span>ServiceTable<span class=\"token punctuation\">.</span>FuncTable<span class=\"token punctuation\">[</span><span class=\"token number\">0x7A</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> uOldNtOpenProcess<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token function\">PageProtectOn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The end of the hook!\\t\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>NTSTATUS NTAPI <span class=\"token function\">ModifyNtOpenProcess</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\tPHANDLE ProcessHandle<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\tACCESS_MASK DesiredAccess<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\tPOBJECT_ATTRIBUTES ObjectAttributes<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\tPCLIENT_ID ClientId</pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"打印NtOpenProcess的参数：%X %X %X %X\\t\\n\"</span><span class=\"token punctuation\">,</span> ProcessHandle<span class=\"token punctuation\">,</span> DesiredAccess<span class=\"token punctuation\">,</span> ObjectAttributes<span class=\"token punctuation\">,</span> ClientId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>PNTOPENPROCESS<span class=\"token punctuation\">)</span>uOldNtOpenProcess<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>ProcessHandle<span class=\"token punctuation\">,</span> DesiredAccess<span class=\"token punctuation\">,</span> ObjectAttributes<span class=\"token punctuation\">,</span> ClientId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>ssdt.h</strong></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\">once</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;ntddk.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">//SST 系统服务表</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_KSYSTEM_SERVICE_TABLE</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tPULONG FuncTable<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tPULONG Count<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tULONG ServiceLimit<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tPUCHAR ArgumentTable<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span>KSST<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span> PKSST<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">//SSDT </span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_SSDT</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tKSST ServiceTable<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\tKSST ServiceTableShadow<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\tKSST un1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\tKSST un2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span>SSDT<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span> PSSDT<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\">// 构造 SSDT</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>PSSDT MySSDT<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>BOOLEAN ThreadFlag<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>HANDLE hThread<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\">// 获取 SSDT 的导出变量</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token keyword\">extern</span> PSSDT KeServiceDescriptorTable<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token comment\">// 声明函数</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>VOID <span class=\"token function\">DriverUnload</span><span class=\"token punctuation\">(</span>PDRIVER_OBJECT pDriver<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>NTSTATUS <span class=\"token function\">DriverEntry</span><span class=\"token punctuation\">(</span>PDRIVER_OBJECT pDriver<span class=\"token punctuation\">,</span> PUNICODE_STRING pRegPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>NTSTATUS <span class=\"token function\">GetCopySSDT</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>ULONG <span class=\"token function\">FindProcess</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> ProcessName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>VOID <span class=\"token function\">TraversalThreadReplaceE0</span><span class=\"token punctuation\">(</span>ULONG eProcess<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>VOID <span class=\"token function\">ResetThreadReplaceE0</span><span class=\"token punctuation\">(</span>ULONG eProc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>VOID <span class=\"token function\">WorkThreadFunc</span><span class=\"token punctuation\">(</span>_In_ PVOID StartContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong>main.c</strong></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">\"Hook.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>VOID <span class=\"token function\">DriverUnload</span><span class=\"token punctuation\">(</span>PDRIVER_OBJECT pDriver<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tThreadFlag <span class=\"token operator\">=</span> FALSE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token comment\">// 确保线程停止</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tLARGE_INTEGER timer <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\ttimer<span class=\"token punctuation\">.</span>QuadPart <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">30</span> <span class=\"token operator\">*</span> <span class=\"token number\">1000</span> <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token function\">KeDelayExecutionThread</span><span class=\"token punctuation\">(</span>KernelMode<span class=\"token punctuation\">,</span> TRUE<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>timer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>MySSDT <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t<span class=\"token function\">ExFreePoolWithTag</span><span class=\"token punctuation\">(</span>MySSDT<span class=\"token operator\">-></span>ServiceTable<span class=\"token punctuation\">.</span>FuncTable<span class=\"token punctuation\">,</span> <span class=\"token string\">'MySF'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\tMySSDT<span class=\"token operator\">-></span>ServiceTable<span class=\"token punctuation\">.</span>FuncTable <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t<span class=\"token function\">ExFreePoolWithTag</span><span class=\"token punctuation\">(</span>MySSDT<span class=\"token punctuation\">,</span> <span class=\"token string\">'MySD'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\tMySSDT <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是驱动，我卸载了\\t\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>NTSTATUS <span class=\"token function\">GetCopySSDT</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token comment\">//DbgPrint(\"KeServiceDescriptorTable:%p\\t\\n\", KeServiceDescriptorTable);</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\tPSSDT SSDTShadow <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PSSDT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>PULONG<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>KeServiceDescriptorTable<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">0x40</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token comment\">//DbgPrint(\"SSDTShadow:%p\\t\\n\", SSDTShadow);</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token comment\">//__asm int 3;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token comment\">// </span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token comment\">// 构造一份 SSDT</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token comment\">// 申请一份 SSDT 大小的内存</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\tMySSDT <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PSSDT<span class=\"token punctuation\">)</span><span class=\"token function\">ExAllocatePoolWithTag</span><span class=\"token punctuation\">(</span>NonPagedPool<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>SSDT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'MySD'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>MySSDT <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MySD ExAllocatePoolWithTag Failed!\\t\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> STATUS_UNSUCCESSFUL<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t<span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>MySSDT<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>SSDT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MySSDT:%p\\t\\n\"</span><span class=\"token punctuation\">,</span> MySSDT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t<span class=\"token comment\">// 申请函数表的内存</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\tMySSDT<span class=\"token operator\">-></span>ServiceTable<span class=\"token punctuation\">.</span>FuncTable <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PULONG<span class=\"token punctuation\">)</span><span class=\"token function\">ExAllocatePoolWithTag</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\tNonPagedPool<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t\tKeServiceDescriptorTable<span class=\"token operator\">-></span>ServiceTable<span class=\"token punctuation\">.</span>ServiceLimit <span class=\"token operator\">*</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t\t<span class=\"token string\">'MySF'</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>MySSDT<span class=\"token operator\">-></span>ServiceTable<span class=\"token punctuation\">.</span>FuncTable <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t\t<span class=\"token function\">ExFreePoolWithTag</span><span class=\"token punctuation\">(</span>MySSDT<span class=\"token punctuation\">,</span> <span class=\"token string\">'MySD'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t\tMySSDT <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MySF ExAllocatePoolWithTag Failed!\\t\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> STATUS_UNSUCCESSFUL<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t<span class=\"token function\">memset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>PVOID<span class=\"token punctuation\">)</span>MySSDT<span class=\"token operator\">-></span>ServiceTable<span class=\"token punctuation\">.</span>FuncTable<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> KeServiceDescriptorTable<span class=\"token operator\">-></span>ServiceTable<span class=\"token punctuation\">.</span>ServiceLimit <span class=\"token operator\">*</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t<span class=\"token comment\">// 拷贝 SSDT</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t<span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>PVOID<span class=\"token punctuation\">)</span>MySSDT<span class=\"token operator\">-></span>ServiceTable<span class=\"token punctuation\">.</span>FuncTable<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>PVOID<span class=\"token punctuation\">)</span>KeServiceDescriptorTable<span class=\"token operator\">-></span>ServiceTable<span class=\"token punctuation\">.</span>FuncTable<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t\tKeServiceDescriptorTable<span class=\"token operator\">-></span>ServiceTable<span class=\"token punctuation\">.</span>ServiceLimit <span class=\"token operator\">*</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\tMySSDT<span class=\"token operator\">-></span>ServiceTable<span class=\"token punctuation\">.</span>ServiceLimit <span class=\"token operator\">=</span> KeServiceDescriptorTable<span class=\"token operator\">-></span>ServiceTable<span class=\"token punctuation\">.</span>ServiceLimit<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\tMySSDT<span class=\"token operator\">-></span>ServiceTable<span class=\"token punctuation\">.</span>ArgumentTable <span class=\"token operator\">=</span> KeServiceDescriptorTable<span class=\"token operator\">-></span>ServiceTable<span class=\"token punctuation\">.</span>ArgumentTable<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t<span class=\"token comment\">// 拷贝 Shadow 表</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t<span class=\"token comment\">// 判断 GUI 函数表是否已经加载，如果不是 GUI 线程，则操作系统不会挂载 GUI 函数表</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>\t<span class=\"token comment\">// 思路判断 Shadwo 函数表的物理页属性</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\t<span class=\"token comment\">//if (影子表中的函数表被挂载了)</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\t<span class=\"token comment\">//&#123;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\t<span class=\"token comment\">//\t// 申请影子表中函数表的内存</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>\t<span class=\"token comment\">//\tMySSDT->ServiceTableShadow.FuncTable = (PULONG)ExAllocatePoolWithTag(</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>\t<span class=\"token comment\">//\t\tNonPagedPool,</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\t<span class=\"token comment\">//\t\tSSDTShadow->ServiceTableShadow.ServiceLimit * 4,</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>\t<span class=\"token comment\">//\t\t'MySH'</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>\t<span class=\"token comment\">//\t);</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>\t<span class=\"token comment\">//\tif (MySSDT->ServiceTableShadow.FuncTable == NULL)</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>\t<span class=\"token comment\">//\t&#123;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>\t<span class=\"token comment\">//\t\tExFreePoolWithTag(MySSDT->ServiceTable.FuncTable, 'MySF');</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>\t<span class=\"token comment\">//\t\tExFreePoolWithTag(MySSDT, 'MySD');</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>\t<span class=\"token comment\">//\t\tDbgPrint(\"MySH ExAllocatePoolWithTag Failed!\\t\\n\");</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>\t<span class=\"token comment\">//\t\treturn STATUS_UNSUCCESSFUL;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>\t<span class=\"token comment\">//\t&#125;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>\t<span class=\"token comment\">//\tmemset((PVOID)MySSDT->ServiceTableShadow.FuncTable, 0, SSDTShadow->ServiceTableShadow.ServiceLimit * 4);</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>\t<span class=\"token comment\">//\tmemcpy((PVOID)MySSDT->ServiceTableShadow.FuncTable, (PVOID)SSDTShadow->ServiceTableShadow.FuncTable,</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>\t<span class=\"token comment\">//\t\tSSDTShadow->ServiceTableShadow.ServiceLimit * 4);</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>\tMySSDT<span class=\"token operator\">-></span>ServiceTableShadow<span class=\"token punctuation\">.</span>FuncTable <span class=\"token operator\">=</span> SSDTShadow<span class=\"token operator\">-></span>ServiceTableShadow<span class=\"token punctuation\">.</span>FuncTable<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>\tMySSDT<span class=\"token operator\">-></span>ServiceTableShadow<span class=\"token punctuation\">.</span>ServiceLimit <span class=\"token operator\">=</span> SSDTShadow<span class=\"token operator\">-></span>ServiceTableShadow<span class=\"token punctuation\">.</span>ServiceLimit<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>\tMySSDT<span class=\"token operator\">-></span>ServiceTableShadow<span class=\"token punctuation\">.</span>ArgumentTable <span class=\"token operator\">=</span> SSDTShadow<span class=\"token operator\">-></span>ServiceTableShadow<span class=\"token punctuation\">.</span>ArgumentTable<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre></pre></td></tr><tr><td data-num=\"94\"></td><td><pre><span class=\"token keyword\">return</span> STATUS_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre></pre></td></tr><tr><td data-num=\"97\"></td><td><pre></pre></td></tr><tr><td data-num=\"98\"></td><td><pre><span class=\"token comment\">// 遍历进程 找到进程</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>ULONG <span class=\"token function\">FindProcess</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> ProcessName<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>\tULONG Pro<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>\t<span class=\"token comment\">// 由 KPCR+0x124 的位置得到当前 CPU 正在处理的线程的结构体的指针，_KTHREAD + 0x44 的位置能够得到此线程的进程结构体的地址</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>\t__asm <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>\t\tmov eax<span class=\"token punctuation\">,</span> fs<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0x124</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>\t\tmov ecx<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>eax <span class=\"token operator\">+</span> <span class=\"token number\">0x44</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>\t\tmov Pro<span class=\"token punctuation\">,</span> ecx<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>\t<span class=\"token comment\">// 进程结构体 EPROCESS +0x88 的位置是一个链接所有进程的双向链表</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>\tPLIST_ENTRY pListProcess <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PLIST_ENTRY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>Pro <span class=\"token operator\">+</span> <span class=\"token number\">0x88</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>\tBOOLEAN Flag <span class=\"token operator\">=</span> FALSE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>\t<span class=\"token comment\">// 遍历进程</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>pListProcess<span class=\"token operator\">-></span>Flink <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span>PLIST_ENTRY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>Pro <span class=\"token operator\">+</span> <span class=\"token number\">0x88</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>\t\t<span class=\"token comment\">//EPROCESS 结构体</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>\t\tULONG NextProcess <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ULONG<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>pListProcess<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">0x88</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"119\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">strcmp</span><span class=\"token punctuation\">(</span>ProcessName<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>PCHAR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>NextProcess <span class=\"token operator\">+</span> <span class=\"token number\">0x174</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>\t\t\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"FindProcess:%s PEPROCESS:%X\\t\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>PCHAR<span class=\"token punctuation\">)</span>NextProcess <span class=\"token operator\">+</span> <span class=\"token number\">0x174</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> NextProcess<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> NextProcess<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>\t\tpListProcess <span class=\"token operator\">=</span> pListProcess<span class=\"token operator\">-></span>Flink<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>VOID <span class=\"token function\">TraversalThreadReplaceE0</span><span class=\"token punctuation\">(</span>ULONG eProc<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>eProc <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>\t\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"eProcess is NULL\\t\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>\t<span class=\"token comment\">// 由进程结构体遍历线程</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>\t<span class=\"token comment\">// 获取线程的双向链表</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>\t<span class=\"token comment\">//+0x190 ThreadListHead   : _LIST_ENTRY [ 0x89ff024c - 0x89dbd56c ]</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>\tPLIST_ENTRY ThreadList <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PLIST_ENTRY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>eProc <span class=\"token operator\">+</span> <span class=\"token number\">0x190</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>\t<span class=\"token comment\">// 找了半天错误 原来是这里没有获取 焯！  PLIST_ENTRY CurrentThreadList = ThreadList</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>\tPLIST_ENTRY CurrentThreadList <span class=\"token operator\">=</span> ThreadList<span class=\"token operator\">-></span>Flink<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>\t<span class=\"token comment\">// 遍历线程</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>\t<span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre>\t\t<span class=\"token comment\">// 获取当前线程结构体的首部</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>\t\tULONG CurrentThread <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>ULONG<span class=\"token punctuation\">)</span>CurrentThreadList <span class=\"token operator\">-</span> <span class=\"token number\">0x22c</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>\t\t<span class=\"token comment\">// 取出线程中存储的 SSDT 的值</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre>\t\tPULONG ServiceTable <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PULONG<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>CurrentThread <span class=\"token operator\">+</span> <span class=\"token number\">0xE0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre>\t\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ServiceTable:%X\\t\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>ServiceTable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"151\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ServiceTable <span class=\"token operator\">==</span> <span class=\"token punctuation\">(</span>PULONG<span class=\"token punctuation\">)</span>MySSDT<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"153\"></td><td><pre>\t\t\t<span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"154\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"155\"></td><td><pre>\t\t<span class=\"token operator\">*</span>ServiceTable <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>ULONG<span class=\"token punctuation\">)</span>MySSDT<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"156\"></td><td><pre>\t\tCurrentThreadList <span class=\"token operator\">=</span> CurrentThreadList<span class=\"token operator\">-></span>Flink<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"157\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>CurrentThreadList<span class=\"token operator\">-></span>Flink <span class=\"token operator\">!=</span> ThreadList<span class=\"token operator\">-></span>Flink<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"158\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"159\"></td><td><pre></pre></td></tr><tr><td data-num=\"160\"></td><td><pre>VOID <span class=\"token function\">ResetThreadReplaceE0</span><span class=\"token punctuation\">(</span>ULONG eProc<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"161\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>eProc <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"162\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"163\"></td><td><pre>\t\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"eProcess is NULL\\t\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"164\"></td><td><pre>\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"165\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"166\"></td><td><pre>\tPLIST_ENTRY ThreadList <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PLIST_ENTRY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>eProc <span class=\"token operator\">+</span> <span class=\"token number\">0x190</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"167\"></td><td><pre>\tPLIST_ENTRY CurrentThreadList <span class=\"token operator\">=</span> ThreadList<span class=\"token operator\">-></span>Flink<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"168\"></td><td><pre>\t<span class=\"token comment\">// 遍历线程</span></pre></td></tr><tr><td data-num=\"169\"></td><td><pre>\t<span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"170\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"171\"></td><td><pre>\t\t<span class=\"token comment\">// 获取当前线程结构体的首部</span></pre></td></tr><tr><td data-num=\"172\"></td><td><pre>\t\tULONG CurrentThread <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>ULONG<span class=\"token punctuation\">)</span>CurrentThreadList <span class=\"token operator\">-</span> <span class=\"token number\">0x22c</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"173\"></td><td><pre>\t\t<span class=\"token comment\">// 取出线程中存储的 SSDT 的值</span></pre></td></tr><tr><td data-num=\"174\"></td><td><pre>\t\tPULONG ServiceTable <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PULONG<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>CurrentThread <span class=\"token operator\">+</span> <span class=\"token number\">0xE0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"175\"></td><td><pre>\t\tULONG ShadowTable <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>PULONG<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>KeServiceDescriptorTable<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">0x40</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"176\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ServiceTable <span class=\"token operator\">==</span> <span class=\"token punctuation\">(</span>PULONG<span class=\"token punctuation\">)</span>ShadowTable<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"177\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"178\"></td><td><pre>\t\t\t<span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"179\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"180\"></td><td><pre>\t\t<span class=\"token operator\">*</span>ServiceTable <span class=\"token operator\">=</span> ShadowTable<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"181\"></td><td><pre>\t\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ServiceTable:%X\\t\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>ServiceTable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"182\"></td><td><pre>\t\tCurrentThreadList <span class=\"token operator\">=</span> CurrentThreadList<span class=\"token operator\">-></span>Flink<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"183\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>CurrentThreadList<span class=\"token operator\">-></span>Flink <span class=\"token operator\">!=</span> ThreadList<span class=\"token operator\">-></span>Flink<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"184\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"185\"></td><td><pre></pre></td></tr><tr><td data-num=\"186\"></td><td><pre>VOID <span class=\"token function\">WorkThreadFunc</span><span class=\"token punctuation\">(</span>PVOID StartContext<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"187\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"188\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"189\"></td><td><pre>\tThreadFlag <span class=\"token operator\">=</span> TRUE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"190\"></td><td><pre>\tULONG pProcess<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"191\"></td><td><pre>\tLARGE_INTEGER timer <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"192\"></td><td><pre>\ttimer<span class=\"token punctuation\">.</span>QuadPart <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">10</span> <span class=\"token operator\">*</span> <span class=\"token number\">1000</span> <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"193\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"WorkThreadFunc 开始运行!\\t\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"194\"></td><td><pre></pre></td></tr><tr><td data-num=\"195\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>ThreadFlag<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"196\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"197\"></td><td><pre>\t\t<span class=\"token function\">KeDelayExecutionThread</span><span class=\"token punctuation\">(</span>KernelMode<span class=\"token punctuation\">,</span> FALSE<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>timer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"198\"></td><td><pre>\t\tpProcess <span class=\"token operator\">=</span> <span class=\"token function\">FindProcess</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Dbgview.exe\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 一直查找此进程，因为此进程可能会被关闭</span></pre></td></tr><tr><td data-num=\"199\"></td><td><pre>\t\t<span class=\"token function\">TraversalThreadReplaceE0</span><span class=\"token punctuation\">(</span>pProcess<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"200\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"201\"></td><td><pre></pre></td></tr><tr><td data-num=\"202\"></td><td><pre>\t<span class=\"token function\">ResetThreadReplaceE0</span><span class=\"token punctuation\">(</span>pProcess<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"203\"></td><td><pre>\t<span class=\"token function\">UnHookNtOpenProcess</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"204\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"WorkThreadFunc 结束运行!\\t\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"205\"></td><td><pre>\t<span class=\"token function\">ZwClose</span><span class=\"token punctuation\">(</span>hThread<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"206\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"207\"></td><td><pre></pre></td></tr><tr><td data-num=\"208\"></td><td><pre></pre></td></tr><tr><td data-num=\"209\"></td><td><pre>NTSTATUS <span class=\"token function\">DriverEntry</span><span class=\"token punctuation\">(</span>PDRIVER_OBJECT pDriver<span class=\"token punctuation\">,</span> PUNICODE_STRING pRegPath<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"210\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"211\"></td><td><pre>\tpDriver<span class=\"token operator\">-></span>DriverUnload <span class=\"token operator\">=</span> DriverUnload<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"212\"></td><td><pre></pre></td></tr><tr><td data-num=\"213\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是驱动，我运行了!\\t\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"214\"></td><td><pre>\t<span class=\"token comment\">// 拷贝一份 SSDT 表</span></pre></td></tr><tr><td data-num=\"215\"></td><td><pre></pre></td></tr><tr><td data-num=\"216\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">NT_SUCCESS</span><span class=\"token punctuation\">(</span><span class=\"token function\">GetCopySSDT</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"217\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"218\"></td><td><pre>\t\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GetCopySSDT Failed!\\t\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"219\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> STATUS_UNSUCCESSFUL<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"220\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"221\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"222\"></td><td><pre>\t<span class=\"token comment\">// 打印一下 MySSDT</span></pre></td></tr><tr><td data-num=\"223\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MySSDT:%p\\t\\n\"</span><span class=\"token punctuation\">,</span> MySSDT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"224\"></td><td><pre>\t<span class=\"token comment\">// 定义老的 NtOpenProcess 地址</span></pre></td></tr><tr><td data-num=\"225\"></td><td><pre>\tuOldNtOpenProcess <span class=\"token operator\">=</span> MySSDT<span class=\"token operator\">-></span>ServiceTable<span class=\"token punctuation\">.</span>FuncTable<span class=\"token punctuation\">[</span><span class=\"token number\">0x7A</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"226\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"uOldNtOpenProcess:%p\\t\\n\"</span><span class=\"token punctuation\">,</span> uOldNtOpenProcess<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"227\"></td><td><pre>\t<span class=\"token comment\">// 开始 Hook</span></pre></td></tr><tr><td data-num=\"228\"></td><td><pre>\t<span class=\"token function\">HookNtOpenProcess</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"229\"></td><td><pre>\t<span class=\"token comment\">// 遍历进程 找到进程</span></pre></td></tr><tr><td data-num=\"230\"></td><td><pre>\t<span class=\"token comment\">// 遍历线程 替换 E0 位置</span></pre></td></tr><tr><td data-num=\"231\"></td><td><pre>\t<span class=\"token comment\">// 设置定时器，每隔 10 毫秒修改一次</span></pre></td></tr><tr><td data-num=\"232\"></td><td><pre>\t<span class=\"token comment\">// 结束时恢复 E0，结束 HOOK，关闭句柄</span></pre></td></tr><tr><td data-num=\"233\"></td><td><pre>\t<span class=\"token keyword\">extern</span> HANDLE hThread<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"234\"></td><td><pre>\t<span class=\"token function\">PsCreateSystemThread</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>hThread<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> WorkThreadFunc<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"235\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"236\"></td><td><pre>\t<span class=\"token keyword\">return</span> STATUS_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"237\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"运行截图\"><a class=\"anchor\" href=\"#运行截图\">#</a> 运行截图</h2>\n<p><img data-src=\"image001.png\" alt=\"\" /><br />\n<img data-src=\"image002.png\" alt=\"\" /></p>\n<h1 id=\"反思\"><a class=\"anchor\" href=\"#反思\">#</a> 反思</h1>\n<p>学过知识没有记住，要多做练习。</p>\n",
            "tags": [
                "SSDT HOOK隐藏"
            ]
        },
        {
            "id": "https://or0kit.github.io/Bin/Core/WindowsXp/SystemCall/%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8-SSDT%E5%B8%B8%E8%A7%84HOOK/",
            "url": "https://or0kit.github.io/Bin/Core/WindowsXp/SystemCall/%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8-SSDT%E5%B8%B8%E8%A7%84HOOK/",
            "title": "系统调用-SSDT常规HOOK",
            "date_published": "2021-12-27T09:25:16.000Z",
            "content_html": "<h1 id=\"ssdt-routinehook\"><a class=\"anchor\" href=\"#ssdt-routinehook\">#</a> SSDT-RoutineHook</h1>\n<p>常规 hook 思路：</p>\n<ol>\n<li>如何获取 SSDT 的地址？</li>\n</ol>\n<blockquote>\n<p>通过内核文件的导出变量获取</p>\n</blockquote>\n<ol start=\"2\">\n<li>如何获取函数表的地址？</li>\n</ol>\n<blockquote>\n<p>定义 SST（系统服务表）结构体</p>\n</blockquote>\n<ol start=\"3\">\n<li>如何修改函数所在物理页的页属性？</li>\n</ol>\n<p>SSDT 所在的物理页是只读的，如果要修改，先要修改页属性为可写：</p>\n<ul>\n<li>第一种办法，用我们学过的知识，通过页表基址直接修改：<strong>这种方法无论是单核还是多核都适用</strong>。</li>\n</ul>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>RCR4 <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x00000020</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 说明是 2-9-9-12 分页</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token function\">KdPrint</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2-9-9-12分页 %p\\n\"</span><span class=\"token punctuation\">,</span>RCR4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token function\">KdPrint</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"PTE1 %p\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>DWORD<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xC0000000</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>HookFunAddr <span class=\"token operator\">>></span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x007FFFF8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>DWORD64<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xC0000000</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>HookFunAddr <span class=\"token operator\">>></span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x007FFFF8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|=</span> <span class=\"token number\">0x02</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token function\">KdPrint</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"PTE1 %p\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>DWORD<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xC0000000</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>HookFunAddr <span class=\"token operator\">>></span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x007FFFF8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 说明是 10-10-12 分页</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token function\">KdPrint</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"10-10-12分页\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token function\">KdPrint</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"PTE1 %p\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>DWORD<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xC0000000</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>HookFunAddr <span class=\"token operator\">>></span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x003FFFFC</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>DWORD<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xC0000000</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>HookFunAddr <span class=\"token operator\">>></span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x003FFFFC</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|=</span> <span class=\"token number\">0x02</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token function\">KdPrint</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"PTE2 %p\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>DWORD<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xC0000000</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>HookFunAddr <span class=\"token operator\">>></span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x003FFFFC</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>通过修改 CR0 寄存器</li>\n</ul>\n<p>CR0 寄存器的第 16 位叫做保护属性位，控制着页的读或写属性。这种方法在单核下是稳定的，但多核就不一定了，因为切换 CPU 后寄存器也变成其他核的寄存器了。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>VOID <span class=\"token function\">PageProtectOn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t__asm<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t\tmov  eax<span class=\"token punctuation\">,</span>cr0</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t\tor   eax<span class=\"token punctuation\">,</span><span class=\"token number\">10000</span>h</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t\tmov  cr0<span class=\"token punctuation\">,</span>eax</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t\tsti</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>VOID <span class=\"token function\">PageProtectOff</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\t\t\t\t</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t__asm<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t\tcli\t\t\t\t\t</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t\tmov  eax<span class=\"token punctuation\">,</span>cr0</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t\tand  eax<span class=\"token punctuation\">,</span>not <span class=\"token number\">10000</span>h</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t\tmov  cr0<span class=\"token punctuation\">,</span>eax</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"代码如下\"><a class=\"anchor\" href=\"#代码如下\">#</a> 代码如下</h1>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//SSDT HOOK 框架</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;ntddk.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;ntstatus.h></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">/************************************************************************/</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">/* 类型声明                                                             */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">/************************************************************************/</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 系统服务表</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_KSYSTEM_SERVICE_TABLE</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tPULONG ServiceTableBase<span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\">// 函数地址表（SSDT）</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tPULONG ServiceCounterTableBase<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// SSDT 函数被调用的次数</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tULONG NumberOfService<span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">// 函数个数</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tPULONG ParamTableBase<span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">// 函数参数表（SSPT）</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span> KSYSTEM_SERVICE_TABLE<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span> PKSYSTEM_SERVICE_TABLE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">//SSDT</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_KSERVICE_TABLE_DESCRIPTOR</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\tKSYSTEM_SERVICE_TABLE ntoskrnl<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 内核函数</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\tKSYSTEM_SERVICE_TABLE win32k<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">//win32k.sys 函数</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\tKSYSTEM_SERVICE_TABLE unUsed1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\tKSYSTEM_SERVICE_TABLE unUsed2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span> KSERVICE_TABLE_DESCRIPTOR<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span> PKSERVICE_TABLE_DESCRIPTOR<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token comment\">// 定义 被 hook 的函数的函数指针</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token comment\">// NTOPENPROCESS</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token function\">NTSTATUS</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>NTOPENPROCESS<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>PHANDLE ProcessHandle<span class=\"token punctuation\">,</span> ACCESS_MASK DesiredAccess<span class=\"token punctuation\">,</span> POBJECT_ATTRIBUTES ObjectAttributes<span class=\"token punctuation\">,</span> PCLIENT_ID ClientId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token comment\">/************************************************************************/</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token comment\">/* 函数声明                                                             */</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token comment\">/************************************************************************/</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>VOID <span class=\"token function\">DriverUnload</span><span class=\"token punctuation\">(</span>PDRIVER_OBJECT pDriver<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>NTSTATUS <span class=\"token function\">DriverEntry</span><span class=\"token punctuation\">(</span>PDRIVER_OBJECT pDriver<span class=\"token punctuation\">,</span> PUNICODE_STRING reg_path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>VOID <span class=\"token function\">PageProtectOff</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>VOID <span class=\"token function\">PageProtectOn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>VOID <span class=\"token function\">HookNtOpenProcess</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>VOID <span class=\"token function\">UnHookNtOpenProcess</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>NTSTATUS <span class=\"token function\">HbgNtOpenProcess</span><span class=\"token punctuation\">(</span>PHANDLE  ProcessHandle<span class=\"token punctuation\">,</span> ACCESS_MASK  DesiredAccess<span class=\"token punctuation\">,</span> POBJECT_ATTRIBUTES  ObjectAttributes<span class=\"token punctuation\">,</span> PCLIENT_ID  ClientId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token comment\">/************************************************************************/</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token comment\">/* 全局变量                                                             */</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token comment\">/************************************************************************/</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token comment\">//ntkrnlpa 或 ntoskrnl 中导出的全局变量</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token keyword\">extern</span> PKSERVICE_TABLE_DESCRIPTOR KeServiceDescriptorTable<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token comment\">// 旧的函数地址</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>ULONG uOldNtOpenProcess<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre></pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token comment\">/************************************************************************/</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token comment\">/* 函数定义                                                             */</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token comment\">/************************************************************************/</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre></pre></td></tr><tr><td data-num=\"62\"></td><td><pre><span class=\"token comment\">// 驱动入口</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>NTSTATUS <span class=\"token function\">DriverEntry</span><span class=\"token punctuation\">(</span>PDRIVER_OBJECT pDriver<span class=\"token punctuation\">,</span> PUNICODE_STRING reg_path<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t<span class=\"token comment\">// HOOK</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t<span class=\"token function\">HookNtOpenProcess</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>\tpDriver<span class=\"token operator\">-></span>DriverUnload <span class=\"token operator\">=</span> DriverUnload<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\t<span class=\"token keyword\">return</span> STATUS_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre></pre></td></tr><tr><td data-num=\"73\"></td><td><pre><span class=\"token comment\">// 卸载驱动</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>VOID <span class=\"token function\">DriverUnload</span><span class=\"token punctuation\">(</span>PDRIVER_OBJECT pDriver<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>\t<span class=\"token function\">UnHookNtOpenProcess</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Driver unloaded.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre></pre></td></tr><tr><td data-num=\"80\"></td><td><pre><span class=\"token comment\">// 关闭页保护</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>VOID <span class=\"token function\">PageProtectOff</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>\t__asm</pre></td></tr><tr><td data-num=\"85\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>\t\tcli<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 关闭中断</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>\t\tmov eax<span class=\"token punctuation\">,</span> cr0<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>\t\tand eax<span class=\"token punctuation\">,</span> not <span class=\"token number\">0x10000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// WP 位置 0</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>\t\tmov cr0<span class=\"token punctuation\">,</span> eax<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre></pre></td></tr><tr><td data-num=\"93\"></td><td><pre><span class=\"token comment\">// 开启页保护</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>VOID <span class=\"token function\">PageProtectOn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>\t__asm</pre></td></tr><tr><td data-num=\"97\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>\t\tmov eax<span class=\"token punctuation\">,</span> cr0<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>\t\tor eax<span class=\"token punctuation\">,</span> <span class=\"token number\">0x10000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// WP 位置 1</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>\t\tmov cr0<span class=\"token punctuation\">,</span> eax<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>\t\tsti<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 恢复中断</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre></pre></td></tr><tr><td data-num=\"105\"></td><td><pre><span class=\"token comment\">// HOOK NtOpenProcess</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>VOID <span class=\"token function\">HookNtOpenProcess</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>\t<span class=\"token function\">PageProtectOff</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>\tuOldNtOpenProcess <span class=\"token operator\">=</span> KeServiceDescriptorTable<span class=\"token operator\">-></span>ntoskrnl<span class=\"token punctuation\">.</span>ServiceTableBase<span class=\"token punctuation\">[</span><span class=\"token number\">0x7A</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>\tKeServiceDescriptorTable<span class=\"token operator\">-></span>ntoskrnl<span class=\"token punctuation\">.</span>ServiceTableBase<span class=\"token punctuation\">[</span><span class=\"token number\">0x7A</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>ULONG<span class=\"token punctuation\">)</span>HbgNtOpenProcess<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>\t<span class=\"token function\">PageProtectOn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre></pre></td></tr><tr><td data-num=\"114\"></td><td><pre><span class=\"token comment\">// UnHOOK NtOpenProcess</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>VOID <span class=\"token function\">UnHookNtOpenProcess</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>\t<span class=\"token function\">PageProtectOff</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>\tKeServiceDescriptorTable<span class=\"token operator\">-></span>ntoskrnl<span class=\"token punctuation\">.</span>ServiceTableBase<span class=\"token punctuation\">[</span><span class=\"token number\">0x7A</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> uOldNtOpenProcess<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>\t<span class=\"token function\">PageProtectOn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre></pre></td></tr><tr><td data-num=\"122\"></td><td><pre><span class=\"token comment\">// 被修改的 NtOpenProcess 函数，简单打印参数</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>NTSTATUS <span class=\"token function\">HbgNtOpenProcess</span><span class=\"token punctuation\">(</span>PHANDLE  ProcessHandle<span class=\"token punctuation\">,</span> ACCESS_MASK  DesiredAccess<span class=\"token punctuation\">,</span> POBJECT_ATTRIBUTES  ObjectAttributes<span class=\"token punctuation\">,</span> PCLIENT_ID  ClientId<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%x %x %x %x\\n\"</span><span class=\"token punctuation\">,</span> ProcessHandle<span class=\"token punctuation\">,</span> DesiredAccess<span class=\"token punctuation\">,</span> ObjectAttributes<span class=\"token punctuation\">,</span> ClientId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>NTOPENPROCESS<span class=\"token punctuation\">)</span>uOldNtOpenProcess<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>ProcessHandle<span class=\"token punctuation\">,</span> DesiredAccess<span class=\"token punctuation\">,</span> ObjectAttributes<span class=\"token punctuation\">,</span> ClientId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"openprocess函数\"><a class=\"anchor\" href=\"#openprocess函数\">#</a> OpenProcess 函数</h1>\n<p><code>OpenProcess</code>  函数，由 kernel32.dll 导出，其会调用 <code>NtOpenProcess</code>  函数，此函数由 ntdll.dll 导出，在 IDA 中查看为 <code>__stdcall ZwOpenProcess(x, x, x, x)</code> ，既 <code>NtOpenProcess</code>  是 <code>ZwOpenProcess</code>  函数的导出别名， <code>ZwOpenProcess</code>  函数会利用快速调用进 0 环，传递的服务号为 <code>0x7A</code> ，在 windbg 中查看 SSDT 函数表中索引为 0x7A 的函数：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kd&gt; dd KeServiceDescriptorTable</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>8055d700  80505570 00000000 0000011c 805059e4</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>8055d710  00000000 00000000 00000000 00000000</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>8055d720  00000000 00000000 00000000 00000000</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>8055d730  00000000 00000000 00000000 00000000</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>kd&gt; dd 80505570 </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>80505570  805a5664 805f23ea 805f5c20 805f241c</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>80505580  805f5c5a 805f2452 805f5c9e 805f5ce2</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>80505590  80616e80 806180e4 805ed7e8 805ed440</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>kd&gt; dd 80505570  + 0x7A *4</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>80505758  805cc486 805ef030 805eec94 805ab420</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>80505768  806162da 805c4c14 805cc712 805ef04e</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>80505778  805eee04 80618214 80646ea4 805ca534</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>kd&gt; u 805cc486 </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>nt!NtOpenProcess:</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>805cc486 68c4000000      push    0C4h</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>805cc48b 68c0b44d80      push    offset nt!ObWatchHandles+0x25c (804db4c0)</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>805cc490 e8ab08f7ff      call    nt!_SEH_prolog (8053cd40)</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>805cc495 33f6            xor     esi,esi</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>805cc497 8975d4          mov     dword ptr [ebp-2Ch],esi</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>805cc49a 33c0            xor     eax,eax</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>805cc49c 8d7dd8          lea     edi,[ebp-28h]</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>805cc49f ab              stos    dword ptr es:[edi]</pre></td></tr></table></figure><p>由此可以发现最终调用的是内核文件中  <code>NtOpenProcess</code>  函数，也就是我们本次 HOOK 的代码。</p>\n",
            "tags": [
                "SSDT HOOK",
                "OpenProcess"
            ]
        },
        {
            "id": "https://or0kit.github.io/Bin/Core/WindowsXp/SystemCall/%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8-SSDT/",
            "url": "https://or0kit.github.io/Bin/Core/WindowsXp/SystemCall/%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8-SSDT/",
            "title": "系统调用-SSDT",
            "date_published": "2021-12-14T02:38:24.000Z",
            "content_html": "<h1 id=\"楔子\"><a class=\"anchor\" href=\"#楔子\">#</a> 楔子</h1>\n<p>在前两篇的 0/3 环调用分析中，我们知道有两个进入 0 环的方法，一个中断门 利用 <code>int 0x2e</code>  指令，一个是快速调用 利用 <code>sysenter</code>  指令，因为利用中断门进 0 环权限发生切换，会直接向堆栈中压入 5 个值：3 环的 SS、3 环 Eflags、3 环的 CS、3 环的 EIP。而通过快速调用却没有压入这 5 个值，所以会有  <code>KiFastSystemCall 与 KiIntSystemCall</code>  以及  <code>KiSystemService 与 KiFastCallEntry</code>  这四个函数。</p>\n<p><code>KiFastSystemCall 与 KiIntSystemCall</code>  是为了从 3 环进入 0 环，既修改 CS、SS、EIP、ESP。</p>\n<p><code>KiSystemService 与 KiFastCallEntry</code>  它们都是为了填充  <code>KTRAP_FRAME</code>  结构体，从而保存 3 环的环境。</p>\n<p>保存并切换完环境后，就开始调用函数了，这里涉及了一张表，系统服务表（SystemServiceTable)</p>\n<p>进 0 环后，3 环的各种寄存器的值都会保留到 <code>_Trap_Frame</code>  结构体中，如何根据系统服务号（eax 中存储）找到要执行的内核函数？调用时参数是存储到 3 环的堆栈，如何传递给内核函数？</p>\n<h1 id=\"系统服务表\"><a class=\"anchor\" href=\"#系统服务表\">#</a> 系统服务表</h1>\n<h2 id=\"结构\"><a class=\"anchor\" href=\"#结构\">#</a> 结构</h2>\n<p>首先我们得知道一个结构体，用来描述内核函数信息的表：SystemServiceTable，即系统服务表，它不是 SSDT。</p>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<p>系统服务表由 4 部分组成：<br />\n <code>ServiceTable</code>  指向的是函数地址数组，每个成员四个字节；<br />\n <code>Count</code>  表示调用次数；<br />\n <code>ServiceLimit</code>  表示表中函数的个数；<br />\n <code>ArgumentTable</code>  指向对应函数有几个参数，每个成员一个字节。</p>\n<p>Windows 提供了两张表：上面的表是用来处理一般内核函数的，下面这张表是用来处理与图形相关的内核函数。</p>\n<p>这张表里的都是向 3 环开放的内核函数，并不代表整个内核只有这么多函数。</p>\n<h2 id=\"系统服务表在哪\"><a class=\"anchor\" href=\"#系统服务表在哪\">#</a> 系统服务表在哪</h2>\n<p><code>SystemServiceTable</code>  系统服务表在哪？ 在 <code>_KTHREAD + 0xE0</code>  的位置</p>\n<p><img data-src=\"image002.png\" alt=\"\" /></p>\n<h2 id=\"判断要调用的函数在哪个表\"><a class=\"anchor\" href=\"#判断要调用的函数在哪个表\">#</a> 判断要调用的函数在哪个表</h2>\n<p><img data-src=\"image003.png\" alt=\"\" /></p>\n<h2 id=\"找到要执行的函数与参数个数\"><a class=\"anchor\" href=\"#找到要执行的函数与参数个数\">#</a> 找到要执行的函数与参数个数</h2>\n<p><img data-src=\"image004.png\" alt=\"\" /></p>\n<p>用查找到的函数在 <code>ServiceTable</code>  中的索引 <code>i</code> ，去找在 <code>ArgumentTable</code>  中索引为 <code>i</code>  元素，其值就是该函数的 <strong>参数个数 * 4。</strong></p>\n<h1 id=\"ssdt\"><a class=\"anchor\" href=\"#ssdt\">#</a> SSDT</h1>\n<p>SSDT 的全称是 <code>System Services Descriptor Table</code> ，意为系统服务描述符表。</p>\n<p>SSDT 的每个成员叫做系统服务表<br />\n SSDT 的第一个成员是导出的，声明一下即可使用<br />\n SSDT 的第二个成员是未导出的，需要通过其它方式查找<br />\n在 Windows 中，SSDT 的第三个成员和第四个成员未被使用</p>\n<p>在 32 位 XP 中，我们可以通过 <code>ETHREAD</code>  结构体加偏移的方式进行访问。</p>\n<p>在内核文件中，有一个变量是导出的：  <code>KeServiceDescriptorTable</code>  通过它我们可以访问 SSDT。</p>\n<p><img data-src=\"image005.png\" alt=\"\" /></p>\n<p>在 windbg 中查看一下：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kd&gt; dd KeServiceDescriptorTable</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>8055d700  80505570 00000000 0000011c 805059e4</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>8055d710  00000000 00000000 00000000 00000000</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>8055d720  00000000 00000000 00000000 00000000</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>8055d730  00000000 00000000 00000000 00000000</pre></td></tr></table></figure><p>在 WinDbg 中查看未导出成员：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kd&gt; dd KeServiceDescriptorTableShadow</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>8055d6c0  80505570 00000000 0000011c 805059e4</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>8055d6d0  bf9a6f80 00000000 0000029b bf9a7c90</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>8055d6e0  00000000 00000000 00000000 00000000</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>8055d6f0  00000000 00000000 00000000 00000000</pre></td></tr></table></figure>",
            "tags": [
                "系统服务表",
                "SSDT"
            ]
        },
        {
            "id": "https://or0kit.github.io/Bin/Core/WindowsXp/SystemCall/%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8-0%E7%8E%AF%E8%B0%83%E7%94%A8%E5%88%86%E6%9E%90/",
            "url": "https://or0kit.github.io/Bin/Core/WindowsXp/SystemCall/%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8-0%E7%8E%AF%E8%B0%83%E7%94%A8%E5%88%86%E6%9E%90/",
            "title": "系统调用-0环调用分析",
            "date_published": "2021-12-09T02:50:01.000Z",
            "content_html": "<h1 id=\"楔子\"><a class=\"anchor\" href=\"#楔子\">#</a> 楔子</h1>\n<p>上一次分析到 API 函数在  <code>ntdll.dll</code>  中的  <code>KiFastSystemCall</code>  与  <code>KiIntSystemCall</code>  函数。<br />\n补充一下，Windows API 的相关知识。</p>\n<p><code>API</code>  全称为  <code>Application Programming Interface</code> 。</p>\n<p>其中有几个比较重要的  <code>Dll</code> ，很多重要的函数都在这些动态链接库里面：</p>\n<ul>\n<li><code>Kernel32.dll</code> ：最核心的功能模块，比如管理内存、进程和线程相关的函数等。</li>\n<li><code>User32.dll</code> ：是  <code>Windows</code>  用户界面相关应用程序接口，如创建窗口和发送消息等。</li>\n<li><code>GDI32.dll</code> ：全称是  <code>Graphical Device Interface</code> ，即  <code>图形设备接口</code> ，包含用于画图和显示文本的函数。比如要显示一个程序窗口，就调用了其中的函数来画这个窗口。</li>\n<li><code>Ntdll.dll</code> ：大多数  <code>API</code>  都会通过这个  <code>DLL</code>  进入内核（0 环）。</li>\n</ul>\n<p>需要注意的是：并不是所有的  <code>API</code>  都必须要进 0 环的，有些功能完全可以在 3 环实现。</p>\n<p>我们可以知道函数在  <code>ntdll.dll</code>  中进入 R0, 那么它是如何实现的呢，进入 R0 后又做了什么呢？</p>\n<h1 id=\"分析-kifastsystemcall-与-kiintsystemcall\"><a class=\"anchor\" href=\"#分析-kifastsystemcall-与-kiintsystemcall\">#</a> 分析 KiFastSystemCall 与 KiIntSystemCall</h1>\n<h2 id=\"首先分析-kifastsystemcall\"><a class=\"anchor\" href=\"#首先分析-kifastsystemcall\">#</a> 首先分析 KiFastSystemCall</h2>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>_DWORD __stdcall KiFastSystemCall()</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>                public _KiFastSystemCall@0</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>_KiFastSystemCall@0 proc near           ; DATA XREF: .text:off_7C923428↑o</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                mov     edx, esp</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                sysenter</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>_KiFastSystemCall@0 endp</pre></td></tr></table></figure><p>在 KiFastSystemCall 中，先把 R3 的栈顶 esp 存到了 edx 中，然后执行了 sysenter 指令，那这个指令具体是怎么做的呢？</p>\n<h2 id=\"sysenter-指令进0环\"><a class=\"anchor\" href=\"#sysenter-指令进0环\">#</a> sysenter 指令进 0 环</h2>\n<p>如果要进入 R0 必须要指定相关的 CS SS EIP ESP。所以在执行  <code>sysenter</code>  指令之前，操作系统必须指定 0 环的  <code>CS</code> 、 <code>SS</code> 、 <code>EIP</code>  以及  <code>ESP</code> 。<br />\n而它们的值存储在  <code>MSR</code>  寄存器中，它的具体结构并未公开。<br />\n每个  <code>MSR</code>  寄存器都会有一个相应的  <code>ID</code> ，即  <code>MSR Index</code> 。当执行  <code>RDMSR</code>  或者  <code>WRMSR</code>  指令的时候，只要提供  <code>MSR Index</code>  就能让  <code>CPU</code>  知道目标  <code>MSR</code>  寄存器。</p>\n<table>\n<thead>\n<tr>\n<th>MSR</th>\n<th>Index</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>IA32_SYSENTER_CS</td>\n<td>174H</td>\n</tr>\n<tr>\n<td>IA32_SYSENTER_ESP</td>\n<td>175H</td>\n</tr>\n<tr>\n<td>IA32_SYSENTER_EIP</td>\n<td>176H</td>\n</tr>\n</tbody>\n</table>\n<p>其中并没有 SS 的值，这是因为 SS 的值是通过 CS + 0x8 算出来的。</p>\n<p>在 windbg 中查看一下</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kd&gt; rdmsr 174</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>msr[174] &#x3D; 00000000&#96;00000008</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>kd&gt; rdmsr 175</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>msr[175] &#x3D; 00000000&#96;ba4d0000</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>kd&gt; rdmsr 176</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>msr[176] &#x3D; 00000000&#96;805426e0</pre></td></tr></table></figure><p>查看 EIP 指向的函数：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kd&gt; u 805426e0</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>nt!KiFastCallEntry:</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>805426e0 b923000000      mov     ecx,23h</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>805426e5 6a30            push    30h</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>805426e7 0fa1            pop     fs</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>805426e9 8ed9            mov     ds,cx</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>805426eb 8ec1            mov     es,cx</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>805426ed 648b0d40000000  mov     ecx,dword ptr fs:[40h]</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>805426f4 8b6104          mov     esp,dword ptr [ecx+4]</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>805426f7 6a23            push    23h</pre></td></tr></table></figure><p><strong>发现是  <code>KiFastCallEntry</code>  函数</strong></p>\n<h2 id=\"接下来分析-kiintsystemcall\"><a class=\"anchor\" href=\"#接下来分析-kiintsystemcall\">#</a> 接下来分析 KiIntSystemCall</h2>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>_DWORD __stdcall KiIntSystemCall ()</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>                public _KiIntSystemCall@0</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>_KiIntSystemCall@0 proc near            ; DATA XREF: .text:off_7C923428↑o</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                lea     edx, [esp+8] ; 参数指针</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                int     2Eh             ; DOS 2+ internal - EXECUTE COMMAND</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                                        ; DS:SI -&gt; counted CR-terminated command string</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                retn</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>_KiIntSystemCall@0 endp</pre></td></tr></table></figure><p>首先把 esp+8 的地址给了 edx，然后使用中断门，触发中断，中断号是 0x2E，用 windbg 看看 2E 号中断的中断门描述符： <code> 8054ee00`00082611</code>  这个值在不同的计算机上应该都不一样。</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kd&gt; r idtr</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>idtr&#x3D;8003f400</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>kd&gt; dq 8003f400 + 0x2e * 8</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>8003f570  8054ee00&#96;00082611 80548e00&#96;0008590c</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>8003f580  80548e00&#96;00081cd0 80548e00&#96;00081cda</pre></td></tr></table></figure><p>拆分中断门描述符，可以得到新的 CS 是 0008（系统代码段），EIP 是  <code>80542611</code>  ，这个是内核模块的  <code>KiSystemService</code>  函数。</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kd&gt; u 80542611</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>nt!KiSystemService:</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>80542611 6a00            push    0</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>80542613 55              push    ebp</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>80542614 53              push    ebx</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>80542615 56              push    esi</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>80542616 57              push    edi</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>80542617 0fa0            push    fs</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>80542619 bb30000000      mov     ebx,30h</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>8054261e 668ee3          mov     fs,bx</pre></td></tr></table></figure><h2 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h2>\n<p><code>KiIntSystemCall</code>  通过中断门进 0 环：</p>\n<ol>\n<li>固定中断号为 0x2E</li>\n<li>CS/EIP 由门描述符提供   ESP/SS 由 TSS 提供</li>\n<li>进入 0 环后执行的内核函数： <code>NT!KiSystemService</code></li>\n</ol>\n<p><code>KiFastSystemCall</code>  通过 sysenter 指令进 0 环：</p>\n<ol>\n<li>CS/ESP/EIP 由 MSR 寄存器提供 (SS 是算出来的)</li>\n<li>进入 0 环后执行的内核函数： <code>NT!KiFastCallEntry</code></li>\n</ol>\n<h1 id=\"分析-kisystemservice-和-kifastcallentry-函数\"><a class=\"anchor\" href=\"#分析-kisystemservice-和-kifastcallentry-函数\">#</a> 分析 KiSystemService 和 KiFastCallEntry 函数</h1>\n<p>通过 <code>int 2E</code>  或者 <code>sysenter</code>  进入内核后，之后的流程会怎样继续进行呢？</p>\n<p>首先我们得知道这两个结构体  <code>Trap_Frame</code>  和  <code>KPCR</code> 。</p>\n<p>这里有一个小知识，和前面学的可以连起来。</p>\n<p>首先复习一下 TSS 表，TSS 表只有一张，但是系统里有成百上千的线程，线程进 0 环时，假设使用中断门，0 环的 ESP 和 SS 从 TSS 表获取，怎么保证每个线程都有自己的堆栈，不互相冲突呢？答案是，线程切换时会修改 TSS 表，确保每个线程执行时，TSS 里的 ESP,SS 都对应当前线程。</p>\n<p><code>Trap_Frame</code>  和 0 环栈密切相关。用户定义中断进 0 环，涉及提权时，CPU 会把 5 个寄存器的值压入 0 环堆栈，这是我们在中断门的课程里学习过的：</p>\n<p><img data-src=\"image001.png\" alt=\"\" /><br />\n上图是不完整的。</p>\n<p>实际上，完整的 0 环的栈是 Trap_Frame，中断门进 0 环后，新的 ESP 指向偏移 0x068（Eip）处。</p>\n<h2 id=\"trap_frame\"><a class=\"anchor\" href=\"#trap_frame\">#</a> Trap_Frame</h2>\n<p><img data-src=\"image002.png\" alt=\"\" /></p>\n<p>在 windbg 中查看</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kd&gt; dt _KTRAP_FRAME</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>nt!_KTRAP_FRAME</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   +0x000 DbgEbp           : Uint4B</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   +0x004 DbgEip           : Uint4B</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   +0x008 DbgArgMark       : Uint4B</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   +0x00c DbgArgPointer    : Uint4B</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   +0x010 TempSegCs        : Uint4B</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   +0x014 TempEsp          : Uint4B</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   +0x018 Dr0              : Uint4B</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   +0x01c Dr1              : Uint4B</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   +0x020 Dr2              : Uint4B</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   +0x024 Dr3              : Uint4B</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   +0x028 Dr6              : Uint4B</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   +0x02c Dr7              : Uint4B</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   +0x030 SegGs            : Uint4B</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   +0x034 SegEs            : Uint4B</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   +0x038 SegDs            : Uint4B</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   +0x03c Edx              : Uint4B</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   +0x040 Ecx              : Uint4B</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>   +0x044 Eax              : Uint4B</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>   +0x048 PreviousPreviousMode : Uint4B</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>   +0x04c ExceptionList    : Ptr32 _EXCEPTION_REGISTRATION_RECORD</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>   +0x050 SegFs            : Uint4B</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>   +0x054 Edi              : Uint4B</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>   +0x058 Esi              : Uint4B</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>   +0x05c Ebx              : Uint4B</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>   +0x060 Ebp              : Uint4B</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>   +0x064 ErrCode          : Uint4B</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>   +0x068 Eip              : Uint4B</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>   +0x06c SegCs            : Uint4B</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>   +0x070 EFlags           : Uint4B</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>   +0x074 HardwareEsp      : Uint4B</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>   +0x078 HardwareSegSs    : Uint4B</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>   +0x07c V86Es            : Uint4B</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>   +0x080 V86Ds            : Uint4B</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>   +0x084 V86Fs            : Uint4B</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>   +0x088 V86Gs            : Uint4B</pre></td></tr></table></figure><p>_Trap_Frame 结构体，实际上是 windows 对内核栈的使用约定，它约定了不同的偏移分别用来存储什么数据。</p>\n<p>我们待会逆向 KiSystemService 的时候会发现，第一条指令就是 push 0，意思就是设置 ErrCode = 0。</p>\n<p>第一个问题：进 0 环后，原来的寄存器存在哪里？</p>\n<p>看到这个结构，相信你已经有了答案，我们可以通过逆向 KiSystemService 来验证猜想。</p>\n<h2 id=\"_kpcr-_nt_tib-_kprcb\"><a class=\"anchor\" href=\"#_kpcr-_nt_tib-_kprcb\">#</a> _KPCR, _NT_TIB, _KPRCB</h2>\n<p><img data-src=\"image003.png\" alt=\"\" /></p>\n<p>这三个结构体存储了当前 CPU 的信息，其实这三个结构体是一个结构体，只不过抽象成三部分而已。地址固定是 0xffdff000。</p>\n<p><code>_KPCR</code> <br />\nKPCR（Processor Control Region）是 CPU 控制区的意思，每个 CPU 都有一个 KPCR 结构。</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>nt!_KPCR</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   +0x000 NtTib            : _NT_TIB</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   +0x01c SelfPcr          : Ptr32 _KPCR</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   +0x020 Prcb             : Ptr32 _KPRCB</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   +0x024 Irql             : UChar</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   +0x028 IRR              : Uint4B</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   +0x02c IrrActive        : Uint4B</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   +0x030 IDR              : Uint4B</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   +0x034 KdVersionBlock   : Ptr32 Void</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   +0x038 IDT              : Ptr32 _KIDTENTRY</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   +0x03c GDT              : Ptr32 _KGDTENTRY</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   +0x040 TSS              : Ptr32 _KTSS</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   +0x044 MajorVersion     : Uint2B</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   +0x046 MinorVersion     : Uint2B</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   +0x048 SetMember        : Uint4B</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   +0x04c StallScaleFactor : Uint4B</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   +0x050 DebugActive      : UChar</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   +0x051 Number           : UChar</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   +0x052 Spare0           : UChar</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>   +0x053 SecondLevelCacheAssociativity : UChar</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>   +0x054 VdmAlert         : Uint4B</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>   +0x058 KernelReserved   : [14] Uint4B</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>   +0x090 SecondLevelCacheSize : Uint4B</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>   +0x094 HalReserved      : [16] Uint4B</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>   +0x0d4 InterruptMode    : Uint4B</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>   +0x0d8 Spare1           : UChar</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>   +0x0dc KernelReserved2  : [17] Uint4B</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>   +0x120 PrcbData         : _KPRCB</pre></td></tr></table></figure><p><code>_NT_TIB</code> <br />\n 主要存储了 SEH 结构化异常链表和一个指向自己的指针。</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>nt!_NT_TIB</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   +0x000 ExceptionList    : Ptr32 _EXCEPTION_REGISTRATION_RECORD</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   +0x004 StackBase        : Ptr32 Void</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   +0x008 StackLimit       : Ptr32 Void</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   +0x00c SubSystemTib     : Ptr32 Void</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   +0x010 FiberData        : Ptr32 Void</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   +0x010 Version          : Uint4B</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   +0x014 ArbitraryUserPointer : Ptr32 Void</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   +0x018 Self             : Ptr32 _NT_TIB</pre></td></tr></table></figure><p><code>_KPRCB</code></p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>nt!_KPRCB</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   +0x000 MinorVersion     : Uint2B</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   +0x002 MajorVersion     : Uint2B</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   +0x004 CurrentThread    : Ptr32 _KTHREAD</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   +0x008 NextThread       : Ptr32 _KTHREAD</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   +0x00c IdleThread       : Ptr32 _KTHREAD</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   +0x010 Number           : Char</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   +0x011 Reserved         : Char</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   +0x012 BuildType        : Uint2B</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   +0x014 SetMember        : Uint4B</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   +0x018 CpuType          : Char</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   +0x019 CpuID            : Char</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   +0x01a CpuStep          : Uint2B</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   +0x01c ProcessorState   : _KPROCESSOR_STATE</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   +0x33c KernelReserved   : [16] Uint4B</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   +0x37c HalReserved      : [16] Uint4B</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   +0x3bc PrcbPad0         : [92] UChar</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   +0x418 LockQueue        : [16] _KSPIN_LOCK_QUEUE</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   +0x498 PrcbPad1         : [8] UChar</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>   +0x4a0 NpxThread        : Ptr32 _KTHREAD</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>   +0x4a4 InterruptCount   : Uint4B</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>   +0x4a8 KernelTime       : Uint4B</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>   +0x4ac UserTime         : Uint4B</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>   +0x4b0 DpcTime          : Uint4B</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>   +0x4b4 DebugDpcTime     : Uint4B</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>   +0x4b8 InterruptTime    : Uint4B</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>   +0x4bc AdjustDpcThreshold : Uint4B</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>   +0x4c0 PageColor        : Uint4B</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>   +0x4c4 SkipTick         : Uint4B</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>   +0x4c8 MultiThreadSetBusy : UChar</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>   +0x4c9 Spare2           : [3] UChar</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>   +0x4cc ParentNode       : Ptr32 _KNODE</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>   +0x4d0 MultiThreadProcessorSet : Uint4B</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>   +0x4d4 MultiThreadSetMaster : Ptr32 _KPRCB</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>   +0x4d8 ThreadStartCount : [2] Uint4B</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>   +0x4e0 CcFastReadNoWait : Uint4B</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>   +0x4e4 CcFastReadWait   : Uint4B</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>   +0x4e8 CcFastReadNotPossible : Uint4B</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>   +0x4ec CcCopyReadNoWait : Uint4B</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>   +0x4f0 CcCopyReadWait   : Uint4B</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>   +0x4f4 CcCopyReadNoWaitMiss : Uint4B</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>   +0x4f8 KeAlignmentFixupCount : Uint4B</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>   +0x4fc KeContextSwitches : Uint4B</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>   +0x500 KeDcacheFlushCount : Uint4B</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>   +0x504 KeExceptionDispatchCount : Uint4B</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>   +0x508 KeFirstLevelTbFills : Uint4B</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>   +0x50c KeFloatingEmulationCount : Uint4B</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>   +0x510 KeIcacheFlushCount : Uint4B</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>   +0x514 KeSecondLevelTbFills : Uint4B</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>   +0x518 KeSystemCalls    : Uint4B</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>   +0x51c SpareCounter0    : [1] Uint4B</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>   +0x520 PPLookasideList  : [16] _PP_LOOKASIDE_LIST</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>   +0x5a0 PPNPagedLookasideList : [32] _PP_LOOKASIDE_LIST</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>   +0x6a0 PPPagedLookasideList : [32] _PP_LOOKASIDE_LIST</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>   +0x7a0 PacketBarrier    : Uint4B</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>   +0x7a4 ReverseStall     : Uint4B</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>   +0x7a8 IpiFrame         : Ptr32 Void</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>   +0x7ac PrcbPad2         : [52] UChar</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>   +0x7e0 CurrentPacket    : [3] Ptr32 Void</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>   +0x7ec TargetSet        : Uint4B</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>   +0x7f0 WorkerRoutine    : Ptr32     void </pre></td></tr><tr><td data-num=\"62\"></td><td><pre>   +0x7f4 IpiFrozen        : Uint4B</pre></td></tr><tr><td data-num=\"63\"></td><td><pre>   +0x7f8 PrcbPad3         : [40] UChar</pre></td></tr><tr><td data-num=\"64\"></td><td><pre>   +0x820 RequestSummary   : Uint4B</pre></td></tr><tr><td data-num=\"65\"></td><td><pre>   +0x824 SignalDone       : Ptr32 _KPRCB</pre></td></tr><tr><td data-num=\"66\"></td><td><pre>   +0x828 PrcbPad4         : [56] UChar</pre></td></tr><tr><td data-num=\"67\"></td><td><pre>   +0x860 DpcListHead      : _LIST_ENTRY</pre></td></tr><tr><td data-num=\"68\"></td><td><pre>   +0x868 DpcStack         : Ptr32 Void</pre></td></tr><tr><td data-num=\"69\"></td><td><pre>   +0x86c DpcCount         : Uint4B</pre></td></tr><tr><td data-num=\"70\"></td><td><pre>   +0x870 DpcQueueDepth    : Uint4B</pre></td></tr><tr><td data-num=\"71\"></td><td><pre>   +0x874 DpcRoutineActive : Uint4B</pre></td></tr><tr><td data-num=\"72\"></td><td><pre>   +0x878 DpcInterruptRequested : Uint4B</pre></td></tr><tr><td data-num=\"73\"></td><td><pre>   +0x87c DpcLastCount     : Uint4B</pre></td></tr><tr><td data-num=\"74\"></td><td><pre>   +0x880 DpcRequestRate   : Uint4B</pre></td></tr><tr><td data-num=\"75\"></td><td><pre>   +0x884 MaximumDpcQueueDepth : Uint4B</pre></td></tr><tr><td data-num=\"76\"></td><td><pre>   +0x888 MinimumDpcRate   : Uint4B</pre></td></tr><tr><td data-num=\"77\"></td><td><pre>   +0x88c QuantumEnd       : Uint4B</pre></td></tr><tr><td data-num=\"78\"></td><td><pre>   +0x890 PrcbPad5         : [16] UChar</pre></td></tr><tr><td data-num=\"79\"></td><td><pre>   +0x8a0 DpcLock          : Uint4B</pre></td></tr><tr><td data-num=\"80\"></td><td><pre>   +0x8a4 PrcbPad6         : [28] UChar</pre></td></tr><tr><td data-num=\"81\"></td><td><pre>   +0x8c0 CallDpc          : _KDPC</pre></td></tr><tr><td data-num=\"82\"></td><td><pre>   +0x8e0 ChainedInterruptList : Ptr32 Void</pre></td></tr><tr><td data-num=\"83\"></td><td><pre>   +0x8e4 LookasideIrpFloat : Int4B</pre></td></tr><tr><td data-num=\"84\"></td><td><pre>   +0x8e8 SpareFields0     : [6] Uint4B</pre></td></tr><tr><td data-num=\"85\"></td><td><pre>   +0x900 VendorString     : [13] UChar</pre></td></tr><tr><td data-num=\"86\"></td><td><pre>   +0x90d InitialApicId    : UChar</pre></td></tr><tr><td data-num=\"87\"></td><td><pre>   +0x90e LogicalProcessorsPerPhysicalProcessor : UChar</pre></td></tr><tr><td data-num=\"88\"></td><td><pre>   +0x910 MHz              : Uint4B</pre></td></tr><tr><td data-num=\"89\"></td><td><pre>   +0x914 FeatureBits      : Uint4B</pre></td></tr><tr><td data-num=\"90\"></td><td><pre>   +0x918 UpdateSignature  : _LARGE_INTEGER</pre></td></tr><tr><td data-num=\"91\"></td><td><pre>   +0x920 NpxSaveArea      : _FX_SAVE_AREA</pre></td></tr><tr><td data-num=\"92\"></td><td><pre>   +0xb30 PowerState       : _PROCESSOR_POWER_STATE</pre></td></tr></table></figure><h2 id=\"_ethread-_kthread\"><a class=\"anchor\" href=\"#_ethread-_kthread\">#</a> _ETHREAD, _KTHREAD</h2>\n<p>这俩其实也是同一个结构体，刚才介绍的 _KPRCB + 0x04 里用到了 _KTHREAD。这俩结构体存储的是线程相关的信息。</p>\n<p><code>_ETHREAD</code></p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>nt!_ETHREAD</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   +0x000 Tcb              : _KTHREAD</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   +0x1c0 CreateTime       : _LARGE_INTEGER</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   +0x1c0 NestedFaultCount : Pos 0, 2 Bits</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   +0x1c0 ApcNeeded        : Pos 2, 1 Bit</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   +0x1c8 ExitTime         : _LARGE_INTEGER</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   +0x1c8 LpcReplyChain    : _LIST_ENTRY</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   +0x1c8 KeyedWaitChain   : _LIST_ENTRY</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   +0x1d0 ExitStatus       : Int4B</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   +0x1d0 OfsChain         : Ptr32 Void</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   +0x1d4 PostBlockList    : _LIST_ENTRY</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   +0x1dc TerminationPort  : Ptr32 _TERMINATION_PORT</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   +0x1dc ReaperLink       : Ptr32 _ETHREAD</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   +0x1dc KeyedWaitValue   : Ptr32 Void</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   +0x1e0 ActiveTimerListLock : Uint4B</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   +0x1e4 ActiveTimerListHead : _LIST_ENTRY</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   +0x1ec Cid              : _CLIENT_ID</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   +0x1f4 LpcReplySemaphore : _KSEMAPHORE</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   +0x1f4 KeyedWaitSemaphore : _KSEMAPHORE</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>   +0x208 LpcReplyMessage  : Ptr32 Void</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>   +0x208 LpcWaitingOnPort : Ptr32 Void</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>   +0x20c ImpersonationInfo : Ptr32 _PS_IMPERSONATION_INFORMATION</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>   +0x210 IrpList          : _LIST_ENTRY</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>   +0x218 TopLevelIrp      : Uint4B</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>   +0x21c DeviceToVerify   : Ptr32 _DEVICE_OBJECT</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>   +0x220 ThreadsProcess   : Ptr32 _EPROCESS</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>   +0x224 StartAddress     : Ptr32 Void</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>   +0x228 Win32StartAddress : Ptr32 Void</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>   +0x228 LpcReceivedMessageId : Uint4B</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>   +0x22c ThreadListEntry  : _LIST_ENTRY</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>   +0x234 RundownProtect   : _EX_RUNDOWN_REF</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>   +0x238 ThreadLock       : _EX_PUSH_LOCK</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>   +0x23c LpcReplyMessageId : Uint4B</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>   +0x240 ReadClusterSize  : Uint4B</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>   +0x244 GrantedAccess    : Uint4B</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>   +0x248 CrossThreadFlags : Uint4B</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>   +0x248 Terminated       : Pos 0, 1 Bit</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>   +0x248 DeadThread       : Pos 1, 1 Bit</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>   +0x248 HideFromDebugger : Pos 2, 1 Bit</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>   +0x248 ActiveImpersonationInfo : Pos 3, 1 Bit</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>   +0x248 SystemThread     : Pos 4, 1 Bit</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>   +0x248 HardErrorsAreDisabled : Pos 5, 1 Bit</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>   +0x248 BreakOnTermination : Pos 6, 1 Bit</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>   +0x248 SkipCreationMsg  : Pos 7, 1 Bit</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>   +0x248 SkipTerminationMsg : Pos 8, 1 Bit</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>   +0x24c SameThreadPassiveFlags : Uint4B</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>   +0x24c ActiveExWorker   : Pos 0, 1 Bit</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>   +0x24c ExWorkerCanWaitUser : Pos 1, 1 Bit</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>   +0x24c MemoryMaker      : Pos 2, 1 Bit</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>   +0x250 SameThreadApcFlags : Uint4B</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>   +0x250 LpcReceivedMsgIdValid : Pos 0, 1 Bit</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>   +0x250 LpcExitThreadCalled : Pos 1, 1 Bit</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>   +0x250 AddressSpaceOwner : Pos 2, 1 Bit</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>   +0x254 ForwardClusterOnly : UChar</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>   +0x255 DisablePageFaultClustering : UChar</pre></td></tr></table></figure><p><code>_KTHREAD</code></p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>nt!_KTHREAD</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   +0x000 Header           : _DISPATCHER_HEADER</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   +0x010 MutantListHead   : _LIST_ENTRY</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   +0x018 InitialStack     : Ptr32 Void</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   +0x01c StackLimit       : Ptr32 Void</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   +0x020 Teb              : Ptr32 Void</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   +0x024 TlsArray         : Ptr32 Void</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   +0x028 KernelStack      : Ptr32 Void</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   +0x02c DebugActive      : UChar</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   +0x02d State            : UChar</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   +0x02e Alerted          : [2] UChar</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   +0x030 Iopl             : UChar</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   +0x031 NpxState         : UChar</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   +0x032 Saturation       : Char</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   +0x033 Priority         : Char</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   +0x034 ApcState         : _KAPC_STATE</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   +0x04c ContextSwitches  : Uint4B</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   +0x050 IdleSwapBlock    : UChar</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   +0x051 Spare0           : [3] UChar</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>   +0x054 WaitStatus       : Int4B</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>   +0x058 WaitIrql         : UChar</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>   +0x059 WaitMode         : Char</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>   +0x05a WaitNext         : UChar</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>   +0x05b WaitReason       : UChar</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>   +0x05c WaitBlockList    : Ptr32 _KWAIT_BLOCK</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>   +0x060 WaitListEntry    : _LIST_ENTRY</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>   +0x060 SwapListEntry    : _SINGLE_LIST_ENTRY</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>   +0x068 WaitTime         : Uint4B</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>   +0x06c BasePriority     : Char</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>   +0x06d DecrementCount   : UChar</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>   +0x06e PriorityDecrement : Char</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>   +0x06f Quantum          : Char</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>   +0x070 WaitBlock        : [4] _KWAIT_BLOCK</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>   +0x0d0 LegoData         : Ptr32 Void</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>   +0x0d4 KernelApcDisable : Uint4B</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>   +0x0d8 UserAffinity     : Uint4B</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>   +0x0dc SystemAffinityActive : UChar</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>   +0x0dd PowerState       : UChar</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>   +0x0de NpxIrql          : UChar</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>   +0x0df InitialNode      : UChar</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>   +0x0e0 ServiceTable     : Ptr32 Void</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>   +0x0e4 Queue            : Ptr32 _KQUEUE</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>   +0x0e8 ApcQueueLock     : Uint4B</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>   +0x0f0 Timer            : _KTIMER</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>   +0x118 QueueListEntry   : _LIST_ENTRY</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>   +0x120 SoftAffinity     : Uint4B</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>   +0x124 Affinity         : Uint4B</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>   +0x128 Preempted        : UChar</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>   +0x129 ProcessReadyQueue : UChar</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>   +0x12a KernelStackResident : UChar</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>   +0x12b NextProcessor    : UChar</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>   +0x12c CallbackStack    : Ptr32 Void</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>   +0x130 Win32Thread      : Ptr32 Void</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>   +0x134 TrapFrame        : Ptr32 _KTRAP_FRAME</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>   +0x138 ApcStatePointer  : [2] Ptr32 _KAPC_STATE</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>   +0x140 PreviousMode     : Char</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>   +0x141 EnableStackSwap  : UChar</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>   +0x142 LargeStack       : UChar</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>   +0x143 ResourceIndex    : UChar</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>   +0x144 KernelTime       : Uint4B</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>   +0x148 UserTime         : Uint4B</pre></td></tr><tr><td data-num=\"62\"></td><td><pre>   +0x14c SavedApcState    : _KAPC_STATE</pre></td></tr><tr><td data-num=\"63\"></td><td><pre>   +0x164 Alertable        : UChar</pre></td></tr><tr><td data-num=\"64\"></td><td><pre>   +0x165 ApcStateIndex    : UChar</pre></td></tr><tr><td data-num=\"65\"></td><td><pre>   +0x166 ApcQueueable     : UChar</pre></td></tr><tr><td data-num=\"66\"></td><td><pre>   +0x167 AutoAlignment    : UChar</pre></td></tr><tr><td data-num=\"67\"></td><td><pre>   +0x168 StackBase        : Ptr32 Void</pre></td></tr><tr><td data-num=\"68\"></td><td><pre>   +0x16c SuspendApc       : _KAPC</pre></td></tr><tr><td data-num=\"69\"></td><td><pre>   +0x19c SuspendSemaphore : _KSEMAPHORE</pre></td></tr><tr><td data-num=\"70\"></td><td><pre>   +0x1b0 ThreadListEntry  : _LIST_ENTRY</pre></td></tr><tr><td data-num=\"71\"></td><td><pre>   +0x1b8 FreezeCount      : Char</pre></td></tr><tr><td data-num=\"72\"></td><td><pre>   +0x1b9 SuspendCount     : Char</pre></td></tr><tr><td data-num=\"73\"></td><td><pre>   +0x1ba IdealProcessor   : UChar</pre></td></tr><tr><td data-num=\"74\"></td><td><pre>   +0x1bb DisableBoost     : UChar</pre></td></tr></table></figure><h2 id=\"分析-kifastcallentry\"><a class=\"anchor\" href=\"#分析-kifastcallentry\">#</a> 分析 KiFastCallEntry</h2>\n<p>在 IDA 中查看内核函数 KiFastCallEntry，发现有两个：</p>\n<p><img data-src=\"image004.png\" alt=\"\" /></p>\n<p>这是因为，内核函数也是有两套的，一套给用户层用，一套给内核层用。</p>\n<p>提权与不提权的堆栈变化不同。</p>\n<p>我们从 3 环来的，走的是 KiFastCallEntry。</p>\n<p>首先函数修改了 FS 段寄存器的段选择子，使其指向了 KPCR 这个结构。</p>\n<p>这个我们可以根据段选择子查 GDT 表，查看 KPCR 的位置。</p>\n<p><img data-src=\"image005.png\" alt=\"\" /></p>\n<p>在其中 0x120 处的 KPRCB 结构中也可以看 CPU 的厂商，其原理还是用 cpuid 指令查询后写到这里的。</p>\n<p><code>+0x900 VendorString     : [13]  &quot;GenuineIntel&quot;</code></p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>.text:0046A6E0 _KiFastCallEntry proc near              ; DATA XREF: KiLoadFastSyscallMachineSpecificRegisters (x)+24↑o</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>.text:0046A6E0                                         ; _KiTrap01+74↓o</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>.text:0046A6E0                 mov     ecx, 23h ; &#39;#&#39;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>.text:0046A6E5                 push    30h ; &#39;0&#39;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>.text:0046A6E7                 pop     fs              ; 修改 FS 段选择子 0 环的 FS 指向 KPCR 这个结构体 3 环的指向 TEB</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>.text:0046A6E9                 mov     ds, ecx         ; 修改 ds es 段选择子，在 3 环好像也是 0x23</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>.text:0046A6EB                 mov     es, ecx</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>.text:0046A6EB _KiFastCallEntry endp</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>.text:0046A6EB</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>.text:0046A6ED                 mov     ecx, large fs:_KPCR.TSS ; 取 TSS 的地址赋给 ecx</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>.text:0046A6F4                 mov     esp, [ecx+_KTSS.Esp0] ; 取 TSS 中存储的 0 环的 ESP。这个 ESP 指向的是 KTRAP_FRAME 结构，后面的压栈都是往这个结构体重填充数据。</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>.text:0046A6F7                 push    23h ; &#39;#&#39;       ; 系统写死了，这里相结构体中填充的是 3 环的 SS，既修改 3 环的 SS 为 0x23</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>.text:0046A6F9                 push    edx             ; 把 3 环的 esp 压栈</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>.text:0046A6FA                 pushf                   ; 压入 16 位的 flags。esp 会 - 2</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>.text:0046A6FB</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>.text:0046A6FB loc_46A6FB:                             ; CODE XREF: _KiFastCallEntry2+23↑j</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>.text:0046A6FB                 push    2</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>.text:0046A6FD                 add     edx, 8          ; 取参数。esp+8 的位置 是 三环压入的参数的起始位置</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>.text:0046A700                 popf                    ; 修改 EFLAGS 为 2。因为 eflags 的第 1（从 0 开始计数）位默认要为 1。即清空 Eflag</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>.text:0046A701                 or      byte ptr [esp+1], 2 ; 对压入的 16 位 3 环 flags 寄存器的值的第 9（从 0 开始）位进行或操作。既把第 9 位的值置为 1。</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>.text:0046A706                 push    1Bh             ; SegCs</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>.text:0046A708                 push    dword ptr ds:0FFDF0304h ; 返回地址 既结构体 KUSER_SHARED_DATA 中的 SystemCallReturn 成员</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>.text:0046A70E                 push    0               ; ErrorCode</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>.text:0046A710                 push    ebp</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>.text:0046A711                 push    ebx</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>.text:0046A712                 push    esi</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>.text:0046A713                 push    edi</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>.text:0046A714                 mov     ebx, large fs:_KPCR.SelfPcr ; ebx &#x3D; KPCR</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>.text:0046A71B                 push    3Bh ; &#39;;&#39;       ; SegFs。系统写死了是 0x3B, 这说明不论是单核还是多核，在 GDT 中 0x3B 这个位置就是 3 环的 fs</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>.text:0046A71D                 mov     esi, [ebx+_KPCR.PrcbData.CurrentThread] ; esi &#x3D; 当前 CPU 所执行线程的_ETHREAD 结构体</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>.text:0046A723                 push    dword ptr [ebx] ; 压入 3 环的 ExceptionList</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>.text:0046A725                 mov     dword ptr [ebx], 0FFFFFFFFh ; 将 ExceptionList 置 -1（EXCEPTION_CHAIN_END）</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>.text:0046A72B                 mov     ebp, [esi+_ETHREAD.Tcb.InitialStack] ; 线程初始的栈</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>.text:0046A72E                 push    1               ; 存储到 PreviousMode（先前模式）。</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>.text:0046A72E                                         ; 1 表示表示用户态进来</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>.text:0046A730                 sub     esp, 48h        ; 栈顶提升 0x48。指向_KTRAP_FRAME 结构体的第一个成员</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>.text:0046A733                 sub     ebp, 29Ch       ; 减去 0x29c 后指向的与 esp 是同一个位置</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>.text:0046A739                 mov     [esi+_ETHREAD.Tcb.PreviousMode], 1</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>.text:0046A740                 cmp     ebp, esp</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>.text:0046A742                 jnz     short loc_46A6D1 ; 如果不相等，跳入异常</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>.text:0046A744                 and     [ebp+_KTRAP_FRAME.Dr7], 0 ; 把调试相关的寄存器 Dr7（控制寄存器，debug 异常发生的允许条件由 Dr7 控制）设置为 0</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>.text:0046A748                 test    [esi+_ETHREAD.Tcb.DebugActive], 0FFh ; 判断线程是否是在调试的状态</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>.text:0046A74C                 mov     [esi+_ETHREAD.Tcb.TrapFrame], ebp ; 保存当前线程的环境，这样我们的环境就和线程相关联了。</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>.text:0046A752                 jnz     Dr_FastCallDrSave ; 若是调试的话会接着填充 Trap_Frame 结构体中调试相关的成员。</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>.text:0046A758 loc_46A758:                             ; CODE XREF: Dr_FastCallDrSave+10↑j</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>.text:0046A758                                         ; Dr_FastCallDrSave+7C↑j</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>.text:0046A758                 mov     ebx, [ebp+_KTRAP_FRAME._Ebp] ; ebx &#x3D; TrapFrame.Ebp</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>.text:0046A75B                 mov     edi, [ebp+_KTRAP_FRAME._Eip] ; edi &#x3D; TrapFrame.Eip</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>.text:0046A75E                 mov     [ebp+_KTRAP_FRAME.DbgArgPointer], edx ; DbgArgPointer &#x3D; 3 环传来的参数列表</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>.text:0046A761                 mov     [ebp+_KTRAP_FRAME.DbgArgMark], 0BADB0D00h ; DbgArgMark 掩码，现在记住就行</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>.text:0046A768                 mov     [ebp+_KTRAP_FRAME.DbgEbp], ebx ; DbgEbp &#x3D; Trap_Frame.Ebp</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>.text:0046A76B                 mov     [ebp+_KTRAP_FRAME.DbgEip], edi ; DbgEip &#x3D; Trap_Frame.DbgEip</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>.text:0046A76E                 sti                     ; 启用中断，不允许别人打断</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>.text:0046A76F</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>.text:0046A76F loc_46A76F:                             ; CODE XREF: _KiBBTUnexpectedRange+18↑j</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>.text:0046A76F                                         ; _KiSystemService+72↑j</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>.text:0046A76F                 mov     edi, eax        ; 取 3 环传来的服务号</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>.text:0046A771                 shr     edi, 8          ; 右移 8 位</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>.text:0046A774                 and     edi, 30h        ; (（编号 &gt;&gt;8) &amp; 0x30) 确定是哪个表中。也就是说大于 0xFFF 的在另一个表中</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>.text:0046A777                 mov     ecx, edi        ; ecx &#x3D; 表的偏移</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>.text:0046A779                 add     edi, [esi+_ETHREAD.Tcb.ServiceTable] ; edi &#x3D; 服务表。线程初始化的时候 SSDT 表的值就已经放到这里了。</pre></td></tr><tr><td data-num=\"62\"></td><td><pre>.text:0046A77F                 mov     ebx, eax        ; ebx &#x3D; 3 环传来的服务号</pre></td></tr><tr><td data-num=\"63\"></td><td><pre>.text:0046A781                 and     eax, 0FFFh      ; 获取真正的编号</pre></td></tr><tr><td data-num=\"64\"></td><td><pre>.text:0046A786                 cmp     eax, [edi+8]    ; 服务表加 8，服务表里的函数的最大个数。</pre></td></tr><tr><td data-num=\"65\"></td><td><pre>.text:0046A789                 jnb     _KiBBTUnexpectedRange ; 如果超出，说明越界，跳走</pre></td></tr><tr><td data-num=\"66\"></td><td><pre>.text:0046A78F                 cmp     ecx, 10h        ; 判断是否是 UI 表</pre></td></tr><tr><td data-num=\"67\"></td><td><pre>.text:0046A792                 jnz     short loc_46A7AF ; 如果不是 UI 表就跳走</pre></td></tr><tr><td data-num=\"68\"></td><td><pre>.text:0046A794                 mov     ecx, large fs:_KPCR.NtTib.Self ; 取自己</pre></td></tr><tr><td data-num=\"69\"></td><td><pre>.text:0046A79B                 xor     ebx, ebx</pre></td></tr><tr><td data-num=\"70\"></td><td><pre>ext:0046A79D                   ; _DWORD __stdcall loc_46A79D ()</pre></td></tr><tr><td data-num=\"71\"></td><td><pre>.text:0046A79D                   loc_46A79D:                             ; DATA XREF: KiPreprocessAccessViolation (x,x,x)+3D↑o</pre></td></tr><tr><td data-num=\"72\"></td><td><pre>.text:0046A79D 0B 99 70 0F 00 00                 or      ebx, [ecx+0F70h]</pre></td></tr><tr><td data-num=\"73\"></td><td><pre>.text:0046A7A3 74 0A                             jz      short loc_46A7AF</pre></td></tr><tr><td data-num=\"74\"></td><td><pre>.text:0046A7A5 52                                push    edx</pre></td></tr><tr><td data-num=\"75\"></td><td><pre>.text:0046A7A6 50                                push    eax</pre></td></tr><tr><td data-num=\"76\"></td><td><pre>.text:0046A7A7 FF 15 48 57 48 00                 call    ds:_KeGdiFlushUserBatch</pre></td></tr><tr><td data-num=\"77\"></td><td><pre>.text:0046A7AD 58                                pop     eax</pre></td></tr><tr><td data-num=\"78\"></td><td><pre>.text:0046A7AE 5A                                pop     edx</pre></td></tr><tr><td data-num=\"79\"></td><td><pre>.text:0046A7AF</pre></td></tr><tr><td data-num=\"80\"></td><td><pre>.text:0046A7AF                   loc_46A7AF:                             ; CODE XREF: .text:0046A792↑j</pre></td></tr><tr><td data-num=\"81\"></td><td><pre>.text:0046A7AF                                                           ; .text:0046A7A3↑j</pre></td></tr><tr><td data-num=\"82\"></td><td><pre>.text:0046A7AF 64 FF 05 38 06 00+                inc     large dword ptr fs:_KPCR.PrcbData.KeSystemCalls</pre></td></tr><tr><td data-num=\"83\"></td><td><pre>.text:0046A7AF 00</pre></td></tr><tr><td data-num=\"84\"></td><td><pre>.text:0046A7B6 8B F2                             mov     esi, edx        ; esi &#x3D; 指向 3 环函数传递的参数（在堆栈中）</pre></td></tr><tr><td data-num=\"85\"></td><td><pre>.text:0046A7B8 8B 5F 0C                          mov     ebx, [edi+0Ch]  ; SSDT 参数表地址</pre></td></tr><tr><td data-num=\"86\"></td><td><pre>.text:0046A7BB 33 C9                             xor     ecx, ecx</pre></td></tr><tr><td data-num=\"87\"></td><td><pre>.text:0046A7BD 8A 0C 18                          mov     cl, [eax+ebx]   ; 获得调用指定函数的参数表的参数长度</pre></td></tr><tr><td data-num=\"88\"></td><td><pre>.text:0046A7C0 8B 3F                             mov     edi, [edi]      ; 获取函数表</pre></td></tr><tr><td data-num=\"89\"></td><td><pre>.text:0046A7C2 8B 1C 87                          mov     ebx, [edi+eax*4] ; 获取函数</pre></td></tr><tr><td data-num=\"90\"></td><td><pre>.text:0046A7C5 2B E1                             sub     esp, ecx        ; 获取要 copy 的栈</pre></td></tr><tr><td data-num=\"91\"></td><td><pre>.text:0046A7C7 C1 E9 02                          shr     ecx, 2          ; 按照四个字节来 copy 所以 &gt;&gt;2</pre></td></tr><tr><td data-num=\"92\"></td><td><pre>.text:0046A7CA 8B FC                             mov     edi, esp</pre></td></tr><tr><td data-num=\"93\"></td><td><pre>.text:0046A7CC F6 45 72 02                       test    byte ptr [ebp+(_KTRAP_FRAME.EFlags+2)], 2 ; 判断 eflags 的第 1（从 0 开始计数）位是否为 1。KTRAP_FRAME 里保存的是 3 环的数据。</pre></td></tr><tr><td data-num=\"94\"></td><td><pre>.text:0046A7D0 75 06                             jnz     short loc_46A7D8 ; 判断地址是否是 3 环的。就是 0x7fffffff-- 火哥说的</pre></td></tr><tr><td data-num=\"95\"></td><td><pre>.text:0046A7D2 F6 45 6C 01                       test    byte ptr [ebp+_KTRAP_FRAME.SegCs], 1 ; 判断 CS 是不是用户环的</pre></td></tr><tr><td data-num=\"96\"></td><td><pre>.text:0046A7D6 74 0C                             jz      short loc_46A7E4 ; 如果是 0 环的，就不用判断地址是否合法了</pre></td></tr><tr><td data-num=\"97\"></td><td><pre>.text:0046A7D8</pre></td></tr><tr><td data-num=\"98\"></td><td><pre>.text:0046A7D8                   loc_46A7D8:                             ; CODE XREF: .text:0046A7D0↑j</pre></td></tr><tr><td data-num=\"99\"></td><td><pre>.text:0046A7D8 3B 35 34 B1 48 00                 cmp     esi, ds:_MmUserProbeAddress ; 判断地址是否是 3 环的。就是 0x7fffffff-- 火哥说的</pre></td></tr><tr><td data-num=\"100\"></td><td><pre>.text:0046A7DE 0F 83 A8 01 00 00                 jnb     loc_46A98C      ; 地址访问异常</pre></td></tr><tr><td data-num=\"101\"></td><td><pre>.text:0046A7E4</pre></td></tr><tr><td data-num=\"102\"></td><td><pre>.text:0046A7E4                   ; _DWORD __stdcall loc_46A7E4 ()</pre></td></tr><tr><td data-num=\"103\"></td><td><pre>.text:0046A7E4                   loc_46A7E4:                             ; CODE XREF: .text:0046A7D6↑j</pre></td></tr><tr><td data-num=\"104\"></td><td><pre>.text:0046A7E4                                                           ; DATA XREF: KiPreprocessAccessViolation (x,x,x):loc_42BD4B↑o</pre></td></tr><tr><td data-num=\"105\"></td><td><pre>.text:0046A7E4 F3 A5                             rep movsd               ; 拷贝参数</pre></td></tr><tr><td data-num=\"106\"></td><td><pre>.text:0046A7E6 FF D3                             call    ebx             ; 调用函数</pre></td></tr><tr><td data-num=\"107\"></td><td><pre>.text:0046A7E8</pre></td></tr><tr><td data-num=\"108\"></td><td><pre>.text:0046A7E8                   ; _DWORD __stdcall loc_46A7E8 ()</pre></td></tr><tr><td data-num=\"109\"></td><td><pre>.text:0046A7E8                   loc_46A7E8:                             ; CODE XREF: .text:0046A991↓j</pre></td></tr><tr><td data-num=\"110\"></td><td><pre>.text:0046A7E8                                                           ; DATA XREF: KiPreprocessAccessViolation (x,x,x)+59↑o</pre></td></tr><tr><td data-num=\"111\"></td><td><pre>.text:0046A7E8 8B E5                             mov     esp, ebp        ; esp ebp 又指向了 KTRAP_FRAME 结构体</pre></td></tr><tr><td data-num=\"112\"></td><td><pre>.text:0046A7EA</pre></td></tr><tr><td data-num=\"113\"></td><td><pre>.text:0046A7EA                   loc_46A7EA:                             ; CODE XREF: _KiBBTUnexpectedRange+38↑j</pre></td></tr><tr><td data-num=\"114\"></td><td><pre>.text:0046A7EA                                                           ; _KiBBTUnexpectedRange+43↑j</pre></td></tr><tr><td data-num=\"115\"></td><td><pre>.text:0046A7EA 64 8B 0D 24 01 00+                mov     ecx, large fs:_KPCR.PrcbData.CurrentThread ; ecx &#x3D; 当前 CPU 所执行线程的_ETHREAD 结构体</pre></td></tr><tr><td data-num=\"116\"></td><td><pre>.text:0046A7EA 00</pre></td></tr><tr><td data-num=\"117\"></td><td><pre>.text:0046A7F1 8B 55 3C                          mov     edx, [ebp+_KTRAP_FRAME._Edx] ; 取三环的 esp</pre></td></tr><tr><td data-num=\"118\"></td><td><pre>.text:0046A7F4 89 91 34 01 00 00                 mov     [ecx+_KTHREAD.TrapFrame], edx</pre></td></tr><tr><td data-num=\"119\"></td><td><pre>.text:0046A7FA</pre></td></tr><tr><td data-num=\"120\"></td><td><pre>.text:0046A7FA                   loc_46A7FA:                             ; CODE XREF: KiCallUserMode (x,x)+EC↑j</pre></td></tr><tr><td data-num=\"121\"></td><td><pre>.text:0046A7FA                                                           ; NtContinue (x,x)+43↓j ...</pre></td></tr><tr><td data-num=\"122\"></td><td><pre>.text:0046A7FA FA                                cli                     ; 结束中断</pre></td></tr><tr><td data-num=\"123\"></td><td><pre>.text:0046A7FB F7 45 70 00 00 02+                test    [ebp+_KTRAP_FRAME.EFlags], 20000h ; 判断是不是虚拟 8086 模式。eflags 中的 VM 位（第 17 位）。</pre></td></tr><tr><td data-num=\"124\"></td><td><pre>.text:0046A7FB 00</pre></td></tr><tr><td data-num=\"125\"></td><td><pre>.text:0046A802 75 06                             jnz     short loc_46A80A ; ebx &#x3D; 当前 CPU 所执行线程的_ETHREAD 结构体</pre></td></tr><tr><td data-num=\"126\"></td><td><pre>.text:0046A804 F6 45 6C 01                       test    byte ptr [ebp+_KTRAP_FRAME.SegCs], 1 ; 判断是否是用户态</pre></td></tr><tr><td data-num=\"127\"></td><td><pre>.text:0046A808 74 56                             jz      short loc_46A860 ; 取出异常链</pre></td></tr><tr><td data-num=\"128\"></td><td><pre>.text:0046A80A</pre></td></tr><tr><td data-num=\"129\"></td><td><pre>.text:0046A80A                   loc_46A80A:                             ; CODE XREF: .text:0046A802↑j</pre></td></tr><tr><td data-num=\"130\"></td><td><pre>.text:0046A80A                                                           ; .text:0046A85E↓j</pre></td></tr><tr><td data-num=\"131\"></td><td><pre>.text:0046A80A 64 8B 1D 24 01 00+                mov     ebx, large fs:_KPCR.PrcbData.CurrentThread ; ebx &#x3D; 当前 CPU 所执行线程的_ETHREAD 结构体</pre></td></tr><tr><td data-num=\"132\"></td><td><pre>.text:0046A80A 00</pre></td></tr><tr><td data-num=\"133\"></td><td><pre>.text:0046A811 C6 43 2E 00                       mov     [ebx+_ETHREAD.Tcb.Alerted], 0 ; APC 相关的了，还没学，先跳过。</pre></td></tr><tr><td data-num=\"134\"></td><td><pre>.text:0046A815 80 7B 4A 00                       cmp     [ebx+_ETHREAD.Tcb.ApcState.UserApcPending], 0</pre></td></tr><tr><td data-num=\"135\"></td><td><pre>.text:0046A819 74 45                             jz      short loc_46A860 ; 取出异常链</pre></td></tr><tr><td data-num=\"136\"></td><td><pre>.text:0046A81B 8B DD                             mov     ebx, ebp</pre></td></tr><tr><td data-num=\"137\"></td><td><pre>.text:0046A81D 89 43 44                          mov     [ebx+44h], eax</pre></td></tr><tr><td data-num=\"138\"></td><td><pre>.text:0046A820 C7 43 50 3B 00 00+                mov     [ebx+_KTRAP_FRAME.SegFs], 3Bh ; &#39;;&#39;</pre></td></tr><tr><td data-num=\"139\"></td><td><pre>.text:0046A820 00</pre></td></tr><tr><td data-num=\"140\"></td><td><pre>.text:0046A827 C7 43 38 23 00 00+                mov     [ebx+_KTRAP_FRAME.SegDs], 23h ; &#39;#&#39;</pre></td></tr><tr><td data-num=\"141\"></td><td><pre>.text:0046A827 00</pre></td></tr><tr><td data-num=\"142\"></td><td><pre>.text:0046A82E C7 43 34 23 00 00+                mov     [ebx+_KTRAP_FRAME.SegEs], 23h ; &#39;#&#39;</pre></td></tr><tr><td data-num=\"143\"></td><td><pre>.text:0046A82E 00</pre></td></tr><tr><td data-num=\"144\"></td><td><pre>.text:0046A835 C7 43 30 00 00 00+                mov     [ebx+_KTRAP_FRAME.SegGs], 0</pre></td></tr><tr><td data-num=\"145\"></td><td><pre>.text:0046A835 00</pre></td></tr><tr><td data-num=\"146\"></td><td><pre>.text:0046A83C B9 01 00 00 00                    mov     ecx, 1</pre></td></tr><tr><td data-num=\"147\"></td><td><pre>.text:0046A841 FF 15 2C 10 40 00                 call    ds:__imp_@KfRaiseIrql@4 ; KfRaiseIrql (x)</pre></td></tr><tr><td data-num=\"148\"></td><td><pre>.text:0046A847 50                                push    eax</pre></td></tr><tr><td data-num=\"149\"></td><td><pre>.text:0046A848 FB                                sti</pre></td></tr><tr><td data-num=\"150\"></td><td><pre>.text:0046A849 53                                push    ebx</pre></td></tr><tr><td data-num=\"151\"></td><td><pre>.text:0046A84A 6A 00                             push    0</pre></td></tr><tr><td data-num=\"152\"></td><td><pre>.text:0046A84C 6A 01                             push    1</pre></td></tr><tr><td data-num=\"153\"></td><td><pre>.text:0046A84E E8 99 DF FB FF                    call    _KiDeliverApc@12 ; KiDeliverApc (x,x,x)</pre></td></tr><tr><td data-num=\"154\"></td><td><pre>.text:0046A853 59                                pop     ecx</pre></td></tr><tr><td data-num=\"155\"></td><td><pre>.text:0046A854 FF 15 30 10 40 00                 call    ds:__imp_@KfLowerIrql@4 ; KfLowerIrql (x)</pre></td></tr><tr><td data-num=\"156\"></td><td><pre>.text:0046A85A 8B 43 44                          mov     eax, [ebx+44h]</pre></td></tr><tr><td data-num=\"157\"></td><td><pre>.text:0046A85D FA                                cli</pre></td></tr><tr><td data-num=\"158\"></td><td><pre>.text:0046A85E EB AA                             jmp     short loc_46A80A ; ebx &#x3D; 当前 CPU 所执行线程的_ETHREAD 结构体</pre></td></tr><tr><td data-num=\"159\"></td><td><pre>.text:0046A860                   ; ---------------------------------------------------------------------------</pre></td></tr><tr><td data-num=\"160\"></td><td><pre>.text:0046A860</pre></td></tr><tr><td data-num=\"161\"></td><td><pre>.text:0046A860                   loc_46A860:                             ; CODE XREF: .text:0046A808↑j</pre></td></tr><tr><td data-num=\"162\"></td><td><pre>.text:0046A860                                                           ; .text:0046A819↑j</pre></td></tr><tr><td data-num=\"163\"></td><td><pre>.text:0046A860 8B 54 24 4C                       mov     edx, [esp+_KTRAP_FRAME.ExceptionList] ; 取出异常链</pre></td></tr><tr><td data-num=\"164\"></td><td><pre>.text:0046A864 64 8B 1D 50 00 00+                mov     ebx, large fs:_KPCR.DebugActive ; 取出调试状态</pre></td></tr><tr><td data-num=\"165\"></td><td><pre>.text:0046A864 00</pre></td></tr><tr><td data-num=\"166\"></td><td><pre>.text:0046A86B 64 89 15 00 00 00+                mov     large fs:_KPCR, edx ; 把 KTRAP_FRAME 结构中的 ExceptionList 放在了 KPCR 结构成员 ExceptionList。要还原了，恢复数据。</pre></td></tr><tr><td data-num=\"167\"></td><td><pre>.text:0046A86B 00</pre></td></tr><tr><td data-num=\"168\"></td><td><pre>.text:0046A872 8B 4C 24 48                       mov     ecx, [esp+_KTRAP_FRAME.PreviousPreviousMode]</pre></td></tr><tr><td data-num=\"169\"></td><td><pre>.text:0046A876 64 8B 35 24 01 00+                mov     esi, large fs:_KPCR.PrcbData.CurrentThread</pre></td></tr><tr><td data-num=\"170\"></td><td><pre>.text:0046A876 00</pre></td></tr><tr><td data-num=\"171\"></td><td><pre>.text:0046A87D 88 8E 40 01 00 00                 mov     [esi+_ETHREAD.Tcb.PreviousMode], cl ; 把 KTRAP_FRAME 结构中的 PreviousPreviousMode 放在了 KPCR 的结构成员 PreviousMode。把先前模式还原</pre></td></tr><tr><td data-num=\"172\"></td><td><pre>.text:0046A883 F7 C3 FF 00 00 00                 test    ebx, 0FFh       ; 再次判断调试状态</pre></td></tr><tr><td data-num=\"173\"></td><td><pre>.text:0046A889 75 79                             jnz     short loc_46A904 ; 若是调试状态还要，还原一些调试相关的寄存器</pre></td></tr><tr><td data-num=\"174\"></td><td><pre>.text:0046A88B</pre></td></tr><tr><td data-num=\"175\"></td><td><pre>.text:0046A88B                   loc_46A88B:                             ; CODE XREF: .text:0046A914↓j</pre></td></tr><tr><td data-num=\"176\"></td><td><pre>.text:0046A88B                                                           ; .text:0046A943↓j</pre></td></tr><tr><td data-num=\"177\"></td><td><pre>.text:0046A88B F7 44 24 70 00 00+                test    [esp+_KTRAP_FRAME.EFlags], 20000h ; 判读是否是虚拟 8086 模式</pre></td></tr><tr><td data-num=\"178\"></td><td><pre>.text:0046A88B 02 00</pre></td></tr><tr><td data-num=\"179\"></td><td><pre>.text:0046A893 0F 85 FF 08 00 00                 jnz     loc_46B198      ; 如果是的话，走虚拟 8086 的模式退出</pre></td></tr><tr><td data-num=\"180\"></td><td><pre>.text:0046A899 66 F7 44 24 6C F9+                test    word ptr [esp+_KTRAP_FRAME.SegCs], 0FFF9h</pre></td></tr><tr><td data-num=\"181\"></td><td><pre>.text:0046A899 FF</pre></td></tr><tr><td data-num=\"182\"></td><td><pre>.text:0046A8A0 0F 84 B4 00 00 00                 jz      loc_46A95A</pre></td></tr><tr><td data-num=\"183\"></td><td><pre>.text:0046A8A6 66 83 7C 24 6C 1B                 cmp     word ptr [esp+_KTRAP_FRAME.SegCs], 1Bh</pre></td></tr><tr><td data-num=\"184\"></td><td><pre>.text:0046A8AC 66 0F BA 64 24 6C+                bt      word ptr [esp+_KTRAP_FRAME.SegCs], 0</pre></td></tr><tr><td data-num=\"185\"></td><td><pre>.text:0046A8AC 00</pre></td></tr><tr><td data-num=\"186\"></td><td><pre>.text:0046A8B3 F5                                cmc</pre></td></tr><tr><td data-num=\"187\"></td><td><pre>.text:0046A8B4 0F 87 8E 00 00 00                 ja      loc_46A948</pre></td></tr><tr><td data-num=\"188\"></td><td><pre>.text:0046A8BA 66 83 7D 6C 08                    cmp     word ptr [ebp+_KTRAP_FRAME.SegCs], 8</pre></td></tr><tr><td data-num=\"189\"></td><td><pre>.text:0046A8BF 74 05                             jz      short loc_46A8C6</pre></td></tr><tr><td data-num=\"190\"></td><td><pre>.text:0046A8C1</pre></td></tr><tr><td data-num=\"191\"></td><td><pre>.text:0046A8C1                   loc_46A8C1:                             ; CODE XREF: .text:0046A955↓j</pre></td></tr><tr><td data-num=\"192\"></td><td><pre>.text:0046A8C1 8D 65 50                          lea     esp, [ebp+_KTRAP_FRAME.SegFs]</pre></td></tr><tr><td data-num=\"193\"></td><td><pre>.text:0046A8C4 0F A1                             pop     fs              ; 还原 fs</pre></td></tr><tr><td data-num=\"194\"></td><td><pre>.text:0046A8C6                                   assume fs:nothing</pre></td></tr><tr><td data-num=\"195\"></td><td><pre>.text:0046A8C6</pre></td></tr><tr><td data-num=\"196\"></td><td><pre>.text:0046A8C6                   loc_46A8C6:                             ; CODE XREF: .text:0046A8BF↑j</pre></td></tr><tr><td data-num=\"197\"></td><td><pre>.text:0046A8C6 8D 65 54                          lea     esp, [ebp+_KTRAP_FRAME._Edi]</pre></td></tr><tr><td data-num=\"198\"></td><td><pre>.text:0046A8C9 5F                                pop     edi             ; 还原 edi</pre></td></tr><tr><td data-num=\"199\"></td><td><pre>.text:0046A8CA 5E                                pop     esi</pre></td></tr><tr><td data-num=\"200\"></td><td><pre>.text:0046A8CB 5B                                pop     ebx</pre></td></tr><tr><td data-num=\"201\"></td><td><pre>.text:0046A8CC 5D                                pop     ebp             ; 还原 ebp, 此时 esp 指向 ErrorCode</pre></td></tr><tr><td data-num=\"202\"></td><td><pre>.text:0046A8CD 66 81 7C 24 08 80+                cmp     word ptr [esp+8], 80h ; &#39;€&#39; ; 此时 esp+8 指向的是 SegCs</pre></td></tr><tr><td data-num=\"203\"></td><td><pre>.text:0046A8CD 00</pre></td></tr><tr><td data-num=\"204\"></td><td><pre>.text:0046A8D4 0F 87 DA 08 00 00                 ja      loc_46B1B4</pre></td></tr><tr><td data-num=\"205\"></td><td><pre>.text:0046A8DA 83 C4 04                          add     esp, 4          ; 此时 esp 指向 Eip,Eip 中存储的是 KUSER_SHARED_DATA 中的 SystemCallReturn</pre></td></tr><tr><td data-num=\"206\"></td><td><pre>.text:0046A8DD F7 44 24 04 01 00+                test    dword ptr [esp+4], 1 ; esp+4 指向 SegCs</pre></td></tr><tr><td data-num=\"207\"></td><td><pre>.text:0046A8DD 00 00</pre></td></tr><tr><td data-num=\"208\"></td><td><pre>.text:0046A8E5</pre></td></tr><tr><td data-num=\"209\"></td><td><pre>.text:0046A8E5                   loc_46A8E5:                             ; DATA XREF: KiDisableFastSyscallReturn ()+9↑w</pre></td></tr><tr><td data-num=\"210\"></td><td><pre>.text:0046A8E5                                                           ; KiEnableFastSyscallReturn ():loc_4278B0↑r ...</pre></td></tr><tr><td data-num=\"211\"></td><td><pre>.text:0046A8E5 75 05                             jnz     short locret_46A8EC</pre></td></tr><tr><td data-num=\"212\"></td><td><pre>.text:0046A8E7 5A                                pop     edx             ; edx &#x3D; SystemCallReturn</pre></td></tr><tr><td data-num=\"213\"></td><td><pre>.text:0046A8E8 59                                pop     ecx             ; ecx &#x3D; SegCs</pre></td></tr><tr><td data-num=\"214\"></td><td><pre>.text:0046A8E9 9D                                popf                    ; 还原 flags 寄存器</pre></td></tr><tr><td data-num=\"215\"></td><td><pre>.text:0046A8EA FF E2                             jmp     edx</pre></td></tr></table></figure><p>在 windbg 中对 KiFastCallEntry 下了断点后 一步一步跟了一下：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kd&gt; bp KiFastCallEntry</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>kd&gt; g</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Breakpoint 0 hit</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>nt!KiFastCallEntry:</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>805426e0 b923000000      mov     ecx,23h</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>nt!KiFastCallEntry+0x5:</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>805426e5 6a30            push    30h</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>nt!KiFastCallEntry+0x7:</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>805426e7 0fa1            pop     fs</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>nt!KiFastCallEntry+0x9:</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>805426e9 8ed9            mov     ds,cx</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>nt!KiFastCallEntry+0xb:</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>805426eb 8ec1            mov     es,cx</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>nt!KiFastCallEntry+0xd:</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>805426ed 648b0d40000000  mov     ecx,dword ptr fs:[40h]</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>nt!KiFastCallEntry+0x14:</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>805426f4 8b6104          mov     esp,dword ptr [ecx+4]</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>nt!KiFastCallEntry+0x17:</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>805426f7 6a23            push    23h</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>nt!KiFastCallEntry+0x19:</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>805426f9 52              push    edx</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>nt!KiFastCallEntry+0x1a:</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>805426fa 9c              pushfd</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>nt!KiFastCallEntry+0x1b:</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>805426fb 6a02            push    2</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>nt!KiFastCallEntry+0x1d:</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>805426fd 83c208          add     edx,8</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>nt!KiFastCallEntry+0x20:</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>80542700 9d              popfd</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>nt!KiFastCallEntry+0x21:</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>80542701 804c240102      or      byte ptr [esp+1],2</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>nt!KiFastCallEntry+0x26:</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>80542706 6a1b            push    1Bh</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>nt!KiFastCallEntry+0x28:</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>80542708 ff350403dfff    push    dword ptr ds:[0FFDF0304h]</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>nt!KiFastCallEntry+0x2e:</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>8054270e 6a00            push    0</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>nt!KiFastCallEntry+0x30:</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>80542710 55              push    ebp</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>nt!KiFastCallEntry+0x31:</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>80542711 53              push    ebx</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>nt!KiFastCallEntry+0x32:</pre></td></tr><tr><td data-num=\"62\"></td><td><pre>80542712 56              push    esi</pre></td></tr><tr><td data-num=\"63\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"64\"></td><td><pre>nt!KiFastCallEntry+0x33:</pre></td></tr><tr><td data-num=\"65\"></td><td><pre>80542713 57              push    edi</pre></td></tr><tr><td data-num=\"66\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"67\"></td><td><pre>nt!KiFastCallEntry+0x34:</pre></td></tr><tr><td data-num=\"68\"></td><td><pre>80542714 648b1d1c000000  mov     ebx,dword ptr fs:[1Ch]</pre></td></tr><tr><td data-num=\"69\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"70\"></td><td><pre>nt!KiFastCallEntry+0x3b:</pre></td></tr><tr><td data-num=\"71\"></td><td><pre>8054271b 6a3b            push    3Bh</pre></td></tr><tr><td data-num=\"72\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"73\"></td><td><pre>nt!KiFastCallEntry+0x3d:</pre></td></tr><tr><td data-num=\"74\"></td><td><pre>8054271d 8bb324010000    mov     esi,dword ptr [ebx+124h]</pre></td></tr><tr><td data-num=\"75\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"76\"></td><td><pre>nt!KiFastCallEntry+0x43:</pre></td></tr><tr><td data-num=\"77\"></td><td><pre>80542723 ff33            push    dword ptr [ebx]</pre></td></tr><tr><td data-num=\"78\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"79\"></td><td><pre>nt!KiFastCallEntry+0x45:</pre></td></tr><tr><td data-num=\"80\"></td><td><pre>80542725 c703ffffffff    mov     dword ptr [ebx],0FFFFFFFFh</pre></td></tr><tr><td data-num=\"81\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"82\"></td><td><pre>nt!KiFastCallEntry+0x4b:</pre></td></tr><tr><td data-num=\"83\"></td><td><pre>8054272b 8b6e18          mov     ebp,dword ptr [esi+18h]</pre></td></tr><tr><td data-num=\"84\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"85\"></td><td><pre>nt!KiFastCallEntry+0x4e:</pre></td></tr><tr><td data-num=\"86\"></td><td><pre>8054272e 6a01            push    1</pre></td></tr><tr><td data-num=\"87\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"88\"></td><td><pre>nt!KiFastCallEntry+0x50:</pre></td></tr><tr><td data-num=\"89\"></td><td><pre>80542730 83ec48          sub     esp,48h</pre></td></tr><tr><td data-num=\"90\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"91\"></td><td><pre>nt!KiFastCallEntry+0x53:</pre></td></tr><tr><td data-num=\"92\"></td><td><pre>80542733 81ed9c020000    sub     ebp,29Ch</pre></td></tr><tr><td data-num=\"93\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"94\"></td><td><pre>nt!KiFastCallEntry+0x59:</pre></td></tr><tr><td data-num=\"95\"></td><td><pre>80542739 c6864001000001  mov     byte ptr [esi+140h],1</pre></td></tr><tr><td data-num=\"96\"></td><td><pre>kd&gt; r</pre></td></tr><tr><td data-num=\"97\"></td><td><pre>eax&#x3D;00000077 ebx&#x3D;ffdff000 ecx&#x3D;80042000 edx&#x3D;0015f938 esi&#x3D;8a13eda0 edi&#x3D;0015fc70</pre></td></tr><tr><td data-num=\"98\"></td><td><pre>eip&#x3D;80542739 esp&#x3D;b9cc8d64 ebp&#x3D;b9cc8d64 iopl&#x3D;0         nv up di ng nz ac po nc</pre></td></tr><tr><td data-num=\"99\"></td><td><pre>cs&#x3D;0008  ss&#x3D;0010  ds&#x3D;0023  es&#x3D;0023  fs&#x3D;0030  gs&#x3D;0000             efl&#x3D;00000092</pre></td></tr><tr><td data-num=\"100\"></td><td><pre>nt!KiFastCallEntry+0x59:</pre></td></tr><tr><td data-num=\"101\"></td><td><pre>80542739 c6864001000001  mov     byte ptr [esi+140h],1      ds:0023:8a13eee0&#x3D;01</pre></td></tr><tr><td data-num=\"102\"></td><td><pre>kd&gt; dt _KTRAP_FRAME b9cc8d64</pre></td></tr><tr><td data-num=\"103\"></td><td><pre>ntdll!_KTRAP_FRAME</pre></td></tr><tr><td data-num=\"104\"></td><td><pre>   +0x000 DbgEbp           : 0</pre></td></tr><tr><td data-num=\"105\"></td><td><pre>   +0x004 DbgEip           : 0</pre></td></tr><tr><td data-num=\"106\"></td><td><pre>   +0x008 DbgArgMark       : 0x23</pre></td></tr><tr><td data-num=\"107\"></td><td><pre>   +0x00c DbgArgPointer    : 0x23</pre></td></tr><tr><td data-num=\"108\"></td><td><pre>   +0x010 TempSegCs        : 0x15f938</pre></td></tr><tr><td data-num=\"109\"></td><td><pre>   +0x014 TempEsp          : 0x80042000</pre></td></tr><tr><td data-num=\"110\"></td><td><pre>   +0x018 Dr0              : 0x77</pre></td></tr><tr><td data-num=\"111\"></td><td><pre>   +0x01c Dr1              : 0x77</pre></td></tr><tr><td data-num=\"112\"></td><td><pre>   +0x020 Dr2              : 0xffffffff</pre></td></tr><tr><td data-num=\"113\"></td><td><pre>   +0x024 Dr3              : 0x30</pre></td></tr><tr><td data-num=\"114\"></td><td><pre>   +0x028 Dr6              : 0x15fc70</pre></td></tr><tr><td data-num=\"115\"></td><td><pre>   +0x02c Dr7              : 0x8a13eda0</pre></td></tr><tr><td data-num=\"116\"></td><td><pre>   +0x030 SegGs            : 0xffdff000</pre></td></tr><tr><td data-num=\"117\"></td><td><pre>   +0x034 SegEs            : 0xb9cc9000</pre></td></tr><tr><td data-num=\"118\"></td><td><pre>   +0x038 SegDs            : 0</pre></td></tr><tr><td data-num=\"119\"></td><td><pre>   +0x03c Edx              : 0x80542730</pre></td></tr><tr><td data-num=\"120\"></td><td><pre>   +0x040 Ecx              : 8</pre></td></tr><tr><td data-num=\"121\"></td><td><pre>   +0x044 Eax              : 0x102</pre></td></tr><tr><td data-num=\"122\"></td><td><pre>   +0x048 PreviousPreviousMode : 1</pre></td></tr><tr><td data-num=\"123\"></td><td><pre>   +0x04c ExceptionList    : 0xffffffff _EXCEPTION_REGISTRATION_RECORD</pre></td></tr><tr><td data-num=\"124\"></td><td><pre>   +0x050 SegFs            : 0x3b</pre></td></tr><tr><td data-num=\"125\"></td><td><pre>   +0x054 Edi              : 0x15fc70</pre></td></tr><tr><td data-num=\"126\"></td><td><pre>   +0x058 Esi              : 0x1106a0</pre></td></tr><tr><td data-num=\"127\"></td><td><pre>   +0x05c Ebx              : 0</pre></td></tr><tr><td data-num=\"128\"></td><td><pre>   +0x060 Ebp              : 0x15fc40</pre></td></tr><tr><td data-num=\"129\"></td><td><pre>   +0x064 ErrCode          : 0</pre></td></tr><tr><td data-num=\"130\"></td><td><pre>   +0x068 Eip              : 0x7c92e4f4</pre></td></tr><tr><td data-num=\"131\"></td><td><pre>   +0x06c SegCs            : 0x1b</pre></td></tr><tr><td data-num=\"132\"></td><td><pre>   +0x070 EFlags           : 0x246</pre></td></tr><tr><td data-num=\"133\"></td><td><pre>   +0x074 HardwareEsp      : 0x15f930</pre></td></tr><tr><td data-num=\"134\"></td><td><pre>   +0x078 HardwareSegSs    : 0x23</pre></td></tr><tr><td data-num=\"135\"></td><td><pre>   +0x07c V86Es            : 0</pre></td></tr><tr><td data-num=\"136\"></td><td><pre>   +0x080 V86Ds            : 0</pre></td></tr><tr><td data-num=\"137\"></td><td><pre>   +0x084 V86Fs            : 0</pre></td></tr><tr><td data-num=\"138\"></td><td><pre>   +0x088 V86Gs            : 0</pre></td></tr><tr><td data-num=\"139\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"140\"></td><td><pre>nt!KiFastCallEntry+0x60:</pre></td></tr><tr><td data-num=\"141\"></td><td><pre>80542740 3bec            cmp     ebp,esp</pre></td></tr><tr><td data-num=\"142\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"143\"></td><td><pre>nt!KiFastCallEntry+0x62:</pre></td></tr><tr><td data-num=\"144\"></td><td><pre>80542742 758d            jne     nt!KiFastCallEntry2+0x49 (805426d1)</pre></td></tr><tr><td data-num=\"145\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"146\"></td><td><pre>nt!KiFastCallEntry+0x64:</pre></td></tr><tr><td data-num=\"147\"></td><td><pre>80542744 83652c00        and     dword ptr [ebp+2Ch],0</pre></td></tr><tr><td data-num=\"148\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"149\"></td><td><pre>nt!KiFastCallEntry+0x68:</pre></td></tr><tr><td data-num=\"150\"></td><td><pre>80542748 f6462cff        test    byte ptr [esi+2Ch],0FFh</pre></td></tr><tr><td data-num=\"151\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"152\"></td><td><pre>nt!KiFastCallEntry+0x6c:</pre></td></tr><tr><td data-num=\"153\"></td><td><pre>8054274c 89ae34010000    mov     dword ptr [esi+134h],ebp</pre></td></tr><tr><td data-num=\"154\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"155\"></td><td><pre>nt!KiFastCallEntry+0x72:</pre></td></tr><tr><td data-num=\"156\"></td><td><pre>80542752 0f8538feffff    jne     nt!Dr_FastCallDrSave (80542590)</pre></td></tr><tr><td data-num=\"157\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"158\"></td><td><pre>nt!KiFastCallEntry+0x78:</pre></td></tr><tr><td data-num=\"159\"></td><td><pre>80542758 8b5d60          mov     ebx,dword ptr [ebp+60h]</pre></td></tr><tr><td data-num=\"160\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"161\"></td><td><pre>nt!KiFastCallEntry+0x7b:</pre></td></tr><tr><td data-num=\"162\"></td><td><pre>8054275b 8b7d68          mov     edi,dword ptr [ebp+68h]</pre></td></tr><tr><td data-num=\"163\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"164\"></td><td><pre>nt!KiFastCallEntry+0x7e:</pre></td></tr><tr><td data-num=\"165\"></td><td><pre>8054275e 89550c          mov     dword ptr [ebp+0Ch],edx</pre></td></tr><tr><td data-num=\"166\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"167\"></td><td><pre>nt!KiFastCallEntry+0x81:</pre></td></tr><tr><td data-num=\"168\"></td><td><pre>80542761 c74508000ddbba  mov     dword ptr [ebp+8],0BADB0D00h</pre></td></tr><tr><td data-num=\"169\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"170\"></td><td><pre>nt!KiFastCallEntry+0x88:</pre></td></tr><tr><td data-num=\"171\"></td><td><pre>80542768 895d00          mov     dword ptr [ebp],ebx</pre></td></tr><tr><td data-num=\"172\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"173\"></td><td><pre>nt!KiFastCallEntry+0x8b:</pre></td></tr><tr><td data-num=\"174\"></td><td><pre>8054276b 897d04          mov     dword ptr [ebp+4],edi</pre></td></tr><tr><td data-num=\"175\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"176\"></td><td><pre>nt!KiFastCallEntry+0x8e:</pre></td></tr><tr><td data-num=\"177\"></td><td><pre>8054276e fb              sti</pre></td></tr><tr><td data-num=\"178\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"179\"></td><td><pre>nt!KiFastCallEntry+0x8f:</pre></td></tr><tr><td data-num=\"180\"></td><td><pre>8054276f 8bf8            mov     edi,eax</pre></td></tr><tr><td data-num=\"181\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"182\"></td><td><pre>nt!KiFastCallEntry+0x91:</pre></td></tr><tr><td data-num=\"183\"></td><td><pre>80542771 c1ef08          shr     edi,8</pre></td></tr><tr><td data-num=\"184\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"185\"></td><td><pre>nt!KiFastCallEntry+0x94:</pre></td></tr><tr><td data-num=\"186\"></td><td><pre>80542774 83e730          and     edi,30h</pre></td></tr><tr><td data-num=\"187\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"188\"></td><td><pre>nt!KiFastCallEntry+0x97:</pre></td></tr><tr><td data-num=\"189\"></td><td><pre>80542777 8bcf            mov     ecx,edi</pre></td></tr><tr><td data-num=\"190\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"191\"></td><td><pre>nt!KiFastCallEntry+0x99:</pre></td></tr><tr><td data-num=\"192\"></td><td><pre>80542779 03bee0000000    add     edi,dword ptr [esi+0E0h]</pre></td></tr><tr><td data-num=\"193\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"194\"></td><td><pre>nt!KiFastCallEntry+0x9f:</pre></td></tr><tr><td data-num=\"195\"></td><td><pre>8054277f 8bd8            mov     ebx,eax</pre></td></tr><tr><td data-num=\"196\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"197\"></td><td><pre>nt!KiFastCallEntry+0xa1:</pre></td></tr><tr><td data-num=\"198\"></td><td><pre>80542781 25ff0f0000      and     eax,0FFFh</pre></td></tr><tr><td data-num=\"199\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"200\"></td><td><pre>nt!KiFastCallEntry+0xa6:</pre></td></tr><tr><td data-num=\"201\"></td><td><pre>80542786 3b4708          cmp     eax,dword ptr [edi+8]</pre></td></tr><tr><td data-num=\"202\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"203\"></td><td><pre>nt!KiFastCallEntry+0xa9:</pre></td></tr><tr><td data-num=\"204\"></td><td><pre>80542789 0f8333fdffff    jae     nt!KiBBTUnexpectedRange (805424c2)</pre></td></tr><tr><td data-num=\"205\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"206\"></td><td><pre>nt!KiFastCallEntry+0xaf:</pre></td></tr><tr><td data-num=\"207\"></td><td><pre>8054278f 83f910          cmp     ecx,10h</pre></td></tr><tr><td data-num=\"208\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"209\"></td><td><pre>nt!KiFastCallEntry+0xb2:</pre></td></tr><tr><td data-num=\"210\"></td><td><pre>80542792 751b            jne     nt!KiSystemServiceAccessTeb+0x12 (805427af)</pre></td></tr><tr><td data-num=\"211\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"212\"></td><td><pre>nt!KiSystemServiceAccessTeb+0x12:</pre></td></tr><tr><td data-num=\"213\"></td><td><pre>805427af 64ff0538060000  inc     dword ptr fs:[638h]</pre></td></tr><tr><td data-num=\"214\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"215\"></td><td><pre>nt!KiSystemServiceAccessTeb+0x19:</pre></td></tr><tr><td data-num=\"216\"></td><td><pre>805427b6 8bf2            mov     esi,edx</pre></td></tr><tr><td data-num=\"217\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"218\"></td><td><pre>nt!KiSystemServiceAccessTeb+0x1b:</pre></td></tr><tr><td data-num=\"219\"></td><td><pre>805427b8 8b5f0c          mov     ebx,dword ptr [edi+0Ch]</pre></td></tr><tr><td data-num=\"220\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"221\"></td><td><pre>nt!KiSystemServiceAccessTeb+0x1e:</pre></td></tr><tr><td data-num=\"222\"></td><td><pre>805427bb 33c9            xor     ecx,ecx</pre></td></tr><tr><td data-num=\"223\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"224\"></td><td><pre>nt!KiSystemServiceAccessTeb+0x20:</pre></td></tr><tr><td data-num=\"225\"></td><td><pre>805427bd 8a0c18          mov     cl,byte ptr [eax+ebx]</pre></td></tr><tr><td data-num=\"226\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"227\"></td><td><pre>nt!KiSystemServiceAccessTeb+0x23:</pre></td></tr><tr><td data-num=\"228\"></td><td><pre>805427c0 8b3f            mov     edi,dword ptr [edi]</pre></td></tr><tr><td data-num=\"229\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"230\"></td><td><pre>nt!KiSystemServiceAccessTeb+0x25:</pre></td></tr><tr><td data-num=\"231\"></td><td><pre>805427c2 8b1c87          mov     ebx,dword ptr [edi+eax*4]</pre></td></tr><tr><td data-num=\"232\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"233\"></td><td><pre>nt!KiSystemServiceAccessTeb+0x28:</pre></td></tr><tr><td data-num=\"234\"></td><td><pre>805427c5 2be1            sub     esp,ecx</pre></td></tr><tr><td data-num=\"235\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"236\"></td><td><pre>nt!KiSystemServiceAccessTeb+0x2a:</pre></td></tr><tr><td data-num=\"237\"></td><td><pre>805427c7 c1e902          shr     ecx,2</pre></td></tr><tr><td data-num=\"238\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"239\"></td><td><pre>nt!KiSystemServiceAccessTeb+0x2d:</pre></td></tr><tr><td data-num=\"240\"></td><td><pre>805427ca 8bfc            mov     edi,esp</pre></td></tr><tr><td data-num=\"241\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"242\"></td><td><pre>nt!KiSystemServiceAccessTeb+0x2f:</pre></td></tr><tr><td data-num=\"243\"></td><td><pre>805427cc f6457202        test    byte ptr [ebp+72h],2</pre></td></tr><tr><td data-num=\"244\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"245\"></td><td><pre>nt!KiSystemServiceAccessTeb+0x33:</pre></td></tr><tr><td data-num=\"246\"></td><td><pre>805427d0 7506            jne     nt!KiSystemServiceAccessTeb+0x3b (805427d8)</pre></td></tr><tr><td data-num=\"247\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"248\"></td><td><pre>nt!KiSystemServiceAccessTeb+0x35:</pre></td></tr><tr><td data-num=\"249\"></td><td><pre>805427d2 f6456c01        test    byte ptr [ebp+6Ch],1</pre></td></tr><tr><td data-num=\"250\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"251\"></td><td><pre>nt!KiSystemServiceAccessTeb+0x39:</pre></td></tr><tr><td data-num=\"252\"></td><td><pre>805427d6 740c            je      nt!KiSystemServiceCopyArguments (805427e4)</pre></td></tr><tr><td data-num=\"253\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"254\"></td><td><pre>nt!KiSystemServiceAccessTeb+0x3b:</pre></td></tr><tr><td data-num=\"255\"></td><td><pre>805427d8 3b3534315680    cmp     esi,dword ptr [nt!MmUserProbeAddress (80563134)]</pre></td></tr><tr><td data-num=\"256\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"257\"></td><td><pre>nt!KiSystemServiceAccessTeb+0x41:</pre></td></tr><tr><td data-num=\"258\"></td><td><pre>805427de 0f83a8010000    jae     nt!KiSystemCallExit2+0x9f (8054298c)</pre></td></tr><tr><td data-num=\"259\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"260\"></td><td><pre>nt!KiSystemServiceCopyArguments:</pre></td></tr><tr><td data-num=\"261\"></td><td><pre>805427e4 f3a5            rep movs dword ptr es:[edi],dword ptr [esi]</pre></td></tr><tr><td data-num=\"262\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"263\"></td><td><pre>nt!KiSystemServiceCopyArguments+0x2:</pre></td></tr><tr><td data-num=\"264\"></td><td><pre>805427e6 ffd3            call    ebx</pre></td></tr><tr><td data-num=\"265\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"266\"></td><td><pre>nt!KiSystemServicePostCall:</pre></td></tr><tr><td data-num=\"267\"></td><td><pre>805427e8 8be5            mov     esp,ebp</pre></td></tr><tr><td data-num=\"268\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"269\"></td><td><pre>nt!KiSystemServicePostCall+0x2:</pre></td></tr><tr><td data-num=\"270\"></td><td><pre>805427ea 648b0d24010000  mov     ecx,dword ptr fs:[124h]</pre></td></tr><tr><td data-num=\"271\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"272\"></td><td><pre>nt!KiSystemServicePostCall+0x9:</pre></td></tr><tr><td data-num=\"273\"></td><td><pre>805427f1 8b553c          mov     edx,dword ptr [ebp+3Ch]</pre></td></tr><tr><td data-num=\"274\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"275\"></td><td><pre>nt!KiSystemServicePostCall+0xc:</pre></td></tr><tr><td data-num=\"276\"></td><td><pre>805427f4 899134010000    mov     dword ptr [ecx+134h],edx</pre></td></tr><tr><td data-num=\"277\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"278\"></td><td><pre>nt!KiServiceExit:</pre></td></tr><tr><td data-num=\"279\"></td><td><pre>805427fa fa              cli</pre></td></tr><tr><td data-num=\"280\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"281\"></td><td><pre>nt!KiServiceExit+0x1:</pre></td></tr><tr><td data-num=\"282\"></td><td><pre>805427fb f7457000000200  test    dword ptr [ebp+70h],20000h</pre></td></tr><tr><td data-num=\"283\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"284\"></td><td><pre>nt!KiServiceExit+0x8:</pre></td></tr><tr><td data-num=\"285\"></td><td><pre>80542802 7506            jne     nt!KiServiceExit+0x10 (8054280a)</pre></td></tr><tr><td data-num=\"286\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"287\"></td><td><pre>nt!KiServiceExit+0xa:</pre></td></tr><tr><td data-num=\"288\"></td><td><pre>80542804 f6456c01        test    byte ptr [ebp+6Ch],1</pre></td></tr><tr><td data-num=\"289\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"290\"></td><td><pre>nt!KiServiceExit+0xe:</pre></td></tr><tr><td data-num=\"291\"></td><td><pre>80542808 7456            je      nt!KiServiceExit+0x66 (80542860)</pre></td></tr><tr><td data-num=\"292\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"293\"></td><td><pre>nt!KiServiceExit+0x66:</pre></td></tr><tr><td data-num=\"294\"></td><td><pre>80542860 8b54244c        mov     edx,dword ptr [esp+4Ch]</pre></td></tr><tr><td data-num=\"295\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"296\"></td><td><pre>nt!KiServiceExit+0x6a:</pre></td></tr><tr><td data-num=\"297\"></td><td><pre>80542864 648b1d50000000  mov     ebx,dword ptr fs:[50h]</pre></td></tr><tr><td data-num=\"298\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"299\"></td><td><pre>nt!KiServiceExit+0x71:</pre></td></tr><tr><td data-num=\"300\"></td><td><pre>8054286b 64891500000000  mov     dword ptr fs:[0],edx</pre></td></tr><tr><td data-num=\"301\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"302\"></td><td><pre>nt!KiServiceExit+0x78:</pre></td></tr><tr><td data-num=\"303\"></td><td><pre>80542872 8b4c2448        mov     ecx,dword ptr [esp+48h]</pre></td></tr><tr><td data-num=\"304\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"305\"></td><td><pre>nt!KiServiceExit+0x7c:</pre></td></tr><tr><td data-num=\"306\"></td><td><pre>80542876 648b3524010000  mov     esi,dword ptr fs:[124h]</pre></td></tr><tr><td data-num=\"307\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"308\"></td><td><pre>nt!KiServiceExit+0x83:</pre></td></tr><tr><td data-num=\"309\"></td><td><pre>8054287d 888e40010000    mov     byte ptr [esi+140h],cl</pre></td></tr><tr><td data-num=\"310\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"311\"></td><td><pre>nt!KiServiceExit+0x89:</pre></td></tr><tr><td data-num=\"312\"></td><td><pre>80542883 f7c3ff000000    test    ebx,0FFh</pre></td></tr><tr><td data-num=\"313\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"314\"></td><td><pre>nt!KiServiceExit+0x8f:</pre></td></tr><tr><td data-num=\"315\"></td><td><pre>80542889 7579            jne     nt!KiSystemCallExit2+0x17 (80542904)</pre></td></tr><tr><td data-num=\"316\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"317\"></td><td><pre>nt!KiServiceExit+0x91:</pre></td></tr><tr><td data-num=\"318\"></td><td><pre>8054288b f744247000000200 test    dword ptr [esp+70h],20000h</pre></td></tr><tr><td data-num=\"319\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"320\"></td><td><pre>nt!KiServiceExit+0x99:</pre></td></tr><tr><td data-num=\"321\"></td><td><pre>80542893 0f85ff080000    jne     nt!KiExceptionExit+0x12c (80543198)</pre></td></tr><tr><td data-num=\"322\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"323\"></td><td><pre>nt!KiServiceExit+0x9f:</pre></td></tr><tr><td data-num=\"324\"></td><td><pre>80542899 66f744246cf9ff  test    word ptr [esp+6Ch],0FFF9h</pre></td></tr><tr><td data-num=\"325\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"326\"></td><td><pre>nt!KiServiceExit+0xa6:</pre></td></tr><tr><td data-num=\"327\"></td><td><pre>805428a0 0f84b4000000    je      nt!KiSystemCallExit2+0x6d (8054295a)</pre></td></tr><tr><td data-num=\"328\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"329\"></td><td><pre>nt!KiServiceExit+0xac:</pre></td></tr><tr><td data-num=\"330\"></td><td><pre>805428a6 66837c246c1b    cmp     word ptr [esp+6Ch],1Bh</pre></td></tr><tr><td data-num=\"331\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"332\"></td><td><pre>nt!KiServiceExit+0xb2:</pre></td></tr><tr><td data-num=\"333\"></td><td><pre>805428ac 660fba64246c00  bt      word ptr [esp+6Ch],0</pre></td></tr><tr><td data-num=\"334\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"335\"></td><td><pre>nt!KiServiceExit+0xb9:</pre></td></tr><tr><td data-num=\"336\"></td><td><pre>805428b3 f5              cmc</pre></td></tr><tr><td data-num=\"337\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"338\"></td><td><pre>nt!KiServiceExit+0xba:</pre></td></tr><tr><td data-num=\"339\"></td><td><pre>805428b4 0f878e000000    ja      nt!KiSystemCallExit2+0x5b (80542948)</pre></td></tr><tr><td data-num=\"340\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"341\"></td><td><pre>nt!KiServiceExit+0xc0:</pre></td></tr><tr><td data-num=\"342\"></td><td><pre>805428ba 66837d6c08      cmp     word ptr [ebp+6Ch],8</pre></td></tr><tr><td data-num=\"343\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"344\"></td><td><pre>nt!KiServiceExit+0xc5:</pre></td></tr><tr><td data-num=\"345\"></td><td><pre>805428bf 7405            je      nt!KiServiceExit+0xcc (805428c6)</pre></td></tr><tr><td data-num=\"346\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"347\"></td><td><pre>nt!KiServiceExit+0xcc:</pre></td></tr><tr><td data-num=\"348\"></td><td><pre>805428c6 8d6554          lea     esp,[ebp+54h]</pre></td></tr><tr><td data-num=\"349\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"350\"></td><td><pre>nt!KiServiceExit+0xcf:</pre></td></tr><tr><td data-num=\"351\"></td><td><pre>805428c9 5f              pop     edi</pre></td></tr><tr><td data-num=\"352\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"353\"></td><td><pre>nt!KiServiceExit+0xd0:</pre></td></tr><tr><td data-num=\"354\"></td><td><pre>805428ca 5e              pop     esi</pre></td></tr><tr><td data-num=\"355\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"356\"></td><td><pre>nt!KiServiceExit+0xd1:</pre></td></tr><tr><td data-num=\"357\"></td><td><pre>805428cb 5b              pop     ebx</pre></td></tr><tr><td data-num=\"358\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"359\"></td><td><pre>nt!KiServiceExit+0xd2:</pre></td></tr><tr><td data-num=\"360\"></td><td><pre>805428cc 5d              pop     ebp</pre></td></tr><tr><td data-num=\"361\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"362\"></td><td><pre>nt!KiServiceExit+0xd3:</pre></td></tr><tr><td data-num=\"363\"></td><td><pre>805428cd 66817c24088000  cmp     word ptr [esp+8],80h</pre></td></tr><tr><td data-num=\"364\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"365\"></td><td><pre>nt!KiServiceExit+0xda:</pre></td></tr><tr><td data-num=\"366\"></td><td><pre>805428d4 0f87da080000    ja      nt!KiExceptionExit+0x148 (805431b4)</pre></td></tr><tr><td data-num=\"367\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"368\"></td><td><pre>nt!KiServiceExit+0xe0:</pre></td></tr><tr><td data-num=\"369\"></td><td><pre>805428da 83c404          add     esp,4</pre></td></tr><tr><td data-num=\"370\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"371\"></td><td><pre>nt!KiServiceExit+0xe3:</pre></td></tr><tr><td data-num=\"372\"></td><td><pre>805428dd f744240401000000 test    dword ptr [esp+4],1</pre></td></tr><tr><td data-num=\"373\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"374\"></td><td><pre>nt!KiSystemCallExitBranch:</pre></td></tr><tr><td data-num=\"375\"></td><td><pre>805428e5 7506            jne     nt!KiSystemCallExit2 (805428ed)</pre></td></tr><tr><td data-num=\"376\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"377\"></td><td><pre>nt!KiSystemCallExitBranch+0x2:</pre></td></tr><tr><td data-num=\"378\"></td><td><pre>805428e7 5a              pop     edx</pre></td></tr><tr><td data-num=\"379\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"380\"></td><td><pre>nt!KiSystemCallExitBranch+0x3:</pre></td></tr><tr><td data-num=\"381\"></td><td><pre>805428e8 59              pop     ecx</pre></td></tr><tr><td data-num=\"382\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"383\"></td><td><pre>nt!KiSystemCallExitBranch+0x4:</pre></td></tr><tr><td data-num=\"384\"></td><td><pre>805428e9 9d              popfd</pre></td></tr><tr><td data-num=\"385\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"386\"></td><td><pre>nt!KiSystemCallExitBranch+0x5:</pre></td></tr><tr><td data-num=\"387\"></td><td><pre>805428ea ffe2            jmp     edx</pre></td></tr><tr><td data-num=\"388\"></td><td><pre>kd&gt; r</pre></td></tr><tr><td data-num=\"389\"></td><td><pre>eax&#x3D;c0000034 ebx&#x3D;00000000 ecx&#x3D;00000008 edx&#x3D;80501681 esi&#x3D;000003e8 edi&#x3D;00000001</pre></td></tr><tr><td data-num=\"390\"></td><td><pre>eip&#x3D;805428ea esp&#x3D;ba4ffd10 ebp&#x3D;ba4ffd68 iopl&#x3D;0         nv up ei pl zr na pe nc</pre></td></tr><tr><td data-num=\"391\"></td><td><pre>cs&#x3D;0008  ss&#x3D;0010  ds&#x3D;0023  es&#x3D;0023  fs&#x3D;0030  gs&#x3D;0000             efl&#x3D;00000246</pre></td></tr><tr><td data-num=\"392\"></td><td><pre>nt!KiSystemCallExitBranch+0x5:</pre></td></tr><tr><td data-num=\"393\"></td><td><pre>805428ea ffe2            jmp     edx &#123;nt!ZwOpenEvent+0x11 (80501681)&#125;</pre></td></tr><tr><td data-num=\"394\"></td><td><pre>kd&gt; t</pre></td></tr><tr><td data-num=\"395\"></td><td><pre>nt!ZwOpenEvent+0x11:</pre></td></tr><tr><td data-num=\"396\"></td><td><pre>80501681 c20c00          ret     0Ch</pre></td></tr><tr><td data-num=\"397\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"398\"></td><td><pre>MountMgr!WorkerThread+0x79:</pre></td></tr><tr><td data-num=\"399\"></td><td><pre>ba0b83c3 85c0            test    eax,eax</pre></td></tr><tr><td data-num=\"400\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"401\"></td><td><pre>MountMgr!WorkerThread+0x7b:</pre></td></tr><tr><td data-num=\"402\"></td><td><pre>ba0b83c5 7d16            jge     MountMgr!WorkerThread+0x93 (ba0b83dd)</pre></td></tr><tr><td data-num=\"403\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"404\"></td><td><pre>MountMgr!WorkerThread+0x7d:</pre></td></tr><tr><td data-num=\"405\"></td><td><pre>ba0b83c7 8d45f4          lea     eax,[ebp-0Ch]</pre></td></tr><tr><td data-num=\"406\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"407\"></td><td><pre>MountMgr!WorkerThread+0x80:</pre></td></tr><tr><td data-num=\"408\"></td><td><pre>ba0b83ca 50              push    eax</pre></td></tr><tr><td data-num=\"409\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"410\"></td><td><pre>MountMgr!WorkerThread+0x81:</pre></td></tr><tr><td data-num=\"411\"></td><td><pre>ba0b83cb 53              push    ebx</pre></td></tr><tr><td data-num=\"412\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"413\"></td><td><pre>MountMgr!WorkerThread+0x82:</pre></td></tr><tr><td data-num=\"414\"></td><td><pre>ba0b83cc 53              push    ebx</pre></td></tr><tr><td data-num=\"415\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"416\"></td><td><pre>MountMgr!WorkerThread+0x83:</pre></td></tr><tr><td data-num=\"417\"></td><td><pre>ba0b83cd 53              push    ebx</pre></td></tr><tr><td data-num=\"418\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"419\"></td><td><pre>MountMgr!WorkerThread+0x84:</pre></td></tr><tr><td data-num=\"420\"></td><td><pre>ba0b83ce 8d45dc          lea     eax,[ebp-24h]</pre></td></tr><tr><td data-num=\"421\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"422\"></td><td><pre>MountMgr!WorkerThread+0x87:</pre></td></tr><tr><td data-num=\"423\"></td><td><pre>ba0b83d1 50              push    eax</pre></td></tr><tr><td data-num=\"424\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"425\"></td><td><pre>MountMgr!WorkerThread+0x88:</pre></td></tr><tr><td data-num=\"426\"></td><td><pre>ba0b83d2 ff15a0880bba    call    dword ptr [MountMgr!_imp__KeWaitForSingleObject (ba0b88a0)]</pre></td></tr><tr><td data-num=\"427\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"428\"></td><td><pre>Breakpoint 0 hit</pre></td></tr><tr><td data-num=\"429\"></td><td><pre>nt!KiFastCallEntry:</pre></td></tr><tr><td data-num=\"430\"></td><td><pre>805426e0 b923000000      mov     ecx,23h</pre></td></tr><tr><td data-num=\"431\"></td><td><pre>kd&gt; p</pre></td></tr><tr><td data-num=\"432\"></td><td><pre>nt!KiFastCallEntry+0x5:</pre></td></tr><tr><td data-num=\"433\"></td><td><pre>805426e5 6a30            push    30h</pre></td></tr></table></figure><p>想知道它是怎么返回三环的，海哥说需要学习 APC 之后的内容了。jmp edx 后面的就不懂了。</p>\n<h2 id=\"分析-kisystemservice\"><a class=\"anchor\" href=\"#分析-kisystemservice\">#</a> 分析 KiSystemService</h2>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>.text:0046A611 _KiSystemService proc near              ; CODE XREF: ZwAcceptConnectPort (x,x,x,x,x,x)+C↑p</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>.text:0046A611                                         ; ZwAccessCheck (x,x,x,x,x,x,x,x)+C↑p ...</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>.text:0046A611</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>.text:0046A611 arg_0           &#x3D; dword ptr  4</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>.text:0046A611</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>.text:0046A611                 push    0               ; 保存系统空间的寄存器到_KTRAP_FRAME +0x064 ErrorCode</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>.text:0046A613                 push    ebp             ; 保存系统空间的寄存器到 +0x060 Ebp</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>.text:0046A614                 push    ebx             ; 保存系统空间的寄存器到 +0x05c Ebx</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>.text:0046A615                 push    esi             ; 保存系统空间的寄存器到 +0x058 Esi</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>.text:0046A616                 push    edi             ; 保存系统空间的寄存器到 +0x054 Edi</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>.text:0046A617                 push    fs              ; 保存系统空间的寄存器到 +0x050 SegFs</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>.text:0046A619                 mov     ebx, 30h ; &#39;0&#39;  ; 永远都用这个值吗？如果是多核也不变吗？</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>.text:0046A61E                 mov     fs, bx          ; Windows 内核有个特殊的基本要求，就是只要 CPU 在内核中运行，就得使</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>.text:0046A61E                                         ; mov ebx,30 &#x2F;&#x2F;0011 0000  所以就是 0 环 GDT 索引 6</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>.text:0046A61E                                         ;</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>.text:0046A61E                                         ; 0 环的 FS.Base 指向 CPU 自己的 KPCR，不是指向当前线程</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>.text:0046A61E                                         ; 选择码，0x30 的结构分析如下：</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>.text:0046A61E                                         ; 1.bit0~bit1:RPL, 要求运行的级别，这里是 0</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>.text:0046A61E                                         ; 2.bit2：找 GDT 还是 IDT，这里是 0，GDT</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>.text:0046A61E                                         ; 3.bit3！bit15，是在 GDT 或者 IDT 的下标</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>.text:0046A61E                                         ; windbg 查看段描述符：834093f2 dc003748</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>.text:0046A61E                                         ; Base:83f2dc00 指向当前的_KPCR</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>.text:0046A621                 assume fs:nothing</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>.text:0046A621                 push    large dword ptr fs:_KPCR ; 保存老的 ExceptionList</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>.text:0046A621                                         ; _KPCR 偏移 + 0x00-&gt;NT_TIB-&gt;ExceptionList</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>.text:0046A628                 mov     large dword ptr fs:0, 0FFFFFFFFh ; 设置新的 ExceptonList 为 - 1，因为 3 环的异常链表，不能用，要进 0 环了</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>.text:0046A633                 mov     esi, large fs:_KPCR.PrcbData.CurrentThread ; esi &#x3D;  当前 CPU 所执行线程的_ETHREAD</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>.text:0046A63A                 push    dword ptr [esi+_ETHREAD.Tcb.PreviousMode] ; 因为 Esi 存的_KTHREAD, 偏移 0x140 存的 PreviousMode,</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>.text:0046A63A                                         ; 就是保存老的先前模式到堆栈</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>.text:0046A63A                                         ; 先前模式就是当调用这些代码时候，原来是几环的数就是几，比如原来 0 环，先前模式就是 0，原来 3 环就是 1</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>.text:0046A63A                                         ; 因为有些内核代码可以从 0 和 3 调用，但是执行内容不一样，通过这个知道执行什么。</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>.text:0046A640                 sub     esp, 48h        ; ESP 提升到_KTRAP_FRAME 结构体第一个成员，也就是这个结构体指针</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>.text:0046A643                 mov     ebx, [esp+_KTRAP_FRAME.SegCs] ; 取出 3 环压入的参数 CS _KTRAP_FRAME + 0x6C</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>.text:0046A647                 and     ebx, 1          ; 0 环的最低位为 0,3 环的最低位为 1</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>.text:0046A64A                 mov     [esi+_ETHREAD.Tcb.PreviousMode], bl ; 保存老的 “先前模式” 到堆栈</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>.text:0046A650                 mov     ebp, esp        ; ESP &#x3D; EBP _KTRAP_FRAME 结构指针</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>.text:0046A652                 mov     ebx, [esi+_ETHREAD.Tcb.TrapFrame] ; _KTHTEAD 中的 TrapFrame 给 ebx</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>.text:0046A658                 mov     [ebp+_KTRAP_FRAME._Edx], ebx ; 将_KTHREAD 中的 Trap_Frame 暂时存在这个位置后面会将这个值取出来，</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>.text:0046A658                                         ; 重新恢复给_KTHREAD 的 Trap_Frame</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>.text:0046A65B                 mov     [esi+_ETHREAD.Tcb.TrapFrame], ebp ; 将堆栈中形成的_KTRAP_FRAME 结构指针复制给_KTHREAD 中的 TRAPFRAME</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>.text:0046A661                 cld</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>.text:0046A662                 mov     ebx, [ebp+_KTRAP_FRAME._Ebp] ; 3 环的 EBP</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>.text:0046A665                 mov     edi, [ebp+_KTRAP_FRAME._Eip] ; 3 环的 EIP</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>.text:0046A668                 mov     [ebp+_KTRAP_FRAME.DbgArgPointer], edx ; edx 存储的是 3 环函数的参数的指针:</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>.text:0046A668                                         ;</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>.text:0046A668                                         ; _KiIntSystemCall：</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>.text:0046A668                                         ;</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>.text:0046A668                                         ; lea     edx, [esp+8] ; 参数指针</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>.text:0046A668                                         ; int     2Eh</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>.text:0046A668                                         ; retn</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>.text:0046A66B                 mov     [ebp+_KTRAP_FRAME.DbgArgMark], 0BADB0D00h ; 这个是操作系统的标志</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>.text:0046A672                 mov     [ebp+_KTRAP_FRAME.DbgEbp], ebx ; 3 环的 ebp 存储到 KTRAP_FRAME+0x000 DbgEbp 的位置</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>.text:0046A675                 mov     [ebp+_KTRAP_FRAME.DbgEip], edi ; 3 环的 eip 存储到 KTRAP_FRAME+0x004 DbgEip 的位置</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>.text:0046A678                 test    [esi+_KTHREAD.DebugActive], 0FFh ; 判断_KTHREAD 的 +0x02c DebugActive 是否为 - 1</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>.text:0046A67C                 jnz     Dr_kss_a        ; 如果处于调试状态，跳转</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>.text:0046A682</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>.text:0046A682 loc_46A682:                             ; CODE XREF: Dr_kss_a+10↑j</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>.text:0046A682                                         ; Dr_kss_a+7C↑j</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>.text:0046A682                 sti                     ; 关闭中断</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>.text:0046A683                 jmp     loc_46A76F      ; 取 3 环传来的服务号</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>.text:0046A683 _KiSystemService endp</pre></td></tr></table></figure><p>Dr_kss_a:</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>.text:0046A50C Dr_kss_a        proc near               ; CODE XREF: _KiSystemService+6B↓j</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>.text:0046A50C                 test    [ebp+_KTRAP_FRAME.EFlags], 20000h ; 判断 VM 位是否为 1</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>.text:0046A513                 jnz     short loc_46A522</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>.text:0046A515                 test    [ebp+_KTRAP_FRAME.SegCs], 1</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>.text:0046A51C                 jz      loc_46A682      ; 关闭中断</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>.text:0046A522</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>.text:0046A522 loc_46A522:                             ; CODE XREF: Dr_kss_a+7↑j</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>.text:0046A522                 mov     ebx, dr0</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>.text:0046A525                 mov     ecx, dr1</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>.text:0046A528                 mov     edi, dr2</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>.text:0046A52B                 mov     [ebp+_KTRAP_FRAME.Dr0], ebx ; 存储 Dr0 寄存器到 _KTRAP_FRAME +0x18</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>.text:0046A52E                 mov     [ebp+1Ch], ecx  ; 存储 Dr1 寄存器到 _KTRAP_FRAME +0x1C</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>.text:0046A531                 mov     [ebp+20h], edi  ; 存储 Dr2 寄存器到 _KTRAP_FRAME</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>.text:0046A534                 mov     ebx, dr3</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>.text:0046A537                 mov     ecx, dr6</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>.text:0046A53A                 mov     edi, dr7</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>.text:0046A53D                 mov     [ebp+24h], ebx  ; 存储 Dr3 寄存器到 _KTRAP_FRAME</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>.text:0046A540                 mov     [ebp+28h], ecx  ; 存储 Dr6 寄存器到 _KTRAP_FRAME</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>.text:0046A543                 xor     ebx, ebx        ; ebx &#x3D; 0</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>.text:0046A545                 mov     [ebp+2Ch], edi  ; 存储 Dr7 寄存器到 _KTRAP_FRAME</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>.text:0046A548                 mov     dr7, ebx        ; 将 Dr7 清零</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>.text:0046A54B                 mov     edi, large fs:_KPCR.Prcb ; edi &#x3D; _KPRCB 的指针</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>.text:0046A552                 mov     ebx, [edi+_KPRCB.ProcessorState.SpecialRegisters.KernelDr0]</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>.text:0046A558                 mov     ecx, [edi+_KPRCB.ProcessorState.SpecialRegisters.KernelDr1]</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>.text:0046A55E                 mov     dr0, ebx</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>.text:0046A561                 mov     dr1, ecx</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>.text:0046A564                 mov     ebx, [edi+_KPRCB.ProcessorState.SpecialRegisters.KernelDr2]</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>.text:0046A56A                 mov     ecx, [edi+_KPRCB.ProcessorState.SpecialRegisters.KernelDr3]</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>.text:0046A570                 mov     dr2, ebx</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>.text:0046A573                 mov     dr3, ecx</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>.text:0046A576                 mov     ebx, [edi+_KPRCB.ProcessorState.SpecialRegisters.KernelDr6]</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>.text:0046A57C                 mov     ecx, [edi+_KPRCB.ProcessorState.SpecialRegisters.KernelDr7]</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>.text:0046A582                 mov     dr6, ebx</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>.text:0046A585                 mov     dr7, ecx</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>.text:0046A588                 jmp     loc_46A682      ; 关闭中断</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>.text:0046A588 Dr_kss_a        endp</pre></td></tr></table></figure><p>loc_46A76F: 既又跳转到 KiFastCallEntry 里了。</p>\n<h2 id=\"总结-2\"><a class=\"anchor\" href=\"#总结-2\">#</a> 总结</h2>\n<p>逆内核的时候要有一个主线，因为操作系统要考虑的事情太多了。<br />\n我们要带着目的去逆向，不然很容易迷失的。</p>\n<ol>\n<li>\n<p>进 0 环后，原来的寄存器存在哪里？</p>\n</li>\n<li>\n<p>如何根据系统服务号 (eax 中存储) 找到要执行的内核函数？</p>\n</li>\n<li>\n<p>调用时参数是存储到 3 环的堆栈，如何传递给内核函数？</p>\n</li>\n<li>\n<p>2 种调用方式是如何返回到 3 环的？</p>\n</li>\n</ol>\n<p>逆完我们可以知道：<br />\n快速调用与中断门填充完_KTRAP_FRAME 结构后，走的还是同样的代码去调用函数，最后出来的时候也是分开的。<br />\n既两个入口两个出口。</p>\n<p>这里面也涉及反硬件断点调试的操作，修改判断是否处于调试状态的_KTHREAD.DebugActive 的值，就可以让人获取不了 Dr0~Dr7 寄存器的值。</p>\n<p>海哥的视频里说了，如今这个阶段只需要知道如何进的 0 环就行了，至于如何返回的要等学过 APC 后了。</p>\n<h1 id=\"额外的小知识\"><a class=\"anchor\" href=\"#额外的小知识\">#</a> 额外的小知识</h1>\n<p>查看 CPU 数量</p>\n<p><code>kd&gt; dd KeNumberProcessors</code></p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kd&gt; dd KeNumberProcessors</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>80556a60  00000001</pre></td></tr></table></figure><p>查看 KPCR</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kd&gt; dd KiProcessorBlock  L2</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>80554040  ffdff120 00000000\t\t\t\t&#x2F;&#x2F; 如果有 2 个核，那么就会出现 2 个地址</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>kd&gt; dt _kpcr ffdff120-120\t\t\t\t&#x2F;&#x2F; 减去 120 (kpcr 的大小)\t就是 kpcr 的地址\t\t</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>nt!_KPCR</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  +0x000 NtTib            : _NT_TIB\t\t\t\t\t\t\t</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  +0x01c SelfPcr          : 0xffdff000 _KPCR\t\t\t\t\t\t\t</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  +0x020 Prcb             : 0xffdff120 _KPRCB\t\t\t\t\t\t\t</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  +0x024 Irql             : 0 &#39;&#39;\t\t\t\t\t\t\t</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  +0x028 IRR              : 0\t\t\t\t\t\t\t</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  +0x02c IrrActive        : 0\t\t\t\t\t\t\t</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  +0x030 IDR              : 0xffffffff\t\t\t\t\t\t\t</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  +0x034 KdVersionBlock   : 0x80546cb8 Void\t\t\t\t\t\t\t</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  +0x038 IDT              : 0x8003f400 _KIDTENTRY\t\t\t\t\t\t\t</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  +0x03c GDT              : 0x8003f000 _KGDTENTRY\t\t\t\t\t\t\t</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  +0x040 TSS              : 0x80042000 _KTSS\t\t\t\t\t\t\t</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  +0x044 MajorVersion     : 1\t\t\t\t\t\t\t</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  +0x046 MinorVersion     : 1\t\t\t\t\t\t\t</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  +0x048 SetMember        : 1\t\t\t\t\t\t\t</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  +0x04c StallScaleFactor : 0x13b5\t\t\t\t\t\t\t</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  +0x050 DebugActive      : 0 &#39;&#39;\t\t\t\t\t\t\t</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  +0x051 Number           : 0 &#39;&#39;\t\t\t\t\t\t\t</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  +0x052 Spare0           : 0 &#39;&#39;\t\t\t\t\t\t\t</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  +0x053 SecondLevelCacheAssociativity : 0 &#39;&#39;\t\t\t\t\t\t\t</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  +0x054 VdmAlert         : 0\t\t\t\t\t\t\t</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  +0x058 KernelReserved   : [14] 0\t\t\t\t\t\t\t</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  +0x090 SecondLevelCacheSize : 0\t\t\t\t\t\t\t</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  +0x094 HalReserved      : [16] 0\t\t\t\t\t\t\t</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  +0x0d4 InterruptMode    : 0\t\t\t\t\t\t\t</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  +0x0d8 Spare1           : 0 &#39;&#39;\t\t\t\t\t\t\t</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  +0x0dc KernelReserved2  : [17] 0\t\t\t\t\t\t\t</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  +0x120 PrcbData         : _KPRCB</pre></td></tr></table></figure><h1 id=\"reference\"><a class=\"anchor\" href=\"#reference\">#</a> Reference</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0t3YW5zeS9hcnRpY2xlL2RldGFpbHMvMTA5NDI2Njg4\">https://blog.csdn.net/Kwansy/article/details/109426688</span></p>\n",
            "tags": [
                "sysenter指令",
                "KiFastCallEntry函数",
                "KiSystemService函数",
                "Trap_Frame"
            ]
        },
        {
            "id": "https://or0kit.github.io/Bin/Core/WindowsXp/SystemCall/%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8-3%E7%8E%AF%E8%B0%83%E7%94%A8%E5%88%86%E6%9E%90/",
            "url": "https://or0kit.github.io/Bin/Core/WindowsXp/SystemCall/%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8-3%E7%8E%AF%E8%B0%83%E7%94%A8%E5%88%86%E6%9E%90/",
            "title": "系统调用-3环调用分析",
            "date_published": "2021-12-07T00:20:27.000Z",
            "content_html": "<h1 id=\"分析3环api-readprocessmemory\"><a class=\"anchor\" href=\"#分析3环api-readprocessmemory\">#</a> 分析 3 环 API ReadProcessMemory</h1>\n<p>用 IDA 分析 kernel32.dll, 找到  <code>ReadProcessMemory</code>  函数，因为这个函数会进入 R0，所以我们对其分析 API 的调用过程。</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>.text:7C8021D0 ; BOOL __stdcall ReadProcessMemory(HANDLE hProcess, LPCVOID lpBaseAddress, LPVOID lpBuffer, SIZE_T nSize, SIZE_T *lpNumberOfBytesRead)</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>.text:7C8021D0                 public _ReadProcessMemory@20</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>.text:7C8021D0 _ReadProcessMemory@20 proc near         ; CODE XREF: GetProcessVersion(x)+2F18B↓p</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>.text:7C8021D0                                         ; GetProcessVersion(x)+2F1AA↓p ...</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>.text:7C8021D0</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>.text:7C8021D0 hProcess        &#x3D; dword ptr  8</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>.text:7C8021D0 lpBaseAddress   &#x3D; dword ptr  0Ch</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>.text:7C8021D0 lpBuffer        &#x3D; dword ptr  10h</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>.text:7C8021D0 nSize           &#x3D; dword ptr  14h</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>.text:7C8021D0 lpNumberOfBytesRead&#x3D; dword ptr  18h</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>.text:7C8021D0</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>.text:7C8021D0                 mov     edi, edi</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>.text:7C8021D2                 push    ebp</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>.text:7C8021D3                 mov     ebp, esp</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>.text:7C8021D5                 lea     eax, [ebp+nSize]</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>.text:7C8021D8                 push    eax             ; NumberOfBytesRead</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>.text:7C8021D9                 push    [ebp+nSize]     ; NumberOfBytesToRead</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>.text:7C8021DC                 push    [ebp+lpBuffer]  ; Buffer</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>.text:7C8021DF                 push    [ebp+lpBaseAddress] ; BaseAddress</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>.text:7C8021E2                 push    [ebp+hProcess]  ; ProcessHandle</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>.text:7C8021E5                 call    ds:__imp__NtReadVirtualMemory@20 ; NtReadVirtualMemory(x,x,x,x,x)</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>.text:7C8021EB                 mov     ecx, [ebp+lpNumberOfBytesRead]</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>.text:7C8021EE                 test    ecx, ecx</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>.text:7C8021F0                 jnz     short loc_7C8021FD</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>.text:7C8021F2</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>.text:7C8021F2 loc_7C8021F2:                           ; CODE XREF: ReadProcessMemory(x,x,x,x,x)+32↓j</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>.text:7C8021F2                 test    eax, eax</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>.text:7C8021F4                 jl      short loc_7C802204</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>.text:7C8021F6                 xor     eax, eax</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>.text:7C8021F8                 inc     eax</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>.text:7C8021F9</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>.text:7C8021F9 loc_7C8021F9:                           ; CODE XREF: ReadProcessMemory(x,x,x,x,x)+3C↓j</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>.text:7C8021F9                 pop     ebp</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>.text:7C8021FA                 retn    14h</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>.text:7C8021FD ; ---------------------------------------------------------------------------</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>.text:7C8021FD</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>.text:7C8021FD loc_7C8021FD:                           ; CODE XREF: ReadProcessMemory(x,x,x,x,x)+20↑j</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>.text:7C8021FD                 mov     edx, [ebp+nSize]</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>.text:7C802200                 mov     [ecx], edx</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>.text:7C802202                 jmp     short loc_7C8021F2</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>.text:7C802204 ; ---------------------------------------------------------------------------</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>.text:7C802204</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>.text:7C802204 loc_7C802204:                           ; CODE XREF: ReadProcessMemory(x,x,x,x,x)+24↑j</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>.text:7C802204                 push    eax             ; Status</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>.text:7C802205                 call    _BaseSetLastNTError@4 ; BaseSetLastNTError(x)</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>.text:7C80220A                 xor     eax, eax</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>.text:7C80220C                 jmp     short loc_7C8021F9</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>.text:7C80220C _ReadProcessMemory@20 endp</pre></td></tr></table></figure><p>由  <code>.text:7C8021E5                 call    ds:__imp__NtReadVirtualMemory@20 ; NtReadVirtualMemory(x,x,x,x,x)</code>  可知函数  <code>ReadProcessMemory</code>  调用了导入函数  <code>NtReadVirtualMemory</code></p>\n<p>查看导入表： <code>7C80141C\tNtReadVirtualMemory\tntdll</code> <br />\n 得知这个函数在 ntdll.dll 中</p>\n<p>用 IDA 打开 ntdll.dll, 查找 NtReadVirtualMemory 函数</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">.</span>text<span class=\"token operator\">:</span><span class=\"token number\">7</span>C92D9E0 <span class=\"token punctuation\">;</span> __stdcall <span class=\"token function\">NtReadVirtualMemory</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">.</span>text<span class=\"token operator\">:</span><span class=\"token number\">7</span>C92D9E0                 public _NtReadVirtualMemory@<span class=\"token number\">20</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">.</span>text<span class=\"token operator\">:</span><span class=\"token number\">7</span>C92D9E0 _NtReadVirtualMemory@<span class=\"token number\">20</span> proc near       <span class=\"token punctuation\">;</span> CODE XREF<span class=\"token operator\">:</span> <span class=\"token function\">LdrFindCreateProcessManifest</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span>CC↓p</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">.</span>text<span class=\"token operator\">:</span><span class=\"token number\">7</span>C92D9E0                                         <span class=\"token punctuation\">;</span> <span class=\"token function\">LdrCreateOutOfProcessImage</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">7</span>C↓p <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">.</span>text<span class=\"token operator\">:</span><span class=\"token number\">7</span>C92D9E0                 mov     eax<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span>BAh       <span class=\"token punctuation\">;</span> NtReadVirtualMemory</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">.</span>text<span class=\"token operator\">:</span><span class=\"token number\">7</span>C92D9E5                 mov     edx<span class=\"token punctuation\">,</span> <span class=\"token number\">7FF</span>E0300h</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">.</span>text<span class=\"token operator\">:</span><span class=\"token number\">7</span>C92D9EA                 call    dword ptr <span class=\"token punctuation\">[</span>edx<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">.</span>text<span class=\"token operator\">:</span><span class=\"token number\">7</span>C92D9EC                 retn    <span class=\"token number\">14</span>h</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">.</span>text<span class=\"token operator\">:</span><span class=\"token number\">7</span>C92D9EC _NtReadVirtualMemory@<span class=\"token number\">20</span> endp</pre></td></tr></table></figure><p>可以看到这个函数只有短短几行汇编代码：给 eax 赋个值，然后给 edx 个地址，然后 call 一下 edx 指向的地址，然后就平栈（由于 STDCALL 调用约定）返回了。<br />\n但要看懂这几行代码，必须要了解一些知识。</p>\n<h1 id=\"_kuser_shared_data-结构体\"><a class=\"anchor\" href=\"#_kuser_shared_data-结构体\">#</a> _KUSER_SHARED_DATA 结构体</h1>\n<p>在 R3 和 R0 分别定义了一个_KUSER_SHARED_DATA 结构区域，用于 R3 和 R0 共享某些数据。<br />\n它们在同一个物理页上被映射到不同的虚拟地址，_KUSER_SHARED_DATA 结构在 R3 地址为 0x7ffe0000，在 R0 地址为 0xffdf0000。</p>\n<p>其结构如下所示：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kd<span class=\"token operator\">></span> dt _KUSER_SHARED_DATA</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>nt<span class=\"token operator\">!</span>_KUSER_SHARED_DATA</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x000</span> TickCountLow     <span class=\"token operator\">:</span> Uint4B</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x004</span> TickCountMultiplier <span class=\"token operator\">:</span> Uint4B</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x008</span> InterruptTime    <span class=\"token operator\">:</span> _KSYSTEM_TIME</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x014</span> SystemTime       <span class=\"token operator\">:</span> _KSYSTEM_TIME</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x020</span> TimeZoneBias     <span class=\"token operator\">:</span> _KSYSTEM_TIME</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x02c</span> ImageNumberLow   <span class=\"token operator\">:</span> Uint2B</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x02e</span> ImageNumberHigh  <span class=\"token operator\">:</span> Uint2B</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x030</span> NtSystemRoot     <span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">260</span><span class=\"token punctuation\">]</span> Uint2B</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x238</span> MaxStackTraceDepth <span class=\"token operator\">:</span> Uint4B</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x23c</span> CryptoExponent   <span class=\"token operator\">:</span> Uint4B</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x240</span> TimeZoneId       <span class=\"token operator\">:</span> Uint4B</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x244</span> Reserved2        <span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span> Uint4B</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x264</span> NtProductType    <span class=\"token operator\">:</span> _NT_PRODUCT_TYPE</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x268</span> ProductTypeIsValid <span class=\"token operator\">:</span> UChar</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x26c</span> NtMajorVersion   <span class=\"token operator\">:</span> Uint4B</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x270</span> NtMinorVersion   <span class=\"token operator\">:</span> Uint4B</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x274</span> ProcessorFeatures <span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">64</span><span class=\"token punctuation\">]</span> UChar</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x2b4</span> Reserved1        <span class=\"token operator\">:</span> Uint4B</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x2b8</span> Reserved3        <span class=\"token operator\">:</span> Uint4B</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x2bc</span> TimeSlip         <span class=\"token operator\">:</span> Uint4B</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x2c0</span> AlternativeArchitecture <span class=\"token operator\">:</span> _ALTERNATIVE_ARCHITECTURE_TYPE</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x2c8</span> SystemExpirationDate <span class=\"token operator\">:</span> _LARGE_INTEGER</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x2d0</span> SuiteMask        <span class=\"token operator\">:</span> Uint4B</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x2d4</span> KdDebuggerEnabled <span class=\"token operator\">:</span> UChar</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x2d5</span> NXSupportPolicy  <span class=\"token operator\">:</span> UChar</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x2d8</span> ActiveConsoleId  <span class=\"token operator\">:</span> Uint4B</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x2dc</span> DismountCount    <span class=\"token operator\">:</span> Uint4B</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x2e0</span> ComPlusPackage   <span class=\"token operator\">:</span> Uint4B</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x2e4</span> LastSystemRITEventTickCount <span class=\"token operator\">:</span> Uint4B</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x2e8</span> NumberOfPhysicalPages <span class=\"token operator\">:</span> Uint4B</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x2ec</span> SafeBootMode     <span class=\"token operator\">:</span> UChar</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x2f0</span> TraceLogging     <span class=\"token operator\">:</span> Uint4B</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x2f8</span> TestRetInstruction <span class=\"token operator\">:</span> Uint8B</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x300</span> SystemCall       <span class=\"token operator\">:</span> Uint4B</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x304</span> SystemCallReturn <span class=\"token operator\">:</span> Uint4B</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x308</span> SystemCallPad    <span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> Uint8B</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x320</span> TickCount        <span class=\"token operator\">:</span> _KSYSTEM_TIME</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x320</span> TickCountQuad    <span class=\"token operator\">:</span> Uint8B</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x330</span> Cookie           <span class=\"token operator\">:</span> Uint4B</pre></td></tr></table></figure><p>虽然它们指向的是同一个物理页，但通过分页机制使其在 R3 是只读的，在 R0 是可读可写的，以保证安全性。</p>\n<p>其中相对结构体偏移 0x300 处的成员就是 3 环 API 进入内核的入口函数。</p>\n<p>查看其内容：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kd&gt; .process 89aad020  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Implicit process is now 89aad020</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>WARNING: .cache forcedecodeuser is not enabled</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>kd&gt; dd 0x7ffe0000</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>7ffe0000  000a01e6 0fa00000 dc0bc1e4 00000017</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>7ffe0010  00000017 ae23657c 01d7ec22 01d7ec22</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>7ffe0020  f1dcc000 ffffffbc ffffffbc 014c014c</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>7ffe0030  003a0043 0057005c 004e0049 004f0044</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>7ffe0040  00530057 00000000 00000000 00000000</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>7ffe0050  00000000 00000000 00000000 00000000</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>7ffe0060  00000000 00000000 00000000 00000000</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>7ffe0070  00000000 00000000 00000000 00000000</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>kd&gt; dd ffdf0000</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>ffdf0000  000a01e6 0fa00000 dc0bc1e4 00000017</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>ffdf0010  00000017 ae23657c 01d7ec22 01d7ec22</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>ffdf0020  f1dcc000 ffffffbc ffffffbc 014c014c</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>ffdf0030  003a0043 0057005c 004e0049 004f0044</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>ffdf0040  00530057 00000000 00000000 00000000</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>ffdf0050  00000000 00000000 00000000 00000000</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>ffdf0060  00000000 00000000 00000000 00000000</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>ffdf0070  00000000 00000000 00000000 00000000</pre></td></tr></table></figure><p>可以发现 7ffe0000 与 ffdf0000 处的数据相同。</p>\n<p>我们先看看 0xffdf0300 这个地址里面存的是什么，先 dd 一下，在查看其存储的地址的反汇编：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kd<span class=\"token operator\">></span> dd ffdf0300</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>ffdf0300  <span class=\"token number\">7</span>c92e4f0 <span class=\"token number\">7</span>c92e4f4 <span class=\"token number\">00000000</span> <span class=\"token number\">00000000</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>ffdf0310  <span class=\"token number\">00000000</span> <span class=\"token number\">00000000</span> <span class=\"token number\">00000000</span> <span class=\"token number\">00000000</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>ffdf0320  <span class=\"token number\">00000000</span> <span class=\"token number\">00000000</span> <span class=\"token number\">00000000</span> <span class=\"token number\">00000000</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>ffdf0330  dc76a788 <span class=\"token number\">00000000</span> <span class=\"token number\">00000000</span> <span class=\"token number\">00000000</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>ffdf0340  <span class=\"token number\">00000000</span> <span class=\"token number\">00000000</span> <span class=\"token number\">00000000</span> <span class=\"token number\">00000000</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>ffdf0350  <span class=\"token number\">00000000</span> <span class=\"token number\">00000000</span> <span class=\"token number\">00000000</span> <span class=\"token number\">00000000</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>ffdf0360  <span class=\"token number\">00000000</span> <span class=\"token number\">00000000</span> <span class=\"token number\">00000000</span> <span class=\"token number\">00000000</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>ffdf0370  <span class=\"token number\">00000000</span> <span class=\"token number\">00000000</span> <span class=\"token number\">00000000</span> <span class=\"token number\">00000000</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>kd<span class=\"token operator\">></span> uf <span class=\"token number\">7</span>c92e4f0</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>ntdll<span class=\"token operator\">!</span>KiFastSystemCall<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token number\">7</span>c92e4f0 <span class=\"token number\">8</span>bd4            mov     edx<span class=\"token punctuation\">,</span>esp</pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token number\">7</span>c92e4f2 <span class=\"token number\">0f</span><span class=\"token number\">34</span>            sysenter</pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token number\">7</span>c92e4f4 c3              ret</pre></td></tr></table></figure><p>由 windbg 的符号表可以发现，调用了  <code>KiFastSystemCall</code>  函数，这个函数也就三行汇编代码：把 esp 的值交给了 edx，然后调用 sysenter。</p>\n<p>这个函数就是快速调用。</p>\n<h1 id=\"快速调用与中断调用\"><a class=\"anchor\" href=\"#快速调用与中断调用\">#</a> 快速调用与中断调用</h1>\n<p>学了前面的保护模式后，我们知道如果想要提权，少不了更改 4 个值：CS/SS/ESP/EIP。所以不管是哪一种调用，其目的都是获取这四个值。</p>\n<p>中断调用是通过中断门进 0 环，此过程需要查 IDT 表和 TSS 表，涉及内存寻址。</p>\n<p>快速调用则是使用  <code>sysenter</code>  指令进 0 环，这种方式不需要查内存，而是直接从 CPU 的 MSR 寄存器中获取所需数据，相对中断调用更快，所以称为快速调用。</p>\n<hr />\n<p>中断门进 0 环，需要的 CS、EIP 在 IDT 表中，需要查内存（SS 与 ESP 由 TSS 提供），而 CPU 如果支持 sysenter 指令时，操作系统会提前将 CS/SS/ESP/EIP 的值存储在 MSR 寄存器中，sysenter 指令执行时，CPU 会将 MSR 寄存器中的值直接写入相关寄存器，没有读内存的过程，所以叫快速调用，但本质是一样的。</p>\n<p>其实，快速调用并不是一直存在的，在比较古老的 CPU 是不支持快速调用的。<br />\n它们进入内核的方式很简单粗暴，就是使用中断门。</p>\n<p>CPU 如何知道是否支持快速调用呢？当通过 eax=1 来执行 cpuid 指令时，处理器的特征信息被放在 ecx 和 edx 寄存器中，其中 edx 包含了一个 SEP 位（11 位），该位指明了当前处理器知否支持 sysenter/sysexit 指令，具体细节可以查看白皮书。</p>\n<h1 id=\"kifastsystemcall-与-kiintsystemcall\"><a class=\"anchor\" href=\"#kifastsystemcall-与-kiintsystemcall\">#</a> KiFastSystemCall 与 KiIntSystemCall</h1>\n<p>通过逆向汇编代码可以看出，不管 CPU 是否支持快速调用，它都是调用该地址。</p>\n<p>这就说明操作系统在初始化该结构体的时候必须先判断支不支持，然后填入适当的值。</p>\n<p>如果 CPU 支持快速调用，操作系统就会填入 KiFastSystemCall 函数的地址，我们可以看一下：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>_DWORD __stdcall KiFastSystemCall()</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>                public _KiFastSystemCall@0</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>_KiFastSystemCall@0 proc near           ; DATA XREF: .text:off_7C923428↑o</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                mov     edx, esp</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                sysenter</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>_KiFastSystemCall@0 endp</pre></td></tr></table></figure><p>如果 CPU 不支持快速调用，操作系统就会填入 KiIntSystemCall 函数的地址，我们可以看一下：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>_DWORD __stdcall KiIntSystemCall ()</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>                public _KiIntSystemCall@0</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>_KiIntSystemCall@0 proc near            ; DATA XREF: .text:off_7C923428↑o</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>arg_4           &#x3D; byte ptr  8</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                lea     edx, [esp+arg_4] ; 参数指针</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                int     2Eh             ; DOS 2+ internal - EXECUTE COMMAND</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                                        ; DS:SI -&gt; counted CR-terminated command string</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                retn</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t\t\t</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>_KiIntSystemCall@0 endp</pre></td></tr></table></figure><h1 id=\"重写-readprocessmemory-和-writeprocessmemory\"><a class=\"anchor\" href=\"#重写-readprocessmemory-和-writeprocessmemory\">#</a> 重写 ReadProcessMemory 和 WriteProcessMemory</h1>\n<p>首先分析一下这两个函数的调用流程</p>\n<h2 id=\"readprocessmemory-3环调用流程\"><a class=\"anchor\" href=\"#readprocessmemory-3环调用流程\">#</a> ReadProcessMemory 3 环调用流程</h2>\n<p>在 kernel32.dll 中</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>.text:7C8021D0 ; BOOL __stdcall ReadProcessMemory(HANDLE hProcess, LPCVOID lpBaseAddress, LPVOID lpBuffer, SIZE_T nSize, SIZE_T *lpNumberOfBytesRead)</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>.text:7C8021D0                 public _ReadProcessMemory@20</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>.text:7C8021D0 _ReadProcessMemory@20 proc near         ; CODE XREF: GetProcessVersion(x)+2F18B↓p</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>.text:7C8021D0                                         ; GetProcessVersion(x)+2F1AA↓p ...</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>.text:7C8021D0</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>.text:7C8021D0 hProcess        &#x3D; dword ptr  8</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>.text:7C8021D0 lpBaseAddress   &#x3D; dword ptr  0Ch</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>.text:7C8021D0 lpBuffer        &#x3D; dword ptr  10h</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>.text:7C8021D0 nSize           &#x3D; dword ptr  14h</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>.text:7C8021D0 lpNumberOfBytesRead&#x3D; dword ptr  18h</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>.text:7C8021D0</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>.text:7C8021D0                 mov     edi, edi</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>.text:7C8021D2                 push    ebp</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>.text:7C8021D3                 mov     ebp, esp</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>.text:7C8021D5                 lea     eax, [ebp+nSize]</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>.text:7C8021D8                 push    eax             ; NumberOfBytesRead</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>.text:7C8021D9                 push    [ebp+nSize]     ; NumberOfBytesToRead</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>.text:7C8021DC                 push    [ebp+lpBuffer]  ; Buffer</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>.text:7C8021DF                 push    [ebp+lpBaseAddress] ; BaseAddress</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>.text:7C8021E2                 push    [ebp+hProcess]  ; ProcessHandle</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>.text:7C8021E5                 call    ds:__imp__NtReadVirtualMemory@20 ; NtReadVirtualMemory(x,x,x,x,x)</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>.text:7C8021EB                 mov     ecx, [ebp+lpNumberOfBytesRead]</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>.text:7C8021EE                 test    ecx, ecx</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>.text:7C8021F0                 jnz     short loc_7C8021FD</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>.text:7C8021F2</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>.text:7C8021F2 loc_7C8021F2:                           ; CODE XREF: ReadProcessMemory(x,x,x,x,x)+32↓j</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>.text:7C8021F2                 test    eax, eax</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>.text:7C8021F4                 jl      short loc_7C802204</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>.text:7C8021F6                 xor     eax, eax</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>.text:7C8021F8                 inc     eax</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>.text:7C8021F9</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>.text:7C8021F9 loc_7C8021F9:                           ; CODE XREF: ReadProcessMemory(x,x,x,x,x)+3C↓j</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>.text:7C8021F9                 pop     ebp</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>.text:7C8021FA                 retn    14h</pre></td></tr></table></figure><p>发现其调用了 ntdll.dll 中的 NtReadVirtualMemory 函数</p>\n<p>查看 ntdll.dll 中的 NtReadVirtualMemory</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>.text:7C92D9E0 ; __stdcall NtReadVirtualMemory(x, x, x, x, x)</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>.text:7C92D9E0                 public _NtReadVirtualMemory@20</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>.text:7C92D9E0 _NtReadVirtualMemory@20 proc near       ; CODE XREF: LdrFindCreateProcessManifest(x,x,x,x,x)+1CC↓p</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>.text:7C92D9E0                                         ; LdrCreateOutOfProcessImage(x,x,x,x)+7C↓p ...</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>.text:7C92D9E0                 mov     eax, 0BAh       ; NtReadVirtualMemory</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>.text:7C92D9E5                 mov     edx, 7FFE0300h</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>.text:7C92D9EA                 call    dword ptr [edx]</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>.text:7C92D9EC                 retn    14h</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>.text:7C92D9EC _NtReadVirtualMemory@20 endp</pre></td></tr></table></figure><p>其堆栈变化为：</p>\n<p><img data-src=\"image004.png\" alt=\"\" /></p>\n<h2 id=\"rewriter3apicpp\"><a class=\"anchor\" href=\"#rewriter3apicpp\">#</a> RewriteR3API.cpp</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span>  <span class=\"token macro-name\">_CRT_SECURE_NO_WARNINGS</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;Windows.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 读进程内存（中断门调用）</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>BOOL WINAPI <span class=\"token function\">HbgReadProcessMemory_INT</span><span class=\"token punctuation\">(</span>HANDLE hProcess<span class=\"token punctuation\">,</span> LPCVOID lpBaseAddress<span class=\"token punctuation\">,</span> LPVOID lpBuffer<span class=\"token punctuation\">,</span> DWORD nSize<span class=\"token punctuation\">,</span> LPDWORD lpNumberOfBytesRead<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tLONG NtStatus<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t__asm</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token comment\">// 直接模拟 KiIntSystemCall</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\tlea edx<span class=\"token punctuation\">,</span> hProcess<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 要求 edx 存储最后入栈的参数</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\tmov eax<span class=\"token punctuation\">,</span> <span class=\"token number\">0xBA</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> <span class=\"token number\">0x2E</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\tmov NtStatus<span class=\"token punctuation\">,</span> eax<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lpNumberOfBytesRead <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t<span class=\"token operator\">*</span>lpNumberOfBytesRead <span class=\"token operator\">=</span> nSize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token comment\">// 错误检查</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>NtStatus <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> FALSE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token keyword\">return</span> TRUE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\">// 读进程内存（快速调用）</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>BOOL WINAPI <span class=\"token function\">HbgReadProcessMemory_FAST</span><span class=\"token punctuation\">(</span>HANDLE hProcess<span class=\"token punctuation\">,</span> LPCVOID lpBaseAddress<span class=\"token punctuation\">,</span> LPVOID lpBuffer<span class=\"token punctuation\">,</span> DWORD nSize<span class=\"token punctuation\">,</span> LPDWORD lpNumberOfBytesRead<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\tLONG NtStatus<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t__asm</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\t<span class=\"token comment\">// 模拟 ReadProcessMemory</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\tlea eax<span class=\"token punctuation\">,</span> nSize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\tpush eax<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\tpush nSize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\tpush lpBuffer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\tpush lpBaseAddress<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\tpush hProcess<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\tsub esp<span class=\"token punctuation\">,</span> <span class=\"token number\">0x04</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 模拟 ReadProcessMemory 里的 CALL NtReadVirtualMemory</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\t<span class=\"token comment\">// 模拟 NtReadVirtualMemory</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\tmov eax<span class=\"token punctuation\">,</span> <span class=\"token number\">0xBA</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\tpush NtReadVirtualMemoryReturn<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 模拟 NtReadVirtualMemory 函数里的 CALL [0x7FFE0300]</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t\t<span class=\"token comment\">// 模拟 KiFastSystemCall</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t\tmov edx<span class=\"token punctuation\">,</span> esp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t\t_emit <span class=\"token number\">0x0F</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// sysenter </span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t\t_emit <span class=\"token number\">0x34</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\tNtReadVirtualMemoryReturn<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t\tadd esp<span class=\"token punctuation\">,</span> <span class=\"token number\">0x18</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 模拟 NtReadVirtualMemory 返回到 ReadProcessMemory 时的 RETN 0x14</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t\tmov NtStatus<span class=\"token punctuation\">,</span> eax<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lpNumberOfBytesRead <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t\t<span class=\"token operator\">*</span>lpNumberOfBytesRead <span class=\"token operator\">=</span> nSize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t<span class=\"token comment\">// 错误检查</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>NtStatus <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> FALSE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t<span class=\"token keyword\">return</span> TRUE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre></pre></td></tr><tr><td data-num=\"66\"></td><td><pre><span class=\"token comment\">// 写进程内存（中断门调用）</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>BOOL WINAPI <span class=\"token function\">HbgWriteProcessMemory_INT</span><span class=\"token punctuation\">(</span>HANDLE hProcess<span class=\"token punctuation\">,</span> LPCVOID lpBaseAddress<span class=\"token punctuation\">,</span> LPVOID lpBuffer<span class=\"token punctuation\">,</span> DWORD nSize<span class=\"token punctuation\">,</span> LPDWORD lpNumberOfBytesWritten<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\tLONG NtStatus<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\t__asm</pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\t\tlea edx<span class=\"token punctuation\">,</span> hProcess<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>\t\tmov eax<span class=\"token punctuation\">,</span> <span class=\"token number\">0x115</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> <span class=\"token number\">0x2E</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\t\tmov NtStatus<span class=\"token punctuation\">,</span> eax<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lpNumberOfBytesWritten <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>\t\t<span class=\"token operator\">*</span>lpNumberOfBytesWritten <span class=\"token operator\">=</span> nSize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>\t<span class=\"token comment\">// 错误检查</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>NtStatus <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> FALSE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>\t<span class=\"token keyword\">return</span> TRUE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre></pre></td></tr><tr><td data-num=\"89\"></td><td><pre><span class=\"token comment\">// 写进程内存（快速调用）</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>BOOL WINAPI <span class=\"token function\">HbgWriteProcessMemory_FAST</span><span class=\"token punctuation\">(</span>HANDLE hProcess<span class=\"token punctuation\">,</span> LPCVOID lpBaseAddress<span class=\"token punctuation\">,</span> LPVOID lpBuffer<span class=\"token punctuation\">,</span> DWORD nSize<span class=\"token punctuation\">,</span> LPDWORD lpNumberOfBytesWritten<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>\tLONG NtStatus<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>\t__asm</pre></td></tr><tr><td data-num=\"94\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>\t\t<span class=\"token comment\">// 模拟 WriteProcessMemory</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>\t\tlea eax<span class=\"token punctuation\">,</span> nSize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>\t\tpush eax<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>\t\tpush nSize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>\t\tpush lpBuffer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>\t\tpush lpBaseAddress<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>\t\tpush hProcess<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>\t\tsub esp<span class=\"token punctuation\">,</span> <span class=\"token number\">0x04</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 模拟 WriteProcessMemory 里的 CALL NtWriteVirtualMemory</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>\t\t<span class=\"token comment\">// 模拟 NtWriteVirtualMemory</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>\t\tmov eax<span class=\"token punctuation\">,</span> <span class=\"token number\">0x115</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>\t\tpush NtWriteVirtualMemoryReturn<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 模拟 NtWriteVirtualMemory 函数里的 CALL [0x7FFE0300]</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>\t\t<span class=\"token comment\">// 模拟 KiFastSystemCall</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>\t\tmov edx<span class=\"token punctuation\">,</span> esp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>\t\t_emit <span class=\"token number\">0x0F</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// sysenter </span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>\t\t_emit <span class=\"token number\">0x34</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>\tNtWriteVirtualMemoryReturn<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>\t\tadd esp<span class=\"token punctuation\">,</span> <span class=\"token number\">0x18</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 模拟 NtWriteVirtualMemory 返回到 WriteProcessMemory 时的 RETN 0x14</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>\t\tmov NtStatus<span class=\"token punctuation\">,</span> eax<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lpNumberOfBytesWritten <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>\t\t<span class=\"token operator\">*</span>lpNumberOfBytesWritten <span class=\"token operator\">=</span> nSize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>\t<span class=\"token comment\">// 错误检查</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>NtStatus <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> FALSE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>\t<span class=\"token keyword\">return</span> TRUE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre></pre></td></tr><tr><td data-num=\"126\"></td><td><pre><span class=\"token comment\">// 提权函数：提升为 DEBUG 权限</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>BOOL <span class=\"token function\">EnableDebugPrivilege</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>\tHANDLE hToken<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>\tBOOL fOk <span class=\"token operator\">=</span> FALSE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">OpenProcessToken</span><span class=\"token punctuation\">(</span><span class=\"token function\">GetCurrentProcess</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> TOKEN_ADJUST_PRIVILEGES<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>hToken<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>\t\tTOKEN_PRIVILEGES tp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>\t\ttp<span class=\"token punctuation\">.</span>PrivilegeCount <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>\t\t<span class=\"token function\">LookupPrivilegeValue</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> SE_DEBUG_NAME<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>tp<span class=\"token punctuation\">.</span>Privileges<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>Luid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>\t\ttp<span class=\"token punctuation\">.</span>Privileges<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>Attributes <span class=\"token operator\">=</span> SE_PRIVILEGE_ENABLED<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>\t\t<span class=\"token function\">AdjustTokenPrivileges</span><span class=\"token punctuation\">(</span>hToken<span class=\"token punctuation\">,</span> FALSE<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>tp<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>tp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>\t\tfOk <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token function\">GetLastError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> ERROR_SUCCESS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>\t\t<span class=\"token function\">CloseHandle</span><span class=\"token punctuation\">(</span>hToken<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>\t<span class=\"token keyword\">return</span> fOk<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre></pre></td></tr><tr><td data-num=\"146\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>\t<span class=\"token function\">EnableDebugPrivilege</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre></pre></td></tr><tr><td data-num=\"150\"></td><td><pre>\tDWORD pid<span class=\"token punctuation\">,</span> addr<span class=\"token punctuation\">,</span> dwRead<span class=\"token punctuation\">,</span> dwWritten<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"151\"></td><td><pre>\t<span class=\"token keyword\">char</span> buff<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"依次输入PID和要读的线性地址（均为16进制）...\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"153\"></td><td><pre>\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%x %x\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>pid<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"154\"></td><td><pre>\t<span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"155\"></td><td><pre></pre></td></tr><tr><td data-num=\"156\"></td><td><pre>\t<span class=\"token comment\">// 测试两个版本的 ReadProcessMemory</span></pre></td></tr><tr><td data-num=\"157\"></td><td><pre>\t<span class=\"token function\">HbgReadProcessMemory_INT</span><span class=\"token punctuation\">(</span><span class=\"token function\">OpenProcess</span><span class=\"token punctuation\">(</span>PROCESS_ALL_ACCESS<span class=\"token punctuation\">,</span> FALSE<span class=\"token punctuation\">,</span> pid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>LPCVOID<span class=\"token punctuation\">)</span>addr<span class=\"token punctuation\">,</span> buff<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>dwRead<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"158\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"读取了%d个字节，内容是: \\\"%s\\\"\\n\"</span><span class=\"token punctuation\">,</span> dwRead<span class=\"token punctuation\">,</span> buff<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"159\"></td><td><pre>\t<span class=\"token function\">HbgReadProcessMemory_FAST</span><span class=\"token punctuation\">(</span><span class=\"token function\">OpenProcess</span><span class=\"token punctuation\">(</span>PROCESS_ALL_ACCESS<span class=\"token punctuation\">,</span> FALSE<span class=\"token punctuation\">,</span> pid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>LPCVOID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>addr <span class=\"token operator\">+</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> buff<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>dwRead<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"160\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"读取了%d个字节，内容是: \\\"%s\\\"\\n\"</span><span class=\"token punctuation\">,</span> dwRead<span class=\"token punctuation\">,</span> buff<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"161\"></td><td><pre></pre></td></tr><tr><td data-num=\"162\"></td><td><pre>\t<span class=\"token comment\">// 测试两个版本的 WriteProcessMemory</span></pre></td></tr><tr><td data-num=\"163\"></td><td><pre>\t<span class=\"token function\">HbgWriteProcessMemory_INT</span><span class=\"token punctuation\">(</span><span class=\"token function\">OpenProcess</span><span class=\"token punctuation\">(</span>PROCESS_ALL_ACCESS<span class=\"token punctuation\">,</span> FALSE<span class=\"token punctuation\">,</span> pid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>LPCVOID<span class=\"token punctuation\">)</span>addr<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>LPVOID<span class=\"token punctuation\">)</span><span class=\"token string\">\"##\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>dwWritten<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"164\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"写入了%d字节.\\n\"</span><span class=\"token punctuation\">,</span> dwWritten<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"165\"></td><td><pre>\t<span class=\"token function\">HbgWriteProcessMemory_FAST</span><span class=\"token punctuation\">(</span><span class=\"token function\">OpenProcess</span><span class=\"token punctuation\">(</span>PROCESS_ALL_ACCESS<span class=\"token punctuation\">,</span> FALSE<span class=\"token punctuation\">,</span> pid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>LPCVOID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>addr <span class=\"token operator\">+</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>LPVOID<span class=\"token punctuation\">)</span><span class=\"token string\">\"**\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>dwWritten<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"166\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"写入了%d字节.\\n\"</span><span class=\"token punctuation\">,</span> dwWritten<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"167\"></td><td><pre></pre></td></tr><tr><td data-num=\"168\"></td><td><pre>\t<span class=\"token comment\">// 再次读取，验证写入是否成功</span></pre></td></tr><tr><td data-num=\"169\"></td><td><pre>\t<span class=\"token function\">HbgReadProcessMemory_INT</span><span class=\"token punctuation\">(</span><span class=\"token function\">OpenProcess</span><span class=\"token punctuation\">(</span>PROCESS_ALL_ACCESS<span class=\"token punctuation\">,</span> FALSE<span class=\"token punctuation\">,</span> pid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>LPCVOID<span class=\"token punctuation\">)</span>addr<span class=\"token punctuation\">,</span> buff<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>dwRead<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"170\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"读取了%d个字节，内容是: \\\"%s\\\"\\n\"</span><span class=\"token punctuation\">,</span> dwRead<span class=\"token punctuation\">,</span> buff<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"171\"></td><td><pre>\t<span class=\"token function\">HbgReadProcessMemory_FAST</span><span class=\"token punctuation\">(</span><span class=\"token function\">OpenProcess</span><span class=\"token punctuation\">(</span>PROCESS_ALL_ACCESS<span class=\"token punctuation\">,</span> FALSE<span class=\"token punctuation\">,</span> pid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>LPCVOID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>addr <span class=\"token operator\">+</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> buff<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>dwRead<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"172\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"读取了%d个字节，内容是: \\\"%s\\\"\\n\"</span><span class=\"token punctuation\">,</span> dwRead<span class=\"token punctuation\">,</span> buff<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"173\"></td><td><pre></pre></td></tr><tr><td data-num=\"174\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bye!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"175\"></td><td><pre>\t<span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"176\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"177\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"testrewriter3apicpp\"><a class=\"anchor\" href=\"#testrewriter3apicpp\">#</a> TestRewriteR3API.cpp</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;windows.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;Tlhelp32.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span>   </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 获取进程自身的 PID</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    HANDLE hSnapshot <span class=\"token operator\">=</span> <span class=\"token function\">CreateToolhelp32Snapshot</span><span class=\"token punctuation\">(</span>TH32CS_SNAPPROCESS<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>INVALID_HANDLE_VALUE <span class=\"token operator\">==</span> hSnapshot<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    PROCESSENTRY32 pi<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    pi<span class=\"token punctuation\">.</span>dwSize <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>PROCESSENTRY32<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 第一次使用必须初始化成员</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    BOOL bRet <span class=\"token operator\">=</span> <span class=\"token function\">Process32First</span><span class=\"token punctuation\">(</span>hSnapshot<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>pi<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>bRet<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">strcmp</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"TestReWriteR3API.exe\"</span><span class=\"token punctuation\">,</span> pi<span class=\"token punctuation\">.</span>szExeFile<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"进程ID = %X \\r\\n\"</span><span class=\"token punctuation\">,</span> pi<span class=\"token punctuation\">.</span>th32ProcessID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        bRet <span class=\"token operator\">=</span> <span class=\"token function\">Process32Next</span><span class=\"token punctuation\">(</span>hSnapshot<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>pi<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token function\">CloseHandle</span><span class=\"token punctuation\">(</span>hSnapshot<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">char</span> str<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"菜就多练练\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%p--%s\\n\"</span><span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>结果：</p>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<p>并且查看导入表中并没有 ReadProcessMemory 和 WriteProcessMemory。</p>\n<p><img data-src=\"image002.png\" alt=\"\" /></p>\n<p><img data-src=\"image003.png\" alt=\"\" /></p>\n<h1 id=\"reference\"><a class=\"anchor\" href=\"#reference\">#</a> Reference</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0t3YW5zeS9hcnRpY2xlL2RldGFpbHMvMTA5MzQxNzk0\">https://blog.csdn.net/Kwansy/article/details/109341794</span></p>\n",
            "tags": [
                "快速调用",
                "中断调用",
                "分析ReadProcessMemory",
                "KiFastSystemCall",
                "KiIntSystemCall",
                "重写3环"
            ]
        },
        {
            "id": "https://or0kit.github.io/Bin/Core/Drive-Development/%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91-%E9%9A%90%E8%97%8F%E9%A9%B1%E5%8A%A8/",
            "url": "https://or0kit.github.io/Bin/Core/Drive-Development/%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91-%E9%9A%90%E8%97%8F%E9%A9%B1%E5%8A%A8/",
            "title": "驱动开发-隐藏驱动",
            "date_published": "2021-12-06T14:13:08.000Z",
            "content_html": "<h1 id=\"楔子\"><a class=\"anchor\" href=\"#楔子\">#</a> 楔子</h1>\n<p>编写一个 0 环断链的驱动代码</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 遍历内核模块</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;ntddk.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_LDR_DATA_TABLE_ENTRY</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tLIST_ENTRY InLoadOrderLinks<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tLIST_ENTRY InMemoryOrderLinks<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tLIST_ENTRY InInitializationOrderLinks<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tPVOID DllBase<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tPVOID EntryPoint<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tUINT32 SizeOfImage<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\tUNICODE_STRING FullDllName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tUNICODE_STRING BaseDllName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tUINT32 Flags<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tUINT16 LoadCount<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tUINT16 TlsIndex<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\tLIST_ENTRY HashLinks<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\tPVOID SectionPointer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\tUINT32 CheckSum<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\tUINT32 TimeDateStamp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\tPVOID LoadedImports<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\tPVOID EntryPointActivationContext<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\tPVOID PatchInformation<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span> LDR_DATA_TABLE_ENTRY<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span> PLDR_DATA_TABLE_ENTRY<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>VOID <span class=\"token function\">DriverUnload</span><span class=\"token punctuation\">(</span>PDRIVER_OBJECT pdriver<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是驱动，我卸载了\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>NTSTATUS <span class=\"token function\">DriverEntry</span><span class=\"token punctuation\">(</span>PDRIVER_OBJECT pdriver<span class=\"token punctuation\">,</span> PUNICODE_STRING reg_path<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是驱动，我运行了\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\tPLDR_DATA_TABLE_ENTRY pLdtePre<span class=\"token punctuation\">;</span> <span class=\"token comment\">// </span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\tPLDR_DATA_TABLE_ENTRY pLdteCur<span class=\"token punctuation\">;</span> <span class=\"token comment\">// </span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\tPLDR_DATA_TABLE_ENTRY pLdteNex<span class=\"token punctuation\">;</span> <span class=\"token comment\">// </span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\tpLdteCur <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PLDR_DATA_TABLE_ENTRY<span class=\"token punctuation\">)</span>pdriver<span class=\"token operator\">-></span>DriverSection<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\tpLdtePre <span class=\"token operator\">=</span> pLdteCur<span class=\"token operator\">-></span>InLoadOrderLinks<span class=\"token punctuation\">.</span>Blink<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\tpLdteNex <span class=\"token operator\">=</span> pLdteCur<span class=\"token operator\">-></span>InLoadOrderLinks<span class=\"token punctuation\">.</span>Flink<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\tpLdtePre<span class=\"token operator\">-></span>InLoadOrderLinks<span class=\"token punctuation\">.</span>Flink <span class=\"token operator\">=</span> pLdteCur<span class=\"token operator\">-></span>InLoadOrderLinks<span class=\"token punctuation\">.</span>Flink<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\tpLdteNex<span class=\"token operator\">-></span>InLoadOrderLinks<span class=\"token punctuation\">.</span>Blink <span class=\"token operator\">=</span> pLdteCur<span class=\"token operator\">-></span>InLoadOrderLinks<span class=\"token punctuation\">.</span>Blink<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\tpdriver<span class=\"token operator\">-></span>DriverUnload <span class=\"token operator\">=</span> DriverUnload<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t<span class=\"token keyword\">return</span> STATUS_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>可是在 PCHunter32 中依然可以查得到。</p>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<p>这是为什么呢？<br />\n这时我们就要去分析驱动是如何加载的了，在代码中下个断点，在 windbg 中查看堆栈，因为堆栈中有先前调用的函数的返回地址。</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kd&gt; k</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> # ChildEBP RetAddr  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>00 ba503c84 805823af DriverHidden!DriverEntry+0xf [F:\\Text_Files\\Driver\\DriverHidden\\main.c @ 34] </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>01 ba503d54 805824bf nt!IopLoadDriver+0x66d</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>02 ba503d7c 80539923 nt!IopLoadUnloadDriver+0x45</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>03 ba503dac 805d0fee nt!ExpWorkerThread+0xef</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>04 ba503ddc 8054720e nt!PspSystemThreadStartup+0x34</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>05 00000000 00000000 nt!KiThreadStartup+0x16</pre></td></tr></table></figure><p>发现驱动运行前，系统调用了  <code>IopLoadDriver</code>  函数。</p>\n<h1 id=\"逆向分析ioploaddriver函数\"><a class=\"anchor\" href=\"#逆向分析ioploaddriver函数\">#</a> 逆向分析 IopLoadDriver 函数</h1>\n<p>在 IDA 中逆向分析一下此函数，发现此函数的流程非常复杂：</p>\n<p><img data-src=\"image002.png\" alt=\"\" /></p>\n<p><code>F5</code>  一下</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> __stdcall <span class=\"token function\">IopLoadDriver</span><span class=\"token punctuation\">(</span>HANDLE KeyHandle<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> a2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> a3<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> a4<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  NTSTATUS v4<span class=\"token punctuation\">;</span> <span class=\"token comment\">// eax</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">unsigned</span> __int16 <span class=\"token operator\">*</span>v5<span class=\"token punctuation\">;</span> <span class=\"token comment\">// esi</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">unsigned</span> __int16 <span class=\"token operator\">*</span>v6<span class=\"token punctuation\">;</span> <span class=\"token comment\">// eax</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span> <span class=\"token comment\">// edi</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  PVOID v8<span class=\"token punctuation\">;</span> <span class=\"token comment\">// esi</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">int</span> v10<span class=\"token punctuation\">;</span> <span class=\"token comment\">// eax</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">int</span> v11<span class=\"token punctuation\">;</span> <span class=\"token comment\">// eax</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">unsigned</span> __int16 <span class=\"token operator\">*</span>v12<span class=\"token punctuation\">;</span> <span class=\"token comment\">// esi</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  PIMAGE_NT_HEADERS v13<span class=\"token punctuation\">;</span> <span class=\"token comment\">// eax</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>v14<span class=\"token punctuation\">;</span> <span class=\"token comment\">// ecx</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  ULONG v15<span class=\"token punctuation\">;</span> <span class=\"token comment\">// edi</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token keyword\">unsigned</span> __int16 <span class=\"token operator\">*</span>v16<span class=\"token punctuation\">;</span> <span class=\"token comment\">// eax</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  PVOID v17<span class=\"token punctuation\">;</span> <span class=\"token comment\">// eax</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token keyword\">int</span> v18<span class=\"token punctuation\">;</span> <span class=\"token comment\">// eax</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token keyword\">int</span> v19<span class=\"token punctuation\">;</span> <span class=\"token comment\">// eax</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  _DWORD <span class=\"token operator\">*</span>v20<span class=\"token punctuation\">;</span> <span class=\"token comment\">// eax</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span>__stdcall <span class=\"token operator\">*</span>v21<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>ULONG<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// eax</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token keyword\">int</span> v22<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+Ch] [ebp-B4h] BYREF</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token keyword\">int</span> v23<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+10h] [ebp-B0h]</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_UNICODE_STRING</span> <span class=\"token operator\">*</span>v24<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+14h] [ebp-ACh]</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token keyword\">int</span> v25<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+18h] [ebp-A8h]</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token keyword\">int</span> v26<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+1Ch] [ebp-A4h]</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token keyword\">int</span> v27<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+20h] [ebp-A0h]</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  ULONG v28<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+24h] [ebp-9Ch] BYREF</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  PVOID v29<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+28h] [ebp-98h] BYREF</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  PVOID v30<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+2Ch] [ebp-94h]</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  PVOID Object<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+30h] [ebp-90h] BYREF</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_UNICODE_STRING</span> v32<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+34h] [ebp-8Ch] BYREF</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_UNICODE_STRING</span> DestinationString<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+3Ch] [ebp-84h] BYREF</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  PVOID P<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+44h] [ebp-7Ch] BYREF</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>  ULONG ResultLength<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+48h] [ebp-78h] BYREF</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>  HANDLE Handle<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+4Ch] [ebp-74h]</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>  PVOID BaseAddress<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+50h] [ebp-70h] BYREF</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>  HANDLE v38<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+54h] [ebp-6Ch] BYREF</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>  <span class=\"token keyword\">int</span> v39<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+58h] [ebp-68h] BYREF</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>  PVOID v40<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+5Ch] [ebp-64h]</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>  ULONG ReturnLength<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+60h] [ebp-60h] BYREF</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>  <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_UNICODE_STRING</span> Destination<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+64h] [ebp-5Ch] BYREF</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>  NTSTATUS v43<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+6Ch] [ebp-54h]</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>  <span class=\"token keyword\">int</span> KeyValueInformation<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+70h] [ebp-50h] BYREF</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>  v29 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PVOID<span class=\"token punctuation\">)</span>a4<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>  <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>_DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>a4 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>  Handle <span class=\"token operator\">=</span> KeyHandle<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>  v30 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>  v39 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>  v40 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>  v32<span class=\"token punctuation\">.</span>Buffer <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>  Destination<span class=\"token punctuation\">.</span>Buffer <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>  v4 <span class=\"token operator\">=</span> <span class=\"token function\">NtQueryKey</span><span class=\"token punctuation\">(</span>KeyHandle<span class=\"token punctuation\">,</span> KeyBasicInformation<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>ResultLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> v4 <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">2147483643</span> <span class=\"token operator\">&amp;&amp;</span> v4 <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1073741789</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    v43 <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1073741472</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>LABEL_82<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token function\">HeadlessKernelAddLogEntry</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token keyword\">goto</span> LABEL_22<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>  v5 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> __int16 <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">ExAllocatePoolWithTag</span><span class=\"token punctuation\">(</span>NonPagedPool<span class=\"token punctuation\">,</span> ResultLength <span class=\"token operator\">+</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x20206F49u</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>  v30 <span class=\"token operator\">=</span> v5<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span>v5 <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>LABEL_60<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    v43 <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1073741670</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    <span class=\"token keyword\">goto</span> LABEL_82<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>  v43 <span class=\"token operator\">=</span> <span class=\"token function\">NtQueryKey</span><span class=\"token punctuation\">(</span>Handle<span class=\"token punctuation\">,</span> KeyBasicInformation<span class=\"token punctuation\">,</span> v5<span class=\"token punctuation\">,</span> ResultLength<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>ResultLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> v43 <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    Destination<span class=\"token punctuation\">.</span>Length <span class=\"token operator\">=</span> v5<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    Destination<span class=\"token punctuation\">.</span>MaximumLength <span class=\"token operator\">=</span> Destination<span class=\"token punctuation\">.</span>Length <span class=\"token operator\">+</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>    Destination<span class=\"token punctuation\">.</span>Buffer <span class=\"token operator\">=</span> v5 <span class=\"token operator\">+</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    v6 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> __int16 <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">ExAllocatePoolWithTag</span><span class=\"token punctuation\">(</span>PagedPool<span class=\"token punctuation\">,</span> Destination<span class=\"token punctuation\">.</span>Length <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x20206F49u</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    v40 <span class=\"token operator\">=</span> v6<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> v6 <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>      <span class=\"token function\">LOWORD</span><span class=\"token punctuation\">(</span>v39<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> Destination<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>      <span class=\"token function\">HIWORD</span><span class=\"token punctuation\">(</span>v39<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> Destination<span class=\"token punctuation\">.</span>Length <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>      <span class=\"token function\">qmemcpy</span><span class=\"token punctuation\">(</span>v6<span class=\"token punctuation\">,</span> Destination<span class=\"token punctuation\">.</span>Buffer<span class=\"token punctuation\">,</span> Destination<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>      <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_WORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>v40 <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> __int16<span class=\"token punctuation\">)</span>v39 <span class=\"token operator\">>></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>    <span class=\"token function\">RtlAppendUnicodeToString</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>Destination<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>off_4A9CE2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>    <span class=\"token function\">HeadlessKernelAddLogEntry</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>Destination<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> a2 <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> InitSafeBootMode <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>        <span class=\"token function\">RtlInitUnicodeString</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>DestinationString<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>word_4A9CEE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>        <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>KeyValueInformation<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x4Cu</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token function\">NtQueryValueKey</span><span class=\"token punctuation\">(</span>Handle<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>DestinationString<span class=\"token punctuation\">,</span> KeyValuePartialInformation<span class=\"token punctuation\">,</span> KeyValueInformation<span class=\"token punctuation\">,</span> <span class=\"token number\">0x4Cu</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>v28<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>          <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>DestinationString<span class=\"token punctuation\">.</span>Length <span class=\"token operator\">=</span> <span class=\"token function\">LOWORD</span><span class=\"token punctuation\">(</span>KeyValueInformation<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>              DestinationString<span class=\"token punctuation\">.</span>MaximumLength <span class=\"token operator\">=</span> <span class=\"token function\">LOWORD</span><span class=\"token punctuation\">(</span>KeyValueInformation<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>              DestinationString<span class=\"token punctuation\">.</span>Buffer <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> __int16 <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>KeyValueInformation<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>              <span class=\"token operator\">!</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> __int8<span class=\"token punctuation\">)</span><span class=\"token function\">IopSafebootDriverLoad</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>DestinationString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> __int8<span class=\"token punctuation\">)</span><span class=\"token function\">IopSafebootDriverLoad</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>Destination<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>          <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>            <span class=\"token function\">IopBootLog</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>Destination<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>            <span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SAFEBOOT: skipping device = %wZ(%wZ)\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>Destination<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>DestinationString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>            <span class=\"token function\">HeadlessKernelAddLogEntry</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token function\">xHalReferenceHandler</span><span class=\"token punctuation\">(</span>KeyValueInformation<span class=\"token punctuation\">[</span><span class=\"token number\">19</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> v22<span class=\"token punctuation\">,</span> v23<span class=\"token punctuation\">,</span> v24<span class=\"token punctuation\">,</span> v25<span class=\"token punctuation\">,</span> v26<span class=\"token punctuation\">,</span> v27<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>    <span class=\"token function\">ExAcquireResourceSharedLite</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>PsLoadedModuleResource<span class=\"token punctuation\">,</span> <span class=\"token number\">1u</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> i <span class=\"token operator\">=</span> PsLoadedModuleList<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>i <span class=\"token operator\">!=</span> <span class=\"token operator\">&amp;</span>PsLoadedModuleList<span class=\"token punctuation\">;</span> i <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>_DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>i <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token function\">RtlEqualString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> STRING <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>Destination<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> STRING <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">36</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1u</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>        v43 <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1073741554</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>        <span class=\"token function\">ExReleaseResourceLite</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>PsLoadedModuleResource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>        <span class=\"token function\">IopBootLog</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>Destination<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>        Destination<span class=\"token punctuation\">.</span>Buffer <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>        <span class=\"token keyword\">goto</span> LABEL_21<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>    <span class=\"token function\">ExReleaseResourceLite</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>PsLoadedModuleResource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>    v43 <span class=\"token operator\">=</span> <span class=\"token function\">IopBuildFullDriverPath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>v39<span class=\"token punctuation\">,</span> Handle<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>Destination<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> v43 <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>      Destination<span class=\"token punctuation\">.</span>Buffer <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>      <span class=\"token keyword\">goto</span> LABEL_80<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>    v43 <span class=\"token operator\">=</span> <span class=\"token function\">IopGetDriverNameFromKeyNode</span><span class=\"token punctuation\">(</span>Handle<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>v32<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> v43 <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>      v24 <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>v32<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>      v22 <span class=\"token operator\">=</span> <span class=\"token number\">24</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>      v23 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>      v25 <span class=\"token operator\">=</span> <span class=\"token number\">16</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>      v26 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>      v27 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>      v10 <span class=\"token operator\">=</span> <span class=\"token function\">MmLoadSystemImage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ULONG<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>Destination<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>P<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>BaseAddress<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>      v43 <span class=\"token operator\">=</span> v10<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> v10 <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> v10 <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1073741554</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>          v43 <span class=\"token operator\">=</span> <span class=\"token function\">ObOpenObjectByName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>v22<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>IoDriverObjectType<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>v38<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> v43 <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>          <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>            <span class=\"token function\">IopBootLog</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>Destination<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> v43 <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1073741772</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre>              v43 <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1073740914</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>LABEL_80<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> v43 <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre>              <span class=\"token keyword\">goto</span> LABEL_21<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre>            <span class=\"token keyword\">goto</span> LABEL_81<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"151\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre>          <span class=\"token function\">LOBYTE</span><span class=\"token punctuation\">(</span>DestinationString<span class=\"token punctuation\">.</span>Buffer<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token function\">KeGetCurrentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>PreviousMode<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"153\"></td><td><pre>          v43 <span class=\"token operator\">=</span> <span class=\"token function\">ObReferenceObjectByHandle</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"154\"></td><td><pre>                  v38<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"155\"></td><td><pre>                  <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"156\"></td><td><pre>                  IoDriverObjectType<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"157\"></td><td><pre>                  <span class=\"token punctuation\">(</span>KPROCESSOR_MODE<span class=\"token punctuation\">)</span>DestinationString<span class=\"token punctuation\">.</span>Buffer<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"158\"></td><td><pre>                  <span class=\"token operator\">&amp;</span>Object<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"159\"></td><td><pre>                  <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"160\"></td><td><pre>          <span class=\"token function\">NtClose</span><span class=\"token punctuation\">(</span>v38<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"161\"></td><td><pre>          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> v43 <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"162\"></td><td><pre>          <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"163\"></td><td><pre>            v43 <span class=\"token operator\">=</span> <span class=\"token function\">IopResurrectDriver</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"164\"></td><td><pre>            <span class=\"token function\">ObfDereferenceObject</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"165\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"166\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"167\"></td><td><pre>LABEL_55<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"168\"></td><td><pre>        <span class=\"token function\">IopBootLog</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>Destination<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"169\"></td><td><pre>        <span class=\"token keyword\">goto</span> LABEL_80<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"170\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"171\"></td><td><pre>      <span class=\"token function\">RtlImageNtHeader</span><span class=\"token punctuation\">(</span>BaseAddress<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"172\"></td><td><pre>      v43 <span class=\"token operator\">=</span> <span class=\"token function\">IopPrepareDriverLoading</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>v39<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>Handle<span class=\"token punctuation\">,</span> BaseAddress<span class=\"token punctuation\">,</span> a3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"173\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> v43 <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"174\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"175\"></td><td><pre>        <span class=\"token function\">MmUnloadSystemImage</span><span class=\"token punctuation\">(</span>P<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"176\"></td><td><pre>        <span class=\"token keyword\">goto</span> LABEL_55<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"177\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"178\"></td><td><pre>      <span class=\"token function\">LOBYTE</span><span class=\"token punctuation\">(</span>DestinationString<span class=\"token punctuation\">.</span>Buffer<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token function\">KeGetCurrentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>PreviousMode<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"179\"></td><td><pre>      v11 <span class=\"token operator\">=</span> <span class=\"token function\">ObCreateObject</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"180\"></td><td><pre>              <span class=\"token punctuation\">(</span>KPROCESSOR_MODE<span class=\"token punctuation\">)</span>DestinationString<span class=\"token punctuation\">.</span>Buffer<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"181\"></td><td><pre>              <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>IoDriverObjectType<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"182\"></td><td><pre>              <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>v22<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"183\"></td><td><pre>              <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"184\"></td><td><pre>              <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"185\"></td><td><pre>              <span class=\"token number\">196</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"186\"></td><td><pre>              <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"187\"></td><td><pre>              <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"188\"></td><td><pre>              <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>DestinationString<span class=\"token punctuation\">.</span>Buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"189\"></td><td><pre>      v12 <span class=\"token operator\">=</span> DestinationString<span class=\"token punctuation\">.</span>Buffer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"190\"></td><td><pre>      v43 <span class=\"token operator\">=</span> v11<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"191\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> v11 <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"192\"></td><td><pre>        <span class=\"token keyword\">goto</span> LABEL_55<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"193\"></td><td><pre>      <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>DestinationString<span class=\"token punctuation\">.</span>Buffer<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xC4u</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"194\"></td><td><pre>      <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>v12 <span class=\"token operator\">+</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> v12 <span class=\"token operator\">+</span> <span class=\"token number\">84</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"195\"></td><td><pre>      <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>v12 <span class=\"token operator\">+</span> <span class=\"token number\">42</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> v12<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"196\"></td><td><pre>      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> ReturnLength <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> ReturnLength <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0x1B</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>ReturnLength <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"197\"></td><td><pre>        <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>_DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>v12<span class=\"token punctuation\">[</span><span class=\"token number\">2</span> <span class=\"token operator\">*</span> ReturnLength <span class=\"token operator\">+</span> <span class=\"token number\">28</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> IopInvalidDeviceRequest<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"198\"></td><td><pre>      <span class=\"token operator\">*</span>v12 <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"199\"></td><td><pre>      v12<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">168</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"200\"></td><td><pre>      v13 <span class=\"token operator\">=</span> <span class=\"token function\">RtlImageNtHeader</span><span class=\"token punctuation\">(</span>BaseAddress<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"201\"></td><td><pre>      v14 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>BaseAddress <span class=\"token operator\">+</span> v13<span class=\"token operator\">-></span>OptionalHeader<span class=\"token punctuation\">.</span>AddressOfEntryPoint<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"202\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span>v13<span class=\"token operator\">-></span>OptionalHeader<span class=\"token punctuation\">.</span>DllCharacteristics <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x2000</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"203\"></td><td><pre>        <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>v12 <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|=</span> <span class=\"token number\">2u</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"204\"></td><td><pre>      <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>v12 <span class=\"token operator\">+</span> <span class=\"token number\">11</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> v14<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"205\"></td><td><pre>      <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>v12 <span class=\"token operator\">+</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> P<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"206\"></td><td><pre>      <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>v12 <span class=\"token operator\">+</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> BaseAddress<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"207\"></td><td><pre>      <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>v12 <span class=\"token operator\">+</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> v13<span class=\"token operator\">-></span>OptionalHeader<span class=\"token punctuation\">.</span>SizeOfImage<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"208\"></td><td><pre>      v43 <span class=\"token operator\">=</span> <span class=\"token function\">ObInsertObject</span><span class=\"token punctuation\">(</span>v12<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1u</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>v38<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"209\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> v43 <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"210\"></td><td><pre>        <span class=\"token keyword\">goto</span> LABEL_55<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"211\"></td><td><pre>      <span class=\"token function\">ObReferenceObjectByHandle</span><span class=\"token punctuation\">(</span>v38<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> IoDriverObjectType<span class=\"token punctuation\">,</span> <span class=\"token function\">KeGetCurrentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>PreviousMode<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>PVOID <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>v28<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"212\"></td><td><pre>      v15 <span class=\"token operator\">=</span> v28<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"213\"></td><td><pre>      DestinationString<span class=\"token punctuation\">.</span>Buffer <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> __int16 <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>v28<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"214\"></td><td><pre>      <span class=\"token function\">NtClose</span><span class=\"token punctuation\">(</span>v38<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"215\"></td><td><pre>      <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>_DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>v15 <span class=\"token operator\">+</span> <span class=\"token number\">36</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>CmRegistryMachineHardwareDescriptionSystemName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"216\"></td><td><pre>      v16 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> __int16 <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">ExAllocatePoolWithTag</span><span class=\"token punctuation\">(</span>PagedPool<span class=\"token punctuation\">,</span> v32<span class=\"token punctuation\">.</span>MaximumLength<span class=\"token punctuation\">,</span> <span class=\"token number\">0x20206F49u</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"217\"></td><td><pre>      <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>_DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>v15 <span class=\"token operator\">+</span> <span class=\"token number\">32</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> v16<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"218\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> v16 <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"219\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"220\"></td><td><pre>        <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>_WORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>v15 <span class=\"token operator\">+</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> v32<span class=\"token punctuation\">.</span>MaximumLength<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"221\"></td><td><pre>        <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>_WORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>v15 <span class=\"token operator\">+</span> <span class=\"token number\">28</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> v32<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"222\"></td><td><pre>        <span class=\"token function\">qmemcpy</span><span class=\"token punctuation\">(</span>v16<span class=\"token punctuation\">,</span> v32<span class=\"token punctuation\">.</span>Buffer<span class=\"token punctuation\">,</span> v32<span class=\"token punctuation\">.</span>MaximumLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"223\"></td><td><pre>        v15 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>ULONG<span class=\"token punctuation\">)</span>DestinationString<span class=\"token punctuation\">.</span>Buffer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"224\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"225\"></td><td><pre>      v17 <span class=\"token operator\">=</span> <span class=\"token function\">ExAllocatePoolWithTag</span><span class=\"token punctuation\">(</span>NonPagedPool<span class=\"token punctuation\">,</span> <span class=\"token number\">0x1000u</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x20206F49u</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"226\"></td><td><pre>      Object <span class=\"token operator\">=</span> v17<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"227\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span>v17 <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"228\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"229\"></td><td><pre>        <span class=\"token function\">ObMakeTemporaryObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>PVOID<span class=\"token punctuation\">)</span>v15<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"230\"></td><td><pre>        <span class=\"token function\">ObfDereferenceObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>PVOID<span class=\"token punctuation\">)</span>v15<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"231\"></td><td><pre>        <span class=\"token keyword\">goto</span> LABEL_60<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"232\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"233\"></td><td><pre>      v43 <span class=\"token operator\">=</span> <span class=\"token function\">NtQueryObject</span><span class=\"token punctuation\">(</span>Handle<span class=\"token punctuation\">,</span> ObjectNameInformation<span class=\"token punctuation\">,</span> v17<span class=\"token punctuation\">,</span> <span class=\"token number\">0x1000u</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>ReturnLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"234\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> v43 <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"235\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"236\"></td><td><pre>        <span class=\"token function\">ObMakeTemporaryObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>PVOID<span class=\"token punctuation\">)</span>v15<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"237\"></td><td><pre>        <span class=\"token function\">ObfDereferenceObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>PVOID<span class=\"token punctuation\">)</span>v15<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"238\"></td><td><pre>        <span class=\"token function\">ExFreePoolWithTag</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"239\"></td><td><pre>        <span class=\"token keyword\">goto</span> LABEL_80<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"240\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"241\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> v40 <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"242\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"243\"></td><td><pre>        <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>_DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>_DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>v15 <span class=\"token operator\">+</span> <span class=\"token number\">24</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token function\">ExAllocatePoolWithTag</span><span class=\"token punctuation\">(</span>NonPagedPool<span class=\"token punctuation\">,</span> <span class=\"token function\">HIWORD</span><span class=\"token punctuation\">(</span>v39<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x20206F49u</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"244\"></td><td><pre>        v18 <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>_DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>v15 <span class=\"token operator\">+</span> <span class=\"token number\">24</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"245\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>_DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>v18 <span class=\"token operator\">+</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"246\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"247\"></td><td><pre>          <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>_WORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>v18 <span class=\"token operator\">+</span> <span class=\"token number\">14</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token function\">HIWORD</span><span class=\"token punctuation\">(</span>v39<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"248\"></td><td><pre>          <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>_WORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>_DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>v15 <span class=\"token operator\">+</span> <span class=\"token number\">24</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">12</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> v39<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"249\"></td><td><pre>          <span class=\"token function\">qmemcpy</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>_DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>v15 <span class=\"token operator\">+</span> <span class=\"token number\">24</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> v40<span class=\"token punctuation\">,</span> <span class=\"token function\">HIWORD</span><span class=\"token punctuation\">(</span>v39<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"250\"></td><td><pre>          v15 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>ULONG<span class=\"token punctuation\">)</span>DestinationString<span class=\"token punctuation\">.</span>Buffer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"251\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"252\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"253\"></td><td><pre>      v19 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span>__stdcall <span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>ULONG<span class=\"token punctuation\">,</span> PVOID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>v15 <span class=\"token operator\">+</span> <span class=\"token number\">44</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>v15<span class=\"token punctuation\">,</span> Object<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"254\"></td><td><pre>      v43 <span class=\"token operator\">=</span> v19<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"255\"></td><td><pre>      <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>_DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>v29 <span class=\"token operator\">=</span> v19<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"256\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> v19 <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"257\"></td><td><pre>        v43 <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1073740955</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"258\"></td><td><pre>      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> ReturnLength <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> ReturnLength <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0x1B</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>ReturnLength <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"259\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"260\"></td><td><pre>        v20 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>_DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>v15 <span class=\"token operator\">+</span> <span class=\"token number\">4</span> <span class=\"token operator\">*</span> ReturnLength <span class=\"token operator\">+</span> <span class=\"token number\">56</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"261\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span><span class=\"token operator\">*</span>v20 <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"262\"></td><td><pre>          <span class=\"token operator\">*</span>v20 <span class=\"token operator\">=</span> IopInvalidDeviceRequest<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"263\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"264\"></td><td><pre>      <span class=\"token function\">ExFreePoolWithTag</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"265\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> v43 <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"266\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"267\"></td><td><pre>LABEL_78<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"268\"></td><td><pre>        <span class=\"token function\">ObMakeTemporaryObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>PVOID<span class=\"token punctuation\">)</span>v15<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"269\"></td><td><pre>        <span class=\"token function\">ObfDereferenceObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>PVOID<span class=\"token punctuation\">)</span>v15<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"270\"></td><td><pre>        <span class=\"token keyword\">goto</span> LABEL_80<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"271\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"272\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> __int8<span class=\"token punctuation\">)</span><span class=\"token function\">IopIsLegacyDriver</span><span class=\"token punctuation\">(</span>v15<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"273\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"274\"></td><td><pre>        v43 <span class=\"token operator\">=</span> <span class=\"token function\">IopPnpDriverStarted</span><span class=\"token punctuation\">(</span>v15<span class=\"token punctuation\">,</span> Handle<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>v39<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"275\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> v43 <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"276\"></td><td><pre>          <span class=\"token keyword\">goto</span> LABEL_79<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"277\"></td><td><pre>        v21 <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span>__stdcall <span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>ULONG<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>v15 <span class=\"token operator\">+</span> <span class=\"token number\">52</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"278\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> v21 <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"279\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"280\"></td><td><pre>          <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>_DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>v15 <span class=\"token operator\">+</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|=</span> <span class=\"token number\">1u</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"281\"></td><td><pre>          <span class=\"token function\">v21</span><span class=\"token punctuation\">(</span>v15<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"282\"></td><td><pre>          <span class=\"token function\">IopBootLog</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>Destination<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"283\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"284\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"285\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> v43 <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"286\"></td><td><pre>        <span class=\"token keyword\">goto</span> LABEL_78<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"287\"></td><td><pre>LABEL_79<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"288\"></td><td><pre>      <span class=\"token function\">IopBootLog</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>Destination<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"289\"></td><td><pre>      <span class=\"token function\">MmFreeDriverInitialization</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>_DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>v15 <span class=\"token operator\">+</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"290\"></td><td><pre>      <span class=\"token function\">IopReadyDeviceObjects</span><span class=\"token punctuation\">(</span>v15<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"291\"></td><td><pre>      <span class=\"token keyword\">goto</span> LABEL_80<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"292\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"293\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"294\"></td><td><pre>LABEL_81<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"295\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> v43 <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1073741554</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"296\"></td><td><pre>    <span class=\"token keyword\">goto</span> LABEL_82<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"297\"></td><td><pre>LABEL_21<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"298\"></td><td><pre>  <span class=\"token function\">HeadlessKernelAddLogEntry</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"299\"></td><td><pre>LABEL_22<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"300\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> v32<span class=\"token punctuation\">.</span>Buffer <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"301\"></td><td><pre>    <span class=\"token function\">ExFreePoolWithTag</span><span class=\"token punctuation\">(</span>v32<span class=\"token punctuation\">.</span>Buffer<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"302\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> v30 <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"303\"></td><td><pre>    <span class=\"token function\">ExFreePoolWithTag</span><span class=\"token punctuation\">(</span>v30<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"304\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> v40 <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"305\"></td><td><pre>    <span class=\"token function\">ExFreePoolWithTag</span><span class=\"token punctuation\">(</span>v40<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"306\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> Destination<span class=\"token punctuation\">.</span>Buffer <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"307\"></td><td><pre>    <span class=\"token function\">ExFreePoolWithTag</span><span class=\"token punctuation\">(</span>Destination<span class=\"token punctuation\">.</span>Buffer<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"308\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> v43 <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> v43 <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1073741218</span> <span class=\"token operator\">&amp;&amp;</span> v43 <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1073741554</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"309\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"310\"></td><td><pre>    <span class=\"token function\">IopDriverLoadingFailed</span><span class=\"token punctuation\">(</span>Handle<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"311\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token function\">IopGetRegistryValue</span><span class=\"token punctuation\">(</span>Handle<span class=\"token punctuation\">,</span> <span class=\"token string\">\"E\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>v29<span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"312\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"313\"></td><td><pre>      v8 <span class=\"token operator\">=</span> v29<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"314\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>v29 <span class=\"token operator\">+</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"315\"></td><td><pre>        <span class=\"token function\">CmBootLastKnownGood</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>_DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>v29 <span class=\"token operator\">+</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>v29 <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"316\"></td><td><pre>      <span class=\"token function\">ExFreePoolWithTag</span><span class=\"token punctuation\">(</span>v8<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"317\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"318\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"319\"></td><td><pre>  <span class=\"token function\">ObCloseHandle</span><span class=\"token punctuation\">(</span>Handle<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"320\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token function\">xHalReferenceHandler</span><span class=\"token punctuation\">(</span>KeyValueInformation<span class=\"token punctuation\">[</span><span class=\"token number\">19</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> v22<span class=\"token punctuation\">,</span> v23<span class=\"token punctuation\">,</span> v24<span class=\"token punctuation\">,</span> v25<span class=\"token punctuation\">,</span> v26<span class=\"token punctuation\">,</span> v27<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"321\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>对于如此复杂的内核函数，我们可以参考 WRK 源码进行分析，分析发现其实和 WRK 的源码几乎是一样的</p>\n<p>WRK 中  <code>IopLoadDriver</code>  源码</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>NTSTATUS</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">IopLoadDriver</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    IN  HANDLE      KeyHandle<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    IN  BOOLEAN     CheckForSafeBoot<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    IN  BOOLEAN     IsFilter<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    OUT NTSTATUS   <span class=\"token operator\">*</span>DriverEntryStatus</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">/*++</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>Routine Description:</pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    This routine is invoked to load a device or file system driver, either</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    during system initialization, or dynamically while the system is running.</pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>Arguments:</pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    KeyHandle - Supplies a handle to the driver service node in the registry</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        that describes the driver to be loaded.</pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    IsFilter - TRUE if the driver is a WDM filter, FALSE otherwise.</pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    CheckForSafeBoot - If TRUE, the driver will be loaded only if it belongs</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                       to the list of safe mode OK binaries.</pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    DriverEntryStatus - Receives status returned by DriverEntry(...)</pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>Return Value:</pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    The function value is the final status of the load operation. If</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    STATUS_FAILED_DRIVER_ENTRY is returned, the driver's return value</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    is stored in DriverEntryStatus.</pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>Notes:</pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    Note that this routine closes the KeyHandle before returning.</pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>--*/</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    NTSTATUS status<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    PLIST_ENTRY nextEntry<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    PKLDR_DATA_TABLE_ENTRY driverEntry<span class=\"token punctuation\">;</span>    </pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    PKEY_BASIC_INFORMATION keyBasicInformation <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    ULONG keyBasicLength<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    UNICODE_STRING baseName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    UNICODE_STRING serviceName <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    OBJECT_ATTRIBUTES objectAttributes<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    PVOID sectionPointer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    UNICODE_STRING driverName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    PDRIVER_OBJECT driverObject<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    PIMAGE_NT_HEADERS ntHeaders<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    PVOID imageBaseAddress<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    ULONG_PTR entryPoint<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    HANDLE driverHandle<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    ULONG i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    POBJECT_NAME_INFORMATION registryPath<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\">DBG</span></span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    LARGE_INTEGER stime<span class=\"token punctuation\">,</span> etime<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    ULONG dtime<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token function\">PAGED_CODE</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    driverName<span class=\"token punctuation\">.</span>Buffer <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PWSTR<span class=\"token punctuation\">)</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    <span class=\"token operator\">*</span>DriverEntryStatus <span class=\"token operator\">=</span> STATUS_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    baseName<span class=\"token punctuation\">.</span>Buffer <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    <span class=\"token comment\">// Begin by formulating the name of the driver image file to be loaded.</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    <span class=\"token comment\">// Note that this is used to determine whether or not the driver has</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    <span class=\"token comment\">// already been loaded by the OS loader, not necessarily in actually</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    <span class=\"token comment\">// loading the driver image, since the node can override that name.</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    status <span class=\"token operator\">=</span> <span class=\"token function\">NtQueryKey</span><span class=\"token punctuation\">(</span> KeyHandle<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>                         KeyBasicInformation<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>                         <span class=\"token punctuation\">(</span>PVOID<span class=\"token punctuation\">)</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>                         <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>                         <span class=\"token operator\">&amp;</span>keyBasicLength <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>status <span class=\"token operator\">!=</span> STATUS_BUFFER_OVERFLOW <span class=\"token operator\">&amp;&amp;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>        status <span class=\"token operator\">!=</span> STATUS_BUFFER_TOO_SMALL<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>        status <span class=\"token operator\">=</span> STATUS_ILL_FORMED_SERVICE_ENTRY<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>        <span class=\"token keyword\">goto</span> IopLoadExit<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>    keyBasicInformation <span class=\"token operator\">=</span> <span class=\"token function\">ExAllocatePool</span><span class=\"token punctuation\">(</span> NonPagedPool<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>                                          keyBasicLength <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>keyBasicInformation<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>        status <span class=\"token operator\">=</span> STATUS_INSUFFICIENT_RESOURCES<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>        <span class=\"token keyword\">goto</span> IopLoadExit<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>    status <span class=\"token operator\">=</span> <span class=\"token function\">NtQueryKey</span><span class=\"token punctuation\">(</span> KeyHandle<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>                         KeyBasicInformation<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>                         keyBasicInformation<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>                         keyBasicLength<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>                         <span class=\"token operator\">&amp;</span>keyBasicLength <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">NT_SUCCESS</span><span class=\"token punctuation\">(</span> status <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>        <span class=\"token keyword\">goto</span> IopLoadExit<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>    <span class=\"token comment\">// Create a Unicode string descriptor which forms the name of the</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>    <span class=\"token comment\">// driver.</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>    baseName<span class=\"token punctuation\">.</span>Length <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>USHORT<span class=\"token punctuation\">)</span> keyBasicInformation<span class=\"token operator\">-></span>NameLength<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>    baseName<span class=\"token punctuation\">.</span>MaximumLength <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>USHORT<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>baseName<span class=\"token punctuation\">.</span>Length <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>    baseName<span class=\"token punctuation\">.</span>Buffer <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>keyBasicInformation<span class=\"token operator\">-></span>Name<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>    serviceName<span class=\"token punctuation\">.</span>Buffer <span class=\"token operator\">=</span> <span class=\"token function\">ExAllocatePool</span><span class=\"token punctuation\">(</span>PagedPool<span class=\"token punctuation\">,</span> baseName<span class=\"token punctuation\">.</span>Length <span class=\"token operator\">+</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>UNICODE_NULL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>serviceName<span class=\"token punctuation\">.</span>Buffer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>        serviceName<span class=\"token punctuation\">.</span>Length <span class=\"token operator\">=</span> baseName<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>        serviceName<span class=\"token punctuation\">.</span>MaximumLength <span class=\"token operator\">=</span> serviceName<span class=\"token punctuation\">.</span>Length <span class=\"token operator\">+</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>UNICODE_NULL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>        <span class=\"token function\">RtlCopyMemory</span><span class=\"token punctuation\">(</span>serviceName<span class=\"token punctuation\">.</span>Buffer<span class=\"token punctuation\">,</span> baseName<span class=\"token punctuation\">.</span>Buffer<span class=\"token punctuation\">,</span> baseName<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>        serviceName<span class=\"token punctuation\">.</span>Buffer<span class=\"token punctuation\">[</span>serviceName<span class=\"token punctuation\">.</span>Length <span class=\"token operator\">/</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>WCHAR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> UNICODE_NULL<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>        status <span class=\"token operator\">=</span> STATUS_INSUFFICIENT_RESOURCES<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>        <span class=\"token keyword\">goto</span> IopLoadExit<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>    <span class=\"token function\">RtlAppendUnicodeToString</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">&amp;</span>baseName<span class=\"token punctuation\">,</span> L<span class=\"token string\">\".SYS\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>    <span class=\"token comment\">// Log the file name</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>    <span class=\"token function\">HeadlessKernelAddLogEntry</span><span class=\"token punctuation\">(</span>HEADLESS_LOG_LOADING_FILENAME<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>baseName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>CheckForSafeBoot <span class=\"token operator\">&amp;&amp;</span> InitSafeBootMode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>        BOOLEAN GroupIsGood <span class=\"token operator\">=</span> FALSE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>        UNICODE_STRING string<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>        PKEY_VALUE_PARTIAL_INFORMATION keyValue<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>        UCHAR nameBuffer<span class=\"token punctuation\">[</span><span class=\"token function\">FIELD_OFFSET</span><span class=\"token punctuation\">(</span>KEY_VALUE_PARTIAL_INFORMATION<span class=\"token punctuation\">,</span> Data<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">64</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>        ULONG length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>        <span class=\"token function\">RtlInitUnicodeString</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">&amp;</span>string<span class=\"token punctuation\">,</span> L<span class=\"token string\">\"Group\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>        keyValue <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PKEY_VALUE_PARTIAL_INFORMATION<span class=\"token punctuation\">)</span>nameBuffer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>        <span class=\"token function\">RtlZeroMemory</span><span class=\"token punctuation\">(</span>nameBuffer<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>nameBuffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>        status <span class=\"token operator\">=</span> <span class=\"token function\">NtQueryValueKey</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>            KeyHandle<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>            <span class=\"token operator\">&amp;</span>string<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>            KeyValuePartialInformation<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre>            keyValue<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>            <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>nameBuffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>            <span class=\"token operator\">&amp;</span>length</pre></td></tr><tr><td data-num=\"149\"></td><td><pre>            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">NT_SUCCESS</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"151\"></td><td><pre></pre></td></tr><tr><td data-num=\"152\"></td><td><pre>            string<span class=\"token punctuation\">.</span>Length <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>USHORT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>keyValue<span class=\"token operator\">-></span>DataLength <span class=\"token operator\">-</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>WCHAR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"153\"></td><td><pre>            string<span class=\"token punctuation\">.</span>MaximumLength <span class=\"token operator\">=</span> string<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"154\"></td><td><pre>            string<span class=\"token punctuation\">.</span>Buffer <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PWSTR<span class=\"token punctuation\">)</span>keyValue<span class=\"token operator\">-></span>Data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"155\"></td><td><pre></pre></td></tr><tr><td data-num=\"156\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">IopSafebootDriverLoad</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>string<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"157\"></td><td><pre>                GroupIsGood <span class=\"token operator\">=</span> TRUE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"158\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"159\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"160\"></td><td><pre></pre></td></tr><tr><td data-num=\"161\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>GroupIsGood <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token function\">IopSafebootDriverLoad</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>baseName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"162\"></td><td><pre>            <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"163\"></td><td><pre>            <span class=\"token comment\">// don't load the driver</span></pre></td></tr><tr><td data-num=\"164\"></td><td><pre>            <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"165\"></td><td><pre></pre></td></tr><tr><td data-num=\"166\"></td><td><pre>            <span class=\"token function\">IopBootLog</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>baseName<span class=\"token punctuation\">,</span> FALSE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"167\"></td><td><pre></pre></td></tr><tr><td data-num=\"168\"></td><td><pre>            <span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SAFEBOOT: skipping device = %wZ(%wZ)\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>baseName<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>string<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"169\"></td><td><pre>            <span class=\"token function\">HeadlessKernelAddLogEntry</span><span class=\"token punctuation\">(</span>HEADLESS_LOG_LOAD_SUCCESSFUL<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"170\"></td><td><pre>            <span class=\"token keyword\">return</span> STATUS_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"171\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"172\"></td><td><pre></pre></td></tr><tr><td data-num=\"173\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"174\"></td><td><pre></pre></td></tr><tr><td data-num=\"175\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"176\"></td><td><pre>    <span class=\"token comment\">// See if this driver has already been loaded by the boot loader.</span></pre></td></tr><tr><td data-num=\"177\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"178\"></td><td><pre></pre></td></tr><tr><td data-num=\"179\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"180\"></td><td><pre>    <span class=\"token comment\">// No need to do KeEnterCriticalRegion as this is called</span></pre></td></tr><tr><td data-num=\"181\"></td><td><pre>    <span class=\"token comment\">// from system process only.</span></pre></td></tr><tr><td data-num=\"182\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"183\"></td><td><pre>    <span class=\"token function\">ExAcquireResourceSharedLite</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">&amp;</span>PsLoadedModuleResource<span class=\"token punctuation\">,</span> TRUE <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"184\"></td><td><pre>    nextEntry <span class=\"token operator\">=</span> PsLoadedModuleList<span class=\"token punctuation\">.</span>Flink<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"185\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>nextEntry <span class=\"token operator\">!=</span> <span class=\"token operator\">&amp;</span>PsLoadedModuleList<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"186\"></td><td><pre></pre></td></tr><tr><td data-num=\"187\"></td><td><pre>        <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"188\"></td><td><pre>        <span class=\"token comment\">// Look at the next boot driver in the list.</span></pre></td></tr><tr><td data-num=\"189\"></td><td><pre>        <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"190\"></td><td><pre></pre></td></tr><tr><td data-num=\"191\"></td><td><pre>        driverEntry <span class=\"token operator\">=</span> <span class=\"token function\">CONTAINING_RECORD</span><span class=\"token punctuation\">(</span> nextEntry<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"192\"></td><td><pre>                                         KLDR_DATA_TABLE_ENTRY<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"193\"></td><td><pre>                                         InLoadOrderLinks <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"194\"></td><td><pre></pre></td></tr><tr><td data-num=\"195\"></td><td><pre>        <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"196\"></td><td><pre>        <span class=\"token comment\">// If this is not the kernel image (ntoskrnl) and not the HAL (hal),</span></pre></td></tr><tr><td data-num=\"197\"></td><td><pre>        <span class=\"token comment\">// then this is a driver, so initialize it.</span></pre></td></tr><tr><td data-num=\"198\"></td><td><pre>        <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"199\"></td><td><pre></pre></td></tr><tr><td data-num=\"200\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">RtlEqualUnicodeString</span><span class=\"token punctuation\">(</span>  <span class=\"token operator\">&amp;</span>baseName<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"201\"></td><td><pre>                             <span class=\"token operator\">&amp;</span>driverEntry<span class=\"token operator\">-></span>FullDllName<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"202\"></td><td><pre>                            TRUE <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"203\"></td><td><pre></pre></td></tr><tr><td data-num=\"204\"></td><td><pre>            status <span class=\"token operator\">=</span> STATUS_IMAGE_ALREADY_LOADED<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"205\"></td><td><pre>            <span class=\"token function\">ExReleaseResourceLite</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">&amp;</span>PsLoadedModuleResource <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"206\"></td><td><pre></pre></td></tr><tr><td data-num=\"207\"></td><td><pre>            <span class=\"token function\">IopBootLog</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>baseName<span class=\"token punctuation\">,</span> TRUE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"208\"></td><td><pre>            baseName<span class=\"token punctuation\">.</span>Buffer <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"209\"></td><td><pre>            <span class=\"token keyword\">goto</span> IopLoadExit<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"210\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"211\"></td><td><pre></pre></td></tr><tr><td data-num=\"212\"></td><td><pre>        nextEntry <span class=\"token operator\">=</span> nextEntry<span class=\"token operator\">-></span>Flink<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"213\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"214\"></td><td><pre>    <span class=\"token function\">ExReleaseResourceLite</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">&amp;</span>PsLoadedModuleResource <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"215\"></td><td><pre></pre></td></tr><tr><td data-num=\"216\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"217\"></td><td><pre>    <span class=\"token comment\">// This driver has not already been loaded by the OS loader.  Form the</span></pre></td></tr><tr><td data-num=\"218\"></td><td><pre>    <span class=\"token comment\">// full path name for this driver.</span></pre></td></tr><tr><td data-num=\"219\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"220\"></td><td><pre></pre></td></tr><tr><td data-num=\"221\"></td><td><pre>    status <span class=\"token operator\">=</span> <span class=\"token function\">IopBuildFullDriverPath</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>serviceName<span class=\"token punctuation\">,</span> KeyHandle<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>baseName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"222\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">NT_SUCCESS</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"223\"></td><td><pre></pre></td></tr><tr><td data-num=\"224\"></td><td><pre>        baseName<span class=\"token punctuation\">.</span>Buffer <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"225\"></td><td><pre>        <span class=\"token keyword\">goto</span> IopLoadExit<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"226\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"227\"></td><td><pre></pre></td></tr><tr><td data-num=\"228\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"229\"></td><td><pre>    <span class=\"token comment\">// Now get the name of the driver object.</span></pre></td></tr><tr><td data-num=\"230\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"231\"></td><td><pre></pre></td></tr><tr><td data-num=\"232\"></td><td><pre>    status <span class=\"token operator\">=</span> <span class=\"token function\">IopGetDriverNameFromKeyNode</span><span class=\"token punctuation\">(</span> KeyHandle<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"233\"></td><td><pre>                                          <span class=\"token operator\">&amp;</span>driverName <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"234\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">NT_SUCCESS</span><span class=\"token punctuation\">(</span> status <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"235\"></td><td><pre>        <span class=\"token keyword\">goto</span> IopLoadExit<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"236\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"237\"></td><td><pre></pre></td></tr><tr><td data-num=\"238\"></td><td><pre>    <span class=\"token function\">InitializeObjectAttributes</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">&amp;</span>objectAttributes<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"239\"></td><td><pre>                                <span class=\"token operator\">&amp;</span>driverName<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"240\"></td><td><pre>                                OBJ_PERMANENT<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"241\"></td><td><pre>                                <span class=\"token punctuation\">(</span>HANDLE<span class=\"token punctuation\">)</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"242\"></td><td><pre>                                <span class=\"token punctuation\">(</span>PSECURITY_DESCRIPTOR<span class=\"token punctuation\">)</span> <span class=\"token constant\">NULL</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"243\"></td><td><pre></pre></td></tr><tr><td data-num=\"244\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"245\"></td><td><pre>    <span class=\"token comment\">// Load the driver image into memory.  If this fails partway through</span></pre></td></tr><tr><td data-num=\"246\"></td><td><pre>    <span class=\"token comment\">// the operation, then it will automatically be unloaded.</span></pre></td></tr><tr><td data-num=\"247\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"248\"></td><td><pre></pre></td></tr><tr><td data-num=\"249\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"250\"></td><td><pre>    <span class=\"token comment\">// No need to do KeEnterCriticalRegion here as this is only</span></pre></td></tr><tr><td data-num=\"251\"></td><td><pre>    <span class=\"token comment\">// called from system process</span></pre></td></tr><tr><td data-num=\"252\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"253\"></td><td><pre>    <span class=\"token function\">ExAcquireResourceExclusiveLite</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">&amp;</span>IopDriverLoadResource<span class=\"token punctuation\">,</span> TRUE <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"254\"></td><td><pre></pre></td></tr><tr><td data-num=\"255\"></td><td><pre>    status <span class=\"token operator\">=</span> <span class=\"token function\">MmLoadSystemImage</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">&amp;</span>baseName<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"256\"></td><td><pre>                                <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"257\"></td><td><pre>                                <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"258\"></td><td><pre>                                <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"259\"></td><td><pre>                                <span class=\"token operator\">&amp;</span>sectionPointer<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"260\"></td><td><pre>                                <span class=\"token punctuation\">(</span>PVOID <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>imageBaseAddress <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"261\"></td><td><pre></pre></td></tr><tr><td data-num=\"262\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">NT_SUCCESS</span><span class=\"token punctuation\">(</span> status <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"263\"></td><td><pre></pre></td></tr><tr><td data-num=\"264\"></td><td><pre></pre></td></tr><tr><td data-num=\"265\"></td><td><pre>        <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"266\"></td><td><pre>        <span class=\"token comment\">// If the image was not already loaded then exit.</span></pre></td></tr><tr><td data-num=\"267\"></td><td><pre>        <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"268\"></td><td><pre></pre></td></tr><tr><td data-num=\"269\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>status <span class=\"token operator\">!=</span> STATUS_IMAGE_ALREADY_LOADED<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"270\"></td><td><pre></pre></td></tr><tr><td data-num=\"271\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\"><span class=\"token function\">defined</span><span class=\"token punctuation\">(</span>_WIN64<span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"272\"></td><td><pre>            <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"273\"></td><td><pre>            <span class=\"token comment\">// If this is a driver meant for another architecture, then block this driver</span></pre></td></tr><tr><td data-num=\"274\"></td><td><pre>            <span class=\"token comment\">// and continue with loading the rest of the drivers stack.</span></pre></td></tr><tr><td data-num=\"275\"></td><td><pre>            <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"276\"></td><td><pre></pre></td></tr><tr><td data-num=\"277\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">IopCheckIfNotNativeDriver</span> <span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>baseName<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> TRUE<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"278\"></td><td><pre>            </pre></td></tr><tr><td data-num=\"279\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>IsFilter <span class=\"token operator\">!=</span> FALSE<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"280\"></td><td><pre>                    status <span class=\"token operator\">=</span> STATUS_DRIVER_BLOCKED<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"281\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"282\"></td><td><pre>                    status <span class=\"token operator\">=</span> STATUS_DRIVER_BLOCKED_CRITICAL<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"283\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"284\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\">DBG</span></span></pre></td></tr><tr><td data-num=\"285\"></td><td><pre>                <span class=\"token function\">DbgPrint</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"IopLoadDriver - Blocking driver %ws (32-bit) - Status = %lx\\n\"</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"286\"></td><td><pre>                          baseName<span class=\"token punctuation\">.</span>Buffer<span class=\"token punctuation\">,</span> status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"287\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"288\"></td><td><pre></pre></td></tr><tr><td data-num=\"289\"></td><td><pre>                <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"290\"></td><td><pre>                <span class=\"token comment\">// Log an event to the eventlog</span></pre></td></tr><tr><td data-num=\"291\"></td><td><pre>                <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"292\"></td><td><pre></pre></td></tr><tr><td data-num=\"293\"></td><td><pre>                <span class=\"token function\">IopLogBlockedDriverEvent</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>baseName<span class=\"token punctuation\">,</span> STATUS_INCOMPATIBLE_DRIVER_BLOCKED<span class=\"token punctuation\">,</span> status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"294\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"295\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"296\"></td><td><pre></pre></td></tr><tr><td data-num=\"297\"></td><td><pre></pre></td></tr><tr><td data-num=\"298\"></td><td><pre>            <span class=\"token function\">ExReleaseResourceLite</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">&amp;</span>IopDriverLoadResource <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"299\"></td><td><pre>            <span class=\"token function\">IopBootLog</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>baseName<span class=\"token punctuation\">,</span> FALSE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"300\"></td><td><pre></pre></td></tr><tr><td data-num=\"301\"></td><td><pre>            <span class=\"token keyword\">goto</span> IopLoadExit<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"302\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"303\"></td><td><pre></pre></td></tr><tr><td data-num=\"304\"></td><td><pre>        <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"305\"></td><td><pre>        <span class=\"token comment\">// Open the driver object.</span></pre></td></tr><tr><td data-num=\"306\"></td><td><pre>        <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"307\"></td><td><pre></pre></td></tr><tr><td data-num=\"308\"></td><td><pre>        status <span class=\"token operator\">=</span> <span class=\"token function\">ObOpenObjectByName</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">&amp;</span>objectAttributes<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"309\"></td><td><pre>                                     IoDriverObjectType<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"310\"></td><td><pre>                                     KernelMode<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"311\"></td><td><pre>                                     <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"312\"></td><td><pre>                                     <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"313\"></td><td><pre>                                     <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"314\"></td><td><pre>                                     <span class=\"token operator\">&amp;</span>driverHandle <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"315\"></td><td><pre></pre></td></tr><tr><td data-num=\"316\"></td><td><pre></pre></td></tr><tr><td data-num=\"317\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">NT_SUCCESS</span><span class=\"token punctuation\">(</span> status <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"318\"></td><td><pre></pre></td></tr><tr><td data-num=\"319\"></td><td><pre>            <span class=\"token function\">ExReleaseResourceLite</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">&amp;</span>IopDriverLoadResource <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"320\"></td><td><pre>            <span class=\"token function\">IopBootLog</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>baseName<span class=\"token punctuation\">,</span> FALSE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"321\"></td><td><pre></pre></td></tr><tr><td data-num=\"322\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>status <span class=\"token operator\">==</span> STATUS_OBJECT_NAME_NOT_FOUND<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"323\"></td><td><pre></pre></td></tr><tr><td data-num=\"324\"></td><td><pre>                <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"325\"></td><td><pre>                <span class=\"token comment\">// Adjust the exit code so that we can distinguish drivers that</span></pre></td></tr><tr><td data-num=\"326\"></td><td><pre>                <span class=\"token comment\">// aren't present from drivers that are present but have had</span></pre></td></tr><tr><td data-num=\"327\"></td><td><pre>                <span class=\"token comment\">// their driver objects made temporary.</span></pre></td></tr><tr><td data-num=\"328\"></td><td><pre>                <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"329\"></td><td><pre>                status <span class=\"token operator\">=</span> STATUS_DRIVER_FAILED_PRIOR_UNLOAD<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"330\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"331\"></td><td><pre></pre></td></tr><tr><td data-num=\"332\"></td><td><pre>            <span class=\"token keyword\">goto</span> IopLoadExit<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"333\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"334\"></td><td><pre></pre></td></tr><tr><td data-num=\"335\"></td><td><pre>        <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"336\"></td><td><pre>        <span class=\"token comment\">// Reference the handle and obtain a pointer to the driver object so that</span></pre></td></tr><tr><td data-num=\"337\"></td><td><pre>        <span class=\"token comment\">// the handle can be deleted without the object going away.</span></pre></td></tr><tr><td data-num=\"338\"></td><td><pre>        <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"339\"></td><td><pre></pre></td></tr><tr><td data-num=\"340\"></td><td><pre>        status <span class=\"token operator\">=</span> <span class=\"token function\">ObReferenceObjectByHandle</span><span class=\"token punctuation\">(</span> driverHandle<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"341\"></td><td><pre>                                            <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"342\"></td><td><pre>                                            IoDriverObjectType<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"343\"></td><td><pre>                                            <span class=\"token function\">KeGetPreviousMode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"344\"></td><td><pre>                                            <span class=\"token punctuation\">(</span>PVOID <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>driverObject<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"345\"></td><td><pre>                                            <span class=\"token punctuation\">(</span>POBJECT_HANDLE_INFORMATION<span class=\"token punctuation\">)</span> <span class=\"token constant\">NULL</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"346\"></td><td><pre>        <span class=\"token function\">NtClose</span><span class=\"token punctuation\">(</span> driverHandle <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"347\"></td><td><pre></pre></td></tr><tr><td data-num=\"348\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">NT_SUCCESS</span><span class=\"token punctuation\">(</span> status <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"349\"></td><td><pre>            <span class=\"token function\">ExReleaseResourceLite</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">&amp;</span>IopDriverLoadResource <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"350\"></td><td><pre>            <span class=\"token function\">IopBootLog</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>baseName<span class=\"token punctuation\">,</span> FALSE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"351\"></td><td><pre>            <span class=\"token keyword\">goto</span> IopLoadExit<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"352\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"353\"></td><td><pre></pre></td></tr><tr><td data-num=\"354\"></td><td><pre></pre></td></tr><tr><td data-num=\"355\"></td><td><pre>        status <span class=\"token operator\">=</span> <span class=\"token function\">IopResurrectDriver</span><span class=\"token punctuation\">(</span> driverObject <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"356\"></td><td><pre></pre></td></tr><tr><td data-num=\"357\"></td><td><pre>        <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"358\"></td><td><pre>        <span class=\"token comment\">// Regardless of the status the driver object should be dereferenced.</span></pre></td></tr><tr><td data-num=\"359\"></td><td><pre>        <span class=\"token comment\">// if the unload has already run then driver is almost gone. If</span></pre></td></tr><tr><td data-num=\"360\"></td><td><pre>        <span class=\"token comment\">// the driver has been resurrected then the I/O system still has its</span></pre></td></tr><tr><td data-num=\"361\"></td><td><pre>        <span class=\"token comment\">// original reference.</span></pre></td></tr><tr><td data-num=\"362\"></td><td><pre>        <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"363\"></td><td><pre></pre></td></tr><tr><td data-num=\"364\"></td><td><pre>        <span class=\"token function\">ObDereferenceObject</span><span class=\"token punctuation\">(</span> driverObject <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"365\"></td><td><pre>        <span class=\"token function\">ExReleaseResourceLite</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">&amp;</span>IopDriverLoadResource <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"366\"></td><td><pre>        <span class=\"token function\">IopBootLog</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>baseName<span class=\"token punctuation\">,</span> FALSE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"367\"></td><td><pre>        <span class=\"token keyword\">goto</span> IopLoadExit<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"368\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"369\"></td><td><pre></pre></td></tr><tr><td data-num=\"370\"></td><td><pre>        ntHeaders <span class=\"token operator\">=</span> <span class=\"token function\">RtlImageNtHeader</span><span class=\"token punctuation\">(</span> imageBaseAddress <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"371\"></td><td><pre></pre></td></tr><tr><td data-num=\"372\"></td><td><pre>        <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"373\"></td><td><pre>        <span class=\"token comment\">// Check should this driver be loaded.  If yes, the enum subkey</span></pre></td></tr><tr><td data-num=\"374\"></td><td><pre>        <span class=\"token comment\">// of the service will be prepared.</span></pre></td></tr><tr><td data-num=\"375\"></td><td><pre>        <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"376\"></td><td><pre></pre></td></tr><tr><td data-num=\"377\"></td><td><pre>        status <span class=\"token operator\">=</span> <span class=\"token function\">IopPrepareDriverLoading</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>serviceName<span class=\"token punctuation\">,</span> KeyHandle<span class=\"token punctuation\">,</span> imageBaseAddress<span class=\"token punctuation\">,</span> IsFilter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"378\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">NT_SUCCESS</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"379\"></td><td><pre>            <span class=\"token function\">MmUnloadSystemImage</span><span class=\"token punctuation\">(</span>sectionPointer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"380\"></td><td><pre>            <span class=\"token function\">ExReleaseResourceLite</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">&amp;</span>IopDriverLoadResource <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"381\"></td><td><pre>            <span class=\"token function\">IopBootLog</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>baseName<span class=\"token punctuation\">,</span> FALSE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"382\"></td><td><pre>            <span class=\"token keyword\">goto</span> IopLoadExit<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"383\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"384\"></td><td><pre></pre></td></tr><tr><td data-num=\"385\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"386\"></td><td><pre></pre></td></tr><tr><td data-num=\"387\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"388\"></td><td><pre>    <span class=\"token comment\">// The driver image has now been loaded into memory.  Create the driver</span></pre></td></tr><tr><td data-num=\"389\"></td><td><pre>    <span class=\"token comment\">// object that represents this image.</span></pre></td></tr><tr><td data-num=\"390\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"391\"></td><td><pre></pre></td></tr><tr><td data-num=\"392\"></td><td><pre>    status <span class=\"token operator\">=</span> <span class=\"token function\">ObCreateObject</span><span class=\"token punctuation\">(</span> <span class=\"token function\">KeGetPreviousMode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"393\"></td><td><pre>                             IoDriverObjectType<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"394\"></td><td><pre>                             <span class=\"token operator\">&amp;</span>objectAttributes<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"395\"></td><td><pre>                             KernelMode<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"396\"></td><td><pre>                             <span class=\"token punctuation\">(</span>PVOID<span class=\"token punctuation\">)</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"397\"></td><td><pre>                             <span class=\"token punctuation\">(</span>ULONG<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span> DRIVER_OBJECT <span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">sizeof</span> <span class=\"token punctuation\">(</span> DRIVER_EXTENSION <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"398\"></td><td><pre>                             <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"399\"></td><td><pre>                             <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"400\"></td><td><pre>                             <span class=\"token punctuation\">(</span>PVOID <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>driverObject <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"401\"></td><td><pre></pre></td></tr><tr><td data-num=\"402\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">NT_SUCCESS</span><span class=\"token punctuation\">(</span> status <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"403\"></td><td><pre>        <span class=\"token function\">MmUnloadSystemImage</span><span class=\"token punctuation\">(</span>sectionPointer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"404\"></td><td><pre>        <span class=\"token function\">ExReleaseResourceLite</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">&amp;</span>IopDriverLoadResource <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"405\"></td><td><pre>        <span class=\"token function\">IopBootLog</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>baseName<span class=\"token punctuation\">,</span> FALSE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"406\"></td><td><pre>        <span class=\"token keyword\">goto</span> IopLoadExit<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"407\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"408\"></td><td><pre></pre></td></tr><tr><td data-num=\"409\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"410\"></td><td><pre>    <span class=\"token comment\">// Initialize this driver object and insert it into the object table.</span></pre></td></tr><tr><td data-num=\"411\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"412\"></td><td><pre></pre></td></tr><tr><td data-num=\"413\"></td><td><pre>    <span class=\"token function\">RtlZeroMemory</span><span class=\"token punctuation\">(</span> driverObject<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span> DRIVER_OBJECT <span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">sizeof</span> <span class=\"token punctuation\">(</span> DRIVER_EXTENSION<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"414\"></td><td><pre>    driverObject<span class=\"token operator\">-></span>DriverExtension <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PDRIVER_EXTENSION<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>driverObject <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"415\"></td><td><pre>    driverObject<span class=\"token operator\">-></span>DriverExtension<span class=\"token operator\">-></span>DriverObject <span class=\"token operator\">=</span> driverObject<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"416\"></td><td><pre></pre></td></tr><tr><td data-num=\"417\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> IRP_MJ_MAXIMUM_FUNCTION<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"418\"></td><td><pre>        driverObject<span class=\"token operator\">-></span>MajorFunction<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> IopInvalidDeviceRequest<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"419\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"420\"></td><td><pre></pre></td></tr><tr><td data-num=\"421\"></td><td><pre>    driverObject<span class=\"token operator\">-></span>Type <span class=\"token operator\">=</span> IO_TYPE_DRIVER<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"422\"></td><td><pre>    driverObject<span class=\"token operator\">-></span>Size <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span> DRIVER_OBJECT <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"423\"></td><td><pre>    ntHeaders <span class=\"token operator\">=</span> <span class=\"token function\">RtlImageNtHeader</span><span class=\"token punctuation\">(</span> imageBaseAddress <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"424\"></td><td><pre>    entryPoint <span class=\"token operator\">=</span> ntHeaders<span class=\"token operator\">-></span>OptionalHeader<span class=\"token punctuation\">.</span>AddressOfEntryPoint<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"425\"></td><td><pre>    entryPoint <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>ULONG_PTR<span class=\"token punctuation\">)</span> imageBaseAddress<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"426\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>ntHeaders<span class=\"token operator\">-></span>OptionalHeader<span class=\"token punctuation\">.</span>DllCharacteristics <span class=\"token operator\">&amp;</span> IMAGE_DLLCHARACTERISTICS_WDM_DRIVER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"427\"></td><td><pre>        driverObject<span class=\"token operator\">-></span>Flags <span class=\"token operator\">|=</span> DRVO_LEGACY_DRIVER<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"428\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"429\"></td><td><pre>    driverObject<span class=\"token operator\">-></span>DriverInit <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PDRIVER_INITIALIZE<span class=\"token punctuation\">)</span> entryPoint<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"430\"></td><td><pre>    driverObject<span class=\"token operator\">-></span>DriverSection <span class=\"token operator\">=</span> sectionPointer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"431\"></td><td><pre>    driverObject<span class=\"token operator\">-></span>DriverStart <span class=\"token operator\">=</span> imageBaseAddress<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"432\"></td><td><pre>    driverObject<span class=\"token operator\">-></span>DriverSize <span class=\"token operator\">=</span> ntHeaders<span class=\"token operator\">-></span>OptionalHeader<span class=\"token punctuation\">.</span>SizeOfImage<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"433\"></td><td><pre></pre></td></tr><tr><td data-num=\"434\"></td><td><pre>    status <span class=\"token operator\">=</span> <span class=\"token function\">ObInsertObject</span><span class=\"token punctuation\">(</span> driverObject<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"435\"></td><td><pre>                             <span class=\"token punctuation\">(</span>PACCESS_STATE<span class=\"token punctuation\">)</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"436\"></td><td><pre>                             FILE_READ_DATA<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"437\"></td><td><pre>                             <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"438\"></td><td><pre>                             <span class=\"token punctuation\">(</span>PVOID <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"439\"></td><td><pre>                             <span class=\"token operator\">&amp;</span>driverHandle <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"440\"></td><td><pre></pre></td></tr><tr><td data-num=\"441\"></td><td><pre>    <span class=\"token function\">ExReleaseResourceLite</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">&amp;</span>IopDriverLoadResource <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"442\"></td><td><pre></pre></td></tr><tr><td data-num=\"443\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">NT_SUCCESS</span><span class=\"token punctuation\">(</span> status <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"444\"></td><td><pre>        <span class=\"token function\">IopBootLog</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>baseName<span class=\"token punctuation\">,</span> FALSE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"445\"></td><td><pre>        <span class=\"token keyword\">goto</span> IopLoadExit<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"446\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"447\"></td><td><pre></pre></td></tr><tr><td data-num=\"448\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"449\"></td><td><pre>    <span class=\"token comment\">// Reference the handle and obtain a pointer to the driver object so that</span></pre></td></tr><tr><td data-num=\"450\"></td><td><pre>    <span class=\"token comment\">// the handle can be deleted without the object going away.</span></pre></td></tr><tr><td data-num=\"451\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"452\"></td><td><pre></pre></td></tr><tr><td data-num=\"453\"></td><td><pre>    status <span class=\"token operator\">=</span> <span class=\"token function\">ObReferenceObjectByHandle</span><span class=\"token punctuation\">(</span> driverHandle<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"454\"></td><td><pre>                                        <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"455\"></td><td><pre>                                        IoDriverObjectType<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"456\"></td><td><pre>                                        <span class=\"token function\">KeGetPreviousMode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"457\"></td><td><pre>                                        <span class=\"token punctuation\">(</span>PVOID <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>driverObject<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"458\"></td><td><pre>                                        <span class=\"token punctuation\">(</span>POBJECT_HANDLE_INFORMATION<span class=\"token punctuation\">)</span> <span class=\"token constant\">NULL</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"459\"></td><td><pre></pre></td></tr><tr><td data-num=\"460\"></td><td><pre>    <span class=\"token function\">ASSERT</span><span class=\"token punctuation\">(</span>status <span class=\"token operator\">==</span> STATUS_SUCCESS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"461\"></td><td><pre></pre></td></tr><tr><td data-num=\"462\"></td><td><pre>    <span class=\"token function\">NtClose</span><span class=\"token punctuation\">(</span> driverHandle <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"463\"></td><td><pre></pre></td></tr><tr><td data-num=\"464\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"465\"></td><td><pre>    <span class=\"token comment\">// Load the Registry information in the appropriate fields of the device</span></pre></td></tr><tr><td data-num=\"466\"></td><td><pre>    <span class=\"token comment\">// object.</span></pre></td></tr><tr><td data-num=\"467\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"468\"></td><td><pre></pre></td></tr><tr><td data-num=\"469\"></td><td><pre>    driverObject<span class=\"token operator\">-></span>HardwareDatabase <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"470\"></td><td><pre>        <span class=\"token operator\">&amp;</span>CmRegistryMachineHardwareDescriptionSystemName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"471\"></td><td><pre></pre></td></tr><tr><td data-num=\"472\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"473\"></td><td><pre>    <span class=\"token comment\">// Store the name of the device driver in the driver object so that it</span></pre></td></tr><tr><td data-num=\"474\"></td><td><pre>    <span class=\"token comment\">// can be easily found by the error log thread.</span></pre></td></tr><tr><td data-num=\"475\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"476\"></td><td><pre></pre></td></tr><tr><td data-num=\"477\"></td><td><pre>    driverObject<span class=\"token operator\">-></span>DriverName<span class=\"token punctuation\">.</span>Buffer <span class=\"token operator\">=</span> <span class=\"token function\">ExAllocatePool</span><span class=\"token punctuation\">(</span> PagedPool<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"478\"></td><td><pre>                                                      driverName<span class=\"token punctuation\">.</span>MaximumLength <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"479\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>driverObject<span class=\"token operator\">-></span>DriverName<span class=\"token punctuation\">.</span>Buffer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"480\"></td><td><pre>        driverObject<span class=\"token operator\">-></span>DriverName<span class=\"token punctuation\">.</span>MaximumLength <span class=\"token operator\">=</span> driverName<span class=\"token punctuation\">.</span>MaximumLength<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"481\"></td><td><pre>        driverObject<span class=\"token operator\">-></span>DriverName<span class=\"token punctuation\">.</span>Length <span class=\"token operator\">=</span> driverName<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"482\"></td><td><pre></pre></td></tr><tr><td data-num=\"483\"></td><td><pre>        <span class=\"token function\">RtlCopyMemory</span><span class=\"token punctuation\">(</span> driverObject<span class=\"token operator\">-></span>DriverName<span class=\"token punctuation\">.</span>Buffer<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"484\"></td><td><pre>                       driverName<span class=\"token punctuation\">.</span>Buffer<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"485\"></td><td><pre>                       driverName<span class=\"token punctuation\">.</span>MaximumLength <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"486\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"487\"></td><td><pre></pre></td></tr><tr><td data-num=\"488\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"489\"></td><td><pre>    <span class=\"token comment\">// Query the name of the registry path for this driver so that it can</span></pre></td></tr><tr><td data-num=\"490\"></td><td><pre>    <span class=\"token comment\">// be passed to the driver.</span></pre></td></tr><tr><td data-num=\"491\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"492\"></td><td><pre></pre></td></tr><tr><td data-num=\"493\"></td><td><pre>    registryPath <span class=\"token operator\">=</span> <span class=\"token function\">ExAllocatePool</span><span class=\"token punctuation\">(</span> NonPagedPool<span class=\"token punctuation\">,</span> PAGE_SIZE <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"494\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>registryPath<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"495\"></td><td><pre>        <span class=\"token function\">ObMakeTemporaryObject</span><span class=\"token punctuation\">(</span> driverObject <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"496\"></td><td><pre>        <span class=\"token function\">ObDereferenceObject</span><span class=\"token punctuation\">(</span> driverObject <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"497\"></td><td><pre>        status <span class=\"token operator\">=</span> STATUS_INSUFFICIENT_RESOURCES<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"498\"></td><td><pre>        <span class=\"token keyword\">goto</span> IopLoadExit<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"499\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"500\"></td><td><pre></pre></td></tr><tr><td data-num=\"501\"></td><td><pre>    status <span class=\"token operator\">=</span> <span class=\"token function\">NtQueryObject</span><span class=\"token punctuation\">(</span> KeyHandle<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"502\"></td><td><pre>                            ObjectNameInformation<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"503\"></td><td><pre>                            registryPath<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"504\"></td><td><pre>                            PAGE_SIZE<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"505\"></td><td><pre>                            <span class=\"token operator\">&amp;</span>i <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"506\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">NT_SUCCESS</span><span class=\"token punctuation\">(</span> status <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"507\"></td><td><pre>        <span class=\"token function\">ObMakeTemporaryObject</span><span class=\"token punctuation\">(</span> driverObject <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"508\"></td><td><pre>        <span class=\"token function\">ObDereferenceObject</span><span class=\"token punctuation\">(</span> driverObject <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"509\"></td><td><pre>        <span class=\"token function\">ExFreePool</span><span class=\"token punctuation\">(</span> registryPath <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"510\"></td><td><pre>        <span class=\"token keyword\">goto</span> IopLoadExit<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"511\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"512\"></td><td><pre></pre></td></tr><tr><td data-num=\"513\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\">DBG</span></span></pre></td></tr><tr><td data-num=\"514\"></td><td><pre>    <span class=\"token function\">KeQuerySystemTime</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>stime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"515\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"516\"></td><td><pre></pre></td></tr><tr><td data-num=\"517\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"518\"></td><td><pre>    <span class=\"token comment\">// Store the service key name of the device driver in the driver object</span></pre></td></tr><tr><td data-num=\"519\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"520\"></td><td><pre></pre></td></tr><tr><td data-num=\"521\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>serviceName<span class=\"token punctuation\">.</span>Buffer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"522\"></td><td><pre>        driverObject<span class=\"token operator\">-></span>DriverExtension<span class=\"token operator\">-></span>ServiceKeyName<span class=\"token punctuation\">.</span>Buffer <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"523\"></td><td><pre>            <span class=\"token function\">ExAllocatePool</span><span class=\"token punctuation\">(</span> NonPagedPool<span class=\"token punctuation\">,</span> serviceName<span class=\"token punctuation\">.</span>MaximumLength <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"524\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>driverObject<span class=\"token operator\">-></span>DriverExtension<span class=\"token operator\">-></span>ServiceKeyName<span class=\"token punctuation\">.</span>Buffer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"525\"></td><td><pre>            driverObject<span class=\"token operator\">-></span>DriverExtension<span class=\"token operator\">-></span>ServiceKeyName<span class=\"token punctuation\">.</span>MaximumLength <span class=\"token operator\">=</span> serviceName<span class=\"token punctuation\">.</span>MaximumLength<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"526\"></td><td><pre>            driverObject<span class=\"token operator\">-></span>DriverExtension<span class=\"token operator\">-></span>ServiceKeyName<span class=\"token punctuation\">.</span>Length <span class=\"token operator\">=</span> serviceName<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"527\"></td><td><pre></pre></td></tr><tr><td data-num=\"528\"></td><td><pre>            <span class=\"token function\">RtlCopyMemory</span><span class=\"token punctuation\">(</span> driverObject<span class=\"token operator\">-></span>DriverExtension<span class=\"token operator\">-></span>ServiceKeyName<span class=\"token punctuation\">.</span>Buffer<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"529\"></td><td><pre>                           serviceName<span class=\"token punctuation\">.</span>Buffer<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"530\"></td><td><pre>                           serviceName<span class=\"token punctuation\">.</span>MaximumLength <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"531\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"532\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"533\"></td><td><pre></pre></td></tr><tr><td data-num=\"534\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"535\"></td><td><pre>    <span class=\"token comment\">// Now invoke the driver's initialization routine to initialize itself.</span></pre></td></tr><tr><td data-num=\"536\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"537\"></td><td><pre></pre></td></tr><tr><td data-num=\"538\"></td><td><pre>    status <span class=\"token operator\">=</span> driverObject<span class=\"token operator\">-></span><span class=\"token function\">DriverInit</span><span class=\"token punctuation\">(</span> driverObject<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>registryPath<span class=\"token operator\">-></span>Name <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"539\"></td><td><pre></pre></td></tr><tr><td data-num=\"540\"></td><td><pre>    <span class=\"token operator\">*</span>DriverEntryStatus <span class=\"token operator\">=</span> status<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"541\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">NT_SUCCESS</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"542\"></td><td><pre></pre></td></tr><tr><td data-num=\"543\"></td><td><pre>        status <span class=\"token operator\">=</span> STATUS_FAILED_DRIVER_ENTRY<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"544\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"545\"></td><td><pre></pre></td></tr><tr><td data-num=\"546\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\">DBG</span></span></pre></td></tr><tr><td data-num=\"547\"></td><td><pre></pre></td></tr><tr><td data-num=\"548\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"549\"></td><td><pre>    <span class=\"token comment\">// If DriverInit took longer than 5 seconds, print a message.</span></pre></td></tr><tr><td data-num=\"550\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"551\"></td><td><pre></pre></td></tr><tr><td data-num=\"552\"></td><td><pre>    <span class=\"token function\">KeQuerySystemTime</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>etime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"553\"></td><td><pre>    dtime  <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>ULONG<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>etime<span class=\"token punctuation\">.</span>QuadPart <span class=\"token operator\">-</span> stime<span class=\"token punctuation\">.</span>QuadPart<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">1000000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"554\"></td><td><pre></pre></td></tr><tr><td data-num=\"555\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dtime <span class=\"token operator\">></span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"556\"></td><td><pre>        <span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"IOLOAD: Driver %wZ took %d.%ds to %s\\n\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"557\"></td><td><pre>            <span class=\"token operator\">&amp;</span>driverName<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"558\"></td><td><pre>            dtime<span class=\"token operator\">/</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"559\"></td><td><pre>            dtime<span class=\"token operator\">%</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"560\"></td><td><pre>            <span class=\"token function\">NT_SUCCESS</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token string\">\"initialize\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"fail initialization\"</span></pre></td></tr><tr><td data-num=\"561\"></td><td><pre>            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"562\"></td><td><pre></pre></td></tr><tr><td data-num=\"563\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"564\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"565\"></td><td><pre></pre></td></tr><tr><td data-num=\"566\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"567\"></td><td><pre>    <span class=\"token comment\">// Workaround for broken NT 4.0 3D labs driver</span></pre></td></tr><tr><td data-num=\"568\"></td><td><pre>    <span class=\"token comment\">// They zero out some function table entries by mistake.</span></pre></td></tr><tr><td data-num=\"569\"></td><td><pre></pre></td></tr><tr><td data-num=\"570\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> IRP_MJ_MAXIMUM_FUNCTION<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"571\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>driverObject<span class=\"token operator\">-></span>MajorFunction<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"572\"></td><td><pre>            <span class=\"token function\">ASSERT</span><span class=\"token punctuation\">(</span>driverObject<span class=\"token operator\">-></span>MajorFunction<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"573\"></td><td><pre>            driverObject<span class=\"token operator\">-></span>MajorFunction<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> IopInvalidDeviceRequest<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"574\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"575\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"576\"></td><td><pre></pre></td></tr><tr><td data-num=\"577\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"578\"></td><td><pre>    <span class=\"token comment\">// If DriverInit doesn't work, then simply unload the image and mark the driver</span></pre></td></tr><tr><td data-num=\"579\"></td><td><pre>    <span class=\"token comment\">// object as temporary.  This will cause everything to be deleted.</span></pre></td></tr><tr><td data-num=\"580\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"581\"></td><td><pre></pre></td></tr><tr><td data-num=\"582\"></td><td><pre>    <span class=\"token function\">ExFreePool</span><span class=\"token punctuation\">(</span> registryPath <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"583\"></td><td><pre></pre></td></tr><tr><td data-num=\"584\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"585\"></td><td><pre>    <span class=\"token comment\">// If we load the driver because we think it is a legacy driver and</span></pre></td></tr><tr><td data-num=\"586\"></td><td><pre>    <span class=\"token comment\">// it does not create any device object in its DriverEntry.  We will</span></pre></td></tr><tr><td data-num=\"587\"></td><td><pre>    <span class=\"token comment\">// unload this driver.</span></pre></td></tr><tr><td data-num=\"588\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"589\"></td><td><pre></pre></td></tr><tr><td data-num=\"590\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">NT_SUCCESS</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token function\">IopIsLegacyDriver</span><span class=\"token punctuation\">(</span>driverObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"591\"></td><td><pre></pre></td></tr><tr><td data-num=\"592\"></td><td><pre>        status <span class=\"token operator\">=</span> <span class=\"token function\">IopPnpDriverStarted</span><span class=\"token punctuation\">(</span>driverObject<span class=\"token punctuation\">,</span> KeyHandle<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>serviceName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"593\"></td><td><pre></pre></td></tr><tr><td data-num=\"594\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">NT_SUCCESS</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"595\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>driverObject<span class=\"token operator\">-></span>DriverUnload<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"596\"></td><td><pre>                driverObject<span class=\"token operator\">-></span>Flags <span class=\"token operator\">|=</span> DRVO_UNLOAD_INVOKED<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"597\"></td><td><pre>                driverObject<span class=\"token operator\">-></span><span class=\"token function\">DriverUnload</span><span class=\"token punctuation\">(</span>driverObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"598\"></td><td><pre>                <span class=\"token function\">IopBootLog</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>baseName<span class=\"token punctuation\">,</span> FALSE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"599\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"600\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\">DBG</span></span></pre></td></tr><tr><td data-num=\"601\"></td><td><pre>                <span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"IopLoadDriver: A PnP driver %wZ does not support DriverUnload routine.\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>driverName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"602\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"603\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"604\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"605\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"606\"></td><td><pre></pre></td></tr><tr><td data-num=\"607\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">NT_SUCCESS</span><span class=\"token punctuation\">(</span> status <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"608\"></td><td><pre>        <span class=\"token function\">ObMakeTemporaryObject</span><span class=\"token punctuation\">(</span> driverObject <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"609\"></td><td><pre>        <span class=\"token function\">ObDereferenceObject</span><span class=\"token punctuation\">(</span> driverObject <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"610\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"611\"></td><td><pre></pre></td></tr><tr><td data-num=\"612\"></td><td><pre>        <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"613\"></td><td><pre>        <span class=\"token comment\">// Free the memory occupied by the driver's initialization routines.</span></pre></td></tr><tr><td data-num=\"614\"></td><td><pre>        <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"615\"></td><td><pre></pre></td></tr><tr><td data-num=\"616\"></td><td><pre>        <span class=\"token function\">IopBootLog</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>baseName<span class=\"token punctuation\">,</span> TRUE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"617\"></td><td><pre>        <span class=\"token function\">MmFreeDriverInitialization</span><span class=\"token punctuation\">(</span> driverObject<span class=\"token operator\">-></span>DriverSection <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"618\"></td><td><pre>        <span class=\"token function\">IopReadyDeviceObjects</span><span class=\"token punctuation\">(</span> driverObject <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"619\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"620\"></td><td><pre></pre></td></tr><tr><td data-num=\"621\"></td><td><pre>IopLoadExit<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"622\"></td><td><pre></pre></td></tr><tr><td data-num=\"623\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">NT_SUCCESS</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>status <span class=\"token operator\">==</span> STATUS_IMAGE_ALREADY_LOADED<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"624\"></td><td><pre>        <span class=\"token function\">HeadlessKernelAddLogEntry</span><span class=\"token punctuation\">(</span>HEADLESS_LOG_LOAD_SUCCESSFUL<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"625\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"626\"></td><td><pre>        <span class=\"token function\">HeadlessKernelAddLogEntry</span><span class=\"token punctuation\">(</span>HEADLESS_LOG_LOAD_FAILED<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"627\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"628\"></td><td><pre></pre></td></tr><tr><td data-num=\"629\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"630\"></td><td><pre>    <span class=\"token comment\">// Free any pool that was allocated by this routine that has not yet</span></pre></td></tr><tr><td data-num=\"631\"></td><td><pre>    <span class=\"token comment\">// been freed.</span></pre></td></tr><tr><td data-num=\"632\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"633\"></td><td><pre></pre></td></tr><tr><td data-num=\"634\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>driverName<span class=\"token punctuation\">.</span>Buffer <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"635\"></td><td><pre>        <span class=\"token function\">ExFreePool</span><span class=\"token punctuation\">(</span> driverName<span class=\"token punctuation\">.</span>Buffer <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"636\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"637\"></td><td><pre></pre></td></tr><tr><td data-num=\"638\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>keyBasicInformation <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"639\"></td><td><pre>        <span class=\"token function\">ExFreePool</span><span class=\"token punctuation\">(</span> keyBasicInformation <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"640\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"641\"></td><td><pre></pre></td></tr><tr><td data-num=\"642\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>serviceName<span class=\"token punctuation\">.</span>Buffer <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"643\"></td><td><pre>        <span class=\"token function\">ExFreePool</span><span class=\"token punctuation\">(</span>serviceName<span class=\"token punctuation\">.</span>Buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"644\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"645\"></td><td><pre></pre></td></tr><tr><td data-num=\"646\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>baseName<span class=\"token punctuation\">.</span>Buffer <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"647\"></td><td><pre>        <span class=\"token function\">ExFreePool</span><span class=\"token punctuation\">(</span>baseName<span class=\"token punctuation\">.</span>Buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"648\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"649\"></td><td><pre></pre></td></tr><tr><td data-num=\"650\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"651\"></td><td><pre>    <span class=\"token comment\">// If this routine is about to return a failure, then let the Configuration</span></pre></td></tr><tr><td data-num=\"652\"></td><td><pre>    <span class=\"token comment\">// Manager know about it.  But, if STATUS_PLUGPLAY_NO_DEVICE, the device was</span></pre></td></tr><tr><td data-num=\"653\"></td><td><pre>    <span class=\"token comment\">// disabled by hardware profile.  In this case we don't need to report it.</span></pre></td></tr><tr><td data-num=\"654\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"655\"></td><td><pre></pre></td></tr><tr><td data-num=\"656\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">NT_SUCCESS</span><span class=\"token punctuation\">(</span> status <span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>status <span class=\"token operator\">!=</span> STATUS_PLUGPLAY_NO_DEVICE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"657\"></td><td><pre></pre></td></tr><tr><td data-num=\"658\"></td><td><pre>        NTSTATUS lStatus<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"659\"></td><td><pre>        PULONG errorControl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"660\"></td><td><pre>        PKEY_VALUE_FULL_INFORMATION keyValueInformation<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"661\"></td><td><pre></pre></td></tr><tr><td data-num=\"662\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>status <span class=\"token operator\">!=</span> STATUS_IMAGE_ALREADY_LOADED<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"663\"></td><td><pre></pre></td></tr><tr><td data-num=\"664\"></td><td><pre>            <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"665\"></td><td><pre>            <span class=\"token comment\">// If driver was loaded, do not call IopDriverLoadingFailed to change</span></pre></td></tr><tr><td data-num=\"666\"></td><td><pre>            <span class=\"token comment\">// the driver loading status.  Because, obviously, the driver is</span></pre></td></tr><tr><td data-num=\"667\"></td><td><pre>            <span class=\"token comment\">// running.</span></pre></td></tr><tr><td data-num=\"668\"></td><td><pre>            <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"669\"></td><td><pre></pre></td></tr><tr><td data-num=\"670\"></td><td><pre>            <span class=\"token function\">IopDriverLoadingFailed</span><span class=\"token punctuation\">(</span>KeyHandle<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"671\"></td><td><pre>            lStatus <span class=\"token operator\">=</span> <span class=\"token function\">IopGetRegistryValue</span><span class=\"token punctuation\">(</span> KeyHandle<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"672\"></td><td><pre>                                           L<span class=\"token string\">\"ErrorControl\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"673\"></td><td><pre>                                           <span class=\"token operator\">&amp;</span>keyValueInformation <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"674\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">NT_SUCCESS</span><span class=\"token punctuation\">(</span> lStatus <span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>keyValueInformation<span class=\"token operator\">-></span>DataLength<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"675\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">NT_SUCCESS</span><span class=\"token punctuation\">(</span> lStatus <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"676\"></td><td><pre>                    <span class=\"token function\">ExFreePool</span><span class=\"token punctuation\">(</span> keyValueInformation <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"677\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"678\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"679\"></td><td><pre>                errorControl <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PULONG<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>PUCHAR<span class=\"token punctuation\">)</span> keyValueInformation <span class=\"token operator\">+</span> keyValueInformation<span class=\"token operator\">-></span>DataOffset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"680\"></td><td><pre>                <span class=\"token function\">CmBootLastKnownGood</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">*</span>errorControl <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"681\"></td><td><pre>                <span class=\"token function\">ExFreePool</span><span class=\"token punctuation\">(</span> keyValueInformation <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"682\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"683\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"684\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"685\"></td><td><pre></pre></td></tr><tr><td data-num=\"686\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"687\"></td><td><pre>    <span class=\"token comment\">// Close the caller's handle and return the final status from the load</span></pre></td></tr><tr><td data-num=\"688\"></td><td><pre>    <span class=\"token comment\">// operation.</span></pre></td></tr><tr><td data-num=\"689\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"690\"></td><td><pre></pre></td></tr><tr><td data-num=\"691\"></td><td><pre>    <span class=\"token function\">ObCloseHandle</span><span class=\"token punctuation\">(</span> KeyHandle <span class=\"token punctuation\">,</span> KernelMode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"692\"></td><td><pre>    <span class=\"token keyword\">return</span> status<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"693\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>其中这个链表就是我们在 0 环的断的链表，链表由操作系统填充。</p>\n<p><img data-src=\"image003.png\" alt=\"\" /></p>\n<p>前期是读取注册表获取驱动信息，然后申请资源然后在  <code>PsLoadedModuleList</code>  这个全局变量插入一个驱动对象。</p>\n<p>接着向下分析，看到有驱动对象相关的操作：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>driverObject<span class=\"token operator\">-></span>DriverExtension <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PDRIVER_EXTENSION<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>driverObject <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>driverObject<span class=\"token operator\">-></span>DriverExtension<span class=\"token operator\">-></span>DriverObject <span class=\"token operator\">=</span> driverObject<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>不知道为什么使驱动对象加 1，使驱动扩展节的第一个驱动对象指向自己</p>\n<p><img data-src=\"image004.png\" alt=\"\" /></p>\n<p>接着就是一系列的赋值操作，其中有一个驱动初始化的函数，里面有驱动的入口函数：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>driverObject<span class=\"token operator\">-></span>DriverInit <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PDRIVER_INITIALIZE<span class=\"token punctuation\">)</span> entryPoint<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><img data-src=\"image005.png\" alt=\"\" /></p>\n<p>可以发现是 PE 映像。</p>\n<p>下面是给节区赋值：</p>\n<p><code>driverObject-&gt;DriverSection = sectionPointer;</code></p>\n<p><code>sectionPointer</code>  这样被赋值了</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>status <span class=\"token operator\">=</span> <span class=\"token function\">MmLoadSystemImage</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">&amp;</span>baseName<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>                                <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                                <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                                <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                                <span class=\"token operator\">&amp;</span>sectionPointer<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                                <span class=\"token punctuation\">(</span>PVOID <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>imageBaseAddress <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>跟一下  <code>MmLoadSystemImage</code>  这个函数:</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>NTSTATUS</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">MmLoadSystemImage</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    IN PUNICODE_STRING ImageFileName<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    IN PUNICODE_STRING NamePrefix OPTIONAL<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    IN PUNICODE_STRING LoadedBaseName OPTIONAL<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    IN ULONG LoadFlags<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    OUT PVOID <span class=\"token operator\">*</span>ImageHandle<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    OUT PVOID <span class=\"token operator\">*</span>ImageBaseAddress</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>我们只看其对倒数第二个函数的操作：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">*</span>ImageHandle <span class=\"token operator\">=</span> DataTableEntry<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>发现有对其赋值的操作，查看  <code>DataTableEntry</code> :</p>\n<p>查看其声明  <code>PKLDR_DATA_TABLE_ENTRY DataTableEntry;</code></p>\n<p>查看类型：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_KLDR_DATA_TABLE_ENTRY</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    LIST_ENTRY InLoadOrderLinks<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    PVOID ExceptionTable<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    ULONG ExceptionTableSize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// ULONG padding on IA64</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    PVOID GpValue<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    PNON_PAGED_DEBUG_INFO NonPagedDebugInfo<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    PVOID DllBase<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    PVOID EntryPoint<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    ULONG SizeOfImage<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    UNICODE_STRING FullDllName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    UNICODE_STRING BaseDllName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    ULONG Flags<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    USHORT LoadCount<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    USHORT __Unused5<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    PVOID SectionPointer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    ULONG CheckSum<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">// ULONG padding on IA64</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    PVOID LoadedImports<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    PVOID PatchInformation<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span> KLDR_DATA_TABLE_ENTRY<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>PKLDR_DATA_TABLE_ENTRY<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>还是这个链表。</p>\n<p>接着向下分析：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>status <span class=\"token operator\">=</span> <span class=\"token function\">ObInsertObject</span><span class=\"token punctuation\">(</span> driverObject<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>                             <span class=\"token punctuation\">(</span>PACCESS_STATE<span class=\"token punctuation\">)</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                             FILE_READ_DATA<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                             <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                             <span class=\"token punctuation\">(</span>PVOID <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                             <span class=\"token operator\">&amp;</span>driverHandle <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这个函数的介绍是：这个例程在当前进程句柄表中插入一个对象。</p>\n<p>接着下面的函数是资源相关的，暂时不分析。</p>\n<p>接着又是测试  <code>ObReferenceObjectByHandle</code>  函数，</p>\n<p>WRK 中的函数介绍为：给定一个对象的句柄，这个例程返回一个指向具有适当引用计数的对象主体的指针。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>status <span class=\"token operator\">=</span> <span class=\"token function\">ObReferenceObjectByHandle</span><span class=\"token punctuation\">(</span> driverHandle<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>                                    <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                                    IoDriverObjectType<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                                    <span class=\"token function\">KeGetPreviousMode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                                    <span class=\"token punctuation\">(</span>PVOID <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>driverObject<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                                    <span class=\"token punctuation\">(</span>POBJECT_HANDLE_INFORMATION<span class=\"token punctuation\">)</span> <span class=\"token constant\">NULL</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">ASSERT</span><span class=\"token punctuation\">(</span>status <span class=\"token operator\">==</span> STATUS_SUCCESS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token function\">NtClose</span><span class=\"token punctuation\">(</span> driverHandle <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>判读是否成功后就关闭句柄了。</p>\n<p>接着向下分析直到看到调用入口点了：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>status <span class=\"token operator\">=</span> driverObject<span class=\"token operator\">-></span><span class=\"token function\">DriverInit</span><span class=\"token punctuation\">(</span> driverObject<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>registryPath<span class=\"token operator\">-></span>Name <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">*</span>DriverEntryStatus <span class=\"token operator\">=</span> status<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">NT_SUCCESS</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  status <span class=\"token operator\">=</span> STATUS_FAILED_DRIVER_ENTRY<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>也就是说只要符合 PE 文件格式的，我们自己可以构造，就是用 mian 函数构造两个参数，分别接受这个两个对象，一样的可以贴到这个内核里面，通过服务注册，因为从上到下来看它并没用做什么校验。--- 火哥原话 …… 没听懂。</p>\n<p><strong>这里还有一个扩展知识</strong><br />\n调用  <code>DriverInit</code>  函数时有一个返回，如果不成功，还会把这个返回值给下一个函数，而下一个函数会把这个加载失败的驱动给去掉。而这种一次性的加载能干什么呢？<br />\n如果我们是想提权，直接在 DriverEntry 中构建一个调用门或者构建一个中断，然后把我们的函数拷贝到自己分配的一块内存，把 ShellCode 拷进去，这样我们驱动返回失败，驱动被摘除，只留下了一块内存（函数）了，基本就检测不到了。</p>\n<p><code>IopLoadExit</code>  后面都是释放了内存。</p>\n<p>如图：</p>\n<p><img data-src=\"image006.png\" alt=\"\" /></p>\n<p>系统已经自己抹去 PE 指纹了，初始化函数已经没了。</p>\n<p>操作系统并没有把驱动对象放到全局变量中保存，只是一个局部变量，唯一做得就是放到链表中保存，搞定这个链表就把驱动隐藏了。</p>\n<p>操作系统若不释放的话，谁都能找到这个驱动的入口的点了:</p>\n<p><img data-src=\"image008.png\" alt=\"\" /></p>\n<p>当操作系统抹去 PE 指纹后，就不是一个 PE 文件了，只是一块内存注入到了内核空间中（高 2G 上）。<br />\n所以在这里，所有的东西都被抹掉了，只能通过这个链表才能找的着，那我们如何在这里动手脚呢？</p>\n<p>还是需要看这两个结构体：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kd<span class=\"token operator\">></span> <span class=\"token operator\">?</span><span class=\"token operator\">?</span> <span class=\"token operator\">/</span>s pdriver</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">_DRIVER_OBJECT</span> <span class=\"token operator\">*</span> <span class=\"token number\">0x89d35f38</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x000</span> Type             <span class=\"token operator\">:</span> <span class=\"token number\">0</span>n4</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x002</span> Size             <span class=\"token operator\">:</span> <span class=\"token number\">0</span>n168</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x004</span> DeviceObject     <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>null<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x008</span> Flags            <span class=\"token operator\">:</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x00c</span> DriverStart      <span class=\"token operator\">:</span> <span class=\"token number\">0xba4a0000</span> Void</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x010</span> DriverSize       <span class=\"token operator\">:</span> <span class=\"token number\">0x6000</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x014</span> DriverSection    <span class=\"token operator\">:</span> <span class=\"token number\">0x89e01618</span> Void</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x018</span> DriverExtension  <span class=\"token operator\">:</span> <span class=\"token number\">0x89d35fe0</span> _DRIVER_EXTENSION</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x01c</span> DriverName       <span class=\"token operator\">:</span> _UNICODE_STRING <span class=\"token string\">\"\\Driver\\DriverHidden111\"</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x024</span> HardwareDatabase <span class=\"token operator\">:</span> <span class=\"token number\">0x8067f260</span> _UNICODE_STRING <span class=\"token string\">\"\\REGISTRY\\MACHINE\\HARDWARE\\DESCRIPTION\\SYSTEM\"</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x028</span> FastIoDispatch   <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>null<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x02c</span> DriverInit       <span class=\"token operator\">:</span> <span class=\"token number\">0xba4a4000</span>     <span class=\"token keyword\">long</span>  DriverHidden111<span class=\"token operator\">!</span>GsDriverEntry<span class=\"token operator\">+</span><span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x030</span> DriverStartIo    <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>null<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x034</span> DriverUnload     <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>null<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x038</span> MajorFunction    <span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">28</span><span class=\"token punctuation\">]</span> <span class=\"token number\">0x804f55ce</span>     <span class=\"token keyword\">long</span>  nt<span class=\"token operator\">!</span>IopInvalidDeviceRequest<span class=\"token operator\">+</span><span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>kd<span class=\"token operator\">></span> dt _LDR_DATA_TABLE_ENTRY <span class=\"token number\">0x89e01618</span> </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>nt<span class=\"token operator\">!</span>_LDR_DATA_TABLE_ENTRY</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x000</span> InLoadOrderLinks <span class=\"token operator\">:</span> _LIST_ENTRY <span class=\"token punctuation\">[</span> <span class=\"token number\">0x8055e720</span> <span class=\"token operator\">-</span> <span class=\"token number\">0x8a1b5c30</span> <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x008</span> InMemoryOrderLinks <span class=\"token operator\">:</span> _LIST_ENTRY <span class=\"token punctuation\">[</span> <span class=\"token number\">0xffffffff</span> <span class=\"token operator\">-</span> <span class=\"token number\">0xffffffff</span> <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x010</span> InInitializationOrderLinks <span class=\"token operator\">:</span> _LIST_ENTRY <span class=\"token punctuation\">[</span> <span class=\"token number\">0x12</span> <span class=\"token operator\">-</span> <span class=\"token number\">0x0</span> <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x018</span> DllBase          <span class=\"token operator\">:</span> <span class=\"token number\">0xba4a0000</span> Void</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x01c</span> EntryPoint       <span class=\"token operator\">:</span> <span class=\"token number\">0xba4a4000</span> Void</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x020</span> SizeOfImage      <span class=\"token operator\">:</span> <span class=\"token number\">0x6000</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x024</span> FullDllName      <span class=\"token operator\">:</span> _UNICODE_STRING <span class=\"token string\">\"\\??\\C:\\Documents and Settings\\Administrator\\桌面\\DriverHidden111.sys\"</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x02c</span> BaseDllName      <span class=\"token operator\">:</span> _UNICODE_STRING <span class=\"token string\">\"DriverHidden111.sys\"</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x034</span> Flags            <span class=\"token operator\">:</span> <span class=\"token number\">0x9104000</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x038</span> LoadCount        <span class=\"token operator\">:</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x03a</span> TlsIndex         <span class=\"token operator\">:</span> <span class=\"token number\">0x2d</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x03c</span> HashLinks        <span class=\"token operator\">:</span> _LIST_ENTRY <span class=\"token punctuation\">[</span> <span class=\"token number\">0xffffffff</span> <span class=\"token operator\">-</span> <span class=\"token number\">0xa576</span> <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x03c</span> SectionPointer   <span class=\"token operator\">:</span> <span class=\"token number\">0xffffffff</span> Void</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x040</span> CheckSum         <span class=\"token operator\">:</span> <span class=\"token number\">0xa576</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x044</span> TimeDateStamp    <span class=\"token operator\">:</span> <span class=\"token number\">0xfffffffe</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x044</span> LoadedImports    <span class=\"token operator\">:</span> <span class=\"token number\">0xfffffffe</span> Void</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x048</span> EntryPointActivationContext <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>null<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"38\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x04c</span> PatchInformation <span class=\"token operator\">:</span> <span class=\"token number\">0x00720044</span> Void</pre></td></tr></table></figure><p>为了看着方便直接就简化了：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kd<span class=\"token operator\">></span> <span class=\"token operator\">?</span><span class=\"token operator\">?</span> <span class=\"token operator\">/</span>s pdriver</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">_DRIVER_OBJECT</span> <span class=\"token operator\">*</span> <span class=\"token number\">0x89d35f38</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x000</span> Type             <span class=\"token operator\">:</span> <span class=\"token number\">0</span>n4</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x002</span> Size             <span class=\"token operator\">:</span> <span class=\"token number\">0</span>n168</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   ……</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x00c</span> DriverStart      <span class=\"token operator\">:</span> <span class=\"token number\">0xba4a0000</span> Void</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x010</span> DriverSize       <span class=\"token operator\">:</span> <span class=\"token number\">0x6000</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x014</span> DriverSection    <span class=\"token operator\">:</span> <span class=\"token number\">0x89e01618</span> Void</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   ……</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x02c</span> DriverInit       <span class=\"token operator\">:</span> <span class=\"token number\">0xba4a4000</span>     <span class=\"token keyword\">long</span>  DriverHidden111<span class=\"token operator\">!</span>GsDriverEntry<span class=\"token operator\">+</span><span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   ……</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>kd<span class=\"token operator\">></span> dt _LDR_DATA_TABLE_ENTRY <span class=\"token number\">0x89e01618</span> </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>nt<span class=\"token operator\">!</span>_LDR_DATA_TABLE_ENTRY</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  ……</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x018</span> DllBase          <span class=\"token operator\">:</span> <span class=\"token number\">0xba4a0000</span> Void</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x01c</span> EntryPoint       <span class=\"token operator\">:</span> <span class=\"token number\">0xba4a4000</span> Void</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   <span class=\"token operator\">+</span><span class=\"token number\">0x020</span> SizeOfImage      <span class=\"token operator\">:</span> <span class=\"token number\">0x6000</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  ……</pre></td></tr></table></figure><hr />\n<p>上面逆 IopLoadDriver 函数 主要得到的信息就是：驱动对象不是全局变量，在这个函数结束后就被释放了，唯一保存的地方就是  <code>_LDR_DATA_TABLE_ENTRY</code>  链表中，但为什么我们断链后 PCHunter 仍然能后发现我们的驱动呢？</p>\n<p>其实 PCHunter 并不是遍历链表找驱动，而是进行特征码扫描，去寻找驱动对象的特征，从而定位驱动对象这个结构体。</p>\n<p>PCHunter 是在哪里定位扫描的呢？</p>\n<p>不知道……</p>\n<hr />\n<p>有哪些特征码呢？</p>\n<p>根据  <code>_DRIVER_OBJECT</code>  结构体我们能发现一些固有的 “特征”，这些可以拿来作为特征码遍历内存。</p>\n<p>从结构体来看，加载完后暂时没用的可以作为特征的结构有如下：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>CSHORT Type<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>CSHORT Size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>PVOID DriverStart<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>ULONG DriverSize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>PVOID DriverSection<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>PDRIVER_EXTENSION DriverExtension<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>UNICODE_STRING DriverName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>PUNICODE_STRING HardwareDatabase<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>PFAST_IO_DISPATCH FastIoDispatch<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>PDRIVER_INITIALIZE DriverInit<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>PDRIVER_STARTIO DriverStartIo<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>PDRIVER_UNLOAD DriverUnload<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>其实只要抹掉  <code>DriverSection</code>  就行了，但保险起见可以都抹除了。</p>\n<h1 id=\"编写代码绕过pchunter\"><a class=\"anchor\" href=\"#编写代码绕过pchunter\">#</a> 编写代码绕过 PCHunter</h1>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 遍历内核模块</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;ntddk.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_LDR_DATA_TABLE_ENTRY</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tLIST_ENTRY InLoadOrderLinks<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tLIST_ENTRY InMemoryOrderLinks<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tLIST_ENTRY InInitializationOrderLinks<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tPVOID DllBase<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tPVOID EntryPoint<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tULONG SizeOfImage<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tUNICODE_STRING FullDllName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tUNICODE_STRING BaseDllName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\tULONG Flags<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tUSHORT LoadCount<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tUSHORT TlsIndex<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token keyword\">union</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\tLIST_ENTRY HashLinks<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t<span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t\tPVOID SectionPointer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t\tULONG CheckSum<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token keyword\">union</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t<span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t\tULONG TimeDateStamp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t<span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t\tPVOID LoadedImports<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">_ACTIVATION_CONTEXT</span><span class=\"token operator\">*</span> EntryPointActivationContext<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\tPVOID PatchInformation<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span> LDR_DATA_TABLE_ENTRY<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span> PLDR_DATA_TABLE_ENTRY<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>HANDLE hThread<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>VOID <span class=\"token function\">ThreadRun</span><span class=\"token punctuation\">(</span>_In_ PVOID StartContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"线程开始执行！\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\tLARGE_INTEGER times<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\ttimes<span class=\"token punctuation\">.</span>QuadPart <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">30</span> <span class=\"token operator\">*</span> <span class=\"token number\">1000</span> <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t<span class=\"token function\">KeDelayExecutionThread</span><span class=\"token punctuation\">(</span>KernelMode<span class=\"token punctuation\">,</span> FALSE<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>times<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\tPDRIVER_OBJECT pDriver <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PDRIVER_OBJECT<span class=\"token punctuation\">)</span>StartContext<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\tpDriver<span class=\"token operator\">-></span>DriverSize <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\tpDriver<span class=\"token operator\">-></span>DriverSection <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\tpDriver<span class=\"token operator\">-></span>DriverStart <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\tpDriver<span class=\"token operator\">-></span>DriverInit <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\tpDriver<span class=\"token operator\">-></span>DriverStartIo <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\tpDriver<span class=\"token operator\">-></span>FastIoDispatch <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\tpDriver<span class=\"token operator\">-></span>DriverExtension <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t<span class=\"token function\">ZwClose</span><span class=\"token punctuation\">(</span>hThread<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"线程结束执行！\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>VOID <span class=\"token function\">DriverUnload</span><span class=\"token punctuation\">(</span>PDRIVER_OBJECT pdriver<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是驱动，我卸载了\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>NTSTATUS <span class=\"token function\">DriverEntry</span><span class=\"token punctuation\">(</span>PDRIVER_OBJECT pdriver<span class=\"token punctuation\">,</span> PUNICODE_STRING reg_path<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是驱动，我运行了\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t__asm <span class=\"token keyword\">int</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\tPLDR_DATA_TABLE_ENTRY pLdtePre<span class=\"token punctuation\">;</span> <span class=\"token comment\">// </span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\tPLDR_DATA_TABLE_ENTRY pLdteCur<span class=\"token punctuation\">;</span> <span class=\"token comment\">// </span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\tPLDR_DATA_TABLE_ENTRY pLdteNex<span class=\"token punctuation\">;</span> <span class=\"token comment\">// </span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>\tpLdteCur <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PLDR_DATA_TABLE_ENTRY<span class=\"token punctuation\">)</span>pdriver<span class=\"token operator\">-></span>DriverSection<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\tpLdtePre <span class=\"token operator\">=</span> pLdteCur<span class=\"token operator\">-></span>InLoadOrderLinks<span class=\"token punctuation\">.</span>Blink<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\tpLdteNex <span class=\"token operator\">=</span> pLdteCur<span class=\"token operator\">-></span>InLoadOrderLinks<span class=\"token punctuation\">.</span>Flink<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\tpLdtePre<span class=\"token operator\">-></span>InLoadOrderLinks<span class=\"token punctuation\">.</span>Flink <span class=\"token operator\">=</span> pLdteCur<span class=\"token operator\">-></span>InLoadOrderLinks<span class=\"token punctuation\">.</span>Flink<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\tpLdteNex<span class=\"token operator\">-></span>InLoadOrderLinks<span class=\"token punctuation\">.</span>Blink <span class=\"token operator\">=</span> pLdteCur<span class=\"token operator\">-></span>InLoadOrderLinks<span class=\"token punctuation\">.</span>Blink<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>\tpdriver<span class=\"token operator\">-></span>DriverUnload <span class=\"token operator\">=</span> DriverUnload<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"76\"></td><td><pre>\t<span class=\"token function\">PsCreateSystemThread</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>hThread<span class=\"token punctuation\">,</span> GENERIC_ALL<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> ThreadRun<span class=\"token punctuation\">,</span> pdriver<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"78\"></td><td><pre>\t<span class=\"token keyword\">return</span> STATUS_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这里有点不好的地方就是无法卸载此驱动，就算在  <code>UnloadDriver</code>  填写了恢复代码。具体详情需要分析  <code>IopUnloadDriver</code>   看它什么时候调用该函数。</p>\n<p>结果：</p>\n<p><img data-src=\"image009.png\" alt=\"\" /></p>\n<p>经过火哥测试，在 win7 下也是可以隐藏的。</p>\n",
            "tags": [
                "隐藏驱动",
                "IopLoadDriver"
            ]
        },
        {
            "id": "https://or0kit.github.io/Bin/Core/Drive-Development/%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91-%E5%86%85%E6%A0%B8%E7%BC%96%E7%A8%8B%E5%B8%B8%E7%94%A8%E6%8A%80%E5%B7%A7/",
            "url": "https://or0kit.github.io/Bin/Core/Drive-Development/%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91-%E5%86%85%E6%A0%B8%E7%BC%96%E7%A8%8B%E5%B8%B8%E7%94%A8%E6%8A%80%E5%B7%A7/",
            "title": "驱动开发-内核编程常用技巧",
            "date_published": "2021-12-06T14:12:04.000Z",
            "content_html": "<h1 id=\"\"><a class=\"anchor\" href=\"#\">#</a> </h1>\n",
            "tags": []
        },
        {
            "id": "https://or0kit.github.io/Bin/Core/Drive-Development/%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91-64%E4%BD%8D%E4%B8%8E32%E4%BD%8D%E5%86%85%E6%A0%B8%E5%BC%80%E5%8F%91%E5%B7%AE%E5%BC%82/",
            "url": "https://or0kit.github.io/Bin/Core/Drive-Development/%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91-64%E4%BD%8D%E4%B8%8E32%E4%BD%8D%E5%86%85%E6%A0%B8%E5%BC%80%E5%8F%91%E5%B7%AE%E5%BC%82/",
            "title": "驱动开发-64位与32位内核开发差异",
            "date_published": "2021-12-06T14:11:07.000Z",
            "content_html": "<h1 id=\"\"><a class=\"anchor\" href=\"#\">#</a> </h1>\n",
            "tags": []
        },
        {
            "id": "https://or0kit.github.io/Bin/Core/Drive-Development/%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91-%E5%86%85%E6%A0%B8%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80plus/",
            "url": "https://or0kit.github.io/Bin/Core/Drive-Development/%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91-%E5%86%85%E6%A0%B8%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80plus/",
            "title": "驱动开发-内核编程基础plus",
            "date_published": "2021-12-06T14:08:01.000Z",
            "content_html": "<h1 id=\"楔子\"><a class=\"anchor\" href=\"#楔子\">#</a> 楔子</h1>\n<p>学习一下常用的驱动编程机制。</p>\n<h1 id=\"上下文环境\"><a class=\"anchor\" href=\"#上下文环境\">#</a> 上下文环境</h1>\n<p>应用层 EXE 有独立进程的概念。当这个 EXE 运行的时候，开发者可以很清楚地知道程序的定运行在哪一个线程中。对于内核驱动开发来说，进程的概念啊显得相当模糊，初学者往往不清楚自己的驱动代码具体运行在什么进程或线程中。</p>\n<p>这就是需要了解的上下文 (Context) 概念，上下文泛指 CPU 在执行代码时，该代码所处的环境与状态。通俗来讲，这些环境包括（不仅限）：当前代码所属线程、中断请求级别、CPU 寄存器各状态。</p>\n<p>这里可以做一个小实验，写代码验证一下。<br />\n写一个简单的驱动代码，测试驱动入口函数和驱动卸载函数在执行时是属于哪一个进程的，只要在这两个函数中调用  <code>PsGetCurrentProcessId</code>  函数获取当前进程 ID 就行。</p>\n<p>这里我就直接说结果了。</p>\n<p>无论是驱动入口函数还是驱动卸载函数，都隶属于进程 ID 为 4 的进程，也就是 SYSTEM 进程。</p>\n<p>SYSTEM 进程其实是操作系统虚拟出来的一个进程，代表系统内核。一般来说内核代码都处于 SYSTEM 进程空间中，但驱动对象（DRIVER_OBJECT）的派遣例程一般工作在发起请求的进程中。</p>\n<p><strong>地址空间</strong>，对 32 位系统来说，应用层程序有独立的 2GB 低地址虚拟内存空间，而高地址的 2GB 是内核共享的地址空间。<br />\n在 64 位 Windows 中，虚拟地址空间的理论大小为 2 的 64 次方字节，但实际使用的仅一小部分，范围从  <code>0x000`00000000</code>  至  <code>0x7FF`FFFFFFFF</code>  的 8TB 用于应用层空间，范围从  <code>0xFFFF0800`00000000</code>  至  <code>0xFFFFFFFF`FFFFFFFF</code>  的 248TB 用于内核空间。</p>\n<h1 id=\"中断请求级别\"><a class=\"anchor\" href=\"#中断请求级别\">#</a> 中断请求级别</h1>\n<h1 id=\"链表\"><a class=\"anchor\" href=\"#链表\">#</a> 链表</h1>\n<p>链表作为内核</p>\n<h1 id=\"自旋锁\"><a class=\"anchor\" href=\"#自旋锁\">#</a> 自旋锁</h1>\n<h1 id=\"注册表\"><a class=\"anchor\" href=\"#注册表\">#</a> 注册表</h1>\n<p>注册表是 Windows 系统中最重要的数据配置存储结构，存储着系统绝大部分的核心配置信息。注册表实际上也是一种文件。这些文件大多数存储在<strong>系统盘</strong> system32\\config 目录下。</p>\n<p>在资源管理器中我没有权限访问，懒得更改了，我在 cmd 中查看如下：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>C:\\Windows\\System32\\config&gt;dir</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>C:\\Windows\\System32\\config 的目录</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>2022&#x2F;05&#x2F;09  13:09    &lt;DIR&gt;          .</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>2022&#x2F;05&#x2F;09  13:09    &lt;DIR&gt;          ..</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>2022&#x2F;05&#x2F;06  00:57           524,288 BBI</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>2022&#x2F;01&#x2F;26  16:46            28,672 BCD-Template</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>2022&#x2F;05&#x2F;09  18:04        38,797,312 COMPONENTS</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>2022&#x2F;05&#x2F;06  00:57           786,432 DEFAULT</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>2022&#x2F;05&#x2F;09  17:31         8,118,272 DRIVERS</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>2022&#x2F;01&#x2F;26  18:14            32,768 ELAM</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>2022&#x2F;01&#x2F;26  16:37    &lt;DIR&gt;          Journal</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>2022&#x2F;01&#x2F;26  16:37    &lt;DIR&gt;          RegBack</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>2022&#x2F;05&#x2F;06  00:57           131,072 SAM</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>2022&#x2F;05&#x2F;06  00:57            65,536 SECURITY</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>2022&#x2F;05&#x2F;06  00:57       118,489,088 SOFTWARE</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>2022&#x2F;05&#x2F;06  00:57        24,903,680 SYSTEM</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>2022&#x2F;01&#x2F;26  16:37    &lt;DIR&gt;          systemprofile</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>2022&#x2F;01&#x2F;26  16:37    &lt;DIR&gt;          TxR</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>2022&#x2F;01&#x2F;26  16:40             8,192 userdiff</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>              11 个文件    191,885,312 字节</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>               6 个目录 50,612,371,456 可用字节</pre></td></tr></table></figure><p>可以看到  <code>SOFTWARE</code>  、  <code>SYSTEM</code>  、  <code>SAM</code>  、等文件，这些文件被以<strong>内存映射</strong>的方式映射到内核空间，然后以一种被称为 “HIVE&quot; 的方式组织起来、注册表 API 实际上操作的是这份 HIVE 内存数据，对 HIVE 数据的改动，最终会被回写到 config 目录下对应的文件中。</p>\n<p>如果只是想单纯的使用注册表做数据读取或存储，可以没有必要深入去研究内核对注册表的实现方式。</p>\n<h2 id=\"注册表的打开与关闭\"><a class=\"anchor\" href=\"#注册表的打开与关闭\">#</a> 注册表的打开与关闭</h2>\n<h2 id=\"注册表的修改\"><a class=\"anchor\" href=\"#注册表的修改\">#</a> 注册表的修改</h2>\n<h2 id=\"注册表的读取\"><a class=\"anchor\" href=\"#注册表的读取\">#</a> 注册表的读取</h2>\n<h2 id=\"作业\"><a class=\"anchor\" href=\"#作业\">#</a> 作业</h2>\n<h3 id=\"注册表实现驱动的自启\"><a class=\"anchor\" href=\"#注册表实现驱动的自启\">#</a> 注册表实现驱动的自启</h3>\n<p>驱动文件的转移</p>\n<h1 id=\"文件操作\"><a class=\"anchor\" href=\"#文件操作\">#</a> 文件操作</h1>\n<h2 id=\"文件的打开与关闭\"><a class=\"anchor\" href=\"#文件的打开与关闭\">#</a> 文件的打开与关闭</h2>\n<h2 id=\"文件的读写\"><a class=\"anchor\" href=\"#文件的读写\">#</a> 文件的读写</h2>\n<h2 id=\"文件的删除\"><a class=\"anchor\" href=\"#文件的删除\">#</a> 文件的删除</h2>\n<p>强行删除<br />\n文件的保护</p>\n<h2 id=\"作业-2\"><a class=\"anchor\" href=\"#作业-2\">#</a> 作业</h2>\n<p>在内核中实现文件的拷贝</p>\n<h1 id=\"线程与事件\"><a class=\"anchor\" href=\"#线程与事件\">#</a> 线程与事件</h1>\n<h2 id=\"使用系统线程\"><a class=\"anchor\" href=\"#使用系统线程\">#</a> 使用系统线程</h2>\n<h2 id=\"使用同步事件\"><a class=\"anchor\" href=\"#使用同步事件\">#</a> 使用同步事件</h2>\n",
            "tags": [
                "上下文环境",
                "中断请求级别",
                "链表",
                "自旋锁",
                "注册表",
                "地址空间",
                "文件操作",
                "线程与事件"
            ]
        },
        {
            "id": "https://or0kit.github.io/Bin/Core/Drive-Development/%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91-%E5%9F%BA%E4%BA%8EVS+WDK%E7%9A%84%E9%A9%B1%E5%8A%A8%E8%B0%83%E8%AF%95/",
            "url": "https://or0kit.github.io/Bin/Core/Drive-Development/%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91-%E5%9F%BA%E4%BA%8EVS+WDK%E7%9A%84%E9%A9%B1%E5%8A%A8%E8%B0%83%E8%AF%95/",
            "title": "驱动开发-基于VS+WDK的驱动调试",
            "date_published": "2021-11-20T06:22:33.000Z",
            "content_html": "<h1 id=\"基于vs-wdk-的环境调试\"><a class=\"anchor\" href=\"#基于vs-wdk-的环境调试\">#</a> 基于 VS + WDK 的环境调试</h1>\n<p>物理机为 win10,Visual Studio 的办事本是 2019，配合 WDK10 版本。</p>\n<p>VMware 虚拟机内安装了一个 Win10 操作系统，虚拟机网卡使用 NAT 方式，具体情如下：</p>\n<blockquote>\n<p>调试机器：Windows10  IP：192.168.2.105<br />\n 被调试机器：Windows10  IP：192.168.252.135</p>\n</blockquote>\n<p>调试使用网络作为调试机器与被调试机器之间的连接方式，但是注意防火墙，为了避免不必要的麻烦建议关闭防火墙，或配置防火墙放行规则，不管怎样，要保持调试机器与被调试机器之间网络的畅通。</p>\n<h2 id=\"配置被调试机\"><a class=\"anchor\" href=\"#配置被调试机\">#</a> 配置被调试机</h2>\n<p>以管理员权限运行 <code>cmd</code> , 输入： <code>bcdedit/debug on</code>  命令。这个命令的作用是把被调试机器设置成调试模式。</p>\n<p>再输入： <code>bcdedit /dbgsettings net hostip:192.168.2.105 port:50011</code> 。</p>\n<p>这个命令的作用是使用网络进行调试的连接方式，  <code>hostip</code>  值调试机器的 IP，  <code>port</code>  标识使用的网络端口，建议范围是  <code>49152-65535</code> 。</p>\n<p>命令执行完后会显示一个  <code>Key</code> ，需要保存这个  <code>Key</code> ，用于后面调试机器的配置。</p>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<h2 id=\"配置调试机\"><a class=\"anchor\" href=\"#配置调试机\">#</a> 配置调试机</h2>\n<p>首先打开 VS，找到  <code>Configure Devices</code></p>\n<p><img data-src=\"image002.png\" alt=\"\" /></p>\n<p>点击 <code>Add New Device</code>  弹出的配置对话框，在 “Dispaly name” 下面输入设备的名字，例如： “MyFirstDevice”；<br />\n在 “Device Type” 下面的下拉框中选择 “Computer”；我的 vs2019 版本中没有这个选项，忽略。<br />\n在 “Network host name” 下面输入被调试机器的 “hostname”，也可以输入 “IP”；<br />\n在最后一项 “Provisioning Options” 中，选择第二项 “Manually configure debuggers and do not  provision”，意思是说手动配置被调试机器的调试选项以及手动分发驱动文件。</p>\n<p>整体配置如下：</p>\n<p><img data-src=\"image003.png\" alt=\"\" /></p>\n<p>完成后点击下一步。</p>\n<p>需要注意的是，如果被调试机器只有一个网卡，则最后一个 “bus Parameters” 可以不填，否则需要根据 PCI 规范，填入相应设备的总线号（Bus number）、设备号 (Device Number) 以及功能号（Function number），因为我的被调试机只有一块网卡，所以这个值留空。</p>\n<p>整体配置如下：</p>\n<p><img data-src=\"image004.png\" alt=\"\" /></p>\n<h1 id=\"进行调试\"><a class=\"anchor\" href=\"#进行调试\">#</a> 进行调试</h1>\n<p>开始调试前介绍两个断点函数</p>\n<p><code>KdBreakPoint()</code>  ：只对 Debug 版的驱动有效。<br />\n <code>DbgBreakPoint()</code> ： 对 Release 版的有效。</p>\n<p>驱动代码如下：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;ntddk.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 卸载函数</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>VOID <span class=\"token function\">DriverUnload</span><span class=\"token punctuation\">(</span>PDRIVER_OBJECT driver<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"驱动程序停止运行了.\\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>NTSTATUS <span class=\"token function\">DriverEntry</span><span class=\"token punctuation\">(</span>PDRIVER_OBJECT pdriver<span class=\"token punctuation\">,</span> PUNICODE_STRING pRegPath<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是驱动，我被加载了。\\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token function\">DbgBreakPoint</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tpdriver<span class=\"token operator\">-></span>DriverUnload <span class=\"token operator\">=</span> DriverUnload<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token keyword\">return</span> STATUS_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>首先编译生成 sys 文件，然后在 VS 的菜单中找到 “调试”--&gt;“附加到进程”，在弹出的对话框中，选择 “连接类型” 为 “Windows Kernel Mode Debugger”，“连接目标” 选择为刚才我们配置好的 “MyFirst Device”，在可用进程中选择 “Kernel”，如下所示：</p>\n<p><img data-src=\"image005.png\" alt=\"\" /></p>\n<p>点击附加后 vs 中会出现一个 “Debugger Immediate Window” 界面，界面显示如图所示：</p>\n<p><img data-src=\"image006.png\" alt=\"\" /></p>\n<p>这表示当前调试使用网络连接的方式，正在等待被连接。接下来重启被调试机器，让被调试机器的调试配置生效。</p>\n<p>被调试机器在重启过程中，会主动连接设置的 50011 端口，连接建立好之后，可以在 “Debugger Immediate Window” 界面看到如下信息：</p>\n<p><img data-src=\"image007.png\" alt=\"\" /></p>\n<p>最后把 sys 文件放入被调试机器中，运行加载该驱动，由于有断点所以会被断下，我们就可以 F10 单步调试了。</p>\n<h1 id=\"reference\"><a class=\"anchor\" href=\"#reference\">#</a> Reference</h1>\n<p>谭文 陈铭霖《Windows 内核编程》</p>\n",
            "tags": [
                "驱动调试"
            ]
        },
        {
            "id": "https://or0kit.github.io/Bin/Core/Drive-Development/%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91-%E8%BF%87%E5%86%99%E6%8B%B7%E8%B4%9D/",
            "url": "https://or0kit.github.io/Bin/Core/Drive-Development/%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91-%E8%BF%87%E5%86%99%E6%8B%B7%E8%B4%9D/",
            "title": "驱动开发-过写拷贝",
            "date_published": "2021-10-29T08:15:32.000Z",
            "content_html": "<h1 id=\"要求\"><a class=\"anchor\" href=\"#要求\">#</a> 要求</h1>\n<ol>\n<li>自己写代码加载、卸载驱动</li>\n<li>段页的知识：绕过写拷贝。</li>\n</ol>\n<blockquote>\n<p>两个思路：<br />\n（1）、另外申请一个线性地址，映射到 MessageBoxA 的物理页，设置 PTE 的 R/W 属性，使其可读写。<br />\n（2）、修改 VAD 树，将写拷贝改为可读可写。</p>\n</blockquote>\n<ol start=\"3\">\n<li>R3R0 通信</li>\n<li>写 HOOK</li>\n<li>ShellCode</li>\n<li>ShellCode 放哪？</li>\n</ol>\n<p>在 ring3：<br />\n注册和卸载驱动<br />\n找到 User32，定位 Messagebox 函数地址，传给 0 环</p>\n<p>编写 shellcode 注入进 user32，对 Messagebox 进行 INLINE HOOK<br />\n 打印使用 Messagebox 的程序<br />\n在 ring0：</p>\n<p>与 3 环通信，并接受 Messagebox 的地址，修改其 PTE 与 PDE 的属性<br />\n修改完后给 3 环发送信息，告知 ring 3 可以开始 inline hook</p>\n<h1 id=\"驱动中设备扩展的使用\"><a class=\"anchor\" href=\"#驱动中设备扩展的使用\">#</a> 驱动中设备扩展的使用</h1>\n<p>驱动的设备对象中有一个字段是设备扩展<br />\n该设备扩展的大小是不固定的，依据在创建设备对象时给定的大小分配内存。</p>\n<p>详细参见：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNDkwODczL2FydGljbGUvZGV0YWlscy8xMDc1ODc5MTg=\">https://blog.csdn.net/qq_41490873/article/details/107587918</span></p>\n<h1 id=\"不使用-shellcode-注入\"><a class=\"anchor\" href=\"#不使用-shellcode-注入\">#</a> 不使用 ShellCode 注入</h1>\n<p>驱动编程<br />\n 0 环 - 3 环通信常规方式（设备读写）<br />\n修改 PTE 过写拷贝<br />\n调用门提权（有一套 API 实现以系统权限调用用户程序里的裸函数，支持传参）<br />\n中断门 HOOK<br />\n 设备扩展内存<br />\n双端链表模拟队列</p>\n<p>参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0t3YW5zeS9hcnRpY2xlL2RldGFpbHMvMTA5MzEzMjM3\">https://blog.csdn.net/Kwansy/article/details/109313237</span></p>\n<h1 id=\"代码\"><a class=\"anchor\" href=\"#代码\">#</a> 代码</h1>\n<p>github:&lt;&gt;</p>\n",
            "tags": []
        },
        {
            "id": "https://or0kit.github.io/Bin/Core/Drive-Development/%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91%E2%80%94%E4%BD%BF%E7%94%A8SCM%E5%8A%A0%E8%BD%BD%E9%A9%B1%E5%8A%A8/",
            "url": "https://or0kit.github.io/Bin/Core/Drive-Development/%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91%E2%80%94%E4%BD%BF%E7%94%A8SCM%E5%8A%A0%E8%BD%BD%E9%A9%B1%E5%8A%A8/",
            "title": "驱动开发—使用SCM加载驱动",
            "date_published": "2021-10-12T02:59:22.000Z",
            "content_html": "<h1 id=\"正文\"><a class=\"anchor\" href=\"#正文\">#</a> 正文</h1>\n<p>Windows 系统加载驱动的方法有很多，其中最正确的方法就是使用 SCM（Server Control manager，服务控制管理器）来完成此操作。<br />\n使用 SCM 记载驱动是需要我们注意两点：</p>\n<ul>\n<li>SCM 会操作注册表</li>\n<li>SCM 加载驱动是不可分页的</li>\n</ul>\n<p>这个机制会使驱动的回调函数、IRP 处理函数与其他重要代码不会被页换出，而总是驻留在内存中，以此来保证这个驱动不会因为这些原因导致 BsoD。</p>\n<h1 id=\"代码实现\"><a class=\"anchor\" href=\"#代码实现\">#</a> 代码实现</h1>\n<p>接下来用代码来演示如何加载和卸载一个驱动。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>VOID <span class=\"token function\">SCMLoadDriver</span><span class=\"token punctuation\">(</span>PUCHAR lpszDriverFullPath<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token comment\">//1. 使用 OpenSCManager 函数打开 SCM</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token comment\">//SCM 句柄</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tSC_HANDLE hSCM <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tPUCHAR lpszDriverName <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tDWORD dwRtn <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token comment\">// 获取驱动名</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token function\">_splitpath</span><span class=\"token punctuation\">(</span>lpszDriverFullPath<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> lpszDriverName<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\thSCM <span class=\"token operator\">=</span> <span class=\"token function\">OpenSCManager</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> SC_MANAGER_ALL_ACCESS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hSCM <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t<span class=\"token function\">MessageBox</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> L<span class=\"token string\">\"Error!\"</span><span class=\"token punctuation\">,</span> L<span class=\"token string\">\"OpenSCManager fail!\"</span><span class=\"token punctuation\">,</span> MB_OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t<span class=\"token function\">CloseServiceHandle</span><span class=\"token punctuation\">(</span>hSCM<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token comment\">//2. 使用 CreateService 函数利用 SCM 句柄创建一个服务</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token comment\">//NT 驱动服务句柄</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\tSC_HANDLE hService <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\thService <span class=\"token operator\">=</span> <span class=\"token function\">CreateService</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\thSCM<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\tlpszDriverName<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\tlpszDriverName<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\tSERVICE_ALL_ACCESS<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\tSERVICE_KERNEL_DRIVER<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\tSERVICE_DEMAND_START<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\tSERVICE_ERROR_IGNORE<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\tlpszDriverFullPath<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t<span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hService <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\tdwRtn <span class=\"token operator\">=</span> <span class=\"token function\">GetLastError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\t<span class=\"token function\">MessageBox</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> L<span class=\"token string\">\"Error!\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>L<span class=\"token string\">\"CreateeeeeeeService fail! ErrorCode:%d\"</span><span class=\"token punctuation\">,</span> dwRtn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> MB_OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\t<span class=\"token function\">CloseServiceHandle</span><span class=\"token punctuation\">(</span>hService<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\t<span class=\"token function\">CloseServiceHandle</span><span class=\"token punctuation\">(</span>hSCM<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t<span class=\"token comment\">//3. 使用 StartService 函数启动我们刚刚创建的服务</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">StartService</span><span class=\"token punctuation\">(</span>hService<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\tdwRtn <span class=\"token operator\">=</span> <span class=\"token function\">GetLastError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\t<span class=\"token function\">MessageBox</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> L<span class=\"token string\">\"Error!\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>L<span class=\"token string\">\"StartService fail! ErrorCode:%d\"</span><span class=\"token punctuation\">,</span> dwRtn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> MB_OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t\t<span class=\"token function\">CloseServiceHandle</span><span class=\"token punctuation\">(</span>hService<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t\t<span class=\"token function\">CloseServiceHandle</span><span class=\"token punctuation\">(</span>hSCM<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "OpenSCManager",
                "CreateService"
            ]
        },
        {
            "id": "https://or0kit.github.io/Bin/Core/Drive-Development/%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91-0%E7%8E%AF%E4%B8%8E3%E7%8E%AF%E7%9A%84%E9%80%9A%E4%BF%A1%EF%BC%88%E5%B8%B8%E8%A7%84%E6%96%B9%E6%B3%95%EF%BC%89/",
            "url": "https://or0kit.github.io/Bin/Core/Drive-Development/%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91-0%E7%8E%AF%E4%B8%8E3%E7%8E%AF%E7%9A%84%E9%80%9A%E4%BF%A1%EF%BC%88%E5%B8%B8%E8%A7%84%E6%96%B9%E6%B3%95%EF%BC%89/",
            "title": "驱动开发-0环与3环的通信（常规方法）",
            "date_published": "2021-09-24T15:54:24.000Z",
            "content_html": "<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<p>非常规方法是 0 环  <code>INLINE HOOK</code></p>\n<h1 id=\"正文\"><a class=\"anchor\" href=\"#正文\">#</a> 正文</h1>\n<p>驱动程序原本的目的是用来控制硬件，为了控制驱动运行，我们需要在 3 环向驱动发数据，所以我们需要有一种方法来建立 0 环到 3 环的通信。</p>\n<p>虽然驱动程序的目的是用来控制硬件的，但我们也可以用驱动做一些安全相关的事情，因为驱动运行在 0 环。</p>\n<p>本文介绍常规方式，也就是创建设备对象的方式。</p>\n<h2 id=\"设备对象\"><a class=\"anchor\" href=\"#设备对象\">#</a> 设备对象</h2>\n<ol>\n<li>我们在<strong>开发窗口程序</strong>的时候，消息被封装成一个结构体：<strong>MSG</strong></li>\n<li>在<strong>内核开发</strong>时，消息被封装成另外一个结构体：<strong>IRP（I/O Request Package）</strong></li>\n<li>在<strong>窗口程序</strong>中，能够接收消息的只能是<strong>窗口对象</strong></li>\n<li>在<strong>内核</strong>中，能够接收 IRP 消息的只能是<strong>设备对象</strong></li>\n</ol>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<p><img data-src=\"image002.png\" alt=\"\" /></p>\n<p>可以发现 3 环窗口程序中的 MSG 结构体和窗口对象，与 0 环的设备对象和 IRP 结构体的关系很像。</p>\n<h2 id=\"创建设备对象\"><a class=\"anchor\" href=\"#创建设备对象\">#</a> 创建设备对象</h2>\n<p>调用 IoCreateDevice 函数创建设备对象，例如：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>NTSTATUS <span class=\"token function\">IoCreateDevice</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    _In_  PDRIVER_OBJECT DriverObject<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    _In_  ULONG DeviceExtensionSize<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    _In_opt_ PUNICODE_STRING DeviceName<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    _In_  DEVICE_TYPE DeviceType<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    _In_  ULONG DeviceCharacteristics<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    _In_  BOOLEAN Exclusive<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    PDEVICE_OBJECT <span class=\"token operator\">*</span>DeviceObject  <span class=\"token comment\">// 二级指针</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong>参数说明</strong></p>\n<ul>\n<li>\n<p>DriverObject<br />\n 一个指向调用该函数的驱动程序对象。每一个驱动程序在它的 DriverEntry 过程里接收一个指向它的驱动程序对象.<br />\nWDM 功能和过滤驱动程序也在他们的 AddDevice 过程接受一个驱动程序对象的指针</p>\n</li>\n<li>\n<p>DeviceExtensionSize<br />\n 指定驱动程序为设备扩展对象而定义的结构体的大小。</p>\n</li>\n<li>\n<p>DeviceName<br />\n (可选的参数) 指向一个以零结尾的包含 Unicode 字符串的缓冲区，那是这个设备的名称，该字符串必须是一个完整的设备路径名.<br />\nWDM 功能驱动程序和过滤驱动程序它们的设备对象没有名字.</p>\n</li>\n</ul>\n<p>注意：如果设备名未提供 (即这个参数是 NULL),IoCreateDevice 创建的设备对象将不会有一个 DACL 与之相关联</p>\n<ul>\n<li>\n<p>DeviceType<br />\n 指定一个由一个系统定义的 FILE_DEVICE_XXX 常量，表明了这个设备的类型<br />\n (如 FILE_DEVICE_DISK,FILE_DEVICE_KEYBOARD 等), 或供应商定义的一种新型设备的类型</p>\n</li>\n<li>\n<p>DeviceCharacteristics<br />\n 指定一个或多个系统定义的常量，连接在一起，提供有关驱动程序的设备其他信息。对于可能的设备特征信息，<br />\n 见 <code>DEVICE_OBJECT</code>  结构体.</p>\n</li>\n<li>\n<p>Exclusive<br />\n 如果指定设备是独占的，大部分驱动程序设置这个值为 FALSE, 如果是独占的话设置为 TRUE，非独占设置为 FALSE.</p>\n</li>\n<li>\n<p>DeviceObject<br />\n 一个指向 DEVICE_OBJECT 结构体指针的指针，这是一个指针的指针，指向的指针用来接收 DEVICE_OBJECT 结构体的指针.</p>\n</li>\n</ul>\n<p><strong>返回值</strong></p>\n<p>IoCreateDevice 函数成功时返回 STATUS_SUCCESS, 失败时返回适当的 NTSTATUS 错误代码.<br />\n 这时这个函数返回值:　<br />\n <code>STATUS_INSUFFICIENT_RESOURCES</code> <br />\n <code>STATUS_OBJECT_NAME_EXISTS</code> <br />\n <code>STATUS_OBJECT_NAME_COLLISION</code></p>\n<p><strong>调用要求</strong></p>\n<blockquote>\n<p>包含文件:wdm.h,ntddk.h</p>\n</blockquote>\n<p><strong>扩展</strong></p>\n<p>通常设备对象都把自己的名字放到 / Device 目录中。在 Windows 2000 中，设备的名称有两个用途。第一个用途，设备命名后，其它内核模式部件可以通过调用 IoGetDeviceObjectPointer 函数找到该设备，找到设备对象后，就可以向该设备的驱动程序发送 IRP。</p>\n<p>另一个用途，允许应用程序打开命名设备的句柄，这样它们就可以向驱动程序发送 IRP。应用程序可以使用标准的 CreateFile API 打开命名设备句柄，然后用 ReadFile、WriteFile，和 DeviceIoControl 向驱动程序发出请求。应用程序打开设备句柄时使用 //./ 路径前缀而不是标准的 UNC (统一命名约定) 名称，如 C:/MYFILE.CPP 或 //FRED/C-Drive/HISFILE.CPP。在内部，I/O 管理器在执行名称搜索前自动把 //./ 转换成 /??/。为了把 /?? 目录中的名字与名字在其它目录 (例如，在 / Device 目录) 中的对象相连接，对象管理器实现了一种称为符号连接 (symbolic link) 的对象。IRP 就是应用程序调用驱动程序。</p>\n<h2 id=\"数据交互的方式\"><a class=\"anchor\" href=\"#数据交互的方式\">#</a> 数据交互的方式</h2>\n<p>设置交互数据的方式</p>\n<p><code>pDeviceObj-&gt;Flags |= DO_BUFFERED_IO;</code></p>\n<blockquote>\n<p>缓冲区方式读写 ( <code>DO_BUFFERED_IO</code> ) ：操作系统将应用程序提供缓冲区的数据复制到内核模式下的地址中。<br />\n优点：方便；缺点：效率低<br />\n适合数据量较小时使用</p>\n</blockquote>\n<blockquote>\n<p>直接方式读写 ( <code>DO_DIRECT_IO</code> )  ：操作系统会将用户模式下的缓冲区锁住。<br />\n然后操作系统将这段缓冲区在内核模式地址再次映射一遍。<br />\n这样，用户模式的缓冲区和内核模式的缓冲区指向的是同一区域的物理内存。<br />\n优点：效率高；缺点：单独占用物理页面，无法再进行其它操作（例如文件读写）<br />\n适合数据量较大时使用</p>\n</blockquote>\n<blockquote>\n<p>其他方式读写（在调用 IoCreateDevice 创建设备后对 pDevObj-&gt;Flags 即不设置 DO_BUFFERED_IO 也不设置 DO_DIRECT_IO 此时就是其他方式）：在使用其他方式读写设备时，派遣函数直接读写应用程序提供的缓冲区地址。<br />\n在驱动程序中，直接操作应用程序的缓冲区地址是很危险的。<br />\n只有驱动程序与应用程序运行在相同线程上下文的情况下，才能使用这种方式</p>\n</blockquote>\n<h2 id=\"符号链接\"><a class=\"anchor\" href=\"#符号链接\">#</a> 符号链接</h2>\n<p>特别说明:</p>\n<ol>\n<li>设备名称的作用是给内核对象用的，如果要在 Ring3 访问，必须要有符号链接。 其实就是一个别名，没有这个别名，在 Ring3 不可见。</li>\n<li>内核模式下，符号链接是以 <code>\\??\\</code>  开头的，如 C 盘就是 <code>\\??\\C:</code></li>\n<li>而在用户模式下，则是以 <code>\\\\.\\</code>  开头的，如 C 盘就是 <code>\\\\.\\C:</code></li>\n</ol>\n<h2 id=\"irp与派遣函数\"><a class=\"anchor\" href=\"#irp与派遣函数\">#</a> IRP 与派遣函数</h2>\n<p>描述：</p>\n<ol>\n<li>当对窗口对象传递消息时，窗口对象会根据我们所传入的消息类型执行对应的回调函数</li>\n<li>当调用 CreateFile 等函数时，操作系统会将它们封装成一个结构体，此时就可以传递给设备对象，设备对象根据 IRP 的类型调用对应的派遣函数</li>\n</ol>\n<p><img data-src=\"image002.png\" alt=\"\" /></p>\n<h2 id=\"irp的类型\"><a class=\"anchor\" href=\"#irp的类型\">#</a> IRP 的类型</h2>\n<p>描述：当应用层通过 <code>CreateFile</code> ， <code>ReadFile</code> ， <code>WriteFile</code> ， <code>CloseHandle</code>  等函数对设备进行打开、读取、写入、关闭的时候，会使操作系统产生出 <code>IRP_MJ_CREATE</code> ， <code>IRP_MJ_READ</code> ， <code>IRP_MJ_WRITE</code> ， <code>IRP_MJ_CLOSE</code>  等不同的 IRP。</p>\n<p>其它类型的 IRP</p>\n<p><img data-src=\"image003.png\" alt=\"\" /></p>\n<h2 id=\"派遣函数\"><a class=\"anchor\" href=\"#派遣函数\">#</a> 派遣函数</h2>\n<h3 id=\"派遣函数注册位置\"><a class=\"anchor\" href=\"#派遣函数注册位置\">#</a> 派遣函数注册位置</h3>\n<pre><code>kd&gt; dt _DRIVER_OBJECT\nnt!_DRIVER_OBJECT\n   +0x000 Type             : Int2B\n   +0x002 Size             : Int2B\n   +0x004 DeviceObject     : Ptr32 _DEVICE_OBJECT\n   +0x008 Flags            : Uint4B\n   +0x00c DriverStart      : Ptr32 Void\n   +0x010 DriverSize       : Uint4B\n....\n   +0x030 DriverStartIo    : Ptr32     void \n   +0x034 DriverUnload     : Ptr32     void \t\t//卸载函数\n   +0x038 MajorFunction    : [28] Ptr32     long \t//派遣函数\n</code></pre>\n<h3 id=\"注册派遣函数\"><a class=\"anchor\" href=\"#注册派遣函数\">#</a> 注册派遣函数</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>NTSTATUS <span class=\"token function\">DriverEntry</span><span class=\"token punctuation\">(</span> 。。。。<span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 设置卸载函数   </span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    pDriverObject<span class=\"token operator\">-></span>DriverUnload <span class=\"token operator\">=</span> 卸载函数<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 设置派遣函数   </span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    pDriverObject<span class=\"token operator\">-></span>MajorFunction<span class=\"token punctuation\">[</span>IRP_MJ_CREATE<span class=\"token punctuation\">]</span> \t<span class=\"token operator\">=</span> 派遣函数<span class=\"token number\">1</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    pDriverObject<span class=\"token operator\">-></span>MajorFunction<span class=\"token punctuation\">[</span>IRP_MJ_CLOSE<span class=\"token punctuation\">]</span> \t<span class=\"token operator\">=</span> 派遣函数<span class=\"token number\">2</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    pDriverObject<span class=\"token operator\">-></span>MajorFunction<span class=\"token punctuation\">[</span>IRP_MJ_WRITE<span class=\"token punctuation\">]</span> \t<span class=\"token operator\">=</span> 派遣函数<span class=\"token number\">3</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    pDriverObject<span class=\"token operator\">-></span>MajorFunction<span class=\"token punctuation\">[</span>IRP_MJ_READ<span class=\"token punctuation\">]</span> \t<span class=\"token operator\">=</span> 派遣函数<span class=\"token number\">4</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    pDriverObject<span class=\"token operator\">-></span>MajorFunction<span class=\"token punctuation\">[</span>IRP_MJ_CLEANUP<span class=\"token punctuation\">]</span> \t<span class=\"token operator\">=</span> 派遣函数<span class=\"token number\">5</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    pDriverObject<span class=\"token operator\">-></span>MajorFunction<span class=\"token punctuation\">[</span>IRP_MJ_SET_INFORMATION<span class=\"token punctuation\">]</span> \t<span class=\"token operator\">=</span> 派遣函数<span class=\"token number\">6</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    pDriverObject<span class=\"token operator\">-></span>MajorFunction<span class=\"token punctuation\">[</span>IRP_MJ_DEVICE_CONTROL<span class=\"token punctuation\">]</span> \t<span class=\"token operator\">=</span> 派遣函数<span class=\"token number\">7</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    pDriverObject<span class=\"token operator\">-></span>MajorFunction<span class=\"token punctuation\">[</span>IRP_MJ_SHUTDOWN<span class=\"token punctuation\">]</span> \t\t<span class=\"token operator\">=</span> 派遣函数<span class=\"token number\">8</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    pDriverObject<span class=\"token operator\">-></span>MajorFunction<span class=\"token punctuation\">[</span>IRP_MJ_SYSTEM_CONTROL<span class=\"token punctuation\">]</span> \t<span class=\"token operator\">=</span> 派遣函数<span class=\"token number\">9</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>IRP_MJ_MAXIMUM_FUNCTION   派遣函数的最大值</pre></td></tr></table></figure><h3 id=\"派遣函数的格式\"><a class=\"anchor\" href=\"#派遣函数的格式\">#</a> 派遣函数的格式</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 派遣函数的格式：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>NTSTATUS <span class=\"token function\">MyDispatchFunction</span><span class=\"token punctuation\">(</span>PDEVICE_OBJECT pDevObj<span class=\"token punctuation\">,</span> PIRP pIrp<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token comment\">// 处理自己的业务...</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token comment\">// 设置返回状态</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tpIrp<span class=\"token operator\">-></span>IoStatus<span class=\"token punctuation\">.</span>Status <span class=\"token operator\">=</span> STATUS_SUCCESS<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//  getlasterror () 得到的就是这个值</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tpIrp<span class=\"token operator\">-></span>IoStatus<span class=\"token punctuation\">.</span>Information <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">//  返回给 3 环多少数据 没有填 0</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token function\">IoCompleteRequest</span><span class=\"token punctuation\">(</span>pIrp<span class=\"token punctuation\">,</span> IO_NO_INCREMENT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">return</span> STATUS_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"实验\"><a class=\"anchor\" href=\"#实验\">#</a> 实验</h2>\n<h3 id=\"r0代码\"><a class=\"anchor\" href=\"#r0代码\">#</a> R0 代码</h3>\n<p>格式都是这样</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;ntddk.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">DEVICE_NAME</span> <span class=\"token expression\">L</span><span class=\"token string\">\"\\\\Device\\\\MyDevice\"</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// Ring3 用 CreateFile 打开设备时，用 \"\\\\\\\\.\\\\MyTestDriver\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">SYMBOLICLINK_NAME</span> <span class=\"token expression\">L</span><span class=\"token string\">\"\\\\??\\\\MyTestDriver\"</span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 0-2047 是保留的  2048~4095</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">OPER1</span> <span class=\"token expression\"><span class=\"token function\">CTL_CODE</span><span class=\"token punctuation\">(</span>FILE_DEVICE_UNKNOWN<span class=\"token punctuation\">,</span> <span class=\"token number\">0x800</span><span class=\"token punctuation\">,</span> METHOD_BUFFERED<span class=\"token punctuation\">,</span> FILE_ANY_ACCESS<span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">OPER2</span> <span class=\"token expression\"><span class=\"token function\">CTL_CODE</span><span class=\"token punctuation\">(</span>FILE_DEVICE_UNKNOWN<span class=\"token punctuation\">,</span> <span class=\"token number\">0x900</span><span class=\"token punctuation\">,</span> METHOD_BUFFERED<span class=\"token punctuation\">,</span> FILE_ANY_ACCESS<span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 卸载函数</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>VOID <span class=\"token function\">DriverUnload</span><span class=\"token punctuation\">(</span>PDRIVER_OBJECT pDriver<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tUNICODE_STRING SymbolicLinkName <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"驱动程序停止运行了 . \\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token comment\">// 删除符号链接 删除设备</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token function\">RtlInitUnicodeString</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>SymbolicLinkName<span class=\"token punctuation\">,</span> SYMBOLICLINK_NAME<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token function\">IoDeleteSymbolicLink</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>SymbolicLinkName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token function\">IoDeleteDevice</span><span class=\"token punctuation\">(</span>pDriver<span class=\"token operator\">-></span>DeviceObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">// IRP_MJ_CREATE 处理函数</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>NTSTATUS <span class=\"token function\">IrpCreateProc</span><span class=\"token punctuation\">(</span>PDEVICE_OBJECT pDevObj<span class=\"token punctuation\">,</span> PIRP pIrp<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"DispatchCreate ... \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token comment\">// 返回状态如果不设置 Ring3 返回的是失败</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\tpIrp<span class=\"token operator\">-></span>IoStatus<span class=\"token punctuation\">.</span>Status <span class=\"token operator\">=</span> STATUS_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\tpIrp<span class=\"token operator\">-></span>IoStatus<span class=\"token punctuation\">.</span>Information <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token function\">IoCompleteRequest</span><span class=\"token punctuation\">(</span>pIrp<span class=\"token punctuation\">,</span> IO_NO_INCREMENT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token keyword\">return</span> STATUS_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token comment\">// IRP_MJ_CLOSE 处理函数</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>NTSTATUS <span class=\"token function\">IrpCloseProc</span><span class=\"token punctuation\">(</span>PDEVICE_OBJECT pDevObj<span class=\"token punctuation\">,</span> PIRP pIrp<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"DispatchClose ... \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\tpIrp<span class=\"token operator\">-></span>IoStatus<span class=\"token punctuation\">.</span>Status <span class=\"token operator\">=</span> STATUS_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\tpIrp<span class=\"token operator\">-></span>IoStatus<span class=\"token punctuation\">.</span>Information <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t<span class=\"token function\">IoCompleteRequest</span><span class=\"token punctuation\">(</span>pIrp<span class=\"token punctuation\">,</span> IO_NO_INCREMENT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t<span class=\"token keyword\">return</span> STATUS_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token comment\">// IRP_MJ_DEVICE_CONTROL 处理函数 用来处理与 Ring3 交互</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>NTSTATUS <span class=\"token function\">IrpDeviceControlProc</span><span class=\"token punctuation\">(</span>PDEVICE_OBJECT pDevObj<span class=\"token punctuation\">,</span> PIRP pIrp<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\tNTSTATUS status <span class=\"token operator\">=</span> STATUS_INVALID_DEVICE_REQUEST<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\tPIO_STACK_LOCATION pIrpStack<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\tULONG uIoControlCode<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\tPVOID pIoBuffer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\tULONG uInLength<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\tULONG uOutLength<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\tULONG uRead<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\tULONG uWrite <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t<span class=\"token comment\">// 设置临时变量的值</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\tpIrpStack <span class=\"token operator\">=</span> <span class=\"token function\">IoGetCurrentIrpStackLocation</span><span class=\"token punctuation\">(</span>pIrp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t<span class=\"token comment\">// 获取控制码</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\tuIoControlCode <span class=\"token operator\">=</span> pIrpStack<span class=\"token operator\">-></span>Parameters<span class=\"token punctuation\">.</span>DeviceIoControl<span class=\"token punctuation\">.</span>IoControlCode<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t<span class=\"token comment\">// 获取缓冲区地址 (输入和输出的缓冲区都是一个)</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\tpIoBuffer <span class=\"token operator\">=</span> pIrp<span class=\"token operator\">-></span>AssociatedIrp<span class=\"token punctuation\">.</span>SystemBuffer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t<span class=\"token comment\">// Ring3 发送数据的长度</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\tuInLength <span class=\"token operator\">=</span> pIrpStack<span class=\"token operator\">-></span>Parameters<span class=\"token punctuation\">.</span>DeviceIoControl<span class=\"token punctuation\">.</span>InputBufferLength<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t<span class=\"token comment\">// Ring0 发送数据的长度</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\tuOutLength <span class=\"token operator\">=</span> pIrpStack<span class=\"token operator\">-></span>Parameters<span class=\"token punctuation\">.</span>DeviceIoControl<span class=\"token punctuation\">.</span>OutputBufferLength<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\t<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>uIoControlCode<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\t<span class=\"token keyword\">case</span> OPER1<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>\t\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"IrpDeviceControlProc -> OPER1 ... \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\t\tpIrp<span class=\"token operator\">-></span>IoStatus<span class=\"token punctuation\">.</span>Information <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>\t\tstatus <span class=\"token operator\">=</span> STATUS_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>\t<span class=\"token keyword\">case</span> OPER2<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>\t\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"IrpDeviceControlProc -> OPER2 接收字节数：%d \\n\"</span><span class=\"token punctuation\">,</span> uInLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>\t\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"IrpDeviceControlProc -> OPER2 输出字节数：%d \\n\"</span><span class=\"token punctuation\">,</span> uOutLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>\t\t<span class=\"token comment\">// Read From Buffer</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>\t\t<span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>uRead<span class=\"token punctuation\">,</span> pIoBuffer<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>\t\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"IrpDeviceControlProc -> OPER2 ... %x \\n\"</span><span class=\"token punctuation\">,</span> uRead<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>\t\t<span class=\"token comment\">// Write To Buffer</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>\t\t<span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>pIoBuffer<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>uWrite<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>\t\t<span class=\"token comment\">// Set Status</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>\t\tpIrp<span class=\"token operator\">-></span>IoStatus<span class=\"token punctuation\">.</span>Information <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>\t\tstatus <span class=\"token operator\">=</span> STATUS_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>\t<span class=\"token comment\">// 设置返回状态</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>\tpIrp<span class=\"token operator\">-></span>IoStatus<span class=\"token punctuation\">.</span>Status <span class=\"token operator\">=</span> status<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>\t<span class=\"token function\">IoCompleteRequest</span><span class=\"token punctuation\">(</span>pIrp<span class=\"token punctuation\">,</span> IO_NO_INCREMENT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>\t<span class=\"token keyword\">return</span> status<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre></pre></td></tr><tr><td data-num=\"101\"></td><td><pre><span class=\"token comment\">// 入口函数 相当于 Main 函数</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>NTSTATUS <span class=\"token function\">DriverEntry</span><span class=\"token punctuation\">(</span>PDRIVER_OBJECT pDriver<span class=\"token punctuation\">,</span> PUNICODE_STRING reg_path<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>\tNTSTATUS status <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>\tULONG    uIndex <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>\tPDEVICE_OBJECT pDeviceObj <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>\tUNICODE_STRING Devicename<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>\tUNICODE_STRING SymbolicLinkName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"驱动程序开始运行了 . \\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>\t<span class=\"token comment\">// 创建设备名称</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>\t<span class=\"token function\">RtlInitUnicodeString</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>Devicename<span class=\"token punctuation\">,</span> DEVICE_NAME<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>\t<span class=\"token comment\">// 创建设备</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>\tstatus <span class=\"token operator\">=</span> <span class=\"token function\">IoCreateDevice</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>\t\tpDriver<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>\t\t<span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>\t\t<span class=\"token operator\">&amp;</span>Devicename<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>\t\tFILE_DEVICE_UNKNOWN<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>\t\tFILE_DEVICE_SECURE_OPEN<span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"122\"></td><td><pre>\t\tFALSE<span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"123\"></td><td><pre>\t\t<span class=\"token operator\">&amp;</span>pDeviceObj</pre></td></tr><tr><td data-num=\"124\"></td><td><pre>\t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>status <span class=\"token operator\">!=</span> STATUS_SUCCESS<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>\t\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"创建设备失败! \\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> status<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>\t<span class=\"token comment\">// 设置交互数据的方式</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>\tpDeviceObj<span class=\"token operator\">-></span>Flags <span class=\"token operator\">|=</span> DO_BUFFERED_IO<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>\t<span class=\"token comment\">// 创建符号链接名称</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>\t<span class=\"token function\">RtlInitUnicodeString</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>SymbolicLinkName<span class=\"token punctuation\">,</span> SYMBOLICLINK_NAME<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>\t<span class=\"token comment\">// 创建符号链接</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>\tstatus <span class=\"token operator\">=</span> <span class=\"token function\">IoCreateSymbolicLink</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>SymbolicLinkName<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>Devicename<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>status <span class=\"token operator\">!=</span> STATUS_SUCCESS<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>\t\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"创建符号链接失败! \\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>\t\t<span class=\"token function\">IoDeleteDevice</span><span class=\"token punctuation\">(</span>pDeviceObj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> status<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>\t<span class=\"token comment\">// 设置分发函数和卸载函数</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre>\tpDriver<span class=\"token operator\">-></span>MajorFunction<span class=\"token punctuation\">[</span>IRP_MJ_CREATE<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> IrpCreateProc<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>\tpDriver<span class=\"token operator\">-></span>MajorFunction<span class=\"token punctuation\">[</span>IRP_MJ_CLOSE<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> IrpCloseProc<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>\tpDriver<span class=\"token operator\">-></span>MajorFunction<span class=\"token punctuation\">[</span>IRP_MJ_DEVICE_CONTROL<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> IrpDeviceControlProc<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre>\tpDriver<span class=\"token operator\">-></span>DriverUnload <span class=\"token operator\">=</span> DriverUnload<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre></pre></td></tr><tr><td data-num=\"151\"></td><td><pre>\t<span class=\"token keyword\">return</span> STATUS_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"r3代码\"><a class=\"anchor\" href=\"#r3代码\">#</a> R3 代码</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">_CRT_SECURE_NO_WARNINGS</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;windows.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;winioctl.h></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">IN_BUFFER_MAXLENGTH</span>  <span class=\"token expression\"><span class=\"token number\">0x10</span>\t</span><span class=\"token comment\">// 输入缓存最大长度</span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">OUT_BUFFER_MAXLENGTH</span> <span class=\"token expression\"><span class=\"token number\">0x10</span>\t</span><span class=\"token comment\">// 输出缓存最大长度</span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">OPER1</span> <span class=\"token expression\"><span class=\"token function\">CTL_CODE</span><span class=\"token punctuation\">(</span>FILE_DEVICE_UNKNOWN<span class=\"token punctuation\">,</span> <span class=\"token number\">0x800</span><span class=\"token punctuation\">,</span> METHOD_BUFFERED<span class=\"token punctuation\">,</span> FILE_ANY_ACCESS<span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">OPER2</span> <span class=\"token expression\"><span class=\"token function\">CTL_CODE</span><span class=\"token punctuation\">(</span>FILE_DEVICE_UNKNOWN<span class=\"token punctuation\">,</span> <span class=\"token number\">0x900</span><span class=\"token punctuation\">,</span> METHOD_BUFFERED<span class=\"token punctuation\">,</span> FILE_ANY_ACCESS<span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">SYMBOLICLINK_NAME</span> <span class=\"token string\">\"\\\\\\\\.\\\\MyTestDriver\"</span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>HANDLE g_hDevice<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 驱动句柄</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">/***************************************************************************/</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">// 打开驱动服务句柄</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">// 打开三环链接名：\\\\\\\\.\\\\Driver</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">/***************************************************************************/</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>BOOL <span class=\"token function\">Open</span><span class=\"token punctuation\">(</span>PCHAR pLinkName<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\tTCHAR szBuffer<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token comment\">// 在 3 环获取驱动程序</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\tg_hDevice <span class=\"token operator\">=</span> <span class=\"token function\">CreateFile</span><span class=\"token punctuation\">(</span>pLinkName<span class=\"token punctuation\">,</span> GENERIC_READ <span class=\"token operator\">|</span> GENERIC_WRITE<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> OPEN_EXISTING<span class=\"token punctuation\">,</span> FILE_ATTRIBUTE_NORMAL<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\tDWORD err <span class=\"token operator\">=</span> <span class=\"token function\">GetLastError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token function\">sprintf</span><span class=\"token punctuation\">(</span>szBuffer<span class=\"token punctuation\">,</span> <span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>g_hDevice <span class=\"token operator\">!=</span> INVALID_HANDLE_VALUE<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> TRUE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> FALSE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token comment\">/***************************************************************************/</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token comment\">// 与驱动通信的函数</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token comment\">/***************************************************************************/</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>BOOL <span class=\"token function\">IoControl</span><span class=\"token punctuation\">(</span>DWORD dwIoCode<span class=\"token punctuation\">,</span> PVOID InBuff<span class=\"token punctuation\">,</span> DWORD InBuffLen<span class=\"token punctuation\">,</span> PVOID OutBuff<span class=\"token punctuation\">,</span> DWORD OutBuffLen<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\tDWORD dw<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token comment\">// 驱动句柄 / 操作码 / 输入缓冲区地址 / 输入缓冲区长度 / 输出缓冲区地址 / 输出缓冲区长度 / 返回长度 / 指向 OVERLAPPED 此处为 NULL</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t<span class=\"token function\">DeviceIoControl</span><span class=\"token punctuation\">(</span>g_hDevice<span class=\"token punctuation\">,</span> dwIoCode<span class=\"token punctuation\">,</span> InBuff<span class=\"token punctuation\">,</span> InBuffLen<span class=\"token punctuation\">,</span> OutBuff<span class=\"token punctuation\">,</span> OutBuffLen<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>dw<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t<span class=\"token keyword\">return</span> TRUE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\tDWORD dwInBuffer <span class=\"token operator\">=</span> <span class=\"token number\">0x11223344</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\tTCHAR szOutBuffer<span class=\"token punctuation\">[</span>OUT_BUFFER_MAXLENGTH<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t<span class=\"token comment\">//1. 通过符号链接，打开设备</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t<span class=\"token function\">Open</span><span class=\"token punctuation\">(</span>SYMBOLICLINK_NAME<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t<span class=\"token comment\">//2. 测试通信</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t<span class=\"token function\">IoControl</span><span class=\"token punctuation\">(</span>OPER2<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>dwInBuffer<span class=\"token punctuation\">,</span> IN_BUFFER_MAXLENGTH<span class=\"token punctuation\">,</span> szOutBuffer<span class=\"token punctuation\">,</span> OUT_BUFFER_MAXLENGTH<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\"</span><span class=\"token punctuation\">,</span> szOutBuffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t<span class=\"token comment\">//3. 关闭设备</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t<span class=\"token function\">CloseHandle</span><span class=\"token punctuation\">(</span>g_hDevice<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t<span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"reference\"><a class=\"anchor\" href=\"#reference\">#</a> Reference</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxOTg4NDQ4L2FydGljbGUvZGV0YWlscy8xMDM1MTk0Nzg=\">https://blog.csdn.net/qq_41988448/article/details/103519478</span><br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0t3YW5zeS9hcnRpY2xlL2RldGFpbHMvMTA5MTcwMTI5\">https://blog.csdn.net/Kwansy/article/details/109170129</span><br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cueHVlYnV5dWFuLmNvbS84Mzg0OTkuaHRtbA==\">https://www.xuebuyuan.com/838499.html</span><br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS9Jb0NyZWF0ZURldmljZSUyOCUyOS8zMDcxNTM2\">https://baike.baidu.com/item/IoCreateDevice()/3071536</span></p>\n",
            "tags": [
                "0环与3环的通信（常规方法）"
            ]
        },
        {
            "id": "https://or0kit.github.io/Bin/Core/Drive-Development/%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91-%E5%86%85%E6%A0%B8%E7%A9%BA%E9%97%B4%E5%92%8C%E5%86%85%E6%A0%B8%E6%A8%A1%E5%9D%97/",
            "url": "https://or0kit.github.io/Bin/Core/Drive-Development/%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91-%E5%86%85%E6%A0%B8%E7%A9%BA%E9%97%B4%E5%92%8C%E5%86%85%E6%A0%B8%E6%A8%A1%E5%9D%97/",
            "title": "驱动开发-内核空间和内核模块",
            "date_published": "2021-09-24T15:53:44.000Z",
            "content_html": "<h1 id=\"内核空间\"><a class=\"anchor\" href=\"#内核空间\">#</a> 内核空间</h1>\n<p>每个进程的低 2G 都是独立的，它们所对应的物理页都是不一样的，而高 2G 所对应的物理页都是相同的。</p>\n<p>概念图:</p>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<h2 id=\"实验验证\"><a class=\"anchor\" href=\"#实验验证\">#</a> 实验验证</h2>\n<p>写一个驱动程序定义一个全局变量，在不同进程中查看。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;ntddk.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>ULONG g_Value <span class=\"token operator\">=</span> <span class=\"token number\">0x12345678</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>VOID <span class=\"token function\">DriverUnload</span><span class=\"token punctuation\">(</span>PDRIVER_OBJECT pdriver<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是驱动，我卸载了\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>NTSTATUS <span class=\"token function\">DriverEntry</span><span class=\"token punctuation\">(</span>PDRIVER_OBJECT pdriver<span class=\"token punctuation\">,</span> PUNICODE_STRING reg_path<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是驱动我运行了\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%p\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>g_Value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tpdriver<span class=\"token operator\">-></span>DriverUnload <span class=\"token operator\">=</span> DriverUnload<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">return</span> STATUS_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"image002.png\" alt=\"\" /><br />\n<img data-src=\"image003.png\" alt=\"\" /></p>\n<h1 id=\"内核模块\"><a class=\"anchor\" href=\"#内核模块\">#</a> 内核模块</h1>\n<p>硬件的种类繁多，不可能做一个兼容所有硬件的内核，因此，微软提供规定的接口格式，让硬件驱动人员按照规定的格式编写 “驱动程序”<br />\n 这些驱动程序每一个都是一个模块，称为 “内核模块”，可以加载到内核中，并遵守 PE 结构。但本质上讲，任意一个.sys 文件与内核文件没有区别<br />\n不管是我们自己编写的 .sys 文件，还是 Windows 自带的内核文件（如 ntoskrnl.exe），它们在内核中的地位是相同的，都是内核模块中的其中一个</p>\n<p><img data-src=\"image004.png\" alt=\"\" /></p>\n<h1 id=\"驱动对象\"><a class=\"anchor\" href=\"#驱动对象\">#</a> 驱动对象</h1>\n<h2 id=\"_driver_object结构体\"><a class=\"anchor\" href=\"#_driver_object结构体\">#</a>  <code>_DRIVER_OBJECT</code>  结构体</h2>\n<pre><code>kd&gt; dt _DRIVER_OBJECT\nnt!_DRIVER_OBJECT\n  +0x000 Type             : Int2B\n  +0x002 Size             : Int2B\n  +0x004 DeviceObject     : Ptr32 _DEVICE_OBJECT\n  +0x008 Flags            : Uint4B\n  +0x00c DriverStart      : Ptr32 Void\n  +0x010 DriverSize       : Uint4B\n  +0x014 DriverSection    : Ptr32 Void\n  +0x018 DriverExtension  : Ptr32 _DRIVER_EXTENSION\n  +0x01c DriverName       : _UNICODE_STRING\n  +0x024 HardwareDatabase : Ptr32 _UNICODE_STRING\n  +0x028 FastIoDispatch   : Ptr32 _FAST_IO_DISPATCH\n  +0x02c DriverInit       : Ptr32     long \n  +0x030 DriverStartIo    : Ptr32     void \n  +0x034 DriverUnload     : Ptr32     void \n  +0x038 MajorFunction    : [28] Ptr32     long \n</code></pre>\n<p>其中对我们来说比较重要的结构:<br />\n <code>DriverStart：</code> 驱动模块在内核中的地址<br />\n <code>DriverSize：</code> 驱动模块在内核中的大小<br />\n <code>DriverName：</code> 驱动模块在内核中的名字<br />\n <code>DriverSection：</code> 指向  <code>_LDR_DATA_TABLE_ENTRY</code>  结构体</p>\n<h2 id=\"_ldr_data_table_entry-结构体\"><a class=\"anchor\" href=\"#_ldr_data_table_entry-结构体\">#</a>  <code>_LDR_DATA_TABLE_ENTRY</code>  结构体</h2>\n<p>描述：包含了当前内核模块的具体信息，以及其它内核模块的双向链表。</p>\n<pre><code>kd&gt; dt _LDR_DATA_TABLE_ENTRY\nnt!_LDR_DATA_TABLE_ENTRY\n  +0x000 InLoadOrderLinks : _LIST_ENTRY\n  +0x008 InMemoryOrderLinks : _LIST_ENTRY\n  +0x010 InInitializationOrderLinks : _LIST_ENTRY\n  +0x018 DllBase          : Ptr32 Void\n  +0x01c EntryPoint       : Ptr32 Void\n  +0x020 SizeOfImage      : Uint4B\n  +0x024 FullDllName      : _UNICODE_STRING\n  +0x02c BaseDllName      : _UNICODE_STRING\n  +0x034 Flags            : Uint4B\n  +0x038 LoadCount        : Uint2B\n  +0x03a TlsIndex         : Uint2B\n  +0x03c HashLinks        : _LIST_ENTRY\n  +0x03c SectionPointer   : Ptr32 Void\n  +0x040 CheckSum         : Uint4B\n  +0x044 TimeDateStamp    : Uint4B\n  +0x044 LoadedImports    : Ptr32 Void\n  +0x048 EntryPointActivationContext : Ptr32 Void\n  +0x04c PatchInformation : Ptr32 Void\n</code></pre>\n<p>和 3 环有点区别，在 0 环中  <code>InMemoryOrderLinks</code>  和  <code>InInitializationOrderLinks</code>  是没用的，只需要关注第一个链表  <code>InLoadOrderLinks</code> 。</p>\n<p><code>_LIST_ENTRY</code>  这个结构体存了两个地址，指向前一个节点和下一个节点。</p>\n<pre><code>kd&gt; dt _LIST_ENTRY\nntdll!_LIST_ENTRY\n  +0x000 Flink            : Ptr32 _LIST_ENTRY\n  +0x004 Blink            : Ptr32 _LIST_ENTRY\n</code></pre>\n<p>比较重要的结构:<br />\n <code>InLoadOrderLinks：</code> 双向链表，包含所有内核模块<br />\n <code>DllBase：</code> 当前内核模块起始地址<br />\n <code>SizeOfImage：</code> 当前内核模块的大小<br />\n <code>FullDllName：</code> 当前内核模块的完整路径<br />\n <code>BaseDllName：</code> 当前内核模块的模块名</p>\n<h2 id=\"遍历内核模块\"><a class=\"anchor\" href=\"#遍历内核模块\">#</a> 遍历内核模块</h2>\n<p>我们可以发现，我们可以由一个内核模块遍历处所有的内核模块。</p>\n<p>通过这个  <code>InLoadOrderLinks</code> ，我们可以遍历整个高 2G 的模块了。 <code>InLoadOrderLinks.Flink</code>  指向的就是下一个  <code>_LDR_DATA_TABLE_ENTRY</code> 。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 遍历内核模块</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;ntddk.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_LDR_DATA_TABLE_ENTRY</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tLIST_ENTRY InLoadOrderLinks<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tLIST_ENTRY InMemoryOrderLinks<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tLIST_ENTRY InInitializationOrderLinks<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tPVOID DllBase<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tPVOID EntryPoint<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tUINT32 SizeOfImage<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\tUNICODE_STRING FullDllName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tUNICODE_STRING BaseDllName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tUINT32 Flags<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tUINT16 LoadCount<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tUINT16 TlsIndex<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\tLIST_ENTRY HashLinks<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\tPVOID SectionPointer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\tUINT32 CheckSum<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\tUINT32 TimeDateStamp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\tPVOID LoadedImports<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\tPVOID EntryPointActivationContext<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\tPVOID PatchInformation<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span> LDR_DATA_TABLE_ENTRY<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span> PLDR_DATA_TABLE_ENTRY<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>VOID <span class=\"token function\">DriverUnload</span><span class=\"token punctuation\">(</span>PDRIVER_OBJECT pdriver<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是驱动，我卸载了\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>NTSTATUS <span class=\"token function\">DriverEntry</span><span class=\"token punctuation\">(</span>PDRIVER_OBJECT pdriver<span class=\"token punctuation\">,</span> PUNICODE_STRING reg_path<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是驱动，我运行了\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\tPLDR_DATA_TABLE_ENTRY pLdteHead<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 内核模块链表头</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\tPLDR_DATA_TABLE_ENTRY pLdteCur<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 遍历指针</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\tpLdteHead <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PLDR_DATA_TABLE_ENTRY<span class=\"token punctuation\">)</span>pdriver<span class=\"token operator\">-></span>DriverSection<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\tpLdteCur <span class=\"token operator\">=</span> pLdteHead<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t<span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"DllBase: %p, SizeOfImage: %08X %wZ\\n\"</span><span class=\"token punctuation\">,</span> pLdteCur<span class=\"token operator\">-></span>DllBase<span class=\"token punctuation\">,</span> pLdteCur<span class=\"token operator\">-></span>SizeOfImage<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span>pLdteCur<span class=\"token operator\">-></span>FullDllName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\tpLdteCur <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PLDR_DATA_TABLE_ENTRY<span class=\"token punctuation\">)</span>pLdteCur<span class=\"token operator\">-></span>InLoadOrderLinks<span class=\"token punctuation\">.</span>Flink<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>pLdteHead <span class=\"token operator\">!=</span> pLdteCur<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\tpdriver<span class=\"token operator\">-></span>DriverUnload <span class=\"token operator\">=</span> DriverUnload<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t<span class=\"token keyword\">return</span> STATUS_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"image005.png\" alt=\"\" /></p>\n<h1 id=\"定位未导出函数pspterminateprocess\"><a class=\"anchor\" href=\"#定位未导出函数pspterminateprocess\">#</a> 定位未导出函数 PspTerminateProcess</h1>\n<p>我们想找未导出函数  <code>PspTerminateProcess</code> ，用来杀进程的。学习以下几种方法。</p>\n<h2 id=\"windbgpdb\"><a class=\"anchor\" href=\"#windbgpdb\">#</a> windbg+pdb</h2>\n<p>在有内核 PDB 的情况下，用 windbg 可以直接找到该函数：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kd<span class=\"token operator\">></span>  u PspTerminateProcess l2e</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  nt<span class=\"token operator\">!</span>PspTerminateProcess<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token number\">805</span>d3482 <span class=\"token number\">8</span>bff            mov     edi<span class=\"token punctuation\">,</span>edi</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token number\">805</span>d3484 <span class=\"token number\">55</span>              push    ebp</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token number\">805</span>d3485 <span class=\"token number\">8</span>bec            mov     ebp<span class=\"token punctuation\">,</span>esp</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token number\">805</span>d3487 <span class=\"token number\">56</span>              push    esi</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token number\">805</span>d3488 <span class=\"token number\">64</span>a124010000    mov     eax<span class=\"token punctuation\">,</span>dword ptr fs<span class=\"token operator\">:</span><span class=\"token punctuation\">[</span><span class=\"token number\">00000124</span>h<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token number\">805</span>d348e <span class=\"token number\">8</span>b7508          mov     esi<span class=\"token punctuation\">,</span>dword ptr <span class=\"token punctuation\">[</span>ebp<span class=\"token operator\">+</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token number\">805</span>d3491 <span class=\"token number\">3</span>b7044          cmp     esi<span class=\"token punctuation\">,</span>dword ptr <span class=\"token punctuation\">[</span>eax<span class=\"token operator\">+</span><span class=\"token number\">44</span>h<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token number\">805</span>d3494 <span class=\"token number\">7507</span>            jne     nt<span class=\"token operator\">!</span>PspTerminateProcess<span class=\"token operator\">+</span><span class=\"token number\">0</span><span class=\"token function\">x1b</span> <span class=\"token punctuation\">(</span><span class=\"token number\">805</span>d349d<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token number\">805</span>d3496 b80d0000c0      mov     eax<span class=\"token punctuation\">,</span><span class=\"token number\">0</span>C000000Dh</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token number\">805</span>d349b eb5a            jmp     nt<span class=\"token operator\">!</span>PspTerminateProcess<span class=\"token operator\">+</span><span class=\"token number\">0</span><span class=\"token function\">x75</span> <span class=\"token punctuation\">(</span><span class=\"token number\">805</span>d34f7<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token number\">805</span>d349d <span class=\"token number\">57</span>              push    edi</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token number\">805</span>d349e <span class=\"token number\">8</span>dbe48020000    lea     edi<span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span>esi<span class=\"token operator\">+</span><span class=\"token number\">248</span>h<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token number\">805</span>d34a4 f6470120        test    byte ptr <span class=\"token punctuation\">[</span>edi<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span>h</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token number\">805</span>d34a8 <span class=\"token number\">7412</span>            je      nt<span class=\"token operator\">!</span>PspTerminateProcess<span class=\"token operator\">+</span><span class=\"token number\">0</span><span class=\"token function\">x3a</span> <span class=\"token punctuation\">(</span><span class=\"token number\">805</span>d34bc<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token number\">805</span>d34aa <span class=\"token number\">8</span>d8674010000    lea     eax<span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span>esi<span class=\"token operator\">+</span><span class=\"token number\">174</span>h<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token number\">805</span>d34b0 <span class=\"token number\">50</span>              push    eax</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token number\">805</span>d34b1 <span class=\"token number\">56</span>              push    esi</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token number\">805</span>d34b2 <span class=\"token number\">6854345</span>d80      push    offset nt<span class=\"token operator\">!</span>NtTerminateProcess<span class=\"token operator\">+</span><span class=\"token number\">0</span><span class=\"token function\">x14c</span> <span class=\"token punctuation\">(</span><span class=\"token number\">805</span>d3454<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token number\">805</span>d34b7 e8f2eeffff      call    nt<span class=\"token operator\">!</span><span class=\"token function\">PspCatchCriticalBreak</span> <span class=\"token punctuation\">(</span><span class=\"token number\">805</span>d23ae<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token number\">805</span>d34bc <span class=\"token number\">6</span>a08            push    <span class=\"token number\">8</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token number\">805</span>d34be <span class=\"token number\">58</span>              pop     eax</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token number\">805</span>d34bf f00907          lock or dword ptr <span class=\"token punctuation\">[</span>edi<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>eax</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token number\">805</span>d34c2 <span class=\"token number\">6</span>a00            push    <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token number\">805</span>d34c4 <span class=\"token number\">56</span>              push    esi</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token number\">805</span>d34c5 e8ca560000      call    nt<span class=\"token operator\">!</span><span class=\"token function\">PsGetNextProcessThread</span> <span class=\"token punctuation\">(</span><span class=\"token number\">805</span>d8b94<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  <span class=\"token number\">805</span>d34ca <span class=\"token number\">8</span>bf8            mov     edi<span class=\"token punctuation\">,</span>eax</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token number\">805</span>d34cc <span class=\"token number\">85ff</span>            test    edi<span class=\"token punctuation\">,</span>edi</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  <span class=\"token number\">805</span>d34ce <span class=\"token number\">741</span>e            je      nt<span class=\"token operator\">!</span>PspTerminateProcess<span class=\"token operator\">+</span><span class=\"token number\">0</span><span class=\"token function\">x6c</span> <span class=\"token punctuation\">(</span><span class=\"token number\">805</span>d34ee<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  <span class=\"token number\">805</span>d34d0 ff750c          push    dword ptr <span class=\"token punctuation\">[</span>ebp<span class=\"token operator\">+</span><span class=\"token number\">0</span>Ch<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  <span class=\"token number\">805</span>d34d3 <span class=\"token number\">57</span>              push    edi</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>  <span class=\"token number\">805</span>d34d4 e807fdffff      call    nt<span class=\"token operator\">!</span><span class=\"token function\">PspTerminateThreadByPointer</span> <span class=\"token punctuation\">(</span><span class=\"token number\">805</span>d31e0<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>  <span class=\"token number\">805</span>d34d9 <span class=\"token number\">57</span>              push    edi</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>  <span class=\"token number\">805</span>d34da <span class=\"token number\">56</span>              push    esi</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>  <span class=\"token number\">805</span>d34db e8b4560000      call    nt<span class=\"token operator\">!</span><span class=\"token function\">PsGetNextProcessThread</span> <span class=\"token punctuation\">(</span><span class=\"token number\">805</span>d8b94<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>  <span class=\"token number\">805</span>d34e0 <span class=\"token number\">8</span>bf8            mov     edi<span class=\"token punctuation\">,</span>eax</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>  <span class=\"token number\">805</span>d34e2 <span class=\"token number\">85ff</span>            test    edi<span class=\"token punctuation\">,</span>edi</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>  <span class=\"token number\">805</span>d34e4 <span class=\"token number\">75</span>ea            jne     nt<span class=\"token operator\">!</span>PspTerminateProcess<span class=\"token operator\">+</span><span class=\"token number\">0</span><span class=\"token function\">x4e</span> <span class=\"token punctuation\">(</span><span class=\"token number\">805</span>d34d0<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>  <span class=\"token number\">805</span>d34e6 <span class=\"token number\">3986</span>bc000000    cmp     dword ptr <span class=\"token punctuation\">[</span>esi<span class=\"token operator\">+</span><span class=\"token number\">0</span>BCh<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>eax</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>  <span class=\"token number\">805</span>d34ec <span class=\"token number\">7406</span>            je      nt<span class=\"token operator\">!</span>PspTerminateProcess<span class=\"token operator\">+</span><span class=\"token number\">0</span><span class=\"token function\">x72</span> <span class=\"token punctuation\">(</span><span class=\"token number\">805</span>d34f4<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>  <span class=\"token number\">805</span>d34ee <span class=\"token number\">56</span>              push    esi</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>  <span class=\"token number\">805</span>d34ef e86e05ffff      call    nt<span class=\"token operator\">!</span><span class=\"token function\">ObClearProcessHandleTable</span> <span class=\"token punctuation\">(</span><span class=\"token number\">805</span>c3a62<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>  <span class=\"token number\">805</span>d34f4 <span class=\"token number\">33</span>c0            xor     eax<span class=\"token punctuation\">,</span>eax</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>  <span class=\"token number\">805</span>d34f6 <span class=\"token number\">5f</span>              pop     edi</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>  <span class=\"token number\">805</span>d34f7 <span class=\"token number\">5</span>e              pop     esi</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>  <span class=\"token number\">805</span>d34f8 <span class=\"token number\">5</span>d              pop     ebp</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>  <span class=\"token number\">805</span>d34f9 c20800          ret     <span class=\"token number\">8</span></pre></td></tr></table></figure><p>805d3482 就是函数头，然而这个值由于重定位，可能会变的，所以我们就要用其他办法，确保每次都能找到这个函数。</p>\n<h2 id=\"通过已导出函数\"><a class=\"anchor\" href=\"#通过已导出函数\">#</a> 通过已导出函数</h2>\n<p>第二种办法是根据已导出函数找未导出函数，在驱动里找已导出函数使用的函数是  <code>MmGetSystemRoutineAddress</code>  。我们通过 IDA 交叉引用，并没有找到调用 PspTerminateProcess 的导出函数。</p>\n<h2 id=\"模块基址偏移\"><a class=\"anchor\" href=\"#模块基址偏移\">#</a> 模块基址 + 偏移</h2>\n<p>虽然模块基址会变，但是函数相对基址的偏移是不变的，通过这个规律也可以找到想要的函数。<br />\nPspTerminateProcess 相对内核基址的偏移 = 8062f050 - 804D8000 = 157050<br />\n 只要找到内核基址，加上 0x157050 就是 PspTerminateProcess 的地址。</p>\n<h2 id=\"特征码匹配最常用\"><a class=\"anchor\" href=\"#特征码匹配最常用\">#</a> 特征码匹配（最常用）</h2>\n<p>特征码提取时，<strong>要避免使用全局变量等和重定位有关的指令</strong>，也要<strong>避免提取这种所有函数都有的指令</strong>。</p>\n<pre><code>805d3482 8bff            mov     edi,edi\n805d3484 55              push    ebp\n805d3485 8bec            mov     ebp,esp\n805d3487 56              push    esi\n</code></pre>\n<p>我是跳着提取特征码的:</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 函数 PspTerminateProcess 开头对应的硬编码</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>pShellCode<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\t\t\t<span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>UINT32<span class=\"token punctuation\">)</span><span class=\"token number\">0x8b55ff8b</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 相对函数开头偏移 0X0C 个字节后对应的硬编码</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>pShellCode<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\t\t\t<span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>UINT32<span class=\"token punctuation\">)</span><span class=\"token number\">0x3b08758b</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 相对函数开头偏移 0X22 个字节后对应的硬编码</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>pShellCode <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\t\t<span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>UINT32<span class=\"token punctuation\">)</span><span class=\"token number\">0x200147f6</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 相对函数开头偏移 0X48 个字节后对应的硬编码</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>pShellCode <span class=\"token operator\">+</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\t\t<span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>UINT32<span class=\"token punctuation\">)</span><span class=\"token number\">0xff85f88b</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 相对函数开头偏移 0X6A 个字节后对应的硬编码</span></pre></td></tr></table></figure><p>代码如下：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;ntifs.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">FristOffset</span>\t\t<span class=\"token expression\"><span class=\"token number\">0x0</span></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">SecondOffset</span>\t<span class=\"token expression\"><span class=\"token number\">0x0C</span></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">ThirdOffset</span>\t\t<span class=\"token expression\"><span class=\"token number\">0x22</span></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">FourthOffset</span>\t<span class=\"token expression\"><span class=\"token number\">0x48</span></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">FifthOffset</span>\t\t<span class=\"token expression\"><span class=\"token number\">0x6A</span></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_LDR_DATA_TABLE_ENTRY</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tLIST_ENTRY InLoadOrderLinks<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tLIST_ENTRY InMemoryOrderLinks<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tLIST_ENTRY InInitializationOrderLinks<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\tPVOID DllBase<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tPVOID EntryPoint<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tUINT32 SizeOfImage<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tUNICODE_STRING FullDllName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tUNICODE_STRING BaseDllName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\tUINT32 Flages<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\tUINT16 LoadCount<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\tUINT16 TlsIndex<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\tLIST_ENTRY HashLinks<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\tPVOID SectionPointer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\tUINT32 CheckSum<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\tUINT32 TimeDateStamp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\tPVOID LoadedImports<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\tPVOID EntryPointActivationContext<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\tPVOID PatchInformation<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span>LDR_DATA_TABLE_ENTRY<span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>PLDR_DATA_TABLE_ENTRY<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token comment\">// 定义 PspTerminateProcess 函数指针</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token function\">NTSTATUS</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>_PspTerminateProcess<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>PEPROCESS pEprocess<span class=\"token punctuation\">,</span> NTSTATUS ExitCode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>_PspTerminateProcess PspTerminateProcess <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>VOID <span class=\"token function\">DriverUnload</span><span class=\"token punctuation\">(</span>PDRIVER_OBJECT pdriver<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是驱动，我停止加载了\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token comment\">// 获取内核基址，大小</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>VOID <span class=\"token function\">GetKernelBase</span><span class=\"token punctuation\">(</span>IN PDRIVER_OBJECT driver<span class=\"token punctuation\">,</span> OUT PVOID<span class=\"token operator\">*</span> pKrnlBase<span class=\"token punctuation\">,</span> OUT PUINT32 uKrnlImageSize<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\tPLDR_DATA_TABLE_ENTRY pLdteHead<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 内核模块链表头</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\tPLDR_DATA_TABLE_ENTRY pLdteCur<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 遍历指针</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\tUNICODE_STRING usBaseDllNameNtoskrnl<span class=\"token punctuation\">,</span> usDllNameNtkrnlpa<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 内核模块名</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t<span class=\"token comment\">// 两种分页模式下的内核模块</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t<span class=\"token function\">RtlInitUnicodeString</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>usBaseDllNameNtoskrnl<span class=\"token punctuation\">,</span> L<span class=\"token string\">\"ntoskrnl.exe\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t<span class=\"token function\">RtlInitUnicodeString</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>usDllNameNtkrnlpa<span class=\"token punctuation\">,</span> L<span class=\"token string\">\"ntkrnlpa.exe\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\tpLdteHead <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PLDR_DATA_TABLE_ENTRY<span class=\"token punctuation\">)</span>driver<span class=\"token operator\">-></span>DriverSection<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\tpLdteCur <span class=\"token operator\">=</span> pLdteHead<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t<span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t\t\t<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">(</span><span class=\"token function\">RtlCompareUnicodeString</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>pLdteCur<span class=\"token operator\">-></span>BaseDllName<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>usBaseDllNameNtoskrnl<span class=\"token punctuation\">,</span> TRUE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t\t\t\t<span class=\"token operator\">||</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">(</span><span class=\"token function\">RtlCompareUnicodeString</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>pLdteCur<span class=\"token operator\">-></span>BaseDllName<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>usBaseDllNameNtoskrnl<span class=\"token punctuation\">,</span> TRUE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t\t\t<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t\t\t<span class=\"token operator\">*</span>pKrnlBase <span class=\"token operator\">=</span> pLdteCur<span class=\"token operator\">-></span>DllBase<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t\t\t<span class=\"token operator\">*</span>uKrnlImageSize <span class=\"token operator\">=</span> pLdteCur<span class=\"token operator\">-></span>SizeOfImage<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t\tpLdteCur <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PLDR_DATA_TABLE_ENTRY<span class=\"token punctuation\">)</span>pLdteCur<span class=\"token operator\">-></span>InLoadOrderLinks<span class=\"token punctuation\">.</span>Flink<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>pLdteHead <span class=\"token operator\">!=</span> pLdteCur<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>PVOID <span class=\"token function\">GetUndocumentFunctionAddress</span><span class=\"token punctuation\">(</span>PUCHAR pStartAddress<span class=\"token punctuation\">,</span> PUINT32 pShellcode<span class=\"token punctuation\">,</span> UINT32 maxSize<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\t<span class=\"token class-name\">size_t</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\tPUCHAR Tmp <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>\tpStartAddress <span class=\"token operator\">+=</span> <span class=\"token number\">0xFB000</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 从内核基址 0x804d8000 到这个函数的位置 0x805d3482 需要循环遍历 0xFB482 (1029250) 次，此举是为了节约时间……</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">MmIsAddressValid</span><span class=\"token punctuation\">(</span>pStartAddress<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>\t\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pStartAddress地址不合法，或者地址指向内存不可读！\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"地址合法，开始查找...\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> maxSize<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>\t\tTmp <span class=\"token operator\">=</span> pStartAddress <span class=\"token operator\">+</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"84\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>\t\t\t<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>PUINT32<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>Tmp<span class=\"token punctuation\">[</span>FristOffset<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> pShellcode<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>\t\t\t<span class=\"token operator\">&amp;&amp;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>\t\t\t<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>PUINT32<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>Tmp<span class=\"token punctuation\">[</span>SecondOffset<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> pShellcode<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>\t\t\t<span class=\"token operator\">&amp;&amp;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>\t\t\t<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>PUINT32<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>Tmp<span class=\"token punctuation\">[</span>ThirdOffset<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> pShellcode<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>\t\t\t<span class=\"token operator\">&amp;&amp;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>\t\t\t<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>PUINT32<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>Tmp<span class=\"token punctuation\">[</span>FourthOffset<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> pShellcode<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>\t\t\t<span class=\"token operator\">&amp;&amp;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>\t\t\t<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>PUINT32<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>Tmp<span class=\"token punctuation\">[</span>FifthOffset<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> pShellcode<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>\t\t\t<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"96\"></td><td><pre>\t\t<span class=\"token comment\">//DbgPrint(\"i=%d\\n\", i);</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>\t\t<span class=\"token comment\">//UINT32 S1 = *(PUINT32)&amp;Tmp[FristOffset],</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>\t\t<span class=\"token comment\">//\tS2 = *(PUINT32)&amp;Tmp[SecondOffset],</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>\t\t<span class=\"token comment\">//\tS3 = *(PUINT32)&amp;Tmp[ThirdOffset],</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>\t\t<span class=\"token comment\">//\tS4 = *(PUINT32)&amp;Tmp[FourthOffset],</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>\t\t<span class=\"token comment\">//\tS5 = *(PUINT32)&amp;Tmp[FifthOffset];</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>\t\t<span class=\"token comment\">//DbgPrint(\"S1=%08X\\tS2=%08X\\tS3=%08X\\tS4=%08X\\tS5=%08X\\n\", S1, S2, S3, S4, S5);</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>\t\t<span class=\"token comment\">//if (</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>\t\t<span class=\"token comment\">//\t(S1 == pShellcode[0])</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>\t\t<span class=\"token comment\">//\t&amp;&amp;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>\t\t<span class=\"token comment\">//\t(S2 == pShellcode[1])</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>\t\t<span class=\"token comment\">//\t&amp;&amp;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>\t\t<span class=\"token comment\">//\t(S3 == pShellcode[2])</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>\t\t<span class=\"token comment\">//\t&amp;&amp;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>\t\t<span class=\"token comment\">//\t(S4 == pShellcode[3])</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>\t\t<span class=\"token comment\">//\t&amp;&amp;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>\t\t<span class=\"token comment\">//\t(S5 == pShellcode[4])</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>\t\t<span class=\"token comment\">//\t)</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span>\t\t</pre></td></tr><tr><td data-num=\"117\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> Tmp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>\t\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>\t\t\t<span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span>\t\t</pre></td></tr><tr><td data-num=\"123\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>NTSTATUS <span class=\"token function\">DriverEntry</span><span class=\"token punctuation\">(</span>PDRIVER_OBJECT pdriver<span class=\"token punctuation\">,</span> PUNICODE_STRING reg_path<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是驱动，我加载了！\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>\tpdriver<span class=\"token operator\">-></span>DriverUnload <span class=\"token operator\">=</span> DriverUnload<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>\t<span class=\"token comment\">// 内核基址</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>\tPVOID pKrnlBase\t\t\t<span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>\t<span class=\"token comment\">// 内核基址的大小</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>\tUINT32 uKrnlImageSize\t<span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"134\"></td><td><pre></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>\t<span class=\"token comment\">// 申请一块内存，我只是为了方便传递参数</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>\tPUINT32 pShellCode\t\t<span class=\"token operator\">=</span> <span class=\"token function\">ExAllocatePoolWithTag</span><span class=\"token punctuation\">(</span>NonPagedPool<span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ShellCode\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>\t<span class=\"token comment\">// 函数 PspTerminateProcess 开头对应的硬编码</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>\tpShellCode<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\t\t\t<span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>UINT32<span class=\"token punctuation\">)</span><span class=\"token number\">0x8b55ff8b</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>\t<span class=\"token comment\">// 相对函数开头偏移 0X0C 个字节后对应的硬编码</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>\tpShellCode<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\t\t\t<span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>UINT32<span class=\"token punctuation\">)</span><span class=\"token number\">0x3b08758b</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>\t<span class=\"token comment\">// 相对函数开头偏移 0X22 个字节后对应的硬编码</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>\t<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>pShellCode <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\t\t<span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>UINT32<span class=\"token punctuation\">)</span><span class=\"token number\">0x200147f6</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>\t<span class=\"token comment\">// 相对函数开头偏移 0X48 个字节后对应的硬编码</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>\t<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>pShellCode <span class=\"token operator\">+</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\t\t<span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>UINT32<span class=\"token punctuation\">)</span><span class=\"token number\">0xff85f88b</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>\t<span class=\"token comment\">// 相对函数开头偏移 0X6A 个字节后对应的硬编码</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre>\t<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>pShellCode <span class=\"token operator\">+</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\t    <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>UINT32<span class=\"token punctuation\">)</span><span class=\"token number\">0xe8560674</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>\t<span class=\"token comment\">// 获取内核基址和大小</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre>\t<span class=\"token function\">GetKernelBase</span><span class=\"token punctuation\">(</span>pdriver<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>pKrnlBase<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>uKrnlImageSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre></pre></td></tr><tr><td data-num=\"151\"></td><td><pre>\t<span class=\"token comment\">// 遍历内核内存定位未导出函数</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre>\t PVOID p <span class=\"token operator\">=</span> <span class=\"token function\">GetUndocumentFunctionAddress</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>PUCHAR<span class=\"token punctuation\">)</span>pKrnlBase<span class=\"token punctuation\">,</span> pShellCode<span class=\"token punctuation\">,</span> uKrnlImageSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"153\"></td><td><pre>\t <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"154\"></td><td><pre>\t <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"155\"></td><td><pre>\t\t <span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"成功找到函数首地址：%x\\n\"</span><span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"156\"></td><td><pre>\t\t <span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"开始尝试调用函数...\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"157\"></td><td><pre></pre></td></tr><tr><td data-num=\"158\"></td><td><pre>\t\t <span class=\"token comment\">/****** 调用 PspTerminateProcess (IN PEPROCESS Process, IN NTSTATUS ExitStatus) 函数 ******/</span></pre></td></tr><tr><td data-num=\"159\"></td><td><pre>\t\t PEPROCESS hProcess<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"160\"></td><td><pre>\t\t <span class=\"token function\">PsLookupProcessByProcessId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>HANDLE<span class=\"token punctuation\">)</span><span class=\"token number\">224</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>hProcess<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"161\"></td><td><pre>\t\t PspTerminateProcess <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>_PspTerminateProcess<span class=\"token punctuation\">)</span>p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"162\"></td><td><pre>\t\t <span class=\"token function\">PspTerminateProcess</span><span class=\"token punctuation\">(</span>hProcess<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"163\"></td><td><pre>\t\t <span class=\"token comment\">/****** 调用 PspTerminateProcess (IN PEPROCESS Process, IN NTSTATUS ExitStatus) 函数 ******/</span></pre></td></tr><tr><td data-num=\"164\"></td><td><pre></pre></td></tr><tr><td data-num=\"165\"></td><td><pre>\t\t <span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"函数调用结束.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"166\"></td><td><pre>\t <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"167\"></td><td><pre>\t <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"168\"></td><td><pre>\t\t <span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"查找失败！\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"169\"></td><td><pre></pre></td></tr><tr><td data-num=\"170\"></td><td><pre>\t <span class=\"token keyword\">return</span> STATUS_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"171\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"image008.png\" alt=\"\" /></p>\n<p>编程的过程中碰到不少非常离谱的事情，简直称得上玄学！编译执行了好几遍都蓝屏，于是就去问别人，问了一堆人都说没问题，调试了半个小时，还是原来的代码又重新编译执行了一遍竟然可以运行了？？？？？？</p>\n<h1 id=\"reference\"><a class=\"anchor\" href=\"#reference\">#</a> Reference</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0t3YW5zeS9hcnRpY2xlL2RldGFpbHMvMTA5MTQ1MTEw\">https://blog.csdn.net/Kwansy/article/details/109145110</span><br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxOTg4NDQ4L2FydGljbGUvZGV0YWlscy8xMDM1MTQwMDc=\">https://blog.csdn.net/qq_41988448/article/details/103514007</span></p>\n",
            "tags": [
                "内核空间",
                "内核模块",
                "遍历内核模块",
                "定位未导出函数PspTiminateProcess"
            ]
        },
        {
            "id": "https://or0kit.github.io/Bin/Core/Drive-Development/%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91-%E5%86%85%E6%A0%B8%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/",
            "url": "https://or0kit.github.io/Bin/Core/Drive-Development/%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91-%E5%86%85%E6%A0%B8%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/",
            "title": "驱动开发-内核编程基础",
            "date_published": "2021-09-03T14:52:35.000Z",
            "content_html": "<h1 id=\"未文档化函数-未导出函数\"><a class=\"anchor\" href=\"#未文档化函数-未导出函数\">#</a> 未文档化函数、未导出函数</h1>\n<p>未文档化就是 WDK 文档里搜不到，但是在导出表里的函数，要使用这种函数可以使用 GetProcAddress 函数获取函数地址；</p>\n<p>未导出函数就是不在导出表的函数，可以通过<strong>特征码</strong>搜索或者<strong>解析内核 PDB</strong> 的方式找到函数地址，通过函数指针调用。</p>\n<h1 id=\"wdk数据类型\"><a class=\"anchor\" href=\"#wdk数据类型\">#</a> WDK 数据类型</h1>\n<p>WDK 数据类型在 ntdef.h 中定义，下面列举部分，注意，并没有 UINT</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> UCHAR<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">short</span> USHORT<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> ULONG<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"ntstatus-返回值\"><a class=\"anchor\" href=\"#ntstatus-返回值\">#</a> NTSTATUS 返回值</h1>\n<p>很多内核函数的返回值都是 NTSTATUS，这是一个 4 字节整型。<br />\n例如：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>STATUS_SUCCESS\t\t<span class=\"token number\">0x00000000</span>\t成功</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>STATUS_INVALID_PARAMETER\t<span class=\"token number\">0xC000000D</span>\t参数无效</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>STATUS_BUFFER_OVERFLOW\t<span class=\"token number\">0x80000005</span>\t缓冲区长度不够</pre></td></tr></table></figure><h1 id=\"内核异常处理\"><a class=\"anchor\" href=\"#内核异常处理\">#</a> 内核异常处理</h1>\n<p>在内核中，一个小小的错误就可能导致蓝屏，比如：读写一个无效的内存地址。为了让自己的内核程序更加健壮，强烈建议大家在编写内核程序时，使用异常处。<br />\nWindows 提供了结构化异常处理机制，一般的编译器都是支持的，如下：</p>\n<pre><code>__try&#123;\n\t//可能出错的代码\n&#125;\n__except(filter_value) &#123;\n\t//出错时要执行的代码\n&#125;\n</code></pre>\n<p>出现异常时，可根据 filter_value 的值来决定程序该如果执行，当 filter_value 的值为：<br />\n <code>EXCEPTION_EXECUTE_HANDLER(1)</code> ，代码进入 except 块<br />\n <code>EXCEPTION_CONTINUE_SEARCH(0)</code> ，不处理异常，由上一层调用函数处理<br />\n <code>EXCEPTION_CONTINUE_EXECUTION(-1)</code> ，回去继续执行错误处的代码</p>\n<p>在火哥的视频中，火哥说加了这玩意该蓝屏还是蓝屏…… 试了试确实……。</p>\n<p>演示代码：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;ntddk.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>VOID <span class=\"token function\">DriverUnload</span><span class=\"token punctuation\">(</span>PDRIVER_OBJECT pdriver<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是驱动，我卸载了\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>NTSTATUS <span class=\"token function\">DriverEntry</span><span class=\"token punctuation\">(</span>PDRIVER_OBJECT pdriver<span class=\"token punctuation\">,</span> PUNICODE_STRING pReg<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t__try</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\tPULONG ptr <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t<span class=\"token operator\">*</span>ptr <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token function\">__except</span> <span class=\"token punctuation\">(</span>EXCEPTION_EXECUTE_HANDLER<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"非法访问内存.\\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\tpdriver<span class=\"token operator\">-></span>DriverUnload <span class=\"token operator\">=</span> DriverUnload<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token keyword\">return</span> STATUS_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"image001.png\" alt=\"\" /></p>\n<h1 id=\"常用的内核内存函数\"><a class=\"anchor\" href=\"#常用的内核内存函数\">#</a> 常用的内核内存函数</h1>\n<table>\n<thead>\n<tr>\n<th>C 语言</th>\n<th>内核</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>malloc</td>\n<td>ExAllocatePool</td>\n</tr>\n<tr>\n<td>memset</td>\n<td>RtlFillMemory</td>\n</tr>\n<tr>\n<td>memcpy</td>\n<td>RtlMoveMemory</td>\n</tr>\n<tr>\n<td>free</td>\n<td>ExFreePool</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"内核字符串及常用字符串函数\"><a class=\"anchor\" href=\"#内核字符串及常用字符串函数\">#</a> 内核字符串及常用字符串函数</h1>\n<p>为了提高安全性，内核中的字符串不再是字符串首地址指针作为开始，0 作为结尾，而是采用了以下两个结构体：</p>\n<p><strong>ANSI_STRING 字符串：</strong></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_STRING</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    USHORT Length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    USHORT MaximumLength<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    PCHAR Buffer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span>STRING<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong>UNICODE_STRING 字符串：</strong></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_UNICODE_STRING</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    USHORT Length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    USHORT MaxmumLength<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    PWSTR Buffer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span> UNICODE_STRING<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>下面的表格列出了常用的字符串函数：</p>\n<table>\n<thead>\n<tr>\n<th>功能</th>\n<th>ANSI_STRING 字符串</th>\n<th>UNICODE_STRING 字符串</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>创建</td>\n<td>RtlInitAnsiString</td>\n<td>RtlInitUnicodeString</td>\n</tr>\n<tr>\n<td>复制</td>\n<td>RtlCopyString</td>\n<td>RtlCopyUnicodeString</td>\n</tr>\n<tr>\n<td>比较</td>\n<td>RtlCompareString</td>\n<td>RtlCompareUnicoodeString</td>\n</tr>\n<tr>\n<td>转换</td>\n<td>RtlAnsiStringToUnicodeString</td>\n<td>RtlUnicodeStringToAnsiString</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"课后练习\"><a class=\"anchor\" href=\"#课后练习\">#</a> 课后练习</h1>\n<ol>\n<li>\n<p>申请一块内存，并在内存中存储 GDT、IDT 的所有数据。然后在 debugview 中显示出来，最后释放内存。</p>\n</li>\n<li>\n<p>编写代码，实现如下功能：</p>\n</li>\n</ol>\n<blockquote>\n<p>初始化一个字符串（）<br />\n拷贝一个字符串<br />\n比较两个字符串是否相等<br />\n ANSI_STRING 与 UNICODE_STRING 字符串相互转换</p>\n</blockquote>\n<h2 id=\"第1题\"><a class=\"anchor\" href=\"#第1题\">#</a> 第 1 题</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;ntddk.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;ntdef.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 卸载函数</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>VOID <span class=\"token function\">DriverUnload</span><span class=\"token punctuation\">(</span>PDRIVER_OBJECT pdriver<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"驱动程序停止运行了.\\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 入口函数，相当于 main</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>NTSTATUS <span class=\"token function\">DriverEntry</span><span class=\"token punctuation\">(</span>PDRIVER_OBJECT pdriver<span class=\"token punctuation\">,</span> PUNICODE_STRING pRegPath<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\tUCHAR GDT<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> IDT<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tULONG GDTAddr<span class=\"token punctuation\">,</span> IDTAddr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tUSHORT GDTLen<span class=\"token punctuation\">,</span> IDTLen<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tPULONG pbuffer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tULONG i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t__asm <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\tsgdt GDT<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\tsidt IDT<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\tGDTAddr <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>PULONG<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>GDT<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token comment\">//GDTAddr = *(PULONG)(GDT+2);</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\tGDTLen <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>PUSHORT<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>GDT<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\tIDTAddr <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>PULONG<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>IDT<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\tIDTLen <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>PUSHORT<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>IDT<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GDTAddr:%#010X,GDTLen:%#06X\\n\"</span><span class=\"token punctuation\">,</span> GDTAddr<span class=\"token punctuation\">,</span> GDTLen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"IDTAddr:%#010X,IDTLen:%#06X\\n\"</span><span class=\"token punctuation\">,</span> IDTAddr<span class=\"token punctuation\">,</span> IDTLen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\tpbuffer <span class=\"token operator\">=</span> <span class=\"token function\">ExAllocatePoolWithTag</span><span class=\"token punctuation\">(</span>NonPagedPool<span class=\"token punctuation\">,</span> GDTLen<span class=\"token punctuation\">,</span> <span class=\"token string\">\"MemGdt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pbuffer <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"申请内存失败1\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> STATUS_UNSUCCESSFUL<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t<span class=\"token function\">RtlMoveMemory</span><span class=\"token punctuation\">(</span>pbuffer<span class=\"token punctuation\">,</span> GDTAddr<span class=\"token punctuation\">,</span> GDTLen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"在新开辟的内存%p中打印GDT\\n\"</span><span class=\"token punctuation\">,</span> pbuffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> GDTLen<span class=\"token punctuation\">;</span> i<span class=\"token operator\">+=</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%08X %08X %08X %08X %08X\\n\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t\t\tpbuffer <span class=\"token operator\">+</span> i<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t\t\t<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>PULONG<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>pbuffer <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t\t\t<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>PULONG<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>pbuffer <span class=\"token operator\">+</span> i <span class=\"token operator\">+</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t\t\t<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>PULONG<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>pbuffer <span class=\"token operator\">+</span> i <span class=\"token operator\">+</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t\t\t<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>PULONG<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>pbuffer <span class=\"token operator\">+</span> i <span class=\"token operator\">+</span> <span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t<span class=\"token function\">ExFreePoolWithTag</span><span class=\"token punctuation\">(</span>pbuffer<span class=\"token punctuation\">,</span> <span class=\"token string\">\"MemGdt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\tpbuffer <span class=\"token operator\">=</span> <span class=\"token function\">ExAllocatePoolWithTag</span><span class=\"token punctuation\">(</span>NonPagedPool<span class=\"token punctuation\">,</span> IDTLen<span class=\"token punctuation\">,</span> <span class=\"token string\">\"MemIdt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pbuffer <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"申请内存失败2\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> STATUS_UNSUCCESSFUL<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t<span class=\"token function\">RtlMoveMemory</span><span class=\"token punctuation\">(</span>pbuffer<span class=\"token punctuation\">,</span> GDTAddr<span class=\"token punctuation\">,</span> GDTLen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre></pre></td></tr><tr><td data-num=\"68\"></td><td><pre></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"在新开辟的内存%p中打印IDT\\n\"</span><span class=\"token punctuation\">,</span> pbuffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> GDTLen<span class=\"token punctuation\">;</span> i <span class=\"token operator\">+=</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>\t\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%08X %08X %08X %08X %08X\\n\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>\t\t\tpbuffer <span class=\"token operator\">+</span> i<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\t\t\t<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>PULONG<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>pbuffer <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>\t\t\t<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>PULONG<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>pbuffer <span class=\"token operator\">+</span> i <span class=\"token operator\">+</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>\t\t\t<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>PULONG<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>pbuffer <span class=\"token operator\">+</span> i <span class=\"token operator\">+</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>\t\t\t<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>PULONG<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>pbuffer <span class=\"token operator\">+</span> i <span class=\"token operator\">+</span> <span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>\t<span class=\"token function\">ExFreePoolWithTag</span><span class=\"token punctuation\">(</span>pbuffer<span class=\"token punctuation\">,</span> <span class=\"token string\">\"MemGdt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>\tpdriver<span class=\"token operator\">-></span>DriverUnload <span class=\"token operator\">=</span> DriverUnload<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>\t<span class=\"token keyword\">return</span> STATUS_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"image002.png\" alt=\"\" /></p>\n<h2 id=\"第2题\"><a class=\"anchor\" href=\"#第2题\">#</a> 第 2 题</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;ntddk.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;ntdef.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>VOID <span class=\"token function\">DriverUnload</span><span class=\"token punctuation\">(</span>PDRIVER_OBJECT pdriver<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"驱动程序停止运行了\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>NTSTATUS <span class=\"token function\">DriverEntry</span><span class=\"token punctuation\">(</span>PDRIVER_OBJECT pdriver<span class=\"token punctuation\">,</span> PUNICODE_STRING pReg<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tANSI_STRING AnsiString1<span class=\"token punctuation\">,</span> AnsiString2<span class=\"token punctuation\">,</span> AnsiString3<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\tUNICODE_STRING UnicodeString1<span class=\"token punctuation\">,</span> UnicodeString2<span class=\"token punctuation\">,</span> UnicodeString3<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tCHAR Buf1<span class=\"token punctuation\">[</span><span class=\"token number\">256</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> Buf2<span class=\"token punctuation\">[</span><span class=\"token number\">256</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tWCHAR wcBuf1<span class=\"token punctuation\">[</span><span class=\"token number\">256</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> wcBuf2<span class=\"token punctuation\">[</span><span class=\"token number\">256</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token comment\">// 初始化字符串</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token function\">RtlInitAnsiString</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>AnsiString1<span class=\"token punctuation\">,</span> <span class=\"token string\">\"This is AnsiString1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token function\">RtlInitUnicodeString</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>UnicodeString1<span class=\"token punctuation\">,</span> L<span class=\"token string\">\"This is UnicodeString1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token function\">RtlInitEmptyAnsiString</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>AnsiString2<span class=\"token punctuation\">,</span> Buf1<span class=\"token punctuation\">,</span> <span class=\"token number\">256</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>CHAR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token function\">RtlInitEmptyAnsiString</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>AnsiString3<span class=\"token punctuation\">,</span> Buf2<span class=\"token punctuation\">,</span> <span class=\"token number\">256</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>CHAR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token function\">RtlInitEmptyUnicodeString</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>UnicodeString2<span class=\"token punctuation\">,</span> wcBuf1<span class=\"token punctuation\">,</span> <span class=\"token number\">256</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>WCHAR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token function\">RtlInitEmptyUnicodeString</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>UnicodeString3<span class=\"token punctuation\">,</span> wcBuf2<span class=\"token punctuation\">,</span> <span class=\"token number\">256</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>WCHAR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"打印AnsiString1。 Buffer:%s Length:%d MaximumLength:%d\\n\"</span><span class=\"token punctuation\">,</span> AnsiString1<span class=\"token punctuation\">.</span>Buffer<span class=\"token punctuation\">,</span> AnsiString1<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">,</span> AnsiString1<span class=\"token punctuation\">.</span>MaximumLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"打印UnicodeString1。 \\nBuffer:%ws \\nLength:%d \\nMaximumLength:%d\\n\"</span><span class=\"token punctuation\">,</span> UnicodeString1<span class=\"token punctuation\">.</span>Buffer<span class=\"token punctuation\">,</span> UnicodeString1<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">,</span> UnicodeString1<span class=\"token punctuation\">.</span>MaximumLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token comment\">// 拷贝字符串</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token function\">RtlCopyString</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>AnsiString2<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>AnsiString1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token function\">RtlCopyUnicodeString</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>UnicodeString2<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>UnicodeString1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"打印AnsiString2。Buffer:%s Length:%d MaximumLength:%d\\n\"</span><span class=\"token punctuation\">,</span> AnsiString2<span class=\"token punctuation\">.</span>Buffer<span class=\"token punctuation\">,</span> AnsiString2<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">,</span> AnsiString2<span class=\"token punctuation\">.</span>MaximumLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"打印UnicodeString2。\\nBuffer:%ws \\nLength：%d \\nMaximumLength:%d\\n\"</span><span class=\"token punctuation\">,</span> UnicodeString2<span class=\"token punctuation\">.</span>Buffer<span class=\"token punctuation\">,</span> UnicodeString2<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">,</span> UnicodeString2<span class=\"token punctuation\">.</span>MaximumLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token comment\">// 比较字符串</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">RtlCompareString</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>AnsiString1<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>AnsiString2<span class=\"token punctuation\">,</span> TRUE<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"AnsiString1与AnsiString2相等\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"AnsiString1与AnsiString2不相等\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">RtlCompareUnicodeString</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>UnicodeString1<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>UnicodeString2<span class=\"token punctuation\">,</span> TRUE<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"UnicodeString1与UnicodeString2相等\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"UnicodeString1与UnicodeString2不相等\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t<span class=\"token comment\">// 转化字符串</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t<span class=\"token function\">RtlAnsiStringToUnicodeString</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>UnicodeString3<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>AnsiString1<span class=\"token punctuation\">,</span> TRUE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t<span class=\"token function\">RtlUnicodeStringToAnsiString</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>AnsiString3<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span> UnicodeString1<span class=\"token punctuation\">,</span> TRUE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"打印AnsiString3。Buffer:%s Length:%d MaximumLength:%d\\n\"</span><span class=\"token punctuation\">,</span> AnsiString3<span class=\"token punctuation\">.</span>Buffer<span class=\"token punctuation\">,</span> AnsiString3<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">,</span> AnsiString3<span class=\"token punctuation\">.</span>MaximumLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"打印UnicodeString3。\\nBuffer:%ws \\nLength：%d \\nMaximumLength:%d\\n\"</span><span class=\"token punctuation\">,</span> UnicodeString3<span class=\"token punctuation\">.</span>Buffer<span class=\"token punctuation\">,</span> UnicodeString3<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">,</span> UnicodeString3<span class=\"token punctuation\">.</span>MaximumLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\tpdriver<span class=\"token operator\">-></span>DriverUnload <span class=\"token operator\">=</span> DriverUnload<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t<span class=\"token keyword\">return</span> STATUS_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"image003.png\" alt=\"\" /></p>\n",
            "tags": [
                "内核编程基础",
                "ANSI_STRING",
                "UNICODE_STRING",
                "内核内存"
            ]
        },
        {
            "id": "https://or0kit.github.io/Bin/Core/Drive-Development/%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91-%E8%B0%83%E8%AF%95%E9%A9%B1%E5%8A%A8%E7%A8%8B%E5%BA%8F/",
            "url": "https://or0kit.github.io/Bin/Core/Drive-Development/%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91-%E8%B0%83%E8%AF%95%E9%A9%B1%E5%8A%A8%E7%A8%8B%E5%BA%8F/",
            "title": "驱动开发-调试驱动程序",
            "date_published": "2021-09-03T14:52:10.000Z",
            "content_html": "<h1 id=\"代码\"><a class=\"anchor\" href=\"#代码\">#</a> 代码</h1>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;ntddk.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>VOID <span class=\"token function\">DriverUnload</span><span class=\"token punctuation\">(</span>PDRIVER_OBJECT pdriver<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是驱动，我卸载了\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>NTSTATUS <span class=\"token function\">DriverEntry</span><span class=\"token punctuation\">(</span>PDRIVER_OBJECT pdriver<span class=\"token punctuation\">,</span> PUNICODE_STRING pReg<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t__asm <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\tmov eax<span class=\"token punctuation\">,</span> eax<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\tmov ecx<span class=\"token punctuation\">,</span> ecx<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是驱动，我运行了\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tpdriver<span class=\"token operator\">-></span>DriverUnload <span class=\"token operator\">=</span> DriverUnload<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token keyword\">return</span> STATUS_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>多了一个源代码窗口。</p>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n",
            "tags": [
                "调试驱动程序"
            ]
        },
        {
            "id": "https://or0kit.github.io/Bin/Core/Drive-Development/%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91-%E7%AC%AC%E4%B8%80%E4%B8%AA%E9%A9%B1%E5%8A%A8%E7%A8%8B%E5%BA%8F/",
            "url": "https://or0kit.github.io/Bin/Core/Drive-Development/%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91-%E7%AC%AC%E4%B8%80%E4%B8%AA%E9%A9%B1%E5%8A%A8%E7%A8%8B%E5%BA%8F/",
            "title": "驱动开发-第一个驱动程序",
            "date_published": "2021-09-03T14:52:00.000Z",
            "content_html": "<h1 id=\"配置vs2019wdk10\"><a class=\"anchor\" href=\"#配置vs2019wdk10\">#</a> 配置 VS2019+WDK10</h1>\n<p>参见：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ4OTk1NjExL2FydGljbGUvZGV0YWlscy8xMTIxOTU0OTc=\">https://blog.csdn.net/m0_48995611/article/details/112195497</span></p>\n<h1 id=\"编写代码\"><a class=\"anchor\" href=\"#编写代码\">#</a> 编写代码</h1>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;ntddk.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>VOID <span class=\"token function\">DriverUnload</span><span class=\"token punctuation\">(</span>PDRIVER_OBJECT pdriver<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是驱动，我卸载了\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>NTSTATUS <span class=\"token function\">DriverEntry</span><span class=\"token punctuation\">(</span>PDRIVER_OBJECT pdriver<span class=\"token punctuation\">,</span> PUNICODE_STRING pReg<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是驱动，我运行了\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tpdriver<span class=\"token operator\">-></span>DriverUnload <span class=\"token operator\">=</span> DriverUnload<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">return</span> STATUS_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>注意用 release 版。<br />\nDbgView 设置</p>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<p>结果：</p>\n<p><img data-src=\"image002.png\" alt=\"\" /></p>\n",
            "tags": [
                "配置VS2019+WDK10",
                "第一个驱动程序"
            ]
        },
        {
            "id": "https://or0kit.github.io/Bin/Core/WindowsXp/Protect-Mode/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F-%E9%98%B6%E6%AE%B5%E6%B5%8B%E8%AF%95/",
            "url": "https://or0kit.github.io/Bin/Core/WindowsXp/Protect-Mode/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F-%E9%98%B6%E6%AE%B5%E6%B5%8B%E8%AF%95/",
            "title": "保护模式-阶段测试",
            "date_published": "2021-09-03T14:46:00.000Z",
            "content_html": "<h1 id=\"保护模式阶段测试\"><a class=\"anchor\" href=\"#保护模式阶段测试\">#</a> 保护模式阶段测试</h1>\n<ol>\n<li>\n<p>给定一个线性地址，和长度，读取内容；<br />\nint ReadMemory(OUT BYTE* buffer,IN DWORD dwAddr,IN DWORD dwLeght)<br />\n 要求：<br />\n1) 可以自己指定分页方式。<br />\n2) 页不存在，要提示，不能报错。<br />\n3) 可以正确读取数据。</p>\n</li>\n<li>\n<p>申请长度为 100 的 DWORD 的数组，且每项用该项的地址初始化；<br />\n把这个数组所在的物理页挂到 0x1000 的地址上；<br />\n 定义一个指针，指向 0x1000 这个页里的数组所在的地址，用 0x1000 这个页的线性地址打印出这数组的值；</p>\n</li>\n</ol>\n<p>要求：<br />\n数组所在的物理页，是同一个页；</p>\n<h2 id=\"第一题\"><a class=\"anchor\" href=\"#第一题\">#</a> 第一题</h2>\n<p><strong>所遇问题：</strong></p>\n<p>在运行程序时发现了一个问题，用 VC 6.0 编译 C 语言是 总是提示一个错误：error C2143: syntax error : missing ‘;’ before ‘type’。解决方法如下：把所有变量的声明放在可执行代码之前。</p>\n<p>出现此问题的原因在于：将文件保存成了 .c 格式。如果是 cpp 格式就能正常编译。改成.cpp 就可以正常运行，和你变量声明的位置就没有关系了。*</p>\n<p>一般在 ANSI C 或者 C++ 中，在可执行代码中随时定义变量是允许的，但是在 K&amp;R C 中是不允许的，因此才会出现这个错误。VC6.0 、VS2008 都是用的 K&amp;R C 来实现 C 语言的，因此编译过程中会报错。</p>\n<p><strong>代码：</strong></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;Windows.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">DATALEN</span> <span class=\"token expression\"><span class=\"token number\">0x200</span></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>DWORD somedata<span class=\"token punctuation\">[</span>DATALEN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 数据源</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>DWORD mybuff<span class=\"token punctuation\">[</span>DATALEN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 空白缓冲区</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 2-9-9-12 分页读内存，要判断线性地址有效性，要能正确处理跨页的情况</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>BOOL <span class=\"token function\">ReadMemory</span><span class=\"token punctuation\">(</span>OUT BYTE<span class=\"token operator\">*</span> buffer<span class=\"token punctuation\">,</span> IN DWORD dwAddr<span class=\"token punctuation\">,</span> IN DWORD dwLength<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tDWORD i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token comment\">//__asm int 3;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token comment\">// 以字节为单位读取</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> dwLength<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\tDWORD PDE <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>DWORD<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xc0600000</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>dwAddr <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span> <span class=\"token operator\">>></span> <span class=\"token number\">18</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x3ff8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\tDWORD PTE <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>DWORD<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xc0000000</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>dwAddr <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span> <span class=\"token operator\">>></span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x7ffff8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>PDE <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x00000001</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//&amp; 比 == 的运算级高</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> FALSE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>PTE <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x00000001</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>PTE <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>PTE <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xFFFFFC1F</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">return</span> FALSE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\tbuffer<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>PBYTE<span class=\"token punctuation\">)</span>dwAddr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token keyword\">return</span> TRUE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">__declspec</span><span class=\"token punctuation\">(</span>naked<span class=\"token punctuation\">)</span> <span class=\"token function\">R0Function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t__asm</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\tpushad</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\tpushfd</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t<span class=\"token comment\">// 读 NULL 指针，错误原因：请求零页面</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t<span class=\"token comment\">//ReadMemory((PBYTE)mybuff, 0, 0x1000);</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t<span class=\"token function\">ReadMemory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>PBYTE<span class=\"token punctuation\">)</span>mybuff<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>somedata<span class=\"token punctuation\">,</span>DATALEN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t__asm</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t\tpopfd</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t\tpopad</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t\tiretd</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t<span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t<span class=\"token comment\">// 初始化数据</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> DATALEN<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> somedata<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t<span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>mybuff<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> DATALEN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t<span class=\"token comment\">// 提权到 R0 测试 ReadMemory 函数</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\t<span class=\"token comment\">//DbgPrint = (DBGPRINT) GetProcAddress (LoadLibraryA (\"ntdll.dll\"), \"DbgPrint\"); // 载入函数</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"在IDT表构建中断门，请在windbg中执行下面的指令：\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"eq 8003f500 %04xee00`0008%04x\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>R0Function <span class=\"token operator\">>></span> <span class=\"token number\">16</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>R0Function <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x0000FFFF</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\t<span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\t__asm <span class=\"token keyword\">int</span> <span class=\"token number\">0x20</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">memcmp</span><span class=\"token punctuation\">(</span>mybuff<span class=\"token punctuation\">,</span> somedata<span class=\"token punctuation\">,</span> DATALEN<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"读取失败.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>\t\t<span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"读取成功.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>\t\t<span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"第二题\"><a class=\"anchor\" href=\"#第二题\">#</a> 第二题</h2>\n<p><strong>所遇问题</strong></p>\n<p>将 C 代码在 VC<ins> 中编译，经常会出现 error C2275 错误，结果是变量的定义位置不对，应该在函数块的最前面。<br />\n这是一个编程习惯的问题。<br />\n在移植 c</ins> 代码到 c 的时候，经常会出现一个奇怪的错误：“error C2275: “xxxxx”: 将此类型用作表达式非法”<br />\n 这个错误是由于 c 的编译器要求将变量的申明放在一个函数块的头部，而 c++ 没有这样的要求造成的。<br />\n解决的办法就是把变量的声明全部放在变量的生存块的开始。</p>\n<p>代码：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;Windows.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>DWORD <span class=\"token operator\">*</span>arr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">__declspec</span><span class=\"token punctuation\">(</span>naked<span class=\"token punctuation\">)</span> <span class=\"token function\">R0Function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t__asm</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\tpushad</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\tpushfd</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\tmov eax<span class=\"token punctuation\">,</span> dword ptr<span class=\"token punctuation\">[</span>arr<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\tshr eax<span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\tand eax<span class=\"token punctuation\">,</span> <span class=\"token number\">7FFFF</span><span class=\"token number\">8</span>h<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\tsub eax<span class=\"token punctuation\">,</span> <span class=\"token number\">40000000</span>h<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\tmov ebx<span class=\"token punctuation\">,</span> <span class=\"token number\">0x1000</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\tshr ebx<span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\tand ebx<span class=\"token punctuation\">,</span> <span class=\"token number\">7FFFF</span><span class=\"token number\">8</span>h<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\tsub ebx<span class=\"token punctuation\">,</span> <span class=\"token number\">40000000</span>h<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\tmov eax<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>eax<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\tmov <span class=\"token punctuation\">[</span>ebx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> eax<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\tpopfd</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\tpopad</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\tiretd</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token comment\">// 定义 0x1000 指针</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\tDWORD<span class=\"token operator\">*</span> ptr <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>DWORD<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token number\">0x1000</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token comment\">// 申请数组并初始化</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\tarr <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>DWORD<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">VirtualAlloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x1000</span><span class=\"token punctuation\">,</span> MEM_COMMIT<span class=\"token punctuation\">,</span> PAGE_READWRITE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\tarr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>arr <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t<span class=\"token comment\">// 挂物理页</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"在IDT表构建中断门，请在windbg中执行下面的指令：\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"eq 8003f500 %04xee00`0008%04x\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>R0Function <span class=\"token operator\">>></span> <span class=\"token number\">16</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>R0Function <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x0000FFFF</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t<span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t__asm <span class=\"token keyword\">int</span> <span class=\"token number\">0x20</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t<span class=\"token comment\">// 通过 0x1000 打印数组</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%x\\n\"</span><span class=\"token punctuation\">,</span> ptr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t<span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"reference\"><a class=\"anchor\" href=\"#reference\">#</a> Reference</h1>\n<p>[关于 C++ 程序编译出现 error C2143: syntax error : missing ';' before 'type' 的解决办法]<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xjcl9oYXBweS9hcnRpY2xlL2RldGFpbHMvNTI0Njc2OTM=\">https://blog.csdn.net/lcr_happy/article/details/52467693</span><br />\n [error C2275 将此类型用作表达式非法]<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xxazE5ODUvYXJ0aWNsZS9kZXRhaWxzLzczODkxNTk=\">https://blog.csdn.net/lqk1985/article/details/7389159</span><br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0t3YW5zeS9hcnRpY2xlL2RldGFpbHMvMTA5MDI0NTA0\">https://blog.csdn.net/Kwansy/article/details/109024504</span></p>\n",
            "tags": [
                "error C2143",
                "error C2275"
            ]
        },
        {
            "id": "https://or0kit.github.io/Bin/Core/WindowsXp/Protect-Mode/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F-PWT%E4%B8%8EPCD%E5%B1%9E%E6%80%A7/",
            "url": "https://or0kit.github.io/Bin/Core/WindowsXp/Protect-Mode/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F-PWT%E4%B8%8EPCD%E5%B1%9E%E6%80%A7/",
            "title": "保护模式-PWT与PCD属性",
            "date_published": "2021-09-03T14:45:30.000Z",
            "content_html": "<h1 id=\"楔子\"><a class=\"anchor\" href=\"#楔子\">#</a> 楔子</h1>\n<p>在学习 PDE 与 PTE 的属性时，我们对两个位做了 <strong>保留</strong> ，并没有说明其作用，那就是今天要学习的<strong> PWT 位</strong>与<strong> PCD 位</strong></p>\n<h2 id=\"cpu缓存\"><a class=\"anchor\" href=\"#cpu缓存\">#</a> CPU 缓存</h2>\n<p>描述：</p>\n<ol>\n<li>CPU 缓存是位于<strong> CPU</strong> 与<strong>物理内存</strong>之间的 <strong>临时存储器</strong> ，它的 <strong>容量比内存小的多</strong> ，但是<strong>交换速度（读写速度）比内存要快得多</strong></li>\n<li>CPU 缓存可以做的很大，有几 K、几十 K、几百 K、甚至上 M，这决定于<strong> CPU 的版本</strong></li>\n</ol>\n<h3 id=\"cpu缓存与tlb的区别\"><a class=\"anchor\" href=\"#cpu缓存与tlb的区别\">#</a> CPU 缓存与 TLB 的区别</h3>\n<p>TLB：</p>\n<blockquote>\n<p>存储了  <code>线性地址</code> 与  <code>物理地址</code> 之间的对应关系</p>\n</blockquote>\n<p>CPU 缓存：</p>\n<blockquote>\n<p>存储了  <code>物理地址</code> 与  <code>内容</code> 之间的对应关系</p>\n</blockquote>\n<p>有了 CPU 缓存，当 CPU 再去<strong>查找 / 读取</strong>某一个线性地址对应的物理页时，就可以：</p>\n<ol>\n<li>先查 <strong>TLB</strong> ，找到它的<strong>物理地址</strong></li>\n<li>再找 <strong>CPU 缓存</strong> ，找到它的<strong>内容</strong></li>\n</ol>\n<p>CPU 缓存的大小决定了 CPU 的执行速度（ <strong>CPU 缓存越大，速度越快</strong> ，当然也会越贵）</p>\n<p><strong>注意</strong> ：</p>\n<ol>\n<li>更多关于 CPU 缓存的细节请参考<strong> Intel 白皮书第三卷第 11 章</strong></li>\n<li>不同的版本，章节顺序可能不一样，请参考章节标题</li>\n</ol>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<h2 id=\"pwtpage-write-through\"><a class=\"anchor\" href=\"#pwtpage-write-through\">#</a> PWT（Page Write Through）</h2>\n<p><code>PWT=1</code> ：写<strong> Cache</strong> 的时候也要将<strong>数据</strong>写入<strong>内存</strong>中<br />\n <code>PWT=0</code> ：写<strong> Cache</strong> 的时候就只是写 Cache，是否要映射到内存由<strong> CPU 缓存控制器</strong>自己决定</p>\n<h2 id=\"pcdpage-cache-disable\"><a class=\"anchor\" href=\"#pcdpage-cache-disable\">#</a> PCD（Page Cache Disable）</h2>\n<p><code>PCD=1</code> ：禁止某个页写入缓存（直接写入内存）<br />\n<strong>比如</strong> ：做页表用的页，已经存储在 TLB 中，可能就不需要再做缓存，而它的 PCD 一定为 1</p>\n<h1 id=\"reference\"><a class=\"anchor\" href=\"#reference\">#</a> Reference</h1>\n<p>滴水课件<br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxOTg4NDQ4L2FydGljbGUvZGV0YWlscy8xMDI3NjM4OTE=\"> https://blog.csdn.net/qq_41988448/article/details/102763891</span></p>\n",
            "tags": [
                "PWT",
                "PDT",
                "TLB",
                "CPU缓存"
            ]
        },
        {
            "id": "https://or0kit.github.io/Bin/Core/WindowsXp/Protect-Mode/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F-%E6%8E%A7%E5%88%B6%E5%AF%84%E5%AD%98%E5%99%A8/",
            "url": "https://or0kit.github.io/Bin/Core/WindowsXp/Protect-Mode/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F-%E6%8E%A7%E5%88%B6%E5%AF%84%E5%AD%98%E5%99%A8/",
            "title": "保护模式-控制寄存器",
            "date_published": "2021-09-03T14:43:31.000Z",
            "content_html": "<h1 id=\"控制寄存器\"><a class=\"anchor\" href=\"#控制寄存器\">#</a> 控制寄存器</h1>\n<p>控制寄存器用于控制和确定 CPU 的操作模式。</p>\n<p>控制寄存器有五个  <code>Cr0 Cr1 Cr2 Cr3 Cr4 </code>  其中  <code>Cr1</code>  保留， <code>Cr3</code>  存储的是页目录表基址</p>\n<h2 id=\"cr0\"><a class=\"anchor\" href=\"#cr0\">#</a> CR0</h2>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<p><strong>说明：</strong></p>\n<p><code>PE位</code> ：启用保护（Protecction Enable）标志<br />\n<strong> PE=1</strong> ：保护模式<br />\n<strong> PE=0</strong> ：实地址模式<br />\n这个标志 <strong>仅开启段级保护</strong> ，而没有启用分页机制<br />\n若要启用 <strong>分页机制</strong> ，那么<strong> PE</strong> 和<strong> PG</strong> 标志都要置位</p>\n<p><code>PG位</code> ：分页机制标志<br />\n<strong> PG=1</strong> ：开启了分页机制<br />\n<strong> PG=0</strong> ：未开启分页机制<br />\n在开启这个标志位之前<strong>必须已经或者同时开启  <code>PE</code>  标志</strong></p>\n<p><strong>PG=0</strong> 且 <strong>PE=0</strong> ：处理器工作状态为<strong>实地址模式</strong><br />\n<strong> PG=0</strong> 且 <strong>PE=1</strong> ：处理器工作状态为<strong>没有开启分页机制的保护模式</strong><br />\n<strong> PG=1</strong> 且 <strong>PE=0</strong> ：不存在。在<strong> PE</strong> 没有开启的情况下<strong>无法开启 PG</strong><br />\n<strong>PG=1</strong> 且 <strong>PE=1</strong> ：处理器工作状态为<strong>开启了分页机制的保护模式</strong></p>\n<p><code>WP位</code> ：写保护（Write Proctect）标志<br />\n对于 <strong>Intel 80486 或以上的 CPU</strong> ，CR0 的<strong> 16 位</strong>是写保护标志<br />\n当设置该标志时，处理器会禁止 <strong>超级用户程序</strong> （例如特权级 0 的程序）向<strong>用户级只读页面</strong>执行写操作</p>\n<p>当<strong> CPL&lt;3</strong> 的时候：</p>\n<ol>\n<li>如果 <strong>WP=0</strong> 可以<strong>读写</strong>任意用户级物理页，<strong>只要线性地址有效</strong></li>\n<li>如果 <strong>WP=1</strong> 可以<strong>读取</strong>任意用户级物理页，<strong>但对于只读的物理页，则不能写</strong></li>\n</ol>\n<h2 id=\"cr2\"><a class=\"anchor\" href=\"#cr2\">#</a> CR2</h2>\n<p><img data-src=\"image002.png\" alt=\"\" /></p>\n<p>当 CPU 访问某个无效页面时，会产生缺页异常，此时，CPU 会将引起异常的线性地址存放在 CR2 中</p>\n<p>举例：</p>\n<ol>\n<li>当 CPU 访问某个物理页，但 PDE/PTE 的<strong> P 位为 0</strong> 时，会产生<strong>缺页异常</strong></li>\n<li>缺页异常一旦发生，CPU 会将<strong>引起缺页异常的线性地址</strong>存储到<strong> Cr2</strong> 中</li>\n<li>此时，操作系统的处理程序开始<strong>对异常进行处理</strong></li>\n<li>若<strong>处理结束</strong>后，虽然 PDE/PTE 的 P 位为 0，但实际上它被写进了页面</li>\n<li>这时，处理程序会<strong>将数据从页面中读出，再挂上一个有效的物理页，让程序接着往下跑</strong></li>\n<li>程序往下跑时，操作系统必须要记录程序<strong>原先已经跑到了哪里</strong></li>\n<li>此时，Cr2 便派上了用场，因为<strong>产生异常时的线性地址存在了 Cr2 中</strong></li>\n<li>但如果异常处理程序检测到用户访问的页面是一个<strong>未分配的页面</strong></li>\n<li>这时，操作系统会报告一个 <strong>异常</strong> ，告诉我们<strong>在哪里发生了错误</strong></li>\n<li><strong>若没有 Cr2 寄存器，当进入异常处理程序时，将找不到回去的线性地址</strong></li>\n</ol>\n<h2 id=\"cr4寄存器\"><a class=\"anchor\" href=\"#cr4寄存器\">#</a> Cr4 寄存器</h2>\n<p><img data-src=\"image003.png\" alt=\"\" /></p>\n<p>PAE/PSE 说明：</p>\n<p>PAE=1 是 2-9-9-12 分页  PAE=0 是 10-10-12 分页。<br />\nPSE：大页开启标志。</p>\n<p><img data-src=\"image004.png\" alt=\"\" /></p>\n<blockquote>\n<p>注意：关于控制寄存器的更多细节，请参考 Intel 白皮书第三卷</p>\n</blockquote>\n<p><img data-src=\"image005.png\" alt=\"\" /></p>\n<h1 id=\"reference\"><a class=\"anchor\" href=\"#reference\">#</a> Reference</h1>\n<p>滴水课件<br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxOTg4NDQ4L2FydGljbGUvZGV0YWlscy8xMDI3NjM2NDY=\"> https://blog.csdn.net/qq_41988448/article/details/102763646</span></p>\n",
            "tags": [
                "CR0",
                "CR2",
                "CR4"
            ]
        },
        {
            "id": "https://or0kit.github.io/Bin/Core/WindowsXp/Protect-Mode/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F-%E4%B8%AD%E6%96%AD%E4%B8%8E%E5%BC%82%E5%B8%B8/",
            "url": "https://or0kit.github.io/Bin/Core/WindowsXp/Protect-Mode/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F-%E4%B8%AD%E6%96%AD%E4%B8%8E%E5%BC%82%E5%B8%B8/",
            "title": "保护模式-中断与异常",
            "date_published": "2021-09-03T14:43:18.000Z",
            "content_html": "<h1 id=\"什么是中断\"><a class=\"anchor\" href=\"#什么是中断\">#</a> 什么是中断</h1>\n<ol>\n<li>\n<p>中断通常是由 CPU 外部的输入输出设备 (硬件) 所触发的，供外部设备通知<br />\n CPU “有事情需要处理”，因此又叫中断请求 (Interrupt Request).</p>\n</li>\n<li>\n<p>中断请求的目的是希望 CPU 暂时停止执行当前正在执行的程序，转去执行<br />\n中断请求所对应的中断处理例程 (中断处理程序在哪有 IDT 表决定)</p>\n</li>\n<li>\n<p>80x86 有两条中断请求线：</p>\n<p>非屏蔽中断线，称为 NMI（NonMaskable Interrupt）</p>\n<p>可屏蔽中断线，称为 INTR（Interrupt Require）</p>\n</li>\n<li>\n<p>假设没有中断这种机制，当一个的程序的代码为死循环时，其他的程序就没有机会执行了。</p>\n</li>\n</ol>\n<p>中断的本质：改变 CPU 的执行路线</p>\n<h2 id=\"可屏蔽中断\"><a class=\"anchor\" href=\"#可屏蔽中断\">#</a> 可屏蔽中断</h2>\n<p><strong>描述：</strong></p>\n<p>在硬件级，可屏蔽中断是由一块专门的芯片来管理的，通常称为中断控制器<br />\n它负责分配中断资源和管理各个中断源发出的中断请求<br />\n为了便于标识各个中断请求，中断管理器通常用 IRQ（Interrupt Request）后面加上数字来表示不同的中断<br />\n比如：在 Windows 中，时钟中断的 IRQ 编号为 0，也就是  <code>IRQ0</code></p>\n<h2 id=\"时钟中断\"><a class=\"anchor\" href=\"#时钟中断\">#</a> 时钟中断</h2>\n<p><strong>描述：</strong></p>\n<p>大多数操作系统时钟中断在 10-100MS 之间，Windows 系列为 10-20MS<br />\nWindows 时钟中断每隔 10~20MS 会向 CPU 发送一个请求，当 CPU 收到请求时，操作系统就会接管 CPU，指定 CPU 去执行一段代码，操作系统在这段代码里便有机会进行线程的切换。这样，即便一个程序进入死循环，操作系统依然有机会进行线程切换<br />\n当然，操作系统主要并不是通过时钟中断来进行线程切换，而只是有机会进行线程切换，这里只是举个例子。</p>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<h2 id=\"可屏蔽中断如何处理\"><a class=\"anchor\" href=\"#可屏蔽中断如何处理\">#</a> 可屏蔽中断如何处理？</h2>\n<p><strong>描述：</strong></p>\n<ol>\n<li><strong>时钟中断</strong>的 <strong>IRQ 编号为 0</strong> ，所在位置为<strong> IDT [0x30]</strong></li>\n<li><strong>IRQ1~IRQ15</strong> 分别对应<strong> IDT [0x31]~IDT [0x35]</strong></li>\n</ol>\n<p><img data-src=\"image002.png\" alt=\"\" /></p>\n<p><strong>特别说明：</strong></p>\n<p>1、如果自己的程序执行时不希望 CPU 去处理这些中断，可以<br />\n用  <code>CLI</code>  指令清空 EFLAG 寄存器中的 IF 位<br />\n用  <code>STI</code>  指令设置 EFLAG 寄存器中的 IF 位</p>\n<p>2、硬件中断与 IDT 表中的对应关系并非固定不变的<br />\n参见：APIC（高级可编程中断控制器）</p>\n<h2 id=\"不可屏蔽中断如何处理\"><a class=\"anchor\" href=\"#不可屏蔽中断如何处理\">#</a> 不可屏蔽中断如何处理？</h2>\n<p><img data-src=\"image003.png\" alt=\"\" /></p>\n<p>特别说明：</p>\n<blockquote>\n<p>当非可屏蔽中断产生时，CPU 在执行完当前指令后会里面进入中断处理程序</p>\n</blockquote>\n<blockquote>\n<p>非可屏蔽中断不受 EFLAG 寄存器中 IF 位的影响，一旦发生，CPU 必须处理</p>\n</blockquote>\n<blockquote>\n<p>非可屏蔽中断处理程序位于 IDT 表中的 2 号位置</p>\n</blockquote>\n<h1 id=\"异常\"><a class=\"anchor\" href=\"#异常\">#</a> 异常</h1>\n<p>描述：</p>\n<blockquote>\n<p>异常通常是 <strong>CPU 在执行指令时检测到的某些错误</strong> ，比如除 0、访问无效页面等。</p>\n</blockquote>\n<p>中断与异常的区别：</p>\n<ol>\n<li><code>中断</code> 来自于 <strong>外部设备</strong> ，是 <strong>中断源</strong> （比如键盘）发起的，<strong>CPU 是被动的</strong></li>\n<li><code>异常</code> 来自于 <strong>CPU 本身</strong> ，是<strong> CPU 主动产生的</strong></li>\n<li><strong>INT N</strong> 虽然被称为 “软件中断”，但其<strong>本质是异常</strong></li>\n<li>EFLAG 的  <code>IF位</code> 对  <code>INT N</code>  无效。</li>\n</ol>\n<h2 id=\"异常处理\"><a class=\"anchor\" href=\"#异常处理\">#</a> 异常处理</h2>\n<p>描述：</p>\n<blockquote>\n<p>无论是由<strong>硬件设备触发的中断请求</strong>还是由 <strong>CPU 产生的异常</strong> ，处理程序都在  <code>IDT表</code></p>\n</blockquote>\n<p>常见的异常处理程序：</p>\n<p><img data-src=\"image004.png\" alt=\"\" /></p>\n<p><code>页错误</code> ：当我们访问一个 <strong>线性地址</strong> ，而这个线性地址指向的<strong>物理页</strong>是 <strong>无效的</strong> ，便会触发 CPU 异常，该异常位于 <strong>E 号门</strong> （IDT [0xE]）<br />\n <code>段错误</code> ：一旦<strong>段的运算发生异常</strong>时（如权限检查），便会走 <strong>D 号门</strong> （IDT [0xD]）<br />\n <code>除0错误</code> ：当<strong>除数为 0</strong> 时，会触发异常，这时走 <strong>0 号门</strong> （IDT [0x0]）<br />\n <code>双重错误</code> ：假设 <strong>执行一个异常（如页错误）时又产生了一个错误</strong> ，那么便会触发双重错误，这时走 <strong>8 号门</strong> （IDT [0x8]）</p>\n<h2 id=\"缺页异常\"><a class=\"anchor\" href=\"#缺页异常\">#</a> 缺页异常</h2>\n<p>缺页异常的 <strong>产生</strong> （例举两种）：</p>\n<ol>\n<li>当 PDE/PTE 的<strong> P=0</strong> 时会发生缺页异常</li>\n<li>当 PDE/PTE 的<strong>属性为只读但程序试图写入</strong>时会发生缺页异常</li>\n</ol>\n<p>一旦发生缺页异常，CPU 会执行 IDT 表中的<strong> 0xE 号</strong>中断处理程序，由操作系统来接管，后面会学习的。</p>\n<p><img data-src=\"image005.png\" alt=\"\" /></p>\n<h1 id=\"实验\"><a class=\"anchor\" href=\"#实验\">#</a> 实验</h1>\n<h2 id=\"分析idt表中0x2号中断的执行流程\"><a class=\"anchor\" href=\"#分析idt表中0x2号中断的执行流程\">#</a> 分析 IDT 表中 0x2 号中断的执行流程</h2>\n<h2 id=\"分析idt表中0x8号中断的执行流程\"><a class=\"anchor\" href=\"#分析idt表中0x8号中断的执行流程\">#</a> 分析 IDT 表中 0x8 号中断的执行流程</h2>\n<h1 id=\"reference\"><a class=\"anchor\" href=\"#reference\">#</a> Reference</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxOTg4NDQ4L2FydGljbGUvZGV0YWlscy8xMDI3NjA1NzA=\">https://blog.csdn.net/qq_41988448/article/details/102760570</span></p>\n",
            "tags": [
                "中断",
                "异常",
                "CLI指令",
                "STI指令",
                "INT2",
                "INT8"
            ]
        },
        {
            "id": "https://or0kit.github.io/Bin/Core/WindowsXp/Protect-Mode/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F-TLB/",
            "url": "https://or0kit.github.io/Bin/Core/WindowsXp/Protect-Mode/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F-TLB/",
            "title": "保护模式-TLB",
            "date_published": "2021-09-03T14:42:24.000Z",
            "content_html": "<h1 id=\"地址解析\"><a class=\"anchor\" href=\"#地址解析\">#</a> 地址解析</h1>\n<p>当我们通过一个线性地址访问一个物理页（比如：MOV EAX,[0x12345678]）时，实际上 CPU 未必只读了 4 个字节。</p>\n<ul>\n<li>10-10-12 分页</li>\n</ul>\n<blockquote>\n<p>CPU 先通过线性地址找到对应的 PDE：4 个字节<br />\n CPU 再通过 PDE 和线性地址找到 PTE：4 个字节<br />\n最后再通过 PTE 找到对应物理页：4 个字节<br />\n一共访问了 12 个字节，如果跨页可能更多。</p>\n</blockquote>\n<ul>\n<li>2-9-9-12 分页</li>\n</ul>\n<blockquote>\n<p>找到 PDPTE：8 个字节<br />\n找到 PDE：8 个字节<br />\n找到 PTE：8 个字节<br />\n最后找到物理页：4 个字节<br />\n一共访问了 20 个字节，如果跨页可能更多。</p>\n</blockquote>\n<p>为了提高访问效率，只能对线性地址与其对应的物理地址做记录。<br />\nCPU 内部做了一张表，用来记录这些东西。它的效率和寄存器一样快，名字叫做 TLB（Translation Lookaside Buffer）。<br />\n由于 TLB 的效率很快，因此它的大小不能太大，少则几十条，多则也只有上百条。</p>\n<p>思考：在一个进程的 4GB 空间中，有无数个线性地址，但是一个 TLB 最多只能记录上百条记录，那么这张表真的有意义吗？</p>\n<h1 id=\"tlb\"><a class=\"anchor\" href=\"#tlb\">#</a> TLB</h1>\n<h2 id=\"tlb结构\"><a class=\"anchor\" href=\"#tlb结构\">#</a> TLB 结构</h2>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<p><code>ATTR：</code> 属性<br />\n在 10-10-12 分页模式下：ATTR = PDE 属性 &amp; PTE 属性<br />\n在 2-9-9-12 分页模式下：ATTR = PDPTE 属性 &amp; PDE 属性 &amp; PTE 属性</p>\n<p><code>LRU：</code> 统计信息<br />\n由于 TLB 的大小有限，因此当 TLB 被写满、又有新的地址即将写入时，TLB 就会根据统计信息来判断哪些地址是不常用的，从而将不常用的记录从 TLB 中移除。</p>\n<p>注意：</p>\n<p>不同的 CPU，TLB 大小不同<br />\n只要 Cr3 发生变化，TLB 立即刷新，一核一套 TLB<br />\n 由于操作系统的高 2G 映射基本不变，因此如果 Cr3 改了，TLB 刷新的话，重建高 2G 以上很浪费。<br />\n所以 PDE 和 PTE 中有个 G 标志位（当 PDE 为大页时，G 标志位才起作用），如果 G 位为 1，刷新 TLB 时将不会刷新 PDE/PTE<br />\nG 位为 1 的页，当 TLB 写满时，CPU 根据统计信息将不常用的地址废弃，保留最常用的地址</p>\n<h2 id=\"tlb种类\"><a class=\"anchor\" href=\"#tlb种类\">#</a> TLB 种类</h2>\n<p>TLB 在 X86 体系的 CPU 中的实际应用最早是从 Intel 的 486CPU 开始的，在 X86 体系的 CPU 中，一般都设有如下 4 组 TLB:</p>\n<blockquote>\n<p>第一组：缓存一般页表（4K 字节页面）的指令页表缓存（Instruction-TLB）；<br />\n第二组：缓存一般页表（4K 字节页面）的数据页表缓存（Data-TLB）；<br />\n第三组：缓存大尺寸页表（2M/4M 字节页面）的指令页表缓存（Instruction-TLB）；<br />\n第四组：缓存大尺寸页表（2M/4M 字节页面）的数据页表缓存（Data-TLB）</p>\n</blockquote>\n<h1 id=\"全局页\"><a class=\"anchor\" href=\"#全局页\">#</a> 全局页</h1>\n<p>G=1，即为全局页，进程（CR3）切换时，TLB 中的记录不会被刷新。</p>\n<h1 id=\"实验\"><a class=\"anchor\" href=\"#实验\">#</a> 实验</h1>\n<h2 id=\"编写代码实现修改页属性实现应用层读写高2g内存地址\"><a class=\"anchor\" href=\"#编写代码实现修改页属性实现应用层读写高2g内存地址\">#</a> 编写代码实现修改页属性，实现应用层读写高 2G 内存地址</h2>\n<p>改 U/S 位，和 PTE 的 G 位<br />\n G=1 时，程序会崩，只有 G=0 才能成功。<br />\n简单解释一下 G 位：<br />\nPDE 中，只有 PS=1（大页）时，G 才有效。<br />\nG 位是全局页的意思，G=1 时，这个线性地址对应的页是全局页，进程切换时，对应的 TLB 不会改变。多个进程的高 2G 数据大部分都是相同的，我们不希望在切换进程时对这部分 TLB 做多余的刷新，所以需要设置 G=1 以提高效率。</p>\n<p>回到本文，我们已经知道 PDE 的 PS=0，所以我们不用管 PDE 的 G。关键是 PTE 的 G，为什么要改成 0 呢？因为线性地址 0x8003f048 默认是 G=1，它在 CPU 中有 TLB 缓存。<br />\n2-9-9-12 模式下获取 PDPTI-PDI-PTI-OFFSET</p>\n<p>公式：</p>\n<blockquote>\n<p>pPDE = 0xc0600000 + (PDPTI*4KB) + (PDI*8)\t\t\t\t\t<br />\npPTE = 0xc0000000 + (PDPTI*2MB) + (PDI*4KB) + (PTI*8)</p>\n</blockquote>\n<p>更高效的公式（MmIsAddressValid 是这么干的）</p>\n<blockquote>\n<p>pPDE = 0xc0600000 + ((addr &gt;&gt; 18) &amp; 0x3ff8)\t<br />\npPTE = 0xc0000000 + ((addr &gt;&gt; 9) &amp; 0x7ffff8)</p>\n</blockquote>\n<p>代码转自<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0t3YW5zeS9hcnRpY2xlL2RldGFpbHMvMTA4OTY1MTk2\"> https://blog.csdn.net/Kwansy/article/details/108965196</span></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;windows.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">//2-9-9-12</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">//PDPTI-PDI-PTI-OFFSET</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>DWORD <span class=\"token operator\">*</span><span class=\"token function\">GetPDE</span><span class=\"token punctuation\">(</span>DWORD addr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token comment\">//return (DWORD *)(0xc0600000 + ((addr >> 18) &amp; 0x3ff8));</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tDWORD PDPTI <span class=\"token operator\">=</span> addr <span class=\"token operator\">>></span> <span class=\"token number\">30</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tDWORD PDI <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>addr <span class=\"token operator\">>></span> <span class=\"token number\">21</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x000001FF</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tDWORD PTI <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>addr <span class=\"token operator\">>></span> <span class=\"token number\">12</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x000001FF</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xC0600000</span> <span class=\"token operator\">+</span> PDPTI <span class=\"token operator\">*</span> <span class=\"token number\">0x1000</span> <span class=\"token operator\">+</span> PDI <span class=\"token operator\">*</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>DWORD <span class=\"token operator\">*</span><span class=\"token function\">GetPTE</span><span class=\"token punctuation\">(</span>DWORD addr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token comment\">//return (DWORD *)(0xc0000000 + ((addr >> 9) &amp; 0x7ffff8));</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\tDWORD PDPTI <span class=\"token operator\">=</span> addr <span class=\"token operator\">>></span> <span class=\"token number\">30</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\tDWORD PDI <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>addr <span class=\"token operator\">>></span> <span class=\"token number\">21</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x000001FF</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\tDWORD PTI <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>addr <span class=\"token operator\">>></span> <span class=\"token number\">12</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x000001FF</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xC0000000</span> <span class=\"token operator\">+</span> PDPTI <span class=\"token operator\">*</span> <span class=\"token number\">0x200000</span> <span class=\"token operator\">+</span> PDI <span class=\"token operator\">*</span> <span class=\"token number\">0x1000</span> <span class=\"token operator\">+</span> PTI <span class=\"token operator\">*</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">__declspec</span><span class=\"token punctuation\">(</span>naked<span class=\"token punctuation\">)</span> <span class=\"token function\">R0Function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t__asm</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\tpush ebp</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\tmov ebp<span class=\"token punctuation\">,</span>esp</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\tsub esp<span class=\"token punctuation\">,</span><span class=\"token number\">0x1000</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\tpushad</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\tpushfd\t\t</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t__asm push fs</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token comment\">//__asm int 3</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t<span class=\"token comment\">// 修改 8003f048 的 U/S 位</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token operator\">*</span><span class=\"token function\">GetPDE</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x8003f048</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|=</span> <span class=\"token number\">0x00000004</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t<span class=\"token operator\">*</span><span class=\"token function\">GetPTE</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x8003f048</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|=</span> <span class=\"token number\">0x00000004</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t<span class=\"token comment\">// 修改 PTE 的 G 位</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t<span class=\"token operator\">*</span><span class=\"token function\">GetPTE</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x8003f048</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;=</span> <span class=\"token number\">0xFFFFFEFF</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t<span class=\"token comment\">//__asm int 3</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t__asm pop fs</pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t__asm</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t\tpopfd</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t\tpopad</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t\tadd esp<span class=\"token punctuation\">,</span><span class=\"token number\">0x1000</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t\tmov esp<span class=\"token punctuation\">,</span>ebp</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t\tpop ebp</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t\tiretd</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"在IDT表构建中断门，请在windbg中执行下面的指令：\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"eq 8003f500 %04xee00`0008%04x\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>R0Function<span class=\"token operator\">>></span><span class=\"token number\">16</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>R0Function <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x0000FFFF</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t<span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t__asm <span class=\"token keyword\">int</span> <span class=\"token number\">0x20</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"0x8003f048 U/S,G位修改成功.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*(PDWORD)0x8003f048 = %08x\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>PDWORD<span class=\"token punctuation\">)</span><span class=\"token number\">0x8003f048</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 读</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>PDWORD<span class=\"token punctuation\">)</span><span class=\"token number\">0x8003f048</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x12345678</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 写</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*(PDWORD)0x8003f048 = %08x\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>PDWORD<span class=\"token punctuation\">)</span><span class=\"token number\">0x8003f048</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 读</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t<span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>结果：</p>\n<p><img data-src=\"image017.png\" alt=\"\" /></p>\n<h2 id=\"体验tlb的存在\"><a class=\"anchor\" href=\"#体验tlb的存在\">#</a> 体验 TLB 的存在</h2>\n<p>火哥的思路是：</p>\n<p>挂上物理页后，修改一下数据，再挂上另外一个物理页，然后在读取这个线性地址，查看数值是以前的还是后面挂上物理页的，由此推测 TLB 是否存在。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;Windows.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>DWORD g_Value <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">//DWORD pPDE, pPTE;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">__declspec</span><span class=\"token punctuation\">(</span>naked<span class=\"token punctuation\">)</span> <span class=\"token function\">CallGate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t__asm <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\tpush <span class=\"token number\">0x30</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\tpop fs<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\tpushad<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\tpushfd<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t<span class=\"token comment\">// 获取 p1 的 PTE</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\tmov eax<span class=\"token punctuation\">,</span><span class=\"token number\">0x600000</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\tshr eax<span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\tand eax<span class=\"token punctuation\">,</span> <span class=\"token number\">0x7FFFF8</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\tsub eax<span class=\"token punctuation\">,</span> <span class=\"token number\">0x40000000</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\tmov ecx<span class=\"token punctuation\">,</span> eax<span class=\"token punctuation\">;</span><span class=\"token comment\">//ecx 指向 p1 的 PTE</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t<span class=\"token comment\">//0 地址一般都是有 PDE 的，直接更换它的 PTE</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\tmov eax<span class=\"token punctuation\">,</span> <span class=\"token number\">0xC0000000</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\tmov ecx<span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span>ecx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t<span class=\"token comment\">//or ecx,0x100;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\tmov<span class=\"token punctuation\">[</span>eax<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> ecx<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\tmov dword ptr ds<span class=\"token operator\">:</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x12345678</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\t<span class=\"token comment\">// 获取 p2 的 PTE</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\tmov eax<span class=\"token punctuation\">,</span><span class=\"token number\">0x700000</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\tshr eax<span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\tand eax<span class=\"token punctuation\">,</span> <span class=\"token number\">0x7FFFF8</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\tsub eax<span class=\"token punctuation\">,</span> <span class=\"token number\">0x40000000</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\tmov ecx<span class=\"token punctuation\">,</span> eax<span class=\"token punctuation\">;</span><span class=\"token comment\">//ecx 指向 p1 的 PTE</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\t<span class=\"token comment\">//0 地址一般都是有 PDE 的，直接更换它的 PTE</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\tmov eax<span class=\"token punctuation\">,</span> <span class=\"token number\">0xC0000000</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\tmov ecx<span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span>ecx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\tmov<span class=\"token punctuation\">[</span>eax<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> ecx<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t\t<span class=\"token comment\">// 刷新 CR3</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t\t<span class=\"token comment\">//mov eax,cr3;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t\t<span class=\"token comment\">//mov cr3,eax;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t\t<span class=\"token comment\">//invlpg dword ptr ds:[0];</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t\tmov eax<span class=\"token punctuation\">,</span> dword ptr ds <span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t\tmov g_Value<span class=\"token punctuation\">,</span> eax<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t\tpopfd<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t\tpopad<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t\tretf<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t<span class=\"token keyword\">char</span> buf<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x48</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t<span class=\"token keyword\">void</span><span class=\"token operator\">*</span> p1 <span class=\"token operator\">=</span> <span class=\"token function\">VirtualAlloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x600000</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x1000</span><span class=\"token punctuation\">,</span> MEM_COMMIT <span class=\"token operator\">|</span> MEM_RESERVE<span class=\"token punctuation\">,</span> PAGE_EXECUTE_READWRITE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\t<span class=\"token keyword\">void</span><span class=\"token operator\">*</span> p2 <span class=\"token operator\">=</span> <span class=\"token function\">VirtualAlloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x700000</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x1000</span><span class=\"token punctuation\">,</span> MEM_COMMIT <span class=\"token operator\">|</span> MEM_RESERVE<span class=\"token punctuation\">,</span> PAGE_EXECUTE_READWRITE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p1 <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p2 <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token function\">VirtualFree</span><span class=\"token punctuation\">(</span>p2<span class=\"token punctuation\">,</span> <span class=\"token number\">0x1000</span><span class=\"token punctuation\">,</span> MEM_COMMIT <span class=\"token operator\">|</span> MEM_RESERVE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"virtual failed p1\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p2 <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>\t\t<span class=\"token function\">VirtualFree</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">,</span> <span class=\"token number\">0x1000</span><span class=\"token punctuation\">,</span> MEM_COMMIT <span class=\"token operator\">|</span> MEM_RESERVE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"virtual failed p2\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>\t<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>DWORD<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>p1<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>\t<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>DWORD<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>p2<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x200</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"windbg execute eq 8003f048 %04xec00`0008%04x\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>CallGate <span class=\"token operator\">>></span> <span class=\"token number\">0x10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xffff</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>CallGate <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xffff</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>\t<span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>\t__asm <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>\t\tcall fword ptr buf<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>\t\tpush <span class=\"token number\">0x3b</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>\t\tpop fs<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>\t<span class=\"token comment\">//printf(\"%#010X\\n\", pPDE);</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>\t<span class=\"token comment\">//printf(\"%#010X\\n\", pPDE);</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"g_Value=%#010X\\n\"</span><span class=\"token punctuation\">,</span> g_Value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>\t<span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>\t<span class=\"token function\">VirtualFree</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">,</span> <span class=\"token number\">0x1000</span><span class=\"token punctuation\">,</span> MEM_COMMIT <span class=\"token operator\">|</span> MEM_RESERVE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>\t<span class=\"token function\">VirtualFree</span><span class=\"token punctuation\">(</span>p2<span class=\"token punctuation\">,</span> <span class=\"token number\">0x1000</span><span class=\"token punctuation\">,</span> MEM_COMMIT <span class=\"token operator\">|</span> MEM_RESERVE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>or ecx,0x100</code>  ecx 中存储的是 PDE，进行或运算，使 G 位为 1，即开起全局页，这样进程（CR3）切换时，TLB 中的记录不会被刷新</p>\n<p><code>mov eax,cr3;</code>   <code>mov cr3,eax;</code>  刷新 CR3。</p>\n<p><code>INVLPG:</code>  使 TLB 数据失效。<br />\n这个指令与直接加载 CR3 的区别在于 CR3 是整个 TLB 都失效，并重新加载。<br />\nINVLPG 则是指定去失效某个页的 TLB。它是一个更细粒度的控制。</p>\n<h3 id=\"实验结果\"><a class=\"anchor\" href=\"#实验结果\">#</a> 实验结果</h3>\n<ul>\n<li><strong>不开启全局页，不刷新 CR3</strong></li>\n</ul>\n<p><img data-src=\"image002.png\" alt=\"\" /></p>\n<ul>\n<li><strong>不开启全局页，刷新 CR3</strong></li>\n</ul>\n<p><img data-src=\"image003.png\" alt=\"\" /></p>\n<ul>\n<li><strong>开启全局页，刷新 CR3</strong></li>\n</ul>\n<p><img data-src=\"image004.png\" alt=\"\" /></p>\n<ul>\n<li><strong>开启全局页，刷新 CR3，使用 INVLPG 指令</strong></li>\n</ul>\n<p><img data-src=\"image005.png\" alt=\"\" /></p>\n<h2 id=\"shadowwalker\"><a class=\"anchor\" href=\"#shadowwalker\">#</a> ShadowWalker</h2>\n<p>一种利用 TLB 机制实现内存隐藏的方式 ——ShadowWalker。这种技术利用了 TLB 会缓存线性地址到物理地址映射的特性，当 CRC 线程检查某段代码时，它使用的线性地址会缓存到 TLB 的数据页表缓存（Data-TLB）中。而当 EIP 运行到这段代码时，又会把代码的线性地址缓存到 TLB 的指令页表缓存（Instruction-TLB）中。这样 CPU 中就缓存了同一个地址的两份记录，CRC 线程从数据页表缓存中读取物理地址，EIP 执行流从指令页表缓存中读取物理地址，这两个物理地址是相同的。</p>\n<p>ShadowWalker 技术的核心就在于修改指令页表缓存中的物理地址，让 CRC 线程读取原来的代码，而程序真正执行的时候则跳转到其他代码。</p>\n<p>这种方式在 3 环是不稳定的，原因是 TLB 经常刷新。</p>\n<p>复现暂时先鸽了。</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vbGVpYnNvLWN5L3AvMTE3MTkyODEuaHRtbA==\">https://www.cnblogs.com/leibso-cy/p/11719281.html</span></p>\n<h1 id=\"reference\"><a class=\"anchor\" href=\"#reference\">#</a> Reference</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxOTg4NDQ4L2FydGljbGUvZGV0YWlscy8xMDI3MzYwNjI=\">https://blog.csdn.net/qq_41988448/article/details/102736062</span><br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0t3YW5zeS9hcnRpY2xlL2RldGFpbHMvMTA4OTY1MTk2\">https://blog.csdn.net/Kwansy/article/details/108965196</span><br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0t3YW5zeS9hcnRpY2xlL2RldGFpbHMvMTA5MDEzMTUy\">https://blog.csdn.net/Kwansy/article/details/109013152</span></p>\n",
            "tags": [
                "TLB",
                "INVLPG指令",
                "全局页",
                "ShadowWalker"
            ]
        },
        {
            "id": "https://or0kit.github.io/Bin/Core/WindowsXp/Protect-Mode/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F-2-9-9-12%E5%88%86%E9%A1%B5/",
            "url": "https://or0kit.github.io/Bin/Core/WindowsXp/Protect-Mode/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F-2-9-9-12%E5%88%86%E9%A1%B5/",
            "title": "保护模式-2-9-9-12分页",
            "date_published": "2021-08-31T14:19:22.000Z",
            "content_html": "<h1 id=\"10-10-12-分页的寻址范围\"><a class=\"anchor\" href=\"#10-10-12-分页的寻址范围\">#</a> 10-10-12 分页的寻址范围</h1>\n<p>在之前的学习中，有一个课后思考题：10-10-12 分页模式物理内存能够识别的最多范围是多少？<br />\n我们当时是怎么算的呢？很简单嘛，有 1024 个页表，每个页表有 1024 个物理页，每个物理页有 4KB，那不就是 1024 * 1024 * 4KB = 4GB 吗？！<br />\n答案确实是 4GB，但很遗憾，如果你是这样算的，那你对 10-10-12 分页就还没有理解到位。<br />\n更有甚者可能会说，32 位系统，2^32=4GB，所以寻址范围是 4GB，这就更加错的离谱。</p>\n<p>实际上，决定物理内存寻址范围的是页表项 PTE。</p>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<p>PTE 的低 12 位是属性；高 20 位是基址，低 12 位补零后构成了<strong>物理页基址</strong>。所以，物理地址的寻址范围是由 PTE 构成的这 32 位物理页基址决定的，4GB 是从这里来的。</p>\n<p><strong>注意，线程的 4GB 和物理地址寻址范围的 4GB 不是一个东西。</strong> 物理地址寻址的 4GB 我们刚才已经解释过，是由 PTE 决定的。而线程的 4GB 其实指的是 32 位线性地址确定的，这个才是和 32 位系统相关的，和分页模式无关，32 位系统的线性地址就是 32 位。</p>\n<h1 id=\"10-10-12-分页的缺点\"><a class=\"anchor\" href=\"#10-10-12-分页的缺点\">#</a> 10-10-12 分页的缺点</h1>\n<p>缺点就是物理地址寻址范围太小了，只有 4GB。随着硬件的发展，物理内存已经超过 4GB 了，所以我们需要一种新的分页模式来映射更多的物理内存，2-9-9-12 分页又称为 PAE（物理地址扩展）分页就应运而生了。</p>\n<h1 id=\"2-9-9-12-分页\"><a class=\"anchor\" href=\"#2-9-9-12-分页\">#</a> 2-9-9-12 分页</h1>\n<p>2-9-9-12 分页将物理地址寻址范围扩大到 2^36=64GB。</p>\n<h1 id=\"为什么是2-9-9-12\"><a class=\"anchor\" href=\"#为什么是2-9-9-12\">#</a> 为什么是 2-9-9-12</h1>\n<ul>\n<li>页的大小是确定的，4KB 不能随便改，所以 32 位的最后一部分就确定为了 12 位。</li>\n<li>如果想增大物理内存的访问范围，就需要增大 PTE，增大了多少呢？考虑对齐的因素，增加到 8 个字节，由于 PTE 增大了，而 PTT 表的大小没变，依然是 4KB，所以每张 PTT 表能放的 PTE 个数由原来的 1024 个减少到 512 个，512 等于 2 的 9 次方，因此 PTI=9</li>\n</ul>\n<p><img data-src=\"image003.png\" alt=\"\" /></p>\n<ul>\n<li>由于 2 的 9 次方个 PDE 就能找到所有的 PTT 表，因此 PDI=9</li>\n<li>分配到这里时，还剩下前 2 位未分配。与 10-10-12 不同，CR3 不直接指向 PDT 表，而是指向一张新的表，叫做 PDPT 表（页目录指针表），PDPT 表中的每一个成员叫做 PDPTE（Page-Directory-Point-Table Entry，页目录指针表项），每项占 8 个字节。PDPT 表只有 4 个成员，因为 2 位比特位只能满足四种情况： <code>00 01 10 11</code> 。</li>\n</ul>\n<p>2-9-9-12 分页结构图</p>\n<p><img data-src=\"image002.png\" alt=\"\" /></p>\n<h1 id=\"pdpte\"><a class=\"anchor\" href=\"#pdpte\">#</a> PDPTE</h1>\n<p><img data-src=\"image004.png\" alt=\"\" /></p>\n<p><code>P位</code> ：第 0 位，有效位<br />\n <code>Avail</code> ：这部分供操作系统软件随意使用，CPU 不使用<br />\n <code>Base Addr</code> ：指向 PDT 表地址，由两部分组成</p>\n<blockquote>\n<p>第一部分：高四字节 32~35 位<br />\n第二部分：低 4 字节 12~31 位<br />\n这两部分加起来共 24 位，后 12 位补 0</p>\n</blockquote>\n<p><code>灰色部分</code> ：保留位</p>\n<p>PWT 位与 PCD 位下节学。</p>\n<h1 id=\"pde\"><a class=\"anchor\" href=\"#pde\">#</a> PDE</h1>\n<p><img data-src=\"image005.png\" alt=\"\" /></p>\n<p>低二十一位是对齐用的，所以每一页为 2^21=2MB。</p>\n<p>PAT 位：页属性表<br />\n只有当 PS=1 时，PAT 位才是有意义的（页属性表只针对页）<br />\n具体含义用到时再查资吧。</p>\n<p>注意：</p>\n<blockquote>\n<p>G 位、PCD 位、PWT 位可以暂且不管。<br />\n其他属性位的含义在上面学习 PDPTE 时或在学习 10-10-12 分页的 PDE 与 PTE 时已经介绍，这里不再详述</p>\n</blockquote>\n<h1 id=\"pte\"><a class=\"anchor\" href=\"#pte\">#</a> PTE</h1>\n<p><img data-src=\"image006.png\" alt=\"\" /></p>\n<p>特别说明：</p>\n<blockquote>\n<p>PTE 中 35-12 是物理页基址，24 位，低 12 位补 0<br />\n 物理页基址 + 12 位的页内偏移指向具体数据</p>\n</blockquote>\n<h1 id=\"xd标志位amd中称为nx即no-excetion\"><a class=\"anchor\" href=\"#xd标志位amd中称为nx即no-excetion\">#</a> XD 标志位（AMD 中称为 NX, 即 No Excetion ）</h1>\n<p>PDE/PTE 结构</p>\n<p><img data-src=\"image007.png\" alt=\"\" /></p>\n<p>段的属性有可读、可写和可执行</p>\n<p>页的属性有可读、可写</p>\n<p>当 RET 执行返回的时候，如果我修改堆栈里面的数据指向一个我提前准备<br />\n好的数据（把数据当作代码来执行，漏洞都是依赖这点，比如 SQL 注入也是）</p>\n<p>所以，Intel 就做了硬件保护，做了一个不可执行位，XD=1 时。那么你的软件溢出<br />\n了也没有关系，即使你的 EIP 蹦到了危险的 “数据区”，也是不可以执行的！</p>\n<p>在 PAE 分页模式下，PDE 与 PTE 的最高位为 XD/NX 位.</p>\n<h1 id=\"实验\"><a class=\"anchor\" href=\"#实验\">#</a> 实验</h1>\n<h2 id=\"在2-9-9-12分页模式下寻找物理地址\"><a class=\"anchor\" href=\"#在2-9-9-12分页模式下寻找物理地址\">#</a> 在 2-9-9-12 分页模式下寻找物理地址</h2>\n<p>老办法利用 CE 查找</p>\n<p><img data-src=\"image008.png\" alt=\"\" /></p>\n<p>按照 2-9-9-12 拆分 <code>000B1C18</code></p>\n<p>00<br />\n0 0000 0000<br />\n0 1011 0001</p>\n<p>2-9-9-12: <code>0-0-B1-C18</code></p>\n<p>在 windbg 中查找</p>\n<p>其中 notepad.exe 的 CR3 为： <code>0aac01a0</code></p>\n<p>在 windbg 中执行：<br />\n <code>!dq 0aac01a0</code></p>\n<p><img data-src=\"image009.png\" alt=\"\" /></p>\n<p><code>!dq 2bdcd000</code></p>\n<p><img data-src=\"image010.png\" alt=\"\" /></p>\n<p><code>!dq 2bdc8000 + b1*8</code></p>\n<p><img data-src=\"image011.png\" alt=\"\" /></p>\n<p><code>!db 2be1f000 + C18</code></p>\n<p><img data-src=\"image012.png\" alt=\"\" /></p>\n<h2 id=\"给0地址挂物理页\"><a class=\"anchor\" href=\"#给0地址挂物理页\">#</a> 给 0 地址挂物理页</h2>\n<p>代码</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a Value Adress:%p\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token number\">0x666</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"p Value;%x\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>程序的 CR3： <code>0aac02c0</code></p>\n<p>直接用 <code>!vtop</code>  命令了，不在手动拆分了。</p>\n<p>0 和 0012ff54 地址对应的 PDPE、PDE、PTE</p>\n<p><img data-src=\"image013.png\" alt=\"\" /></p>\n<p>这里就把 0 地址 PTE 指向的物理页修改为变量 aPTE 指向的物理页了。</p>\n<p><img data-src=\"image014.png\" alt=\"\" /></p>\n<p>没有！eq 命令，这里要用！ed, 注意地址在内存中的排序。</p>\n<p><code>!ed ac168000 acdb2867</code> <br />\n <code>!ed ac168004 80000000</code></p>\n<p><img data-src=\"image014.png\" alt=\"\" /></p>\n<p>成功！</p>\n<h2 id=\"逆向分析mmisaddressvalid函数2-9-9-12\"><a class=\"anchor\" href=\"#逆向分析mmisaddressvalid函数2-9-9-12\">#</a> 逆向分析 MmIsAddressValid 函数 (2-9-9-12)</h2>\n<p><img data-src=\"image015.png\" alt=\"\" /></p>\n<ul>\n<li>\n<p>学习操作系统是如何判断线性地址有效的。</p>\n</li>\n<li>\n<p>学习操作系统是如何找到 PDE、PTE 的，与之相关的汇编代码我们可以用到。也可以把汇编转成 C。</p>\n</li>\n</ul>\n<pre><code>mov     eax, VirtualAddress;\nshr     eax, 12h        ; 右移18位，相当于右移21位取PDI,然后乘以8，即再左移3位。\nand     eax, 3FF8h        ; 与操作，取 eax = PDPTI * 4KB + PDI * 8\nsub     eax, 3FA00000h  ; eax = C0600000 + PDPTI * 4KB + PDI * 8\n\t\t\t\t\t\t; eax 指向了 PDE\n</code></pre>\n<pre><code>mov     ecx, VirtualAddress;\nshr     ecx, 9          ; 相当于右移12位，然后乘以8\nand     ecx, 7FFFF8h    ; ecx = PDPTI * 2MB + PDI * 4KB + PTI * 8\nsub     ecx, 40000000h  ; ecx = C0000000 + PDPTI * 2MB + PDI * 4KB + PTI * 8\n\t\t                ; ecx 指向 PTE\n</code></pre>\n<h3 id=\"内存中的2-9-9-12分页结构图\"><a class=\"anchor\" href=\"#内存中的2-9-9-12分页结构图\">#</a> 内存中的 2-9-9-12 分页结构图</h3>\n<p>由 <strong>逆向分析 MmIsAddressValid 函数 (2-9-9-12)</strong> 可以联想到内存中的 2-9-9-12 分页结构图</p>\n<p><img data-src=\"image016.png\" alt=\"\" /></p>\n<p>总结如下:\t<br />\n1. 第三个 PDPTE 指向了一个 PDT 表，此表的前四项 指向了 PDPTE 的每一个元素<br />\n 2. 根据计算 C0600000 的最大索引，不会超过 C0604000</p>\n<pre><code class=\"language-asm\">\t \t\t\t\t\t\t\t\t\t\t\t\t mov     edi, edi\n\t.text:0043C92A 55                                push    ebp\n\t.text:0043C92B 8B EC                             mov     ebp, esp\n\t.text:0043C92D 51                                push    ecx\n\t.text:0043C92E 51                                push    ecx\n\t.text:0043C92F 8B 4D 08                          mov     ecx, [ebp+VirtualAddress]\n\t.text:0043C932 56                                push    esi\n\t.text:0043C933 8B C1                             mov     eax, ecx\n\t.text:0043C935 C1 E8 12                          shr     eax, 12h\n\t.text:0043C938 BE F8 3F 00 00                    mov     esi, 3FF8h\n\t.text:0043C93D 23 C6                             and     eax, esi\n\t.text:0043C93F 2D 00 00 A0 3F                    sub     eax, 3FA00000h\n</code></pre>\n<p><code>线性地址 &gt;&gt;18 +C0600000</code>  也就是说。得出的索引是 <code>2^14</code> ，最大值 <code>4000H</code>  实际应用从 0 开始，也就是  <code>4000H-(1*8byte)</code> <br />\n 那么得到最后一个 PDE 也就是 <code>C06003FFE8</code></p>\n<p>由此可推出</p>\n<blockquote>\n<p>C0600000 是第一个 PDT 表的首地址<br />\n C0601000 是第二个 PDT 表的首地址<br />\n C0602000 是第三个 PDT 表的首地址<br />\n C0603000 是第四个 PDT 表的首地址</p>\n</blockquote>\n<p>2-9-9-12 分页下</p>\n<p>总结进程的 0xC06000000-0xC0603000 线性地址对应的物理页分别存储第一个 PDT 表到第 4 个 PDT 表</p>\n<p>而通过当前进程 CR3 指向 PDPT 表只有四项，每项指向一 PDT 表基址</p>\n<p>第一个 PDT 表可以寻址 0x00000000-0x3FFFFFFF           这个 PDT 表映射的线性地址是 0xC0600000</p>\n<p>第二个 PDT 表可以寻址 0x40000000-0x7FFFFFFF           这个 PDT 表映射的线性地址是 0xC0601000</p>\n<p>第三个 PDT 表可以寻址 0x80000000-0xBFFFFFFF           这个 PDT 表映射的线性地址是 0xC0602000</p>\n<p>第四个 PDT 表可以寻址 0xC0000000-0xFFFFFFFF          这个 PDT 表映射的线性地址是 0xC0603000</p>\n<p>注意的是仔细看上面第 0xC0600000 地址拆分的时候可以看到这个线性地址对应物理页既是的 PDT 表有是 PTT 表</p>\n<p>本来就是 2-9-9-12PTT 表有  4KB*512*4=8M 线性地址存储，还有 4 个 PDT，这四个 PDT 存储在 0xC0600000-0xC0603000</p>\n<p>这个四个 PDT 表都既是 PDT 也是 PTT 表，否则 8M 的内存是不够的</p>\n<p>具体内容参考原文，链接为：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Rhb2xhb2Rhd2hvL2FydGljbGUvZGV0YWlscy8xMDkxODM4ODM=\">https://blog.csdn.net/taolaodawho/article/details/109183883</span></p>\n<h2 id=\"测试xd位\"><a class=\"anchor\" href=\"#测试xd位\">#</a> 测试 XD 位</h2>\n<p>CPU 可读 可写 可执行判断</p>\n<p>可读 可写的判断</p>\n<blockquote>\n<p>mov eax,ebx</p>\n</blockquote>\n<p>ebx 就是要进行可读判断 eax 进行可写判断</p>\n<blockquote>\n<p>jmp 0x12345678 // 可以修改 EIP 的指令都会进行可执行判断</p>\n</blockquote>\n<p>可执行判断，如果 PDE PTE 其中任何一个的最高位是 1 那么这个指令就会执行失败。</p>\n<p>代码转自<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0t3YW5zeS9hcnRpY2xlL2RldGFpbHMvMTA4OTY1MTk2\"> https://blog.csdn.net/Kwansy/article/details/108965196</span></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;Windows.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>buff<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>DWORD <span class=\"token operator\">*</span><span class=\"token function\">GetPDE</span><span class=\"token punctuation\">(</span>DWORD addr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xc0600000</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>addr <span class=\"token operator\">>></span> <span class=\"token number\">18</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x3ff8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token comment\">//DWORD PDPTI = addr >> 30;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token comment\">//DWORD PDI = (addr >> 21) &amp; 0x000001FF;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token comment\">//DWORD PTI = (addr >> 12) &amp; 0x000001FF;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token comment\">//return (DWORD *)(0xC0600000 + PDPTI * 0x1000 + PDI * 8);</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>DWORD <span class=\"token operator\">*</span><span class=\"token function\">GetPTE</span><span class=\"token punctuation\">(</span>DWORD addr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xc0000000</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>addr <span class=\"token operator\">>></span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x7ffff8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token comment\">//DWORD PDPTI = addr >> 30;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token comment\">//DWORD PDI = (addr >> 21) &amp; 0x000001FF;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token comment\">//DWORD PTI = (addr >> 12) &amp; 0x000001FF;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token comment\">//return (DWORD *)(0xC0000000 + PDPTI * 0x200000 + PDI * 0x1000 + PTI * 8);</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">__declspec</span><span class=\"token punctuation\">(</span>naked<span class=\"token punctuation\">)</span> <span class=\"token function\">R0Function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t__asm</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\tpush ebp</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t\tmov ebp<span class=\"token punctuation\">,</span>esp</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t\tsub esp<span class=\"token punctuation\">,</span><span class=\"token number\">0x1000</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t\tpushad</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t\tpushfd\t\t</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t__asm push fs</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token comment\">//__asm int 3</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token comment\">// 修改 buff 的 XD 位</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token function\">GetPDE</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>buff<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|=</span> <span class=\"token number\">0x80000000</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token function\">GetPTE</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>buff<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|=</span> <span class=\"token number\">0x80000000</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t<span class=\"token comment\">//__asm int 3</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t__asm pop fs</pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t__asm</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\tpopfd</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\t\tpopad</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t\t\tadd esp<span class=\"token punctuation\">,</span><span class=\"token number\">0x1000</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t\t\tmov esp<span class=\"token punctuation\">,</span>ebp</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t\t\tpop ebp</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t\t\tiretd</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\tDWORD dwEAX <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\tBYTE bytecode <span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0x90</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xB8</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x01</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xC3</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// NOP, MOV EAX,1, RET</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t<span class=\"token keyword\">int</span> xd<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t<span class=\"token comment\">// 申请一个内存页，写入硬编码</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\tbuff <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">VirtualAlloc</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x1000</span><span class=\"token punctuation\">,</span>MEM_COMMIT<span class=\"token punctuation\">,</span>PAGE_EXECUTE_READWRITE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"buff: %p\\n\"</span><span class=\"token punctuation\">,</span> buff<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t<span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>buff<span class=\"token punctuation\">,</span>bytecode<span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t<span class=\"token comment\">// 测试，对比 XD=0 和 XD=1 的运行结果</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输入XD位：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>xd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输入 0 可以调用，输入 1 调用失败</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\t<span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>xd <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"在IDT表构建中断门，请在windbg中执行下面的指令：\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"eq 8003f500 %04xee00`0008%04x\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>R0Function<span class=\"token operator\">>></span><span class=\"token number\">16</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>R0Function <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x0000FFFF</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>\t\t<span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>\t\t__asm <span class=\"token keyword\">int</span> <span class=\"token number\">0x20</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"XD位修改成功，buff不可执行.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>\t__asm</pre></td></tr><tr><td data-num=\"78\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>\t\t\tpush eax</pre></td></tr><tr><td data-num=\"80\"></td><td><pre>\t\t\txor eax<span class=\"token punctuation\">,</span>eax</pre></td></tr><tr><td data-num=\"81\"></td><td><pre>\t\t\tcall buff</pre></td></tr><tr><td data-num=\"82\"></td><td><pre>\t\t\tmov dwEAX<span class=\"token punctuation\">,</span>eax</pre></td></tr><tr><td data-num=\"83\"></td><td><pre>\t\t\tpop eax</pre></td></tr><tr><td data-num=\"84\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dwEAX <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"调用失败.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dwEAX <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"调用成功.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bye!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>\t<span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>如果将 XD 修改为 1，那么执行 CALL 会失败，程序会卡死。</p>\n<p><img data-src=\"image018.png\" alt=\"\" /></p>\n<p>如果 XD=0，就是默认情况了，可以正常调用函数并返回。</p>\n<p><img data-src=\"image019.png\" alt=\"\" /></p>\n<h1 id=\"windbg中查看0xc0000000与0xc0600000\"><a class=\"anchor\" href=\"#windbg中查看0xc0000000与0xc0600000\">#</a> windbg 中查看 0xC0000000 与 0xC0600000</h1>\n<p>其中 <code>0aac0300</code>  是 CR3。<br />\n <code>!vtop 0aac0300</code>  查看 0 地址的分页</p>\n<p><img data-src=\"image020.png\" alt=\"\" /></p>\n<p>可以发现这两个地址的特殊性， <code>0xC0600000</code>  所在的物理页既是 PDE 也是 PTE 还是物理页， <code>0xC0000000</code>  所在的物理页既是 PTE 还是物理页。</p>\n<p><img data-src=\"image021.png\" alt=\"\" /></p>\n<p><code>0xC0600000</code>  所在的物理页是 0 地址的 PDE</p>\n<p><img data-src=\"image022.png\" alt=\"\" /></p>\n<p><code>0xC0000000</code>  所在的物理页是 0 地址的 PTE</p>\n<h1 id=\"reference\"><a class=\"anchor\" href=\"#reference\">#</a> Reference</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0t3YW5zeS9hcnRpY2xlL2RldGFpbHMvMTA4OTU2OTcx\">https://blog.csdn.net/Kwansy/article/details/108956971</span><br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxOTg4NDQ4L2FydGljbGUvZGV0YWlscy8xMDI3MDk0NzA=\">https://blog.csdn.net/qq_41988448/article/details/102709470</span><br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0t3YW5zeS9hcnRpY2xlL2RldGFpbHMvMTA4OTY1MTk2\">https://blog.csdn.net/Kwansy/article/details/108965196</span><br />\n 页机制和 2-9-9-12 分页线性地址页表之间的映射关系<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Rhb2xhb2Rhd2hvL2FydGljbGUvZGV0YWlscy8xMDkxODM4ODM=\"> https://blog.csdn.net/taolaodawho/article/details/109183883</span></p>\n",
            "tags": [
                "2-9-9-12分页",
                "PAE",
                "PDPTE",
                "PDE",
                "PTE",
                "XD标志位",
                "逆向分析MmIsAddressValid函数(2-9-9-12)"
            ]
        },
        {
            "id": "https://or0kit.github.io/Bin/Core/WindowsXp/Protect-Mode/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F-%E9%80%86%E5%90%91%E5%88%86%E6%9E%90MmIsAddressValid%E5%87%BD%E6%95%B0-10-10-12/",
            "url": "https://or0kit.github.io/Bin/Core/WindowsXp/Protect-Mode/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F-%E9%80%86%E5%90%91%E5%88%86%E6%9E%90MmIsAddressValid%E5%87%BD%E6%95%B0-10-10-12/",
            "title": "保护模式-逆向分析MmIsAddressValid函数(10-10-12)",
            "date_published": "2021-08-30T06:17:30.000Z",
            "content_html": "<h1 id=\"逆向分析mmisaddressvalid函数\"><a class=\"anchor\" href=\"#逆向分析mmisaddressvalid函数\">#</a> 逆向分析 MmIsAddressValid 函数</h1>\n<h2 id=\"找到-mmisaddressvalid-函数\"><a class=\"anchor\" href=\"#找到-mmisaddressvalid-函数\">#</a> 找到 MmIsAddressValid 函数</h2>\n<p>方法一：在 windbg 中输入  <code>u MmIsAddressValid l1A</code></p>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<p>方法二：在 c:\\windows\\system32\\ 中找到内核程序，用 IDA 分析。</p>\n<p>ntkrnlpa.exe 2-9-9-12 分页内核<br />\n ntoskrnl.exe 10-10-12 分页内核</p>\n<p>打开 ntoskrnl.exe 后，加载 pdb 文件，即可查看函数名称。</p>\n<p><img data-src=\"image002.png\" alt=\"\" /></p>\n<h2 id=\"分析代码\"><a class=\"anchor\" href=\"#分析代码\">#</a> 分析代码</h2>\n<p>分析前，先聊聊函数头的 MOV EDI,EDI 指令。这条指令看起来什么也没做，但是很多系统函数开头都有这条指令，why？其实这是为了实现对函数行为的动态修改（热补丁），可以一下这篇文章 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N3YW5hYmluL2FydGljbGUvZGV0YWlscy8xNzU1MDg5Nw==\">函数开始处的 MOV EDI, EDI 的作用</span></p>\n<p><img data-src=\"image003.png\" alt=\"\" /></p>\n<p>函数主要是检测 P 位是否有效。<br />\nPAT 还没学，就不多逆了。</p>\n<h2 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h2>\n<p>学习操作系统的汇编算法。</p>\n<h1 id=\"reference\"><a class=\"anchor\" href=\"#reference\">#</a> Reference</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0t3YW5zeS9hcnRpY2xlL2RldGFpbHMvMTA4OTQ1MDY4\">https://blog.csdn.net/Kwansy/article/details/108945068</span></p>\n",
            "tags": [
                "逆向分析MmIsAddressValid函数"
            ]
        },
        {
            "id": "https://or0kit.github.io/Bin/Core/WindowsXp/Protect-Mode/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F-%E6%89%A9%E5%B1%95-%E4%BD%BF%E7%94%A8LDT/",
            "url": "https://or0kit.github.io/Bin/Core/WindowsXp/Protect-Mode/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F-%E6%89%A9%E5%B1%95-%E4%BD%BF%E7%94%A8LDT/",
            "title": "保护模式-扩展-使用LDT",
            "date_published": "2021-08-29T07:24:10.000Z",
            "content_html": "<h1 id=\"楔子\"><a class=\"anchor\" href=\"#楔子\">#</a> 楔子</h1>\n<p>野路子出身，之前一直没看懂火哥的使用 LDT 的代码，看了看《x86/x64 体系探索及编程》研究了一下。</p>\n<h2 id=\"ldt\"><a class=\"anchor\" href=\"#ldt\">#</a> LDT</h2>\n<p>Local Descriptor Table 是其中的一个描述符表，LDT 由 LDTR 的 base 域进行定位。</p>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<p>LDTR 的结构与段寄存器的结构是完全一致的，包括：base、limit、attribute 域，以及 selector 域，base、limit 和 atribute 组成 LDTR 的 Cache 部分，也是隐藏不可见的。像段寄存器一样，LDTR 需要使用 LDT 描述符进行加载，LDT 描述符只能存放在 GDT 中。 <strong>32 位的 LDTR.base 值能让 LDT 定位在 4G 的线性地址空间任何位置。</strong> 在 64 位模式下，LDTR.base 被扩展为 64 位。</p>\n<h2 id=\"ldt描述符\"><a class=\"anchor\" href=\"#ldt描述符\">#</a> LDT 描述符</h2>\n<p>LDT 描述符属于系统级的描述符，它的结构与 TSS 完全一致。</p>\n<p><img data-src=\"image002.png\" alt=\"\" /></p>\n<p>LDT 描述符的类型是 0x02，S 标志位为 0 值，表示属于一个 system 描述符。</p>\n<h2 id=\"ldtr的加载\"><a class=\"anchor\" href=\"#ldtr的加载\">#</a> LDTR 的加载</h2>\n<p>系统使用 LLDT 指令进行显式加载，或在进行任务切换时隐式地从 TSS 段里加载。</p>\n<p><code>mov ax, LDT_SEL ; LDT selector</code> <br />\n <code>lldt ax </code></p>\n<p><span class=\"label primary\">lldt 指令执行在 0 级权限里。处理器会检查以下内容:</span></p>\n<blockquote>\n<p><strong>selector 检查</strong></p>\n</blockquote>\n<blockquote>\n<p>对 selector 检查两个方面。</p>\n<ul>\n<li>如果提供的 selector 是 Null selector，则会产生 #GP 异常。</li>\n<li>如果 selector.TI=1，表示在 LDT 里，将产生 #GP 异常。</li>\n</ul>\n</blockquote>\n<blockquote>\n<p><strong>limit 检查</strong></p>\n</blockquote>\n<blockquote>\n<p>selector 是否超出 GDT limit 值。也就是 0x3ff。</p>\n</blockquote>\n<blockquote>\n<p><strong>LDT 描述符类型检查</strong></p>\n</blockquote>\n<blockquote>\n<p>能被加载到 LDTR 里的描述符必须如下。</p>\n<ul>\n<li>s 标志为 0，属于 system 描述符。</li>\n<li>P 标志为 1，表示在内存中。</li>\n<li>Type 值为 0x02，它是 LDT 描述符。</li>\n</ul>\n</blockquote>\n<h2 id=\"构ldt造段描述符\"><a class=\"anchor\" href=\"#构ldt造段描述符\">#</a> 构 LDT 造段描述符</h2>\n<p>让 base=0x00000000，limit=0x3ff。<br />\nLDT 段描述符： <code>0000e200`000003ff</code></p>\n<h2 id=\"实验\"><a class=\"anchor\" href=\"#实验\">#</a> 实验</h2>\n<p>知道了理论我们来实际使用一下。</p>\n<p>火哥说把权限转移到 LDT 表中，写保护时别人很难检测…… 小白不懂，扩展一下思路。</p>\n<p><span class=\"label primary\">这里有一个小细节需要注意:</span></p>\n<p><img data-src=\"image003.png\" alt=\"\" /></p>\n<p>其中红色箭头所指的内容，才是数据在计算机中的真实样子，其余的几种是 windbg 以数据宽度排好显示的。构建段描述符时要注意。<br />\n这是大端序、小段序排列的原因。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> dwLDT<span class=\"token punctuation\">[</span><span class=\"token number\">0x3ff</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 这里为什么用 6 个字节存储 GDT 的地址我也不清楚</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> GDTAddress<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token function\">__declspec</span><span class=\"token punctuation\">(</span>naked<span class=\"token punctuation\">)</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t__asm <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\tpushad<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\tpushfd<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t<span class=\"token comment\">// 取 GDT 表的地址</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\tlea eax<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>GDTAddress <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\tmov eax<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>eax<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t<span class=\"token comment\">//eax = 8003f090</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\tlea eax<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>eax <span class=\"token operator\">+</span> <span class=\"token number\">0x90</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t<span class=\"token comment\">// 取定义的 dwLDT 的地址 本程序中是 0X00417138，ecx = 00417138</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\tlea ecx<span class=\"token punctuation\">,</span> dwLDT<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t<span class=\"token comment\">// 将 7138 放进 ebx 的低 16 位中，bx =  7138</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\tmov bx<span class=\"token punctuation\">,</span> cx<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t<span class=\"token comment\">// 左移 16 位，将 7138 放进 ebx 的高 16 位中 ebx = 71380000</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\tshl ebx<span class=\"token punctuation\">,</span> <span class=\"token number\">0x10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t<span class=\"token comment\">// 把 0x03ff 放进 ebx 的低 16 位中，此时 ebx 的值为 0x713803ff</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\tmov bx<span class=\"token punctuation\">,</span> <span class=\"token number\">0x03ff</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t<span class=\"token comment\">// 给地址为 0x8003f090 内存空间赋值为： ff 03 38 71 </span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\tmov dword ptr ds <span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>eax<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">,</span> ebx<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t<span class=\"token comment\">//eax 的值为 0x8003f094</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\tlea eax<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>eax <span class=\"token operator\">+</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t<span class=\"token comment\">// 右移 16 位，ecx 的值为 0x00000041</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\tshr ecx<span class=\"token punctuation\">,</span> <span class=\"token number\">0x10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\t<span class=\"token comment\">// 给地址为 0x8003f094 内存赋值为 0x41</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\tmov byte ptr ds <span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>eax<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">,</span> cl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\t<span class=\"token comment\">// 给地址为 0x8003f095 内存赋值为 0x00e2</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\tmov word ptr ds <span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>eax <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0x00e2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\t<span class=\"token comment\">// 给地址为 0x8003f097 内存赋值为 0x</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\tmov byte ptr ds <span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>eax <span class=\"token operator\">+</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">,</span> ch<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\t<span class=\"token comment\">// 加载 LDT，使 LDTR 装载 LDT 选择子</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\tmov ax<span class=\"token punctuation\">,</span> <span class=\"token number\">0x93</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\tlldt ax<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\tpopfd<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\tpopad<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t\tretf<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> Selector<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x48</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 准备调用门提权</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> cLdtr <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t<span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b=%d\\n\"</span><span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>dwLDT <span class=\"token operator\">+</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x0000ffff</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>dwLDT <span class=\"token operator\">+</span> <span class=\"token number\">0xc</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00cff300</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"windbg execute eq 8003f048 %04xec00`0008%04x\\n\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t\t<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>Func <span class=\"token operator\">>></span> <span class=\"token number\">0x10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xffff</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t\t<span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>Func <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xffff</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"dwLDT Address:%#010X\\n\"</span><span class=\"token punctuation\">,</span> dwLDT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t<span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t__asm <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t\tsgdt GDTAddress<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t\tpush fs<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t\tcall fword ptr Selector<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\t\tsldt cLdtr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>\t\tpop fs<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\t\tmov ax<span class=\"token punctuation\">,</span> <span class=\"token number\">0x0f</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\t\tmov ds<span class=\"token punctuation\">,</span> ax<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\t\tmov eax<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\t\tmov b<span class=\"token punctuation\">,</span> eax<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b=%d\\n\"</span><span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\t<span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>调试过程中的截图</p>\n<p>程序执行完 <code>mov dword ptr ds : [eax] , ebx</code>  后，各寄存器的值与内存中 <code>0x8003f090</code>  处的数据</p>\n<p><img data-src=\"image004.png\" alt=\"\" /></p>\n<p>成功执行</p>\n<p><img data-src=\"image005.png\" alt=\"\" /></p>\n<p>修改一下 LDT 表中段描述符的 DPL<br />\n <code>*((unsigned int*)(dwLDT + 0xc)) = 0x00cff300;</code></p>\n<p>==&gt;&gt;</p>\n<p><code>*((unsigned int*)(dwLDT + 0xc)) = 0x00cf9300;</code></p>\n<p>执行结果：</p>\n<p><img data-src=\"image006.png\" alt=\"\" /></p>\n<p>权限异常。</p>\n<p>实验结束！</p>\n",
            "tags": [
                "LDT段描述符",
                "LDT"
            ]
        },
        {
            "id": "https://or0kit.github.io/Bin/Core/WindowsXp/Protect-Mode/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F-%E9%A1%B5%E7%9B%AE%E5%BD%95%E8%A1%A8%E4%B8%8E%E9%A1%B5%E8%A1%A8%E7%9A%84%E5%9F%BA%E5%9D%80/",
            "url": "https://or0kit.github.io/Bin/Core/WindowsXp/Protect-Mode/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F-%E9%A1%B5%E7%9B%AE%E5%BD%95%E8%A1%A8%E4%B8%8E%E9%A1%B5%E8%A1%A8%E7%9A%84%E5%9F%BA%E5%9D%80/",
            "title": "保护模式-页目录表与页表的基址",
            "date_published": "2021-08-29T06:16:49.000Z",
            "content_html": "<h1 id=\"楔子\"><a class=\"anchor\" href=\"#楔子\">#</a> 楔子</h1>\n<p>如果我们想填充 PDE 与 PTE，那么必须能够访问 PDT 与 PTT，这样就存在 2 个问题：</p>\n<ol>\n<li>一定已经有 “人” 为我们访问 PDT 与 PTT 挂好了 PDE 与 PTE, 我们只用找到这个线性地址就可以了</li>\n<li>这个为我们挂好 PDE 与 PTE 的 “人” 是谁？</li>\n</ol>\n<p>注意：<br />\nCR3 中存储的是物理地址，不能在程序中直接读取的。如果想读取，也要把 Cr3 的值挂到 PDT 和 PTT 中才能访问，那么怎么通过线性地址访问 PDT 和 PTT 呢？</p>\n<h1 id=\"页目录表基址\"><a class=\"anchor\" href=\"#页目录表基址\">#</a> 页目录表基址</h1>\n<p>页目录表基址 = 线性地址： <code>C0300000</code></p>\n<h2 id=\"实验拆分线性地址c0300000并查看其对应的物理页\"><a class=\"anchor\" href=\"#实验拆分线性地址c0300000并查看其对应的物理页\">#</a> 实验：拆分线性地址 C0300000，并查看其对应的物理页</h2>\n<p>随便使用某个程序的 CR3，访问线性地址 <code>C0300000</code>  的物理地址。</p>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<p>可以发现 <code>C0300000</code>  的物理页内容与 PDT 表完全相同。</p>\n<p><strong>实验总结</strong></p>\n<ul>\n<li>线性地址 C0300000 对应的物理页就是页目录表</li>\n<li>这个物理页即页目录表本身也是页表</li>\n<li>这个物理页是一张特殊的页表，每一项 PTE 指向的不是普通的物理页，而是指向其它的页表</li>\n<li>访问页目录表的公式：C0300000 + PDI*4（I=index）</li>\n</ul>\n<p>页目录表基址 (XP 系统 10-10-12 分页模式)</p>\n<p><img data-src=\"image002.png\" alt=\"\" /></p>\n<h1 id=\"页表基址\"><a class=\"anchor\" href=\"#页表基址\">#</a> 页表基址</h1>\n<p>页表基址 = 线性地址： <code>C0000000</code></p>\n<h2 id=\"实验拆分线性地址c0000000并查看其对应的物理页\"><a class=\"anchor\" href=\"#实验拆分线性地址c0000000并查看其对应的物理页\">#</a> 实验：拆分线性地址 C0000000，并查看其对应的物理页</h2>\n<p>随便使用某个程序的 CR3，访问线性地址 <code>C0000000</code>  的物理地址。</p>\n<p>查看第一个 PTE</p>\n<p><img data-src=\"image004.png\" alt=\"\" /></p>\n<p>可以发现 PTE 完全一样。</p>\n<p><img data-src=\"image003.png\" alt=\"\" /></p>\n<p>因为微软与新特尔协商，CR3 的值 + 0xC00 的的地址处存放的值还是 CR3 的值。所以访问线性地址 <code>C0000000</code>  就是找第一个 PTE 的地址。</p>\n<p><strong>实验总结</strong></p>\n<ul>\n<li>页表被映射到了从 0xC0000000~0xC03FFFFF 的 4M 地址空间</li>\n<li>在这 1024 个表中有一张特殊的表：页目录表，是第 0x300 张表。</li>\n<li>页目录被映射到了 0xC0300000 开始处的 4K 地址空间</li>\n<li>访问页表的公式：0xC0000000 + PDI*4096 + PTI*4（I=index）</li>\n</ul>\n<p>再看一遍这个图</p>\n<p><img data-src=\"image002.png\" alt=\"\" /></p>\n<h1 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h1>\n<p>有了 0xC0300000 和 0xC0000000 能做什么：</p>\n<p><strong>掌握了这两个地址，就掌握了一个进程所有的物理内存读写权限</strong></p>\n<p>公式总结：</p>\n<ol>\n<li>访问页目录表的公式：C0300000 + PDI*4（I=index）</li>\n<li>访问页表的公式：0xC0000000 + PDI*4096 + PTI*4（I=index）</li>\n</ol>\n<h2 id=\"实践\"><a class=\"anchor\" href=\"#实践\">#</a> 实践</h2>\n<p>理论知道了开始实践。</p>\n<h3 id=\"在0地址执行shellcode\"><a class=\"anchor\" href=\"#在0地址执行shellcode\">#</a> 在 0 地址执行 ShellCode</h3>\n<p>所需知识：</p>\n<ul>\n<li>内联汇编</li>\n<li>硬编码</li>\n<li>CPU 提权</li>\n<li>10-10-12 页表基址</li>\n</ul>\n<p>除了自己构造调用门描述符外，其他都代码实现。</p>\n<p>实际用途：火哥说的是写保护…… 小白也不懂，有些检测并不检测空指针赋值区和 64K 禁入区。</p>\n<p><img data-src=\"image005.png\" alt=\"\" /></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 在 0 地址挂载物理页并执行 ShellCode</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;Windows.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">char</span> ShellCode<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t\t<span class=\"token number\">0x6a</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t\t<span class=\"token number\">0x6a</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t\t<span class=\"token number\">0x6a</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t\t<span class=\"token number\">0x6a</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t\t<span class=\"token number\">0xe8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t\t<span class=\"token number\">0xc3</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">__declspec</span><span class=\"token punctuation\">(</span>naked<span class=\"token punctuation\">)</span> <span class=\"token function\">CallGate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t__asm</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\tpush <span class=\"token number\">0x30</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\tpop fs<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\tpushad<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\tpushfd<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\tlea eax<span class=\"token punctuation\">,</span>ShellCode<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\tmov ebx<span class=\"token punctuation\">,</span>dword ptr ds<span class=\"token operator\">:</span><span class=\"token punctuation\">[</span><span class=\"token number\">0xc0300000</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\ttest ebx<span class=\"token punctuation\">,</span>ebx<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\tje __gpPDE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\tshr eax<span class=\"token punctuation\">,</span><span class=\"token number\">12</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t<span class=\"token operator\">and</span> eax<span class=\"token punctuation\">,</span><span class=\"token number\">0xfffff</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\tshl eax<span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\tadd eax<span class=\"token punctuation\">,</span> <span class=\"token number\">0xc0000000</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\tmov eax<span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span>eax<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\tmov dword ptr ds<span class=\"token operator\">:</span><span class=\"token punctuation\">[</span><span class=\"token number\">0xc0000000</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>eax<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\tjmp __back<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>__gpPDE<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\tshr eax<span class=\"token punctuation\">,</span><span class=\"token number\">22</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\t<span class=\"token operator\">and</span> eax<span class=\"token punctuation\">,</span><span class=\"token number\">0x3ff</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\tshl eax<span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\tadd eax<span class=\"token punctuation\">,</span><span class=\"token number\">0xc0300000</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\tmov eax<span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span>eax<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\tmov dword ptr ds<span class=\"token operator\">:</span><span class=\"token punctuation\">[</span><span class=\"token number\">0xc0300000</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>eax<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>__back<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t\tpopfd<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t\tpopad<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t\tretf<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> FuncAddress <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>MessageBox<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t<span class=\"token keyword\">int</span> OFA <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>ShellCode<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xfff</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t<span class=\"token comment\">//Amendment EIP</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>ShellCode<span class=\"token punctuation\">[</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> FuncAddress <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span><span class=\"token number\">13</span> <span class=\"token operator\">+</span> OFA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t<span class=\"token keyword\">char</span> GateSegment<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x48</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MessageBox Address:%#010X\\nCallGate Address:%#010X\\nShellCode:%#010X\\n\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t\t   FuncAddress<span class=\"token punctuation\">,</span>CallGate<span class=\"token punctuation\">,</span>ShellCode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"windbg execute eq 8003f048 %04xec00`0008%04x\\n\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t\t   <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>CallGate<span class=\"token operator\">>></span><span class=\"token number\">0x10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xffff</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t\t   <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>CallGate <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xffff</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>\t<span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\t__asm</pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\t\tcall fword ptr ds<span class=\"token operator\">:</span><span class=\"token punctuation\">[</span>GateSegment<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>\t\tpush <span class=\"token number\">0x3b</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//R3 FS Value</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>\t\tpop fs<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\t\tmov eax<span class=\"token punctuation\">,</span>OFA<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>\t\tcall eax<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>\t<span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>成功！这个例子只是抛砖引玉，更多的还是需要自身区专研。</p>\n<p><img data-src=\"image006.png\" alt=\"\" /></p>\n<h1 id=\"reference\"><a class=\"anchor\" href=\"#reference\">#</a> Reference</h1>\n<p>滴水中级课程<br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxOTg4NDQ4L2FydGljbGUvZGV0YWlscy8xMDI2NTI3NzY=\"> https://blog.csdn.net/qq_41988448/article/details/102652776</span></p>\n",
            "tags": [
                "页目录表基址",
                "页表的基址",
                "0地址执行ShellCode"
            ]
        },
        {
            "id": "https://or0kit.github.io/Bin/Core/WindowsXp/Protect-Mode/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%E2%80%94PDE-PTE/",
            "url": "https://or0kit.github.io/Bin/Core/WindowsXp/Protect-Mode/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%E2%80%94PDE-PTE/",
            "title": "保护模式—PDE_PTE",
            "date_published": "2021-08-25T08:51:04.000Z",
            "content_html": "<h1 id=\"10-10-12分页\"><a class=\"anchor\" href=\"#10-10-12分页\">#</a> 10-10-12 分页</h1>\n<blockquote>\n<p>一个物理页的大小为 4096 字节，即 2 的 12 次方，若要遍历整个物理页，则需要 12 个比特位<br />\n一个页表有 1024 个页表项，1024 等于 2 的十次方，即需要 10 个比特位<br />\n页目录表里有 1024 个页目录项，也需要 10 个比特位</p>\n</blockquote>\n<h1 id=\"cr3\"><a class=\"anchor\" href=\"#cr3\">#</a> CR3</h1>\n<blockquote>\n<p>在所有的寄存器中，只有 Cr3 存储的是物理地址，其它寄存器存的都是线性地址<br />\n Cr3 所存储的物理地址指向了一个页目录表（PDT）<br />\n在 Windows 中，一个页的大小通常为 4KB，即一个页可以存储 1024 个页目录表项（PDE）</p>\n</blockquote>\n<h1 id=\"pde与pte\"><a class=\"anchor\" href=\"#pde与pte\">#</a> PDE 与 PTE</h1>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<ul>\n<li><strong>PDE（页目录表项）</strong></li>\n</ul>\n<p>描述：</p>\n<blockquote>\n<p>页目录表（PDT）的每一项元素称为页目录表项（PDE）<br />\n每个页目录表项指向一个页表（PTT）<br />\n每个页表的大小为 4KB，即一个页表可以存储 1024 个页表项（PTE）</p>\n</blockquote>\n<ul>\n<li><strong>PTE（页表项）</strong></li>\n</ul>\n<p>描述：</p>\n<blockquote>\n<p>页表（PTT）的每一个元素称为页表项（PTE）<br />\n页表项（PTE）所指向的才是真正的物理页</p>\n</blockquote>\n<p>特征：</p>\n<ol>\n<li>PTE 可以指向一个物理页，也可以不指向物理页</li>\n<li>多个 PTE 可以指向同一个物理页</li>\n<li>一个 PTE 只能指向一个物理页</li>\n</ol>\n<h1 id=\"物理页的属性\"><a class=\"anchor\" href=\"#物理页的属性\">#</a> 物理页的属性</h1>\n<p>物理页的属性 = PDE 属性 &amp; PTE 属性</p>\n<p><img data-src=\"image002.png\" alt=\"\" /></p>\n<p><img data-src=\"image003.png\" alt=\"\" /></p>\n<p><code>P位</code> ：是否有效位<br />\n注意：当 PDE 或 PTE 中有一个的属性 P=0 时，物理页就是无效的</p>\n<p><code>R/W位</code> ：读写位<br />\n R/W=0：只读<br />\n R/W=1：可读可写</p>\n<p><code>U/S位</code> ：权限位<br />\n U/S=0：特权用户<br />\n U/S=1：普通用户</p>\n<p><code>PS位</code> ：PDE 特有<br />\n PS == PageSize<br />\nPS=1：PDE 直接指向物理页，低 22 位 = 页内偏移，偏移最大值为 4MB，俗称 &quot;大页&quot;<br />\nPS=0：PDE 指向 PTE</p>\n<p><code>A位</code> ：访问位<br />\n A=1：该 PDE/PTE 被访问过<br />\n A=0：该 PDE/PTE 未被访问过</p>\n<p><code>D位</code> ：脏位<br />\n D=1：该 PDE/PTE 被写过<br />\n D=0：该 PDE/PTE 未被写过</p>\n<p><em><strong>关于 G 位，PWT 位，PCD 位，学完控制寄存器域 TLB 才能讲。</strong></em></p>\n<h1 id=\"实验\"><a class=\"anchor\" href=\"#实验\">#</a> 实验</h1>\n<h2 id=\"修改us位访问高2g内存\"><a class=\"anchor\" href=\"#修改us位访问高2g内存\">#</a> 修改 U/S 位访问高 2G 内存</h2>\n<p>之前学习段的时候，我们可以通过调用门，中断门，任务门等方式将 CPL 提升到 0，从而可以读写高 2G 内存。学习了 U/S 位后，我们可以不提权也能访问高 2G，只需要将想访问的物理页对应的 PDE PTE 的 U/S 位改写为 1 即可。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token number\">0x8003f020</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> addr <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"addr Linear Address:%#010X\\n10-10-12: %x-%x-%x\\n\"</span><span class=\"token punctuation\">,</span>addr<span class=\"token punctuation\">,</span>addr<span class=\"token operator\">>></span><span class=\"token number\">22</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span>addr<span class=\"token operator\">>></span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span><span class=\"token number\">0x3FF</span><span class=\"token punctuation\">,</span>addr<span class=\"token operator\">&amp;</span><span class=\"token number\">0xFFF</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Read High 2G Memory %#010X:%#010X\\n\"</span><span class=\"token punctuation\">,</span>addr<span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>查看 PDE 和 PTE</p>\n<p><img data-src=\"image004.png\" alt=\"\" /></p>\n<p>修改 U/S 位并查看是否修改成功</p>\n<p><img data-src=\"image005.png\" alt=\"\" /></p>\n<p>成功读取高 2G 内存的值</p>\n<p><img data-src=\"image006.png\" alt=\"\" /></p>\n<h2 id=\"ps位验证\"><a class=\"anchor\" href=\"#ps位验证\">#</a> PS 位验证</h2>\n<p>随便找一个进程的 CR3，看一下</p>\n<p><img data-src=\"image007.png\" alt=\"\" /></p>\n<p>CR3: 143d3000<br />\n10-10-12:50-3d3-0</p>\n<h2 id=\"通过修改页表使代码能在0地址处读写\"><a class=\"anchor\" href=\"#通过修改页表使代码能在0地址处读写\">#</a> 通过修改页表使代码能在 0 地址处读写</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> <span class=\"token number\">0x0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">0x12345678</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> addr <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a VirtualAddress:%#010X\\n10-10-12:%x-%x-%x\\n\\n\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>a<span class=\"token operator\">>></span><span class=\"token number\">22</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>a<span class=\"token operator\">>></span><span class=\"token number\">12</span><span class=\"token operator\">&amp;</span><span class=\"token number\">0x3FF</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>a<span class=\"token operator\">&amp;</span><span class=\"token number\">0xFFF</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"addr VirtualAddress:%#010X\\n10-10-12:%x-%x-%x\\n\\n\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\taddr<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\taddr<span class=\"token operator\">>></span><span class=\"token number\">22</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t<span class=\"token punctuation\">(</span>addr<span class=\"token operator\">>></span><span class=\"token number\">12</span><span class=\"token operator\">&amp;</span><span class=\"token number\">0x3FF</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\taddr<span class=\"token operator\">&amp;</span><span class=\"token number\">0xFFF</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Write 0x0 Address Data 0x666 *p=%#010X\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>p<span class=\"token operator\">=</span><span class=\"token number\">0x666</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>查看程序的 CR3，找到 a 变量的物理地址。</p>\n<p><img data-src=\"image008.png\" alt=\"\" /></p>\n<p>更改 0 地址的 PTE，使 0 地址的 PDE 指向变量 a 的 PTE。</p>\n<p><img data-src=\"image009.png\" alt=\"\" /></p>\n<p>结果：</p>\n<p><img data-src=\"image010.png\" alt=\"\" /></p>\n<h2 id=\"通过修改物理页属性使字符串常量可修改\"><a class=\"anchor\" href=\"#通过修改物理页属性使字符串常量可修改\">#</a> 通过修改物理页属性使字符串常量可修改</h2>\n<p>懒得做了，修改一下 <code>R/w</code>  位就行了</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>str <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello World\"</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 众所周知，C 语言中字符串是不能直接修改的。</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"线性地址：%x\"</span><span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t\t\t<span class=\"token comment\">// 让程序执行到这里</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token comment\">// 修改只读变量</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tstr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'M'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"修改后的值：%s\\n\"</span><span class=\"token punctuation\">,</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"reference\"><a class=\"anchor\" href=\"#reference\">#</a> Reference</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0t3YW5zeS9hcnRpY2xlL2RldGFpbHMvMTA4OTE0Mzkz\">https://blog.csdn.net/Kwansy/article/details/108914393</span><br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxOTg4NDQ4L2FydGljbGUvZGV0YWlscy8xMDI2MjcyMzk=\">https://blog.csdn.net/qq_41988448/article/details/102627239</span></p>\n",
            "tags": [
                "PDE_PTE",
                "物理页"
            ]
        },
        {
            "id": "https://or0kit.github.io/Bin/Core/WindowsXp/Protect-Mode/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%E2%80%9410-10-12%E5%88%86%E9%A1%B5/",
            "url": "https://or0kit.github.io/Bin/Core/WindowsXp/Protect-Mode/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%E2%80%9410-10-12%E5%88%86%E9%A1%B5/",
            "title": "保护模式—10-10-12分页",
            "date_published": "2021-08-25T08:50:39.000Z",
            "content_html": "<h1 id=\"正文\"><a class=\"anchor\" href=\"#正文\">#</a> 正文</h1>\n<p>进入页模式</p>\n<p>首先更改内核的分页模式</p>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<p><code>multi(0)disk(0)rdisk(0)partition(1)\\WINDOWS=&quot;XP[debug 10-10-12]&quot; /debug /debugport=com1 /execute=optin /fastdetect</code></p>\n<p>将 noexecute 改成 execute，就改为了 10-10-12 分页模式</p>\n<p>后面会学习 2-9-9-12 分页模式，默认的是 2-9-9-12 分页模式</p>\n<p><code>multi(0)disk(0)rdisk(0)partition(1)\\WINDOWS=&quot;XP[debug 2-9-9-12]&quot; /debug /debugport=com1 /noexecute=optin /fastdetect</code></p>\n<p><img data-src=\"image002.png\" alt=\"\" /></p>\n<h1 id=\"4gb内存\"><a class=\"anchor\" href=\"#4gb内存\">#</a> 4GB 内存</h1>\n<p>每一个进程都有 4GB 内存，一个程序的最大寻址范围 4GB 怎么来的？</p>\n<p>答案是 PTE 的前 20 位 + 线性地址的最后 12 位得到的寻址范围（32 位）就是 4GB</p>\n<h1 id=\"线性地址-有效地址-物理地址\"><a class=\"anchor\" href=\"#线性地址-有效地址-物理地址\">#</a> 线性地址、有效地址、物理地址</h1>\n<p>如下指令：</p>\n<p>MOV eax,dword ptr ds:[0x12345678]</p>\n<p>其中，0x12345678 是有效地址</p>\n<p>ds.Base + 0x12345678 是线性地址</p>\n<p>线性地址挂载在了物理地址上</p>\n<h1 id=\"cpu如何寻找到物理地址\"><a class=\"anchor\" href=\"#cpu如何寻找到物理地址\">#</a> CPU 如何寻找到物理地址</h1>\n<p>每个进程都有一个 CR3,(准确的说是都一个 CR3 的值，CR3 本身是<br />\n个寄存器，一个核，只有一套寄存器)<br />\n CR3 指向一个物理页，一共 4096 字节，如图：</p>\n<p><img data-src=\"image003.png\" alt=\"\" /></p>\n<h1 id=\"10-10-12\"><a class=\"anchor\" href=\"#10-10-12\">#</a> 10-10-12</h1>\n<p><img data-src=\"image004.png\" alt=\"\" /></p>\n<h2 id=\"实验寻找物理地址\"><a class=\"anchor\" href=\"#实验寻找物理地址\">#</a> 实验：寻找物理地址</h2>\n<p>创建一个 txt 程序并用 notepad.exe 打开，写入内容，CE 附加 notepad.exe 进程</p>\n<p><img data-src=\"image005.png\" alt=\"\" /></p>\n<p>附加后配置选项，进行内存扫描</p>\n<p><img data-src=\"image006.png\" alt=\"\" /></p>\n<p>改变 txt 中的内容再次扫描，直到确认地址</p>\n<p><img data-src=\"image007.png\" alt=\"\" /></p>\n<p>确认内存地址为 0x125800<br />\n 开始拆分地址</p>\n<p><img data-src=\"image008.png\" alt=\"\" /></p>\n<pre><code>00125800\n\n0000 0000 0001 0010 0101 1000 0000 0000\n\n用的时候要乘以4\n\n0000 0000 00 ---------------------------  0x0 * 4 = 0x0 \n\t    01 0010 0101  --------------  0x125 * 4 = 0x494\n\t\t\t1000 0000 0000 ---0x800\n</code></pre>\n<p>找那个进程的物理页，物理地址就看哪个进程的 CR3，这里查看 notepad.exe 的 CR3: <code>3c932000</code></p>\n<p><img data-src=\"image009.png\" alt=\"\" /></p>\n<p>突然虚拟机卡住了 windbg 也没用，这俩不知道怪谁。只能重启了，数据也都变了。后面的截图有些误差，重要的是流程。</p>\n<p>获得 cr3 后，在 windbg 中执行</p>\n<p>!dd cr3 + （拆分出来的第一个 10 的值乘以 4）</p>\n<p><code>!dd 3c932000 + 0</code></p>\n<p>重启虚拟机后获取的数据是这个</p>\n<pre><code>000B04B8\n\n10 0\n10 B0\n12 4B8\n</code></pre>\n<p><img data-src=\"image010.png\" alt=\"\" /></p>\n<p>获取第一个值并把后三位去掉变成 0</p>\n<p><img data-src=\"image011.png\" alt=\"\" /></p>\n<p>最后找到物理地址，查看一下</p>\n<p><img data-src=\"image012.png\" alt=\"\" /></p>\n<h1 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h1>\n<p>这节主要是对分页模式有个模糊的轮廓。</p>\n",
            "tags": [
                "10-10-12分页"
            ]
        },
        {
            "id": "https://or0kit.github.io/Bin/Core/WindowsXp/Protect-Mode/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F-%E4%BB%BB%E5%8A%A1%E9%97%A8/",
            "url": "https://or0kit.github.io/Bin/Core/WindowsXp/Protect-Mode/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F-%E4%BB%BB%E5%8A%A1%E9%97%A8/",
            "title": "保护模式-任务门",
            "date_published": "2021-08-13T06:40:49.000Z",
            "content_html": "<h1 id=\"要点回顾\"><a class=\"anchor\" href=\"#要点回顾\">#</a> 要点回顾：</h1>\n<p>在上一节中讲解了如何通过 CALL、JMP 指令访问任务段</p>\n<p>这一节课主要介绍如何通过任务门去访问任务段</p>\n<p>既然已经可以访问任务段了，那为什么还要有任务门呢？</p>\n<h1 id=\"任务门\"><a class=\"anchor\" href=\"#任务门\">#</a> 任务门</h1>\n<p>IDT 表可以包含 3 种门描述符：</p>\n<ul>\n<li>\n<p>任务门描述符</p>\n</li>\n<li>\n<p>中断门描述符</p>\n</li>\n<li>\n<p>陷阱门描述符</p>\n</li>\n</ul>\n<p>接下来我们学习任务门</p>\n<h2 id=\"任务门描述符\"><a class=\"anchor\" href=\"#任务门描述符\">#</a> 任务门描述符</h2>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<p>除了 TSS 描述符选择子以外， 其他位都是固定的。<br />\n我们在 <code>8003f048</code>  处设置 TSS 描述符，因此，任务门描述符的值可以确定： <code>0000e500`00480000</code></p>\n<h2 id=\"任务门执行过程\"><a class=\"anchor\" href=\"#任务门执行过程\">#</a> 任务门执行过程：</h2>\n<ol>\n<li>\n<p>INT N</p>\n</li>\n<li>\n<p>查 IDT 表，找到任务门描述符</p>\n</li>\n<li>\n<p>通过任务门描述符，查 GDT 表，找到 TSS 段描述符</p>\n</li>\n<li>\n<p>使用 TSS 段中的值修改 TR 寄存器</p>\n</li>\n<li>\n<p>IRETD 返回</p>\n</li>\n</ol>\n<h2 id=\"实验\"><a class=\"anchor\" href=\"#实验\">#</a> 实验</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;Windows.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>DWORD<span class=\"token operator\">*</span> TSS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>DWORD dwOk<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">__declspec</span><span class=\"token punctuation\">(</span>naked<span class=\"token punctuation\">)</span> <span class=\"token function\">TestFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tdwOk <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t__asm<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\tiretd</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tDWORD dwCr3<span class=\"token punctuation\">;</span> <span class=\"token comment\">//windbg 获取</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token keyword\">char</span> esp<span class=\"token punctuation\">[</span><span class=\"token number\">0x1000</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 任务切换后的栈</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\tTSS <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>DWORD<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">VirtualAlloc</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span><span class=\"token number\">104</span><span class=\"token punctuation\">,</span>MEM_COMMIT<span class=\"token punctuation\">,</span>PAGE_READWRITE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>TSS <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"VirtualAlloc 失败，%d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">GetLastError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t<span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请在windbg执行: eq 8003f048 %02x00e9%02x`%04x0068\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>TSS<span class=\"token operator\">>></span><span class=\"token number\">24</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x000000FF</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>TSS<span class=\"token operator\">>></span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x000000FF</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>WORD<span class=\"token punctuation\">)</span>TSS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请在windbg执行: eq 8003f500 0000e500`00480000\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请在windbg中执行!process 0 0，复制进程DirBase的值，并输入.\\nCR3: \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%x\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>dwCr3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Previous Task Link CPU 填充，表示上一个任务的选择子</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ESP0</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// SS0</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ESP1</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// SS1</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ESP2</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// SS2</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> dwCr3<span class=\"token punctuation\">;</span> <span class=\"token comment\">// CR3 学到页就知道是啥了</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>TestFunc<span class=\"token punctuation\">;</span> <span class=\"token comment\">// EIP</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// EFLAGS</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// EAX</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">11</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ECX</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">12</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// EDX</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">13</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// EBX</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">14</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>esp<span class=\"token operator\">+</span><span class=\"token number\">0x1000</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">15</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// EBP</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">16</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ESI</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">17</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// EDI</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">18</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ES</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">19</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000008</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// CS </span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000010</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// SS </span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">21</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// DS</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">22</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// FS </span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">23</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// GS</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">24</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// LDT Segment Selector</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">25</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x20ac0000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// I/O Map Base Address</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t__asm</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> <span class=\"token number\">0x20</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ok: %d\\n\"</span><span class=\"token punctuation\">,</span>dwOk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t<span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre></pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"image002.png\" alt=\"\" /></p>\n<h2 id=\"int-8-逆向分析\"><a class=\"anchor\" href=\"#int-8-逆向分析\">#</a> INT 8 逆向分析</h2>\n<p>看看操作系统是如何使用任务门的，但因为我太菜了，只能……</p>\n<p><strong>寻找 int 8 的代码</strong></p>\n<p>由 <code>INT 8</code>  查询 IDT 表中索引为 8 的段描述符</p>\n<p><img data-src=\"image003.png\" alt=\"\" /></p>\n<p>可以发现是任务们的描述符 <code>00008500`00501198</code></p>\n<p>其中 TSS 的段选择子为 <code>0050</code></p>\n<p>去 GDT 表中查询 TSS 段描述符</p>\n<p><img data-src=\"image004.png\" alt=\"\" /></p>\n<p>TSS 段描述符为 <code>80008955`87000068</code></p>\n<p>TSS 在内存中的地址为 <code>0x80558700</code></p>\n<p><img data-src=\"image005.png\" alt=\"\" /></p>\n<p>可以看到 TSS 的结束位: <code>0x000020ac</code></p>\n<p>EIP 为 <code>0x804e08a5</code></p>\n<p>查看 0x804e08a5 处函数的汇编代码</p>\n<p><img data-src=\"image006.png\" alt=\"\" /></p>\n<p>在火哥的视频中让逆向图中高亮的代码。</p>\n<pre><code class=\"language-汇编\">804e08a6 648b0d3c000000  mov     ecx,dword ptr fs:[3Ch]\n804e08ad 8d4150          lea     eax,[ecx+50h]\n804e08b0 c6400589        mov     byte ptr [eax+5],89h\n804e08b4 9c              pushfd\n804e08b5 812424ffbfffff  and     dword ptr [esp],0FFFFBFFFh\n804e08bc 9d              popfd\n804e08bd 64a13c000000    mov     eax,dword ptr fs:[0000003Ch]\n804e08c3 8a6857          mov     ch,byte ptr [eax+57h]\n804e08c6 8a4854          mov     cl,byte ptr [eax+54h]\n804e08c9 c1e110          shl     ecx,10h\n804e08cc 668b4852        mov     cx,word ptr [eax+52h]\n804e08d0 64a140000000    mov     eax,dword ptr fs:[00000040h]\n804e08d6 64890d40000000  mov     dword ptr fs:[40h],ecx\n</code></pre>\n<p><img data-src=\"image007.png\" alt=\"\" /></p>\n<p>这是火哥在视频中分析好的，我截图了。</p>\n<hr />\n<hr />\n<p>今天搜索 FS 寄存器的资料，发现了这里涉及了 FS 寄存器在 R0 和 R3 下的不同。</p>\n<p>具体参见<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3B5X3Bhbnl1L2FydGljbGUvZGV0YWlscy80NTAxMTUwNQ==\"> https://blog.csdn.net/py_panyu/article/details/45011505</span> 这篇博客，衷心感谢作者。</p>\n<p>当线程运行在 R0 下时，FS 指向的段是 GDT 中的 0x30 段。该段的长度也为 4K, 基地址为 0xFFDFF000. 该地址指向系统的处理器控制区域（KPCR）. 这个区域中保存这处理器相关的一些重要数据值，如 GDT、IDT 表的值等等.</p>\n<pre><code>kd&gt; dt _kpcr\nnt!_KPCR\n   +0x000 NtTib            : _NT_TIB\n   +0x01c SelfPcr          : Ptr32 _KPCR\n   +0x020 Prcb             : Ptr32 _KPRCB\n   +0x024 Irql             : UChar\n   +0x028 IRR              : Uint4B\n   +0x02c IrrActive        : Uint4B\n   +0x030 IDR              : Uint4B\n   +0x034 KdVersionBlock   : Ptr32 Void\n   +0x038 IDT              : Ptr32 _KIDTENTRY\n   +0x03c GDT              : Ptr32 _KGDTENTRY\n   +0x040 TSS              : Ptr32 _KTSS\n   +0x044 MajorVersion     : Uint2B\n   +0x046 MinorVersion     : Uint2B\n   +0x048 SetMember        : Uint4B\n   +0x04c StallScaleFactor : Uint4B\n   +0x050 DebugActive      : UChar\n   +0x051 Number           : UChar\n   +0x052 Spare0           : UChar\n   +0x053 SecondLevelCacheAssociativity : UChar\n   +0x054 VdmAlert         : Uint4B\n   +0x058 KernelReserved   : [14] Uint4B\n   +0x090 SecondLevelCacheSize : Uint4B\n   +0x094 HalReserved      : [16] Uint4B\n   +0x0d4 InterruptMode    : Uint4B\n   +0x0d8 Spare1           : UChar\n   +0x0dc KernelReserved2  : [17] Uint4B\n   +0x120 PrcbData         : _KPRCB\n</code></pre>\n<p>主要是学习操作系统的思路。编写操作系统的人，厉害 (๑・̀ㅂ・́)و✧</p>\n<h2 id=\"任务切换\"><a class=\"anchor\" href=\"#任务切换\">#</a> 任务切换</h2>\n<p>概述一下任务门进行任务切换的流程：</p>\n<ol>\n<li>\n<p>当中断发生时，处理器用中断号乘以 8（段描述符的大小为 8 个字节）作为索引访问中断描述符表。当它发现这是一个任务门描述符时，就知道应当发起任务切换。</p>\n</li>\n<li>\n<p>取出任务门描述符。</p>\n</li>\n<li>\n<p>从任务门描述符中取出新任务的 TSS 选择子；</p>\n</li>\n<li>\n<p>再用 TSS 选择子访问 GDT，取出新任务的 TSS 描述符</p>\n</li>\n<li>\n<p>到这里就和上一节用 TSS 切换任务一样了……TSS…… 切换寄存器……</p>\n</li>\n</ol>\n<p>最终任务寄存器 TR 指向新任务的 TSS，而处理器开始新任务的执行。</p>\n<p>一旦新任务开始执行，处理器固件会自动将其 TSS 描述符的 B 位置 1，表示该任务状态为忙。</p>\n<h1 id=\"reference\"><a class=\"anchor\" href=\"#reference\">#</a> Reference</h1>\n<p>任务门 --- 任务切换:<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3Mzc1NDI3L2FydGljbGUvZGV0YWlscy84NTA0NjU0Mw==\">https://blog.csdn.net/qq_37375427/article/details/85046543</span><br />\n 任务门<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0t3YW5zeS9hcnRpY2xlL2RldGFpbHMvMTA4ODk2OTg5\"> https://blog.csdn.net/Kwansy/article/details/108896989</span><br />\n 浅谈 FS 段寄存器在用户层和内核层的使用<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3B5X3Bhbnl1L2FydGljbGUvZGV0YWlscy80NTAxMTUwNQ==\"> https://blog.csdn.net/py_panyu/article/details/45011505</span></p>\n",
            "tags": [
                "任务门"
            ]
        },
        {
            "id": "https://or0kit.github.io/Bin/Core/WindowsXp/Protect-Mode/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F-%E4%BB%BB%E5%8A%A1%E6%AE%B5/",
            "url": "https://or0kit.github.io/Bin/Core/WindowsXp/Protect-Mode/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F-%E4%BB%BB%E5%8A%A1%E6%AE%B5/",
            "title": "保护模式-任务段",
            "date_published": "2021-08-13T06:40:43.000Z",
            "content_html": "<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<p>当权限发生发生改变时堆栈也会随之发生改变 (如：3 环进 0 环)，由于 CS 的 CPL 发生变化，导致了 SS 也必须切换。<br />\n堆栈段寄存器 SS（Stack Segment），指出当前堆栈的底部地址，即存放堆栈段的段基址。</p>\n<p>当发生权限切换的时候，会有新的 ESP 和 SS（CS 是由中断门或者调用门指定），那么 ESP 和 SS 从何而来呢？</p>\n<p>答案：TSS (Task-state segment)，任务状态段</p>\n<h2 id=\"tsstask-state-segment任务状态段的结构\"><a class=\"anchor\" href=\"#tsstask-state-segment任务状态段的结构\">#</a> TSS (Task-State Segment) 任务状态段的结构</h2>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<p>TSS 是一块内存，大小 104 字节。</p>\n<h2 id=\"tss的作用\"><a class=\"anchor\" href=\"#tss的作用\">#</a> TSS 的作用</h2>\n<p>这关乎于：<ins>Intel 的设计思想</ins>和<ins>操作系统的设计思想</ins></p>\n<p>TSS 里存储了段寄存器，通用寄存器，标志寄存器，EIP，CR3 寄存器，4 个堆栈<br />\n TSS 的设计初衷是任务切换 (线程切换)，当线程切换的时候，同时替换寄存器的值，可是操作系统 (Windows，Linux) 并没有使用 TSS 来切换线程。<br />\n但我们却可以用 TSS 做其他事情。☺</p>\n<p>那我们就要学习 CPU 是如何使用 TSS 的了。</p>\n<h2 id=\"cpu如何找到tss\"><a class=\"anchor\" href=\"#cpu如何找到tss\">#</a> CPU 如何找到 TSS？</h2>\n<p>答案：TR 寄存器</p>\n<p><strong>通过 <code>TR</code>  寄存器的段选择子，查询 <code>GDT</code>  表，找到 <code>TSS</code>  段描述符，然后获取 TR 的 <code>Base</code> , <code>Base</code>  中存储的就是 <code>TSS</code>  的地址， <code>Limit</code>  中存储的是 <code>TSS</code>  的大小</strong></p>\n<p>如图所示:</p>\n<p><img data-src=\"image002.png\" alt=\"\" /></p>\n<h2 id=\"tss段描述符\"><a class=\"anchor\" href=\"#tss段描述符\">#</a> TSS 段描述符</h2>\n<p><img data-src=\"image003.png\" alt=\"\" /></p>\n<ul>\n<li><strong>当 TYPE 位为 9 (1001) 的时候，说明这个段描述符是一个 TSS 段描述符，这个段描述符没有加载到 TR 寄存器中</strong></li>\n<li><strong>当 TYPE 位为 B (1011) 的时候，说明也是 TSS 段描述符，这个段描述符已经加载到了 TR 寄存器中</strong></li>\n</ul>\n<h2 id=\"tr寄存器的读写\"><a class=\"anchor\" href=\"#tr寄存器的读写\">#</a> TR 寄存器的读写</h2>\n<ul>\n<li>将 TSS 段描述符加载到 TR 寄存器</li>\n</ul>\n<p>指令： <code>LTR</code> <br />\n 用 <code>LTR</code>  指令去装载 TR 寄存器，仅仅是改变了 TR 寄存器里面的内容 (96 位)<br />\n 并没有真正改变 TSS，原来的 TSS 还在。</p>\n<p><code>LTR</code>  指令只能在系统层使用</p>\n<p>加载后 TSS 段描述符会 TYPE 位发生改变 1001-&gt;1011，9 变成 B，说明这个段描述符被加载到了 TR 寄存器</p>\n<ul>\n<li>读 TR 寄存器</li>\n</ul>\n<p>指令：STR<br />\n 如果用 STR 去读 TR 寄存器，只能读到 TR 寄存器的 16 位，也就是段选择子，和读普通段寄存器一样，96 位只能读出其中 16 位</p>\n<h2 id=\"修改tr寄存器\"><a class=\"anchor\" href=\"#修改tr寄存器\">#</a> 修改 TR 寄存器</h2>\n<p>在 Ring0 我们可以通过 LTR 指令去修改 TR 寄存器<br />\n在 Ring3 我们可以通过 CALL FAR 或者 JMP FAR 指令来修改</p>\n<p>用 JMP 去访问一个代码段的时候，改变的是 CS 和 EIP ：<br />\nJMP 0x48:0x123456 如果 0x48 是代码段<br />\n执行后：CS-- &gt; 0x48 EIP-- &gt; 0x123456</p>\n<p>用 JMP 去访问一个任务段的时候：<br />\n如果 0x48 是 TSS 段描述符，先修改 TR 寄存器，在用 TR.Base 指向的 TSS 中的值修改当前的寄存器<br />\n JMP 指令会清当前 TR 所使用的的 TSS descriptor 的 Busy 位是当前 TSS descriptor 置为 available 状态</p>\n<p>如果使用 CALL 指令进行调用，将会在新的 TSS 段里的 LINk 域写入原 TSS selector 值。</p>\n<p>使用 CALL 指令进行调用时，Eflags.NT 标志位会被处理器进行置位，指示新的 task 进入 Nested（嵌套）状态。JMP 指令则相反，Eflags.NT 标志位会被进行清位。</p>\n<p>NT=0 IRET 指令 堆栈取返回地址<br />\n NT=1 IRET 指令 返回时会找 TSS 的 LINK 域的值</p>\n<h2 id=\"实践加载自定义tss\"><a class=\"anchor\" href=\"#实践加载自定义tss\">#</a> 实践：加载自定义 TSS</h2>\n<p>知道了原理，我们就可以在这个过程中动些手脚。</p>\n<p>CPU 通过 TR 寄存器来找到 TSS，如果我们使用自己的 TSS 来替换原来的寄存器，就必须要修改 TR 寄存器，TR 寄存器里面的值又是来自 TSS 段描述符。</p>\n<p>首先我们要构建 TSS 段描述符</p>\n<p><strong>G 位为 0，粒度为字节，TSS 以字节为单位</strong><br />\n<strong> <code>Segment Limit</code>  必须得大于等于 <code>67H</code> </strong></p>\n<blockquote>\n<p>BASE+G+AVL+LIMT    +    P+DPL+TYPE    +    BASE     +BASE   +Segment Limit<br />\n00    00              E(1110)+9(1001)       00       0000    0068</p>\n</blockquote>\n<p>暂取 TSS 段描述符为 <code>0000E900`00000068</code>  Base 的值填写的是内存中 tss 结构的地址。</p>\n<p>新的 TSS 段必须要指定要素： <code>EIP</code> 、 <code>ESP</code> 、 <code>CS</code> 、 <code>SS</code>  以及 <code>CR3</code>  的值。</p>\n<p>ESP 的值：定义局部数组作为裸函数的栈，因为我们不知道进入 0 环后哪里的堆栈地址可以使用，所以需要自己指定一个可以使用的地址，传给 TSS [14] 时，应该传数组尾部的指针，因为压栈 ESP 减小，如果传数组首地址，那一压栈就越界了。</p>\n<h3 id=\"使用call去访问一个任务段并能够正确返回\"><a class=\"anchor\" href=\"#使用call去访问一个任务段并能够正确返回\">#</a> 使用 CALL 去访问一个任务段，并能够正确返回</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;Windows.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>DWORD dwOk<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>DWORD dwESP<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>DWORD dwCS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 任务切换后的 EIP</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">__declspec</span><span class=\"token punctuation\">(</span>naked<span class=\"token punctuation\">)</span> <span class=\"token function\">R0Func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t__asm</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\tpushad</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\tpushfd</pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\tpush fs</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> <span class=\"token number\">3</span> <span class=\"token comment\">//int 3 会修改 FS</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\tpop fs</pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\tmov eax<span class=\"token punctuation\">,</span><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\tmov dword ptr ds<span class=\"token operator\">:</span><span class=\"token punctuation\">[</span>dwOk<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>eax</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\tmov eax<span class=\"token punctuation\">,</span>esp</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\tmov dword ptr ds<span class=\"token operator\">:</span><span class=\"token punctuation\">[</span>dwESP<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>eax</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\tmov ax<span class=\"token punctuation\">,</span>cs</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\tmov word ptr ds<span class=\"token operator\">:</span><span class=\"token punctuation\">[</span>dwCS<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>ax</pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\tpopfd</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\tpopad</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\tiretd</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#123;</span>\t</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\tDWORD dwCr3<span class=\"token punctuation\">;</span> <span class=\"token comment\">//windbg 获取</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t<span class=\"token keyword\">char</span> esp<span class=\"token punctuation\">[</span><span class=\"token number\">0x1000</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 任务切换后的栈</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t<span class=\"token comment\">// 此数组的地址就是 TSS 描述符中的 Base</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\tDWORD TSS<span class=\"token punctuation\">[</span><span class=\"token number\">26</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t<span class=\"token comment\">// 也可以直接开辟一块私有内存</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t<span class=\"token comment\">//DWORD *TSS = (DWORD*)VirtualAlloc(NULL,104,MEM_COMMIT,PAGE_READWRITE);</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t<span class=\"token comment\">//if (TSS == NULL)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t<span class=\"token comment\">//&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t<span class=\"token comment\">//\tprintf (\"VirtualAlloc 失败，% d\\n\", GetLastError ());</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t<span class=\"token comment\">//\tgetchar();</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t<span class=\"token comment\">//\treturn -1;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t<span class=\"token comment\">//&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请在windbg执行: eq 8003f048 %02x00e9%02x`%04x0068\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>TSS<span class=\"token operator\">>></span><span class=\"token number\">24</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x000000FF</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>TSS<span class=\"token operator\">>></span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x000000FF</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>WORD<span class=\"token punctuation\">)</span>TSS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请在windbg中执行!process 0 0，复制进程DirBase的值，并输入.\\nCR3: \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%x\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>dwCr3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 注意是 % x</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Previous Task Link CPU 填充，表示上一个任务的选择子</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ESP0</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// SS0</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ESP1</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// SS1</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ESP2</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// SS2</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> dwCr3<span class=\"token punctuation\">;</span> \t <span class=\"token comment\">// CR3 学到页就知道是啥了</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>R0Func<span class=\"token punctuation\">;</span> <span class=\"token comment\">// EIP</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// EFLAGS</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// EAX</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">11</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ECX</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">12</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// EDX</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">13</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// EBX</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">14</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>esp<span class=\"token operator\">+</span><span class=\"token number\">0x1000</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">15</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// EBP</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">16</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ESI</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">17</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// EDI</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">18</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000023</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ES</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">19</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000008</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// CS</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000010</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// SS</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">21</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// DS</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">22</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// FS</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">23</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// GS</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">24</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// LDT Segment Selector</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">25</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x20ac0000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// I/O Map Base Address</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>\t<span class=\"token keyword\">char</span> buff<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x48</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\t</pre></td></tr><tr><td data-num=\"83\"></td><td><pre>\t__asm</pre></td></tr><tr><td data-num=\"84\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>\t\tcall fword ptr<span class=\"token punctuation\">[</span>buff<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ok: %d\\nESP: %x\\nCS: %x\\n\"</span><span class=\"token punctuation\">,</span> dwOk<span class=\"token punctuation\">,</span> dwESP<span class=\"token punctuation\">,</span> dwCS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"image004.png\" alt=\"\" /></p>\n<h3 id=\"使用jmp去访问一个任务段并能够正确返回\"><a class=\"anchor\" href=\"#使用jmp去访问一个任务段并能够正确返回\">#</a> 使用 JMP 去访问一个任务段，并能够正确返回</h3>\n<p>和 CALL FAR 对比，NT 位不会置 1，TSS  <code>previous task link</code>  也不会填充旧的 TR，因此想要返回，可以先保存旧的 TR，然后 JMP FAR 回去。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;Windows.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>DWORD dwOk<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>DWORD dwESP<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>DWORD dwCS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>BYTE PrevTr<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 旧 TR，供裸函数返回</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 任务切换后的 EIP</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">__declspec</span><span class=\"token punctuation\">(</span>naked<span class=\"token punctuation\">)</span> <span class=\"token function\">R3Func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t__asm</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\tpushad</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\tpushfd</pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\tpush fs</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> <span class=\"token number\">3</span> <span class=\"token comment\">//int 3 会修改 FS</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\tpop fs</pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\tmov eax<span class=\"token punctuation\">,</span><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\tmov dword ptr ds<span class=\"token operator\">:</span><span class=\"token punctuation\">[</span>dwOk<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>eax</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\tmov eax<span class=\"token punctuation\">,</span>esp</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\tmov dword ptr ds<span class=\"token operator\">:</span><span class=\"token punctuation\">[</span>dwESP<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>eax</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\tmov ax<span class=\"token punctuation\">,</span>cs</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\tmov word ptr ds<span class=\"token operator\">:</span><span class=\"token punctuation\">[</span>dwCS<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>ax</pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\tpopfd</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\tpopad</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\tjmp fword ptr ds<span class=\"token operator\">:</span><span class=\"token punctuation\">[</span>PrevTr<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token punctuation\">&#123;</span>\t</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\tDWORD dwCr3<span class=\"token punctuation\">;</span> <span class=\"token comment\">//windbg 获取</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t<span class=\"token keyword\">char</span> esp<span class=\"token punctuation\">[</span><span class=\"token number\">0x1000</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 任务切换后的栈，数组名就是 ESP</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t<span class=\"token comment\">// 此数组的地址就是 TSS 描述符中的 Base</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\tDWORD <span class=\"token operator\">*</span>TSS <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>DWORD<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">VirtualAlloc</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span><span class=\"token number\">104</span><span class=\"token punctuation\">,</span>MEM_COMMIT<span class=\"token punctuation\">,</span>PAGE_READWRITE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>TSS <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"VirtualAlloc 失败，%d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">GetLastError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t\t<span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请在windbg执行: eq 8003f048 %02x00e9%02x`%04x0068\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>TSS<span class=\"token operator\">>></span><span class=\"token number\">24</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x000000FF</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>TSS<span class=\"token operator\">>></span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x000000FF</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>WORD<span class=\"token punctuation\">)</span>TSS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请在windbg中执行!process 0 0，复制进程DirBase的值，并输入.\\nCR3: \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%x\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>dwCr3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 注意是 % x</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Previous Task Link CPU 填充，表示上一个任务的选择子</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ESP0</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// SS0</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ESP1</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// SS1</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ESP2</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// SS2</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> dwCr3<span class=\"token punctuation\">;</span> <span class=\"token comment\">// CR3 学到页就知道是啥了</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>R3Func<span class=\"token punctuation\">;</span> <span class=\"token comment\">// EIP</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// EFLAGS</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// EAX</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">11</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ECX</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">12</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// EDX</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">13</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// EBX</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">14</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>esp<span class=\"token operator\">+</span><span class=\"token number\">0x1000</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"68\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">15</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// EBP</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">16</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ESI</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">17</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// EDI</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">18</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000023</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ES</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">19</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000008</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// CS</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000010</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// SS</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">21</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// DS</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">22</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// FS</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">23</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// GS</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">24</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// LDT Segment Selector</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">25</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x20ac0000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// I/O Map Base Address</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>\t<span class=\"token keyword\">char</span> buff<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x48</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\t</pre></td></tr><tr><td data-num=\"81\"></td><td><pre>\t__asm</pre></td></tr><tr><td data-num=\"82\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>\t\tstr ax</pre></td></tr><tr><td data-num=\"84\"></td><td><pre>\t\tlea edi<span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span>PrevTr<span class=\"token operator\">+</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>\t\tmov <span class=\"token punctuation\">[</span>edi<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>ax</pre></td></tr><tr><td data-num=\"86\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"87\"></td><td><pre>\t\tjmp fword ptr<span class=\"token punctuation\">[</span>buff<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ok: %d\\nESP: %x\\nCS: %x\\n\"</span><span class=\"token punctuation\">,</span> dwOk<span class=\"token punctuation\">,</span> dwESP<span class=\"token punctuation\">,</span> dwCS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>\t<span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"image005.png\" alt=\"\" /></p>\n<p>由这个例子我们可以发现系统的 TSS 描述符为 <code>80008b04`200020ab</code> （TR 的段选择子为 0x28）</p>\n<p><img data-src=\"image006.png\" alt=\"\" /></p>\n<p>系统 TSS 的地址为： <code>80042000</code> ，查看一下。</p>\n<p><img data-src=\"image007.png\" alt=\"\" /></p>\n<h1 id=\"reference\"><a class=\"anchor\" href=\"#reference\">#</a> Reference</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0t3YW5zeS9hcnRpY2xlL2RldGFpbHMvMTA4ODkwNTg2\">https://blog.csdn.net/Kwansy/article/details/108890586</span><br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vcmV2ZXJjYy9wLzE0NDY4MzMwLmh0bWw=\">https://www.cnblogs.com/revercc/p/14468330.html</span></p>\n",
            "tags": [
                "TSS"
            ]
        },
        {
            "id": "https://or0kit.github.io/Bin/Core/WindowsXp/Protect-Mode/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F-%E9%99%B7%E9%98%B1%E9%97%A8/",
            "url": "https://or0kit.github.io/Bin/Core/WindowsXp/Protect-Mode/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F-%E9%99%B7%E9%98%B1%E9%97%A8/",
            "title": "保护模式-陷阱门",
            "date_published": "2021-08-13T06:40:28.000Z",
            "content_html": "<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<p>Windows 使用了中断门，用于系统调用和调试（比如调试断点）</p>\n<p>IF 位，是标志寄存器 EFLEAG，下标为 9 的位置。</p>\n<p>中断门和陷阱门都不可以传递参数，可能它们的作用被 CPU 制造商规定为辅助作用，但是操作系统怎么使用，就看操作系统的设计者怎么想的。</p>\n<p>它们的段描述符区别在于 TYPE 域，且都是系统段描述符</p>\n<p>这些都是 CPU 层面的概念，操作系统只是使用，然后根据硬件返回出来的值（在硬件方面可能就是电压表示的二进制）进行判断对与错，然后操作系统会提示用户正确或错误。</p>\n<p>转自<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxOTg4NDQ4L2FydGljbGUvZGV0YWlscy8xMDI1OTk5NjE=\"> https://blog.csdn.net/qq_41988448/article/details/102599961</span> 的评论</p>\n<h2 id=\"陷阱门与中断门的区别\"><a class=\"anchor\" href=\"#陷阱门与中断门的区别\">#</a> 陷阱门与中断门的区别</h2>\n<p>中断门执行时，会将 IF 标志位清零，但陷阱门不会</p>\n<p>IF=0 时：程序不再接收可屏蔽中断</p>\n<p>可屏蔽中断：比如程序正在运行时，我们通过键盘敲击了锁屏的快捷键，若 IF 位为 1，CPU 就能够接收到我们敲击键盘的指令并锁屏</p>\n<p>可屏蔽中断：<br />\n简述：保存断点入栈，响应经中断控制器 8259 优先级判断后的中断请求，恢复断点。<br />\nI/O 设备发出的所有中断 (IRQ) 都可以产生可屏蔽中断，受标志位 IF 的影响，根据中断循序标志的设置来判断 CPU 是否响应中断请求。</p>\n<blockquote>\n<p>接口发出中断请求<br />\n当前指令执行完后，CPU 响应中断<br />\n中断类型号 N 送 CPU<br />\n 当前的 EFR CS HE EIP 推入栈<br />\n清除 IF (中断允许标志位，IF=0，禁止 CPU 响应外部中断请求，IF=1，允许响应) 和 TF（跟踪标志，也称单步执行，CPU 按跟踪方式执行）<br />\n由中断类型号，查中断向量表获得中断服务子程序的入口地址<br />\n CPU 执行中断子程序<br />\n开中断<br />\n IRET 指令使 EIP CS HE EFR 弹出栈 ，返回被中断的源程序</p>\n</blockquote>\n<p>不可屏蔽中断：不可阻止的中断请求。如： 当突然断电，CPU 不是立马死掉，CPU 内部有一个电容，断电的时候，还会运行一会儿，用于处理后续工作，这个是不可屏蔽中断。</p>\n<h2 id=\"trap-gate-descriptor\"><a class=\"anchor\" href=\"#trap-gate-descriptor\">#</a> Trap-Gate-Descriptor</h2>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<h2 id=\"实践\"><a class=\"anchor\" href=\"#实践\">#</a> 实践</h2>\n<p>知道了理论，开始实践。<br />\n和中断门一样的流程，只是我们构造的描述符有一点不同： <code>0040EF00`00081020</code>   把中断门的 <code>EE</code>  改为了 <code>EF</code></p>\n<p>代码还是以前的代码，结果也是一样的。<br />\n不再复写一份了（懒）。</p>\n<h1 id=\"reference\"><a class=\"anchor\" href=\"#reference\">#</a> Reference</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1NDI1MjQzL2FydGljbGUvZGV0YWlscy84MzY1NzIwMw==\">https://blog.csdn.net/qq_35425243/article/details/83657203</span></p>\n",
            "tags": [
                "IDT",
                "提权",
                "陷阱门描述符"
            ]
        },
        {
            "id": "https://or0kit.github.io/Bin/Core/WindowsXp/Protect-Mode/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F-%E4%B8%AD%E6%96%AD%E9%97%A8/",
            "url": "https://or0kit.github.io/Bin/Core/WindowsXp/Protect-Mode/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F-%E4%B8%AD%E6%96%AD%E9%97%A8/",
            "title": "保护模式-中断门",
            "date_published": "2021-08-13T06:40:15.000Z",
            "content_html": "<h1 id=\"中断门\"><a class=\"anchor\" href=\"#中断门\">#</a> 中断门</h1>\n<h2 id=\"中断门的作用\"><a class=\"anchor\" href=\"#中断门的作用\">#</a> 中断门的作用</h2>\n<p>先前学习的调用门在实际的 Windows 中并没有被使用，只是操作系统提供了调用门描述符给开发人员使用。相比之下，Windows 使用了中断门，用于：</p>\n<blockquote>\n<p>系统调用（老的 CPU 通过中断门进入 RING（内核）0 层；新的 CPU 使用快速调用）<br />\n调试（常见的 INT3 对应硬编码为 0xCC）</p>\n</blockquote>\n<h2 id=\"中断门执行流程\"><a class=\"anchor\" href=\"#中断门执行流程\">#</a> 中断门执行流程</h2>\n<p>【重点】</p>\n<ul>\n<li>根据 INT XXX 的值 查 IDT（中断描述符表），找到对应的段描述符 这个描述符是一个中断门描述符</li>\n<li>在中断门描述符中存储另一个代码段的选择子</li>\n<li>选择子指向的段 段.Base + 偏移地址 就是真正要执行的地址</li>\n</ul>\n<h2 id=\"idt\"><a class=\"anchor\" href=\"#idt\">#</a> IDT</h2>\n<p>IDT 全称 Interrupt Descriptor Table（中断描述符表）, 同 GDT 一样，IDT 也是由一系列描述符组成的，每个<br />\n描述符占 8 个字节。但要注意的是，IDT 表中的第一个元素不是 NULL。</p>\n<p>IDT 中存储的段描述符都是<ins>系统段描述符</ins></p>\n<p>IDT 可以包含三种门描述符：①任务门描述符；②中断门描述符；③陷阱门描述符</p>\n<p>在 windbg 中查看 IDT 表的基址和长度:</p>\n<p>查看地址： <code>r idtr</code></p>\n<p>查看长度： <code>r idtl</code></p>\n<h2 id=\"中断门描述符\"><a class=\"anchor\" href=\"#中断门描述符\">#</a> 中断门描述符</h2>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<p>当一个段描述符是一个调用门描述符时，有以下特征：</p>\n<ul>\n<li>S 位为 0，表示该段描述符为系统段描述符（中断门描述符属于系统段描述符）</li>\n<li>Type 域为 1110，表示该段描述符为 32 位中断门</li>\n<li>低 16 位到 31 位存储一个段选择子，该段选择子才和代码真正要调用的地址相关</li>\n<li>真正要调用的地址 = 段选择子所指向的段.Base + 32 位的段中偏移 （段中偏移分为两部分：高位 31-16 位和低位 15-0 位）</li>\n<li>段.Base 默认为 0，故真正要调用的地址 = 32 位的段中偏移</li>\n</ul>\n<h2 id=\"调用门描述符和中断门描述符各部分的对比\"><a class=\"anchor\" href=\"#调用门描述符和中断门描述符各部分的对比\">#</a> 调用门描述符和中断门描述符各部分的对比</h2>\n<p><img data-src=\"image002.png\" alt=\"\" /></p>\n<p>可以发现中断门描述符和调用门描述符的结构基本一致，只在 Type 域和参数计数处不同（Type 域是描述符的类型标识；中断门不允许传参）</p>\n<h2 id=\"中断门堆栈变化\"><a class=\"anchor\" href=\"#中断门堆栈变化\">#</a> 中断门堆栈变化</h2>\n<p>使用调用门的方法是 CALL FAR，而使用中断门的方法是  <code>INT N</code> ，其中，N 表示中断门描述符在 IDT 表中的下标。</p>\n<p>和调用门一样，中断门也可以用来提权。不提权时， <code>INT N</code>  会压栈 CS，EFLAG EIP；<br />\n提权时，会依次压栈 SS ESP EFLAG CS EIP。<br />\n需要用堆栈保存 EFLAG 是因为中断门会将 EFLAG 的 IF 位置 0。</p>\n<p><img data-src=\"image006.png\" alt=\"\" /></p>\n<h2 id=\"实践\"><a class=\"anchor\" href=\"#实践\">#</a> 实践</h2>\n<p>知道了理论，开始实践。</p>\n<ol>\n<li>构造 Interrupt Gate Descriptor</li>\n</ol>\n<p><code>0000 0000 0000 0000 1110 1110 0000 0000`0000 0000 0000 1000 0000 0000 0000 0000</code></p>\n<p>段内偏移还不确定，暂时置为 0。<br />\n十六进制为 <code>0000ee00`00080000</code></p>\n<ol start=\"2\">\n<li>测试代码</li>\n</ol>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;windows.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>DWORD dwH2GValue<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">__declspec</span><span class=\"token punctuation\">(</span>naked<span class=\"token punctuation\">)</span> <span class=\"token keyword\">void</span> <span class=\"token function\">GetH2GValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t__asm</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\tpushad</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\tpushfd</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 读高 2G 内存</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\tmov eax<span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">0x8003f00c</span><span class=\"token punctuation\">]</span>  </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\tmov ebx<span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span>eax<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\tmov dwH2GValue<span class=\"token punctuation\">,</span>ebx</pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\tpopfd</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\tpopad</pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\tiretd</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t__asm</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\tINT <span class=\"token number\">0x20</span>      <span class=\"token comment\">// 暂时有疑问，选这个索引是因为有的博客说这个地址没有用上。可是我在 windbg 中看到这个地址也是有值的。</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"dwH2GValue:%#X\"</span><span class=\"token punctuation\">,</span>dwH2GValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>VC 中反汇编查看</p>\n<p><img data-src=\"image003.png\" alt=\"\" /></p>\n<p>我们要跳转的地址为 <code>0x00401020</code></p>\n<p>确定 Interrupt Gate Descriptor 为： <code>0040ee00`00081020</code></p>\n<ol start=\"3\">\n<li>在 windbg 中赋值</li>\n</ol>\n<p>直接在 IDT 表中修改索引为 0x20 的中断门描述符</p>\n<p><code>eq 8003f500 0040ee00`00081020</code></p>\n<ol start=\"4\">\n<li>在调试机中运行代码</li>\n</ol>\n<p>结果：</p>\n<p><img data-src=\"image004.png\" alt=\"\" /></p>\n<p>在 windbg 中确认打印数值无误。</p>\n<p><img data-src=\"image005.png\" alt=\"\" /></p>\n<h1 id=\"reference\"><a class=\"anchor\" href=\"#reference\">#</a> Reference</h1>\n<p>滴水课件<br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuNTJwb2ppZS5jbi90aHJlYWQtMTQ1NTY4NC0xLTEuaHRtbA==\"> https://www.52pojie.cn/thread-1455684-1-1.html</span></p>\n",
            "tags": [
                "中断门描述符",
                "IDT",
                "提权"
            ]
        },
        {
            "id": "https://or0kit.github.io/Bin/Core/WindowsXp/Protect-Mode/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F-%E8%B0%83%E7%94%A8%E9%97%A8%E6%8F%90%E6%9D%83/",
            "url": "https://or0kit.github.io/Bin/Core/WindowsXp/Protect-Mode/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F-%E8%B0%83%E7%94%A8%E9%97%A8%E6%8F%90%E6%9D%83/",
            "title": "保护模式-调用门提权",
            "date_published": "2021-08-09T04:02:20.000Z",
            "content_html": "<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<p>在学习长调用时没有用实例具体分析，因为牵扯到了调用门的知识。</p>\n<h1 id=\"调用门\"><a class=\"anchor\" href=\"#调用门\">#</a> 调用门</h1>\n<h2 id=\"调用门的作用\"><a class=\"anchor\" href=\"#调用门的作用\">#</a> 调用门的作用</h2>\n<p>调用门可以用来提权，通过提权可以实现访问高地址空间等 RING0（内核）层才能进行的操作</p>\n<hr />\n<h2 id=\"调用门和长调用关系\"><a class=\"anchor\" href=\"#调用门和长调用关系\">#</a> 调用门和长调用关系</h2>\n<p>回顾先前的笔记可知：</p>\n<p>长调用 CALL FAR CS:EIP 指令要<strong>调用的地址</strong>是由 CS 段选择子查 GDT 得到的<strong>调用门</strong> 段描述符得来的，后面的 EIP 不发挥作用</p>\n<h2 id=\"调用门执行流程\"><a class=\"anchor\" href=\"#调用门执行流程\">#</a> 调用门执行流程</h2>\n<ol>\n<li>根据 CS 的值 查 GDT，找到对应的段描述符 这个描述符是一个调用门</li>\n<li>在调用门描述符中存储另一个代码段的选择子</li>\n<li>选择子指向的段 段.Base + 偏移地址 就是真正要执行的地址</li>\n</ol>\n<h2 id=\"调用门描述符\"><a class=\"anchor\" href=\"#调用门描述符\">#</a> 调用门描述符</h2>\n<h3 id=\"对比段描述符\"><a class=\"anchor\" href=\"#对比段描述符\">#</a> 对比段描述符</h3>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<p>调用门描述符结构</p>\n<p><img data-src=\"image002.png\" alt=\"\" /></p>\n<hr />\n<p>当一个段描述符是一个调用门描述符时，有以下特征：</p>\n<ul>\n<li>S 位为 0，表示该段描述符为系统段描述符（调用门描述符属于系统段描述符）</li>\n<li>Type 域为 1100，表示该段描述符为 32 位调用门</li>\n<li>低 16 位到 31 位由原本的基地址变为存储一个段选择子，该段选择子才和代码<strong>真正要调用的地址</strong>相关</li>\n<li>真正要调用的地址 = 段选择子所指向的段.Base + 32 位的段中偏移 （段中偏移分为两部分：高位 31-16 位和低位 15-0 位）</li>\n<li>段.Base 默认为 0，故真正要调用的地址 = 32 位的段中偏移</li>\n</ul>\n<hr />\n<p>给出段描述符和调用门描述符各部分的对比：</p>\n<hr />\n<h2 id=\"段描述符\"><a class=\"anchor\" href=\"#段描述符\">#</a> 段描述符</h2>\n<table>\n<thead>\n<tr>\n<th>数据位</th>\n<th>31-24</th>\n<th>23</th>\n<th>22</th>\n<th>21</th>\n<th>20</th>\n<th>19-16</th>\n<th>15</th>\n<th>14-13</th>\n<th>12</th>\n<th>11-8</th>\n<th>7-0</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>含义</td>\n<td>Base</td>\n<td>G</td>\n<td>D/B</td>\n<td>0</td>\n<td>AVL</td>\n<td>Seg.Limit</td>\n<td>P</td>\n<td>DPL</td>\n<td>S</td>\n<td>Type</td>\n<td>Base</td>\n<td></td>\n</tr>\n<tr>\n<td>解释</td>\n<td>基地址</td>\n<td>粒度</td>\n<td>默认操作大小</td>\n<td>固定为 0</td>\n<td>用于系统软件使用</td>\n<td>段大小限制</td>\n<td>有效位</td>\n<td>特权等级</td>\n<td>描述符类型</td>\n<td>段类型</td>\n<td>基地址</td>\n<td></td>\n</tr>\n</tbody>\n<tbody>\n<tr>\n<td>数据位</td>\n<td>31-16</td>\n<td>15</td>\n<td>14-13</td>\n<td>12</td>\n<td>11-8</td>\n<td>7-5</td>\n<td>4-0</td>\n</tr>\n<tr>\n<td>------</td>\n<td>--------</td>\n<td>------</td>\n<td>--------</td>\n<td>-----</td>\n<td>--------</td>\n<td>-------</td>\n<td>-----------</td>\n</tr>\n<tr>\n<td>含义</td>\n<td>offset</td>\n<td>P</td>\n<td>DPL</td>\n<td>S</td>\n<td>Type</td>\n<td>无</td>\n<td>param.count</td>\n</tr>\n<tr>\n<td>解释</td>\n<td>段中偏移</td>\n<td>有效位</td>\n<td>特权等级</td>\n<td>值为 0</td>\n<td>值为 1100</td>\n<td>值为 000</td>\n<td>参数计数</td>\n</tr>\n</tbody>\n</table>\n<hr />\n<h2 id=\"调用门描述符-2\"><a class=\"anchor\" href=\"#调用门描述符-2\">#</a> 调用门描述符</h2>\n<table>\n<thead>\n<tr>\n<th>数据位</th>\n<th>31-16</th>\n<th>15-0</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>含义</td>\n<td>Base Adress</td>\n<td>Segment Limit</td>\n</tr>\n<tr>\n<td>解释</td>\n<td>基地址</td>\n<td>段大小限制</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>数据位</td>\n<td>31-16</td>\n<td>15-0</td>\n</tr>\n<tr>\n<td>含义</td>\n<td>selector</td>\n<td>offset</td>\n</tr>\n<tr>\n<td>解释</td>\n<td>段选择子</td>\n<td>段中偏移</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"构造无参调用门描述符\"><a class=\"anchor\" href=\"#构造无参调用门描述符\">#</a> 构造无参调用门描述符</h2>\n<p>了解了调用门描述符的结构后，尝试自己构造一个无参的调用门描述符，如下：</p>\n<table>\n<thead>\n<tr>\n<th>数据位</th>\n<th>31-16</th>\n<th>15</th>\n<th>14-13</th>\n<th>12</th>\n<th>11-8</th>\n<th>7-5</th>\n<th>4-0</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>含义</td>\n<td>offset</td>\n<td>P</td>\n<td>DPL</td>\n<td>S</td>\n<td>Type</td>\n<td>无</td>\n<td>param</td>\n</tr>\n<tr>\n<td>解释</td>\n<td>段中偏移</td>\n<td>有效位</td>\n<td>特权等级</td>\n<td>值为 0</td>\n<td>值为 1100</td>\n<td>值为 000</td>\n<td>参数</td>\n</tr>\n<tr>\n<td>值（二进制）</td>\n<td>0</td>\n<td>1</td>\n<td>11</td>\n<td>0</td>\n<td>1100</td>\n<td>000</td>\n<td>0000</td>\n</tr>\n</tbody>\n<tbody>\n<tr>\n<td>数据位</td>\n<td>31-16</td>\n<td>15-0</td>\n</tr>\n<tr>\n<td>:-------------</td>\n<td>--------</td>\n<td>--------</td>\n</tr>\n<tr>\n<td>含义</td>\n<td>selector</td>\n<td>offset</td>\n</tr>\n<tr>\n<td>解释</td>\n<td>段选择子</td>\n<td>段中偏移</td>\n</tr>\n<tr>\n<td>值（十六进制）</td>\n<td>0x0008</td>\n<td>0</td>\n</tr>\n</tbody>\n</table>\n<p>得到调用门描述符为：0000EC00`00080000</p>\n<p>段中偏移暂时不明确要调用的代码段，先置 0</p>\n<h3 id=\"示例代码\"><a class=\"anchor\" href=\"#示例代码\">#</a> 示例代码</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">__declspec</span><span class=\"token punctuation\">(</span>naked<span class=\"token punctuation\">)</span> <span class=\"token keyword\">void</span> <span class=\"token function\">callGate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>         _asm<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                 <span class=\"token keyword\">int</span> <span class=\"token number\">3</span>                                <span class=\"token comment\">// 软中断</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                 retf                                <span class=\"token comment\">// 注意这里长调用对应长返回</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>         <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">char</span> buff<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">//*(DWORD*)&amp;buff [0]= 0x12345678;        // 低地址 32 位为 0x12345678，EIP 已废弃，故随便填即可</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">//*(DWORD*)&amp;buff [4]=0x48;                        // 高地址 16 位为 0x48，段选择子</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">// 也可以换作这种写法</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        _asm<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                mov dword ptr ds<span class=\"token operator\">:</span><span class=\"token punctuation\">[</span>buff<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x12345678</span>        <span class=\"token comment\">// 低 32 位赋值废弃 EIP</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                lea eax<span class=\"token punctuation\">,</span>dword ptr ds<span class=\"token operator\">:</span><span class=\"token punctuation\">[</span>buff<span class=\"token punctuation\">]</span>                        <span class=\"token comment\">// 将 buff 地址给 EAX</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                add eax<span class=\"token punctuation\">,</span><span class=\"token number\">4</span>                                                        <span class=\"token comment\">// 地址 + 4，即得到高地址</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                mov word ptr ds<span class=\"token operator\">:</span><span class=\"token punctuation\">[</span>eax<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x48</span>                        <span class=\"token comment\">// 高 16 位赋值段选择子 selector</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token comment\">// 使用 调用门</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        _asm<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                call fword ptr ds<span class=\"token operator\">:</span><span class=\"token punctuation\">[</span>buff<span class=\"token punctuation\">]</span>                        <span class=\"token comment\">//fword 数据宽度为 6 字节</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"代码说明\"><a class=\"anchor\" href=\"#代码说明\">#</a> 代码说明</h3>\n<p>代码十分简单，主要分为两部分：</p>\n<ul>\n<li>callGate：调用门真正要调用的函数，先软中断，然后长返回</li>\n<li>main：先构造一个 CS:EIP，这里为 0x48:0x12345678，然后使用调用门</li>\n</ul>\n<p>当我们发动调用门技能时，程序会跳转到我们构造的调用门描述符中预先设置的地址，并且我们的权限会提升到我们设置的权限！！可以做一些操作系统才能做的事情。</p>\n<h3 id=\"实验过程\"><a class=\"anchor\" href=\"#实验过程\">#</a> 实验过程</h3>\n<p>目前一些重要操作只能手动……</p>\n<ol>\n<li>确定要跳转的函数的地址</li>\n</ol>\n<p><img data-src=\"image003.png\" alt=\"\" /></p>\n<ol start=\"2\">\n<li>构造 Call-Gate 描述符</li>\n</ol>\n<p>要跳转的地址为： <code>0x00401020</code></p>\n<p>Call-Gate Descriptor: <code>0040ec00`00081020</code></p>\n<ol start=\"3\">\n<li>修改 GDT 表</li>\n</ol>\n<p><img data-src=\"image004.png\" alt=\"\" /></p>\n<p>修改 <code>0x8003f048</code>  这个地址，因为这是一个没有被用到的段描述符。</p>\n<p><code>eq 8003f048 0040ec00`00081020</code></p>\n<ol start=\"4\">\n<li>在调试机中执行上面的代码</li>\n</ol>\n<p>如果没有意外的话，调试机会被中断。</p>\n<h2 id=\"构造有参的调用门\"><a class=\"anchor\" href=\"#构造有参的调用门\">#</a> 构造有参的调用门</h2>\n<p>在构造调用门描述符时要说明参数个数，关于这个参数个数，需要注意的是，它的值共 5 位（5 个比特位）。</p>\n<h3 id=\"代码\"><a class=\"anchor\" href=\"#代码\">#</a> 代码</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;windows.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>DWORD x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>DWORD y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>DWORD z<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> <span class=\"token function\">__declspec</span><span class=\"token punctuation\">(</span>naked<span class=\"token punctuation\">)</span> <span class=\"token keyword\">void</span> <span class=\"token function\">callGate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        _asm<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                pushad                        <span class=\"token comment\">// 将所有 32 位通用寄存器压入堆栈</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                pushfd                        <span class=\"token comment\">// 将 32 位标志寄存器 EFLFAGS 压入堆栈</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                mov eax<span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span>esp<span class=\"token operator\">+</span><span class=\"token number\">0x24</span><span class=\"token operator\">+</span><span class=\"token number\">0x8</span><span class=\"token operator\">+</span><span class=\"token number\">0x8</span><span class=\"token punctuation\">]</span>    <span class=\"token comment\">// 从堆栈中取出第一个参数</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                mov dword ptr ds<span class=\"token operator\">:</span><span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>eax      <span class=\"token comment\">// 将取出的参数赋值给全局变量 x</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                mov eax<span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span>esp<span class=\"token operator\">+</span><span class=\"token number\">0x24</span><span class=\"token operator\">+</span><span class=\"token number\">0x8</span><span class=\"token operator\">+</span><span class=\"token number\">0x4</span><span class=\"token punctuation\">]</span>    <span class=\"token comment\">// 从堆栈中取出第二个参数</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                mov dword ptr ds<span class=\"token operator\">:</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>eax      <span class=\"token comment\">// 将取出的参数赋值给全局变量 y</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                mov eax<span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span>esp<span class=\"token operator\">+</span><span class=\"token number\">0x24</span><span class=\"token operator\">+</span><span class=\"token number\">8</span><span class=\"token operator\">+</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>        <span class=\"token comment\">// 从堆栈中取出第三个参数</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                mov dword ptr ds<span class=\"token operator\">:</span><span class=\"token punctuation\">[</span>z<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>eax      <span class=\"token comment\">// 将取出的参数赋值给全局变量 z</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                popfd                         <span class=\"token comment\">// 将所有 32 位通用寄存器出栈</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                popad                         <span class=\"token comment\">// 将所有 32 位标志寄存器 EFLFAGS 出栈</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                retf <span class=\"token number\">0xC</span>                      <span class=\"token comment\">// 注意这里长调用对应长返回，堆栈平衡 0xC=12=3*4 = 参数个数 * 参数的数据宽度（单位字节）</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">char</span> buff<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>DWORD<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>buff <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span> <span class=\"token number\">0x12345678</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// 低地址 32 位为 0x12345678，EIP 已废弃，故随便填即可</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>DWORD<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>buff <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">0x48</span><span class=\"token punctuation\">;</span>                        <span class=\"token comment\">// 高地址 16 位为 0x48，段选择子</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token comment\">// 也可以换作这种写法</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token comment\">//_asm&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token comment\">//        mov dword ptr ds:[buff],0x12345678        // 低 32 位赋值废弃 EIP</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token comment\">//        lea eax,dword ptr ds:[buff]                        // 将 buff 地址给 EAX</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token comment\">//        add eax,4                                                        // 地址 + 4，即得到高地址</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token comment\">//        mov word ptr ds:[eax],0x48                        // 高 16 位赋值段选择子 selector</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token comment\">//&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token comment\">// 使用 调用门</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        _asm<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                push <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                push <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                push <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                call fword ptr<span class=\"token punctuation\">[</span>buff<span class=\"token punctuation\">]</span>                        <span class=\"token comment\">//fword 数据宽度为 6 字节</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%X\\t%X\\t%X\\n\"</span><span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">,</span>z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"代码说明-2\"><a class=\"anchor\" href=\"#代码说明-2\">#</a> 代码说明</h3>\n<p>与构造无参调用门描述符相比，主要变化为：</p>\n<p>在使用调用门前压入了三个参数：1、2、3<br />\n 调用代码作用为：①保护现场（压入所有通用寄存器和标志寄存器）；②从堆栈中取出对应的参数；③将取出的参数赋值给对应的全局变量<br />\n调用代码最后要平衡堆栈，ret 0xC         0xC=12=3*4 = 参数个数 * 参数的数据宽度（单位字节）<br />\n在调用结束后，输出调用后被赋值的全局变量，验证参数是否成功传递</p>\n<h3 id=\"实验过程-2\"><a class=\"anchor\" href=\"#实验过程-2\">#</a> 实验过程</h3>\n<p>与无参基本一样。描述符中记加参数个数。<br />\n注意观察堆栈变化。</p>\n<h2 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h2>\n<p>当通过门，权限不变的时候，只会 PUSH 两个值：①CS（新的 CS 的值由调用门决定） ；②返回地址<br />\n当通过门，权限改变的时候，会 PUSH 四个值：①SS；② ESP；③ CS ；④ 返回地址   （新的 CS 的值由调用门决定  新的 SS 和 ESP 由 TSS 提供）<br />\n通过门调用时，要执行代码的地址由调用门中的选择子决定；使用 RETF 返回时，由堆栈中压入的返回地址决定</p>\n<h1 id=\"reference\"><a class=\"anchor\" href=\"#reference\">#</a> Reference</h1>\n<p>详细参见：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuNTJwb2ppZS5jbi90aHJlYWQtMTQ1NDM1My0xLTEuaHRtbA==\">https://www.52pojie.cn/thread-1454353-1-1.html</span></p>\n",
            "tags": [
                "提权",
                "调用门",
                "调用门描述符"
            ]
        },
        {
            "id": "https://or0kit.github.io/Bin/Core/WindowsXp/Protect-Mode/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F-%E9%95%BF%E8%B0%83%E7%94%A8%E4%B8%8E%E7%9F%AD%E8%B0%83%E7%94%A8/",
            "url": "https://or0kit.github.io/Bin/Core/WindowsXp/Protect-Mode/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F-%E9%95%BF%E8%B0%83%E7%94%A8%E4%B8%8E%E7%9F%AD%E8%B0%83%E7%94%A8/",
            "title": "保护模式-长调用与短调用",
            "date_published": "2021-08-08T12:51:45.000Z",
            "content_html": "<h1 id=\"短调用\"><a class=\"anchor\" href=\"#短调用\">#</a> 短调用</h1>\n<h2 id=\"短调用指令格式\"><a class=\"anchor\" href=\"#短调用指令格式\">#</a> 短调用指令格式</h2>\n<p>CALL 立即数 / 寄存器 / 内存</p>\n<table>\n<thead>\n<tr>\n<th>指令类型</th>\n<th>指令例子</th>\n<th>对应硬编码</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>CALL 立即数</td>\n<td>call 52610610</td>\n<td>E8 F4560A52</td>\n</tr>\n<tr>\n<td>CALL 寄存器</td>\n<td>call eax</td>\n<td>FFD0</td>\n</tr>\n<tr>\n<td>CALL 内存</td>\n<td>call dword ptr ds:[0x52610610]</td>\n<td>FF15 10066152</td>\n</tr>\n</tbody>\n</table>\n<p><img data-src=\"image003.png\" alt=\"\" /></p>\n<p>关于 CALL 指令详细内容参见<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuNTJwb2ppZS5jbi90aHJlYWQtMTM3OTk1Mi0xLTEuaHRtbA==\"> https://www.52pojie.cn/thread-1379952-1-1.html</span></p>\n<p>在 OllyDbg 中随便打开一个 EXE，执行 CALL 指令。<br />\n观察堆栈的变化。</p>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<p>单步执行后</p>\n<p><img data-src=\"image002.png\" alt=\"\" /></p>\n<p>对比前后的堆栈情况变化，可以发现：</p>\n<p>短调用影响了 ESP 和 EIP 两个寄存器，并且会将返回地址压入到堆栈中</p>\n<p>短调用通过 RET 指令返回</p>\n<h1 id=\"长调用\"><a class=\"anchor\" href=\"#长调用\">#</a> 长调用</h1>\n<h2 id=\"长调用指令格式\"><a class=\"anchor\" href=\"#长调用指令格式\">#</a> 长调用指令格式</h2>\n<p><code>CALL FAR CS:EIP</code>  (EIP 是废弃的)</p>\n<p>如： <code>CALL FAR 002B:00610610</code></p>\n<p>CALL 指令要调用的地址是由 CS 段选择子查 GDT 表得到的调用门 段描述符得来的，后面的 EIP 不发挥作用。</p>\n<p>长调用可以分为两种：跨段不提权和跨段提权。</p>\n<p>长调用通过 RETF 指令返回。</p>\n<h2 id=\"跨段不提权\"><a class=\"anchor\" href=\"#跨段不提权\">#</a> 跨段不提权</h2>\n<p>所谓的跨段不提权就是指要跳转段和当前段的特权级别相同。</p>\n<p>和短调用不同，长调用会先将 CS 压入堆栈，然后再将返回地址压入堆栈。</p>\n<p>跨段不提权的长调用影响了 ESP EIP CS 三个寄存器，并且会将 CS 和返回地址压入到堆栈中。</p>\n<p>堆栈变化图：</p>\n<p><img data-src=\"image004.png\" alt=\"\" /></p>\n<h2 id=\"跨段提权\"><a class=\"anchor\" href=\"#跨段提权\">#</a> 跨段提权</h2>\n<p>与跨段不提权相对，所谓的跨段提权就是指要跳转段和当前段的特权级别不同。</p>\n<p>跨段提权的长调用 涉及到了权限的变化，一旦涉及到了权限的变化，堆栈也将随之切换，因此相比跨段不提权，还会影响 SS 寄存器。</p>\n<p>跨段提权的长调用影响了 ESP EIP CS SS 四个寄存器，并且会将 SS、ESP、CS 和返回地址压入到堆栈中。</p>\n<p>为什么要压入 SS 和 ESP？</p>\n<p>因为当跨段提权时，堆栈会发生切换，压入 SS 和 ESP 是为了在调用结束后将堆栈恢复成原来的（切换前）的堆栈。</p>\n<p>堆栈切换的来源是什么？</p>\n<p>堆栈切换的来源是 TSS 段，这个留作之后再深入。</p>\n<p>由 RING3 切换到 RING0 的跨段提权堆栈变化图</p>\n<p><img data-src=\"image005.png\" alt=\"\" /></p>\n<h1 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h1>\n<p>跨段调用时，一旦有权限切换，就会切换堆栈</p>\n<p>CS 的权限一旦改变，SS 的权限也要随着改变，CS 与 SS 的特权级别必须一致（INTEL 定义的规则）</p>\n<p>JMP FAR 只能跳转到同级代码段，但 CALL FAR 可以通过调用门进行提权（提升 CPL 的权限）</p>\n<h1 id=\"reference\"><a class=\"anchor\" href=\"#reference\">#</a> Reference</h1>\n<p>滴水中级课件<br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuNTJwb2ppZS5jbi90aHJlYWQtMTQyMzg5NC0xLTEuaHRtbA==\"> https://www.52pojie.cn/thread-1423894-1-1.html</span></p>\n",
            "tags": [
                "CALL与CALL FAR"
            ]
        },
        {
            "id": "https://or0kit.github.io/Bin/Core/WindowsXp/Protect-Mode/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F-%E4%BB%A3%E7%A0%81%E8%B7%A8%E6%AE%B5%E8%B7%B3%E8%BD%AC/",
            "url": "https://or0kit.github.io/Bin/Core/WindowsXp/Protect-Mode/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F-%E4%BB%A3%E7%A0%81%E8%B7%A8%E6%AE%B5%E8%B7%B3%E8%BD%AC/",
            "title": "保护模式-代码跨段跳转",
            "date_published": "2021-08-08T05:48:15.000Z",
            "content_html": "<h1 id=\"代码跨段跳转\"><a class=\"anchor\" href=\"#代码跨段跳转\">#</a> 代码跨段跳转</h1>\n<h2 id=\"要点回顾\"><a class=\"anchor\" href=\"#要点回顾\">#</a> 要点回顾</h2>\n<p>段寄存器:<br />\n <code>ES,CS,SS,DS,FS,GS,LDTR,TR</code> <br />\n 除 CS 外，其他的段寄存器都可以通过  <code>MOV,LES,LSS,LDS,LFS,LGS</code>  指令进行修改</p>\n<p>思考：CS 为什么不可以直接修改呢？</p>\n<p><strong>CS 的改变意味着 EIP 的改变，改变 CS 的同时必须修改 EIP, 所以我们无法使用上面的指令来进行修改</strong></p>\n<h2 id=\"代码段跳转流程\"><a class=\"anchor\" href=\"#代码段跳转流程\">#</a> 代码段跳转流程</h2>\n<p>段间跳转分为两种情况：</p>\n<p>要跳转的段是一致代码段<br />\n要跳转的段是非一致代码段</p>\n<p><strong>同时修改 CS 和 EIP 的指令:</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">指令</th>\n<th style=\"text-align:left\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">JMP FAR</td>\n<td style=\"text-align:left\">远跳转</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">CALL FAR</td>\n<td style=\"text-align:left\">远调用</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">RETF(return far)</td>\n<td style=\"text-align:left\">远返回</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">INT(interrupt)</td>\n<td style=\"text-align:left\">中断</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">IRET(interrupt return)</td>\n<td style=\"text-align:left\">执行到中断程序或过程的远返回</td>\n</tr>\n</tbody>\n</table>\n<p><strong>只改变 EIP 的指令：</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">指令</th>\n<th style=\"text-align:left\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">JMP</td>\n<td style=\"text-align:left\">跳转</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">CALL</td>\n<td style=\"text-align:left\">调用</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">JCC(jump condition code)</td>\n<td style=\"text-align:left\">跳转指令状态码 / 条件跳转</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">RET</td>\n<td style=\"text-align:left\">返回</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"执行流程\"><a class=\"anchor\" href=\"#执行流程\">#</a> 执行流程</h3>\n<p>JMP FAR 指令<br />\n指令格式<br />\n <code>JMP Selector:Offset</code></p>\n<p>如： <code>JMP 0x20:0x00452610</code></p>\n<p>Selector 为段选择子<br />\n Offset 为要跳转的偏移</p>\n<p>思考：CPU 如何执行  <code>JMP 0x20:0x004183D</code>  这行指令</p>\n<ul>\n<li><strong>1）段选择子拆分</strong></li>\n</ul>\n<blockquote>\n<p>0x20 二进制：0000 0000 0010 0000 即<br />\n RPL = 00<br />\nTI = 0<br />\nIndex = 4</p>\n</blockquote>\n<ul>\n<li><strong>2）查表得到段描述符</strong></li>\n</ul>\n<p>TI=0：查 GDT 表<br />\n Index=4：找到对应的段描述符</p>\n<p>四种情况可以跳转：</p>\n<blockquote>\n<p>代码段<br />\n调用门<br />\n TSS 任务段<br />\n任务门</p>\n</blockquote>\n<ul>\n<li><strong>3）权限检查</strong></li>\n</ul>\n<p>一致代码段：要求  <code>CPL &gt;= DPL</code> <br />\n 非一致代码段：要求  <code>CPL == DPL</code>  并且  <code>RPL &lt;= DPL</code></p>\n<ul>\n<li><strong>4）加载段描述符</strong></li>\n</ul>\n<p>通过上面的权限检查后，CPU 会将段描述符加载到 CS 段寄存器中</p>\n<ul>\n<li><strong>5）代码执行</strong></li>\n</ul>\n<p>CPU 将  <code>CS.Base + Offset</code>  的值写入 EIP，然后执行 CS:EIP 处的代码</p>\n<p>段间跳转到此结束</p>\n<ul>\n<li><strong>6）总结</strong></li>\n</ul>\n<p>一致代码段（共享的段）<br />\n特权级高的程序不允许访问特权级低的数据：核心态不允许访问用户态的数据<br />\n特权级低的程序可以访问到特权级高的数据，但特权级不会改变：用户态还是用户态</p>\n<p>非一致代码段（普通代码段）<br />\n只允许同级访问<br />\n绝对禁止不同级别的访问：核心态不是用户态，用户态也不是核心态</p>\n<p><strong>注意：直接对代码段进行 JMP 或者 CALL 的操作，无论目标是一致代码段还是非一致代码段，CPL 都不会发生改变。如果要提升 CPL 的权限，只能通过调用门</strong></p>\n<h2 id=\"代码跳转实验\"><a class=\"anchor\" href=\"#代码跳转实验\">#</a> 代码跳转实验</h2>\n<p>验证 JMP FAR 指令执行的结果。自己构造一个段描述符，并使用对应的段选择子进行测试。</p>\n<h3 id=\"计算段选择子\"><a class=\"anchor\" href=\"#计算段选择子\">#</a> 计算段选择子</h3>\n<p>使用 Windbg 找到一处未被使用的段描述符：</p>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<p>确定了要被构造的段描述符的地址为： <code>0x8003f048</code></p>\n<p>根据 <strong>段描述符地址 = GDT 表首地址 + 索引 × 段描述符长度 = GDT 表首地址 + 索引 × 8</strong> 可以逆推出</p>\n<p><code>索引 =（ 段描述符地址 - GDT表首地址）÷ 8</code></p>\n<p>即 索引 = (0x8003f048-0x8003f000) ÷ 8 = 0x48 ÷ 8 = 72 ÷ 8 = 9</p>\n<p>既我们的段选择子的索引（Index）为 9，查询（Ti=0）GDT 表，请求特权（RPL=0b11）等级为 3。</p>\n<p>得到： <code>0000 0000 0100 1011</code>  既  <code>0x4B</code></p>\n<h3 id=\"构造段描述符\"><a class=\"anchor\" href=\"#构造段描述符\">#</a> 构造段描述符</h3>\n<table>\n<thead>\n<tr>\n<th>数据位</th>\n<th>31-24</th>\n<th>23</th>\n<th>22</th>\n<th>21</th>\n<th>20</th>\n<th>19-16</th>\n<th>15</th>\n<th>14-13</th>\n<th>12</th>\n<th>11-8</th>\n<th>7-0</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>含义</td>\n<td>Base</td>\n<td>G</td>\n<td>D/B</td>\n<td>0</td>\n<td>AVL</td>\n<td>Seg.Limit</td>\n<td>P</td>\n<td>DPL</td>\n<td>S</td>\n<td>Type</td>\n<td>Base</td>\n</tr>\n<tr>\n<td>解释</td>\n<td>基地址</td>\n<td>粒度</td>\n<td>默认操作大小</td>\n<td>固定为 0</td>\n<td>用于系统软件使用</td>\n<td>段大小限制</td>\n<td>有效位</td>\n<td>特权等级</td>\n<td>描述符类型</td>\n<td>段类型</td>\n<td>基地址</td>\n</tr>\n<tr>\n<td>数值</td>\n<td>00000000</td>\n<td>1</td>\n<td>1</td>\n<td>0</td>\n<td>0</td>\n<td>1111</td>\n<td>1</td>\n<td>00</td>\n<td>1</td>\n<td>1111</td>\n<td>0000000</td>\n</tr>\n</tbody>\n</table>\n<hr />\n<table>\n<thead>\n<tr>\n<th>数据位</th>\n<th>31-16</th>\n<th>15-0</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>含义</td>\n<td>Base Adress</td>\n<td>Segment Limit</td>\n</tr>\n<tr>\n<td>解释</td>\n<td>基地址</td>\n<td>段大小限制</td>\n</tr>\n<tr>\n<td>数值</td>\n<td>0000000000000000</td>\n<td>1111111111111111</td>\n</tr>\n</tbody>\n</table>\n<hr />\n<p>主要修改了 DPL 为 0；段类型设置为可执行可读，可从较低特权级别调用，可访问的 代码段描述符</p>\n<p>将上面的二进制拼接得到： <code>00cf9f00`0000ffff</code></p>\n<h3 id=\"写入段描述符\"><a class=\"anchor\" href=\"#写入段描述符\">#</a> 写入段描述符</h3>\n<p>将构造好的段描述符写入</p>\n<p>在 windbg 中使用指令</p>\n<p><code>eq  8003f048 00cf9f00`0000ffff</code></p>\n<p><code>eq ：edit qword</code> ，以 qword 的数据宽度编辑修改指定地址的数据</p>\n<p>指令格式为： <code>eq address data</code></p>\n<p>修改后再用 windbg 查看</p>\n<p><img data-src=\"image002.png\" alt=\"\" /></p>\n<h3 id=\"od测试指令\"><a class=\"anchor\" href=\"#od测试指令\">#</a> OD 测试指令</h3>\n<p>使用 OD 随便打开一个软件。选择一个跳转的地址。</p>\n<p><code>jmp 0x4B:0x0085F472</code></p>\n<p><img data-src=\"image003.png\" alt=\"\" /></p>\n<p>可以看到 EIP 被修改为了 Offset (偏移)，CS 被修改为了 Selector (段选择子)。EIP 和 CS 同时被修改了。</p>\n<p><img data-src=\"image004.png\" alt=\"\" /></p>\n<h3 id=\"尝试修改cpl\"><a class=\"anchor\" href=\"#尝试修改cpl\">#</a> 尝试修改 CPL</h3>\n<p>原本的 CPL 为 3，CPL 为当前特权级别，等于 CS 和 SS 的 RPL（请求特权级别）</p>\n<p>前面的其它操作不变，将段选择子的请求特权级别修改为 0</p>\n<p>即将段选择子修改为</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>Index</th>\n<th>TI</th>\n<th>RPL</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>二进制值</td>\n<td>0000 0000 0100 1</td>\n<td>0</td>\n<td>00</td>\n</tr>\n<tr>\n<td>十进制值</td>\n<td>9</td>\n<td>0</td>\n<td>0</td>\n</tr>\n<tr>\n<td>含义</td>\n<td>索引为 9</td>\n<td>查询 GDT 表</td>\n<td>请求特权等级为 0</td>\n</tr>\n</tbody>\n</table>\n<p>得到新的段选择子为 <code>0x48</code></p>\n<p>使用 OD 执行新的指令</p>\n<p><code>jmp 0x48:0x0085F47E</code></p>\n<p><img data-src=\"image005.png\" alt=\"\" /></p>\n<p>可以看到，CS 仍然是 0x4B，CPL 仍然没有发生改变，当前特权等级依旧为 3</p>\n<p>也就是说 CPL 无法通过这种方式改变</p>\n<h1 id=\"reference\"><a class=\"anchor\" href=\"#reference\">#</a> Reference</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxOTg4NDQ4L2FydGljbGUvZGV0YWlscy8xMDI1Nzk2OTU=\">https://blog.csdn.net/qq_41988448/article/details/102579695</span><br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuNTJwb2ppZS5jbi90aHJlYWQtMTQyMzQ4NC0xLTEuaHRtbA==\">https://www.52pojie.cn/thread-1423484-1-1.html</span></p>\n",
            "tags": [
                "跨段跳转流程",
                "JMP FAR指令"
            ]
        },
        {
            "id": "https://or0kit.github.io/Bin/Core/WindowsXp/Protect-Mode/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F-%E6%AE%B5%E6%9D%83%E9%99%90%E6%A3%80%E6%B5%8B/",
            "url": "https://or0kit.github.io/Bin/Core/WindowsXp/Protect-Mode/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F-%E6%AE%B5%E6%9D%83%E9%99%90%E6%A3%80%E6%B5%8B/",
            "title": "保护模式--段权限检测",
            "date_published": "2021-07-29T14:22:31.000Z",
            "content_html": "<h1 id=\"段权限检测\"><a class=\"anchor\" href=\"#段权限检测\">#</a> 段权限检测</h1>\n<h2 id=\"cpu权限等级划分\"><a class=\"anchor\" href=\"#cpu权限等级划分\">#</a> CPU 权限等级划分</h2>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<p>CPU 一共四个等级. ring3 - ring 0 而操作系统只使用了 ring3 与 ring0 所以 ring3 就是应用程序，ring0 就是内核程序。<br />\n应用程序不可以执行特权指令，内核程序可以执行特权指令。</p>\n<h1 id=\"cpl-rpl-dpl-介绍\"><a class=\"anchor\" href=\"#cpl-rpl-dpl-介绍\">#</a> CPL RPL DPL 介绍</h1>\n<p>描述符特权级 (DPL) 域 ——(段描述符的第二个双字的 bit 13 和 bit 14) 确定该段的特权级。<br />\n请求特权级 (RPL) 域 ——(段选择符的 bit 0 和 bit 1) 确定一个段选择符的请求特权级。<br />\n当前特权级 (CPL) 域 ——(CS 段寄存器的 bit 0 和 bit 1) 指明当前运行的进程的特权级。术语当前特权级 (CPL) 就是指该域的设置。</p>\n<ul>\n<li><strong>当前特权级（CPL）</strong></li>\n</ul>\n<p>描述：</p>\n<p>段寄存器 CS 的后两位比特位称为当前特权级<br />\n注意：段选择子 SS 和 CS 的后两位比特位相同</p>\n<p><em>如：</em></p>\n<pre><code>→ CS = 0x001B\n→ 0x001B = 二进制:0000 0000 0001 1011\n→ 二进制:11 = 十进制:3\n→ 因此：当前进程处于3环\n</code></pre>\n<ul>\n<li><strong>请求特权级（RPL）</strong></li>\n</ul>\n<p>描述：</p>\n<p>RPL 是段选择子结构中的一部分<br />\n RPL 是针对段选择子而言的，每个段的选择子都有自己的 RPL<br />\nRPL 表示用什么权限去访问一个段</p>\n<p><em>例：</em></p>\n<pre><code>MOV AX,0008\nMOV DS,AX\n与\nMOV AX,000B\nMOV DS,AX\n指向的是同一个段描述符，但RPL不同\n</code></pre>\n<ul>\n<li><strong>3）数据段的权限检查</strong></li>\n</ul>\n<p>检查：CPL&lt;= DPL 并且 RPL&lt;= DPL（数值上的比较）</p>\n<p><em>例：</em></p>\n<pre><code>当CPL = 0时执行以下指令：\n  MOV AX,000B\t\t\t// RPL=3，请求权限为3\n  MOV DS,AX\t\t\t// 假设ax指向的段描述符的DPL=0\n上述指令虽然满足了CPL&lt;=DPL，但RPL&gt;DPL，因此执行失败\n</code></pre>\n<p>注意：代码段和系统端描述符的检查方式不一样</p>\n<p><strong>既然已经有 CPL（当前特权级别）了，为什么还要有 RPL（请求特权级别）呢？<br />\n原因：我们本可以用 “读写” 的权限去打开一个文件，但为了避免出错，有些时候我们使用 “只读” 的权限去打开</strong></p>\n<h1 id=\"reference\"><a class=\"anchor\" href=\"#reference\">#</a> Reference</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxOTg4NDQ4L2FydGljbGUvZGV0YWlscy8xMDI1NjMzMjU=\">https://blog.csdn.net/qq_41988448/article/details/102563325</span></p>\n",
            "tags": [
                "CRL",
                "DPL",
                "RPL"
            ]
        },
        {
            "id": "https://or0kit.github.io/Bin/Core/WindowsXp/Protect-Mode/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F-%E6%AE%B5%E5%AF%84%E5%AD%98%E5%99%A8%E7%BB%93%E6%9E%84%E3%80%81%E6%AE%B5%E6%8F%8F%E8%BF%B0%E7%AC%A6%E3%80%81%E6%AE%B5%E9%80%89%E6%8B%A9%E5%AD%90/",
            "url": "https://or0kit.github.io/Bin/Core/WindowsXp/Protect-Mode/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F-%E6%AE%B5%E5%AF%84%E5%AD%98%E5%99%A8%E7%BB%93%E6%9E%84%E3%80%81%E6%AE%B5%E6%8F%8F%E8%BF%B0%E7%AC%A6%E3%80%81%E6%AE%B5%E9%80%89%E6%8B%A9%E5%AD%90/",
            "title": "保护模式--段寄存器结构、段描述符、段选择子",
            "date_published": "2021-07-29T13:25:00.000Z",
            "content_html": "<h1 id=\"段寄存器\"><a class=\"anchor\" href=\"#段寄存器\">#</a> 段寄存器</h1>\n<p>什么是段寄存器，有哪些段寄存器</p>\n<p>当我们用汇编读写某一个地址时： <code>mov dword ptr ds:[0x123456],eax</code> <br />\n 我们真正读写的地址是： <code>ds.base + 0x123456</code> <br />\n <code>ES</code>   <code>CS</code>   <code>SS</code>   <code>DS</code>   <code>FS</code>   <code>GS</code>   <code>LDTR</code>   <code>TR</code>  共 8 个</p>\n<p>代码段寄存器 CS（Code Segment）<br />\n存放当前正在运行的程序代码所在段的段基址，表示当前使用的指令代码可以从该段寄存器指定的存储器段中取得，相应的偏移量则由 IP 提供。</p>\n<p>数据段寄存器 DS（Data Segment）<br />\n指出当前程序使用的数据所存放段的最低地址，即存放数据段的段基址。</p>\n<p>堆栈段寄存器 SS（Stack Segment）<br />\n指出当前堆栈的底部地址，即存放堆栈段的段基址。</p>\n<p>附加段寄存器 ES（Extra Segment）<br />\n指出当前程序使用附加数据段的段基址，该段是串操作指令中目的串所在的段。</p>\n<p>FS、GS 是从 80386 开始增加的，没有全称。</p>\n<p>FS,GS 是 80386 起增加的两个辅助段寄存器，在这之前只有一个辅助段寄存器 ES, 增加这两个寄存器是为了减轻 ES 寄存器的负担，并能更好地配合适用于通用寄存器组的基址和变址寄存器。</p>\n<p>寄存器 FS 和 GS 是段寄存器。它们没有处理器定义的目的，而是由操作系统运行它们来赋予目的。<br />\n附加段寄存器，F 为上一个附加段寄存器字母 E 后的字母，没有对应的名称</p>\n<ul>\n<li><strong>FS</strong></li>\n</ul>\n<p>指向一种被称为线程信息块（TEB）的结构，这种结构是由内核在创建线程时创建的，用于支持操作系统相关功能、服务和 API</p>\n<ul>\n<li><strong>GS</strong></li>\n</ul>\n<p>附加段寄存器，G 为上一个附加段寄存器字母 F 后的字母，没有对应的名称</p>\n<p>在 32 位 Windows 上 GS 保留供将来使用</p>\n<p>在 x64 模式下，FS 和 GS 段寄存器已交换</p>\n<p>Win64 使用 GS 的原因是该 FS 寄存器用于 32 位兼容性层（称为 Wow64）</p>\n<p>32 位应用程序永远不会导致 GS 更改，而 64 位应用程序永远不会导致 FS 更改</p>\n<p>注意，在 Win64 和 Wow64 中 GS 是非零的，这可以用来检测一个 32 位应用程序是否在 64 位 Windows 中运行，在一个 “真正 “的 32 位 Windows 中 GS 总是零</p>\n<h2 id=\"段寄存器结构\"><a class=\"anchor\" href=\"#段寄存器结构\">#</a> 段寄存器结构</h2>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<p>段寄存器中有 16 位是可见部分，有 80 位是不可见部分，一共 96 位。<br />\n可见部分为 16 位的 Selector 部分<br />\n 16 位的 Attribute 为这个段寄存器的属性，它的意义为：表示该段寄存器是可读还是可写还是可执行的。<br />\n32 位的 Base 表示该段是从哪里开始的。<br />\n32 位的 Limit 表示整个段的长度有多少。</p>\n<h2 id=\"段寄存器的读写\"><a class=\"anchor\" href=\"#段寄存器的读写\">#</a> 段寄存器的读写</h2>\n<p>读段寄存器的时候只能够读 16 位。<br />\n比如： <code>mov ax,es</code>  只能读 16 位的可见部分</p>\n<p>读写 LDTR 的指令为： <code>SLDT/LLDT</code></p>\n<p>读写 TR 的指令为： <code>STR/LTR</code></p>\n<p>写段寄存器的时候写的是 96 位。<br />\n比如： <code>mov ds,ax</code>  写时是写 96 位</p>\n<h2 id=\"加载段描述符至段寄存器\"><a class=\"anchor\" href=\"#加载段描述符至段寄存器\">#</a> 加载段描述符至段寄存器</h2>\n<p>除了 MOV 指令，还可以使用 LES、LSS、LDS、LFS、LGS 指令修改段寄存器</p>\n<p>例如：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">char</span> buffer<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>__asm<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  les ecx<span class=\"token punctuation\">,</span>fword ptr ds<span class=\"token operator\">:</span><span class=\"token punctuation\">[</span>buffer<span class=\"token punctuation\">]</span>  <span class=\"token comment\">// 高 2 个字节给 es, 低四个字节给 ecx</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"段寄存器属性简介\"><a class=\"anchor\" href=\"#段寄存器属性简介\">#</a> 段寄存器属性简介</h2>\n<p>段寄存器 | Selector | Attribute    | Base       | Limit</p>\n<p>GS 寄存器 Windows 并没有使用。</p>\n<h2 id=\"gdt全局描述符表-ldt局部描述符表\"><a class=\"anchor\" href=\"#gdt全局描述符表-ldt局部描述符表\">#</a> GDT (全局描述符表) LDT (局部描述符表)</h2>\n<p><strong>LDT 表在 Windows 中并没有使用。</strong><br />\n当我们执行类似  <code>mov ds,ax</code>  指令时，CPU 会查表，根据  <code>ax</code>  的值来决定查找  <code>GDT</code>  还是  <code>LDT</code> , 查找表的什么位置，查出多少数据。<br />\n <code>gdtr</code>  寄存器中存储了  <code>GDT</code>  表的起始地址和  <code>gdt</code>  表中的长度<br />\n gdtr 是 48 位的寄存器，其中 32 位存储的这张表的位置，16 位存储的这张表的大小。</p>\n<p><strong>在 windbg 中查看</strong></p>\n<pre><code>r gdtr //gdt表的存储位置\nr gdtl //gdt表的大小\n</code></pre>\n<p><img data-src=\"image002.png\" alt=\"\" /></p>\n<p>每次从  <code>GDT</code>  表中查表：每 8 个字节为一个<strong>段描述符</strong>。</p>\n<h1 id=\"段选择子\"><a class=\"anchor\" href=\"#段选择子\">#</a> 段选择子</h1>\n<p>段选择子是一个 16 位的段描述符，该描述符指向了定义该段的段描述符.</p>\n<h2 id=\"段选择子和段寄存器的对应关系\"><a class=\"anchor\" href=\"#段选择子和段寄存器的对应关系\">#</a> 段选择子和段寄存器的对应关系</h2>\n<p>对应可见部分的 16 位既段寄存器中的 Selector。</p>\n<h2 id=\"段选择子的结构\"><a class=\"anchor\" href=\"#段选择子的结构\">#</a> 段选择子的结构</h2>\n<p><img data-src=\"image009.png\" alt=\"\" /></p>\n<p>RPL：请求特权级别<br />\n TI：TI=0 查 GDT 表；TI=1 查 LDT 表<br />\n Index：处理器将索引值乘以 8 在加上 GDT 或者 LDT 的基地址，就是要加载的段描述符</p>\n<h1 id=\"段描述符\"><a class=\"anchor\" href=\"#段描述符\">#</a> 段描述符</h1>\n<h2 id=\"段描述符的结构\"><a class=\"anchor\" href=\"#段描述符的结构\">#</a> 段描述符的结构</h2>\n<p><img data-src=\"image003.png\" alt=\"\" /></p>\n<ol>\n<li>\n<p>16 位的 Attribute 对应段寄存器中高四字节从 8 位开始到第 23 位结束。</p>\n</li>\n<li>\n<p>32 位的 Base 包含了三个部分：</p>\n<ul>\n<li>高四字节的第 24 位到第 31 部分</li>\n<li>高四字节的第 0 位到第 7 位</li>\n<li>低四字节的第 16 位到 31 位</li>\n</ul>\n</li>\n<li>\n<p>32 位的 Limit 包括两部分一共二十位（最大值为 FFFFF）：</p>\n<ul>\n<li>高四字节的 16 位到 19 位</li>\n<li>低四个字节的 0 位到 15 位</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"段描述符的属性\"><a class=\"anchor\" href=\"#段描述符的属性\">#</a> 段描述符的属性</h2>\n<p>段寄存器的值是通过段描述符填写的，但段描述符只有 64 位，可是要填写的有 80 位，如何从 64 位变成 80 位呢？</p>\n<h3 id=\"p位\"><a class=\"anchor\" href=\"#p位\">#</a> P 位</h3>\n<p>P 位 位于段描述符的高四个字节的第 15 位（下标为 15）的位置.</p>\n<p>P = 1 段描述符有效<br />\n P = 0 段描述符无效</p>\n<p>当使用指令将段描述符加载至段寄存器的时候，CPU 第一个检测的就是 P 位，当 P 位为 0 时就不做继续的检测了。</p>\n<p><img data-src=\"image004.png\" alt=\"\" /></p>\n<p>在段描述符中，只要看这一行的数是否小于 8，若小于 8，则证明 P 位 = 0 段描述符无效。</p>\n<h3 id=\"g位\"><a class=\"anchor\" href=\"#g位\">#</a> G 位</h3>\n<p>G 位 位于段描述符的高四个字节的第 23 位（下标为 23）的位置。</p>\n<p>G=0 的时候：表示 Limit 字段单位（粒度）是字节：最大值就是 limit 域。<br />\nG=1 的时候：表示 Limit 字段单位（粒度）是 4KB：最大值就是 limit 域 * 0x4K + 0xFFF。</p>\n<p><img data-src=\"image005.png\" alt=\"\" /></p>\n<p>在段描述符中，只要看这一行的数是否小于 8，若小于 8，则证明 G 位 = 0。</p>\n<h3 id=\"s位\"><a class=\"anchor\" href=\"#s位\">#</a> S 位</h3>\n<p>S 位 位于段描述符的高四个字节的第 12 位（下标为 12）的位置。</p>\n<p>S = 1 时表示： 代码段或者数据段描述符<br />\n S = 0 时表示： 系统段描述符</p>\n<ul>\n<li><strong>十六进制下，从右到左看高字节的第五位，若是偶数则 S 位 = 0，若是奇数则 S 位 = 1。</strong></li>\n</ul>\n<h3 id=\"type域\"><a class=\"anchor\" href=\"#type域\">#</a> type 域</h3>\n<p>type 域 包含段描述符的高四个字节的 8、9、10、11 共四位。</p>\n<p><img data-src=\"image006.png\" alt=\"\" /></p>\n<h4 id=\"数据段\"><a class=\"anchor\" href=\"#数据段\">#</a> 数据段</h4>\n<p>当 s 位为 1 且当 type 域中的 11 位为 0 时，表示是数据段。<br />\n其中图中的 A、W、E 分别代表不同的意思</p>\n<p><img data-src=\"image007.png\" alt=\"\" /></p>\n<p>E 位表示拓展位，为 0 表示向上拓展，为 1 表示向下拓展。<br />\n向上拓展：有效范围为 <code>fs.Base ~ fs.Base+Limit</code> <br />\n 向下拓展：有效范围除了 <code>fs.Base ~ fs.Base+Limit</code></p>\n<h4 id=\"代码段\"><a class=\"anchor\" href=\"#代码段\">#</a> 代码段</h4>\n<p>当 s 位为 1 且当 type 域中的 11 位为 1 时，表示是代码段。<br />\n其中图中的 A、R、C 分别代表不同的意思</p>\n<p>A 代表是否访问过，未访问过为 0，访问过为 1。<br />\nR 代表是否可读位，表示该段是否可以读。<br />\nC 代表一致位：C = 1 表示一致代码段 ，C = 0 表示非一致代码段</p>\n<h4 id=\"系统描述符\"><a class=\"anchor\" href=\"#系统描述符\">#</a> 系统描述符</h4>\n<p>当 s 位为 0 的时候，表示该段描述符为系统描述符。系统描述符有分为以下类型：</p>\n<p><img data-src=\"image008.png\" alt=\"\" /></p>\n<h3 id=\"dpl\"><a class=\"anchor\" href=\"#dpl\">#</a> DPL</h3>\n<ul>\n<li><strong>描述：</strong></li>\n</ul>\n<p>DPL 存储在段描述符中，规定了访问所在段描述符所需要的特权级别是多少<br />\n DPL 数值越大，访问所在段描述符所需要的权限越低<br />\n注意：在 Windows 中，DPL 只会出现两种情况，要么全为 0，要么全为 1</p>\n<p><strong>十六进制下，从右到左看高字节的第五位，若是 <code>8</code>  或 <code>9</code>  则 DPL=0，若是 <code>E</code>  或 <code>F</code>  则 DPL=3。</strong></p>\n<ul>\n<li><strong>例：</strong></li>\n</ul>\n<p>若 AX 指向的段描述符的 DPL=0，但当前程序的 CPL=3，那么这条指令是不会成功的！</p>\n<h3 id=\"db位\"><a class=\"anchor\" href=\"#db位\">#</a> D\\B 位</h3>\n<p><strong>情况 1：对 CS 段的影响</strong></p>\n<p>D=1：采用 32 位寻址方式<br />\n D=0：采用 16 位寻址方式</p>\n<p><strong>情况 2：对 SS 段的影响</strong></p>\n<p>D=1：隐式堆栈访问指令（如：PUSH POP CALL）使用 32 位堆栈指针寄存器 ESP<br />\nD=0：隐式堆栈访问指令（如：PUSH POP CALL）使用 16 位堆栈指针寄存器 SP</p>\n<p><strong>情况 3：向下拓展的数据段</strong></p>\n<p>D=1：段上限为 4GB<br />\nD=0：段上限为 64KB</p>\n<p><img data-src=\"image010.png\" alt=\"\" /></p>\n<h2 id=\"reference\"><a class=\"anchor\" href=\"#reference\">#</a> Reference</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2OTE2MTc5L2FydGljbGUvZGV0YWlscy85MTU1MDYzMQ==\">https://blog.csdn.net/qq_36916179/article/details/91550631</span><br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2OTE2MTc5L2FydGljbGUvZGV0YWlscy85MTYyMTk0Nw==\">https://blog.csdn.net/qq_36916179/article/details/91621947</span><br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxOTg4NDQ4L2FydGljbGUvZGV0YWlscy8xMDI1NjMzMjU=\">https://blog.csdn.net/qq_41988448/article/details/102563325</span></p>\n",
            "tags": [
                "段寄存器结构",
                "段描述符",
                "段选择子",
                "GDT表"
            ]
        }
    ]
}