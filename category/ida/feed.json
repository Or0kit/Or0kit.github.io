{
    "version": "https://jsonfeed.org/version/1",
    "title": "Or0kit • All posts by \"ida\" category",
    "description": "临渊羡鱼，不如退而结网",
    "home_page_url": "https://Or0kit.github.io",
    "items": [
        {
            "id": "https://or0kit.github.io/Bin/IDA%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/",
            "url": "https://or0kit.github.io/Bin/IDA%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/",
            "title": "IDA入门学习",
            "date_published": "2021-08-18T13:17:52.000Z",
            "content_html": "<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<p>为什么学习 IDA，滴水中级班课程大部分时间是在分析系统内核文件，用到的工具主要就是 IDA。</p>\n<p>最近在看中级班课程，发现基础太烂了，自闭 ing……</p>\n<p>IDA 是一款静态分析工具。</p>\n<h1 id=\"正文\"><a class=\"anchor\" href=\"#正文\">#</a> 正文</h1>\n<h2 id=\"打开文件-关闭文件\"><a class=\"anchor\" href=\"#打开文件-关闭文件\">#</a> 打开文件、关闭文件</h2>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<p>可以直接打开一个文件，也可以单独打开 IDA。</p>\n<p><img data-src=\"image002.png\" alt=\"\" /></p>\n<p>单独打开 IDA 后再打开文件，也可以直接把文件拖到 IDA 中。</p>\n<p><img data-src=\"image003.png\" alt=\"\" /></p>\n<p>我们直接点击 OK。</p>\n<p><img data-src=\"image004.png\" alt=\"\" /></p>\n<p>加载符号链接。</p>\n<p><img data-src=\"image005.png\" alt=\"\" /></p>\n<p>这时文件已经正确打开</p>\n<p><img data-src=\"image006.png\" alt=\"\" /></p>\n<p>接下来是关闭文件，关闭文件是需要注意的，上图我们可以发现，在调试文件下发生成了几个文件，这是 IDA 的要用到的数据库文件。</p>\n<p>当我们要关闭文件的时候</p>\n<p><img data-src=\"image007.png\" alt=\"\" /></p>\n<p>如果不打包的话数据库文件还是分着放，如果选择打包，则会生成一个 idb 文件。</p>\n<p><img data-src=\"image008.png\" alt=\"\" /></p>\n<p>在分析文件时都会修改很多东西，修改的内容会保存在 idb 文件里面，以后打开文件，就不用打开源文件了，可以直接打开这个 idb 文件。</p>\n<p>当文件越来越大时，可以勾选收集垃圾，来删除不必要的内容。</p>\n<p>最后一个选项挺重要的，比如说某次我在 IDA 文件中做了很多操作后，我不想要这次的操作了，这时退出的时候就可以选中不保存数据库，这次的操作就不会保存，还停留在文件打开之前的样子。这是在 IDA 中放弃错误操作的唯一的办法。</p>\n<h2 id=\"窗口介绍图形-文本-其他窗口介绍\"><a class=\"anchor\" href=\"#窗口介绍图形-文本-其他窗口介绍\">#</a> 窗口介绍：图形、文本、其他窗口介绍</h2>\n<p>CTRL + 滚轮 放大，放小</p>\n<p>空格 切换图形 / 文本界面</p>\n<p>IDA View-A 反汇编窗口</p>\n<p>Hex View-A 十六进制窗口</p>\n<p>Imports 导入表函数窗口</p>\n<p>Exports 导出函数窗口</p>\n<p>Structures 结构体窗口  IDA 识别出来的当然是有限的的，还有很多识别不出来的，我们可以在这个窗口中创建。</p>\n<p>等等窗口，可以在工具栏调用出来</p>\n<p><img data-src=\"image009.png\" alt=\"\" /></p>\n<h2 id=\"显示硬编码-acdu指令\"><a class=\"anchor\" href=\"#显示硬编码-acdu指令\">#</a> 显示硬编码 -&gt; ACDU 指令</h2>\n<p>并没有显示硬编码</p>\n<p><img data-src=\"image010.png\" alt=\"\" /></p>\n<p>设置显示出硬编码</p>\n<p><img data-src=\"image011.png\" alt=\"\" /></p>\n<p><img data-src=\"image012.png\" alt=\"\" /></p>\n<p>学习过硬编码的任都知道，一行最多是十六个字节，所以这里设置的再多，也会被 IDA 修改为 16。</p>\n<p><img data-src=\"image013.png\" alt=\"\" /></p>\n<p>绝大多数 IDA 能正常的够把硬编码转换成汇编指令。</p>\n<p>但是当需要分析的程序经过了处理，IDA 就识别不了了。</p>\n<p>明明是数据的部分，却被识别为指令、明明是指令的部分，却被识别为数据。</p>\n<p>这就需要 <code>ACDU</code>  这几个命令了。</p>\n<p>A: 把当前的数据用字符串的形式显示。<br />\nC: 把当前的数据用代码的形式显示。<br />\nD: 把当前的数据用数据的形式显示。<br />\nU: 把当前的数据用原始的字节的的形式显示。</p>\n<p><img data-src=\"image014.png\" alt=\"\" /></p>\n<p>以这段 nop 指令为例。</p>\n<p>A 命令</p>\n<p><img data-src=\"image015.png\" alt=\"\" /></p>\n<p>C 命令</p>\n<p><img data-src=\"image016.png\" alt=\"\" /></p>\n<p>D 命令<br />\n按一次 D 以一个字节显示 <code>db</code> , 再按一次以 <code>dw</code> , 再按一次以 <code>dd</code>  显示。</p>\n<p><img data-src=\"image017.png\" alt=\"\" /></p>\n<p>U 命令</p>\n<p><img data-src=\"image018.png\" alt=\"\" /></p>\n<h2 id=\"跳转指令-g\"><a class=\"anchor\" href=\"#跳转指令-g\">#</a> 跳转指令: G</h2>\n<p>直接按 <code>G</code>  键 然后输入我们要跳转的地址</p>\n<p><img data-src=\"image019.png\" alt=\"\" /></p>\n<h2 id=\"搜索指令alt-t\"><a class=\"anchor\" href=\"#搜索指令alt-t\">#</a> 搜索指令：ALT + T</h2>\n<p><code>ALT + T</code>  搜索某一个关键词、函数名。</p>\n<p><img data-src=\"image020.png\" alt=\"\" /></p>\n<h2 id=\"改名字n\"><a class=\"anchor\" href=\"#改名字n\">#</a> 改名字：N</h2>\n<p>这个命令非常重要。<br />\n真正的逆向分析，就是弄清楚这个函数做了什么事情，那么当我们分析完后，就要给这个函数起一个名字了，这个名字一般都代表这这个函数的功能。所以起名字的过程就是逆向分析的过程。</p>\n<p><img data-src=\"image021.png\" alt=\"\" /></p>\n<h2 id=\"创建结构体-修改全局变量-修改局部变量\"><a class=\"anchor\" href=\"#创建结构体-修改全局变量-修改局部变量\">#</a> 创建结构体、修改全局变量、修改局部变量</h2>\n<p>当我们分析出了一个结构体，但 IDA 中并没有识别出这个结构体，那我们就要自己添加结构体了。</p>\n<p>点开 <code>structures</code>  视图窗口</p>\n<p>然后选择添加结构体类型</p>\n<p><img data-src=\"image022.png\" alt=\"\" /></p>\n<p>随便起个名字叫 CCCC</p>\n<p><img data-src=\"image023.png\" alt=\"\" /></p>\n<h3 id=\"在结构体中添加成员\"><a class=\"anchor\" href=\"#在结构体中添加成员\">#</a> 在结构体中添加成员</h3>\n<p>按 <code>D</code>  键</p>\n<p><img data-src=\"image024.png\" alt=\"\" /></p>\n<p>这个结构体成员的名字和类型都是可以改的，修改类型可以接着按 <code>D</code>  键，修改名字按 <code>N</code>  键</p>\n<h3 id=\"如果结构体的成员也是一个结构体\"><a class=\"anchor\" href=\"#如果结构体的成员也是一个结构体\">#</a> 如果结构体的成员也是一个结构体</h3>\n<p>新增一个成员后，按 <code>ALT + Q</code>  就会列出当前已经记录的结构体</p>\n<p><img data-src=\"image025.png\" alt=\"\" /></p>\n<h3 id=\"如果第三个成员是dword数组\"><a class=\"anchor\" href=\"#如果第三个成员是dword数组\">#</a> 如果第三个成员是 DWORD 数组</h3>\n<p>先新建一个 DWORD 类型的成员，然后右键选择数组，输入数组的大小确定。</p>\n<p><img data-src=\"image026.png\" alt=\"\" /><br />\n<img data-src=\"image027.png\" alt=\"\" /></p>\n<p>结果：</p>\n<p><img data-src=\"image028.png\" alt=\"\" /></p>\n<h3 id=\"修改全局变量\"><a class=\"anchor\" href=\"#修改全局变量\">#</a> 修改全局变量</h3>\n<p>创建这个结构体后，我们就可以在 IDA 中引用这个结构体了</p>\n<p>这是一个 IDA 自己识别的一个全局变量</p>\n<p><img data-src=\"image029.png\" alt=\"\" /></p>\n<p>双击跟进去查看</p>\n<p><img data-src=\"image030.png\" alt=\"\" /></p>\n<p>发现它是一个 <code>dd</code>  类型的变量，我们假设它的类型是一个结构体，那我们把它的类型改为我们创建的结构体，按 <code>ALT + Q</code>  选择结构体。</p>\n<p><img data-src=\"image031.png\" alt=\"\" /></p>\n<p>变量的名字也是可以改的</p>\n<p><img data-src=\"image032.png\" alt=\"\" /></p>\n<p>可以发现我们已经修改了全局变量的类型，并且 IDA 也自动识别了用的是结构体中的那个成员。</p>\n<p><img data-src=\"image033.png\" alt=\"\" /></p>\n<h3 id=\"修改局部变量\"><a class=\"anchor\" href=\"#修改局部变量\">#</a> 修改局部变量</h3>\n<p>比如我们发现这个 ebx 就是一个结构体，那我们选中它后按 <code>T</code></p>\n<p><img data-src=\"image034.png\" alt=\"\" /></p>\n<p><img data-src=\"image035.png\" alt=\"\" /></p>\n<p>这样我们就在局部变量里面引用了自己定义的结构体</p>\n<p><img data-src=\"image036.png\" alt=\"\" /></p>\n<h2 id=\"注释\"><a class=\"anchor\" href=\"#注释\">#</a> 注释</h2>\n<p>IDA 里面的注释是非常重要的。</p>\n<ol>\n<li>直接按 <code>;</code></li>\n</ol>\n<p><img data-src=\"image037.png\" alt=\"\" /></p>\n<p>这种注释有一个特点就是：任何往这个地方跳的地方，IDA 都会在那个地方再显示一份，这有好处也有坏处，你希望它显示那它就是好的，你不希望它显示那它就是不好，显示的话如果注释多了，就会显得特别乱。</p>\n<p><img data-src=\"image038.png\" alt=\"\" /></p>\n<ol start=\"2\">\n<li><code>:</code>  注释</li>\n</ol>\n<p>冒号注释，只显示一次。</p>\n<p><img data-src=\"image039.png\" alt=\"\" /></p>\n<ol start=\"3\">\n<li>像正向写代码一样给函数写注释</li>\n</ol>\n<p>选中函数名，按<strong>注释命令</strong>就可以像正向写代码一样给函数写注释描绘函数的基本特征，并且会生成在汇编指令上方。</p>\n<p><img data-src=\"image040.png\" alt=\"\" /></p>\n<h2 id=\"交叉引用\"><a class=\"anchor\" href=\"#交叉引用\">#</a> 交叉引用</h2>\n<p>这也是逆向分析中经常用到的功能。</p>\n<p>当我们想知道一个函数都被哪里引用的时候可以看这里</p>\n<p><img data-src=\"image041.png\" alt=\"\" /></p>\n<p>但是这里显示的并不全。</p>\n<p>我们可以选中这个函数名，在工具栏中打开交叉引用视图窗口</p>\n<p><img data-src=\"image042.png\" alt=\"\" /></p>\n<p>这里就会显示出所有引用这个函数的地方</p>\n<p><img data-src=\"image043.png\" alt=\"\" /></p>\n<p>上面演示的是一个函数的交叉引用，变量也可以被查看在哪里被引用了。</p>\n<h2 id=\"练习说明\"><a class=\"anchor\" href=\"#练习说明\">#</a> 练习说明</h2>\n<ul>\n<li>掌握 IDA 基本操作</li>\n<li>汇编逆向 C 语言</li>\n</ul>\n<p>SiCore.sys 文件整理。<br />\n把每一个函数的汇编转换为 C 代码。</p>\n",
            "tags": [
                "IDA"
            ]
        }
    ]
}