{
    "version": "https://jsonfeed.org/version/1",
    "title": "Or0kit • All posts by \"保护模式\" category",
    "description": "临渊羡鱼，不如退而结网",
    "home_page_url": "https://Or0kit.github.io",
    "items": [
        {
            "id": "https://or0kit.github.io/Bin/Core/WindowsXp/Protect-Mode/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F-%E9%98%B6%E6%AE%B5%E6%B5%8B%E8%AF%95/",
            "url": "https://or0kit.github.io/Bin/Core/WindowsXp/Protect-Mode/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F-%E9%98%B6%E6%AE%B5%E6%B5%8B%E8%AF%95/",
            "title": "保护模式-阶段测试",
            "date_published": "2021-09-03T14:46:00.000Z",
            "content_html": "<h1 id=\"保护模式阶段测试\"><a class=\"anchor\" href=\"#保护模式阶段测试\">#</a> 保护模式阶段测试</h1>\n<ol>\n<li>\n<p>给定一个线性地址，和长度，读取内容；<br />\nint ReadMemory(OUT BYTE* buffer,IN DWORD dwAddr,IN DWORD dwLeght)<br />\n 要求：<br />\n1) 可以自己指定分页方式。<br />\n2) 页不存在，要提示，不能报错。<br />\n3) 可以正确读取数据。</p>\n</li>\n<li>\n<p>申请长度为 100 的 DWORD 的数组，且每项用该项的地址初始化；<br />\n把这个数组所在的物理页挂到 0x1000 的地址上；<br />\n 定义一个指针，指向 0x1000 这个页里的数组所在的地址，用 0x1000 这个页的线性地址打印出这数组的值；</p>\n</li>\n</ol>\n<p>要求：<br />\n数组所在的物理页，是同一个页；</p>\n<h2 id=\"第一题\"><a class=\"anchor\" href=\"#第一题\">#</a> 第一题</h2>\n<p><strong>所遇问题：</strong></p>\n<p>在运行程序时发现了一个问题，用 VC 6.0 编译 C 语言是 总是提示一个错误：error C2143: syntax error : missing ‘;’ before ‘type’。解决方法如下：把所有变量的声明放在可执行代码之前。</p>\n<p>出现此问题的原因在于：将文件保存成了 .c 格式。如果是 cpp 格式就能正常编译。改成.cpp 就可以正常运行，和你变量声明的位置就没有关系了。*</p>\n<p>一般在 ANSI C 或者 C++ 中，在可执行代码中随时定义变量是允许的，但是在 K&amp;R C 中是不允许的，因此才会出现这个错误。VC6.0 、VS2008 都是用的 K&amp;R C 来实现 C 语言的，因此编译过程中会报错。</p>\n<p><strong>代码：</strong></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;Windows.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">DATALEN</span> <span class=\"token expression\"><span class=\"token number\">0x200</span></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>DWORD somedata<span class=\"token punctuation\">[</span>DATALEN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 数据源</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>DWORD mybuff<span class=\"token punctuation\">[</span>DATALEN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 空白缓冲区</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 2-9-9-12 分页读内存，要判断线性地址有效性，要能正确处理跨页的情况</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>BOOL <span class=\"token function\">ReadMemory</span><span class=\"token punctuation\">(</span>OUT BYTE<span class=\"token operator\">*</span> buffer<span class=\"token punctuation\">,</span> IN DWORD dwAddr<span class=\"token punctuation\">,</span> IN DWORD dwLength<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tDWORD i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token comment\">//__asm int 3;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token comment\">// 以字节为单位读取</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> dwLength<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\tDWORD PDE <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>DWORD<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xc0600000</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>dwAddr <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span> <span class=\"token operator\">>></span> <span class=\"token number\">18</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x3ff8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\tDWORD PTE <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>DWORD<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xc0000000</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>dwAddr <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span> <span class=\"token operator\">>></span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x7ffff8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>PDE <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x00000001</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//&amp; 比 == 的运算级高</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> FALSE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>PTE <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x00000001</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>PTE <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>PTE <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xFFFFFC1F</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">return</span> FALSE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\tbuffer<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>PBYTE<span class=\"token punctuation\">)</span>dwAddr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token keyword\">return</span> TRUE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">__declspec</span><span class=\"token punctuation\">(</span>naked<span class=\"token punctuation\">)</span> <span class=\"token function\">R0Function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t__asm</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\tpushad</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\tpushfd</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t<span class=\"token comment\">// 读 NULL 指针，错误原因：请求零页面</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t<span class=\"token comment\">//ReadMemory((PBYTE)mybuff, 0, 0x1000);</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t<span class=\"token function\">ReadMemory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>PBYTE<span class=\"token punctuation\">)</span>mybuff<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>somedata<span class=\"token punctuation\">,</span>DATALEN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t__asm</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t\tpopfd</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t\tpopad</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t\tiretd</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t<span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t<span class=\"token comment\">// 初始化数据</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> DATALEN<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> somedata<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t<span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>mybuff<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> DATALEN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t<span class=\"token comment\">// 提权到 R0 测试 ReadMemory 函数</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\t<span class=\"token comment\">//DbgPrint = (DBGPRINT) GetProcAddress (LoadLibraryA (\"ntdll.dll\"), \"DbgPrint\"); // 载入函数</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"在IDT表构建中断门，请在windbg中执行下面的指令：\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"eq 8003f500 %04xee00`0008%04x\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>R0Function <span class=\"token operator\">>></span> <span class=\"token number\">16</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>R0Function <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x0000FFFF</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\t<span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\t__asm <span class=\"token keyword\">int</span> <span class=\"token number\">0x20</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">memcmp</span><span class=\"token punctuation\">(</span>mybuff<span class=\"token punctuation\">,</span> somedata<span class=\"token punctuation\">,</span> DATALEN<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"读取失败.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>\t\t<span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"读取成功.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>\t\t<span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"第二题\"><a class=\"anchor\" href=\"#第二题\">#</a> 第二题</h2>\n<p><strong>所遇问题</strong></p>\n<p>将 C 代码在 VC<ins> 中编译，经常会出现 error C2275 错误，结果是变量的定义位置不对，应该在函数块的最前面。<br />\n这是一个编程习惯的问题。<br />\n在移植 c</ins> 代码到 c 的时候，经常会出现一个奇怪的错误：“error C2275: “xxxxx”: 将此类型用作表达式非法”<br />\n 这个错误是由于 c 的编译器要求将变量的申明放在一个函数块的头部，而 c++ 没有这样的要求造成的。<br />\n解决的办法就是把变量的声明全部放在变量的生存块的开始。</p>\n<p>代码：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;Windows.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>DWORD <span class=\"token operator\">*</span>arr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">__declspec</span><span class=\"token punctuation\">(</span>naked<span class=\"token punctuation\">)</span> <span class=\"token function\">R0Function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t__asm</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\tpushad</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\tpushfd</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\tmov eax<span class=\"token punctuation\">,</span> dword ptr<span class=\"token punctuation\">[</span>arr<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\tshr eax<span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\tand eax<span class=\"token punctuation\">,</span> <span class=\"token number\">7FFFF</span><span class=\"token number\">8</span>h<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\tsub eax<span class=\"token punctuation\">,</span> <span class=\"token number\">40000000</span>h<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\tmov ebx<span class=\"token punctuation\">,</span> <span class=\"token number\">0x1000</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\tshr ebx<span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\tand ebx<span class=\"token punctuation\">,</span> <span class=\"token number\">7FFFF</span><span class=\"token number\">8</span>h<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\tsub ebx<span class=\"token punctuation\">,</span> <span class=\"token number\">40000000</span>h<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\tmov eax<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>eax<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\tmov <span class=\"token punctuation\">[</span>ebx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> eax<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\tpopfd</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\tpopad</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\tiretd</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token comment\">// 定义 0x1000 指针</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\tDWORD<span class=\"token operator\">*</span> ptr <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>DWORD<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token number\">0x1000</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token comment\">// 申请数组并初始化</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\tarr <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>DWORD<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">VirtualAlloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x1000</span><span class=\"token punctuation\">,</span> MEM_COMMIT<span class=\"token punctuation\">,</span> PAGE_READWRITE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\tarr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>arr <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t<span class=\"token comment\">// 挂物理页</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"在IDT表构建中断门，请在windbg中执行下面的指令：\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"eq 8003f500 %04xee00`0008%04x\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>R0Function <span class=\"token operator\">>></span> <span class=\"token number\">16</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>R0Function <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x0000FFFF</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t<span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t__asm <span class=\"token keyword\">int</span> <span class=\"token number\">0x20</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t<span class=\"token comment\">// 通过 0x1000 打印数组</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%x\\n\"</span><span class=\"token punctuation\">,</span> ptr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t<span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"reference\"><a class=\"anchor\" href=\"#reference\">#</a> Reference</h1>\n<p>[关于 C++ 程序编译出现 error C2143: syntax error : missing ';' before 'type' 的解决办法]<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xjcl9oYXBweS9hcnRpY2xlL2RldGFpbHMvNTI0Njc2OTM=\">https://blog.csdn.net/lcr_happy/article/details/52467693</span><br />\n [error C2275 将此类型用作表达式非法]<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xxazE5ODUvYXJ0aWNsZS9kZXRhaWxzLzczODkxNTk=\">https://blog.csdn.net/lqk1985/article/details/7389159</span><br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0t3YW5zeS9hcnRpY2xlL2RldGFpbHMvMTA5MDI0NTA0\">https://blog.csdn.net/Kwansy/article/details/109024504</span></p>\n",
            "tags": [
                "error C2143",
                "error C2275"
            ]
        },
        {
            "id": "https://or0kit.github.io/Bin/Core/WindowsXp/Protect-Mode/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F-PWT%E4%B8%8EPCD%E5%B1%9E%E6%80%A7/",
            "url": "https://or0kit.github.io/Bin/Core/WindowsXp/Protect-Mode/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F-PWT%E4%B8%8EPCD%E5%B1%9E%E6%80%A7/",
            "title": "保护模式-PWT与PCD属性",
            "date_published": "2021-09-03T14:45:30.000Z",
            "content_html": "<h1 id=\"楔子\"><a class=\"anchor\" href=\"#楔子\">#</a> 楔子</h1>\n<p>在学习 PDE 与 PTE 的属性时，我们对两个位做了 <strong>保留</strong> ，并没有说明其作用，那就是今天要学习的<strong> PWT 位</strong>与<strong> PCD 位</strong></p>\n<h2 id=\"cpu缓存\"><a class=\"anchor\" href=\"#cpu缓存\">#</a> CPU 缓存</h2>\n<p>描述：</p>\n<ol>\n<li>CPU 缓存是位于<strong> CPU</strong> 与<strong>物理内存</strong>之间的 <strong>临时存储器</strong> ，它的 <strong>容量比内存小的多</strong> ，但是<strong>交换速度（读写速度）比内存要快得多</strong></li>\n<li>CPU 缓存可以做的很大，有几 K、几十 K、几百 K、甚至上 M，这决定于<strong> CPU 的版本</strong></li>\n</ol>\n<h3 id=\"cpu缓存与tlb的区别\"><a class=\"anchor\" href=\"#cpu缓存与tlb的区别\">#</a> CPU 缓存与 TLB 的区别</h3>\n<p>TLB：</p>\n<blockquote>\n<p>存储了  <code>线性地址</code> 与  <code>物理地址</code> 之间的对应关系</p>\n</blockquote>\n<p>CPU 缓存：</p>\n<blockquote>\n<p>存储了  <code>物理地址</code> 与  <code>内容</code> 之间的对应关系</p>\n</blockquote>\n<p>有了 CPU 缓存，当 CPU 再去<strong>查找 / 读取</strong>某一个线性地址对应的物理页时，就可以：</p>\n<ol>\n<li>先查 <strong>TLB</strong> ，找到它的<strong>物理地址</strong></li>\n<li>再找 <strong>CPU 缓存</strong> ，找到它的<strong>内容</strong></li>\n</ol>\n<p>CPU 缓存的大小决定了 CPU 的执行速度（ <strong>CPU 缓存越大，速度越快</strong> ，当然也会越贵）</p>\n<p><strong>注意</strong> ：</p>\n<ol>\n<li>更多关于 CPU 缓存的细节请参考<strong> Intel 白皮书第三卷第 11 章</strong></li>\n<li>不同的版本，章节顺序可能不一样，请参考章节标题</li>\n</ol>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<h2 id=\"pwtpage-write-through\"><a class=\"anchor\" href=\"#pwtpage-write-through\">#</a> PWT（Page Write Through）</h2>\n<p><code>PWT=1</code> ：写<strong> Cache</strong> 的时候也要将<strong>数据</strong>写入<strong>内存</strong>中<br />\n <code>PWT=0</code> ：写<strong> Cache</strong> 的时候就只是写 Cache，是否要映射到内存由<strong> CPU 缓存控制器</strong>自己决定</p>\n<h2 id=\"pcdpage-cache-disable\"><a class=\"anchor\" href=\"#pcdpage-cache-disable\">#</a> PCD（Page Cache Disable）</h2>\n<p><code>PCD=1</code> ：禁止某个页写入缓存（直接写入内存）<br />\n<strong>比如</strong> ：做页表用的页，已经存储在 TLB 中，可能就不需要再做缓存，而它的 PCD 一定为 1</p>\n<h1 id=\"reference\"><a class=\"anchor\" href=\"#reference\">#</a> Reference</h1>\n<p>滴水课件<br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxOTg4NDQ4L2FydGljbGUvZGV0YWlscy8xMDI3NjM4OTE=\"> https://blog.csdn.net/qq_41988448/article/details/102763891</span></p>\n",
            "tags": [
                "TLB",
                "PWT",
                "PDT",
                "CPU缓存"
            ]
        },
        {
            "id": "https://or0kit.github.io/Bin/Core/WindowsXp/Protect-Mode/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F-%E6%8E%A7%E5%88%B6%E5%AF%84%E5%AD%98%E5%99%A8/",
            "url": "https://or0kit.github.io/Bin/Core/WindowsXp/Protect-Mode/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F-%E6%8E%A7%E5%88%B6%E5%AF%84%E5%AD%98%E5%99%A8/",
            "title": "保护模式-控制寄存器",
            "date_published": "2021-09-03T14:43:31.000Z",
            "content_html": "<h1 id=\"控制寄存器\"><a class=\"anchor\" href=\"#控制寄存器\">#</a> 控制寄存器</h1>\n<p>控制寄存器用于控制和确定 CPU 的操作模式。</p>\n<p>控制寄存器有五个  <code>Cr0 Cr1 Cr2 Cr3 Cr4 </code>  其中  <code>Cr1</code>  保留， <code>Cr3</code>  存储的是页目录表基址</p>\n<h2 id=\"cr0\"><a class=\"anchor\" href=\"#cr0\">#</a> CR0</h2>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<p><strong>说明：</strong></p>\n<p><code>PE位</code> ：启用保护（Protecction Enable）标志<br />\n<strong> PE=1</strong> ：保护模式<br />\n<strong> PE=0</strong> ：实地址模式<br />\n这个标志 <strong>仅开启段级保护</strong> ，而没有启用分页机制<br />\n若要启用 <strong>分页机制</strong> ，那么<strong> PE</strong> 和<strong> PG</strong> 标志都要置位</p>\n<p><code>PG位</code> ：分页机制标志<br />\n<strong> PG=1</strong> ：开启了分页机制<br />\n<strong> PG=0</strong> ：未开启分页机制<br />\n在开启这个标志位之前<strong>必须已经或者同时开启  <code>PE</code>  标志</strong></p>\n<p><strong>PG=0</strong> 且 <strong>PE=0</strong> ：处理器工作状态为<strong>实地址模式</strong><br />\n<strong> PG=0</strong> 且 <strong>PE=1</strong> ：处理器工作状态为<strong>没有开启分页机制的保护模式</strong><br />\n<strong> PG=1</strong> 且 <strong>PE=0</strong> ：不存在。在<strong> PE</strong> 没有开启的情况下<strong>无法开启 PG</strong><br />\n<strong>PG=1</strong> 且 <strong>PE=1</strong> ：处理器工作状态为<strong>开启了分页机制的保护模式</strong></p>\n<p><code>WP位</code> ：写保护（Write Proctect）标志<br />\n对于 <strong>Intel 80486 或以上的 CPU</strong> ，CR0 的<strong> 16 位</strong>是写保护标志<br />\n当设置该标志时，处理器会禁止 <strong>超级用户程序</strong> （例如特权级 0 的程序）向<strong>用户级只读页面</strong>执行写操作</p>\n<p>当<strong> CPL&lt;3</strong> 的时候：</p>\n<ol>\n<li>如果 <strong>WP=0</strong> 可以<strong>读写</strong>任意用户级物理页，<strong>只要线性地址有效</strong></li>\n<li>如果 <strong>WP=1</strong> 可以<strong>读取</strong>任意用户级物理页，<strong>但对于只读的物理页，则不能写</strong></li>\n</ol>\n<h2 id=\"cr2\"><a class=\"anchor\" href=\"#cr2\">#</a> CR2</h2>\n<p><img data-src=\"image002.png\" alt=\"\" /></p>\n<p>当 CPU 访问某个无效页面时，会产生缺页异常，此时，CPU 会将引起异常的线性地址存放在 CR2 中</p>\n<p>举例：</p>\n<ol>\n<li>当 CPU 访问某个物理页，但 PDE/PTE 的<strong> P 位为 0</strong> 时，会产生<strong>缺页异常</strong></li>\n<li>缺页异常一旦发生，CPU 会将<strong>引起缺页异常的线性地址</strong>存储到<strong> Cr2</strong> 中</li>\n<li>此时，操作系统的处理程序开始<strong>对异常进行处理</strong></li>\n<li>若<strong>处理结束</strong>后，虽然 PDE/PTE 的 P 位为 0，但实际上它被写进了页面</li>\n<li>这时，处理程序会<strong>将数据从页面中读出，再挂上一个有效的物理页，让程序接着往下跑</strong></li>\n<li>程序往下跑时，操作系统必须要记录程序<strong>原先已经跑到了哪里</strong></li>\n<li>此时，Cr2 便派上了用场，因为<strong>产生异常时的线性地址存在了 Cr2 中</strong></li>\n<li>但如果异常处理程序检测到用户访问的页面是一个<strong>未分配的页面</strong></li>\n<li>这时，操作系统会报告一个 <strong>异常</strong> ，告诉我们<strong>在哪里发生了错误</strong></li>\n<li><strong>若没有 Cr2 寄存器，当进入异常处理程序时，将找不到回去的线性地址</strong></li>\n</ol>\n<h2 id=\"cr4寄存器\"><a class=\"anchor\" href=\"#cr4寄存器\">#</a> Cr4 寄存器</h2>\n<p><img data-src=\"image003.png\" alt=\"\" /></p>\n<p>PAE/PSE 说明：</p>\n<p>PAE=1 是 2-9-9-12 分页  PAE=0 是 10-10-12 分页。<br />\nPSE：大页开启标志。</p>\n<p><img data-src=\"image004.png\" alt=\"\" /></p>\n<blockquote>\n<p>注意：关于控制寄存器的更多细节，请参考 Intel 白皮书第三卷</p>\n</blockquote>\n<p><img data-src=\"image005.png\" alt=\"\" /></p>\n<h1 id=\"reference\"><a class=\"anchor\" href=\"#reference\">#</a> Reference</h1>\n<p>滴水课件<br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxOTg4NDQ4L2FydGljbGUvZGV0YWlscy8xMDI3NjM2NDY=\"> https://blog.csdn.net/qq_41988448/article/details/102763646</span></p>\n",
            "tags": [
                "CR0",
                "CR2",
                "CR4"
            ]
        },
        {
            "id": "https://or0kit.github.io/Bin/Core/WindowsXp/Protect-Mode/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F-%E4%B8%AD%E6%96%AD%E4%B8%8E%E5%BC%82%E5%B8%B8/",
            "url": "https://or0kit.github.io/Bin/Core/WindowsXp/Protect-Mode/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F-%E4%B8%AD%E6%96%AD%E4%B8%8E%E5%BC%82%E5%B8%B8/",
            "title": "保护模式-中断与异常",
            "date_published": "2021-09-03T14:43:18.000Z",
            "content_html": "<h1 id=\"什么是中断\"><a class=\"anchor\" href=\"#什么是中断\">#</a> 什么是中断</h1>\n<ol>\n<li>\n<p>中断通常是由 CPU 外部的输入输出设备 (硬件) 所触发的，供外部设备通知<br />\n CPU “有事情需要处理”，因此又叫中断请求 (Interrupt Request).</p>\n</li>\n<li>\n<p>中断请求的目的是希望 CPU 暂时停止执行当前正在执行的程序，转去执行<br />\n中断请求所对应的中断处理例程 (中断处理程序在哪有 IDT 表决定)</p>\n</li>\n<li>\n<p>80x86 有两条中断请求线：</p>\n<p>非屏蔽中断线，称为 NMI（NonMaskable Interrupt）</p>\n<p>可屏蔽中断线，称为 INTR（Interrupt Require）</p>\n</li>\n<li>\n<p>假设没有中断这种机制，当一个的程序的代码为死循环时，其他的程序就没有机会执行了。</p>\n</li>\n</ol>\n<p>中断的本质：改变 CPU 的执行路线</p>\n<h2 id=\"可屏蔽中断\"><a class=\"anchor\" href=\"#可屏蔽中断\">#</a> 可屏蔽中断</h2>\n<p><strong>描述：</strong></p>\n<p>在硬件级，可屏蔽中断是由一块专门的芯片来管理的，通常称为中断控制器<br />\n它负责分配中断资源和管理各个中断源发出的中断请求<br />\n为了便于标识各个中断请求，中断管理器通常用 IRQ（Interrupt Request）后面加上数字来表示不同的中断<br />\n比如：在 Windows 中，时钟中断的 IRQ 编号为 0，也就是  <code>IRQ0</code></p>\n<h2 id=\"时钟中断\"><a class=\"anchor\" href=\"#时钟中断\">#</a> 时钟中断</h2>\n<p><strong>描述：</strong></p>\n<p>大多数操作系统时钟中断在 10-100MS 之间，Windows 系列为 10-20MS<br />\nWindows 时钟中断每隔 10~20MS 会向 CPU 发送一个请求，当 CPU 收到请求时，操作系统就会接管 CPU，指定 CPU 去执行一段代码，操作系统在这段代码里便有机会进行线程的切换。这样，即便一个程序进入死循环，操作系统依然有机会进行线程切换<br />\n当然，操作系统主要并不是通过时钟中断来进行线程切换，而只是有机会进行线程切换，这里只是举个例子。</p>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<h2 id=\"可屏蔽中断如何处理\"><a class=\"anchor\" href=\"#可屏蔽中断如何处理\">#</a> 可屏蔽中断如何处理？</h2>\n<p><strong>描述：</strong></p>\n<ol>\n<li><strong>时钟中断</strong>的 <strong>IRQ 编号为 0</strong> ，所在位置为<strong> IDT [0x30]</strong></li>\n<li><strong>IRQ1~IRQ15</strong> 分别对应<strong> IDT [0x31]~IDT [0x35]</strong></li>\n</ol>\n<p><img data-src=\"image002.png\" alt=\"\" /></p>\n<p><strong>特别说明：</strong></p>\n<p>1、如果自己的程序执行时不希望 CPU 去处理这些中断，可以<br />\n用  <code>CLI</code>  指令清空 EFLAG 寄存器中的 IF 位<br />\n用  <code>STI</code>  指令设置 EFLAG 寄存器中的 IF 位</p>\n<p>2、硬件中断与 IDT 表中的对应关系并非固定不变的<br />\n参见：APIC（高级可编程中断控制器）</p>\n<h2 id=\"不可屏蔽中断如何处理\"><a class=\"anchor\" href=\"#不可屏蔽中断如何处理\">#</a> 不可屏蔽中断如何处理？</h2>\n<p><img data-src=\"image003.png\" alt=\"\" /></p>\n<p>特别说明：</p>\n<blockquote>\n<p>当非可屏蔽中断产生时，CPU 在执行完当前指令后会里面进入中断处理程序</p>\n</blockquote>\n<blockquote>\n<p>非可屏蔽中断不受 EFLAG 寄存器中 IF 位的影响，一旦发生，CPU 必须处理</p>\n</blockquote>\n<blockquote>\n<p>非可屏蔽中断处理程序位于 IDT 表中的 2 号位置</p>\n</blockquote>\n<h1 id=\"异常\"><a class=\"anchor\" href=\"#异常\">#</a> 异常</h1>\n<p>描述：</p>\n<blockquote>\n<p>异常通常是 <strong>CPU 在执行指令时检测到的某些错误</strong> ，比如除 0、访问无效页面等。</p>\n</blockquote>\n<p>中断与异常的区别：</p>\n<ol>\n<li><code>中断</code> 来自于 <strong>外部设备</strong> ，是 <strong>中断源</strong> （比如键盘）发起的，<strong>CPU 是被动的</strong></li>\n<li><code>异常</code> 来自于 <strong>CPU 本身</strong> ，是<strong> CPU 主动产生的</strong></li>\n<li><strong>INT N</strong> 虽然被称为 “软件中断”，但其<strong>本质是异常</strong></li>\n<li>EFLAG 的  <code>IF位</code> 对  <code>INT N</code>  无效。</li>\n</ol>\n<h2 id=\"异常处理\"><a class=\"anchor\" href=\"#异常处理\">#</a> 异常处理</h2>\n<p>描述：</p>\n<blockquote>\n<p>无论是由<strong>硬件设备触发的中断请求</strong>还是由 <strong>CPU 产生的异常</strong> ，处理程序都在  <code>IDT表</code></p>\n</blockquote>\n<p>常见的异常处理程序：</p>\n<p><img data-src=\"image004.png\" alt=\"\" /></p>\n<p><code>页错误</code> ：当我们访问一个 <strong>线性地址</strong> ，而这个线性地址指向的<strong>物理页</strong>是 <strong>无效的</strong> ，便会触发 CPU 异常，该异常位于 <strong>E 号门</strong> （IDT [0xE]）<br />\n <code>段错误</code> ：一旦<strong>段的运算发生异常</strong>时（如权限检查），便会走 <strong>D 号门</strong> （IDT [0xD]）<br />\n <code>除0错误</code> ：当<strong>除数为 0</strong> 时，会触发异常，这时走 <strong>0 号门</strong> （IDT [0x0]）<br />\n <code>双重错误</code> ：假设 <strong>执行一个异常（如页错误）时又产生了一个错误</strong> ，那么便会触发双重错误，这时走 <strong>8 号门</strong> （IDT [0x8]）</p>\n<h2 id=\"缺页异常\"><a class=\"anchor\" href=\"#缺页异常\">#</a> 缺页异常</h2>\n<p>缺页异常的 <strong>产生</strong> （例举两种）：</p>\n<ol>\n<li>当 PDE/PTE 的<strong> P=0</strong> 时会发生缺页异常</li>\n<li>当 PDE/PTE 的<strong>属性为只读但程序试图写入</strong>时会发生缺页异常</li>\n</ol>\n<p>一旦发生缺页异常，CPU 会执行 IDT 表中的<strong> 0xE 号</strong>中断处理程序，由操作系统来接管，后面会学习的。</p>\n<p><img data-src=\"image005.png\" alt=\"\" /></p>\n<h1 id=\"实验\"><a class=\"anchor\" href=\"#实验\">#</a> 实验</h1>\n<h2 id=\"分析idt表中0x2号中断的执行流程\"><a class=\"anchor\" href=\"#分析idt表中0x2号中断的执行流程\">#</a> 分析 IDT 表中 0x2 号中断的执行流程</h2>\n<h2 id=\"分析idt表中0x8号中断的执行流程\"><a class=\"anchor\" href=\"#分析idt表中0x8号中断的执行流程\">#</a> 分析 IDT 表中 0x8 号中断的执行流程</h2>\n<h1 id=\"reference\"><a class=\"anchor\" href=\"#reference\">#</a> Reference</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxOTg4NDQ4L2FydGljbGUvZGV0YWlscy8xMDI3NjA1NzA=\">https://blog.csdn.net/qq_41988448/article/details/102760570</span></p>\n",
            "tags": [
                "中断",
                "异常",
                "CLI指令",
                "STI指令",
                "INT2",
                "INT8"
            ]
        },
        {
            "id": "https://or0kit.github.io/Bin/Core/WindowsXp/Protect-Mode/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F-TLB/",
            "url": "https://or0kit.github.io/Bin/Core/WindowsXp/Protect-Mode/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F-TLB/",
            "title": "保护模式-TLB",
            "date_published": "2021-09-03T14:42:24.000Z",
            "content_html": "<h1 id=\"地址解析\"><a class=\"anchor\" href=\"#地址解析\">#</a> 地址解析</h1>\n<p>当我们通过一个线性地址访问一个物理页（比如：MOV EAX,[0x12345678]）时，实际上 CPU 未必只读了 4 个字节。</p>\n<ul>\n<li>10-10-12 分页</li>\n</ul>\n<blockquote>\n<p>CPU 先通过线性地址找到对应的 PDE：4 个字节<br />\n CPU 再通过 PDE 和线性地址找到 PTE：4 个字节<br />\n最后再通过 PTE 找到对应物理页：4 个字节<br />\n一共访问了 12 个字节，如果跨页可能更多。</p>\n</blockquote>\n<ul>\n<li>2-9-9-12 分页</li>\n</ul>\n<blockquote>\n<p>找到 PDPTE：8 个字节<br />\n找到 PDE：8 个字节<br />\n找到 PTE：8 个字节<br />\n最后找到物理页：4 个字节<br />\n一共访问了 20 个字节，如果跨页可能更多。</p>\n</blockquote>\n<p>为了提高访问效率，只能对线性地址与其对应的物理地址做记录。<br />\nCPU 内部做了一张表，用来记录这些东西。它的效率和寄存器一样快，名字叫做 TLB（Translation Lookaside Buffer）。<br />\n由于 TLB 的效率很快，因此它的大小不能太大，少则几十条，多则也只有上百条。</p>\n<p>思考：在一个进程的 4GB 空间中，有无数个线性地址，但是一个 TLB 最多只能记录上百条记录，那么这张表真的有意义吗？</p>\n<h1 id=\"tlb\"><a class=\"anchor\" href=\"#tlb\">#</a> TLB</h1>\n<h2 id=\"tlb结构\"><a class=\"anchor\" href=\"#tlb结构\">#</a> TLB 结构</h2>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<p><code>ATTR：</code> 属性<br />\n在 10-10-12 分页模式下：ATTR = PDE 属性 &amp; PTE 属性<br />\n在 2-9-9-12 分页模式下：ATTR = PDPTE 属性 &amp; PDE 属性 &amp; PTE 属性</p>\n<p><code>LRU：</code> 统计信息<br />\n由于 TLB 的大小有限，因此当 TLB 被写满、又有新的地址即将写入时，TLB 就会根据统计信息来判断哪些地址是不常用的，从而将不常用的记录从 TLB 中移除。</p>\n<p>注意：</p>\n<p>不同的 CPU，TLB 大小不同<br />\n只要 Cr3 发生变化，TLB 立即刷新，一核一套 TLB<br />\n 由于操作系统的高 2G 映射基本不变，因此如果 Cr3 改了，TLB 刷新的话，重建高 2G 以上很浪费。<br />\n所以 PDE 和 PTE 中有个 G 标志位（当 PDE 为大页时，G 标志位才起作用），如果 G 位为 1，刷新 TLB 时将不会刷新 PDE/PTE<br />\nG 位为 1 的页，当 TLB 写满时，CPU 根据统计信息将不常用的地址废弃，保留最常用的地址</p>\n<h2 id=\"tlb种类\"><a class=\"anchor\" href=\"#tlb种类\">#</a> TLB 种类</h2>\n<p>TLB 在 X86 体系的 CPU 中的实际应用最早是从 Intel 的 486CPU 开始的，在 X86 体系的 CPU 中，一般都设有如下 4 组 TLB:</p>\n<blockquote>\n<p>第一组：缓存一般页表（4K 字节页面）的指令页表缓存（Instruction-TLB）；<br />\n第二组：缓存一般页表（4K 字节页面）的数据页表缓存（Data-TLB）；<br />\n第三组：缓存大尺寸页表（2M/4M 字节页面）的指令页表缓存（Instruction-TLB）；<br />\n第四组：缓存大尺寸页表（2M/4M 字节页面）的数据页表缓存（Data-TLB）</p>\n</blockquote>\n<h1 id=\"全局页\"><a class=\"anchor\" href=\"#全局页\">#</a> 全局页</h1>\n<p>G=1，即为全局页，进程（CR3）切换时，TLB 中的记录不会被刷新。</p>\n<h1 id=\"实验\"><a class=\"anchor\" href=\"#实验\">#</a> 实验</h1>\n<h2 id=\"编写代码实现修改页属性实现应用层读写高2g内存地址\"><a class=\"anchor\" href=\"#编写代码实现修改页属性实现应用层读写高2g内存地址\">#</a> 编写代码实现修改页属性，实现应用层读写高 2G 内存地址</h2>\n<p>改 U/S 位，和 PTE 的 G 位<br />\n G=1 时，程序会崩，只有 G=0 才能成功。<br />\n简单解释一下 G 位：<br />\nPDE 中，只有 PS=1（大页）时，G 才有效。<br />\nG 位是全局页的意思，G=1 时，这个线性地址对应的页是全局页，进程切换时，对应的 TLB 不会改变。多个进程的高 2G 数据大部分都是相同的，我们不希望在切换进程时对这部分 TLB 做多余的刷新，所以需要设置 G=1 以提高效率。</p>\n<p>回到本文，我们已经知道 PDE 的 PS=0，所以我们不用管 PDE 的 G。关键是 PTE 的 G，为什么要改成 0 呢？因为线性地址 0x8003f048 默认是 G=1，它在 CPU 中有 TLB 缓存。<br />\n2-9-9-12 模式下获取 PDPTI-PDI-PTI-OFFSET</p>\n<p>公式：</p>\n<blockquote>\n<p>pPDE = 0xc0600000 + (PDPTI*4KB) + (PDI*8)\t\t\t\t\t<br />\npPTE = 0xc0000000 + (PDPTI*2MB) + (PDI*4KB) + (PTI*8)</p>\n</blockquote>\n<p>更高效的公式（MmIsAddressValid 是这么干的）</p>\n<blockquote>\n<p>pPDE = 0xc0600000 + ((addr &gt;&gt; 18) &amp; 0x3ff8)\t<br />\npPTE = 0xc0000000 + ((addr &gt;&gt; 9) &amp; 0x7ffff8)</p>\n</blockquote>\n<p>代码转自<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0t3YW5zeS9hcnRpY2xlL2RldGFpbHMvMTA4OTY1MTk2\"> https://blog.csdn.net/Kwansy/article/details/108965196</span></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;windows.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">//2-9-9-12</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">//PDPTI-PDI-PTI-OFFSET</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>DWORD <span class=\"token operator\">*</span><span class=\"token function\">GetPDE</span><span class=\"token punctuation\">(</span>DWORD addr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token comment\">//return (DWORD *)(0xc0600000 + ((addr >> 18) &amp; 0x3ff8));</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tDWORD PDPTI <span class=\"token operator\">=</span> addr <span class=\"token operator\">>></span> <span class=\"token number\">30</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tDWORD PDI <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>addr <span class=\"token operator\">>></span> <span class=\"token number\">21</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x000001FF</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tDWORD PTI <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>addr <span class=\"token operator\">>></span> <span class=\"token number\">12</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x000001FF</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xC0600000</span> <span class=\"token operator\">+</span> PDPTI <span class=\"token operator\">*</span> <span class=\"token number\">0x1000</span> <span class=\"token operator\">+</span> PDI <span class=\"token operator\">*</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>DWORD <span class=\"token operator\">*</span><span class=\"token function\">GetPTE</span><span class=\"token punctuation\">(</span>DWORD addr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token comment\">//return (DWORD *)(0xc0000000 + ((addr >> 9) &amp; 0x7ffff8));</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\tDWORD PDPTI <span class=\"token operator\">=</span> addr <span class=\"token operator\">>></span> <span class=\"token number\">30</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\tDWORD PDI <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>addr <span class=\"token operator\">>></span> <span class=\"token number\">21</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x000001FF</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\tDWORD PTI <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>addr <span class=\"token operator\">>></span> <span class=\"token number\">12</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x000001FF</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xC0000000</span> <span class=\"token operator\">+</span> PDPTI <span class=\"token operator\">*</span> <span class=\"token number\">0x200000</span> <span class=\"token operator\">+</span> PDI <span class=\"token operator\">*</span> <span class=\"token number\">0x1000</span> <span class=\"token operator\">+</span> PTI <span class=\"token operator\">*</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">__declspec</span><span class=\"token punctuation\">(</span>naked<span class=\"token punctuation\">)</span> <span class=\"token function\">R0Function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t__asm</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\tpush ebp</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\tmov ebp<span class=\"token punctuation\">,</span>esp</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\tsub esp<span class=\"token punctuation\">,</span><span class=\"token number\">0x1000</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\tpushad</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\tpushfd\t\t</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t__asm push fs</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token comment\">//__asm int 3</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t<span class=\"token comment\">// 修改 8003f048 的 U/S 位</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token operator\">*</span><span class=\"token function\">GetPDE</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x8003f048</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|=</span> <span class=\"token number\">0x00000004</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t<span class=\"token operator\">*</span><span class=\"token function\">GetPTE</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x8003f048</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|=</span> <span class=\"token number\">0x00000004</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t<span class=\"token comment\">// 修改 PTE 的 G 位</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t<span class=\"token operator\">*</span><span class=\"token function\">GetPTE</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x8003f048</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;=</span> <span class=\"token number\">0xFFFFFEFF</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t<span class=\"token comment\">//__asm int 3</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t__asm pop fs</pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t__asm</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t\tpopfd</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t\tpopad</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t\tadd esp<span class=\"token punctuation\">,</span><span class=\"token number\">0x1000</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t\tmov esp<span class=\"token punctuation\">,</span>ebp</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t\tpop ebp</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t\tiretd</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"在IDT表构建中断门，请在windbg中执行下面的指令：\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"eq 8003f500 %04xee00`0008%04x\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>R0Function<span class=\"token operator\">>></span><span class=\"token number\">16</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>R0Function <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x0000FFFF</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t<span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t__asm <span class=\"token keyword\">int</span> <span class=\"token number\">0x20</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"0x8003f048 U/S,G位修改成功.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*(PDWORD)0x8003f048 = %08x\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>PDWORD<span class=\"token punctuation\">)</span><span class=\"token number\">0x8003f048</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 读</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>PDWORD<span class=\"token punctuation\">)</span><span class=\"token number\">0x8003f048</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x12345678</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 写</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*(PDWORD)0x8003f048 = %08x\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>PDWORD<span class=\"token punctuation\">)</span><span class=\"token number\">0x8003f048</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 读</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t<span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>结果：</p>\n<p><img data-src=\"image017.png\" alt=\"\" /></p>\n<h2 id=\"体验tlb的存在\"><a class=\"anchor\" href=\"#体验tlb的存在\">#</a> 体验 TLB 的存在</h2>\n<p>火哥的思路是：</p>\n<p>挂上物理页后，修改一下数据，再挂上另外一个物理页，然后在读取这个线性地址，查看数值是以前的还是后面挂上物理页的，由此推测 TLB 是否存在。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;Windows.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>DWORD g_Value <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">//DWORD pPDE, pPTE;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">__declspec</span><span class=\"token punctuation\">(</span>naked<span class=\"token punctuation\">)</span> <span class=\"token function\">CallGate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t__asm <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\tpush <span class=\"token number\">0x30</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\tpop fs<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\tpushad<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\tpushfd<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t<span class=\"token comment\">// 获取 p1 的 PTE</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\tmov eax<span class=\"token punctuation\">,</span><span class=\"token number\">0x600000</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\tshr eax<span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\tand eax<span class=\"token punctuation\">,</span> <span class=\"token number\">0x7FFFF8</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\tsub eax<span class=\"token punctuation\">,</span> <span class=\"token number\">0x40000000</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\tmov ecx<span class=\"token punctuation\">,</span> eax<span class=\"token punctuation\">;</span><span class=\"token comment\">//ecx 指向 p1 的 PTE</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t<span class=\"token comment\">//0 地址一般都是有 PDE 的，直接更换它的 PTE</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\tmov eax<span class=\"token punctuation\">,</span> <span class=\"token number\">0xC0000000</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\tmov ecx<span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span>ecx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t<span class=\"token comment\">//or ecx,0x100;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\tmov<span class=\"token punctuation\">[</span>eax<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> ecx<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\tmov dword ptr ds<span class=\"token operator\">:</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x12345678</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\t<span class=\"token comment\">// 获取 p2 的 PTE</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\tmov eax<span class=\"token punctuation\">,</span><span class=\"token number\">0x700000</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\tshr eax<span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\tand eax<span class=\"token punctuation\">,</span> <span class=\"token number\">0x7FFFF8</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\tsub eax<span class=\"token punctuation\">,</span> <span class=\"token number\">0x40000000</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\tmov ecx<span class=\"token punctuation\">,</span> eax<span class=\"token punctuation\">;</span><span class=\"token comment\">//ecx 指向 p1 的 PTE</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\t<span class=\"token comment\">//0 地址一般都是有 PDE 的，直接更换它的 PTE</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\tmov eax<span class=\"token punctuation\">,</span> <span class=\"token number\">0xC0000000</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\tmov ecx<span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span>ecx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\tmov<span class=\"token punctuation\">[</span>eax<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> ecx<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t\t<span class=\"token comment\">// 刷新 CR3</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t\t<span class=\"token comment\">//mov eax,cr3;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t\t<span class=\"token comment\">//mov cr3,eax;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t\t<span class=\"token comment\">//invlpg dword ptr ds:[0];</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t\tmov eax<span class=\"token punctuation\">,</span> dword ptr ds <span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t\tmov g_Value<span class=\"token punctuation\">,</span> eax<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t\tpopfd<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t\tpopad<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t\tretf<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t<span class=\"token keyword\">char</span> buf<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x48</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t<span class=\"token keyword\">void</span><span class=\"token operator\">*</span> p1 <span class=\"token operator\">=</span> <span class=\"token function\">VirtualAlloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x600000</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x1000</span><span class=\"token punctuation\">,</span> MEM_COMMIT <span class=\"token operator\">|</span> MEM_RESERVE<span class=\"token punctuation\">,</span> PAGE_EXECUTE_READWRITE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\t<span class=\"token keyword\">void</span><span class=\"token operator\">*</span> p2 <span class=\"token operator\">=</span> <span class=\"token function\">VirtualAlloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x700000</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x1000</span><span class=\"token punctuation\">,</span> MEM_COMMIT <span class=\"token operator\">|</span> MEM_RESERVE<span class=\"token punctuation\">,</span> PAGE_EXECUTE_READWRITE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p1 <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p2 <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token function\">VirtualFree</span><span class=\"token punctuation\">(</span>p2<span class=\"token punctuation\">,</span> <span class=\"token number\">0x1000</span><span class=\"token punctuation\">,</span> MEM_COMMIT <span class=\"token operator\">|</span> MEM_RESERVE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"virtual failed p1\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p2 <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>\t\t<span class=\"token function\">VirtualFree</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">,</span> <span class=\"token number\">0x1000</span><span class=\"token punctuation\">,</span> MEM_COMMIT <span class=\"token operator\">|</span> MEM_RESERVE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"virtual failed p2\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>\t<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>DWORD<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>p1<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>\t<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>DWORD<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>p2<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x200</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"windbg execute eq 8003f048 %04xec00`0008%04x\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>CallGate <span class=\"token operator\">>></span> <span class=\"token number\">0x10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xffff</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>CallGate <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xffff</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>\t<span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>\t__asm <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>\t\tcall fword ptr buf<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>\t\tpush <span class=\"token number\">0x3b</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>\t\tpop fs<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>\t<span class=\"token comment\">//printf(\"%#010X\\n\", pPDE);</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>\t<span class=\"token comment\">//printf(\"%#010X\\n\", pPDE);</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"g_Value=%#010X\\n\"</span><span class=\"token punctuation\">,</span> g_Value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>\t<span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>\t<span class=\"token function\">VirtualFree</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">,</span> <span class=\"token number\">0x1000</span><span class=\"token punctuation\">,</span> MEM_COMMIT <span class=\"token operator\">|</span> MEM_RESERVE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>\t<span class=\"token function\">VirtualFree</span><span class=\"token punctuation\">(</span>p2<span class=\"token punctuation\">,</span> <span class=\"token number\">0x1000</span><span class=\"token punctuation\">,</span> MEM_COMMIT <span class=\"token operator\">|</span> MEM_RESERVE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>or ecx,0x100</code>  ecx 中存储的是 PDE，进行或运算，使 G 位为 1，即开起全局页，这样进程（CR3）切换时，TLB 中的记录不会被刷新</p>\n<p><code>mov eax,cr3;</code>   <code>mov cr3,eax;</code>  刷新 CR3。</p>\n<p><code>INVLPG:</code>  使 TLB 数据失效。<br />\n这个指令与直接加载 CR3 的区别在于 CR3 是整个 TLB 都失效，并重新加载。<br />\nINVLPG 则是指定去失效某个页的 TLB。它是一个更细粒度的控制。</p>\n<h3 id=\"实验结果\"><a class=\"anchor\" href=\"#实验结果\">#</a> 实验结果</h3>\n<ul>\n<li><strong>不开启全局页，不刷新 CR3</strong></li>\n</ul>\n<p><img data-src=\"image002.png\" alt=\"\" /></p>\n<ul>\n<li><strong>不开启全局页，刷新 CR3</strong></li>\n</ul>\n<p><img data-src=\"image003.png\" alt=\"\" /></p>\n<ul>\n<li><strong>开启全局页，刷新 CR3</strong></li>\n</ul>\n<p><img data-src=\"image004.png\" alt=\"\" /></p>\n<ul>\n<li><strong>开启全局页，刷新 CR3，使用 INVLPG 指令</strong></li>\n</ul>\n<p><img data-src=\"image005.png\" alt=\"\" /></p>\n<h2 id=\"shadowwalker\"><a class=\"anchor\" href=\"#shadowwalker\">#</a> ShadowWalker</h2>\n<p>一种利用 TLB 机制实现内存隐藏的方式 ——ShadowWalker。这种技术利用了 TLB 会缓存线性地址到物理地址映射的特性，当 CRC 线程检查某段代码时，它使用的线性地址会缓存到 TLB 的数据页表缓存（Data-TLB）中。而当 EIP 运行到这段代码时，又会把代码的线性地址缓存到 TLB 的指令页表缓存（Instruction-TLB）中。这样 CPU 中就缓存了同一个地址的两份记录，CRC 线程从数据页表缓存中读取物理地址，EIP 执行流从指令页表缓存中读取物理地址，这两个物理地址是相同的。</p>\n<p>ShadowWalker 技术的核心就在于修改指令页表缓存中的物理地址，让 CRC 线程读取原来的代码，而程序真正执行的时候则跳转到其他代码。</p>\n<p>这种方式在 3 环是不稳定的，原因是 TLB 经常刷新。</p>\n<p>复现暂时先鸽了。</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vbGVpYnNvLWN5L3AvMTE3MTkyODEuaHRtbA==\">https://www.cnblogs.com/leibso-cy/p/11719281.html</span></p>\n<h1 id=\"reference\"><a class=\"anchor\" href=\"#reference\">#</a> Reference</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxOTg4NDQ4L2FydGljbGUvZGV0YWlscy8xMDI3MzYwNjI=\">https://blog.csdn.net/qq_41988448/article/details/102736062</span><br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0t3YW5zeS9hcnRpY2xlL2RldGFpbHMvMTA4OTY1MTk2\">https://blog.csdn.net/Kwansy/article/details/108965196</span><br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0t3YW5zeS9hcnRpY2xlL2RldGFpbHMvMTA5MDEzMTUy\">https://blog.csdn.net/Kwansy/article/details/109013152</span></p>\n",
            "tags": [
                "TLB",
                "INVLPG指令",
                "全局页",
                "ShadowWalker"
            ]
        },
        {
            "id": "https://or0kit.github.io/Bin/Core/WindowsXp/Protect-Mode/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F-2-9-9-12%E5%88%86%E9%A1%B5/",
            "url": "https://or0kit.github.io/Bin/Core/WindowsXp/Protect-Mode/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F-2-9-9-12%E5%88%86%E9%A1%B5/",
            "title": "保护模式-2-9-9-12分页",
            "date_published": "2021-08-31T14:19:22.000Z",
            "content_html": "<h1 id=\"10-10-12-分页的寻址范围\"><a class=\"anchor\" href=\"#10-10-12-分页的寻址范围\">#</a> 10-10-12 分页的寻址范围</h1>\n<p>在之前的学习中，有一个课后思考题：10-10-12 分页模式物理内存能够识别的最多范围是多少？<br />\n我们当时是怎么算的呢？很简单嘛，有 1024 个页表，每个页表有 1024 个物理页，每个物理页有 4KB，那不就是 1024 * 1024 * 4KB = 4GB 吗？！<br />\n答案确实是 4GB，但很遗憾，如果你是这样算的，那你对 10-10-12 分页就还没有理解到位。<br />\n更有甚者可能会说，32 位系统，2^32=4GB，所以寻址范围是 4GB，这就更加错的离谱。</p>\n<p>实际上，决定物理内存寻址范围的是页表项 PTE。</p>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<p>PTE 的低 12 位是属性；高 20 位是基址，低 12 位补零后构成了<strong>物理页基址</strong>。所以，物理地址的寻址范围是由 PTE 构成的这 32 位物理页基址决定的，4GB 是从这里来的。</p>\n<p><strong>注意，线程的 4GB 和物理地址寻址范围的 4GB 不是一个东西。</strong> 物理地址寻址的 4GB 我们刚才已经解释过，是由 PTE 决定的。而线程的 4GB 其实指的是 32 位线性地址确定的，这个才是和 32 位系统相关的，和分页模式无关，32 位系统的线性地址就是 32 位。</p>\n<h1 id=\"10-10-12-分页的缺点\"><a class=\"anchor\" href=\"#10-10-12-分页的缺点\">#</a> 10-10-12 分页的缺点</h1>\n<p>缺点就是物理地址寻址范围太小了，只有 4GB。随着硬件的发展，物理内存已经超过 4GB 了，所以我们需要一种新的分页模式来映射更多的物理内存，2-9-9-12 分页又称为 PAE（物理地址扩展）分页就应运而生了。</p>\n<h1 id=\"2-9-9-12-分页\"><a class=\"anchor\" href=\"#2-9-9-12-分页\">#</a> 2-9-9-12 分页</h1>\n<p>2-9-9-12 分页将物理地址寻址范围扩大到 2^36=64GB。</p>\n<h1 id=\"为什么是2-9-9-12\"><a class=\"anchor\" href=\"#为什么是2-9-9-12\">#</a> 为什么是 2-9-9-12</h1>\n<ul>\n<li>页的大小是确定的，4KB 不能随便改，所以 32 位的最后一部分就确定为了 12 位。</li>\n<li>如果想增大物理内存的访问范围，就需要增大 PTE，增大了多少呢？考虑对齐的因素，增加到 8 个字节，由于 PTE 增大了，而 PTT 表的大小没变，依然是 4KB，所以每张 PTT 表能放的 PTE 个数由原来的 1024 个减少到 512 个，512 等于 2 的 9 次方，因此 PTI=9</li>\n</ul>\n<p><img data-src=\"image003.png\" alt=\"\" /></p>\n<ul>\n<li>由于 2 的 9 次方个 PDE 就能找到所有的 PTT 表，因此 PDI=9</li>\n<li>分配到这里时，还剩下前 2 位未分配。与 10-10-12 不同，CR3 不直接指向 PDT 表，而是指向一张新的表，叫做 PDPT 表（页目录指针表），PDPT 表中的每一个成员叫做 PDPTE（Page-Directory-Point-Table Entry，页目录指针表项），每项占 8 个字节。PDPT 表只有 4 个成员，因为 2 位比特位只能满足四种情况： <code>00 01 10 11</code> 。</li>\n</ul>\n<p>2-9-9-12 分页结构图</p>\n<p><img data-src=\"image002.png\" alt=\"\" /></p>\n<h1 id=\"pdpte\"><a class=\"anchor\" href=\"#pdpte\">#</a> PDPTE</h1>\n<p><img data-src=\"image004.png\" alt=\"\" /></p>\n<p><code>P位</code> ：第 0 位，有效位<br />\n <code>Avail</code> ：这部分供操作系统软件随意使用，CPU 不使用<br />\n <code>Base Addr</code> ：指向 PDT 表地址，由两部分组成</p>\n<blockquote>\n<p>第一部分：高四字节 32~35 位<br />\n第二部分：低 4 字节 12~31 位<br />\n这两部分加起来共 24 位，后 12 位补 0</p>\n</blockquote>\n<p><code>灰色部分</code> ：保留位</p>\n<p>PWT 位与 PCD 位下节学。</p>\n<h1 id=\"pde\"><a class=\"anchor\" href=\"#pde\">#</a> PDE</h1>\n<p><img data-src=\"image005.png\" alt=\"\" /></p>\n<p>低二十一位是对齐用的，所以每一页为 2^21=2MB。</p>\n<p>PAT 位：页属性表<br />\n只有当 PS=1 时，PAT 位才是有意义的（页属性表只针对页）<br />\n具体含义用到时再查资吧。</p>\n<p>注意：</p>\n<blockquote>\n<p>G 位、PCD 位、PWT 位可以暂且不管。<br />\n其他属性位的含义在上面学习 PDPTE 时或在学习 10-10-12 分页的 PDE 与 PTE 时已经介绍，这里不再详述</p>\n</blockquote>\n<h1 id=\"pte\"><a class=\"anchor\" href=\"#pte\">#</a> PTE</h1>\n<p><img data-src=\"image006.png\" alt=\"\" /></p>\n<p>特别说明：</p>\n<blockquote>\n<p>PTE 中 35-12 是物理页基址，24 位，低 12 位补 0<br />\n 物理页基址 + 12 位的页内偏移指向具体数据</p>\n</blockquote>\n<h1 id=\"xd标志位amd中称为nx即no-excetion\"><a class=\"anchor\" href=\"#xd标志位amd中称为nx即no-excetion\">#</a> XD 标志位（AMD 中称为 NX, 即 No Excetion ）</h1>\n<p>PDE/PTE 结构</p>\n<p><img data-src=\"image007.png\" alt=\"\" /></p>\n<p>段的属性有可读、可写和可执行</p>\n<p>页的属性有可读、可写</p>\n<p>当 RET 执行返回的时候，如果我修改堆栈里面的数据指向一个我提前准备<br />\n好的数据（把数据当作代码来执行，漏洞都是依赖这点，比如 SQL 注入也是）</p>\n<p>所以，Intel 就做了硬件保护，做了一个不可执行位，XD=1 时。那么你的软件溢出<br />\n了也没有关系，即使你的 EIP 蹦到了危险的 “数据区”，也是不可以执行的！</p>\n<p>在 PAE 分页模式下，PDE 与 PTE 的最高位为 XD/NX 位.</p>\n<h1 id=\"实验\"><a class=\"anchor\" href=\"#实验\">#</a> 实验</h1>\n<h2 id=\"在2-9-9-12分页模式下寻找物理地址\"><a class=\"anchor\" href=\"#在2-9-9-12分页模式下寻找物理地址\">#</a> 在 2-9-9-12 分页模式下寻找物理地址</h2>\n<p>老办法利用 CE 查找</p>\n<p><img data-src=\"image008.png\" alt=\"\" /></p>\n<p>按照 2-9-9-12 拆分 <code>000B1C18</code></p>\n<p>00<br />\n0 0000 0000<br />\n0 1011 0001</p>\n<p>2-9-9-12: <code>0-0-B1-C18</code></p>\n<p>在 windbg 中查找</p>\n<p>其中 notepad.exe 的 CR3 为： <code>0aac01a0</code></p>\n<p>在 windbg 中执行：<br />\n <code>!dq 0aac01a0</code></p>\n<p><img data-src=\"image009.png\" alt=\"\" /></p>\n<p><code>!dq 2bdcd000</code></p>\n<p><img data-src=\"image010.png\" alt=\"\" /></p>\n<p><code>!dq 2bdc8000 + b1*8</code></p>\n<p><img data-src=\"image011.png\" alt=\"\" /></p>\n<p><code>!db 2be1f000 + C18</code></p>\n<p><img data-src=\"image012.png\" alt=\"\" /></p>\n<h2 id=\"给0地址挂物理页\"><a class=\"anchor\" href=\"#给0地址挂物理页\">#</a> 给 0 地址挂物理页</h2>\n<p>代码</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a Value Adress:%p\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token number\">0x666</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"p Value;%x\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>程序的 CR3： <code>0aac02c0</code></p>\n<p>直接用 <code>!vtop</code>  命令了，不在手动拆分了。</p>\n<p>0 和 0012ff54 地址对应的 PDPE、PDE、PTE</p>\n<p><img data-src=\"image013.png\" alt=\"\" /></p>\n<p>这里就把 0 地址 PTE 指向的物理页修改为变量 aPTE 指向的物理页了。</p>\n<p><img data-src=\"image014.png\" alt=\"\" /></p>\n<p>没有！eq 命令，这里要用！ed, 注意地址在内存中的排序。</p>\n<p><code>!ed ac168000 acdb2867</code> <br />\n <code>!ed ac168004 80000000</code></p>\n<p><img data-src=\"image014.png\" alt=\"\" /></p>\n<p>成功！</p>\n<h2 id=\"逆向分析mmisaddressvalid函数2-9-9-12\"><a class=\"anchor\" href=\"#逆向分析mmisaddressvalid函数2-9-9-12\">#</a> 逆向分析 MmIsAddressValid 函数 (2-9-9-12)</h2>\n<p><img data-src=\"image015.png\" alt=\"\" /></p>\n<ul>\n<li>\n<p>学习操作系统是如何判断线性地址有效的。</p>\n</li>\n<li>\n<p>学习操作系统是如何找到 PDE、PTE 的，与之相关的汇编代码我们可以用到。也可以把汇编转成 C。</p>\n</li>\n</ul>\n<pre><code>mov     eax, VirtualAddress;\nshr     eax, 12h        ; 右移18位，相当于右移21位取PDI,然后乘以8，即再左移3位。\nand     eax, 3FF8h        ; 与操作，取 eax = PDPTI * 4KB + PDI * 8\nsub     eax, 3FA00000h  ; eax = C0600000 + PDPTI * 4KB + PDI * 8\n\t\t\t\t\t\t; eax 指向了 PDE\n</code></pre>\n<pre><code>mov     ecx, VirtualAddress;\nshr     ecx, 9          ; 相当于右移12位，然后乘以8\nand     ecx, 7FFFF8h    ; ecx = PDPTI * 2MB + PDI * 4KB + PTI * 8\nsub     ecx, 40000000h  ; ecx = C0000000 + PDPTI * 2MB + PDI * 4KB + PTI * 8\n\t\t                ; ecx 指向 PTE\n</code></pre>\n<h3 id=\"内存中的2-9-9-12分页结构图\"><a class=\"anchor\" href=\"#内存中的2-9-9-12分页结构图\">#</a> 内存中的 2-9-9-12 分页结构图</h3>\n<p>由 <strong>逆向分析 MmIsAddressValid 函数 (2-9-9-12)</strong> 可以联想到内存中的 2-9-9-12 分页结构图</p>\n<p><img data-src=\"image016.png\" alt=\"\" /></p>\n<p>总结如下:\t<br />\n1. 第三个 PDPTE 指向了一个 PDT 表，此表的前四项 指向了 PDPTE 的每一个元素<br />\n 2. 根据计算 C0600000 的最大索引，不会超过 C0604000</p>\n<pre><code class=\"language-asm\">\t \t\t\t\t\t\t\t\t\t\t\t\t mov     edi, edi\n\t.text:0043C92A 55                                push    ebp\n\t.text:0043C92B 8B EC                             mov     ebp, esp\n\t.text:0043C92D 51                                push    ecx\n\t.text:0043C92E 51                                push    ecx\n\t.text:0043C92F 8B 4D 08                          mov     ecx, [ebp+VirtualAddress]\n\t.text:0043C932 56                                push    esi\n\t.text:0043C933 8B C1                             mov     eax, ecx\n\t.text:0043C935 C1 E8 12                          shr     eax, 12h\n\t.text:0043C938 BE F8 3F 00 00                    mov     esi, 3FF8h\n\t.text:0043C93D 23 C6                             and     eax, esi\n\t.text:0043C93F 2D 00 00 A0 3F                    sub     eax, 3FA00000h\n</code></pre>\n<p><code>线性地址 &gt;&gt;18 +C0600000</code>  也就是说。得出的索引是 <code>2^14</code> ，最大值 <code>4000H</code>  实际应用从 0 开始，也就是  <code>4000H-(1*8byte)</code> <br />\n 那么得到最后一个 PDE 也就是 <code>C06003FFE8</code></p>\n<p>由此可推出</p>\n<blockquote>\n<p>C0600000 是第一个 PDT 表的首地址<br />\n C0601000 是第二个 PDT 表的首地址<br />\n C0602000 是第三个 PDT 表的首地址<br />\n C0603000 是第四个 PDT 表的首地址</p>\n</blockquote>\n<p>2-9-9-12 分页下</p>\n<p>总结进程的 0xC06000000-0xC0603000 线性地址对应的物理页分别存储第一个 PDT 表到第 4 个 PDT 表</p>\n<p>而通过当前进程 CR3 指向 PDPT 表只有四项，每项指向一 PDT 表基址</p>\n<p>第一个 PDT 表可以寻址 0x00000000-0x3FFFFFFF           这个 PDT 表映射的线性地址是 0xC0600000</p>\n<p>第二个 PDT 表可以寻址 0x40000000-0x7FFFFFFF           这个 PDT 表映射的线性地址是 0xC0601000</p>\n<p>第三个 PDT 表可以寻址 0x80000000-0xBFFFFFFF           这个 PDT 表映射的线性地址是 0xC0602000</p>\n<p>第四个 PDT 表可以寻址 0xC0000000-0xFFFFFFFF          这个 PDT 表映射的线性地址是 0xC0603000</p>\n<p>注意的是仔细看上面第 0xC0600000 地址拆分的时候可以看到这个线性地址对应物理页既是的 PDT 表有是 PTT 表</p>\n<p>本来就是 2-9-9-12PTT 表有  4KB*512*4=8M 线性地址存储，还有 4 个 PDT，这四个 PDT 存储在 0xC0600000-0xC0603000</p>\n<p>这个四个 PDT 表都既是 PDT 也是 PTT 表，否则 8M 的内存是不够的</p>\n<p>具体内容参考原文，链接为：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Rhb2xhb2Rhd2hvL2FydGljbGUvZGV0YWlscy8xMDkxODM4ODM=\">https://blog.csdn.net/taolaodawho/article/details/109183883</span></p>\n<h2 id=\"测试xd位\"><a class=\"anchor\" href=\"#测试xd位\">#</a> 测试 XD 位</h2>\n<p>CPU 可读 可写 可执行判断</p>\n<p>可读 可写的判断</p>\n<blockquote>\n<p>mov eax,ebx</p>\n</blockquote>\n<p>ebx 就是要进行可读判断 eax 进行可写判断</p>\n<blockquote>\n<p>jmp 0x12345678 // 可以修改 EIP 的指令都会进行可执行判断</p>\n</blockquote>\n<p>可执行判断，如果 PDE PTE 其中任何一个的最高位是 1 那么这个指令就会执行失败。</p>\n<p>代码转自<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0t3YW5zeS9hcnRpY2xlL2RldGFpbHMvMTA4OTY1MTk2\"> https://blog.csdn.net/Kwansy/article/details/108965196</span></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;Windows.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>buff<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>DWORD <span class=\"token operator\">*</span><span class=\"token function\">GetPDE</span><span class=\"token punctuation\">(</span>DWORD addr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xc0600000</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>addr <span class=\"token operator\">>></span> <span class=\"token number\">18</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x3ff8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token comment\">//DWORD PDPTI = addr >> 30;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token comment\">//DWORD PDI = (addr >> 21) &amp; 0x000001FF;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token comment\">//DWORD PTI = (addr >> 12) &amp; 0x000001FF;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token comment\">//return (DWORD *)(0xC0600000 + PDPTI * 0x1000 + PDI * 8);</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>DWORD <span class=\"token operator\">*</span><span class=\"token function\">GetPTE</span><span class=\"token punctuation\">(</span>DWORD addr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xc0000000</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>addr <span class=\"token operator\">>></span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x7ffff8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token comment\">//DWORD PDPTI = addr >> 30;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token comment\">//DWORD PDI = (addr >> 21) &amp; 0x000001FF;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token comment\">//DWORD PTI = (addr >> 12) &amp; 0x000001FF;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token comment\">//return (DWORD *)(0xC0000000 + PDPTI * 0x200000 + PDI * 0x1000 + PTI * 8);</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">__declspec</span><span class=\"token punctuation\">(</span>naked<span class=\"token punctuation\">)</span> <span class=\"token function\">R0Function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t__asm</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\tpush ebp</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t\tmov ebp<span class=\"token punctuation\">,</span>esp</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t\tsub esp<span class=\"token punctuation\">,</span><span class=\"token number\">0x1000</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t\tpushad</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t\tpushfd\t\t</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t__asm push fs</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token comment\">//__asm int 3</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token comment\">// 修改 buff 的 XD 位</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token function\">GetPDE</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>buff<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|=</span> <span class=\"token number\">0x80000000</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token function\">GetPTE</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>buff<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|=</span> <span class=\"token number\">0x80000000</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t<span class=\"token comment\">//__asm int 3</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t__asm pop fs</pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t__asm</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\tpopfd</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\t\tpopad</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t\t\tadd esp<span class=\"token punctuation\">,</span><span class=\"token number\">0x1000</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t\t\tmov esp<span class=\"token punctuation\">,</span>ebp</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t\t\tpop ebp</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t\t\tiretd</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\tDWORD dwEAX <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\tBYTE bytecode <span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0x90</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xB8</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x01</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xC3</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// NOP, MOV EAX,1, RET</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t<span class=\"token keyword\">int</span> xd<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t<span class=\"token comment\">// 申请一个内存页，写入硬编码</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\tbuff <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">VirtualAlloc</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x1000</span><span class=\"token punctuation\">,</span>MEM_COMMIT<span class=\"token punctuation\">,</span>PAGE_EXECUTE_READWRITE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"buff: %p\\n\"</span><span class=\"token punctuation\">,</span> buff<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t<span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>buff<span class=\"token punctuation\">,</span>bytecode<span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t<span class=\"token comment\">// 测试，对比 XD=0 和 XD=1 的运行结果</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输入XD位：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>xd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输入 0 可以调用，输入 1 调用失败</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\t<span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>xd <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"在IDT表构建中断门，请在windbg中执行下面的指令：\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"eq 8003f500 %04xee00`0008%04x\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>R0Function<span class=\"token operator\">>></span><span class=\"token number\">16</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>R0Function <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x0000FFFF</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>\t\t<span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>\t\t__asm <span class=\"token keyword\">int</span> <span class=\"token number\">0x20</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"XD位修改成功，buff不可执行.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>\t__asm</pre></td></tr><tr><td data-num=\"78\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>\t\t\tpush eax</pre></td></tr><tr><td data-num=\"80\"></td><td><pre>\t\t\txor eax<span class=\"token punctuation\">,</span>eax</pre></td></tr><tr><td data-num=\"81\"></td><td><pre>\t\t\tcall buff</pre></td></tr><tr><td data-num=\"82\"></td><td><pre>\t\t\tmov dwEAX<span class=\"token punctuation\">,</span>eax</pre></td></tr><tr><td data-num=\"83\"></td><td><pre>\t\t\tpop eax</pre></td></tr><tr><td data-num=\"84\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dwEAX <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"调用失败.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dwEAX <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"调用成功.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bye!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>\t<span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>如果将 XD 修改为 1，那么执行 CALL 会失败，程序会卡死。</p>\n<p><img data-src=\"image018.png\" alt=\"\" /></p>\n<p>如果 XD=0，就是默认情况了，可以正常调用函数并返回。</p>\n<p><img data-src=\"image019.png\" alt=\"\" /></p>\n<h1 id=\"windbg中查看0xc0000000与0xc0600000\"><a class=\"anchor\" href=\"#windbg中查看0xc0000000与0xc0600000\">#</a> windbg 中查看 0xC0000000 与 0xC0600000</h1>\n<p>其中 <code>0aac0300</code>  是 CR3。<br />\n <code>!vtop 0aac0300</code>  查看 0 地址的分页</p>\n<p><img data-src=\"image020.png\" alt=\"\" /></p>\n<p>可以发现这两个地址的特殊性， <code>0xC0600000</code>  所在的物理页既是 PDE 也是 PTE 还是物理页， <code>0xC0000000</code>  所在的物理页既是 PTE 还是物理页。</p>\n<p><img data-src=\"image021.png\" alt=\"\" /></p>\n<p><code>0xC0600000</code>  所在的物理页是 0 地址的 PDE</p>\n<p><img data-src=\"image022.png\" alt=\"\" /></p>\n<p><code>0xC0000000</code>  所在的物理页是 0 地址的 PTE</p>\n<h1 id=\"reference\"><a class=\"anchor\" href=\"#reference\">#</a> Reference</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0t3YW5zeS9hcnRpY2xlL2RldGFpbHMvMTA4OTU2OTcx\">https://blog.csdn.net/Kwansy/article/details/108956971</span><br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxOTg4NDQ4L2FydGljbGUvZGV0YWlscy8xMDI3MDk0NzA=\">https://blog.csdn.net/qq_41988448/article/details/102709470</span><br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0t3YW5zeS9hcnRpY2xlL2RldGFpbHMvMTA4OTY1MTk2\">https://blog.csdn.net/Kwansy/article/details/108965196</span><br />\n 页机制和 2-9-9-12 分页线性地址页表之间的映射关系<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Rhb2xhb2Rhd2hvL2FydGljbGUvZGV0YWlscy8xMDkxODM4ODM=\"> https://blog.csdn.net/taolaodawho/article/details/109183883</span></p>\n",
            "tags": [
                "2-9-9-12分页",
                "PAE",
                "PDPTE",
                "PDE",
                "PTE",
                "XD标志位",
                "逆向分析MmIsAddressValid函数(2-9-9-12)"
            ]
        },
        {
            "id": "https://or0kit.github.io/Bin/Core/WindowsXp/Protect-Mode/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F-%E9%80%86%E5%90%91%E5%88%86%E6%9E%90MmIsAddressValid%E5%87%BD%E6%95%B0-10-10-12/",
            "url": "https://or0kit.github.io/Bin/Core/WindowsXp/Protect-Mode/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F-%E9%80%86%E5%90%91%E5%88%86%E6%9E%90MmIsAddressValid%E5%87%BD%E6%95%B0-10-10-12/",
            "title": "保护模式-逆向分析MmIsAddressValid函数(10-10-12)",
            "date_published": "2021-08-30T06:17:30.000Z",
            "content_html": "<h1 id=\"逆向分析mmisaddressvalid函数\"><a class=\"anchor\" href=\"#逆向分析mmisaddressvalid函数\">#</a> 逆向分析 MmIsAddressValid 函数</h1>\n<h2 id=\"找到-mmisaddressvalid-函数\"><a class=\"anchor\" href=\"#找到-mmisaddressvalid-函数\">#</a> 找到 MmIsAddressValid 函数</h2>\n<p>方法一：在 windbg 中输入  <code>u MmIsAddressValid l1A</code></p>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<p>方法二：在 c:\\windows\\system32\\ 中找到内核程序，用 IDA 分析。</p>\n<p>ntkrnlpa.exe 2-9-9-12 分页内核<br />\n ntoskrnl.exe 10-10-12 分页内核</p>\n<p>打开 ntoskrnl.exe 后，加载 pdb 文件，即可查看函数名称。</p>\n<p><img data-src=\"image002.png\" alt=\"\" /></p>\n<h2 id=\"分析代码\"><a class=\"anchor\" href=\"#分析代码\">#</a> 分析代码</h2>\n<p>分析前，先聊聊函数头的 MOV EDI,EDI 指令。这条指令看起来什么也没做，但是很多系统函数开头都有这条指令，why？其实这是为了实现对函数行为的动态修改（热补丁），可以一下这篇文章 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N3YW5hYmluL2FydGljbGUvZGV0YWlscy8xNzU1MDg5Nw==\">函数开始处的 MOV EDI, EDI 的作用</span></p>\n<p><img data-src=\"image003.png\" alt=\"\" /></p>\n<p>函数主要是检测 P 位是否有效。<br />\nPAT 还没学，就不多逆了。</p>\n<h2 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h2>\n<p>学习操作系统的汇编算法。</p>\n<h1 id=\"reference\"><a class=\"anchor\" href=\"#reference\">#</a> Reference</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0t3YW5zeS9hcnRpY2xlL2RldGFpbHMvMTA4OTQ1MDY4\">https://blog.csdn.net/Kwansy/article/details/108945068</span></p>\n",
            "tags": [
                "逆向分析MmIsAddressValid函数"
            ]
        },
        {
            "id": "https://or0kit.github.io/Bin/Core/WindowsXp/Protect-Mode/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F-%E6%89%A9%E5%B1%95-%E4%BD%BF%E7%94%A8LDT/",
            "url": "https://or0kit.github.io/Bin/Core/WindowsXp/Protect-Mode/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F-%E6%89%A9%E5%B1%95-%E4%BD%BF%E7%94%A8LDT/",
            "title": "保护模式-扩展-使用LDT",
            "date_published": "2021-08-29T07:24:10.000Z",
            "content_html": "<h1 id=\"楔子\"><a class=\"anchor\" href=\"#楔子\">#</a> 楔子</h1>\n<p>野路子出身，之前一直没看懂火哥的使用 LDT 的代码，看了看《x86/x64 体系探索及编程》研究了一下。</p>\n<h2 id=\"ldt\"><a class=\"anchor\" href=\"#ldt\">#</a> LDT</h2>\n<p>Local Descriptor Table 是其中的一个描述符表，LDT 由 LDTR 的 base 域进行定位。</p>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<p>LDTR 的结构与段寄存器的结构是完全一致的，包括：base、limit、attribute 域，以及 selector 域，base、limit 和 atribute 组成 LDTR 的 Cache 部分，也是隐藏不可见的。像段寄存器一样，LDTR 需要使用 LDT 描述符进行加载，LDT 描述符只能存放在 GDT 中。 <strong>32 位的 LDTR.base 值能让 LDT 定位在 4G 的线性地址空间任何位置。</strong> 在 64 位模式下，LDTR.base 被扩展为 64 位。</p>\n<h2 id=\"ldt描述符\"><a class=\"anchor\" href=\"#ldt描述符\">#</a> LDT 描述符</h2>\n<p>LDT 描述符属于系统级的描述符，它的结构与 TSS 完全一致。</p>\n<p><img data-src=\"image002.png\" alt=\"\" /></p>\n<p>LDT 描述符的类型是 0x02，S 标志位为 0 值，表示属于一个 system 描述符。</p>\n<h2 id=\"ldtr的加载\"><a class=\"anchor\" href=\"#ldtr的加载\">#</a> LDTR 的加载</h2>\n<p>系统使用 LLDT 指令进行显式加载，或在进行任务切换时隐式地从 TSS 段里加载。</p>\n<p><code>mov ax, LDT_SEL ; LDT selector</code> <br />\n <code>lldt ax </code></p>\n<p><span class=\"label primary\">lldt 指令执行在 0 级权限里。处理器会检查以下内容:</span></p>\n<blockquote>\n<p><strong>selector 检查</strong></p>\n</blockquote>\n<blockquote>\n<p>对 selector 检查两个方面。</p>\n<ul>\n<li>如果提供的 selector 是 Null selector，则会产生 #GP 异常。</li>\n<li>如果 selector.TI=1，表示在 LDT 里，将产生 #GP 异常。</li>\n</ul>\n</blockquote>\n<blockquote>\n<p><strong>limit 检查</strong></p>\n</blockquote>\n<blockquote>\n<p>selector 是否超出 GDT limit 值。也就是 0x3ff。</p>\n</blockquote>\n<blockquote>\n<p><strong>LDT 描述符类型检查</strong></p>\n</blockquote>\n<blockquote>\n<p>能被加载到 LDTR 里的描述符必须如下。</p>\n<ul>\n<li>s 标志为 0，属于 system 描述符。</li>\n<li>P 标志为 1，表示在内存中。</li>\n<li>Type 值为 0x02，它是 LDT 描述符。</li>\n</ul>\n</blockquote>\n<h2 id=\"构ldt造段描述符\"><a class=\"anchor\" href=\"#构ldt造段描述符\">#</a> 构 LDT 造段描述符</h2>\n<p>让 base=0x00000000，limit=0x3ff。<br />\nLDT 段描述符： <code>0000e200`000003ff</code></p>\n<h2 id=\"实验\"><a class=\"anchor\" href=\"#实验\">#</a> 实验</h2>\n<p>知道了理论我们来实际使用一下。</p>\n<p>火哥说把权限转移到 LDT 表中，写保护时别人很难检测…… 小白不懂，扩展一下思路。</p>\n<p><span class=\"label primary\">这里有一个小细节需要注意:</span></p>\n<p><img data-src=\"image003.png\" alt=\"\" /></p>\n<p>其中红色箭头所指的内容，才是数据在计算机中的真实样子，其余的几种是 windbg 以数据宽度排好显示的。构建段描述符时要注意。<br />\n这是大端序、小段序排列的原因。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> dwLDT<span class=\"token punctuation\">[</span><span class=\"token number\">0x3ff</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 这里为什么用 6 个字节存储 GDT 的地址我也不清楚</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> GDTAddress<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token function\">__declspec</span><span class=\"token punctuation\">(</span>naked<span class=\"token punctuation\">)</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t__asm <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\tpushad<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\tpushfd<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t<span class=\"token comment\">// 取 GDT 表的地址</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\tlea eax<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>GDTAddress <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\tmov eax<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>eax<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t<span class=\"token comment\">//eax = 8003f090</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\tlea eax<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>eax <span class=\"token operator\">+</span> <span class=\"token number\">0x90</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t<span class=\"token comment\">// 取定义的 dwLDT 的地址 本程序中是 0X00417138，ecx = 00417138</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\tlea ecx<span class=\"token punctuation\">,</span> dwLDT<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t<span class=\"token comment\">// 将 7138 放进 ebx 的低 16 位中，bx =  7138</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\tmov bx<span class=\"token punctuation\">,</span> cx<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t<span class=\"token comment\">// 左移 16 位，将 7138 放进 ebx 的高 16 位中 ebx = 71380000</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\tshl ebx<span class=\"token punctuation\">,</span> <span class=\"token number\">0x10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t<span class=\"token comment\">// 把 0x03ff 放进 ebx 的低 16 位中，此时 ebx 的值为 0x713803ff</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\tmov bx<span class=\"token punctuation\">,</span> <span class=\"token number\">0x03ff</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t<span class=\"token comment\">// 给地址为 0x8003f090 内存空间赋值为： ff 03 38 71 </span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\tmov dword ptr ds <span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>eax<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">,</span> ebx<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t<span class=\"token comment\">//eax 的值为 0x8003f094</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\tlea eax<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>eax <span class=\"token operator\">+</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t<span class=\"token comment\">// 右移 16 位，ecx 的值为 0x00000041</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\tshr ecx<span class=\"token punctuation\">,</span> <span class=\"token number\">0x10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\t<span class=\"token comment\">// 给地址为 0x8003f094 内存赋值为 0x41</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\tmov byte ptr ds <span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>eax<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">,</span> cl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\t<span class=\"token comment\">// 给地址为 0x8003f095 内存赋值为 0x00e2</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\tmov word ptr ds <span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>eax <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">0x00e2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\t<span class=\"token comment\">// 给地址为 0x8003f097 内存赋值为 0x</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\tmov byte ptr ds <span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>eax <span class=\"token operator\">+</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">,</span> ch<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\t<span class=\"token comment\">// 加载 LDT，使 LDTR 装载 LDT 选择子</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\tmov ax<span class=\"token punctuation\">,</span> <span class=\"token number\">0x93</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\tlldt ax<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\tpopfd<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\tpopad<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t\tretf<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> Selector<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x48</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 准备调用门提权</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> cLdtr <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t<span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b=%d\\n\"</span><span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>dwLDT <span class=\"token operator\">+</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x0000ffff</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>dwLDT <span class=\"token operator\">+</span> <span class=\"token number\">0xc</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00cff300</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"windbg execute eq 8003f048 %04xec00`0008%04x\\n\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t\t<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>Func <span class=\"token operator\">>></span> <span class=\"token number\">0x10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xffff</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t\t<span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>Func <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xffff</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"dwLDT Address:%#010X\\n\"</span><span class=\"token punctuation\">,</span> dwLDT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t<span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t__asm <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t\tsgdt GDTAddress<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t\tpush fs<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t\tcall fword ptr Selector<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\t\tsldt cLdtr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>\t\tpop fs<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\t\tmov ax<span class=\"token punctuation\">,</span> <span class=\"token number\">0x0f</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\t\tmov ds<span class=\"token punctuation\">,</span> ax<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\t\tmov eax<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\t\tmov b<span class=\"token punctuation\">,</span> eax<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b=%d\\n\"</span><span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\t<span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>调试过程中的截图</p>\n<p>程序执行完 <code>mov dword ptr ds : [eax] , ebx</code>  后，各寄存器的值与内存中 <code>0x8003f090</code>  处的数据</p>\n<p><img data-src=\"image004.png\" alt=\"\" /></p>\n<p>成功执行</p>\n<p><img data-src=\"image005.png\" alt=\"\" /></p>\n<p>修改一下 LDT 表中段描述符的 DPL<br />\n <code>*((unsigned int*)(dwLDT + 0xc)) = 0x00cff300;</code></p>\n<p>==&gt;&gt;</p>\n<p><code>*((unsigned int*)(dwLDT + 0xc)) = 0x00cf9300;</code></p>\n<p>执行结果：</p>\n<p><img data-src=\"image006.png\" alt=\"\" /></p>\n<p>权限异常。</p>\n<p>实验结束！</p>\n",
            "tags": [
                "LDT段描述符",
                "LDT"
            ]
        },
        {
            "id": "https://or0kit.github.io/Bin/Core/WindowsXp/Protect-Mode/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F-%E9%A1%B5%E7%9B%AE%E5%BD%95%E8%A1%A8%E4%B8%8E%E9%A1%B5%E8%A1%A8%E7%9A%84%E5%9F%BA%E5%9D%80/",
            "url": "https://or0kit.github.io/Bin/Core/WindowsXp/Protect-Mode/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F-%E9%A1%B5%E7%9B%AE%E5%BD%95%E8%A1%A8%E4%B8%8E%E9%A1%B5%E8%A1%A8%E7%9A%84%E5%9F%BA%E5%9D%80/",
            "title": "保护模式-页目录表与页表的基址",
            "date_published": "2021-08-29T06:16:49.000Z",
            "content_html": "<h1 id=\"楔子\"><a class=\"anchor\" href=\"#楔子\">#</a> 楔子</h1>\n<p>如果我们想填充 PDE 与 PTE，那么必须能够访问 PDT 与 PTT，这样就存在 2 个问题：</p>\n<ol>\n<li>一定已经有 “人” 为我们访问 PDT 与 PTT 挂好了 PDE 与 PTE, 我们只用找到这个线性地址就可以了</li>\n<li>这个为我们挂好 PDE 与 PTE 的 “人” 是谁？</li>\n</ol>\n<p>注意：<br />\nCR3 中存储的是物理地址，不能在程序中直接读取的。如果想读取，也要把 Cr3 的值挂到 PDT 和 PTT 中才能访问，那么怎么通过线性地址访问 PDT 和 PTT 呢？</p>\n<h1 id=\"页目录表基址\"><a class=\"anchor\" href=\"#页目录表基址\">#</a> 页目录表基址</h1>\n<p>页目录表基址 = 线性地址： <code>C0300000</code></p>\n<h2 id=\"实验拆分线性地址c0300000并查看其对应的物理页\"><a class=\"anchor\" href=\"#实验拆分线性地址c0300000并查看其对应的物理页\">#</a> 实验：拆分线性地址 C0300000，并查看其对应的物理页</h2>\n<p>随便使用某个程序的 CR3，访问线性地址 <code>C0300000</code>  的物理地址。</p>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<p>可以发现 <code>C0300000</code>  的物理页内容与 PDT 表完全相同。</p>\n<p><strong>实验总结</strong></p>\n<ul>\n<li>线性地址 C0300000 对应的物理页就是页目录表</li>\n<li>这个物理页即页目录表本身也是页表</li>\n<li>这个物理页是一张特殊的页表，每一项 PTE 指向的不是普通的物理页，而是指向其它的页表</li>\n<li>访问页目录表的公式：C0300000 + PDI*4（I=index）</li>\n</ul>\n<p>页目录表基址 (XP 系统 10-10-12 分页模式)</p>\n<p><img data-src=\"image002.png\" alt=\"\" /></p>\n<h1 id=\"页表基址\"><a class=\"anchor\" href=\"#页表基址\">#</a> 页表基址</h1>\n<p>页表基址 = 线性地址： <code>C0000000</code></p>\n<h2 id=\"实验拆分线性地址c0000000并查看其对应的物理页\"><a class=\"anchor\" href=\"#实验拆分线性地址c0000000并查看其对应的物理页\">#</a> 实验：拆分线性地址 C0000000，并查看其对应的物理页</h2>\n<p>随便使用某个程序的 CR3，访问线性地址 <code>C0000000</code>  的物理地址。</p>\n<p>查看第一个 PTE</p>\n<p><img data-src=\"image004.png\" alt=\"\" /></p>\n<p>可以发现 PTE 完全一样。</p>\n<p><img data-src=\"image003.png\" alt=\"\" /></p>\n<p>因为微软与新特尔协商，CR3 的值 + 0xC00 的的地址处存放的值还是 CR3 的值。所以访问线性地址 <code>C0000000</code>  就是找第一个 PTE 的地址。</p>\n<p><strong>实验总结</strong></p>\n<ul>\n<li>页表被映射到了从 0xC0000000~0xC03FFFFF 的 4M 地址空间</li>\n<li>在这 1024 个表中有一张特殊的表：页目录表，是第 0x300 张表。</li>\n<li>页目录被映射到了 0xC0300000 开始处的 4K 地址空间</li>\n<li>访问页表的公式：0xC0000000 + PDI*4096 + PTI*4（I=index）</li>\n</ul>\n<p>再看一遍这个图</p>\n<p><img data-src=\"image002.png\" alt=\"\" /></p>\n<h1 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h1>\n<p>有了 0xC0300000 和 0xC0000000 能做什么：</p>\n<p><strong>掌握了这两个地址，就掌握了一个进程所有的物理内存读写权限</strong></p>\n<p>公式总结：</p>\n<ol>\n<li>访问页目录表的公式：C0300000 + PDI*4（I=index）</li>\n<li>访问页表的公式：0xC0000000 + PDI*4096 + PTI*4（I=index）</li>\n</ol>\n<h2 id=\"实践\"><a class=\"anchor\" href=\"#实践\">#</a> 实践</h2>\n<p>理论知道了开始实践。</p>\n<h3 id=\"在0地址执行shellcode\"><a class=\"anchor\" href=\"#在0地址执行shellcode\">#</a> 在 0 地址执行 ShellCode</h3>\n<p>所需知识：</p>\n<ul>\n<li>内联汇编</li>\n<li>硬编码</li>\n<li>CPU 提权</li>\n<li>10-10-12 页表基址</li>\n</ul>\n<p>除了自己构造调用门描述符外，其他都代码实现。</p>\n<p>实际用途：火哥说的是写保护…… 小白也不懂，有些检测并不检测空指针赋值区和 64K 禁入区。</p>\n<p><img data-src=\"image005.png\" alt=\"\" /></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 在 0 地址挂载物理页并执行 ShellCode</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;Windows.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">char</span> ShellCode<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t\t<span class=\"token number\">0x6a</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t\t<span class=\"token number\">0x6a</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t\t<span class=\"token number\">0x6a</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t\t<span class=\"token number\">0x6a</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t\t<span class=\"token number\">0xe8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t\t<span class=\"token number\">0xc3</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">__declspec</span><span class=\"token punctuation\">(</span>naked<span class=\"token punctuation\">)</span> <span class=\"token function\">CallGate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t__asm</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\tpush <span class=\"token number\">0x30</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\tpop fs<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\tpushad<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\tpushfd<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\tlea eax<span class=\"token punctuation\">,</span>ShellCode<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\tmov ebx<span class=\"token punctuation\">,</span>dword ptr ds<span class=\"token operator\">:</span><span class=\"token punctuation\">[</span><span class=\"token number\">0xc0300000</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\ttest ebx<span class=\"token punctuation\">,</span>ebx<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\tje __gpPDE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\tshr eax<span class=\"token punctuation\">,</span><span class=\"token number\">12</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t<span class=\"token operator\">and</span> eax<span class=\"token punctuation\">,</span><span class=\"token number\">0xfffff</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\tshl eax<span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\tadd eax<span class=\"token punctuation\">,</span> <span class=\"token number\">0xc0000000</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\tmov eax<span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span>eax<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\tmov dword ptr ds<span class=\"token operator\">:</span><span class=\"token punctuation\">[</span><span class=\"token number\">0xc0000000</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>eax<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\tjmp __back<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>__gpPDE<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\tshr eax<span class=\"token punctuation\">,</span><span class=\"token number\">22</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\t<span class=\"token operator\">and</span> eax<span class=\"token punctuation\">,</span><span class=\"token number\">0x3ff</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\tshl eax<span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\tadd eax<span class=\"token punctuation\">,</span><span class=\"token number\">0xc0300000</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\tmov eax<span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span>eax<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\tmov dword ptr ds<span class=\"token operator\">:</span><span class=\"token punctuation\">[</span><span class=\"token number\">0xc0300000</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>eax<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>__back<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t\tpopfd<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t\tpopad<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t\tretf<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> FuncAddress <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>MessageBox<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t<span class=\"token keyword\">int</span> OFA <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>ShellCode<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xfff</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t<span class=\"token comment\">//Amendment EIP</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>ShellCode<span class=\"token punctuation\">[</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> FuncAddress <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span><span class=\"token number\">13</span> <span class=\"token operator\">+</span> OFA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t<span class=\"token keyword\">char</span> GateSegment<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x48</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MessageBox Address:%#010X\\nCallGate Address:%#010X\\nShellCode:%#010X\\n\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t\t   FuncAddress<span class=\"token punctuation\">,</span>CallGate<span class=\"token punctuation\">,</span>ShellCode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"windbg execute eq 8003f048 %04xec00`0008%04x\\n\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t\t   <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>CallGate<span class=\"token operator\">>></span><span class=\"token number\">0x10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xffff</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t\t   <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>CallGate <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xffff</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>\t<span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\t__asm</pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\t\tcall fword ptr ds<span class=\"token operator\">:</span><span class=\"token punctuation\">[</span>GateSegment<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>\t\tpush <span class=\"token number\">0x3b</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//R3 FS Value</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>\t\tpop fs<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\t\tmov eax<span class=\"token punctuation\">,</span>OFA<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>\t\tcall eax<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>\t<span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>成功！这个例子只是抛砖引玉，更多的还是需要自身区专研。</p>\n<p><img data-src=\"image006.png\" alt=\"\" /></p>\n<h1 id=\"reference\"><a class=\"anchor\" href=\"#reference\">#</a> Reference</h1>\n<p>滴水中级课程<br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxOTg4NDQ4L2FydGljbGUvZGV0YWlscy8xMDI2NTI3NzY=\"> https://blog.csdn.net/qq_41988448/article/details/102652776</span></p>\n",
            "tags": [
                "页目录表基址",
                "页表的基址",
                "0地址执行ShellCode"
            ]
        },
        {
            "id": "https://or0kit.github.io/Bin/Core/WindowsXp/Protect-Mode/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%E2%80%94PDE-PTE/",
            "url": "https://or0kit.github.io/Bin/Core/WindowsXp/Protect-Mode/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%E2%80%94PDE-PTE/",
            "title": "保护模式—PDE_PTE",
            "date_published": "2021-08-25T08:51:04.000Z",
            "content_html": "<h1 id=\"10-10-12分页\"><a class=\"anchor\" href=\"#10-10-12分页\">#</a> 10-10-12 分页</h1>\n<blockquote>\n<p>一个物理页的大小为 4096 字节，即 2 的 12 次方，若要遍历整个物理页，则需要 12 个比特位<br />\n一个页表有 1024 个页表项，1024 等于 2 的十次方，即需要 10 个比特位<br />\n页目录表里有 1024 个页目录项，也需要 10 个比特位</p>\n</blockquote>\n<h1 id=\"cr3\"><a class=\"anchor\" href=\"#cr3\">#</a> CR3</h1>\n<blockquote>\n<p>在所有的寄存器中，只有 Cr3 存储的是物理地址，其它寄存器存的都是线性地址<br />\n Cr3 所存储的物理地址指向了一个页目录表（PDT）<br />\n在 Windows 中，一个页的大小通常为 4KB，即一个页可以存储 1024 个页目录表项（PDE）</p>\n</blockquote>\n<h1 id=\"pde与pte\"><a class=\"anchor\" href=\"#pde与pte\">#</a> PDE 与 PTE</h1>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<ul>\n<li><strong>PDE（页目录表项）</strong></li>\n</ul>\n<p>描述：</p>\n<blockquote>\n<p>页目录表（PDT）的每一项元素称为页目录表项（PDE）<br />\n每个页目录表项指向一个页表（PTT）<br />\n每个页表的大小为 4KB，即一个页表可以存储 1024 个页表项（PTE）</p>\n</blockquote>\n<ul>\n<li><strong>PTE（页表项）</strong></li>\n</ul>\n<p>描述：</p>\n<blockquote>\n<p>页表（PTT）的每一个元素称为页表项（PTE）<br />\n页表项（PTE）所指向的才是真正的物理页</p>\n</blockquote>\n<p>特征：</p>\n<ol>\n<li>PTE 可以指向一个物理页，也可以不指向物理页</li>\n<li>多个 PTE 可以指向同一个物理页</li>\n<li>一个 PTE 只能指向一个物理页</li>\n</ol>\n<h1 id=\"物理页的属性\"><a class=\"anchor\" href=\"#物理页的属性\">#</a> 物理页的属性</h1>\n<p>物理页的属性 = PDE 属性 &amp; PTE 属性</p>\n<p><img data-src=\"image002.png\" alt=\"\" /></p>\n<p><img data-src=\"image003.png\" alt=\"\" /></p>\n<p><code>P位</code> ：是否有效位<br />\n注意：当 PDE 或 PTE 中有一个的属性 P=0 时，物理页就是无效的</p>\n<p><code>R/W位</code> ：读写位<br />\n R/W=0：只读<br />\n R/W=1：可读可写</p>\n<p><code>U/S位</code> ：权限位<br />\n U/S=0：特权用户<br />\n U/S=1：普通用户</p>\n<p><code>PS位</code> ：PDE 特有<br />\n PS == PageSize<br />\nPS=1：PDE 直接指向物理页，低 22 位 = 页内偏移，偏移最大值为 4MB，俗称 &quot;大页&quot;<br />\nPS=0：PDE 指向 PTE</p>\n<p><code>A位</code> ：访问位<br />\n A=1：该 PDE/PTE 被访问过<br />\n A=0：该 PDE/PTE 未被访问过</p>\n<p><code>D位</code> ：脏位<br />\n D=1：该 PDE/PTE 被写过<br />\n D=0：该 PDE/PTE 未被写过</p>\n<p><em><strong>关于 G 位，PWT 位，PCD 位，学完控制寄存器域 TLB 才能讲。</strong></em></p>\n<h1 id=\"实验\"><a class=\"anchor\" href=\"#实验\">#</a> 实验</h1>\n<h2 id=\"修改us位访问高2g内存\"><a class=\"anchor\" href=\"#修改us位访问高2g内存\">#</a> 修改 U/S 位访问高 2G 内存</h2>\n<p>之前学习段的时候，我们可以通过调用门，中断门，任务门等方式将 CPL 提升到 0，从而可以读写高 2G 内存。学习了 U/S 位后，我们可以不提权也能访问高 2G，只需要将想访问的物理页对应的 PDE PTE 的 U/S 位改写为 1 即可。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token number\">0x8003f020</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> addr <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"addr Linear Address:%#010X\\n10-10-12: %x-%x-%x\\n\"</span><span class=\"token punctuation\">,</span>addr<span class=\"token punctuation\">,</span>addr<span class=\"token operator\">>></span><span class=\"token number\">22</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span>addr<span class=\"token operator\">>></span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span><span class=\"token number\">0x3FF</span><span class=\"token punctuation\">,</span>addr<span class=\"token operator\">&amp;</span><span class=\"token number\">0xFFF</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Read High 2G Memory %#010X:%#010X\\n\"</span><span class=\"token punctuation\">,</span>addr<span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>查看 PDE 和 PTE</p>\n<p><img data-src=\"image004.png\" alt=\"\" /></p>\n<p>修改 U/S 位并查看是否修改成功</p>\n<p><img data-src=\"image005.png\" alt=\"\" /></p>\n<p>成功读取高 2G 内存的值</p>\n<p><img data-src=\"image006.png\" alt=\"\" /></p>\n<h2 id=\"ps位验证\"><a class=\"anchor\" href=\"#ps位验证\">#</a> PS 位验证</h2>\n<p>随便找一个进程的 CR3，看一下</p>\n<p><img data-src=\"image007.png\" alt=\"\" /></p>\n<p>CR3: 143d3000<br />\n10-10-12:50-3d3-0</p>\n<h2 id=\"通过修改页表使代码能在0地址处读写\"><a class=\"anchor\" href=\"#通过修改页表使代码能在0地址处读写\">#</a> 通过修改页表使代码能在 0 地址处读写</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> <span class=\"token number\">0x0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">0x12345678</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> addr <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a VirtualAddress:%#010X\\n10-10-12:%x-%x-%x\\n\\n\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>a<span class=\"token operator\">>></span><span class=\"token number\">22</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>a<span class=\"token operator\">>></span><span class=\"token number\">12</span><span class=\"token operator\">&amp;</span><span class=\"token number\">0x3FF</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>a<span class=\"token operator\">&amp;</span><span class=\"token number\">0xFFF</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"addr VirtualAddress:%#010X\\n10-10-12:%x-%x-%x\\n\\n\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\taddr<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\taddr<span class=\"token operator\">>></span><span class=\"token number\">22</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t<span class=\"token punctuation\">(</span>addr<span class=\"token operator\">>></span><span class=\"token number\">12</span><span class=\"token operator\">&amp;</span><span class=\"token number\">0x3FF</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\taddr<span class=\"token operator\">&amp;</span><span class=\"token number\">0xFFF</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Write 0x0 Address Data 0x666 *p=%#010X\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>p<span class=\"token operator\">=</span><span class=\"token number\">0x666</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>查看程序的 CR3，找到 a 变量的物理地址。</p>\n<p><img data-src=\"image008.png\" alt=\"\" /></p>\n<p>更改 0 地址的 PTE，使 0 地址的 PDE 指向变量 a 的 PTE。</p>\n<p><img data-src=\"image009.png\" alt=\"\" /></p>\n<p>结果：</p>\n<p><img data-src=\"image010.png\" alt=\"\" /></p>\n<h2 id=\"通过修改物理页属性使字符串常量可修改\"><a class=\"anchor\" href=\"#通过修改物理页属性使字符串常量可修改\">#</a> 通过修改物理页属性使字符串常量可修改</h2>\n<p>懒得做了，修改一下 <code>R/w</code>  位就行了</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>str <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello World\"</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 众所周知，C 语言中字符串是不能直接修改的。</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"线性地址：%x\"</span><span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t\t\t<span class=\"token comment\">// 让程序执行到这里</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token comment\">// 修改只读变量</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tstr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'M'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"修改后的值：%s\\n\"</span><span class=\"token punctuation\">,</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"reference\"><a class=\"anchor\" href=\"#reference\">#</a> Reference</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0t3YW5zeS9hcnRpY2xlL2RldGFpbHMvMTA4OTE0Mzkz\">https://blog.csdn.net/Kwansy/article/details/108914393</span><br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxOTg4NDQ4L2FydGljbGUvZGV0YWlscy8xMDI2MjcyMzk=\">https://blog.csdn.net/qq_41988448/article/details/102627239</span></p>\n",
            "tags": [
                "PDE_PTE",
                "物理页"
            ]
        },
        {
            "id": "https://or0kit.github.io/Bin/Core/WindowsXp/Protect-Mode/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%E2%80%9410-10-12%E5%88%86%E9%A1%B5/",
            "url": "https://or0kit.github.io/Bin/Core/WindowsXp/Protect-Mode/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%E2%80%9410-10-12%E5%88%86%E9%A1%B5/",
            "title": "保护模式—10-10-12分页",
            "date_published": "2021-08-25T08:50:39.000Z",
            "content_html": "<h1 id=\"正文\"><a class=\"anchor\" href=\"#正文\">#</a> 正文</h1>\n<p>进入页模式</p>\n<p>首先更改内核的分页模式</p>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<p><code>multi(0)disk(0)rdisk(0)partition(1)\\WINDOWS=&quot;XP[debug 10-10-12]&quot; /debug /debugport=com1 /execute=optin /fastdetect</code></p>\n<p>将 noexecute 改成 execute，就改为了 10-10-12 分页模式</p>\n<p>后面会学习 2-9-9-12 分页模式，默认的是 2-9-9-12 分页模式</p>\n<p><code>multi(0)disk(0)rdisk(0)partition(1)\\WINDOWS=&quot;XP[debug 2-9-9-12]&quot; /debug /debugport=com1 /noexecute=optin /fastdetect</code></p>\n<p><img data-src=\"image002.png\" alt=\"\" /></p>\n<h1 id=\"4gb内存\"><a class=\"anchor\" href=\"#4gb内存\">#</a> 4GB 内存</h1>\n<p>每一个进程都有 4GB 内存，一个程序的最大寻址范围 4GB 怎么来的？</p>\n<p>答案是 PTE 的前 20 位 + 线性地址的最后 12 位得到的寻址范围（32 位）就是 4GB</p>\n<h1 id=\"线性地址-有效地址-物理地址\"><a class=\"anchor\" href=\"#线性地址-有效地址-物理地址\">#</a> 线性地址、有效地址、物理地址</h1>\n<p>如下指令：</p>\n<p>MOV eax,dword ptr ds:[0x12345678]</p>\n<p>其中，0x12345678 是有效地址</p>\n<p>ds.Base + 0x12345678 是线性地址</p>\n<p>线性地址挂载在了物理地址上</p>\n<h1 id=\"cpu如何寻找到物理地址\"><a class=\"anchor\" href=\"#cpu如何寻找到物理地址\">#</a> CPU 如何寻找到物理地址</h1>\n<p>每个进程都有一个 CR3,(准确的说是都一个 CR3 的值，CR3 本身是<br />\n个寄存器，一个核，只有一套寄存器)<br />\n CR3 指向一个物理页，一共 4096 字节，如图：</p>\n<p><img data-src=\"image003.png\" alt=\"\" /></p>\n<h1 id=\"10-10-12\"><a class=\"anchor\" href=\"#10-10-12\">#</a> 10-10-12</h1>\n<p><img data-src=\"image004.png\" alt=\"\" /></p>\n<h2 id=\"实验寻找物理地址\"><a class=\"anchor\" href=\"#实验寻找物理地址\">#</a> 实验：寻找物理地址</h2>\n<p>创建一个 txt 程序并用 notepad.exe 打开，写入内容，CE 附加 notepad.exe 进程</p>\n<p><img data-src=\"image005.png\" alt=\"\" /></p>\n<p>附加后配置选项，进行内存扫描</p>\n<p><img data-src=\"image006.png\" alt=\"\" /></p>\n<p>改变 txt 中的内容再次扫描，直到确认地址</p>\n<p><img data-src=\"image007.png\" alt=\"\" /></p>\n<p>确认内存地址为 0x125800<br />\n 开始拆分地址</p>\n<p><img data-src=\"image008.png\" alt=\"\" /></p>\n<pre><code>00125800\n\n0000 0000 0001 0010 0101 1000 0000 0000\n\n用的时候要乘以4\n\n0000 0000 00 ---------------------------  0x0 * 4 = 0x0 \n\t    01 0010 0101  --------------  0x125 * 4 = 0x494\n\t\t\t1000 0000 0000 ---0x800\n</code></pre>\n<p>找那个进程的物理页，物理地址就看哪个进程的 CR3，这里查看 notepad.exe 的 CR3: <code>3c932000</code></p>\n<p><img data-src=\"image009.png\" alt=\"\" /></p>\n<p>突然虚拟机卡住了 windbg 也没用，这俩不知道怪谁。只能重启了，数据也都变了。后面的截图有些误差，重要的是流程。</p>\n<p>获得 cr3 后，在 windbg 中执行</p>\n<p>!dd cr3 + （拆分出来的第一个 10 的值乘以 4）</p>\n<p><code>!dd 3c932000 + 0</code></p>\n<p>重启虚拟机后获取的数据是这个</p>\n<pre><code>000B04B8\n\n10 0\n10 B0\n12 4B8\n</code></pre>\n<p><img data-src=\"image010.png\" alt=\"\" /></p>\n<p>获取第一个值并把后三位去掉变成 0</p>\n<p><img data-src=\"image011.png\" alt=\"\" /></p>\n<p>最后找到物理地址，查看一下</p>\n<p><img data-src=\"image012.png\" alt=\"\" /></p>\n<h1 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h1>\n<p>这节主要是对分页模式有个模糊的轮廓。</p>\n",
            "tags": [
                "10-10-12分页"
            ]
        },
        {
            "id": "https://or0kit.github.io/Bin/Core/WindowsXp/Protect-Mode/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F-%E4%BB%BB%E5%8A%A1%E9%97%A8/",
            "url": "https://or0kit.github.io/Bin/Core/WindowsXp/Protect-Mode/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F-%E4%BB%BB%E5%8A%A1%E9%97%A8/",
            "title": "保护模式-任务门",
            "date_published": "2021-08-13T06:40:49.000Z",
            "content_html": "<h1 id=\"要点回顾\"><a class=\"anchor\" href=\"#要点回顾\">#</a> 要点回顾：</h1>\n<p>在上一节中讲解了如何通过 CALL、JMP 指令访问任务段</p>\n<p>这一节课主要介绍如何通过任务门去访问任务段</p>\n<p>既然已经可以访问任务段了，那为什么还要有任务门呢？</p>\n<h1 id=\"任务门\"><a class=\"anchor\" href=\"#任务门\">#</a> 任务门</h1>\n<p>IDT 表可以包含 3 种门描述符：</p>\n<ul>\n<li>\n<p>任务门描述符</p>\n</li>\n<li>\n<p>中断门描述符</p>\n</li>\n<li>\n<p>陷阱门描述符</p>\n</li>\n</ul>\n<p>接下来我们学习任务门</p>\n<h2 id=\"任务门描述符\"><a class=\"anchor\" href=\"#任务门描述符\">#</a> 任务门描述符</h2>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<p>除了 TSS 描述符选择子以外， 其他位都是固定的。<br />\n我们在 <code>8003f048</code>  处设置 TSS 描述符，因此，任务门描述符的值可以确定： <code>0000e500`00480000</code></p>\n<h2 id=\"任务门执行过程\"><a class=\"anchor\" href=\"#任务门执行过程\">#</a> 任务门执行过程：</h2>\n<ol>\n<li>\n<p>INT N</p>\n</li>\n<li>\n<p>查 IDT 表，找到任务门描述符</p>\n</li>\n<li>\n<p>通过任务门描述符，查 GDT 表，找到 TSS 段描述符</p>\n</li>\n<li>\n<p>使用 TSS 段中的值修改 TR 寄存器</p>\n</li>\n<li>\n<p>IRETD 返回</p>\n</li>\n</ol>\n<h2 id=\"实验\"><a class=\"anchor\" href=\"#实验\">#</a> 实验</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;Windows.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>DWORD<span class=\"token operator\">*</span> TSS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>DWORD dwOk<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">__declspec</span><span class=\"token punctuation\">(</span>naked<span class=\"token punctuation\">)</span> <span class=\"token function\">TestFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tdwOk <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t__asm<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\tiretd</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tDWORD dwCr3<span class=\"token punctuation\">;</span> <span class=\"token comment\">//windbg 获取</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token keyword\">char</span> esp<span class=\"token punctuation\">[</span><span class=\"token number\">0x1000</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 任务切换后的栈</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\tTSS <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>DWORD<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">VirtualAlloc</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span><span class=\"token number\">104</span><span class=\"token punctuation\">,</span>MEM_COMMIT<span class=\"token punctuation\">,</span>PAGE_READWRITE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>TSS <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"VirtualAlloc 失败，%d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">GetLastError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t<span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请在windbg执行: eq 8003f048 %02x00e9%02x`%04x0068\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>TSS<span class=\"token operator\">>></span><span class=\"token number\">24</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x000000FF</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>TSS<span class=\"token operator\">>></span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x000000FF</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>WORD<span class=\"token punctuation\">)</span>TSS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请在windbg执行: eq 8003f500 0000e500`00480000\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请在windbg中执行!process 0 0，复制进程DirBase的值，并输入.\\nCR3: \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%x\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>dwCr3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Previous Task Link CPU 填充，表示上一个任务的选择子</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ESP0</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// SS0</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ESP1</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// SS1</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ESP2</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// SS2</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> dwCr3<span class=\"token punctuation\">;</span> <span class=\"token comment\">// CR3 学到页就知道是啥了</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>TestFunc<span class=\"token punctuation\">;</span> <span class=\"token comment\">// EIP</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// EFLAGS</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// EAX</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">11</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ECX</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">12</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// EDX</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">13</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// EBX</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">14</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>esp<span class=\"token operator\">+</span><span class=\"token number\">0x1000</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">15</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// EBP</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">16</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ESI</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">17</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// EDI</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">18</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ES</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">19</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000008</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// CS </span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000010</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// SS </span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">21</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// DS</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">22</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// FS </span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">23</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// GS</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">24</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// LDT Segment Selector</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">25</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x20ac0000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// I/O Map Base Address</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t__asm</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> <span class=\"token number\">0x20</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ok: %d\\n\"</span><span class=\"token punctuation\">,</span>dwOk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t<span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre></pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"image002.png\" alt=\"\" /></p>\n<h2 id=\"int-8-逆向分析\"><a class=\"anchor\" href=\"#int-8-逆向分析\">#</a> INT 8 逆向分析</h2>\n<p>看看操作系统是如何使用任务门的，但因为我太菜了，只能……</p>\n<p><strong>寻找 int 8 的代码</strong></p>\n<p>由 <code>INT 8</code>  查询 IDT 表中索引为 8 的段描述符</p>\n<p><img data-src=\"image003.png\" alt=\"\" /></p>\n<p>可以发现是任务们的描述符 <code>00008500`00501198</code></p>\n<p>其中 TSS 的段选择子为 <code>0050</code></p>\n<p>去 GDT 表中查询 TSS 段描述符</p>\n<p><img data-src=\"image004.png\" alt=\"\" /></p>\n<p>TSS 段描述符为 <code>80008955`87000068</code></p>\n<p>TSS 在内存中的地址为 <code>0x80558700</code></p>\n<p><img data-src=\"image005.png\" alt=\"\" /></p>\n<p>可以看到 TSS 的结束位: <code>0x000020ac</code></p>\n<p>EIP 为 <code>0x804e08a5</code></p>\n<p>查看 0x804e08a5 处函数的汇编代码</p>\n<p><img data-src=\"image006.png\" alt=\"\" /></p>\n<p>在火哥的视频中让逆向图中高亮的代码。</p>\n<pre><code class=\"language-汇编\">804e08a6 648b0d3c000000  mov     ecx,dword ptr fs:[3Ch]\n804e08ad 8d4150          lea     eax,[ecx+50h]\n804e08b0 c6400589        mov     byte ptr [eax+5],89h\n804e08b4 9c              pushfd\n804e08b5 812424ffbfffff  and     dword ptr [esp],0FFFFBFFFh\n804e08bc 9d              popfd\n804e08bd 64a13c000000    mov     eax,dword ptr fs:[0000003Ch]\n804e08c3 8a6857          mov     ch,byte ptr [eax+57h]\n804e08c6 8a4854          mov     cl,byte ptr [eax+54h]\n804e08c9 c1e110          shl     ecx,10h\n804e08cc 668b4852        mov     cx,word ptr [eax+52h]\n804e08d0 64a140000000    mov     eax,dword ptr fs:[00000040h]\n804e08d6 64890d40000000  mov     dword ptr fs:[40h],ecx\n</code></pre>\n<p><img data-src=\"image007.png\" alt=\"\" /></p>\n<p>这是火哥在视频中分析好的，我截图了。</p>\n<hr />\n<hr />\n<p>今天搜索 FS 寄存器的资料，发现了这里涉及了 FS 寄存器在 R0 和 R3 下的不同。</p>\n<p>具体参见<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3B5X3Bhbnl1L2FydGljbGUvZGV0YWlscy80NTAxMTUwNQ==\"> https://blog.csdn.net/py_panyu/article/details/45011505</span> 这篇博客，衷心感谢作者。</p>\n<p>当线程运行在 R0 下时，FS 指向的段是 GDT 中的 0x30 段。该段的长度也为 4K, 基地址为 0xFFDFF000. 该地址指向系统的处理器控制区域（KPCR）. 这个区域中保存这处理器相关的一些重要数据值，如 GDT、IDT 表的值等等.</p>\n<pre><code>kd&gt; dt _kpcr\nnt!_KPCR\n   +0x000 NtTib            : _NT_TIB\n   +0x01c SelfPcr          : Ptr32 _KPCR\n   +0x020 Prcb             : Ptr32 _KPRCB\n   +0x024 Irql             : UChar\n   +0x028 IRR              : Uint4B\n   +0x02c IrrActive        : Uint4B\n   +0x030 IDR              : Uint4B\n   +0x034 KdVersionBlock   : Ptr32 Void\n   +0x038 IDT              : Ptr32 _KIDTENTRY\n   +0x03c GDT              : Ptr32 _KGDTENTRY\n   +0x040 TSS              : Ptr32 _KTSS\n   +0x044 MajorVersion     : Uint2B\n   +0x046 MinorVersion     : Uint2B\n   +0x048 SetMember        : Uint4B\n   +0x04c StallScaleFactor : Uint4B\n   +0x050 DebugActive      : UChar\n   +0x051 Number           : UChar\n   +0x052 Spare0           : UChar\n   +0x053 SecondLevelCacheAssociativity : UChar\n   +0x054 VdmAlert         : Uint4B\n   +0x058 KernelReserved   : [14] Uint4B\n   +0x090 SecondLevelCacheSize : Uint4B\n   +0x094 HalReserved      : [16] Uint4B\n   +0x0d4 InterruptMode    : Uint4B\n   +0x0d8 Spare1           : UChar\n   +0x0dc KernelReserved2  : [17] Uint4B\n   +0x120 PrcbData         : _KPRCB\n</code></pre>\n<p>主要是学习操作系统的思路。编写操作系统的人，厉害 (๑・̀ㅂ・́)و✧</p>\n<h2 id=\"任务切换\"><a class=\"anchor\" href=\"#任务切换\">#</a> 任务切换</h2>\n<p>概述一下任务门进行任务切换的流程：</p>\n<ol>\n<li>\n<p>当中断发生时，处理器用中断号乘以 8（段描述符的大小为 8 个字节）作为索引访问中断描述符表。当它发现这是一个任务门描述符时，就知道应当发起任务切换。</p>\n</li>\n<li>\n<p>取出任务门描述符。</p>\n</li>\n<li>\n<p>从任务门描述符中取出新任务的 TSS 选择子；</p>\n</li>\n<li>\n<p>再用 TSS 选择子访问 GDT，取出新任务的 TSS 描述符</p>\n</li>\n<li>\n<p>到这里就和上一节用 TSS 切换任务一样了……TSS…… 切换寄存器……</p>\n</li>\n</ol>\n<p>最终任务寄存器 TR 指向新任务的 TSS，而处理器开始新任务的执行。</p>\n<p>一旦新任务开始执行，处理器固件会自动将其 TSS 描述符的 B 位置 1，表示该任务状态为忙。</p>\n<h1 id=\"reference\"><a class=\"anchor\" href=\"#reference\">#</a> Reference</h1>\n<p>任务门 --- 任务切换:<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3Mzc1NDI3L2FydGljbGUvZGV0YWlscy84NTA0NjU0Mw==\">https://blog.csdn.net/qq_37375427/article/details/85046543</span><br />\n 任务门<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0t3YW5zeS9hcnRpY2xlL2RldGFpbHMvMTA4ODk2OTg5\"> https://blog.csdn.net/Kwansy/article/details/108896989</span><br />\n 浅谈 FS 段寄存器在用户层和内核层的使用<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3B5X3Bhbnl1L2FydGljbGUvZGV0YWlscy80NTAxMTUwNQ==\"> https://blog.csdn.net/py_panyu/article/details/45011505</span></p>\n",
            "tags": [
                "任务门"
            ]
        },
        {
            "id": "https://or0kit.github.io/Bin/Core/WindowsXp/Protect-Mode/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F-%E4%BB%BB%E5%8A%A1%E6%AE%B5/",
            "url": "https://or0kit.github.io/Bin/Core/WindowsXp/Protect-Mode/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F-%E4%BB%BB%E5%8A%A1%E6%AE%B5/",
            "title": "保护模式-任务段",
            "date_published": "2021-08-13T06:40:43.000Z",
            "content_html": "<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<p>当权限发生发生改变时堆栈也会随之发生改变 (如：3 环进 0 环)，由于 CS 的 CPL 发生变化，导致了 SS 也必须切换。<br />\n堆栈段寄存器 SS（Stack Segment），指出当前堆栈的底部地址，即存放堆栈段的段基址。</p>\n<p>当发生权限切换的时候，会有新的 ESP 和 SS（CS 是由中断门或者调用门指定），那么 ESP 和 SS 从何而来呢？</p>\n<p>答案：TSS (Task-state segment)，任务状态段</p>\n<h2 id=\"tsstask-state-segment任务状态段的结构\"><a class=\"anchor\" href=\"#tsstask-state-segment任务状态段的结构\">#</a> TSS (Task-State Segment) 任务状态段的结构</h2>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<p>TSS 是一块内存，大小 104 字节。</p>\n<h2 id=\"tss的作用\"><a class=\"anchor\" href=\"#tss的作用\">#</a> TSS 的作用</h2>\n<p>这关乎于：<ins>Intel 的设计思想</ins>和<ins>操作系统的设计思想</ins></p>\n<p>TSS 里存储了段寄存器，通用寄存器，标志寄存器，EIP，CR3 寄存器，4 个堆栈<br />\n TSS 的设计初衷是任务切换 (线程切换)，当线程切换的时候，同时替换寄存器的值，可是操作系统 (Windows，Linux) 并没有使用 TSS 来切换线程。<br />\n但我们却可以用 TSS 做其他事情。☺</p>\n<p>那我们就要学习 CPU 是如何使用 TSS 的了。</p>\n<h2 id=\"cpu如何找到tss\"><a class=\"anchor\" href=\"#cpu如何找到tss\">#</a> CPU 如何找到 TSS？</h2>\n<p>答案：TR 寄存器</p>\n<p><strong>通过 <code>TR</code>  寄存器的段选择子，查询 <code>GDT</code>  表，找到 <code>TSS</code>  段描述符，然后获取 TR 的 <code>Base</code> , <code>Base</code>  中存储的就是 <code>TSS</code>  的地址， <code>Limit</code>  中存储的是 <code>TSS</code>  的大小</strong></p>\n<p>如图所示:</p>\n<p><img data-src=\"image002.png\" alt=\"\" /></p>\n<h2 id=\"tss段描述符\"><a class=\"anchor\" href=\"#tss段描述符\">#</a> TSS 段描述符</h2>\n<p><img data-src=\"image003.png\" alt=\"\" /></p>\n<ul>\n<li><strong>当 TYPE 位为 9 (1001) 的时候，说明这个段描述符是一个 TSS 段描述符，这个段描述符没有加载到 TR 寄存器中</strong></li>\n<li><strong>当 TYPE 位为 B (1011) 的时候，说明也是 TSS 段描述符，这个段描述符已经加载到了 TR 寄存器中</strong></li>\n</ul>\n<h2 id=\"tr寄存器的读写\"><a class=\"anchor\" href=\"#tr寄存器的读写\">#</a> TR 寄存器的读写</h2>\n<ul>\n<li>将 TSS 段描述符加载到 TR 寄存器</li>\n</ul>\n<p>指令： <code>LTR</code> <br />\n 用 <code>LTR</code>  指令去装载 TR 寄存器，仅仅是改变了 TR 寄存器里面的内容 (96 位)<br />\n 并没有真正改变 TSS，原来的 TSS 还在。</p>\n<p><code>LTR</code>  指令只能在系统层使用</p>\n<p>加载后 TSS 段描述符会 TYPE 位发生改变 1001-&gt;1011，9 变成 B，说明这个段描述符被加载到了 TR 寄存器</p>\n<ul>\n<li>读 TR 寄存器</li>\n</ul>\n<p>指令：STR<br />\n 如果用 STR 去读 TR 寄存器，只能读到 TR 寄存器的 16 位，也就是段选择子，和读普通段寄存器一样，96 位只能读出其中 16 位</p>\n<h2 id=\"修改tr寄存器\"><a class=\"anchor\" href=\"#修改tr寄存器\">#</a> 修改 TR 寄存器</h2>\n<p>在 Ring0 我们可以通过 LTR 指令去修改 TR 寄存器<br />\n在 Ring3 我们可以通过 CALL FAR 或者 JMP FAR 指令来修改</p>\n<p>用 JMP 去访问一个代码段的时候，改变的是 CS 和 EIP ：<br />\nJMP 0x48:0x123456 如果 0x48 是代码段<br />\n执行后：CS-- &gt; 0x48 EIP-- &gt; 0x123456</p>\n<p>用 JMP 去访问一个任务段的时候：<br />\n如果 0x48 是 TSS 段描述符，先修改 TR 寄存器，在用 TR.Base 指向的 TSS 中的值修改当前的寄存器<br />\n JMP 指令会清当前 TR 所使用的的 TSS descriptor 的 Busy 位是当前 TSS descriptor 置为 available 状态</p>\n<p>如果使用 CALL 指令进行调用，将会在新的 TSS 段里的 LINk 域写入原 TSS selector 值。</p>\n<p>使用 CALL 指令进行调用时，Eflags.NT 标志位会被处理器进行置位，指示新的 task 进入 Nested（嵌套）状态。JMP 指令则相反，Eflags.NT 标志位会被进行清位。</p>\n<p>NT=0 IRET 指令 堆栈取返回地址<br />\n NT=1 IRET 指令 返回时会找 TSS 的 LINK 域的值</p>\n<h2 id=\"实践加载自定义tss\"><a class=\"anchor\" href=\"#实践加载自定义tss\">#</a> 实践：加载自定义 TSS</h2>\n<p>知道了原理，我们就可以在这个过程中动些手脚。</p>\n<p>CPU 通过 TR 寄存器来找到 TSS，如果我们使用自己的 TSS 来替换原来的寄存器，就必须要修改 TR 寄存器，TR 寄存器里面的值又是来自 TSS 段描述符。</p>\n<p>首先我们要构建 TSS 段描述符</p>\n<p><strong>G 位为 0，粒度为字节，TSS 以字节为单位</strong><br />\n<strong> <code>Segment Limit</code>  必须得大于等于 <code>67H</code> </strong></p>\n<blockquote>\n<p>BASE+G+AVL+LIMT    +    P+DPL+TYPE    +    BASE     +BASE   +Segment Limit<br />\n00    00              E(1110)+9(1001)       00       0000    0068</p>\n</blockquote>\n<p>暂取 TSS 段描述符为 <code>0000E900`00000068</code>  Base 的值填写的是内存中 tss 结构的地址。</p>\n<p>新的 TSS 段必须要指定要素： <code>EIP</code> 、 <code>ESP</code> 、 <code>CS</code> 、 <code>SS</code>  以及 <code>CR3</code>  的值。</p>\n<p>ESP 的值：定义局部数组作为裸函数的栈，因为我们不知道进入 0 环后哪里的堆栈地址可以使用，所以需要自己指定一个可以使用的地址，传给 TSS [14] 时，应该传数组尾部的指针，因为压栈 ESP 减小，如果传数组首地址，那一压栈就越界了。</p>\n<h3 id=\"使用call去访问一个任务段并能够正确返回\"><a class=\"anchor\" href=\"#使用call去访问一个任务段并能够正确返回\">#</a> 使用 CALL 去访问一个任务段，并能够正确返回</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;Windows.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>DWORD dwOk<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>DWORD dwESP<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>DWORD dwCS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 任务切换后的 EIP</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">__declspec</span><span class=\"token punctuation\">(</span>naked<span class=\"token punctuation\">)</span> <span class=\"token function\">R0Func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t__asm</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\tpushad</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\tpushfd</pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\tpush fs</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> <span class=\"token number\">3</span> <span class=\"token comment\">//int 3 会修改 FS</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\tpop fs</pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\tmov eax<span class=\"token punctuation\">,</span><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\tmov dword ptr ds<span class=\"token operator\">:</span><span class=\"token punctuation\">[</span>dwOk<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>eax</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\tmov eax<span class=\"token punctuation\">,</span>esp</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\tmov dword ptr ds<span class=\"token operator\">:</span><span class=\"token punctuation\">[</span>dwESP<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>eax</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\tmov ax<span class=\"token punctuation\">,</span>cs</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\tmov word ptr ds<span class=\"token operator\">:</span><span class=\"token punctuation\">[</span>dwCS<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>ax</pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\tpopfd</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\tpopad</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\tiretd</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#123;</span>\t</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\tDWORD dwCr3<span class=\"token punctuation\">;</span> <span class=\"token comment\">//windbg 获取</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t<span class=\"token keyword\">char</span> esp<span class=\"token punctuation\">[</span><span class=\"token number\">0x1000</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 任务切换后的栈</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t<span class=\"token comment\">// 此数组的地址就是 TSS 描述符中的 Base</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\tDWORD TSS<span class=\"token punctuation\">[</span><span class=\"token number\">26</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t<span class=\"token comment\">// 也可以直接开辟一块私有内存</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t<span class=\"token comment\">//DWORD *TSS = (DWORD*)VirtualAlloc(NULL,104,MEM_COMMIT,PAGE_READWRITE);</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t<span class=\"token comment\">//if (TSS == NULL)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t<span class=\"token comment\">//&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t<span class=\"token comment\">//\tprintf (\"VirtualAlloc 失败，% d\\n\", GetLastError ());</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t<span class=\"token comment\">//\tgetchar();</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t<span class=\"token comment\">//\treturn -1;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t<span class=\"token comment\">//&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请在windbg执行: eq 8003f048 %02x00e9%02x`%04x0068\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>TSS<span class=\"token operator\">>></span><span class=\"token number\">24</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x000000FF</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>TSS<span class=\"token operator\">>></span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x000000FF</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>WORD<span class=\"token punctuation\">)</span>TSS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请在windbg中执行!process 0 0，复制进程DirBase的值，并输入.\\nCR3: \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%x\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>dwCr3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 注意是 % x</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Previous Task Link CPU 填充，表示上一个任务的选择子</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ESP0</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// SS0</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ESP1</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// SS1</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ESP2</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// SS2</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> dwCr3<span class=\"token punctuation\">;</span> \t <span class=\"token comment\">// CR3 学到页就知道是啥了</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>R0Func<span class=\"token punctuation\">;</span> <span class=\"token comment\">// EIP</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// EFLAGS</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// EAX</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">11</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ECX</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">12</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// EDX</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">13</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// EBX</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">14</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>esp<span class=\"token operator\">+</span><span class=\"token number\">0x1000</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">15</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// EBP</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">16</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ESI</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">17</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// EDI</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">18</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000023</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ES</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">19</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000008</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// CS</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000010</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// SS</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">21</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// DS</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">22</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// FS</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">23</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// GS</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">24</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// LDT Segment Selector</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">25</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x20ac0000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// I/O Map Base Address</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>\t<span class=\"token keyword\">char</span> buff<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x48</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\t</pre></td></tr><tr><td data-num=\"83\"></td><td><pre>\t__asm</pre></td></tr><tr><td data-num=\"84\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>\t\tcall fword ptr<span class=\"token punctuation\">[</span>buff<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ok: %d\\nESP: %x\\nCS: %x\\n\"</span><span class=\"token punctuation\">,</span> dwOk<span class=\"token punctuation\">,</span> dwESP<span class=\"token punctuation\">,</span> dwCS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"image004.png\" alt=\"\" /></p>\n<h3 id=\"使用jmp去访问一个任务段并能够正确返回\"><a class=\"anchor\" href=\"#使用jmp去访问一个任务段并能够正确返回\">#</a> 使用 JMP 去访问一个任务段，并能够正确返回</h3>\n<p>和 CALL FAR 对比，NT 位不会置 1，TSS  <code>previous task link</code>  也不会填充旧的 TR，因此想要返回，可以先保存旧的 TR，然后 JMP FAR 回去。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;Windows.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>DWORD dwOk<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>DWORD dwESP<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>DWORD dwCS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>BYTE PrevTr<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 旧 TR，供裸函数返回</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 任务切换后的 EIP</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">__declspec</span><span class=\"token punctuation\">(</span>naked<span class=\"token punctuation\">)</span> <span class=\"token function\">R3Func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t__asm</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\tpushad</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\tpushfd</pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\tpush fs</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> <span class=\"token number\">3</span> <span class=\"token comment\">//int 3 会修改 FS</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\tpop fs</pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\tmov eax<span class=\"token punctuation\">,</span><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\tmov dword ptr ds<span class=\"token operator\">:</span><span class=\"token punctuation\">[</span>dwOk<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>eax</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\tmov eax<span class=\"token punctuation\">,</span>esp</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\tmov dword ptr ds<span class=\"token operator\">:</span><span class=\"token punctuation\">[</span>dwESP<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>eax</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\tmov ax<span class=\"token punctuation\">,</span>cs</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\tmov word ptr ds<span class=\"token operator\">:</span><span class=\"token punctuation\">[</span>dwCS<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>ax</pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\tpopfd</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\tpopad</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\tjmp fword ptr ds<span class=\"token operator\">:</span><span class=\"token punctuation\">[</span>PrevTr<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token punctuation\">&#123;</span>\t</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\tDWORD dwCr3<span class=\"token punctuation\">;</span> <span class=\"token comment\">//windbg 获取</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t<span class=\"token keyword\">char</span> esp<span class=\"token punctuation\">[</span><span class=\"token number\">0x1000</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 任务切换后的栈，数组名就是 ESP</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t<span class=\"token comment\">// 此数组的地址就是 TSS 描述符中的 Base</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\tDWORD <span class=\"token operator\">*</span>TSS <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>DWORD<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">VirtualAlloc</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span><span class=\"token number\">104</span><span class=\"token punctuation\">,</span>MEM_COMMIT<span class=\"token punctuation\">,</span>PAGE_READWRITE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>TSS <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"VirtualAlloc 失败，%d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">GetLastError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t\t<span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请在windbg执行: eq 8003f048 %02x00e9%02x`%04x0068\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>TSS<span class=\"token operator\">>></span><span class=\"token number\">24</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x000000FF</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>TSS<span class=\"token operator\">>></span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x000000FF</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>WORD<span class=\"token punctuation\">)</span>TSS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请在windbg中执行!process 0 0，复制进程DirBase的值，并输入.\\nCR3: \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t<span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%x\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>dwCr3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 注意是 % x</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Previous Task Link CPU 填充，表示上一个任务的选择子</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ESP0</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// SS0</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ESP1</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// SS1</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ESP2</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// SS2</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> dwCr3<span class=\"token punctuation\">;</span> <span class=\"token comment\">// CR3 学到页就知道是啥了</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>R3Func<span class=\"token punctuation\">;</span> <span class=\"token comment\">// EIP</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// EFLAGS</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// EAX</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">11</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ECX</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">12</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// EDX</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">13</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// EBX</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">14</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>DWORD<span class=\"token punctuation\">)</span>esp<span class=\"token operator\">+</span><span class=\"token number\">0x1000</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"68\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">15</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// EBP</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">16</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ESI</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">17</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// EDI</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">18</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000023</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ES</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">19</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000008</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// CS</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000010</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// SS</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">21</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// DS</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">22</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// FS</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">23</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// GS</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">24</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x00000000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// LDT Segment Selector</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>\tTSS<span class=\"token punctuation\">[</span><span class=\"token number\">25</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x20ac0000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// I/O Map Base Address</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>\t<span class=\"token keyword\">char</span> buff<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x48</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\t</pre></td></tr><tr><td data-num=\"81\"></td><td><pre>\t__asm</pre></td></tr><tr><td data-num=\"82\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>\t\tstr ax</pre></td></tr><tr><td data-num=\"84\"></td><td><pre>\t\tlea edi<span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span>PrevTr<span class=\"token operator\">+</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>\t\tmov <span class=\"token punctuation\">[</span>edi<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>ax</pre></td></tr><tr><td data-num=\"86\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"87\"></td><td><pre>\t\tjmp fword ptr<span class=\"token punctuation\">[</span>buff<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ok: %d\\nESP: %x\\nCS: %x\\n\"</span><span class=\"token punctuation\">,</span> dwOk<span class=\"token punctuation\">,</span> dwESP<span class=\"token punctuation\">,</span> dwCS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>\t<span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"image005.png\" alt=\"\" /></p>\n<p>由这个例子我们可以发现系统的 TSS 描述符为 <code>80008b04`200020ab</code> （TR 的段选择子为 0x28）</p>\n<p><img data-src=\"image006.png\" alt=\"\" /></p>\n<p>系统 TSS 的地址为： <code>80042000</code> ，查看一下。</p>\n<p><img data-src=\"image007.png\" alt=\"\" /></p>\n<h1 id=\"reference\"><a class=\"anchor\" href=\"#reference\">#</a> Reference</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0t3YW5zeS9hcnRpY2xlL2RldGFpbHMvMTA4ODkwNTg2\">https://blog.csdn.net/Kwansy/article/details/108890586</span><br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vcmV2ZXJjYy9wLzE0NDY4MzMwLmh0bWw=\">https://www.cnblogs.com/revercc/p/14468330.html</span></p>\n",
            "tags": [
                "TSS"
            ]
        },
        {
            "id": "https://or0kit.github.io/Bin/Core/WindowsXp/Protect-Mode/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F-%E9%99%B7%E9%98%B1%E9%97%A8/",
            "url": "https://or0kit.github.io/Bin/Core/WindowsXp/Protect-Mode/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F-%E9%99%B7%E9%98%B1%E9%97%A8/",
            "title": "保护模式-陷阱门",
            "date_published": "2021-08-13T06:40:28.000Z",
            "content_html": "<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<p>Windows 使用了中断门，用于系统调用和调试（比如调试断点）</p>\n<p>IF 位，是标志寄存器 EFLEAG，下标为 9 的位置。</p>\n<p>中断门和陷阱门都不可以传递参数，可能它们的作用被 CPU 制造商规定为辅助作用，但是操作系统怎么使用，就看操作系统的设计者怎么想的。</p>\n<p>它们的段描述符区别在于 TYPE 域，且都是系统段描述符</p>\n<p>这些都是 CPU 层面的概念，操作系统只是使用，然后根据硬件返回出来的值（在硬件方面可能就是电压表示的二进制）进行判断对与错，然后操作系统会提示用户正确或错误。</p>\n<p>转自<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxOTg4NDQ4L2FydGljbGUvZGV0YWlscy8xMDI1OTk5NjE=\"> https://blog.csdn.net/qq_41988448/article/details/102599961</span> 的评论</p>\n<h2 id=\"陷阱门与中断门的区别\"><a class=\"anchor\" href=\"#陷阱门与中断门的区别\">#</a> 陷阱门与中断门的区别</h2>\n<p>中断门执行时，会将 IF 标志位清零，但陷阱门不会</p>\n<p>IF=0 时：程序不再接收可屏蔽中断</p>\n<p>可屏蔽中断：比如程序正在运行时，我们通过键盘敲击了锁屏的快捷键，若 IF 位为 1，CPU 就能够接收到我们敲击键盘的指令并锁屏</p>\n<p>可屏蔽中断：<br />\n简述：保存断点入栈，响应经中断控制器 8259 优先级判断后的中断请求，恢复断点。<br />\nI/O 设备发出的所有中断 (IRQ) 都可以产生可屏蔽中断，受标志位 IF 的影响，根据中断循序标志的设置来判断 CPU 是否响应中断请求。</p>\n<blockquote>\n<p>接口发出中断请求<br />\n当前指令执行完后，CPU 响应中断<br />\n中断类型号 N 送 CPU<br />\n 当前的 EFR CS HE EIP 推入栈<br />\n清除 IF (中断允许标志位，IF=0，禁止 CPU 响应外部中断请求，IF=1，允许响应) 和 TF（跟踪标志，也称单步执行，CPU 按跟踪方式执行）<br />\n由中断类型号，查中断向量表获得中断服务子程序的入口地址<br />\n CPU 执行中断子程序<br />\n开中断<br />\n IRET 指令使 EIP CS HE EFR 弹出栈 ，返回被中断的源程序</p>\n</blockquote>\n<p>不可屏蔽中断：不可阻止的中断请求。如： 当突然断电，CPU 不是立马死掉，CPU 内部有一个电容，断电的时候，还会运行一会儿，用于处理后续工作，这个是不可屏蔽中断。</p>\n<h2 id=\"trap-gate-descriptor\"><a class=\"anchor\" href=\"#trap-gate-descriptor\">#</a> Trap-Gate-Descriptor</h2>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<h2 id=\"实践\"><a class=\"anchor\" href=\"#实践\">#</a> 实践</h2>\n<p>知道了理论，开始实践。<br />\n和中断门一样的流程，只是我们构造的描述符有一点不同： <code>0040EF00`00081020</code>   把中断门的 <code>EE</code>  改为了 <code>EF</code></p>\n<p>代码还是以前的代码，结果也是一样的。<br />\n不再复写一份了（懒）。</p>\n<h1 id=\"reference\"><a class=\"anchor\" href=\"#reference\">#</a> Reference</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1NDI1MjQzL2FydGljbGUvZGV0YWlscy84MzY1NzIwMw==\">https://blog.csdn.net/qq_35425243/article/details/83657203</span></p>\n",
            "tags": [
                "IDT",
                "提权",
                "陷阱门描述符"
            ]
        },
        {
            "id": "https://or0kit.github.io/Bin/Core/WindowsXp/Protect-Mode/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F-%E4%B8%AD%E6%96%AD%E9%97%A8/",
            "url": "https://or0kit.github.io/Bin/Core/WindowsXp/Protect-Mode/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F-%E4%B8%AD%E6%96%AD%E9%97%A8/",
            "title": "保护模式-中断门",
            "date_published": "2021-08-13T06:40:15.000Z",
            "content_html": "<h1 id=\"中断门\"><a class=\"anchor\" href=\"#中断门\">#</a> 中断门</h1>\n<h2 id=\"中断门的作用\"><a class=\"anchor\" href=\"#中断门的作用\">#</a> 中断门的作用</h2>\n<p>先前学习的调用门在实际的 Windows 中并没有被使用，只是操作系统提供了调用门描述符给开发人员使用。相比之下，Windows 使用了中断门，用于：</p>\n<blockquote>\n<p>系统调用（老的 CPU 通过中断门进入 RING（内核）0 层；新的 CPU 使用快速调用）<br />\n调试（常见的 INT3 对应硬编码为 0xCC）</p>\n</blockquote>\n<h2 id=\"中断门执行流程\"><a class=\"anchor\" href=\"#中断门执行流程\">#</a> 中断门执行流程</h2>\n<p>【重点】</p>\n<ul>\n<li>根据 INT XXX 的值 查 IDT（中断描述符表），找到对应的段描述符 这个描述符是一个中断门描述符</li>\n<li>在中断门描述符中存储另一个代码段的选择子</li>\n<li>选择子指向的段 段.Base + 偏移地址 就是真正要执行的地址</li>\n</ul>\n<h2 id=\"idt\"><a class=\"anchor\" href=\"#idt\">#</a> IDT</h2>\n<p>IDT 全称 Interrupt Descriptor Table（中断描述符表）, 同 GDT 一样，IDT 也是由一系列描述符组成的，每个<br />\n描述符占 8 个字节。但要注意的是，IDT 表中的第一个元素不是 NULL。</p>\n<p>IDT 中存储的段描述符都是<ins>系统段描述符</ins></p>\n<p>IDT 可以包含三种门描述符：①任务门描述符；②中断门描述符；③陷阱门描述符</p>\n<p>在 windbg 中查看 IDT 表的基址和长度:</p>\n<p>查看地址： <code>r idtr</code></p>\n<p>查看长度： <code>r idtl</code></p>\n<h2 id=\"中断门描述符\"><a class=\"anchor\" href=\"#中断门描述符\">#</a> 中断门描述符</h2>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<p>当一个段描述符是一个调用门描述符时，有以下特征：</p>\n<ul>\n<li>S 位为 0，表示该段描述符为系统段描述符（中断门描述符属于系统段描述符）</li>\n<li>Type 域为 1110，表示该段描述符为 32 位中断门</li>\n<li>低 16 位到 31 位存储一个段选择子，该段选择子才和代码真正要调用的地址相关</li>\n<li>真正要调用的地址 = 段选择子所指向的段.Base + 32 位的段中偏移 （段中偏移分为两部分：高位 31-16 位和低位 15-0 位）</li>\n<li>段.Base 默认为 0，故真正要调用的地址 = 32 位的段中偏移</li>\n</ul>\n<h2 id=\"调用门描述符和中断门描述符各部分的对比\"><a class=\"anchor\" href=\"#调用门描述符和中断门描述符各部分的对比\">#</a> 调用门描述符和中断门描述符各部分的对比</h2>\n<p><img data-src=\"image002.png\" alt=\"\" /></p>\n<p>可以发现中断门描述符和调用门描述符的结构基本一致，只在 Type 域和参数计数处不同（Type 域是描述符的类型标识；中断门不允许传参）</p>\n<h2 id=\"中断门堆栈变化\"><a class=\"anchor\" href=\"#中断门堆栈变化\">#</a> 中断门堆栈变化</h2>\n<p>使用调用门的方法是 CALL FAR，而使用中断门的方法是  <code>INT N</code> ，其中，N 表示中断门描述符在 IDT 表中的下标。</p>\n<p>和调用门一样，中断门也可以用来提权。不提权时， <code>INT N</code>  会压栈 CS，EFLAG EIP；<br />\n提权时，会依次压栈 SS ESP EFLAG CS EIP。<br />\n需要用堆栈保存 EFLAG 是因为中断门会将 EFLAG 的 IF 位置 0。</p>\n<p><img data-src=\"image006.png\" alt=\"\" /></p>\n<h2 id=\"实践\"><a class=\"anchor\" href=\"#实践\">#</a> 实践</h2>\n<p>知道了理论，开始实践。</p>\n<ol>\n<li>构造 Interrupt Gate Descriptor</li>\n</ol>\n<p><code>0000 0000 0000 0000 1110 1110 0000 0000`0000 0000 0000 1000 0000 0000 0000 0000</code></p>\n<p>段内偏移还不确定，暂时置为 0。<br />\n十六进制为 <code>0000ee00`00080000</code></p>\n<ol start=\"2\">\n<li>测试代码</li>\n</ol>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;windows.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>DWORD dwH2GValue<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">__declspec</span><span class=\"token punctuation\">(</span>naked<span class=\"token punctuation\">)</span> <span class=\"token keyword\">void</span> <span class=\"token function\">GetH2GValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t__asm</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\tpushad</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\tpushfd</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 读高 2G 内存</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\tmov eax<span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">0x8003f00c</span><span class=\"token punctuation\">]</span>  </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\tmov ebx<span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span>eax<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\tmov dwH2GValue<span class=\"token punctuation\">,</span>ebx</pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\tpopfd</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\tpopad</pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\tiretd</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t__asm</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\tINT <span class=\"token number\">0x20</span>      <span class=\"token comment\">// 暂时有疑问，选这个索引是因为有的博客说这个地址没有用上。可是我在 windbg 中看到这个地址也是有值的。</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"dwH2GValue:%#X\"</span><span class=\"token punctuation\">,</span>dwH2GValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>VC 中反汇编查看</p>\n<p><img data-src=\"image003.png\" alt=\"\" /></p>\n<p>我们要跳转的地址为 <code>0x00401020</code></p>\n<p>确定 Interrupt Gate Descriptor 为： <code>0040ee00`00081020</code></p>\n<ol start=\"3\">\n<li>在 windbg 中赋值</li>\n</ol>\n<p>直接在 IDT 表中修改索引为 0x20 的中断门描述符</p>\n<p><code>eq 8003f500 0040ee00`00081020</code></p>\n<ol start=\"4\">\n<li>在调试机中运行代码</li>\n</ol>\n<p>结果：</p>\n<p><img data-src=\"image004.png\" alt=\"\" /></p>\n<p>在 windbg 中确认打印数值无误。</p>\n<p><img data-src=\"image005.png\" alt=\"\" /></p>\n<h1 id=\"reference\"><a class=\"anchor\" href=\"#reference\">#</a> Reference</h1>\n<p>滴水课件<br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuNTJwb2ppZS5jbi90aHJlYWQtMTQ1NTY4NC0xLTEuaHRtbA==\"> https://www.52pojie.cn/thread-1455684-1-1.html</span></p>\n",
            "tags": [
                "中断门描述符",
                "IDT",
                "提权"
            ]
        },
        {
            "id": "https://or0kit.github.io/Bin/Core/WindowsXp/Protect-Mode/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F-%E8%B0%83%E7%94%A8%E9%97%A8%E6%8F%90%E6%9D%83/",
            "url": "https://or0kit.github.io/Bin/Core/WindowsXp/Protect-Mode/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F-%E8%B0%83%E7%94%A8%E9%97%A8%E6%8F%90%E6%9D%83/",
            "title": "保护模式-调用门提权",
            "date_published": "2021-08-09T04:02:20.000Z",
            "content_html": "<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<p>在学习长调用时没有用实例具体分析，因为牵扯到了调用门的知识。</p>\n<h1 id=\"调用门\"><a class=\"anchor\" href=\"#调用门\">#</a> 调用门</h1>\n<h2 id=\"调用门的作用\"><a class=\"anchor\" href=\"#调用门的作用\">#</a> 调用门的作用</h2>\n<p>调用门可以用来提权，通过提权可以实现访问高地址空间等 RING0（内核）层才能进行的操作</p>\n<hr />\n<h2 id=\"调用门和长调用关系\"><a class=\"anchor\" href=\"#调用门和长调用关系\">#</a> 调用门和长调用关系</h2>\n<p>回顾先前的笔记可知：</p>\n<p>长调用 CALL FAR CS:EIP 指令要<strong>调用的地址</strong>是由 CS 段选择子查 GDT 得到的<strong>调用门</strong> 段描述符得来的，后面的 EIP 不发挥作用</p>\n<h2 id=\"调用门执行流程\"><a class=\"anchor\" href=\"#调用门执行流程\">#</a> 调用门执行流程</h2>\n<ol>\n<li>根据 CS 的值 查 GDT，找到对应的段描述符 这个描述符是一个调用门</li>\n<li>在调用门描述符中存储另一个代码段的选择子</li>\n<li>选择子指向的段 段.Base + 偏移地址 就是真正要执行的地址</li>\n</ol>\n<h2 id=\"调用门描述符\"><a class=\"anchor\" href=\"#调用门描述符\">#</a> 调用门描述符</h2>\n<h3 id=\"对比段描述符\"><a class=\"anchor\" href=\"#对比段描述符\">#</a> 对比段描述符</h3>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<p>调用门描述符结构</p>\n<p><img data-src=\"image002.png\" alt=\"\" /></p>\n<hr />\n<p>当一个段描述符是一个调用门描述符时，有以下特征：</p>\n<ul>\n<li>S 位为 0，表示该段描述符为系统段描述符（调用门描述符属于系统段描述符）</li>\n<li>Type 域为 1100，表示该段描述符为 32 位调用门</li>\n<li>低 16 位到 31 位由原本的基地址变为存储一个段选择子，该段选择子才和代码<strong>真正要调用的地址</strong>相关</li>\n<li>真正要调用的地址 = 段选择子所指向的段.Base + 32 位的段中偏移 （段中偏移分为两部分：高位 31-16 位和低位 15-0 位）</li>\n<li>段.Base 默认为 0，故真正要调用的地址 = 32 位的段中偏移</li>\n</ul>\n<hr />\n<p>给出段描述符和调用门描述符各部分的对比：</p>\n<hr />\n<h2 id=\"段描述符\"><a class=\"anchor\" href=\"#段描述符\">#</a> 段描述符</h2>\n<table>\n<thead>\n<tr>\n<th>数据位</th>\n<th>31-24</th>\n<th>23</th>\n<th>22</th>\n<th>21</th>\n<th>20</th>\n<th>19-16</th>\n<th>15</th>\n<th>14-13</th>\n<th>12</th>\n<th>11-8</th>\n<th>7-0</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>含义</td>\n<td>Base</td>\n<td>G</td>\n<td>D/B</td>\n<td>0</td>\n<td>AVL</td>\n<td>Seg.Limit</td>\n<td>P</td>\n<td>DPL</td>\n<td>S</td>\n<td>Type</td>\n<td>Base</td>\n<td></td>\n</tr>\n<tr>\n<td>解释</td>\n<td>基地址</td>\n<td>粒度</td>\n<td>默认操作大小</td>\n<td>固定为 0</td>\n<td>用于系统软件使用</td>\n<td>段大小限制</td>\n<td>有效位</td>\n<td>特权等级</td>\n<td>描述符类型</td>\n<td>段类型</td>\n<td>基地址</td>\n<td></td>\n</tr>\n</tbody>\n<tbody>\n<tr>\n<td>数据位</td>\n<td>31-16</td>\n<td>15</td>\n<td>14-13</td>\n<td>12</td>\n<td>11-8</td>\n<td>7-5</td>\n<td>4-0</td>\n</tr>\n<tr>\n<td>------</td>\n<td>--------</td>\n<td>------</td>\n<td>--------</td>\n<td>-----</td>\n<td>--------</td>\n<td>-------</td>\n<td>-----------</td>\n</tr>\n<tr>\n<td>含义</td>\n<td>offset</td>\n<td>P</td>\n<td>DPL</td>\n<td>S</td>\n<td>Type</td>\n<td>无</td>\n<td>param.count</td>\n</tr>\n<tr>\n<td>解释</td>\n<td>段中偏移</td>\n<td>有效位</td>\n<td>特权等级</td>\n<td>值为 0</td>\n<td>值为 1100</td>\n<td>值为 000</td>\n<td>参数计数</td>\n</tr>\n</tbody>\n</table>\n<hr />\n<h2 id=\"调用门描述符-2\"><a class=\"anchor\" href=\"#调用门描述符-2\">#</a> 调用门描述符</h2>\n<table>\n<thead>\n<tr>\n<th>数据位</th>\n<th>31-16</th>\n<th>15-0</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>含义</td>\n<td>Base Adress</td>\n<td>Segment Limit</td>\n</tr>\n<tr>\n<td>解释</td>\n<td>基地址</td>\n<td>段大小限制</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>数据位</td>\n<td>31-16</td>\n<td>15-0</td>\n</tr>\n<tr>\n<td>含义</td>\n<td>selector</td>\n<td>offset</td>\n</tr>\n<tr>\n<td>解释</td>\n<td>段选择子</td>\n<td>段中偏移</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"构造无参调用门描述符\"><a class=\"anchor\" href=\"#构造无参调用门描述符\">#</a> 构造无参调用门描述符</h2>\n<p>了解了调用门描述符的结构后，尝试自己构造一个无参的调用门描述符，如下：</p>\n<table>\n<thead>\n<tr>\n<th>数据位</th>\n<th>31-16</th>\n<th>15</th>\n<th>14-13</th>\n<th>12</th>\n<th>11-8</th>\n<th>7-5</th>\n<th>4-0</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>含义</td>\n<td>offset</td>\n<td>P</td>\n<td>DPL</td>\n<td>S</td>\n<td>Type</td>\n<td>无</td>\n<td>param</td>\n</tr>\n<tr>\n<td>解释</td>\n<td>段中偏移</td>\n<td>有效位</td>\n<td>特权等级</td>\n<td>值为 0</td>\n<td>值为 1100</td>\n<td>值为 000</td>\n<td>参数</td>\n</tr>\n<tr>\n<td>值（二进制）</td>\n<td>0</td>\n<td>1</td>\n<td>11</td>\n<td>0</td>\n<td>1100</td>\n<td>000</td>\n<td>0000</td>\n</tr>\n</tbody>\n<tbody>\n<tr>\n<td>数据位</td>\n<td>31-16</td>\n<td>15-0</td>\n</tr>\n<tr>\n<td>:-------------</td>\n<td>--------</td>\n<td>--------</td>\n</tr>\n<tr>\n<td>含义</td>\n<td>selector</td>\n<td>offset</td>\n</tr>\n<tr>\n<td>解释</td>\n<td>段选择子</td>\n<td>段中偏移</td>\n</tr>\n<tr>\n<td>值（十六进制）</td>\n<td>0x0008</td>\n<td>0</td>\n</tr>\n</tbody>\n</table>\n<p>得到调用门描述符为：0000EC00`00080000</p>\n<p>段中偏移暂时不明确要调用的代码段，先置 0</p>\n<h3 id=\"示例代码\"><a class=\"anchor\" href=\"#示例代码\">#</a> 示例代码</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">__declspec</span><span class=\"token punctuation\">(</span>naked<span class=\"token punctuation\">)</span> <span class=\"token keyword\">void</span> <span class=\"token function\">callGate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>         _asm<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                 <span class=\"token keyword\">int</span> <span class=\"token number\">3</span>                                <span class=\"token comment\">// 软中断</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                 retf                                <span class=\"token comment\">// 注意这里长调用对应长返回</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>         <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">char</span> buff<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">//*(DWORD*)&amp;buff [0]= 0x12345678;        // 低地址 32 位为 0x12345678，EIP 已废弃，故随便填即可</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">//*(DWORD*)&amp;buff [4]=0x48;                        // 高地址 16 位为 0x48，段选择子</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">// 也可以换作这种写法</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        _asm<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                mov dword ptr ds<span class=\"token operator\">:</span><span class=\"token punctuation\">[</span>buff<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x12345678</span>        <span class=\"token comment\">// 低 32 位赋值废弃 EIP</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                lea eax<span class=\"token punctuation\">,</span>dword ptr ds<span class=\"token operator\">:</span><span class=\"token punctuation\">[</span>buff<span class=\"token punctuation\">]</span>                        <span class=\"token comment\">// 将 buff 地址给 EAX</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                add eax<span class=\"token punctuation\">,</span><span class=\"token number\">4</span>                                                        <span class=\"token comment\">// 地址 + 4，即得到高地址</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                mov word ptr ds<span class=\"token operator\">:</span><span class=\"token punctuation\">[</span>eax<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x48</span>                        <span class=\"token comment\">// 高 16 位赋值段选择子 selector</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token comment\">// 使用 调用门</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        _asm<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                call fword ptr ds<span class=\"token operator\">:</span><span class=\"token punctuation\">[</span>buff<span class=\"token punctuation\">]</span>                        <span class=\"token comment\">//fword 数据宽度为 6 字节</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"代码说明\"><a class=\"anchor\" href=\"#代码说明\">#</a> 代码说明</h3>\n<p>代码十分简单，主要分为两部分：</p>\n<ul>\n<li>callGate：调用门真正要调用的函数，先软中断，然后长返回</li>\n<li>main：先构造一个 CS:EIP，这里为 0x48:0x12345678，然后使用调用门</li>\n</ul>\n<p>当我们发动调用门技能时，程序会跳转到我们构造的调用门描述符中预先设置的地址，并且我们的权限会提升到我们设置的权限！！可以做一些操作系统才能做的事情。</p>\n<h3 id=\"实验过程\"><a class=\"anchor\" href=\"#实验过程\">#</a> 实验过程</h3>\n<p>目前一些重要操作只能手动……</p>\n<ol>\n<li>确定要跳转的函数的地址</li>\n</ol>\n<p><img data-src=\"image003.png\" alt=\"\" /></p>\n<ol start=\"2\">\n<li>构造 Call-Gate 描述符</li>\n</ol>\n<p>要跳转的地址为： <code>0x00401020</code></p>\n<p>Call-Gate Descriptor: <code>0040ec00`00081020</code></p>\n<ol start=\"3\">\n<li>修改 GDT 表</li>\n</ol>\n<p><img data-src=\"image004.png\" alt=\"\" /></p>\n<p>修改 <code>0x8003f048</code>  这个地址，因为这是一个没有被用到的段描述符。</p>\n<p><code>eq 8003f048 0040ec00`00081020</code></p>\n<ol start=\"4\">\n<li>在调试机中执行上面的代码</li>\n</ol>\n<p>如果没有意外的话，调试机会被中断。</p>\n<h2 id=\"构造有参的调用门\"><a class=\"anchor\" href=\"#构造有参的调用门\">#</a> 构造有参的调用门</h2>\n<p>在构造调用门描述符时要说明参数个数，关于这个参数个数，需要注意的是，它的值共 5 位（5 个比特位）。</p>\n<h3 id=\"代码\"><a class=\"anchor\" href=\"#代码\">#</a> 代码</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;windows.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>DWORD x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>DWORD y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>DWORD z<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> <span class=\"token function\">__declspec</span><span class=\"token punctuation\">(</span>naked<span class=\"token punctuation\">)</span> <span class=\"token keyword\">void</span> <span class=\"token function\">callGate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        _asm<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                pushad                        <span class=\"token comment\">// 将所有 32 位通用寄存器压入堆栈</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                pushfd                        <span class=\"token comment\">// 将 32 位标志寄存器 EFLFAGS 压入堆栈</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                mov eax<span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span>esp<span class=\"token operator\">+</span><span class=\"token number\">0x24</span><span class=\"token operator\">+</span><span class=\"token number\">0x8</span><span class=\"token operator\">+</span><span class=\"token number\">0x8</span><span class=\"token punctuation\">]</span>    <span class=\"token comment\">// 从堆栈中取出第一个参数</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                mov dword ptr ds<span class=\"token operator\">:</span><span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>eax      <span class=\"token comment\">// 将取出的参数赋值给全局变量 x</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                mov eax<span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span>esp<span class=\"token operator\">+</span><span class=\"token number\">0x24</span><span class=\"token operator\">+</span><span class=\"token number\">0x8</span><span class=\"token operator\">+</span><span class=\"token number\">0x4</span><span class=\"token punctuation\">]</span>    <span class=\"token comment\">// 从堆栈中取出第二个参数</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                mov dword ptr ds<span class=\"token operator\">:</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>eax      <span class=\"token comment\">// 将取出的参数赋值给全局变量 y</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                mov eax<span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span>esp<span class=\"token operator\">+</span><span class=\"token number\">0x24</span><span class=\"token operator\">+</span><span class=\"token number\">8</span><span class=\"token operator\">+</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>        <span class=\"token comment\">// 从堆栈中取出第三个参数</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                mov dword ptr ds<span class=\"token operator\">:</span><span class=\"token punctuation\">[</span>z<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>eax      <span class=\"token comment\">// 将取出的参数赋值给全局变量 z</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                popfd                         <span class=\"token comment\">// 将所有 32 位通用寄存器出栈</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                popad                         <span class=\"token comment\">// 将所有 32 位标志寄存器 EFLFAGS 出栈</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                retf <span class=\"token number\">0xC</span>                      <span class=\"token comment\">// 注意这里长调用对应长返回，堆栈平衡 0xC=12=3*4 = 参数个数 * 参数的数据宽度（单位字节）</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">char</span> buff<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>DWORD<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>buff <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span> <span class=\"token number\">0x12345678</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// 低地址 32 位为 0x12345678，EIP 已废弃，故随便填即可</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>DWORD<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>buff <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">0x48</span><span class=\"token punctuation\">;</span>                        <span class=\"token comment\">// 高地址 16 位为 0x48，段选择子</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token comment\">// 也可以换作这种写法</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token comment\">//_asm&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token comment\">//        mov dword ptr ds:[buff],0x12345678        // 低 32 位赋值废弃 EIP</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token comment\">//        lea eax,dword ptr ds:[buff]                        // 将 buff 地址给 EAX</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token comment\">//        add eax,4                                                        // 地址 + 4，即得到高地址</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token comment\">//        mov word ptr ds:[eax],0x48                        // 高 16 位赋值段选择子 selector</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token comment\">//&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token comment\">// 使用 调用门</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        _asm<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                push <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                push <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                push <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                call fword ptr<span class=\"token punctuation\">[</span>buff<span class=\"token punctuation\">]</span>                        <span class=\"token comment\">//fword 数据宽度为 6 字节</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%X\\t%X\\t%X\\n\"</span><span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">,</span>z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"代码说明-2\"><a class=\"anchor\" href=\"#代码说明-2\">#</a> 代码说明</h3>\n<p>与构造无参调用门描述符相比，主要变化为：</p>\n<p>在使用调用门前压入了三个参数：1、2、3<br />\n 调用代码作用为：①保护现场（压入所有通用寄存器和标志寄存器）；②从堆栈中取出对应的参数；③将取出的参数赋值给对应的全局变量<br />\n调用代码最后要平衡堆栈，ret 0xC         0xC=12=3*4 = 参数个数 * 参数的数据宽度（单位字节）<br />\n在调用结束后，输出调用后被赋值的全局变量，验证参数是否成功传递</p>\n<h3 id=\"实验过程-2\"><a class=\"anchor\" href=\"#实验过程-2\">#</a> 实验过程</h3>\n<p>与无参基本一样。描述符中记加参数个数。<br />\n注意观察堆栈变化。</p>\n<h2 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h2>\n<p>当通过门，权限不变的时候，只会 PUSH 两个值：①CS（新的 CS 的值由调用门决定） ；②返回地址<br />\n当通过门，权限改变的时候，会 PUSH 四个值：①SS；② ESP；③ CS ；④ 返回地址   （新的 CS 的值由调用门决定  新的 SS 和 ESP 由 TSS 提供）<br />\n通过门调用时，要执行代码的地址由调用门中的选择子决定；使用 RETF 返回时，由堆栈中压入的返回地址决定</p>\n<h1 id=\"reference\"><a class=\"anchor\" href=\"#reference\">#</a> Reference</h1>\n<p>详细参见：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuNTJwb2ppZS5jbi90aHJlYWQtMTQ1NDM1My0xLTEuaHRtbA==\">https://www.52pojie.cn/thread-1454353-1-1.html</span></p>\n",
            "tags": [
                "提权",
                "调用门",
                "调用门描述符"
            ]
        },
        {
            "id": "https://or0kit.github.io/Bin/Core/WindowsXp/Protect-Mode/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F-%E9%95%BF%E8%B0%83%E7%94%A8%E4%B8%8E%E7%9F%AD%E8%B0%83%E7%94%A8/",
            "url": "https://or0kit.github.io/Bin/Core/WindowsXp/Protect-Mode/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F-%E9%95%BF%E8%B0%83%E7%94%A8%E4%B8%8E%E7%9F%AD%E8%B0%83%E7%94%A8/",
            "title": "保护模式-长调用与短调用",
            "date_published": "2021-08-08T12:51:45.000Z",
            "content_html": "<h1 id=\"短调用\"><a class=\"anchor\" href=\"#短调用\">#</a> 短调用</h1>\n<h2 id=\"短调用指令格式\"><a class=\"anchor\" href=\"#短调用指令格式\">#</a> 短调用指令格式</h2>\n<p>CALL 立即数 / 寄存器 / 内存</p>\n<table>\n<thead>\n<tr>\n<th>指令类型</th>\n<th>指令例子</th>\n<th>对应硬编码</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>CALL 立即数</td>\n<td>call 52610610</td>\n<td>E8 F4560A52</td>\n</tr>\n<tr>\n<td>CALL 寄存器</td>\n<td>call eax</td>\n<td>FFD0</td>\n</tr>\n<tr>\n<td>CALL 内存</td>\n<td>call dword ptr ds:[0x52610610]</td>\n<td>FF15 10066152</td>\n</tr>\n</tbody>\n</table>\n<p><img data-src=\"image003.png\" alt=\"\" /></p>\n<p>关于 CALL 指令详细内容参见<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuNTJwb2ppZS5jbi90aHJlYWQtMTM3OTk1Mi0xLTEuaHRtbA==\"> https://www.52pojie.cn/thread-1379952-1-1.html</span></p>\n<p>在 OllyDbg 中随便打开一个 EXE，执行 CALL 指令。<br />\n观察堆栈的变化。</p>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<p>单步执行后</p>\n<p><img data-src=\"image002.png\" alt=\"\" /></p>\n<p>对比前后的堆栈情况变化，可以发现：</p>\n<p>短调用影响了 ESP 和 EIP 两个寄存器，并且会将返回地址压入到堆栈中</p>\n<p>短调用通过 RET 指令返回</p>\n<h1 id=\"长调用\"><a class=\"anchor\" href=\"#长调用\">#</a> 长调用</h1>\n<h2 id=\"长调用指令格式\"><a class=\"anchor\" href=\"#长调用指令格式\">#</a> 长调用指令格式</h2>\n<p><code>CALL FAR CS:EIP</code>  (EIP 是废弃的)</p>\n<p>如： <code>CALL FAR 002B:00610610</code></p>\n<p>CALL 指令要调用的地址是由 CS 段选择子查 GDT 表得到的调用门 段描述符得来的，后面的 EIP 不发挥作用。</p>\n<p>长调用可以分为两种：跨段不提权和跨段提权。</p>\n<p>长调用通过 RETF 指令返回。</p>\n<h2 id=\"跨段不提权\"><a class=\"anchor\" href=\"#跨段不提权\">#</a> 跨段不提权</h2>\n<p>所谓的跨段不提权就是指要跳转段和当前段的特权级别相同。</p>\n<p>和短调用不同，长调用会先将 CS 压入堆栈，然后再将返回地址压入堆栈。</p>\n<p>跨段不提权的长调用影响了 ESP EIP CS 三个寄存器，并且会将 CS 和返回地址压入到堆栈中。</p>\n<p>堆栈变化图：</p>\n<p><img data-src=\"image004.png\" alt=\"\" /></p>\n<h2 id=\"跨段提权\"><a class=\"anchor\" href=\"#跨段提权\">#</a> 跨段提权</h2>\n<p>与跨段不提权相对，所谓的跨段提权就是指要跳转段和当前段的特权级别不同。</p>\n<p>跨段提权的长调用 涉及到了权限的变化，一旦涉及到了权限的变化，堆栈也将随之切换，因此相比跨段不提权，还会影响 SS 寄存器。</p>\n<p>跨段提权的长调用影响了 ESP EIP CS SS 四个寄存器，并且会将 SS、ESP、CS 和返回地址压入到堆栈中。</p>\n<p>为什么要压入 SS 和 ESP？</p>\n<p>因为当跨段提权时，堆栈会发生切换，压入 SS 和 ESP 是为了在调用结束后将堆栈恢复成原来的（切换前）的堆栈。</p>\n<p>堆栈切换的来源是什么？</p>\n<p>堆栈切换的来源是 TSS 段，这个留作之后再深入。</p>\n<p>由 RING3 切换到 RING0 的跨段提权堆栈变化图</p>\n<p><img data-src=\"image005.png\" alt=\"\" /></p>\n<h1 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h1>\n<p>跨段调用时，一旦有权限切换，就会切换堆栈</p>\n<p>CS 的权限一旦改变，SS 的权限也要随着改变，CS 与 SS 的特权级别必须一致（INTEL 定义的规则）</p>\n<p>JMP FAR 只能跳转到同级代码段，但 CALL FAR 可以通过调用门进行提权（提升 CPL 的权限）</p>\n<h1 id=\"reference\"><a class=\"anchor\" href=\"#reference\">#</a> Reference</h1>\n<p>滴水中级课件<br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuNTJwb2ppZS5jbi90aHJlYWQtMTQyMzg5NC0xLTEuaHRtbA==\"> https://www.52pojie.cn/thread-1423894-1-1.html</span></p>\n",
            "tags": [
                "CALL与CALL FAR"
            ]
        },
        {
            "id": "https://or0kit.github.io/Bin/Core/WindowsXp/Protect-Mode/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F-%E4%BB%A3%E7%A0%81%E8%B7%A8%E6%AE%B5%E8%B7%B3%E8%BD%AC/",
            "url": "https://or0kit.github.io/Bin/Core/WindowsXp/Protect-Mode/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F-%E4%BB%A3%E7%A0%81%E8%B7%A8%E6%AE%B5%E8%B7%B3%E8%BD%AC/",
            "title": "保护模式-代码跨段跳转",
            "date_published": "2021-08-08T05:48:15.000Z",
            "content_html": "<h1 id=\"代码跨段跳转\"><a class=\"anchor\" href=\"#代码跨段跳转\">#</a> 代码跨段跳转</h1>\n<h2 id=\"要点回顾\"><a class=\"anchor\" href=\"#要点回顾\">#</a> 要点回顾</h2>\n<p>段寄存器:<br />\n <code>ES,CS,SS,DS,FS,GS,LDTR,TR</code> <br />\n 除 CS 外，其他的段寄存器都可以通过  <code>MOV,LES,LSS,LDS,LFS,LGS</code>  指令进行修改</p>\n<p>思考：CS 为什么不可以直接修改呢？</p>\n<p><strong>CS 的改变意味着 EIP 的改变，改变 CS 的同时必须修改 EIP, 所以我们无法使用上面的指令来进行修改</strong></p>\n<h2 id=\"代码段跳转流程\"><a class=\"anchor\" href=\"#代码段跳转流程\">#</a> 代码段跳转流程</h2>\n<p>段间跳转分为两种情况：</p>\n<p>要跳转的段是一致代码段<br />\n要跳转的段是非一致代码段</p>\n<p><strong>同时修改 CS 和 EIP 的指令:</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">指令</th>\n<th style=\"text-align:left\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">JMP FAR</td>\n<td style=\"text-align:left\">远跳转</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">CALL FAR</td>\n<td style=\"text-align:left\">远调用</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">RETF(return far)</td>\n<td style=\"text-align:left\">远返回</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">INT(interrupt)</td>\n<td style=\"text-align:left\">中断</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">IRET(interrupt return)</td>\n<td style=\"text-align:left\">执行到中断程序或过程的远返回</td>\n</tr>\n</tbody>\n</table>\n<p><strong>只改变 EIP 的指令：</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">指令</th>\n<th style=\"text-align:left\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">JMP</td>\n<td style=\"text-align:left\">跳转</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">CALL</td>\n<td style=\"text-align:left\">调用</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">JCC(jump condition code)</td>\n<td style=\"text-align:left\">跳转指令状态码 / 条件跳转</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">RET</td>\n<td style=\"text-align:left\">返回</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"执行流程\"><a class=\"anchor\" href=\"#执行流程\">#</a> 执行流程</h3>\n<p>JMP FAR 指令<br />\n指令格式<br />\n <code>JMP Selector:Offset</code></p>\n<p>如： <code>JMP 0x20:0x00452610</code></p>\n<p>Selector 为段选择子<br />\n Offset 为要跳转的偏移</p>\n<p>思考：CPU 如何执行  <code>JMP 0x20:0x004183D</code>  这行指令</p>\n<ul>\n<li><strong>1）段选择子拆分</strong></li>\n</ul>\n<blockquote>\n<p>0x20 二进制：0000 0000 0010 0000 即<br />\n RPL = 00<br />\nTI = 0<br />\nIndex = 4</p>\n</blockquote>\n<ul>\n<li><strong>2）查表得到段描述符</strong></li>\n</ul>\n<p>TI=0：查 GDT 表<br />\n Index=4：找到对应的段描述符</p>\n<p>四种情况可以跳转：</p>\n<blockquote>\n<p>代码段<br />\n调用门<br />\n TSS 任务段<br />\n任务门</p>\n</blockquote>\n<ul>\n<li><strong>3）权限检查</strong></li>\n</ul>\n<p>一致代码段：要求  <code>CPL &gt;= DPL</code> <br />\n 非一致代码段：要求  <code>CPL == DPL</code>  并且  <code>RPL &lt;= DPL</code></p>\n<ul>\n<li><strong>4）加载段描述符</strong></li>\n</ul>\n<p>通过上面的权限检查后，CPU 会将段描述符加载到 CS 段寄存器中</p>\n<ul>\n<li><strong>5）代码执行</strong></li>\n</ul>\n<p>CPU 将  <code>CS.Base + Offset</code>  的值写入 EIP，然后执行 CS:EIP 处的代码</p>\n<p>段间跳转到此结束</p>\n<ul>\n<li><strong>6）总结</strong></li>\n</ul>\n<p>一致代码段（共享的段）<br />\n特权级高的程序不允许访问特权级低的数据：核心态不允许访问用户态的数据<br />\n特权级低的程序可以访问到特权级高的数据，但特权级不会改变：用户态还是用户态</p>\n<p>非一致代码段（普通代码段）<br />\n只允许同级访问<br />\n绝对禁止不同级别的访问：核心态不是用户态，用户态也不是核心态</p>\n<p><strong>注意：直接对代码段进行 JMP 或者 CALL 的操作，无论目标是一致代码段还是非一致代码段，CPL 都不会发生改变。如果要提升 CPL 的权限，只能通过调用门</strong></p>\n<h2 id=\"代码跳转实验\"><a class=\"anchor\" href=\"#代码跳转实验\">#</a> 代码跳转实验</h2>\n<p>验证 JMP FAR 指令执行的结果。自己构造一个段描述符，并使用对应的段选择子进行测试。</p>\n<h3 id=\"计算段选择子\"><a class=\"anchor\" href=\"#计算段选择子\">#</a> 计算段选择子</h3>\n<p>使用 Windbg 找到一处未被使用的段描述符：</p>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<p>确定了要被构造的段描述符的地址为： <code>0x8003f048</code></p>\n<p>根据 <strong>段描述符地址 = GDT 表首地址 + 索引 × 段描述符长度 = GDT 表首地址 + 索引 × 8</strong> 可以逆推出</p>\n<p><code>索引 =（ 段描述符地址 - GDT表首地址）÷ 8</code></p>\n<p>即 索引 = (0x8003f048-0x8003f000) ÷ 8 = 0x48 ÷ 8 = 72 ÷ 8 = 9</p>\n<p>既我们的段选择子的索引（Index）为 9，查询（Ti=0）GDT 表，请求特权（RPL=0b11）等级为 3。</p>\n<p>得到： <code>0000 0000 0100 1011</code>  既  <code>0x4B</code></p>\n<h3 id=\"构造段描述符\"><a class=\"anchor\" href=\"#构造段描述符\">#</a> 构造段描述符</h3>\n<table>\n<thead>\n<tr>\n<th>数据位</th>\n<th>31-24</th>\n<th>23</th>\n<th>22</th>\n<th>21</th>\n<th>20</th>\n<th>19-16</th>\n<th>15</th>\n<th>14-13</th>\n<th>12</th>\n<th>11-8</th>\n<th>7-0</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>含义</td>\n<td>Base</td>\n<td>G</td>\n<td>D/B</td>\n<td>0</td>\n<td>AVL</td>\n<td>Seg.Limit</td>\n<td>P</td>\n<td>DPL</td>\n<td>S</td>\n<td>Type</td>\n<td>Base</td>\n</tr>\n<tr>\n<td>解释</td>\n<td>基地址</td>\n<td>粒度</td>\n<td>默认操作大小</td>\n<td>固定为 0</td>\n<td>用于系统软件使用</td>\n<td>段大小限制</td>\n<td>有效位</td>\n<td>特权等级</td>\n<td>描述符类型</td>\n<td>段类型</td>\n<td>基地址</td>\n</tr>\n<tr>\n<td>数值</td>\n<td>00000000</td>\n<td>1</td>\n<td>1</td>\n<td>0</td>\n<td>0</td>\n<td>1111</td>\n<td>1</td>\n<td>00</td>\n<td>1</td>\n<td>1111</td>\n<td>0000000</td>\n</tr>\n</tbody>\n</table>\n<hr />\n<table>\n<thead>\n<tr>\n<th>数据位</th>\n<th>31-16</th>\n<th>15-0</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>含义</td>\n<td>Base Adress</td>\n<td>Segment Limit</td>\n</tr>\n<tr>\n<td>解释</td>\n<td>基地址</td>\n<td>段大小限制</td>\n</tr>\n<tr>\n<td>数值</td>\n<td>0000000000000000</td>\n<td>1111111111111111</td>\n</tr>\n</tbody>\n</table>\n<hr />\n<p>主要修改了 DPL 为 0；段类型设置为可执行可读，可从较低特权级别调用，可访问的 代码段描述符</p>\n<p>将上面的二进制拼接得到： <code>00cf9f00`0000ffff</code></p>\n<h3 id=\"写入段描述符\"><a class=\"anchor\" href=\"#写入段描述符\">#</a> 写入段描述符</h3>\n<p>将构造好的段描述符写入</p>\n<p>在 windbg 中使用指令</p>\n<p><code>eq  8003f048 00cf9f00`0000ffff</code></p>\n<p><code>eq ：edit qword</code> ，以 qword 的数据宽度编辑修改指定地址的数据</p>\n<p>指令格式为： <code>eq address data</code></p>\n<p>修改后再用 windbg 查看</p>\n<p><img data-src=\"image002.png\" alt=\"\" /></p>\n<h3 id=\"od测试指令\"><a class=\"anchor\" href=\"#od测试指令\">#</a> OD 测试指令</h3>\n<p>使用 OD 随便打开一个软件。选择一个跳转的地址。</p>\n<p><code>jmp 0x4B:0x0085F472</code></p>\n<p><img data-src=\"image003.png\" alt=\"\" /></p>\n<p>可以看到 EIP 被修改为了 Offset (偏移)，CS 被修改为了 Selector (段选择子)。EIP 和 CS 同时被修改了。</p>\n<p><img data-src=\"image004.png\" alt=\"\" /></p>\n<h3 id=\"尝试修改cpl\"><a class=\"anchor\" href=\"#尝试修改cpl\">#</a> 尝试修改 CPL</h3>\n<p>原本的 CPL 为 3，CPL 为当前特权级别，等于 CS 和 SS 的 RPL（请求特权级别）</p>\n<p>前面的其它操作不变，将段选择子的请求特权级别修改为 0</p>\n<p>即将段选择子修改为</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>Index</th>\n<th>TI</th>\n<th>RPL</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>二进制值</td>\n<td>0000 0000 0100 1</td>\n<td>0</td>\n<td>00</td>\n</tr>\n<tr>\n<td>十进制值</td>\n<td>9</td>\n<td>0</td>\n<td>0</td>\n</tr>\n<tr>\n<td>含义</td>\n<td>索引为 9</td>\n<td>查询 GDT 表</td>\n<td>请求特权等级为 0</td>\n</tr>\n</tbody>\n</table>\n<p>得到新的段选择子为 <code>0x48</code></p>\n<p>使用 OD 执行新的指令</p>\n<p><code>jmp 0x48:0x0085F47E</code></p>\n<p><img data-src=\"image005.png\" alt=\"\" /></p>\n<p>可以看到，CS 仍然是 0x4B，CPL 仍然没有发生改变，当前特权等级依旧为 3</p>\n<p>也就是说 CPL 无法通过这种方式改变</p>\n<h1 id=\"reference\"><a class=\"anchor\" href=\"#reference\">#</a> Reference</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxOTg4NDQ4L2FydGljbGUvZGV0YWlscy8xMDI1Nzk2OTU=\">https://blog.csdn.net/qq_41988448/article/details/102579695</span><br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuNTJwb2ppZS5jbi90aHJlYWQtMTQyMzQ4NC0xLTEuaHRtbA==\">https://www.52pojie.cn/thread-1423484-1-1.html</span></p>\n",
            "tags": [
                "跨段跳转流程",
                "JMP FAR指令"
            ]
        },
        {
            "id": "https://or0kit.github.io/Bin/Core/WindowsXp/Protect-Mode/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F-%E6%AE%B5%E6%9D%83%E9%99%90%E6%A3%80%E6%B5%8B/",
            "url": "https://or0kit.github.io/Bin/Core/WindowsXp/Protect-Mode/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F-%E6%AE%B5%E6%9D%83%E9%99%90%E6%A3%80%E6%B5%8B/",
            "title": "保护模式--段权限检测",
            "date_published": "2021-07-29T14:22:31.000Z",
            "content_html": "<h1 id=\"段权限检测\"><a class=\"anchor\" href=\"#段权限检测\">#</a> 段权限检测</h1>\n<h2 id=\"cpu权限等级划分\"><a class=\"anchor\" href=\"#cpu权限等级划分\">#</a> CPU 权限等级划分</h2>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<p>CPU 一共四个等级. ring3 - ring 0 而操作系统只使用了 ring3 与 ring0 所以 ring3 就是应用程序，ring0 就是内核程序。<br />\n应用程序不可以执行特权指令，内核程序可以执行特权指令。</p>\n<h1 id=\"cpl-rpl-dpl-介绍\"><a class=\"anchor\" href=\"#cpl-rpl-dpl-介绍\">#</a> CPL RPL DPL 介绍</h1>\n<p>描述符特权级 (DPL) 域 ——(段描述符的第二个双字的 bit 13 和 bit 14) 确定该段的特权级。<br />\n请求特权级 (RPL) 域 ——(段选择符的 bit 0 和 bit 1) 确定一个段选择符的请求特权级。<br />\n当前特权级 (CPL) 域 ——(CS 段寄存器的 bit 0 和 bit 1) 指明当前运行的进程的特权级。术语当前特权级 (CPL) 就是指该域的设置。</p>\n<ul>\n<li><strong>当前特权级（CPL）</strong></li>\n</ul>\n<p>描述：</p>\n<p>段寄存器 CS 的后两位比特位称为当前特权级<br />\n注意：段选择子 SS 和 CS 的后两位比特位相同</p>\n<p><em>如：</em></p>\n<pre><code>→ CS = 0x001B\n→ 0x001B = 二进制:0000 0000 0001 1011\n→ 二进制:11 = 十进制:3\n→ 因此：当前进程处于3环\n</code></pre>\n<ul>\n<li><strong>请求特权级（RPL）</strong></li>\n</ul>\n<p>描述：</p>\n<p>RPL 是段选择子结构中的一部分<br />\n RPL 是针对段选择子而言的，每个段的选择子都有自己的 RPL<br />\nRPL 表示用什么权限去访问一个段</p>\n<p><em>例：</em></p>\n<pre><code>MOV AX,0008\nMOV DS,AX\n与\nMOV AX,000B\nMOV DS,AX\n指向的是同一个段描述符，但RPL不同\n</code></pre>\n<ul>\n<li><strong>3）数据段的权限检查</strong></li>\n</ul>\n<p>检查：CPL&lt;= DPL 并且 RPL&lt;= DPL（数值上的比较）</p>\n<p><em>例：</em></p>\n<pre><code>当CPL = 0时执行以下指令：\n  MOV AX,000B\t\t\t// RPL=3，请求权限为3\n  MOV DS,AX\t\t\t// 假设ax指向的段描述符的DPL=0\n上述指令虽然满足了CPL&lt;=DPL，但RPL&gt;DPL，因此执行失败\n</code></pre>\n<p>注意：代码段和系统端描述符的检查方式不一样</p>\n<p><strong>既然已经有 CPL（当前特权级别）了，为什么还要有 RPL（请求特权级别）呢？<br />\n原因：我们本可以用 “读写” 的权限去打开一个文件，但为了避免出错，有些时候我们使用 “只读” 的权限去打开</strong></p>\n<h1 id=\"reference\"><a class=\"anchor\" href=\"#reference\">#</a> Reference</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxOTg4NDQ4L2FydGljbGUvZGV0YWlscy8xMDI1NjMzMjU=\">https://blog.csdn.net/qq_41988448/article/details/102563325</span></p>\n",
            "tags": [
                "CRL",
                "DPL",
                "RPL"
            ]
        },
        {
            "id": "https://or0kit.github.io/Bin/Core/WindowsXp/Protect-Mode/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F-%E6%AE%B5%E5%AF%84%E5%AD%98%E5%99%A8%E7%BB%93%E6%9E%84%E3%80%81%E6%AE%B5%E6%8F%8F%E8%BF%B0%E7%AC%A6%E3%80%81%E6%AE%B5%E9%80%89%E6%8B%A9%E5%AD%90/",
            "url": "https://or0kit.github.io/Bin/Core/WindowsXp/Protect-Mode/%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F-%E6%AE%B5%E5%AF%84%E5%AD%98%E5%99%A8%E7%BB%93%E6%9E%84%E3%80%81%E6%AE%B5%E6%8F%8F%E8%BF%B0%E7%AC%A6%E3%80%81%E6%AE%B5%E9%80%89%E6%8B%A9%E5%AD%90/",
            "title": "保护模式--段寄存器结构、段描述符、段选择子",
            "date_published": "2021-07-29T13:25:00.000Z",
            "content_html": "<h1 id=\"段寄存器\"><a class=\"anchor\" href=\"#段寄存器\">#</a> 段寄存器</h1>\n<p>什么是段寄存器，有哪些段寄存器</p>\n<p>当我们用汇编读写某一个地址时： <code>mov dword ptr ds:[0x123456],eax</code> <br />\n 我们真正读写的地址是： <code>ds.base + 0x123456</code> <br />\n <code>ES</code>   <code>CS</code>   <code>SS</code>   <code>DS</code>   <code>FS</code>   <code>GS</code>   <code>LDTR</code>   <code>TR</code>  共 8 个</p>\n<p>代码段寄存器 CS（Code Segment）<br />\n存放当前正在运行的程序代码所在段的段基址，表示当前使用的指令代码可以从该段寄存器指定的存储器段中取得，相应的偏移量则由 IP 提供。</p>\n<p>数据段寄存器 DS（Data Segment）<br />\n指出当前程序使用的数据所存放段的最低地址，即存放数据段的段基址。</p>\n<p>堆栈段寄存器 SS（Stack Segment）<br />\n指出当前堆栈的底部地址，即存放堆栈段的段基址。</p>\n<p>附加段寄存器 ES（Extra Segment）<br />\n指出当前程序使用附加数据段的段基址，该段是串操作指令中目的串所在的段。</p>\n<p>FS、GS 是从 80386 开始增加的，没有全称。</p>\n<p>FS,GS 是 80386 起增加的两个辅助段寄存器，在这之前只有一个辅助段寄存器 ES, 增加这两个寄存器是为了减轻 ES 寄存器的负担，并能更好地配合适用于通用寄存器组的基址和变址寄存器。</p>\n<p>寄存器 FS 和 GS 是段寄存器。它们没有处理器定义的目的，而是由操作系统运行它们来赋予目的。<br />\n附加段寄存器，F 为上一个附加段寄存器字母 E 后的字母，没有对应的名称</p>\n<ul>\n<li><strong>FS</strong></li>\n</ul>\n<p>指向一种被称为线程信息块（TEB）的结构，这种结构是由内核在创建线程时创建的，用于支持操作系统相关功能、服务和 API</p>\n<ul>\n<li><strong>GS</strong></li>\n</ul>\n<p>附加段寄存器，G 为上一个附加段寄存器字母 F 后的字母，没有对应的名称</p>\n<p>在 32 位 Windows 上 GS 保留供将来使用</p>\n<p>在 x64 模式下，FS 和 GS 段寄存器已交换</p>\n<p>Win64 使用 GS 的原因是该 FS 寄存器用于 32 位兼容性层（称为 Wow64）</p>\n<p>32 位应用程序永远不会导致 GS 更改，而 64 位应用程序永远不会导致 FS 更改</p>\n<p>注意，在 Win64 和 Wow64 中 GS 是非零的，这可以用来检测一个 32 位应用程序是否在 64 位 Windows 中运行，在一个 “真正 “的 32 位 Windows 中 GS 总是零</p>\n<h2 id=\"段寄存器结构\"><a class=\"anchor\" href=\"#段寄存器结构\">#</a> 段寄存器结构</h2>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<p>段寄存器中有 16 位是可见部分，有 80 位是不可见部分，一共 96 位。<br />\n可见部分为 16 位的 Selector 部分<br />\n 16 位的 Attribute 为这个段寄存器的属性，它的意义为：表示该段寄存器是可读还是可写还是可执行的。<br />\n32 位的 Base 表示该段是从哪里开始的。<br />\n32 位的 Limit 表示整个段的长度有多少。</p>\n<h2 id=\"段寄存器的读写\"><a class=\"anchor\" href=\"#段寄存器的读写\">#</a> 段寄存器的读写</h2>\n<p>读段寄存器的时候只能够读 16 位。<br />\n比如： <code>mov ax,es</code>  只能读 16 位的可见部分</p>\n<p>读写 LDTR 的指令为： <code>SLDT/LLDT</code></p>\n<p>读写 TR 的指令为： <code>STR/LTR</code></p>\n<p>写段寄存器的时候写的是 96 位。<br />\n比如： <code>mov ds,ax</code>  写时是写 96 位</p>\n<h2 id=\"加载段描述符至段寄存器\"><a class=\"anchor\" href=\"#加载段描述符至段寄存器\">#</a> 加载段描述符至段寄存器</h2>\n<p>除了 MOV 指令，还可以使用 LES、LSS、LDS、LFS、LGS 指令修改段寄存器</p>\n<p>例如：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">char</span> buffer<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>__asm<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  les ecx<span class=\"token punctuation\">,</span>fword ptr ds<span class=\"token operator\">:</span><span class=\"token punctuation\">[</span>buffer<span class=\"token punctuation\">]</span>  <span class=\"token comment\">// 高 2 个字节给 es, 低四个字节给 ecx</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"段寄存器属性简介\"><a class=\"anchor\" href=\"#段寄存器属性简介\">#</a> 段寄存器属性简介</h2>\n<p>段寄存器 | Selector | Attribute    | Base       | Limit</p>\n<p>GS 寄存器 Windows 并没有使用。</p>\n<h2 id=\"gdt全局描述符表-ldt局部描述符表\"><a class=\"anchor\" href=\"#gdt全局描述符表-ldt局部描述符表\">#</a> GDT (全局描述符表) LDT (局部描述符表)</h2>\n<p><strong>LDT 表在 Windows 中并没有使用。</strong><br />\n当我们执行类似  <code>mov ds,ax</code>  指令时，CPU 会查表，根据  <code>ax</code>  的值来决定查找  <code>GDT</code>  还是  <code>LDT</code> , 查找表的什么位置，查出多少数据。<br />\n <code>gdtr</code>  寄存器中存储了  <code>GDT</code>  表的起始地址和  <code>gdt</code>  表中的长度<br />\n gdtr 是 48 位的寄存器，其中 32 位存储的这张表的位置，16 位存储的这张表的大小。</p>\n<p><strong>在 windbg 中查看</strong></p>\n<pre><code>r gdtr //gdt表的存储位置\nr gdtl //gdt表的大小\n</code></pre>\n<p><img data-src=\"image002.png\" alt=\"\" /></p>\n<p>每次从  <code>GDT</code>  表中查表：每 8 个字节为一个<strong>段描述符</strong>。</p>\n<h1 id=\"段选择子\"><a class=\"anchor\" href=\"#段选择子\">#</a> 段选择子</h1>\n<p>段选择子是一个 16 位的段描述符，该描述符指向了定义该段的段描述符.</p>\n<h2 id=\"段选择子和段寄存器的对应关系\"><a class=\"anchor\" href=\"#段选择子和段寄存器的对应关系\">#</a> 段选择子和段寄存器的对应关系</h2>\n<p>对应可见部分的 16 位既段寄存器中的 Selector。</p>\n<h2 id=\"段选择子的结构\"><a class=\"anchor\" href=\"#段选择子的结构\">#</a> 段选择子的结构</h2>\n<p><img data-src=\"image009.png\" alt=\"\" /></p>\n<p>RPL：请求特权级别<br />\n TI：TI=0 查 GDT 表；TI=1 查 LDT 表<br />\n Index：处理器将索引值乘以 8 在加上 GDT 或者 LDT 的基地址，就是要加载的段描述符</p>\n<h1 id=\"段描述符\"><a class=\"anchor\" href=\"#段描述符\">#</a> 段描述符</h1>\n<h2 id=\"段描述符的结构\"><a class=\"anchor\" href=\"#段描述符的结构\">#</a> 段描述符的结构</h2>\n<p><img data-src=\"image003.png\" alt=\"\" /></p>\n<ol>\n<li>\n<p>16 位的 Attribute 对应段寄存器中高四字节从 8 位开始到第 23 位结束。</p>\n</li>\n<li>\n<p>32 位的 Base 包含了三个部分：</p>\n<ul>\n<li>高四字节的第 24 位到第 31 部分</li>\n<li>高四字节的第 0 位到第 7 位</li>\n<li>低四字节的第 16 位到 31 位</li>\n</ul>\n</li>\n<li>\n<p>32 位的 Limit 包括两部分一共二十位（最大值为 FFFFF）：</p>\n<ul>\n<li>高四字节的 16 位到 19 位</li>\n<li>低四个字节的 0 位到 15 位</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"段描述符的属性\"><a class=\"anchor\" href=\"#段描述符的属性\">#</a> 段描述符的属性</h2>\n<p>段寄存器的值是通过段描述符填写的，但段描述符只有 64 位，可是要填写的有 80 位，如何从 64 位变成 80 位呢？</p>\n<h3 id=\"p位\"><a class=\"anchor\" href=\"#p位\">#</a> P 位</h3>\n<p>P 位 位于段描述符的高四个字节的第 15 位（下标为 15）的位置.</p>\n<p>P = 1 段描述符有效<br />\n P = 0 段描述符无效</p>\n<p>当使用指令将段描述符加载至段寄存器的时候，CPU 第一个检测的就是 P 位，当 P 位为 0 时就不做继续的检测了。</p>\n<p><img data-src=\"image004.png\" alt=\"\" /></p>\n<p>在段描述符中，只要看这一行的数是否小于 8，若小于 8，则证明 P 位 = 0 段描述符无效。</p>\n<h3 id=\"g位\"><a class=\"anchor\" href=\"#g位\">#</a> G 位</h3>\n<p>G 位 位于段描述符的高四个字节的第 23 位（下标为 23）的位置。</p>\n<p>G=0 的时候：表示 Limit 字段单位（粒度）是字节：最大值就是 limit 域。<br />\nG=1 的时候：表示 Limit 字段单位（粒度）是 4KB：最大值就是 limit 域 * 0x4K + 0xFFF。</p>\n<p><img data-src=\"image005.png\" alt=\"\" /></p>\n<p>在段描述符中，只要看这一行的数是否小于 8，若小于 8，则证明 G 位 = 0。</p>\n<h3 id=\"s位\"><a class=\"anchor\" href=\"#s位\">#</a> S 位</h3>\n<p>S 位 位于段描述符的高四个字节的第 12 位（下标为 12）的位置。</p>\n<p>S = 1 时表示： 代码段或者数据段描述符<br />\n S = 0 时表示： 系统段描述符</p>\n<ul>\n<li><strong>十六进制下，从右到左看高字节的第五位，若是偶数则 S 位 = 0，若是奇数则 S 位 = 1。</strong></li>\n</ul>\n<h3 id=\"type域\"><a class=\"anchor\" href=\"#type域\">#</a> type 域</h3>\n<p>type 域 包含段描述符的高四个字节的 8、9、10、11 共四位。</p>\n<p><img data-src=\"image006.png\" alt=\"\" /></p>\n<h4 id=\"数据段\"><a class=\"anchor\" href=\"#数据段\">#</a> 数据段</h4>\n<p>当 s 位为 1 且当 type 域中的 11 位为 0 时，表示是数据段。<br />\n其中图中的 A、W、E 分别代表不同的意思</p>\n<p><img data-src=\"image007.png\" alt=\"\" /></p>\n<p>E 位表示拓展位，为 0 表示向上拓展，为 1 表示向下拓展。<br />\n向上拓展：有效范围为 <code>fs.Base ~ fs.Base+Limit</code> <br />\n 向下拓展：有效范围除了 <code>fs.Base ~ fs.Base+Limit</code></p>\n<h4 id=\"代码段\"><a class=\"anchor\" href=\"#代码段\">#</a> 代码段</h4>\n<p>当 s 位为 1 且当 type 域中的 11 位为 1 时，表示是代码段。<br />\n其中图中的 A、R、C 分别代表不同的意思</p>\n<p>A 代表是否访问过，未访问过为 0，访问过为 1。<br />\nR 代表是否可读位，表示该段是否可以读。<br />\nC 代表一致位：C = 1 表示一致代码段 ，C = 0 表示非一致代码段</p>\n<h4 id=\"系统描述符\"><a class=\"anchor\" href=\"#系统描述符\">#</a> 系统描述符</h4>\n<p>当 s 位为 0 的时候，表示该段描述符为系统描述符。系统描述符有分为以下类型：</p>\n<p><img data-src=\"image008.png\" alt=\"\" /></p>\n<h3 id=\"dpl\"><a class=\"anchor\" href=\"#dpl\">#</a> DPL</h3>\n<ul>\n<li><strong>描述：</strong></li>\n</ul>\n<p>DPL 存储在段描述符中，规定了访问所在段描述符所需要的特权级别是多少<br />\n DPL 数值越大，访问所在段描述符所需要的权限越低<br />\n注意：在 Windows 中，DPL 只会出现两种情况，要么全为 0，要么全为 1</p>\n<p><strong>十六进制下，从右到左看高字节的第五位，若是 <code>8</code>  或 <code>9</code>  则 DPL=0，若是 <code>E</code>  或 <code>F</code>  则 DPL=3。</strong></p>\n<ul>\n<li><strong>例：</strong></li>\n</ul>\n<p>若 AX 指向的段描述符的 DPL=0，但当前程序的 CPL=3，那么这条指令是不会成功的！</p>\n<h3 id=\"db位\"><a class=\"anchor\" href=\"#db位\">#</a> D\\B 位</h3>\n<p><strong>情况 1：对 CS 段的影响</strong></p>\n<p>D=1：采用 32 位寻址方式<br />\n D=0：采用 16 位寻址方式</p>\n<p><strong>情况 2：对 SS 段的影响</strong></p>\n<p>D=1：隐式堆栈访问指令（如：PUSH POP CALL）使用 32 位堆栈指针寄存器 ESP<br />\nD=0：隐式堆栈访问指令（如：PUSH POP CALL）使用 16 位堆栈指针寄存器 SP</p>\n<p><strong>情况 3：向下拓展的数据段</strong></p>\n<p>D=1：段上限为 4GB<br />\nD=0：段上限为 64KB</p>\n<p><img data-src=\"image010.png\" alt=\"\" /></p>\n<h2 id=\"reference\"><a class=\"anchor\" href=\"#reference\">#</a> Reference</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2OTE2MTc5L2FydGljbGUvZGV0YWlscy85MTU1MDYzMQ==\">https://blog.csdn.net/qq_36916179/article/details/91550631</span><br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2OTE2MTc5L2FydGljbGUvZGV0YWlscy85MTYyMTk0Nw==\">https://blog.csdn.net/qq_36916179/article/details/91621947</span><br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxOTg4NDQ4L2FydGljbGUvZGV0YWlscy8xMDI1NjMzMjU=\">https://blog.csdn.net/qq_41988448/article/details/102563325</span></p>\n",
            "tags": [
                "段寄存器结构",
                "段描述符",
                "段选择子",
                "GDT表"
            ]
        }
    ]
}