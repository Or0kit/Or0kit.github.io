{
    "version": "https://jsonfeed.org/version/1",
    "title": "Or0kit • All posts by \"内存管理\" category",
    "description": "临渊羡鱼，不如退而结网",
    "home_page_url": "https://Or0kit.github.io",
    "items": [
        {
            "id": "https://or0kit.github.io/Bin/Core/WindowsXp/MemoryManagement/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86-05%E6%97%A0%E5%A4%84%E4%B8%8D%E5%9C%A8%E7%9A%84%E7%BC%BA%E9%A1%B5%E5%BC%82%E5%B8%B8/",
            "url": "https://or0kit.github.io/Bin/Core/WindowsXp/MemoryManagement/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86-05%E6%97%A0%E5%A4%84%E4%B8%8D%E5%9C%A8%E7%9A%84%E7%BC%BA%E9%A1%B5%E5%BC%82%E5%B8%B8/",
            "title": "内存管理-05无处不在的缺页异常",
            "date_published": "2022-04-16T07:17:03.000Z",
            "content_html": "<h1 id=\"缺页异常的由来\"><a class=\"anchor\" href=\"#缺页异常的由来\">#</a> 缺页异常的由来</h1>\n<p>先来复习一下 PTE：</p>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<p>P 位  代表当前页面是否有效。</p>\n<p>当 CPU 访问一个地址，其 PTE 的 P 位为 0，此时会产生缺页异常；</p>\n<p>在 windows 中，缺页异常是时刻在发生的。</p>\n<p>Windows 利用缺页异常机制让我们更加有效的访问内存。</p>\n<p>海哥原话：当我们的物理内存大小只有 2MB 时，当我们需要用到某个物理页的时候，将对应物理页的 P 位置 1，当我们不再需要使用该物理页时，再将其 P 位置 0，这样的内存使用效率是非常低的。</p>\n<p>因此 windows 不是这样设计的 —— 只有正在使用的线性地址，才会被挂上物理页，当物理页在一段时间内不被使用或不够用的情况下，操作系统会将当前物理页中的数据拷贝至硬盘中，然后将当前物理页供给 “别人” 使用，当需要再次用到该物理页的数据时，则将 “别人” 的数据再拷贝出来，将 “自己 &quot; 的数据从硬盘中拷回，被拷至硬盘中的物理页数据会被写入到一个文件中，也就是我们平时常说的<strong>虚拟内存</strong></p>\n<p>也就是 C 盘中的  <code>pagefile.sys</code>  文件。</p>\n<p>当物理页占用情况较为紧张时，这个文件用于存放物理页的临时数据作为备份。</p>\n<h1 id=\"virtualalloc-函数\"><a class=\"anchor\" href=\"#virtualalloc-函数\">#</a> VirtualAlloc 函数</h1>\n<p>保留与提交的误区</p>\n<p>还是这个函数，前面我们已经验证过了。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>LPVOID VirtualAlloc<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tLPVOID lpAddress<span class=\"token punctuation\">,</span> \t<span class=\"token comment\">// 要分配的内存区域的地址</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tDWORD dwSize<span class=\"token punctuation\">,</span> \t\t<span class=\"token comment\">// 分配的大小</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tDWORD flAllocationType<span class=\"token punctuation\">,</span> \t<span class=\"token comment\">// 类型：MEM_RESERVE MEM_COMMIT</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tDWORD flProtect \t<span class=\"token comment\">// 该内存的初始保护属性</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>MEM_RESERVE：保留线性地址</p>\n<p>MEM_COMMIT：可以有物理页，但不是立即有或者一直有</p>\n<h1 id=\"无处不在的缺页\"><a class=\"anchor\" href=\"#无处不在的缺页\">#</a> 无处不在的缺页</h1>\n<p><img data-src=\"image002.png\" alt=\"\" /></p>\n<ol>\n<li>当物理页被放入页面文件时，PTE 结构如图 a 所示</li>\n<li>当该进程再次读取该物理页对应的线性地址时，由于 P 位为 0，因此会触发缺页异常处理程序</li>\n<li>在 windows xp 中，缺页异常处理程序位于 IDT [0xE]</li>\n<li>此时，缺页异常处理程序会再次查询当前 PTE 的属性，若 1-4 位，5-9 位，12-31 位都有值，说明当前 PTE 是有效的，但是物理页被存放到了页面文件中</li>\n<li>然后，缺页异常处理程序根据 PTE 中得到的值去查询 pagefile.sys，将原来的物理页的内容挂入新的物理页，然后将 P 位置 1，再将新的物理页的物理地址挂入 PTE 的第 12-31 位</li>\n<li>在用户看来，两次读取同一个线性地址，中间这一系列复杂过程是透明的，而只能观察到两次都成功读取了同一个值</li>\n</ol>\n<h1 id=\"execute_writecopy写拷贝\"><a class=\"anchor\" href=\"#execute_writecopy写拷贝\">#</a> EXECUTE_WRITECOPY（写拷贝）</h1>\n<p>描述：当程序正常加载一个 EXE 或者 DLL 时，其 VadRoot 中的内存属性为 Mapped EXE，权限为 EXECUTE_WRITECOPY，当试图对其某一内容进行修改时，无法对其它进程中的同一个模块产生影响</p>\n<p>原理：</p>\n<p>当试图对其某一内容进行修改时，系统会检查其线性地址对应的物理页的 PTE 属性，若 R/W 属性为 0 时，触发缺页异常<br />\n缺页异常处理程序检查 VadRoot 中对应线性地址所在空间的 MMVAD_FLAGS 中的 Protection 成员，若值位 0x111 时，表示权限为 EXECUTE_WRITECOPY<br />\n 此时，缺页异常处理程序将当前线性地址对应的物理页内容进行拷贝，将其写入一个新的物理页，然后将当前进程需要修改的线性地址挂入新的物理页上，然后对需要修改的内容进行写入</p>\n<p>解决方法：可通过编写驱动程序先将需要修改的线性地址对应的物理页的 PTE 的 R/W 位置为 1，再对需要修改的地方进行修改。</p>\n<p>以前写过过写拷贝全局监控函数的。</p>\n<h1 id=\"reference\"><a class=\"anchor\" href=\"#reference\">#</a> Reference</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxOTg4NDQ4L2FydGljbGUvZGV0YWlscy8xMTI2NDczODg=\">https://blog.csdn.net/qq_41988448/article/details/112647388</span></p>\n",
            "tags": [
                "缺页异常"
            ]
        },
        {
            "id": "https://or0kit.github.io/Bin/Core/WindowsXp/MemoryManagement/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86-04%E7%89%A9%E7%90%86%E5%86%85%E5%AD%98%E7%9A%84%E7%AE%A1%E7%90%86/",
            "url": "https://or0kit.github.io/Bin/Core/WindowsXp/MemoryManagement/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86-04%E7%89%A9%E7%90%86%E5%86%85%E5%AD%98%E7%9A%84%E7%AE%A1%E7%90%86/",
            "title": "内存管理-04物理内存的管理",
            "date_published": "2022-04-16T07:17:01.000Z",
            "content_html": "<h1 id=\"物理内存\"><a class=\"anchor\" href=\"#物理内存\">#</a> 物理内存</h1>\n<p>&lt;1&gt; 最大物理内存</p>\n<pre><code>10-10-12分页  最多识别物理内存为4GB\n\n2-9-9-12分页  最多识别物理内存为64GB\n</code></pre>\n<p>&lt;2&gt; 操作系统限制</p>\n<p>为什么在 xp 中，明明是 2-9-9-12 分页，单仍然无法超越 4GB 呢？</p>\n<p>具体可以分析  <code>MmAddPhysicalMemoryEx</code>  函数。存粹是操作系统限制。</p>\n<p>&lt;3&gt; 实际物理内存</p>\n<p><code>MmNumberOfPhysicalPages</code>  * 4 = 物理内存  (页为单位)</p>\n<h1 id=\"物理内存如何管理\"><a class=\"anchor\" href=\"#物理内存如何管理\">#</a> 物理内存如何管理</h1>\n<p>在 XP 上一个物理页的大小是 4096 BYTE = 0x1000 BYTE = 4 KB  = 4 * 1024B</p>\n<p>查看 XP 上的物理页：</p>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<p>对于物理内存，操作系统采用帧管理数据库的模式。<br />\n一个物理页就是一帧，被称之为帧数据库：</p>\n<p>其实就是数组，数组的指针： <code>_MMPFN* MmPfnDatabase</code>  而数组的长度是：  <code>MmNumberOfPhysicalPages</code></p>\n<p>而数组成员都是  <code>_MMPFN</code>  结构</p>\n<p>在 windbg 中查看：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kd&gt; dt _MMPFN</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>nt!_MMPFN</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   +0x000 u1               : __unnamed</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   +0x004 PteAddress       : Ptr32 _MMPTE</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   +0x008 u2               : __unnamed</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   +0x00c u3               : __unnamed</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   +0x010 OriginalPte      : _MMPTE</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   +0x018 u4               : __unnamed</pre></td></tr></table></figure><p>在 xp 源码中查看：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_MMPFN</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">union</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        PFN_NUMBER Flink<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        WSLE_NUMBER WsIndex<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        PKEVENT Event<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        NTSTATUS ReadStatus<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        SINGLE_LIST_ENTRY NextStackPfn<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> u1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    PMMPTE PteAddress<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">union</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        PFN_NUMBER Blink<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        ULONG_PTR ShareCount<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> u2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">union</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        MMPFNENTRY e1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            USHORT ShortFlags<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            USHORT ReferenceCount<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> e2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> u3<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\"><span class=\"token function\">defined</span> <span class=\"token punctuation\">(</span>_WIN64<span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    ULONG UsedPageTableEntries<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    MMPTE OriginalPte<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">union</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        ULONG_PTR EntireFrame<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\"><span class=\"token function\">defined</span> <span class=\"token punctuation\">(</span>_WIN64<span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            ULONG_PTR PteFrame<span class=\"token operator\">:</span> <span class=\"token number\">58</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">else</span></span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            ULONG_PTR PteFrame<span class=\"token operator\">:</span> <span class=\"token number\">26</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            ULONG_PTR InPageError <span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            ULONG_PTR VerifierAllocation <span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            ULONG_PTR AweAllocation <span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            ULONG_PTR LockCharged <span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// maintained for DBG only</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            ULONG_PTR KernelStack <span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// only for valid (not trans) pages</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            ULONG_PTR Reserved <span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> u4<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token punctuation\">&#125;</span> MMPFN<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>PMMPFN<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>可以发现这个结构体  <code>_MMPFN</code>  的大小是 0x1C。</p>\n<p>在 XP 中查看帧结构数组的基址：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kd&gt; dd MmPfnDatabase l1</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>805630c8  80e00000</pre></td></tr></table></figure><p><code>80e00000+0x1C</code>  就是第二个物理页的帧结构数组，那么我们如何知道这个数组对应的物理页呢？</p>\n<p>这里操作系统的设计非常巧妙，帧结构数组的索引对应着相应的物理页，如果索引为  <code>0</code>  则对应的物理页地址为  <code>0 * 4kB</code>  ；如果索引为  <code>1</code>  则对应的物理页地址为  <code>1 * 4kB</code>  。</p>\n<h2 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结：</h2>\n<p>物理页的数量是由  <code>MmNumberOfPhysicalPages</code>  决定的<br />\n物理页如何管理：每一个物理页都对应一个  <code>MMPFN</code>  的结构<br />\n如何通过帧数组找物理页和如何通过物理页找帧数组都已经知道了。</p>\n<h1 id=\"物理页的状态\"><a class=\"anchor\" href=\"#物理页的状态\">#</a> 物理页的状态</h1>\n<p>物理页有着不同的状态，正在被使用的和没有被使用的，又分为好多状态。</p>\n<p><code>_MMPFN</code>  结构体成员  <code>u3</code>  ：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">union</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    MMPFNENTRY e1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        USHORT ShortFlags<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        USHORT ReferenceCount<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> e2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span> u3<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>我们查看其成员  <code>e1</code>  的结构：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_MMPFNENTRY</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    ULONG Modified <span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    ULONG ReadInProgress <span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    ULONG WriteInProgress <span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    ULONG PrototypePte<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    ULONG PageColor <span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    ULONG ParityError <span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    ULONG PageLocation <span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    ULONG RemovalRequested <span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    ULONG CacheAttribute <span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    ULONG Rom <span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    ULONG LockCharged <span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    ULONG DontUse <span class=\"token operator\">:</span> <span class=\"token number\">16</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//overlays USHORT for reference count field.</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span> MMPFNENTRY<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>其中的  <code>ULONG PageLocation : 3;</code>  成员就决定了当前物理页处于什么状态。</p>\n<p>以下是没有被使用的几种状态：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>0：MmZeroedPageListHead</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>1：MmFreePageListHead</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>2：MmStandbyPageListHead</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>3：MmModifiedPageListHead</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>4：MmModifiedNoWritePageListHead</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>5：MmBadPageListHead</pre></td></tr></table></figure><h2 id=\"操作系统的6个链表\"><a class=\"anchor\" href=\"#操作系统的6个链表\">#</a> 操作系统的 6 个链表</h2>\n<p>&lt;1&gt; MmBadPageListHead<br />\n 坏链</p>\n<p>&lt;2&gt; MmZeroedPageListHead<br />\n 零化链表（是系统在空闲的时候进行零化的，不是程序自己清零的那种）</p>\n<p>&lt;3&gt; MmFreePageListHead<br />\n 空闲链表（物理页是周转使用的，刚被释放的物理页是没有清 0，系统空闲的时候有专门的线程从这个队列摘取物理页，加以清 0 后再挂入 MmZeroedPageListHead）</p>\n<p>&lt;4&gt; MmStandbyPageListHead<br />\n 备用链表（当系统内存不够的时候，操作系统会把物理内存中的数据交换到硬盘上，此时页面不是直接挂到空闲链表上去，而是挂到备用链表上，虽然我释放了，但里边的内容还是有意义的）</p>\n<p>&lt;5&gt; MmModifiedPageListHead</p>\n<p>&lt;6&gt; MmModifiedNoWritePageListHead</p>\n<p>具体可以参考 《Windows 内核原理与实现》</p>\n<p>我们看一下这些链表的结构：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_MMPFNLIST</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    PFN_NUMBER Total<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    MMLISTS ListName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    PFN_NUMBER Flink<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    PFN_NUMBER Blink<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span> MMPFNLIST<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>MMPFNLIST MmZeroedPageListHead <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                    <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// Total</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                    ZeroedPageList<span class=\"token punctuation\">,</span> <span class=\"token comment\">// ListName</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                    MM_EMPTY_LIST<span class=\"token punctuation\">,</span> <span class=\"token comment\">//Flink</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                    MM_EMPTY_LIST  <span class=\"token comment\">// Blink</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>MMPFNLIST MmFreePageListHead <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                    <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// Total</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                    FreePageList<span class=\"token punctuation\">,</span> <span class=\"token comment\">// ListName</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                    MM_EMPTY_LIST<span class=\"token punctuation\">,</span> <span class=\"token comment\">//Flink</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                    MM_EMPTY_LIST  <span class=\"token comment\">// Blink</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>MMPFNLIST MmStandbyPageListHead <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                    <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// Total</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                    StandbyPageList<span class=\"token punctuation\">,</span> <span class=\"token comment\">// ListName</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                    MM_EMPTY_LIST<span class=\"token punctuation\">,</span> <span class=\"token comment\">//Flink</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                    MM_EMPTY_LIST  <span class=\"token comment\">// Blink</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>MMPFNLIST MmModifiedPageListHead <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                    <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// Total</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                    ModifiedPageList<span class=\"token punctuation\">,</span> <span class=\"token comment\">// ListName</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                    MM_EMPTY_LIST<span class=\"token punctuation\">,</span> <span class=\"token comment\">//Flink</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                    MM_EMPTY_LIST  <span class=\"token comment\">// Blink</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>MMPFNLIST MmModifiedNoWritePageListHead <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                    <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// Total</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                    ModifiedNoWritePageList<span class=\"token punctuation\">,</span> <span class=\"token comment\">// ListName</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                    MM_EMPTY_LIST<span class=\"token punctuation\">,</span> <span class=\"token comment\">//Flink</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                    MM_EMPTY_LIST  <span class=\"token comment\">// Blink</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>MMPFNLIST MmBadPageListHead <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                    <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// Total</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                    BadPageList<span class=\"token punctuation\">,</span> <span class=\"token comment\">// ListName</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                    MM_EMPTY_LIST<span class=\"token punctuation\">,</span> <span class=\"token comment\">//Flink</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                    MM_EMPTY_LIST  <span class=\"token comment\">// Blink</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token comment\">// Note the ROM page listhead is deliberately not in the set</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token comment\">// of MmPageLocationList ranges.</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>MMPFNLIST MmRomPageListHead <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>                    <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// Total</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>                    StandbyPageList<span class=\"token punctuation\">,</span> <span class=\"token comment\">// ListName</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>                    MM_EMPTY_LIST<span class=\"token punctuation\">,</span> <span class=\"token comment\">//Flink</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>                    MM_EMPTY_LIST  <span class=\"token comment\">// Blink</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>PMMPFNLIST MmPageLocationList<span class=\"token punctuation\">[</span>NUMBER_OF_PAGE_LISTS<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>                                      <span class=\"token operator\">&amp;</span>MmZeroedPageListHead<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>                                      <span class=\"token operator\">&amp;</span>MmFreePageListHead<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>                                      <span class=\"token operator\">&amp;</span>MmStandbyPageListHead<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>                                      <span class=\"token operator\">&amp;</span>MmModifiedPageListHead<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>                                      <span class=\"token operator\">&amp;</span>MmModifiedNoWritePageListHead<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>                                      <span class=\"token operator\">&amp;</span>MmBadPageListHead<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>                                      <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>                                      <span class=\"token constant\">NULL</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>那我们该如何把这些串起来呢？<br />\n先来看一张表：</p>\n<p><img data-src=\"image002.png\" alt=\"\" /></p>\n<p>理解这六个链表是如何和 MMPFN 结构串起来的。</p>\n<p>在 Windbg 中查看一下  <code>MmZeroedPageListHead</code>  链表：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kd&gt; dd MmZeroedPageListHead l4</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>805528e8  0008ed15 00000000 0005a628 00039e07</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>kd&gt; dt _MMPFNLIST 805528e8</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>nt!_MMPFNLIST</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   +0x000 Total            : 0x8ed15</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   +0x004 ListName         : 0 ( ZeroedPageList )</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   +0x008 Flink            : 0x5a628</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   +0x00c Blink            : 0x39e07</pre></td></tr></table></figure><figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kd&gt; dd 80e00000 + 0x5a628*0x1C</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>817e2c60  000363b8 c058a679 ffffffff 00003000</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>kd&gt; dd 80e00000 + 000363b8*0x1C</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>813ee820  000902a8 c0006d01 0005a628 00003000</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>kd&gt; dd 80e00000 + 000902a8*0x1C</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>81dc4a60  0007fdb8 c0710af1 000363b8 00003000</pre></td></tr></table></figure><h2 id=\"正在使用中的内存\"><a class=\"anchor\" href=\"#正在使用中的内存\">#</a> 正在使用中的内存</h2>\n<p>查看一个进程所占用的所有物理页：</p>\n<p>这里以  <code>DbgView</code>  为例:</p>\n<p>在 Windbg 中查看 <code>DbgView</code>  的  <code>EPROCESS</code>  结构体：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kd&gt; dt _EPROCESS 89e21830</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>nt!_EPROCESS</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  ……</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  ……</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  +0x1f8 Vm               : _MMSUPPORT</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  ……</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  ……</pre></td></tr></table></figure><figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kd&gt; dt _MMSUPPORT 89e21830+0x1f8</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>nt!_MMSUPPORT</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   +0x000 LastTrimTime     : _LARGE_INTEGER 0x01d86059&#96;8f011bc0</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   +0x008 Flags            : _MMSUPPORT_FLAGS</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   +0x00c PageFaultCount   : 0x41b</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   +0x010 PeakWorkingSetSize : 0x3da</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   +0x014 WorkingSetSize   : 0x3d5</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   +0x018 MinimumWorkingSetSize : 0x32</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   +0x01c MaximumWorkingSetSize : 0x159</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   +0x020 VmWorkingSetList : 0xc0883000 _MMWSL</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   +0x024 WorkingSetExpansionLinks : _LIST_ENTRY [ 0x8a063dd4 - 0x89d34ee4 ]</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   +0x02c Claim            : 0</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   +0x030 NextEstimationSlot : 0</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   +0x034 NextAgingSlot    : 0</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   +0x038 EstimatedAvailable : 0</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   +0x03c GrowthSinceLastEstimate : 0x41b</pre></td></tr></table></figure>",
            "tags": [
                "物理内存",
                "MmAddPhysicalMemoryEx"
            ]
        },
        {
            "id": "https://or0kit.github.io/Bin/Core/WindowsXp/MemoryManagement/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86-03Mapped%20Memory/",
            "url": "https://or0kit.github.io/Bin/Core/WindowsXp/MemoryManagement/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86-03Mapped%20Memory/",
            "title": "内存管理-03Mapped Memory",
            "date_published": "2022-04-15T07:16:58.000Z",
            "content_html": "<h1 id=\"mapped-memory\"><a class=\"anchor\" href=\"#mapped-memory\">#</a> Mapped Memory</h1>\n<p>前面了解了私有内存，接下来认识一下映射内存，这种内存的好处是可以跟其他进程共享物理页。</p>\n<p>在前面的用 <code>!vad</code>  查看内存结构中，可以发现后面有文件路径的就是映射内存。</p>\n<p>可以共享一个物理页，也可以共享一份文件。</p>\n<h2 id=\"实验演示\"><a class=\"anchor\" href=\"#实验演示\">#</a> 实验演示</h2>\n<h3 id=\"共享物理页\"><a class=\"anchor\" href=\"#共享物理页\">#</a> 共享物理页</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;Windows.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">BUFSIZ</span> <span class=\"token expression\"><span class=\"token number\">0x200</span></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MapFileName</span> <span class=\"token string\">\"SharedMemory\"</span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token comment\">// 内核对象：1、物理页  2、文件</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tHANDLE g_hMapFile <span class=\"token operator\">=</span> <span class=\"token function\">CreateFileMapping</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\tINVALID_HANDLE_VALUE<span class=\"token punctuation\">,</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\tPAGE_READWRITE<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>BUFSIZ<span class=\"token punctuation\">,</span>MapFileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token comment\">// 将物理页与线性地址进行映射</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tLPTSTR g_lpBuff <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>LPTSTR<span class=\"token punctuation\">)</span><span class=\"token function\">MapViewOfFile</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\tg_hMapFile<span class=\"token punctuation\">,</span>FILE_MAP_ALL_ACCESS<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t<span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>BUFSIZ<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>PDWORD<span class=\"token punctuation\">)</span>g_lpBuff <span class=\"token operator\">=</span> <span class=\"token number\">0x12345678</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A进程写入地址：%p，内容：%x\\t\\n\"</span><span class=\"token punctuation\">,</span>g_lpBuff<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>PDWORD<span class=\"token punctuation\">)</span>g_lpBuff<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"image001.png\" alt=\"\" /></p>\n<p>接下来我们观察内存结构</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kd&gt; !vad 0x8a098e90</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>VAD   Level     Start       End Commit</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>……</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>……</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>89acf150  8       3a0       3a0      0 Mapped       READWRITE          Pagefile section, shared commit 0x1</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>……</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>……</pre></td></tr></table></figure><p>可以看到是一个页的大小。所以映射内存也是以页为单位的。</p>\n<p>接下来在 B 进程中读取一下共享内存</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;Windows.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">BUFSIZ</span> <span class=\"token expression\"><span class=\"token number\">0x200</span></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MapFileName</span> <span class=\"token string\">\"SharedMemory\"</span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token comment\">// 内核对象：1、物理页  2、文件</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tHANDLE g_hMapFile <span class=\"token operator\">=</span> <span class=\"token function\">OpenFileMapping</span><span class=\"token punctuation\">(</span>FILE_MAP_ALL_ACCESS<span class=\"token punctuation\">,</span>FALSE<span class=\"token punctuation\">,</span>MapFileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token comment\">// 将物理页与线性地址进行映射</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\tLPTSTR g_lpBuff <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>LPTSTR<span class=\"token punctuation\">)</span><span class=\"token function\">MapViewOfFile</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\tg_hMapFile<span class=\"token punctuation\">,</span>FILE_MAP_ALL_ACCESS<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t<span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>BUFSIZ<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"B进程读地址：%p，内容：%x\\t\\n\"</span><span class=\"token punctuation\">,</span>g_lpBuff<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>PDWORD<span class=\"token punctuation\">)</span>g_lpBuff<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"image002.png\" alt=\"\" /></p>\n<p>查看 B 进程的内存结构：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kd&gt; !vad 0x8a05b8b8</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>VAD   Level     Start       End Commit</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>……</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>……</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>8a0ff3b0  8       3a0       3a0      0 Mapped       READWRITE          Pagefile section, shared commit 0x1</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>……</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>……</pre></td></tr></table></figure><p>可以看到也是一个页的大小。</p>\n<h3 id=\"共享文件\"><a class=\"anchor\" href=\"#共享文件\">#</a> 共享文件</h3>\n<p>文件映射进内存</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;Windows.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MapFileName</span> <span class=\"token string\">\"SharedMemory\"</span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tHANDLE g_hFile <span class=\"token operator\">=</span> <span class=\"token function\">CreateFile</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token string\">\"C:\\\\Hello.exe\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\tGENERIC_READ<span class=\"token operator\">|</span>GENERIC_WRITE<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\tFILE_SHARE_READ<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\tOPEN_ALWAYS<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\tFILE_ATTRIBUTE_NORMAL<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t<span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tHANDLE g_hMapFile <span class=\"token operator\">=</span> <span class=\"token function\">CreateFileMapping</span><span class=\"token punctuation\">(</span>g_hFile<span class=\"token punctuation\">,</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span>PAGE_READWRITE<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> BUFSIZ<span class=\"token punctuation\">,</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token keyword\">void</span><span class=\"token operator\">*</span> g_lpBuff <span class=\"token operator\">=</span> <span class=\"token function\">MapViewOfFile</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\tg_hMapFile<span class=\"token punctuation\">,</span>FILE_MAP_ALL_ACCESS<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t<span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>BUFSIZ<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"共享内存地址：%p\\t\\n\"</span><span class=\"token punctuation\">,</span>g_lpBuff<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"image003.png\" alt=\"\" /></p>\n<p>观察内存结构:</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kd&gt; !vad 0x8a0a6b00</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>VAD   Level     Start       End Commit</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>……</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>……</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>89ad82d8  8       3a0       3a0      0 Mapped       READWRITE          \\Hello.exe</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>……</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>89ac3e88  3     7c800     7c91d      6 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\kernel32.dll</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>89e0fbc0  2     7c920     7c9b2      5 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\ntdll.dll</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>……</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>……</pre></td></tr></table></figure><p>可以看到在我们映射的  <code>Hello.exe</code>  文件。这种共享文件特别适合那种大的文件。</p>\n<p>** 细心的人可能发现了。** 我们的文件是  <code>READWRITE</code>  而有的是  <code>EXECUTE_WRITECOPY</code> ?</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;Windows.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token function\">LoadLibrary</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"C:\\\\Hello.exe\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>观察内存结构:</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kd&gt; !vad 0x89ad1e98</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>VAD   Level     Start       End Commit</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>……</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>……</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>89ac98d0  8       3a0       3aa      4 Mapped  Exe  EXECUTE_WRITECOPY  \\Hello.exe</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>……</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>……</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>89d0ec98  8     77fc0     77fd0      2 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\secur32.dll</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>89ad18c8  3     7c800     7c91d      6 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\kernel32.dll</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>8a15c988  2     7c920     7c9b2      5 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\ntdll.dll</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>……</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>……</pre></td></tr></table></figure><p>通过这些我们应该明白了什么是  <code>LoadLibrary</code>  。跟映射文件唯一的区别就是属性， <code>LoadLibrary</code>  的属性只有一种就是  <code>EXECUTE_WRITECOPY</code> 。</p>\n<p>当了解这些后我们对内存就会了如指掌，如果想模块隐藏只能申请一块私有内存然后在里面填写数据，拉伸、抹去 PE 指纹，这样想要检测就很难了。</p>\n",
            "tags": [
                "共享物理页",
                "共享文件",
                "LoadLibrary的本质"
            ]
        },
        {
            "id": "https://or0kit.github.io/Bin/Core/WindowsXp/MemoryManagement/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86-02Private%20Memory/",
            "url": "https://or0kit.github.io/Bin/Core/WindowsXp/MemoryManagement/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86-02Private%20Memory/",
            "title": "内存管理-02Private Memory",
            "date_published": "2022-04-15T07:16:55.000Z",
            "content_html": "<h1 id=\"申请内存的两种方式\"><a class=\"anchor\" href=\"#申请内存的两种方式\">#</a> 申请内存的两种方式</h1>\n<p>&lt;1&gt; 通过  <code>VirtualAlloc</code>  /  <code>VirtualAllocEx</code>  申请的：Private Memory</p>\n<p>&lt;2&gt; 通过  <code>CreateFileMapping</code>  映射的：Mapped Memory</p>\n<h2 id=\"验证内存种类\"><a class=\"anchor\" href=\"#验证内存种类\">#</a> 验证内存种类</h2>\n<p>接下来写代码去验证上面的两种内存种类。</p>\n<p>在复习一下  <code>VirtualAlloc</code>  函数：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>LPVOID VirtualAlloc<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tLPVOID lpAddress<span class=\"token punctuation\">,</span> \t<span class=\"token comment\">// 要分配的内存区域的地址</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tDWORD dwSize<span class=\"token punctuation\">,</span> \t\t<span class=\"token comment\">// 分配的大小</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tDWORD flAllocationType<span class=\"token punctuation\">,</span> \t<span class=\"token comment\">// 分配的类型</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tDWORD flProtect \t<span class=\"token comment\">// 该内存的初始保护属性</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>参数介绍：</p>\n<p>申请内存的地址。可以指定地址，但是物理页我们不知道哪里的地址是否可用，所以一般为 NULL 。<br />\n申请内存的大小。一般以页的整数倍进行申请，如：两页 0x1000*2 。<br />\n申请内存的类型。<br />\n常用的有两种类型：<br />\n <code>MEM_RESERVE</code>  : 先申请线性内存，但不占用物理内存<br />\n <code>MEM_COMMIT</code>  : 占用线性内存和物理内存。<strong>一会就打破这个认知！</strong><br />\n内存的状态。可读、可写、可执行。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;Windows.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">void</span><span class=\"token operator\">*</span> p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tp <span class=\"token operator\">=</span> <span class=\"token function\">VirtualAlloc</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x1000</span><span class=\"token punctuation\">,</span>MEM_COMMIT<span class=\"token punctuation\">,</span>PAGE_READWRITE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"p:%p\\t\\n\"</span><span class=\"token punctuation\">,</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token function\">VirtualFree</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>MEM_FREE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>先运行，不申请内存，查看此进程的内存结构：</p>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<p>申请后：</p>\n<p><img data-src=\"image002.png\" alt=\"\" /></p>\n<h2 id=\"验证-mem_reserve-与-mem_commit\"><a class=\"anchor\" href=\"#验证-mem_reserve-与-mem_commit\">#</a> 验证 MEM_RESERVE 与 MEM_COMMIT</h2>\n<p>我们使用 VirtualAlloc 这个函数的时候，第三个参数要传分配的类型，常见的一个是  <code>MEM_COMMIT</code>  ，另一个是  <code>MEM_RESERVE</code>  。</p>\n<p>前者申请后就会提供一个物理页，而后者会有记录但不会给你物理页，真的是这样的吗？</p>\n<p>之前的代码里我们传递的参数是 <code>MEM_COMMIT</code> ，但我们并没有给申请的地址赋值，我们来查看一下是否有物理页：</p>\n<p><img data-src=\"image003.png\" alt=\"\" /></p>\n<p>可以看到并没有 PTE，也就是没有挂物理页。</p>\n<p>更改上面的代码，给申请的地址赋值：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;Windows.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">void</span><span class=\"token operator\">*</span> p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tp <span class=\"token operator\">=</span> <span class=\"token function\">VirtualAlloc</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x1000</span><span class=\"token punctuation\">,</span>MEM_COMMIT<span class=\"token punctuation\">,</span>PAGE_READWRITE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"p:%p\\t\\n\"</span><span class=\"token punctuation\">,</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>p<span class=\"token operator\">=</span><span class=\"token number\">666</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token function\">VirtualFree</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>MEM_FREE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>可以看到：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kd&gt; !vtop 0aac01e0 0x3c0000</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>X86VtoP: Virt 00000000003c0000, pagedir 000000000aac01e0</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>X86VtoP: PAE PDPE 000000000aac01e0 - 000000004e48a801</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>X86VtoP: PAE PDE 000000004e48a008 - 000000004e723867</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>X86VtoP: PAE PTE 000000004e723e00 - 800000004ea37867</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>X86VtoP: PAE Mapped phys 000000004ea37000</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>Virtual address 3c0000 translates to physical address 4ea37000.</pre></td></tr></table></figure><p>可以看到挂上物理页了。也就是说，就算使用 MEM_COMMIT 参数，如果不用的话，物理页也不会给你的。</p>\n<h1 id=\"堆与栈\"><a class=\"anchor\" href=\"#堆与栈\">#</a> 堆与栈</h1>\n<p>一个由 C/C++ 编译的程序占用的内存分为以下几个部分</p>\n<ol>\n<li>栈区（stack）: 由编译器自动分配释放 ，存放函数的参数值，局部变量的值等。其操作方式类似于数据结构中的栈</li>\n<li>堆区（heap）: 一般由程序员分配释放， 若程序员不释放，程序结束时可能由 OS 回收 。注意它与数据结构中的堆是两回事，分配方式倒是类似于链表。</li>\n<li>全局区（静态区）（static）: 全局变量和静态变量的存储是放在一块的，初始化的全局变量和静态变量在一块区域， 未初始化的全局变量和未初始化的静态变量在相邻的另一块区域。  程序结束后有系统释放</li>\n<li>文字常量区：常量字符串就是放在这里的。 程序结束后由系统释放</li>\n<li>程序代码区：存放函数体的二进制代码。</li>\n</ol>\n<h2 id=\"堆内存与-malloc-分析\"><a class=\"anchor\" href=\"#堆内存与-malloc-分析\">#</a> 堆内存与 malloc 分析</h2>\n<p>在 c 程序中我们经常用 malloc 来 “申请内存”。<br />\n但它不是真正申请内存，它的底层实现是  <code>HeapAlloc</code>  ，就是申请堆内存，而这堆内存是进程创建好后操作系统就分配好了的。<br />\n我们来做个实验验证一下：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;Windows.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tLPVOID p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    p <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"p: 0x%X\\n\"</span><span class=\"token punctuation\">,</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在没执行 malloc 前看一下进程的内存结构：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kd&gt; !vad 0x8a0fdfc0</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>VAD   Level     Start       End Commit</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>8a1ce638  1        10        10      1 Private      READWRITE          </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>8a056258  2        20        20      1 Private      READWRITE          </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>8a0fdfc0  0        30       12f      4 Private      READWRITE          </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>8a074aa0  3       130       132      0 Mapped       READONLY           Pagefile section, shared commit 0x3</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>89d0eb38  2       140       23f      9 Private      READWRITE          </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>89e05778  4       240       24f      6 Private      READWRITE          </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>8a0dfa00  3       250       25f      0 Mapped       READWRITE          Pagefile section, shared commit 0x3</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>89ace2a8  5       260       275      0 Mapped       READONLY           \\WINDOWS\\system32\\unicode.nls</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>8a09a2e8  4       280       2c0      0 Mapped       READONLY           \\WINDOWS\\system32\\locale.nls</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>8a112a20  6       2d0       310      0 Mapped       READONLY           \\WINDOWS\\system32\\sortkey.nls</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>89ad4380  5       320       325      0 Mapped       READONLY           \\WINDOWS\\system32\\sorttbls.nls</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>89d1bcb8  7       330       370      0 Mapped       READONLY           Pagefile section, shared commit 0x41</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>8a09be68  6       380       38f      3 Private      READWRITE          </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>8a167bd0  7       390       392      0 Mapped       READONLY           \\WINDOWS\\system32\\ctype.nls</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>89d91d08  8       3a0       3ad      0 Mapped       READWRITE          Pagefile section, shared commit 0xe</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>8a04df30  9       3b0       3b0      1 Private      READWRITE          </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>89ac7148  1       400       42d      7 Mapped  Exe  EXECUTE_WRITECOPY  \\Documents and Settings\\Administrator\\My Documents\\TestHeapAndStack\\Debug\\TestHeapAndStack.exe</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>8a1f8b78  4     76d70     76d91      2 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\apphelp.dll</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>89ad66a8  5     77bd0     77bd7      2 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\version.dll</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>8a19ad48  6     77da0     77e48      6 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\advapi32.dll</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>8a16f5b8  7     77e50     77ee2      2 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\rpcrt4.dll</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>89ad5388  8     77fc0     77fd0      2 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\secur32.dll</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>89dbbc00  3     7c800     7c91d      6 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\kernel32.dll</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>89d11fd8  2     7c920     7c9b2      5 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\ntdll.dll</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>89ad1d20  4     7f6f0     7f7ef      0 Mapped       EXECUTE_READ       Pagefile section, shared commit 0x7</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>8a175400  3     7ffa0     7ffd2      0 Mapped       READONLY           Pagefile section, shared commit 0x33</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>8a0a5dc8  4     7ffdd     7ffdd      1 Private      READWRITE          </pre></td></tr><tr><td data-num=\"30\"></td><td><pre>89d18918  5     7ffdf     7ffdf      1 Private      READWRITE</pre></td></tr></table></figure><p>执行 malloc 后，程序打印出的地址为： <code>p: 003807A8</code> ，此时再看内存结构：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kd&gt; !vad 0x8a0fdfc0</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>VAD   Level     Start       End Commit</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>8a1ce638  1        10        10      1 Private      READWRITE          </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>8a056258  2        20        20      1 Private      READWRITE          </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>8a0fdfc0  0        30       12f      4 Private      READWRITE          </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>8a074aa0  3       130       132      0 Mapped       READONLY           Pagefile section, shared commit 0x3</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>89d0eb38  2       140       23f      9 Private      READWRITE          </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>89e05778  4       240       24f      6 Private      READWRITE          </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>8a0dfa00  3       250       25f      0 Mapped       READWRITE          Pagefile section, shared commit 0x3</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>89ace2a8  5       260       275      0 Mapped       READONLY           \\WINDOWS\\system32\\unicode.nls</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>8a09a2e8  4       280       2c0      0 Mapped       READONLY           \\WINDOWS\\system32\\locale.nls</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>8a112a20  6       2d0       310      0 Mapped       READONLY           \\WINDOWS\\system32\\sortkey.nls</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>89ad4380  5       320       325      0 Mapped       READONLY           \\WINDOWS\\system32\\sorttbls.nls</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>89d1bcb8  7       330       370      0 Mapped       READONLY           Pagefile section, shared commit 0x41</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>8a09be68  6       380       38f      5 Private      READWRITE          </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>8a167bd0  7       390       392      0 Mapped       READONLY           \\WINDOWS\\system32\\ctype.nls</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>89d91d08  8       3a0       3ad      0 Mapped       READWRITE          Pagefile section, shared commit 0xe</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>8a04df30  9       3b0       3b0      1 Private      READWRITE          </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>89ac7148  1       400       42d      7 Mapped  Exe  EXECUTE_WRITECOPY  \\Documents and Settings\\Administrator\\My Documents\\TestHeapAndStack\\Debug\\TestHeapAndStack.exe</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>8a1f8b78  4     76d70     76d91      2 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\apphelp.dll</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>89ad66a8  5     77bd0     77bd7      2 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\version.dll</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>8a19ad48  6     77da0     77e48      6 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\advapi32.dll</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>8a16f5b8  7     77e50     77ee2      2 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\rpcrt4.dll</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>89ad5388  8     77fc0     77fd0      2 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\secur32.dll</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>89dbbc00  3     7c800     7c91d      6 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\kernel32.dll</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>89d11fd8  2     7c920     7c9b2      5 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\ntdll.dll</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>89ad1d20  4     7f6f0     7f7ef      0 Mapped       EXECUTE_READ       Pagefile section, shared commit 0x7</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>8a175400  3     7ffa0     7ffd2      0 Mapped       READONLY           Pagefile section, shared commit 0x33</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>8a0a5dc8  4     7ffdd     7ffdd      1 Private      READWRITE          </pre></td></tr><tr><td data-num=\"30\"></td><td><pre>89d18918  5     7ffdf     7ffdf      1 Private      READWRITE</pre></td></tr></table></figure><p><code>8a09be68  6       380       38f      5 Private      READWRITE </code>  这个线性地址早已存在。<br />\n所以 malloc 就是从已经分配好的线性地址也就是堆内存中取出地址来用。</p>\n<h2 id=\"栈内存与全局变量区的内存\"><a class=\"anchor\" href=\"#栈内存与全局变量区的内存\">#</a> 栈内存与全局变量区的内存</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;Windows.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> x<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">int</span> y <span class=\"token operator\">=</span> <span class=\"token number\">0x12345678</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"x:%x y:%x \\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在运行前 (可以下断点) 查看进程的内存结构：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>VAD   Level     Start       End Commit</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>8a108ef0  1        10        10      1 Private      READWRITE</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>89d0f8e8  2        20        20      1 Private      READWRITE</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>8a1d4360  0        30       12f      4 Private      READWRITE</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>89d1ef10  3       130       132      0 Mapped       READONLY           Pagefile section, shared commit 0x3</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>89e01950  2       140       23f      8 Private      READWRITE          </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>8a056258  4       240       24f      6 Private      READWRITE          </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>8a19ef10  3       250       25f      0 Mapped       READWRITE          Pagefile section, shared commit 0x3</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>8a16f160  5       260       275      0 Mapped       READONLY           \\WINDOWS\\system32\\unicode.nls</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>89d19408  4       280       2c0      0 Mapped       READONLY           \\WINDOWS\\system32\\locale.nls</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>89dabd28  6       2d0       310      0 Mapped       READONLY           \\WINDOWS\\system32\\sortkey.nls</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>89ad47b8  5       320       325      0 Mapped       READONLY           \\WINDOWS\\system32\\sorttbls.nls</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>8a12e820  7       330       370      0 Mapped       READONLY           Pagefile section, shared commit 0x41</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>89d79bc8  6       380       38f      3 Private      READWRITE          </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>8a062d58  7       390       392      0 Mapped       READONLY           \\WINDOWS\\system32\\ctype.nls</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>89d9a2a8  8       3a0       3ad      0 Mapped       READWRITE          Pagefile section, shared commit 0xe</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>89d0eb38  9       3b0       3b0      1 Private      READWRITE          </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>8a0348b8  1       400       42e      8 Mapped  Exe  EXECUTE_WRITECOPY  \\Documents and Settings\\Administrator\\My Documents\\TestHeapAndStack\\Debug\\TestHeapAndStack.exe</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>8a065420  4     76d70     76d91      2 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\apphelp.dll</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>89d1ad68  5     77bd0     77bd7      2 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\version.dll</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>8a034a78  6     77da0     77e48      6 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\advapi32.dll</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>89d03940  7     77e50     77ee2      2 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\rpcrt4.dll</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>89dbc488  8     77fc0     77fd0      2 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\secur32.dll</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>89cf8798  3     7c800     7c91d      6 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\kernel32.dll</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>8a0348e8  2     7c920     7c9b2      5 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\ntdll.dll</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>89cf87c8  4     7f6f0     7f7ef      0 Mapped       EXECUTE_READ       Pagefile section, shared commit 0x7</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>89ad22e8  3     7ffa0     7ffd2      0 Mapped       READONLY           Pagefile section, shared commit 0x33</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>8a072a00  4     7ffdb     7ffdb      1 Private      READWRITE          </pre></td></tr><tr><td data-num=\"29\"></td><td><pre>89da64c0  5     7ffdf     7ffdf      1 Private      READWRITE</pre></td></tr></table></figure><p>运行后打印信息如下： <code>x:0042AC50 y:0012FF7C</code>  其内存结构如下：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>8a108ef0  1        10        10      1 Private      READWRITE</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>89d0f8e8  2        20        20      1 Private      READWRITE</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>8a1d4360  0        30       12f      4 Private      READWRITE</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>89d1ef10  3       130       132      0 Mapped       READONLY           Pagefile section, shared commit 0x3</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>89e01950  2       140       23f      8 Private      READWRITE          </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>8a056258  4       240       24f      6 Private      READWRITE          </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>8a19ef10  3       250       25f      0 Mapped       READWRITE          Pagefile section, shared commit 0x3</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>8a16f160  5       260       275      0 Mapped       READONLY           \\WINDOWS\\system32\\unicode.nls</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>89d19408  4       280       2c0      0 Mapped       READONLY           \\WINDOWS\\system32\\locale.nls</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>89dabd28  6       2d0       310      0 Mapped       READONLY           \\WINDOWS\\system32\\sortkey.nls</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>89ad47b8  5       320       325      0 Mapped       READONLY           \\WINDOWS\\system32\\sorttbls.nls</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>8a12e820  7       330       370      0 Mapped       READONLY           Pagefile section, shared commit 0x41</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>89d79bc8  6       380       38f      5 Private      READWRITE          </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>8a062d58  7       390       392      0 Mapped       READONLY           \\WINDOWS\\system32\\ctype.nls</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>89d9a2a8  8       3a0       3ad      0 Mapped       READWRITE          Pagefile section, shared commit 0xe</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>89d0eb38  9       3b0       3b0      1 Private      READWRITE          </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>8a0348b8  1       400       42e      8 Mapped  Exe  EXECUTE_WRITECOPY  \\Documents and Settings\\Administrator\\My Documents\\TestHeapAndStack\\Debug\\TestHeapAndStack.exe</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>8a065420  4     76d70     76d91      2 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\apphelp.dll</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>89d1ad68  5     77bd0     77bd7      2 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\version.dll</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>8a034a78  6     77da0     77e48      6 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\advapi32.dll</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>89d03940  7     77e50     77ee2      2 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\rpcrt4.dll</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>89dbc488  8     77fc0     77fd0      2 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\secur32.dll</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>89cf8798  3     7c800     7c91d      6 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\kernel32.dll</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>8a0348e8  2     7c920     7c9b2      5 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\ntdll.dll</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>89cf87c8  4     7f6f0     7f7ef      0 Mapped       EXECUTE_READ       Pagefile section, shared commit 0x7</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>89ad22e8  3     7ffa0     7ffd2      0 Mapped       READONLY           Pagefile section, shared commit 0x33</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>8a072a00  4     7ffdb     7ffdb      1 Private      READWRITE          </pre></td></tr><tr><td data-num=\"28\"></td><td><pre>89da64c0  5     7ffdf     7ffdf      1 Private      READWRITE</pre></td></tr></table></figure><p>可以发现这两处内存地址也是提前申请好的。</p>\n<p>至此结束。</p>\n",
            "tags": [
                "VirtualAlloc",
                "MEM_COMMIT与MEM_RESERVE",
                "malloc",
                "堆内存",
                "栈内存",
                "全局区内存"
            ]
        },
        {
            "id": "https://or0kit.github.io/Bin/Core/WindowsXp/MemoryManagement/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86-01%E7%BA%BF%E6%80%A7%E5%9C%B0%E5%9D%80%E7%9A%84%E7%AE%A1%E7%90%86/",
            "url": "https://or0kit.github.io/Bin/Core/WindowsXp/MemoryManagement/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86-01%E7%BA%BF%E6%80%A7%E5%9C%B0%E5%9D%80%E7%9A%84%E7%AE%A1%E7%90%86/",
            "title": "内存管理-01线性地址的管理",
            "date_published": "2022-04-14T07:16:52.000Z",
            "content_html": "<h1 id=\"楔子\"><a class=\"anchor\" href=\"#楔子\">#</a> 楔子</h1>\n<p>Windows 的内存管理是非常复杂的，目前仅学习其线性地址、私有内存、映射内存、物理内存是如何管理的。</p>\n<h1 id=\"线性地址的管理\"><a class=\"anchor\" href=\"#线性地址的管理\">#</a> 线性地址的管理</h1>\n<p>进程空间地址的划分：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">分区</th>\n<th style=\"text-align:left\">x86 32 位 Windows</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">空指针赋值区</td>\n<td style=\"text-align:left\">0x00000000 - 0x0000FFFF</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">用户模式区</td>\n<td style=\"text-align:left\">0x00010000 - 0x7FFEFFFF</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">64KB 禁入区</td>\n<td style=\"text-align:left\">0x7FFF0000 - 0x7FFFFFFF</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">内核</td>\n<td style=\"text-align:left\">0x80000000 - 0xFFFFFFFF</td>\n</tr>\n</tbody>\n</table>\n<p>进程虽然名义上有 4G 的虚拟内存空间，但只有低 2G 才是属于自己的，高 2G 是共享的内核空间。</p>\n<p>学过之前的知识，上面那些不能访问的地址，只要挂上一个物理页，我们也是可以访问的。</p>\n<p>但是在应用层我们必须得知道哪些地址可以访问哪些地址不能访问，以及哪些地址已经申请了线性地址，所以这就需要记录了。<br />\n记录哪些线性地址分配了，那些线性地址没有分配，无论是内核空间还是用户空间都需要记录。</p>\n<p>下图是 Windows 20003 SP1 的内核空间内存结构图：</p>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<p>详细的内容在《Windows 内核原理与实现》一书中有。</p>\n<p>下面学习用户空间是如何记录的。</p>\n<p>当你在一个进程空间中申请内存的时候，系统会查哪一个线性地址没有被占用。</p>\n<p>那么 Windows 是查询什么呢？学过数据结构的都知道，树的查询效率是要比链表高的，所以 Windows 在用户空间设计了一个二叉树，这上面记录着进程中线性地址的使用情况。</p>\n<p>而这个二叉树结构在进程结构体  <code>EPROCESS</code>  上:</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>EPROCESS</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t...</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t+0x11c VadRoot</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t...</pre></td></tr></table></figure><p>结构体说明：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kd&gt; dt _MMVAD</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>nt!_MMVAD</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   +0x000 StartingVpn      : Uint4B        &#x2F;&#x2F; 线性地址开始位置 (页为单位)</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   +0x004 EndingVpn        : Uint4B        &#x2F;&#x2F; 线性地址结束位置 (页为单位)</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   +0x008 Parent           : Ptr32 _MMVAD  &#x2F;&#x2F; 父节点</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   +0x00c LeftChild        : Ptr32 _MMVAD  &#x2F;&#x2F; 左子树</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   +0x010 RightChild       : Ptr32 _MMVAD  &#x2F;&#x2F; 右子树</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   +0x014 u                : __unnamed</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   +0x018 ControlArea      : Ptr32 _CONTROL_AREA</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   +0x01c FirstPrototypePte : Ptr32 _MMPTE</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   +0x020 LastContiguousPte : Ptr32 _MMPTE</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   +0x024 u2               : __unnamed</pre></td></tr></table></figure><p>Windows XP 的源码中的定义为：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_MMVAD</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    ULONG_PTR StartingVpn<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    ULONG_PTR EndingVpn<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_MMVAD</span> <span class=\"token operator\">*</span>Parent<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_MMVAD</span> <span class=\"token operator\">*</span>LeftChild<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_MMVAD</span> <span class=\"token operator\">*</span>RightChild<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">union</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        ULONG_PTR LongFlags<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        MMVAD_FLAGS VadFlags<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> u<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    PCONTROL_AREA ControlArea<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    PMMPTE FirstPrototypePte<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    PMMPTE LastContiguousPte<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">union</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        ULONG LongFlags2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        MMVAD_FLAGS2 VadFlags2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> u2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span> MMVAD<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>PMMVAD<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"实验验证\"><a class=\"anchor\" href=\"#实验验证\">#</a> 实验验证</h2>\n<p>在虚拟机中我打开了 DbgView.exe 进程，接下来查看其  <code>EPROCESS</code>  结构体，看看其  <code>+0x11c</code>  的位置:</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kd&gt; !process 0 0</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>**** NT ACTIVE PROCESS DUMP ****</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>……</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>……</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Failed to get VadRoot</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>PROCESS 89e21830  SessionId: 0  Cid: 0758    Peb: 7ffdd000  ParentCid: 043c</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    DirBase: 0aac01a0  ObjectTable: e3365a28  HandleCount:  56.</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    Image: Dbgview.exe</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>kd&gt; dt _EPROCESS 89e21830</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>nt!_EPROCESS</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  ……</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  ……</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   +0x11c VadRoot          : 0x8a173990 Void</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   +0x120 VadHint          : 0x89d23eb0 Void</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   +0x124 CloneRoot        : (null) </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   +0x128 NumberOfPrivatePages : 0xbb</pre></td></tr></table></figure><p>查看  <code>VadRoot</code>  的结构：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kd&gt; dt _MMVAD 0x8a173990</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>nt!_MMVAD</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   +0x000 StartingVpn      : 0x9e0</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   +0x004 EndingVpn        : 0xadf</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   +0x008 Parent           : (null) </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   +0x00c LeftChild        : 0x89dac868 _MMVAD</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   +0x010 RightChild       : 0x89d23eb0 _MMVAD</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   +0x014 u                : __unnamed</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   +0x018 ControlArea      : 0x0a080004 _CONTROL_AREA</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   +0x01c FirstPrototypePte : 0x7266744e _MMPTE</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   +0x020 LastContiguousPte : 0x89cf0f28 _MMPTE</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   +0x024 u2               : __unnamed</pre></td></tr></table></figure><p>我们遍历其右分支：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kd&gt; dt 0x89d23eb0 _MMVAD</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>nt!_MMVAD</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   +0x000 StartingVpn      : 0x7c800</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   +0x004 EndingVpn        : 0x7c91d</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   +0x008 Parent           : 0x8a173990 _MMVAD</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   +0x00c LeftChild        : 0x89d12ae8 _MMVAD</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   +0x010 RightChild       : 0x8a164b48 _MMVAD</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   +0x014 u                : __unnamed</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   +0x018 ControlArea      : 0x8a076430 _CONTROL_AREA</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   +0x01c FirstPrototypePte : 0xe158d6e0 _MMPTE</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   +0x020 LastContiguousPte : 0xfffffffc _MMPTE</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   +0x024 u2               : __unnamed</pre></td></tr></table></figure><p>我们可以看到从  <code>0x7c800</code>  到  <code>0x7c91d</code>  (以页为单位) 都是被占用的，那么我们如何查看是被谁占用的呢？</p>\n<h3 id=\"查看是谁占用的内存\"><a class=\"anchor\" href=\"#查看是谁占用的内存\">#</a> 查看是谁占用的内存</h3>\n<p>注意  <code>MMVAD</code>  中的  <code>   +0x018 ControlArea      : 0x8a076430 _CONTROL_AREA</code></p>\n<p>我们在 Windbg 中查看：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kd&gt; dt _CONTROL_AREA 0x8a076430</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>nt!_CONTROL_AREA</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   +0x000 Segment          : 0xe158d6a0 _SEGMENT</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   +0x004 DereferenceList  : _LIST_ENTRY [ 0x0 - 0x0 ]</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   +0x00c NumberOfSectionReferences : 1</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   +0x010 NumberOfPfnReferences : 0xa6</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   +0x014 NumberOfMappedViews : 0x15</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   +0x018 NumberOfSubsections : 5</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   +0x01a FlushInProgressCount : 0</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   +0x01c NumberOfUserReferences : 0x16</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   +0x020 u                : __unnamed</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   +0x024 FilePointer      : 0x8a0763b8 _FILE_OBJECT</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   +0x028 WaitingForDeletion : (null) </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   +0x02c ModifiedWriteCount : 0</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   +0x02e NumberOfSystemCacheViews : 0</pre></td></tr></table></figure><p>观察到其  <code>+0x024 FilePointer      : 0x8a0763b8 _FILE_OBJECT</code></p>\n<p>接着查看：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kd&gt; dt _FILE_OBJECT 0x8a0763b8</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>nt!_FILE_OBJECT</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   +0x000 Type             : 0n5</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   +0x002 Size             : 0n112</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   +0x004 DeviceObject     : 0x89d68030 _DEVICE_OBJECT</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   +0x008 Vpb              : 0x8a0cb298 _VPB</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   +0x00c FsContext        : 0xe15415c8 Void</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   +0x010 FsContext2       : 0xe1541720 Void</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   +0x014 SectionObjectPointer : 0x8a076314 _SECTION_OBJECT_POINTERS</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   +0x018 PrivateCacheMap  : (null) </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   +0x01c FinalStatus      : 0n0</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   +0x020 RelatedFileObject : 0x8a198770 _FILE_OBJECT</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   +0x024 LockOperation    : 0 &#39;&#39;</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   +0x025 DeletePending    : 0 &#39;&#39;</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   +0x026 ReadAccess       : 0x1 &#39;&#39;</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   +0x027 WriteAccess      : 0 &#39;&#39;</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   +0x028 DeleteAccess     : 0 &#39;&#39;</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   +0x029 SharedRead       : 0x1 &#39;&#39;</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   +0x02a SharedWrite      : 0 &#39;&#39;</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>   +0x02b SharedDelete     : 0x1 &#39;&#39;</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>   +0x02c Flags            : 0x44042</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>   +0x030 FileName         : _UNICODE_STRING &quot;\\WINDOWS\\system32\\kernel32.dll&quot;</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>   +0x038 CurrentByteOffset : _LARGE_INTEGER 0x0</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>   +0x040 Waiters          : 0</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>   +0x044 Busy             : 0</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>   +0x048 LastLock         : (null) </pre></td></tr><tr><td data-num=\"27\"></td><td><pre>   +0x04c Lock             : _KEVENT</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>   +0x05c Event            : _KEVENT</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>   +0x06c CompletionContext : (null)</pre></td></tr></table></figure><p>可以发现是  <code>+0x030 FileName         : _UNICODE_STRING &quot;\\WINDOWS\\system32\\kernel32.dll&quot;</code> 。</p>\n<p>如果  <code>_CONTROL_AREA</code>  指向的地址是空的，那么线性地址被真正的物理页占用着。<br />\n既所有的内存都可以分为两类，一类是 VirtualAllocate 申请的私有内存，一类是映射的内存。</p>\n<h3 id=\"遍历进程的内存结构\"><a class=\"anchor\" href=\"#遍历进程的内存结构\">#</a> 遍历进程的内存结构</h3>\n<p>这个时候我们已经可以遍历进程的整个内存结构了，但是一个一个手动遍历非常麻烦，所以 Windows 提供了  <code>!vad</code>  命令：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kd&gt; !vad 0x8a173990</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>VAD   Level     Start       End Commit</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>8a180608  3        10        10      1 Private      READWRITE          </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>8a03c0a8  4        20        20      1 Private      READWRITE          </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>89cf1438  2        30       12f      6 Private      READWRITE          </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>8a15c740  4       130       132      0 Mapped       READONLY           Pagefile section, shared commit 0x3</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>89d06a70  3       140       141      0 Mapped       READONLY           Pagefile section, shared commit 0x2</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>89d27138  5       150       24f     21 Private      READWRITE          </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>8a0e5cd8  4       250       25f      6 Private      READWRITE          </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>8a15eb50  6       260       26f      0 Mapped       READWRITE          Pagefile section, shared commit 0x3</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>8a1314d8  5       270       285      0 Mapped       READONLY           \\WINDOWS\\system32\\unicode.nls</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>8a1d19c8  7       290       2d0      0 Mapped       READONLY           \\WINDOWS\\system32\\locale.nls</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>8a1c0890  6       2e0       320      0 Mapped       READONLY           \\WINDOWS\\system32\\sortkey.nls</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>89d12b78  8       330       335      0 Mapped       READONLY           \\WINDOWS\\system32\\sorttbls.nls</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>89db5160  7       340       380      0 Mapped       READONLY           Pagefile section, shared commit 0x41</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>8a170c98  8       390       39f      4 Private      READWRITE          </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>8a0fdb70  9       3a0       3a2      0 Mapped       READONLY           \\WINDOWS\\system32\\ctype.nls</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>89cf23c8 10       3b0       3bf      8 Private      READWRITE          </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>8a02d2f0 11       3c0       3c0      1 Private      READWRITE          </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>89dac8a8 12       3d0       3d0      1 Private      READWRITE          </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>8a1c0830 14       3e0       3e1      0 Mapped       READONLY           Pagefile section, shared commit 0x2</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>8a16b8d0 13       3f0       3f1      0 Mapped       READONLY           Pagefile section, shared commit 0x2</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>89dac868  1       400       486     25 Mapped  Exe  EXECUTE_WRITECOPY  \\Documents and Settings\\Administrator\\ 桌面 \\Dbgview.exe</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>89da6cb8  3       490       557      0 Mapped       EXECUTE_READ       Pagefile section, shared commit 0x8</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>8a04e768  2       560       662      0 Mapped       READONLY           Pagefile section, shared commit 0x103</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>8a15c658  4       670       96f      0 Mapped       EXECUTE_READ       Pagefile section, shared commit 0x2b</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>8a110a50  5       970       97f      6 Private      READWRITE          </pre></td></tr><tr><td data-num=\"28\"></td><td><pre>8a0e2a58  3       980       980      0 Mapped       READWRITE          Pagefile section, shared commit 0x1</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>8a02f590  5       990       9cf      0 Mapped       READWRITE          Pagefile section, shared commit 0x10</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>8a02f528  4       9d0       9dd      0 Mapped       READWRITE          Pagefile section, shared commit 0xe</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>8a173990  0       9e0       adf    106 Private      READWRITE          </pre></td></tr><tr><td data-num=\"32\"></td><td><pre>89d0d8d0  5       ae0       ae0      1 Private      READWRITE          </pre></td></tr><tr><td data-num=\"33\"></td><td><pre>89d0de90  7       af0       af0      0 Private Phys READWRITE          </pre></td></tr><tr><td data-num=\"34\"></td><td><pre>8a02f5f8  6       b00       b00      0 Mapped       READWRITE          Pagefile section, shared commit 0x1</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>89d912a8  7       b10       b13      0 Mapped       READWRITE          Pagefile section, shared commit 0x4</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>89cf14f0  4       b30       baf      1 Private      READWRITE          </pre></td></tr><tr><td data-num=\"37\"></td><td><pre>8a10fa30  7       bb0       caf      2 Private      READWRITE          </pre></td></tr><tr><td data-num=\"38\"></td><td><pre>89da4e90  6       cc0       cc7      8 Private      READWRITE          </pre></td></tr><tr><td data-num=\"39\"></td><td><pre>8a0df250  7       cd0       d4f      0 Mapped       READWRITE          Pagefile section, shared commit 0x6</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>89da6b20  5     5adc0     5adf6      2 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\uxtheme.dll</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>89e1c140  3     62c20     62c28      2 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\lpk.dll</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>89d12ae8  2     71a10     71a17      2 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\ws2help.dll</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>89e055d0  3     71a20     71a36      2 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\ws2_32.dll</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>89dbbb80  6     71a90     71aa1      2 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\mpr.dll</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>8a039b30 11     73640     7366d      2 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\MSCTFIME.IME</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>8a04c6e0 10     73fa0     7400a     17 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\usp10.dll</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>89d27178 11     74680     746cb      3 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\MSCTF.dll</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>8a12bb30  9     76300     7631c      2 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\imm32.dll</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>89da6c88  8     76320     76366      5 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\comdlg32.dll</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>8a039ac8  9     76990     76acd      8 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\ole32.dll</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>8a106bf8  7     77180     77282      2 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\WinSxS\\x86_Microsoft.Windows.Common-Controls_6595b64144ccf1df_6.0.2600.6028_x-ww_61e65202\\comctl32.dll</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>8a1314a8  5     77be0     77c37      8 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\msvcrt.dll</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>8a0df9b0  6     77d10     77d9f      3 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\user32.dll</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>8a1368c8  4     77da0     77e48      6 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\advapi32.dll</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>89db5190  5     77e50     77ee2      2 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\rpcrt4.dll</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>8a164a88  7     77ef0     77f39      3 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\gdi32.dll</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>89da6c58  8     77f40     77fb5      2 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\shlwapi.dll</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>89da7650  6     77fc0     77fd0      2 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\secur32.dll</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>89d23eb0  1     7c800     7c91d      6 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\kernel32.dll</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>8a164b48  2     7c920     7c9b2      5 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\ntdll.dll</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>89da6d50  5     7d590     7dd83     31 Mapped  Exe  EXECUTE_WRITECOPY  \\WINDOWS\\system32\\shell32.dll</pre></td></tr><tr><td data-num=\"62\"></td><td><pre>8a1c0860  4     7f6f0     7f7ef      0 Mapped       EXECUTE_READ       Pagefile section, shared commit 0x7</pre></td></tr><tr><td data-num=\"63\"></td><td><pre>8a164ab8  3     7ffa0     7ffd2      0 Mapped       READONLY           Pagefile section, shared commit 0x33</pre></td></tr><tr><td data-num=\"64\"></td><td><pre>8a02eae0  4     7ffdd     7ffdd      1 Private      READWRITE          </pre></td></tr><tr><td data-num=\"65\"></td><td><pre>8a128ab0  6     7ffde     7ffde      1 Private      READWRITE          </pre></td></tr><tr><td data-num=\"66\"></td><td><pre>89dd5830  5     7ffdf     7ffdf      1 Private      READWRITE          </pre></td></tr><tr><td data-num=\"67\"></td><td><pre></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>Total VADs: 64, average level: 6, maximum depth: 14</pre></td></tr><tr><td data-num=\"69\"></td><td><pre>Total private commit: 0x13e pages (1272 KB)</pre></td></tr><tr><td data-num=\"70\"></td><td><pre>Total shared commit:  0x1e7 pages (1948 KB)</pre></td></tr></table></figure><p>这个时候进程所有的内存使用情况都显现出来了。</p>\n<p>这个可以用于对抗模块隐藏，就算在三环断掉了那几条链也没用，在这里仍然可以看得到，如果把这里也抹去了，操作系统分配线性地址的时候可能会出现错误，在已经被占用地址上有分配了。</p>\n<h3 id=\"内存属性\"><a class=\"anchor\" href=\"#内存属性\">#</a> 内存属性</h3>\n<p>在前面的 MMVAD 中的  <code>+0x014 u                : __unnamed</code>  ， 其实它是一个联合体：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">union</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        ULONG_PTR LongFlags<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        MMVAD_FLAGS VadFlags<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span> u<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>在 Windbg 中查看；</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kd&gt; dt _MMVAD_FLAGS</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>nt!_MMVAD_FLAGS</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   +0x000 CommitCharge     : Pos 0, 19 Bits</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   +0x000 PhysicalMapping  : Pos 19, 1 Bit</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   +0x000 ImageMap         : Pos 20, 1 Bit</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   +0x000 UserPhysicalPages : Pos 21, 1 Bit</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   +0x000 NoChange         : Pos 22, 1 Bit</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   +0x000 WriteWatch       : Pos 23, 1 Bit</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   +0x000 Protection       : Pos 24, 5 Bits</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   +0x000 LargePages       : Pos 29, 1 Bit</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   +0x000 MemCommit        : Pos 30, 1 Bit</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   +0x000 PrivateMemory    : Pos 31, 1 Bit</pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>kd&gt; dt _MMVAD_FLAGS 0x8a173990+0x14</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>nt!_MMVAD_FLAGS</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   +0x000 CommitCharge     : 0y0000000000001101010 (0x6a)</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   +0x000 PhysicalMapping  : 0y0</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   +0x000 ImageMap         : 0y0</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>   +0x000 UserPhysicalPages : 0y0</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>   +0x000 NoChange         : 0y0</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>   +0x000 WriteWatch       : 0y0</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>   +0x000 Protection       : 0y00100 (0x4)</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>   +0x000 LargePages       : 0y0</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>   +0x000 MemCommit        : 0y0</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>   +0x000 PrivateMemory    : 0y1</pre></td></tr></table></figure><p>在 XP 源码中查看：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\"><span class=\"token function\">defined</span> <span class=\"token punctuation\">(</span>_WIN64<span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">COMMIT_SIZE</span> <span class=\"token expression\"><span class=\"token number\">51</span></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">else</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">COMMIT_SIZE</span> <span class=\"token expression\"><span class=\"token number\">19</span></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_MMVAD_FLAGS</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    ULONG_PTR CommitCharge <span class=\"token operator\">:</span> COMMIT_SIZE<span class=\"token punctuation\">;</span> <span class=\"token comment\">//limits system to 4k pages or bigger!</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    ULONG_PTR PhysicalMapping <span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    ULONG_PTR ImageMap <span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    ULONG_PTR UserPhysicalPages <span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    ULONG_PTR NoChange <span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    ULONG_PTR WriteWatch <span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    ULONG_PTR Protection <span class=\"token operator\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    ULONG_PTR LargePages <span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    ULONG_PTR MemCommit<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    ULONG_PTR PrivateMemory <span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">//used to tell VAD from VAD_SHORT</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span> MMVAD_FLAGS<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>认识其重要的几个成员:</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>nt!_MMVAD_FLAGS</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   +0x000 CommitCharge</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   +0x000 PhysicalMapping</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   +0x000 ImageMap        &#x2F;&#x2F; 1 镜像文件  0 其他</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   +0x000 Protection      &#x2F;&#x2F; 保护属性： 1 READONLY  2  EXECUTE  3  EXECUTE _READ  4 READWITER 5 WRITECOPY  6  EXECUTE _READWITER   7 EXECUTE_WRITECOPY  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   +0x000 PrivateMemory \t&#x2F;&#x2F; 标识当前的内存状态 1 PrivateMemory  0 Map</pre></td></tr></table></figure><p>如果想实现模块隐藏这一块是必须要绕过去的。</p>\n",
            "tags": [
                "线性地址的管理",
                "VAD树",
                "_MMVAD",
                "_MMVAD_FLAGS"
            ]
        }
    ]
}