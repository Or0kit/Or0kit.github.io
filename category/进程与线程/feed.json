{
    "version": "https://jsonfeed.org/version/1",
    "title": "Or0kit • All posts by \"进程与线程\" category",
    "description": "临渊羡鱼，不如退而结网",
    "home_page_url": "https://Or0kit.github.io",
    "items": [
        {
            "id": "https://or0kit.github.io/Bin/Core/WindowsXp/Process-Thread/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B-%E5%BB%B6%E8%BF%9F%E8%BF%87%E7%A8%8B%E8%B0%83%E7%94%A8-DPC/",
            "url": "https://or0kit.github.io/Bin/Core/WindowsXp/Process-Thread/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B-%E5%BB%B6%E8%BF%9F%E8%BF%87%E7%A8%8B%E8%B0%83%E7%94%A8-DPC/",
            "title": "进程与线程-延迟过程调用(DPC)",
            "date_published": "2022-02-21T07:30:24.000Z",
            "content_html": "<h1 id=\"楔子\"><a class=\"anchor\" href=\"#楔子\">#</a> 楔子</h1>\n<p>这是中断相关的知识，先了解中断请求级别（IRQL）</p>\n<div class=\"note primary\">\n<p><strong>软件 IRQL (Software IRQL)</strong></p>\n<p>PASSIVE_LEVEL 0 // Passive release level<br />\nLOW_LEVEL 0 // Lowest interrupt level<br />\nAPC_LEVEL 1 // APC interrupt level<br />\nDISPATCH_LEVEL 2 // Dispatch level</p>\n<p><strong>硬件 IRQL (Hardware IRQL)</strong></p>\n<p>DIRQL: from 3 to 26 for device ISR<br />\nPROFILE_LEVEL 27, 0x1B // Timer used for profiling.<br />\nCLOCK1_LEVEL 28, 0x1C // Interval clock 1 level - not used on x86<br />\nCLOCK2_LEVEL 28, 0x1C // Interval clock 2 level<br />\nSYNCH_LEVEL 28, 0x1C // Synchronization level<br />\nIPI_LEVEL 29, 0x1D // Interprocessor interrupt level<br />\nPOWER_LEVEL 30, 0x1E // Power failure level<br />\nHIGH_LEVEL 31, 0x1F // Highest interrupt level</p>\n</div>\n<p>数值越大代表其 IRQL 的优先级越高。</p>\n<h1 id=\"延迟过程调用dpc\"><a class=\"anchor\" href=\"#延迟过程调用dpc\">#</a> 延迟过程调用（DPC）</h1>\n<p>DPC 是 &quot;Deferred Procedure Call&quot; 的缩写。<br />\n简单介绍一下 DPC：DPC 是为了减少处于高  <code>IRQL</code>  的硬件中断处理的时间。<br />\n由于低  <code>IRQL</code>  的硬件中断不能中断高  <code>IRQL</code>  的硬件中断处理。而可能<strong>有些硬件的中断处理代码量比较大，花的时间比较多，会造成其他硬件中断的响应会等的时间比较长</strong>。</p>\n<div class=\"note primary\">\n<p>DPC 运行在  <code>DISPATCH_LEVEL</code>  上，低于任何一个硬件中断的  <code>IRQL</code>  ，所以 DPC 在执行的时候不会屏蔽任何硬件中断，但由于它高于或等于任何软件中断的  <code>IRQL</code>  ，所以它有优于任何线程的执行，也屏蔽了线程调度。可以说，DPC 是介于硬件中断和线程调度之间的一个 <code>IRQL</code> ，他可以打断当前线程的执行，凌驾于线程调度器纸上，但又不屏蔽任何硬件中断。</p>\n</div>\n<h2 id=\"dpc-队列\"><a class=\"anchor\" href=\"#dpc-队列\">#</a> DPC 队列</h2>\n<p>对单 cpu 的系统，整个系统只有一个 DPC 队列，对于多 cpu 系统有可能是一个 cpu 一个，这里我把 xp 虚拟机设置为了多核，查看了其每个核的  <code>KPRCB</code>  中  <code>+0x860 DpcListHead      : _LIST_ENTRY</code>  处的值，都不一样。</p>\n<p>所有的 DPC 都链在这个链上，这个队列是个 LIST_ENTRY 链表。</p>\n<p>链上的每项都是个  <code>KDPC</code>  结构。</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kd&gt; dt _KDPC</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>nt!_KDPC</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   +0x000 Type             : Int2B</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   +0x002 Number           : UChar  &#x2F;&#x2F; 优先级也可以称为紧迫程度分别为 0 1 2</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   +0x003 Importance       : UChar  &#x2F;&#x2F; 指明目标处理器</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   +0x004 DpcListEntry     : _LIST_ENTRY  &#x2F;&#x2F; 当前结构体在 DPC 请求队列中的链表节点</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   +0x00c DeferredRoutine  : Ptr32 void   &#x2F;&#x2F; 指向具体的 DPC 函数</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   +0x010 DeferredContext  : Ptr32 Void   &#x2F;&#x2F; 执行 DPC 函数时的上下文</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   +0x014 SystemArgument1  : Ptr32 Void   &#x2F;&#x2F; 执行 DPC 函数时的参数</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   +0x018 SystemArgument2  : Ptr32 Void</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   +0x01c Lock             : Ptr32 Uint4B &#x2F;&#x2F;DPC 的锁</pre></td></tr></table></figure><p>在 KPRCB 中挂着，等待触发时机。其中的  <code>DeferredRoutine</code>  是必须的，有没有上下文和参数都可以。具体的应该逆向函数。</p>\n<h2 id=\"dpc-的初始化\"><a class=\"anchor\" href=\"#dpc-的初始化\">#</a> DPC 的初始化</h2>\n<p>在 IDA 中查看  <code>KeInitializeDpc</code>  函数:</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>; void __stdcall KeInitializeDpc(PRKDPC Dpc, PKDEFERRED_ROUTINE DeferredRoutine, PVOID DeferredContext)</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>.text:00422EEE                 public _KeInitializeDpc@12</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>.text:00422EEE _KeInitializeDpc@12 proc near           ; CODE XREF: IopInitializeIrpStackProfiler()+29↑p</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>.text:00422EEE                                         ; VdmpDelayInterrupt(x)+26B↓p ...</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>.text:00422EEE</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>.text:00422EEE Dpc             &#x3D; dword ptr  8</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>.text:00422EEE DeferredRoutine &#x3D; dword ptr  0Ch</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>.text:00422EEE DeferredContext &#x3D; dword ptr  10h</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>.text:00422EEE</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>.text:00422EEE                 mov     edi, edi</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>.text:00422EF0                 push    ebp</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>.text:00422EF1                 mov     ebp, esp</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>.text:00422EF3                 mov     eax, [ebp+Dpc]</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>.text:00422EF6                 mov     ecx, [ebp+DeferredRoutine]</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>.text:00422EF9                 and     [eax+_KDPC.Lock], 0</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>.text:00422EFD                 mov     [eax+_KDPC.DeferredRoutine], ecx</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>.text:00422F00                 mov     ecx, [ebp+DeferredContext]</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>.text:00422F03                 mov     [eax+_KDPC.Type], 13h</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>.text:00422F08                 mov     [eax+_KDPC.Number], 0</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>.text:00422F0C                 mov     [eax+_KDPC.Importance], 1</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>.text:00422F10                 mov     [eax+_KDPC.DeferredContext], ecx</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>.text:00422F13                 pop     ebp</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>.text:00422F14                 retn    0Ch</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>.text:00422F14 _KeInitializeDpc@12 endp</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>.text:00422F14</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>.text:00422F14 ; ---------------------------------------------------------------------------</pre></td></tr></table></figure><p>就是填充结构体。</p>\n<p>参考以下代码：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>VOID</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">KeInitializeDpc</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    IN PRKDPC Dpc<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    IN PKDEFERRED_ROUTINE DeferredRoutine<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    IN PVOID DeferredContext</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">/*++</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>Routine Description:</pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    This function initializes a kernel DPC object. The deferred routine</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    and context parameter are stored in the DPC object.</pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>Arguments:</pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    Dpc - Supplies a pointer to a control object of type DPC.</pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    DeferredRoutine - Supplies a pointer to a function that is called when</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        the DPC object is removed from the current processor's DPC queue.</pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    DeferredContext - Supplies a pointer to an arbitrary data structure which is</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        to be passed to the function specified by the DeferredRoutine parameter.</pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>Return Value:</pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    None.</pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>--*/</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token comment\">// Initialize standard control object header.</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    Dpc<span class=\"token operator\">-></span>Type <span class=\"token operator\">=</span> DpcObject<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    Dpc<span class=\"token operator\">-></span>Number <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    Dpc<span class=\"token operator\">-></span>Importance <span class=\"token operator\">=</span> MediumImportance<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token comment\">// Initialize deferred routine address and deferred context parameter.</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    Dpc<span class=\"token operator\">-></span>DeferredRoutine <span class=\"token operator\">=</span> DeferredRoutine<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    Dpc<span class=\"token operator\">-></span>DeferredContext <span class=\"token operator\">=</span> DeferredContext<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    Dpc<span class=\"token operator\">-></span>Lock <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"dpc-队列的插入\"><a class=\"anchor\" href=\"#dpc-队列的插入\">#</a> DPC 队列的插入</h2>\n<p>逆向分析  <code>KeInsertQueueDpc</code>  函数</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>.text:00422F5A ; BOOLEAN __stdcall KeInsertQueueDpc (PRKDPC Dpc, PVOID SystemArgument1, PVOID SystemArgument2)</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>.text:00422F5A                 public _KeInsertQueueDpc@12</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>.text:00422F5A _KeInsertQueueDpc@12 proc near          ; CODE XREF: KeSetTimerEx (x,x,x,x,x)+7F↑p</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>.text:00422F5A                                         ; KiCalibrateTimeAdjustment (x)+52↓p ...</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>.text:00422F5A</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>.text:00422F5A var_8           &#x3D; dword ptr -8</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>.text:00422F5A NewIrql         &#x3D; byte ptr -1</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>.text:00422F5A Dpc             &#x3D; dword ptr  8</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>.text:00422F5A SystemArgument1 &#x3D; dword ptr  0Ch</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>.text:00422F5A SystemArgument2 &#x3D; dword ptr  10h</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>.text:00422F5A</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>.text:00422F5A                 mov     edi, edi</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>.text:00422F5C                 push    ebp</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>.text:00422F5D                 mov     ebp, esp</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>.text:00422F5F                 push    ecx</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>.text:00422F60                 push    ecx</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>.text:00422F61                 push    esi</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>.text:00422F62                 push    edi             ; 保存寄存器环境</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>.text:00422F63                 mov     cl, 1Fh         ; 提升 IRQL 等级。提升到了 31 了，谁也不能打断了</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>.text:00422F65                 call    ds:__imp_@KfRaiseIrql@4 ; KfRaiseIrql (x)</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>.text:00422F6B                 mov     [ebp+NewIrql], al</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>.text:00422F6E                 db      3Eh             ; eax 存储这 KPRCB 的地址</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>.text:00422F6E                 mov     eax, ds:0FFDFF020h</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>.text:00422F74                 mov     edi, [ebp+Dpc]  ; edi 指向 KDPC 结构</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>.text:00422F77                 mov     esi, eax</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>.text:00422F79                 lea     eax, [esi+_KPRCB.DpcLock]</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>.text:00422F7F                 mov     [ebp-8], eax    ; ebp-8 的位置存储着 _KPRCB.DpcLock</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>.text:00422F82                 lea     eax, [edi+_KDPC.Lock]</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>.text:00422F85                 mov     [ebp+8], eax    ; ebp + 8 存储着 _KDPC.Lock</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>.text:00422F88                 mov     eax, 0</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>.text:00422F8D                 mov     ecx, [ebp+8]    ; ecx 存储着 _KDPC.Lock</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>.text:00422F90                 mov     edx, [ebp-8]    ; edx 存储着 _KPRCB.DpcLock</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>.text:00422F93                 cmpxchg [ecx], edx      ; cmpxchg 指令介绍：</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>.text:00422F93                                         ; 将 AL、AX、EAX 或 RAX 寄存器中的值与第一个操作数（目标操作数）进行比较。</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>.text:00422F93                                         ; 如果这两个值相等，则将第二个操作数（源操作数）加载到目标操作数中。</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>.text:00422F93                                         ; 否则，目标操作数将被加载到 AL、AX、EAX 或 RAX 寄存器中。</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>.text:00422F93                                         ;</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>.text:00422F93                                         ; 如果 ecx &#x3D; 0 则 ecx &#x3D; edx</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>.text:00422F93                                         ; 如果 ecx !&#x3D; 0 则 eax &#x3D; edx</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>.text:00422F93                                         ; ----------</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>.text:00422F96                 test    eax, eax        ; 判断 eax 是否为 0</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>.text:00422F98                 mov     [ebp+8], eax</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>.text:00422F9B                 jnz     loc_42302A      ; 如果不等于 0 程序结束。</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>.text:00422F9B                                         ; 所以上面 cmpxchg 指令的目的就是使_KDPC.Lock &#x3D; _KPRCB.DpcLock</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>.text:00422FA1                 inc     [esi+_KPRCB.DpcCount]</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>.text:00422FA7                 add     [esi+_KPRCB.DpcQueueDepth], 1</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>.text:00422FAE                 cmp     [edi+_KDPC.Importance], 2 ; 查看优先级是否是最高级</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>.text:00422FB2                 mov     eax, [ebp+SystemArgument1]</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>.text:00422FB5                 mov     [edi+_KDPC.SystemArgument1], eax ; 填充 KDPC 结构体的参数成员</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>.text:00422FB8                 mov     eax, [ebp+SystemArgument2]</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>.text:00422FBB                 mov     [edi+_KDPC.SystemArgument2], eax</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>.text:00422FBE                 lea     ecx, [esi+_KPRCB.DpcListHead] ; ecx &#x3D; DpcListHead</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>.text:00422FC4                 lea     eax, [edi+_KDPC.DpcListEntry] ; eax &#x3D; 当前结构体在 DPC 请求队列中的链表节点</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>.text:00422FC7                 jnz     short loc_422FD7 ; 如果优先级不是最高则跳转</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>.text:00422FC7                                         ;</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>.text:00422FC7                                         ; 以下是链表操作，加到队头</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>.text:00422FC9                 mov     edx, [ecx+_LIST_ENTRY.Flink] ; edx &#x3D; DpcListHead</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>.text:00422FCB                 mov     [eax+_LIST_ENTRY.Flink], edx ; 把当前节点的前面指向链表的首部</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>.text:00422FCD                 mov     [eax+_LIST_ENTRY.Blink], ecx ; 把当前节点的后一个指向链表首部的前一个</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>.text:00422FD0                 mov     [edx+_LIST_ENTRY.Blink], eax ; edx &#x3D; 当前节点的 后一个_LIST_ENTRY.Blink</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>.text:00422FD3                 mov     [ecx+_LIST_ENTRY.Flink], eax ; 更新_KPRCB.DpcListHead 的值</pre></td></tr><tr><td data-num=\"62\"></td><td><pre>.text:00422FD5                 jmp     short loc_422FE4 ; 判断当前有没有要执行的 DPC</pre></td></tr><tr><td data-num=\"63\"></td><td><pre>.text:00422FD7 ; ---------------------------------------------------------------------------</pre></td></tr><tr><td data-num=\"64\"></td><td><pre>.text:00422FD7</pre></td></tr><tr><td data-num=\"65\"></td><td><pre>.text:00422FD7 loc_422FD7:                             ; CODE XREF: KeInsertQueueDpc (x,x,x)+6D↑j</pre></td></tr><tr><td data-num=\"66\"></td><td><pre>.text:00422FD7                 mov     edx, [ecx+4]    ; 以下是链表操作，加到队尾</pre></td></tr><tr><td data-num=\"67\"></td><td><pre>.text:00422FDA                 mov     [eax], ecx</pre></td></tr><tr><td data-num=\"68\"></td><td><pre>.text:00422FDC                 mov     [eax+4], edx</pre></td></tr><tr><td data-num=\"69\"></td><td><pre>.text:00422FDF                 mov     [edx], eax</pre></td></tr><tr><td data-num=\"70\"></td><td><pre>.text:00422FE1                 mov     [ecx+4], eax</pre></td></tr><tr><td data-num=\"71\"></td><td><pre>.text:00422FE4</pre></td></tr><tr><td data-num=\"72\"></td><td><pre>.text:00422FE4 loc_422FE4:                             ; CODE XREF: KeInsertQueueDpc (x,x,x)+7B↑j</pre></td></tr><tr><td data-num=\"73\"></td><td><pre>.text:00422FE4                 cmp     [esi+_KPRCB.DpcRoutineActive], 0 ; 判断当前有没有要执行的 DPC</pre></td></tr><tr><td data-num=\"74\"></td><td><pre>.text:00422FEB                 jnz     short loc_42302A ; 有的话就退出了，不插入队列</pre></td></tr><tr><td data-num=\"75\"></td><td><pre>.text:00422FED                 cmp     [esi+_KPRCB.DpcInterruptRequested], 0 ; 判断有没有中断的 DPC</pre></td></tr><tr><td data-num=\"76\"></td><td><pre>.text:00422FF4                 jnz     short loc_42302A</pre></td></tr><tr><td data-num=\"77\"></td><td><pre>.text:00422FF6                 cmp     [edi+_KDPC.Importance], 0 ; 查看优先级是否为 0</pre></td></tr><tr><td data-num=\"78\"></td><td><pre>.text:00422FFA                 jnz     short loc_423018 ; 优先级不为 0 则跳转开始触发 DPC</pre></td></tr><tr><td data-num=\"79\"></td><td><pre>.text:00422FFC                 mov     eax, [esi+_KPRCB.DpcQueueDepth]</pre></td></tr><tr><td data-num=\"80\"></td><td><pre>.text:00423002                 cmp     eax, [esi+_KPRCB.MaximumDpcQueueDepth] ; 比较 DPC 队列深度是否小于最大队列深度</pre></td></tr><tr><td data-num=\"81\"></td><td><pre>.text:00423008                 jnb     short loc_423018 ; 如果不小于则跳转</pre></td></tr><tr><td data-num=\"82\"></td><td><pre>.text:0042300A                 mov     eax, [esi+_KPRCB.DpcRequestRate]</pre></td></tr><tr><td data-num=\"83\"></td><td><pre>.text:00423010                 cmp     eax, [esi+_KPRCB.MinimumDpcRate]</pre></td></tr><tr><td data-num=\"84\"></td><td><pre>.text:00423016                 jnb     short loc_42302A ; 如果不小于则直接返回。</pre></td></tr><tr><td data-num=\"85\"></td><td><pre>.text:00423018</pre></td></tr><tr><td data-num=\"86\"></td><td><pre>.text:00423018 loc_423018:                             ; CODE XREF: KeInsertQueueDpc (x,x,x)+A0↑j</pre></td></tr><tr><td data-num=\"87\"></td><td><pre>.text:00423018                                         ; KeInsertQueueDpc (x,x,x)+AE↑j</pre></td></tr><tr><td data-num=\"88\"></td><td><pre>.text:00423018                 mov     cl, 2           ; 设置中断等级为 2</pre></td></tr><tr><td data-num=\"89\"></td><td><pre>.text:0042301A                 mov     [esi+_KPRCB.DpcInterruptRequested], 1</pre></td></tr><tr><td data-num=\"90\"></td><td><pre>.text:00423024                 call    ds:__imp_@HalRequestSoftwareInterrupt@4 ; 请求软件中断</pre></td></tr><tr><td data-num=\"91\"></td><td><pre>.text:0042302A</pre></td></tr><tr><td data-num=\"92\"></td><td><pre>.text:0042302A loc_42302A:                             ; CODE XREF: KeInsertQueueDpc (x,x,x)+41↑j</pre></td></tr><tr><td data-num=\"93\"></td><td><pre>.text:0042302A                                         ; KeInsertQueueDpc (x,x,x)+91↑j ...</pre></td></tr><tr><td data-num=\"94\"></td><td><pre>.text:0042302A                 mov     cl, [ebp+NewIrql] ; 把原来的 IRQL 还原</pre></td></tr><tr><td data-num=\"95\"></td><td><pre>.text:0042302D                 call    ds:__imp_@KfLowerIrql@4 ; KfLowerIrql (x)</pre></td></tr><tr><td data-num=\"96\"></td><td><pre>.text:00423033                 xor     eax, eax</pre></td></tr><tr><td data-num=\"97\"></td><td><pre>.text:00423035                 cmp     [ebp+8], eax</pre></td></tr><tr><td data-num=\"98\"></td><td><pre>.text:00423038                 pop     edi</pre></td></tr><tr><td data-num=\"99\"></td><td><pre>.text:00423039                 setz    al              ; 汇编指令 SETZ (SETE) SETNZ (SETNE)</pre></td></tr><tr><td data-num=\"100\"></td><td><pre>.text:00423039                                         ; 取标志寄存器中 ZF 的值，放到 AL 中。</pre></td></tr><tr><td data-num=\"101\"></td><td><pre>.text:00423039                                         ; SETNE 取得 ZF 值后，取反，再放到 AL 中。</pre></td></tr><tr><td data-num=\"102\"></td><td><pre>.text:0042303C                 pop     esi</pre></td></tr><tr><td data-num=\"103\"></td><td><pre>.text:0042303D                 leave</pre></td></tr><tr><td data-num=\"104\"></td><td><pre>.text:0042303E                 retn    0Ch</pre></td></tr><tr><td data-num=\"105\"></td><td><pre>.text:0042303E _KeInsertQueueDpc@12 endp</pre></td></tr><tr><td data-num=\"106\"></td><td><pre>.text:0042303E</pre></td></tr><tr><td data-num=\"107\"></td><td><pre>.text:0042303E ; ---------------------------------------------------------------------------</pre></td></tr></table></figure><p>参考以下代码：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">ASSERT_DPC</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>E<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>             </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token expression\"><span class=\"token function\">ASSERT</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>E<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>Type <span class=\"token operator\">==</span> DpcObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token expression\"><span class=\"token punctuation\">&#125;</span></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>BOOLEAN</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">KeInsertQueueDpc</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    IN PRKDPC Dpc<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    IN PVOID SystemArgument1<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    IN PVOID SystemArgument2</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">/*++</pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>Routine Description:</pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    This function inserts a DPC object into the DPC queue. If the DPC object</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    is already in the DPC queue, then no operation is performed. Otherwise,</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    the DPC object is inserted in the DPC queue and a dispatch interrupt is</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    requested.</pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>Arguments:</pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    Dpc - Supplies a pointer to a control object of type DPC.</pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    SystemArgument1, SystemArgument2  - Supply a set of two arguments that</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        contain untyped data provided by the executive.</pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>Return Value:</pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    If the DPC object is already in a DPC queue, then a value of FALSE is</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    returned. Otherwise a value of TRUE is returned.</pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>--*/</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    ULONG Index<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    PKSPIN_LOCK Lock<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    KIRQL OldIrql<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    PKPRCB Prcb<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    ULONG Processor<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token function\">ASSERT_DPC</span><span class=\"token punctuation\">(</span>Dpc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token comment\">// Disable interrupts.</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token function\">KeRaiseIrql</span><span class=\"token punctuation\">(</span>HIGH_LEVEL<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>OldIrql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token comment\">// Acquire the DPC queue lock for the specified target processor.</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\"><span class=\"token operator\">!</span><span class=\"token function\">defined</span><span class=\"token punctuation\">(</span>NT_UP<span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Dpc<span class=\"token operator\">-></span>Number <span class=\"token operator\">>=</span> MAXIMUM_PROCESSORS<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        Processor <span class=\"token operator\">=</span> Dpc<span class=\"token operator\">-></span>Number <span class=\"token operator\">-</span> MAXIMUM_PROCESSORS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        Prcb <span class=\"token operator\">=</span> KiProcessorBlock<span class=\"token punctuation\">[</span>Processor<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        Prcb <span class=\"token operator\">=</span> <span class=\"token function\">KeGetCurrentPrcb</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    <span class=\"token function\">KiAcquireSpinLock</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>Prcb<span class=\"token operator\">-></span>DpcLock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre></pre></td></tr><tr><td data-num=\"67\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">else</span></span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    Prcb <span class=\"token operator\">=</span> <span class=\"token function\">KeGetCurrentPrcb</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre></pre></td></tr><tr><td data-num=\"71\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    <span class=\"token comment\">// If the DPC object is not in a DPC queue, then store the system</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    <span class=\"token comment\">// arguments, insert the DPC object in the DPC queue, increment the</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>    <span class=\"token comment\">// number of DPCs queued to the target processor, increment the DPC</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>    <span class=\"token comment\">// queue depth, set the address of the DPC target DPC spinlock, and</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    <span class=\"token comment\">// request a dispatch interrupt if appropriate.</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>Lock <span class=\"token operator\">=</span> <span class=\"token function\">InterlockedCompareExchangePointer</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>Dpc<span class=\"token operator\">-></span>Lock<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>Prcb<span class=\"token operator\">-></span>DpcLock<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>        Prcb<span class=\"token operator\">-></span>DpcCount <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>        Prcb<span class=\"token operator\">-></span>DpcQueueDepth <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>        Dpc<span class=\"token operator\">-></span>SystemArgument1 <span class=\"token operator\">=</span> SystemArgument1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>        Dpc<span class=\"token operator\">-></span>SystemArgument2 <span class=\"token operator\">=</span> SystemArgument2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>        <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>        <span class=\"token comment\">// If the DPC is of high importance, then insert the DPC at the</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>        <span class=\"token comment\">// head of the DPC queue. Otherwise, insert the DPC at the end</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>        <span class=\"token comment\">// of the DPC queue.</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>        <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Dpc<span class=\"token operator\">-></span>Importance <span class=\"token operator\">==</span> HighImportance<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>            <span class=\"token function\">InsertHeadList</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>Prcb<span class=\"token operator\">-></span>DpcListHead<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>Dpc<span class=\"token operator\">-></span>DpcListEntry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>            <span class=\"token function\">InsertTailList</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>Prcb<span class=\"token operator\">-></span>DpcListHead<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>Dpc<span class=\"token operator\">-></span>DpcListEntry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>        <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>        <span class=\"token comment\">// A memory barrier is required here to synchronize with retire DPC</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>        <span class=\"token comment\">// list, which clears DpcRoutineActive and DpcInterruptRequested</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>        <span class=\"token comment\">// without owning the dispatcher lock.</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>        <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre></pre></td></tr><tr><td data-num=\"105\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\"><span class=\"token function\">defined</span><span class=\"token punctuation\">(</span>_ALPHA_<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token function\">defined</span><span class=\"token punctuation\">(</span>NT_UP<span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>        <span class=\"token function\">__MB</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre></pre></td></tr><tr><td data-num=\"109\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>        <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>        <span class=\"token comment\">// If a DPC routine is not active on the target processor, then</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>        <span class=\"token comment\">// request a dispatch interrupt if appropriate.</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>        <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>Prcb<span class=\"token operator\">-></span>DpcRoutineActive <span class=\"token operator\">==</span> FALSE<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>            <span class=\"token punctuation\">(</span>Prcb<span class=\"token operator\">-></span>DpcInterruptRequested <span class=\"token operator\">==</span> FALSE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>            <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>            <span class=\"token comment\">// Request a dispatch interrupt on the current processor if</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>            <span class=\"token comment\">// the DPC is not of low importance, the length of the DPC</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>            <span class=\"token comment\">// queue has exceeded the maximum threshold, or if the DPC</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>            <span class=\"token comment\">// request rate is below the minimum threshold.</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>            <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre></pre></td></tr><tr><td data-num=\"126\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\"><span class=\"token function\">defined</span><span class=\"token punctuation\">(</span>NT_UP<span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>Dpc<span class=\"token operator\">-></span>Importance <span class=\"token operator\">!=</span> LowImportance<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>                <span class=\"token punctuation\">(</span>Prcb<span class=\"token operator\">-></span>DpcQueueDepth <span class=\"token operator\">>=</span> Prcb<span class=\"token operator\">-></span>MaximumDpcQueueDepth<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>                <span class=\"token punctuation\">(</span>Prcb<span class=\"token operator\">-></span>DpcRequestRate <span class=\"token operator\">&lt;</span> Prcb<span class=\"token operator\">-></span>MinimumDpcRate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>                Prcb<span class=\"token operator\">-></span>DpcInterruptRequested <span class=\"token operator\">=</span> TRUE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>                <span class=\"token function\">KiRequestSoftwareInterrupt</span><span class=\"token punctuation\">(</span>DISPATCH_LEVEL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>            <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>            <span class=\"token comment\">// If the DPC is being queued to another processor and the</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>            <span class=\"token comment\">// DPC is of high importance, or the length of the other</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>            <span class=\"token comment\">// processor's DPC queue has exceeded the maximum threshold,</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>            <span class=\"token comment\">// then request a dispatch interrupt.</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>            <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre></pre></td></tr><tr><td data-num=\"142\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">else</span></span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Prcb <span class=\"token operator\">!=</span> <span class=\"token function\">KeGetCurrentPrcb</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>Dpc<span class=\"token operator\">-></span>Importance <span class=\"token operator\">==</span> HighImportance<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre>                     <span class=\"token punctuation\">(</span>Prcb<span class=\"token operator\">-></span>DpcQueueDepth <span class=\"token operator\">>=</span> Prcb<span class=\"token operator\">-></span>MaximumDpcQueueDepth<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>                    Prcb<span class=\"token operator\">-></span>DpcInterruptRequested <span class=\"token operator\">=</span> TRUE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>                    <span class=\"token function\">KiIpiSend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>KAFFINITY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> Processor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> IPI_DPC<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre></pre></td></tr><tr><td data-num=\"151\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre></pre></td></tr><tr><td data-num=\"153\"></td><td><pre>                <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"154\"></td><td><pre>                <span class=\"token comment\">// Request a dispatch interrupt on the current processor if</span></pre></td></tr><tr><td data-num=\"155\"></td><td><pre>                <span class=\"token comment\">// the DPC is not of low importance, the length of the DPC</span></pre></td></tr><tr><td data-num=\"156\"></td><td><pre>                <span class=\"token comment\">// queue has exceeded the maximum threshold, or if the DPC</span></pre></td></tr><tr><td data-num=\"157\"></td><td><pre>                <span class=\"token comment\">// request rate is below the minimum threshold.</span></pre></td></tr><tr><td data-num=\"158\"></td><td><pre>                <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"159\"></td><td><pre></pre></td></tr><tr><td data-num=\"160\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>Dpc<span class=\"token operator\">-></span>Importance <span class=\"token operator\">!=</span> LowImportance<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span></pre></td></tr><tr><td data-num=\"161\"></td><td><pre>                    <span class=\"token punctuation\">(</span>Prcb<span class=\"token operator\">-></span>DpcQueueDepth <span class=\"token operator\">>=</span> Prcb<span class=\"token operator\">-></span>MaximumDpcQueueDepth<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span></pre></td></tr><tr><td data-num=\"162\"></td><td><pre>                    <span class=\"token punctuation\">(</span>Prcb<span class=\"token operator\">-></span>DpcRequestRate <span class=\"token operator\">&lt;</span> Prcb<span class=\"token operator\">-></span>MinimumDpcRate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"163\"></td><td><pre>                    Prcb<span class=\"token operator\">-></span>DpcInterruptRequested <span class=\"token operator\">=</span> TRUE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"164\"></td><td><pre>                    <span class=\"token function\">KiRequestSoftwareInterrupt</span><span class=\"token punctuation\">(</span>DISPATCH_LEVEL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"165\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"166\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"167\"></td><td><pre></pre></td></tr><tr><td data-num=\"168\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"169\"></td><td><pre></pre></td></tr><tr><td data-num=\"170\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"171\"></td><td><pre>     <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"172\"></td><td><pre></pre></td></tr><tr><td data-num=\"173\"></td><td><pre>     <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"174\"></td><td><pre>     <span class=\"token comment\">// Release the DPC lock, enable interrupts, and return whether the</span></pre></td></tr><tr><td data-num=\"175\"></td><td><pre>     <span class=\"token comment\">// DPC was queued or not.</span></pre></td></tr><tr><td data-num=\"176\"></td><td><pre>     <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"177\"></td><td><pre></pre></td></tr><tr><td data-num=\"178\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\"><span class=\"token operator\">!</span><span class=\"token function\">defined</span><span class=\"token punctuation\">(</span>NT_UP<span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"179\"></td><td><pre></pre></td></tr><tr><td data-num=\"180\"></td><td><pre>     <span class=\"token function\">KiReleaseSpinLock</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>Prcb<span class=\"token operator\">-></span>DpcLock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"181\"></td><td><pre></pre></td></tr><tr><td data-num=\"182\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"183\"></td><td><pre></pre></td></tr><tr><td data-num=\"184\"></td><td><pre>     <span class=\"token function\">KeLowerIrql</span><span class=\"token punctuation\">(</span>OldIrql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"185\"></td><td><pre>     <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>Lock <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"186\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"dpc-移除队列\"><a class=\"anchor\" href=\"#dpc-移除队列\">#</a> DPC 移除队列</h2>\n<p>逆向  <code>KeRemoveQueueDpc</code></p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>.text:00424954 ; BOOLEAN __stdcall KeRemoveQueueDpc (PRKDPC Dpc)</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>.text:00424954                 public _KeRemoveQueueDpc@4</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>.text:00424954 _KeRemoveQueueDpc@4 proc near           ; CODE XREF: ExTimerRundown ()+90↓p</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>.text:00424954                                         ; NtCancelTimer (x,x)+AD↓p ...</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>.text:00424954</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>.text:00424954 Dpc             &#x3D; dword ptr  8</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>.text:00424954</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>.text:00424954                 mov     edi, edi</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>.text:00424956                 push    ebp</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>.text:00424957                 mov     ebp, esp</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>.text:00424959                 push    esi</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>.text:0042495A                 push    edi</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>.text:0042495B                 cli</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>.text:0042495C                 mov     esi, [ebp+Dpc]</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>.text:0042495F                 mov     edi, [esi+_KDPC.Lock]</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>.text:00424962                 test    edi, edi</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>.text:00424964                 jz      short loc_42498C</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>.text:00424966                 mov     ecx, edi</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>.text:00424968                 call    @KiAcquireSpinLock@4 ; KiAcquireSpinLock (x)</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>.text:0042496D                 cmp     edi, [esi+_KDPC.Lock]</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>.text:00424970                 jnz     short loc_424985</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>.text:00424972                 sub     dword ptr [edi-30h], 1</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>.text:00424976                 mov     eax, [esi+_KDPC.DpcListEntry.Flink] ; 链表操作，从队列中移除</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>.text:00424979                 mov     ecx, [esi+_KDPC.DpcListEntry.Blink]</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>.text:0042497C                 mov     [ecx+_LIST_ENTRY.Flink], eax</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>.text:0042497E                 mov     [eax+_LIST_ENTRY.Blink], ecx</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>.text:00424981                 and     [esi+_KDPC.Lock], 0 ; Lock &#x3D; 0</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>.text:00424985</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>.text:00424985 loc_424985:                             ; CODE XREF: KeRemoveQueueDpc (x)+1C↑j</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>.text:00424985                 mov     ecx, edi</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>.text:00424987                 call    @KiReleaseSpinLock@4 ; KiReleaseSpinLock (x)</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>.text:0042498C</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>.text:0042498C loc_42498C:                             ; CODE XREF: KeRemoveQueueDpc (x)+10↑j</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>.text:0042498C                 sti</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>.text:0042498D                 xor     eax, eax</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>.text:0042498F                 test    edi, edi</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>.text:00424991                 pop     edi</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>.text:00424992                 setnz   al</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>.text:00424995                 pop     esi</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>.text:00424996                 pop     ebp</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>.text:00424997                 retn    4</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>.text:00424997 _KeRemoveQueueDpc@4 endp</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>.text:00424997</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>.text:00424997 ; ---------------------------------------------------------------------------</pre></td></tr></table></figure><p>参考以下代码：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">ASSERT_DPC</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>E<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>             </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token expression\"><span class=\"token function\">ASSERT</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>E<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>Type <span class=\"token operator\">==</span> DpcObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token expression\"><span class=\"token punctuation\">&#125;</span></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>BOOLEAN</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">KeRemoveQueueDpc</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    IN PRKDPC Dpc</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">/*++</pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>Routine Description:</pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    This function removes a DPC object from the DPC queue. If the DPC object</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    is not in the DPC queue, then no operation is performed. Otherwise, the</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    DPC object is removed from the DPC queue and its inserted state is set</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    FALSE.</pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>Arguments:</pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    Dpc - Supplies a pointer to a control object of type DPC.</pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>Return Value:</pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    If the DPC object is not in the DPC queue, then a value of FALSE is</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    returned. Otherwise a value of TRUE is returned.</pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>--*/</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    PKSPIN_LOCK Lock<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    PKPRCB Prcb<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token function\">ASSERT_DPC</span><span class=\"token punctuation\">(</span>Dpc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token comment\">// If the DPC object is in the DPC queue, then remove it from the queue</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token comment\">// and set its inserted state to FALSE.</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token function\">_disable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    Lock <span class=\"token operator\">=</span> Dpc<span class=\"token operator\">-></span>Lock<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Lock <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token comment\">// Acquire the DPC lock of the target processor.</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\"><span class=\"token operator\">!</span><span class=\"token function\">defined</span><span class=\"token punctuation\">(</span>NT_UP<span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token function\">KiAcquireSpinLock</span><span class=\"token punctuation\">(</span>Lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token comment\">// If the specified DPC is still in the DPC queue, then remove</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        <span class=\"token comment\">// it.</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        <span class=\"token comment\">// N.B. It is possible for specified DPC to be removed from the</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        <span class=\"token comment\">//      specified DPC queue before the DPC lock is obtained.</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Lock <span class=\"token operator\">==</span> Dpc<span class=\"token operator\">-></span>Lock<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>            Prcb <span class=\"token operator\">=</span> <span class=\"token function\">CONTAINING_RECORD</span><span class=\"token punctuation\">(</span>Lock<span class=\"token punctuation\">,</span> KPRCB<span class=\"token punctuation\">,</span> DpcLock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>            Prcb<span class=\"token operator\">-></span>DpcQueueDepth <span class=\"token operator\">-=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>            <span class=\"token function\">RemoveEntryList</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>Dpc<span class=\"token operator\">-></span>DpcListEntry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre></pre></td></tr><tr><td data-num=\"70\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\"><span class=\"token function\">defined</span><span class=\"token punctuation\">(</span>_ALPHA_<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token function\">defined</span><span class=\"token punctuation\">(</span>NT_UP<span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>            <span class=\"token function\">__MB</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre></pre></td></tr><tr><td data-num=\"74\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>            Dpc<span class=\"token operator\">-></span>Lock <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>        <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>        <span class=\"token comment\">// Release the DPC lock of the target processor.</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>        <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre></pre></td></tr><tr><td data-num=\"83\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\"><span class=\"token operator\">!</span><span class=\"token function\">defined</span><span class=\"token punctuation\">(</span>NT_UP<span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>        <span class=\"token function\">KiReleaseSpinLock</span><span class=\"token punctuation\">(</span>Lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre></pre></td></tr><tr><td data-num=\"87\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>    <span class=\"token comment\">// Enable interrupts and return whether the DPC was removed from a DPC</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>    <span class=\"token comment\">// queue.</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>    <span class=\"token function\">_enable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>Lock <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"dpc的执行\"><a class=\"anchor\" href=\"#dpc的执行\">#</a> DPC 的执行</h2>\n<p>之前分析的  <code>KiDispatchInterrupt</code>  函数的开头，就有处理 DPC 的片段。</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>.text:0046EAE0 _KiDispatchInterrupt@0 proc near</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>.text:0046EAE0</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>.text:0046EAE0 var_C           &#x3D; dword ptr -0Ch</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>.text:0046EAE0 var_8           &#x3D; dword ptr -8</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>.text:0046EAE0 var_4           &#x3D; dword ptr -4</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>.text:0046EAE0</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>.text:0046EAE0                 mov     ebx, large fs:1Ch ; ebx: KPCR</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>.text:0046EAE7</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>.text:0046EAE7 loc_46EAE7:                             ; CODE XREF: KiDispatchInterrupt ()+B9↓j</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>.text:0046EAE7                 lea     eax, [ebx+_KPCR.PrcbData.DpcListHead]</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>.text:0046EAED                 cli                     ; 屏蔽中断</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>.text:0046EAEE                 cmp     eax, [eax]      ; check if DPC List is empty</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>.text:0046EAF0                 jz      short loc_46EB0F ;  if eq, list is empty</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>.text:0046EAF2                 push    ebp             ;  save register</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>.text:0046EAF3                 push    [ebx+_KPCR.NtTib.ExceptionList] ; DPC 中发生的异常与中断线程中的任何异常处理程序无关。</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>.text:0046EAF5                 mov     [ebx+_KPCR.NtTib.ExceptionList], 0FFFFFFFFh ; 终止异常列表。</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>.text:0046EAFB                 mov     edx, esp</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>.text:0046EAFD                 mov     esp, [ebx+_KPCR.PrcbData.DpcStack] ; 切换到此处理器的 DPC 堆栈。</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>.text:0046EB03                 push    edx</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>.text:0046EB04                 mov     ebp, eax        ; 设置 DPC Listhead 的地址</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>.text:0046EB06                 call    KiRetireDpcList ; 处理当前 DPC 列表</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>.text:0046EB0B                 pop     esp             ; 切换回当前线程堆栈，恢复异常列表和保存的 EBP。</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>.text:0046EB0C                 pop     dword ptr [ebx]</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>.text:0046EB0E                 pop     ebp</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>.text:0046EB0F</pre></td></tr></table></figure><p>可以看到  <code>KiDispatchInterrupt</code>  调用了  <code>KiRetireDpcList</code>  来处理 DPC 队列。</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>.text:0046EF3E ; &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; S U B R O U T I N E &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>.text:0046EF3E</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>.text:0046EF3E</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>.text:0046EF3E KiRetireDpcList proc near               ; CODE XREF: KiDispatchInterrupt ()+26↑p</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>.text:0046EF3E                                         ; KiIdleLoop ()+23↑p</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>.text:0046EF3E</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>.text:0046EF3E var_24          &#x3D; dword ptr -24h</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>.text:0046EF3E var_14          &#x3D; dword ptr -14h</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>.text:0046EF3E var_10          &#x3D; dword ptr -10h</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>.text:0046EF3E var_C           &#x3D; dword ptr -0Ch</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>.text:0046EF3E var_8           &#x3D; dword ptr -8</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>.text:0046EF3E</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>.text:0046EF3E                 push    esi</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>.text:0046EF3F                 lea     esi, [ebx+_KPCR.PrcbData.DpcLock] ; get DPC lock address</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>.text:0046EF45                 push    0</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>.text:0046EF47                 sub     esp, 0Ch</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>.text:0046EF4A                 cmp     ds:_PPerfGlobalGroupMask, 0</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>.text:0046EF51                 jnz     loc_46EFDC</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>.text:0046EF57</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>.text:0046EF57 loc_46EF57:                             ; CODE XREF: KiRetireDpcList+85↓j</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>.text:0046EF57                                         ; KiRetireDpcList+A6↓j ...</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>.text:0046EF57                 mov     large fs:_KPCR.PrcbData.DpcRoutineActive, esp ; 设置 DPC 例程激活</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>.text:0046EF5E</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>.text:0046EF5E loc_46EF5E:                             ; CODE XREF: KiRetireDpcList+6C↓j</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>.text:0046EF5E                 lock bts dword ptr [esi], 0 ; BTS 指令的作用：</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>.text:0046EF5E                                         ; 两件事:</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>.text:0046EF5E                                         ; 一、</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>.text:0046EF5E                                         ;  取 esi 比特位的第 0 位存在 CF 标志位中。</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>.text:0046EF5E                                         ; 二、</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>.text:0046EF5E                                         ;  lock bts dword ptr [esi],0</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>.text:0046EF5E                                         ;  将 dword ptr [esi] 指向的内存地址的第 0 位置 1</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>.text:0046EF63                 jb      short loc_46EFCF ; CF &#x3D; 1 则跳转</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>.text:0046EF65                 cmp     ebp, [ebp+_LIST_ENTRY.Flink] ; check if DPC list is empty</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>.text:0046EF68                 jz      short loc_46EFCA ; DPC 的锁置为 0</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>.text:0046EF6A                 mov     edx, [ebp+_LIST_ENTRY.Flink]</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>.text:0046EF6D                 mov     ecx, [edx+_LIST_ENTRY.Flink]</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>.text:0046EF6F                 mov     [ebp+_LIST_ENTRY.Flink], ecx</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>.text:0046EF72                 mov     [ecx+_LIST_ENTRY.Blink], ebp</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>.text:0046EF75                 sub     edx, 4          ; -0x4 获得 DPC 对象 KDPC 结构的首地址</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>.text:0046EF78                 mov     ecx, [edx+_KDPC.DeferredRoutine]</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>.text:0046EF7B                 push    [edx+_KDPC.SystemArgument2]</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>.text:0046EF7E                 push    [edx+_KDPC.SystemArgument1]</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>.text:0046EF81                 push    [edx+_KDPC.DeferredContext]</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>.text:0046EF84                 push    edx</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>.text:0046EF85                 mov     [edx+_KDPC.Lock], 0 ; 清除 DPC 插入状态</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>.text:0046EF8C                 dec     [ebx+_KPCR.PrcbData.DpcQueueDepth] ; 递减深度</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>.text:0046EF92                 mov     byte ptr [esi], 0 ; 释放 DPC 锁</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>.text:0046EF95                 sti                     ; enable interrupts</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>.text:0046EF96                 cmp     dword ptr [esp+1Ch], 0 ; 这里有待调试分析</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>.text:0046EF9B                 jnz     short loc_46F004</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>.text:0046EF9D</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>.text:0046EF9D loc_46EF9D:                             ; CODE XREF: KiRetireDpcList+DD↓j</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>.text:0046EF9D                 call    ecx</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>.text:0046EF9F                 cmp     [esp+14h+var_8], 0 ; 若不为 0 会分析 log 相关的</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>.text:0046EFA4                 jnz     short loc_46F01D</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>.text:0046EFA6</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>.text:0046EFA6 loc_46EFA6:                             ; CODE XREF: KiRetireDpcList+98↓j</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>.text:0046EFA6                                         ; KiRetireDpcList+F1↓j</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>.text:0046EFA6                 cli</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>.text:0046EFA7                 cmp     ebp, [ebp+_LIST_ENTRY.Flink] ; check if DPC list is empty</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>.text:0046EFAA                 jnz     short loc_46EF5E ; BTS 指令的作用：</pre></td></tr><tr><td data-num=\"62\"></td><td><pre>.text:0046EFAA                                         ; 两件事:</pre></td></tr><tr><td data-num=\"63\"></td><td><pre>.text:0046EFAA                                         ; 一、</pre></td></tr><tr><td data-num=\"64\"></td><td><pre>.text:0046EFAA                                         ;  取 esi 比特位的第 0 位存在 CF 标志位中。</pre></td></tr><tr><td data-num=\"65\"></td><td><pre>.text:0046EFAA                                         ; 二、</pre></td></tr><tr><td data-num=\"66\"></td><td><pre>.text:0046EFAA                                         ;  lock bts dword ptr [esi],0</pre></td></tr><tr><td data-num=\"67\"></td><td><pre>.text:0046EFAA                                         ;  将 dword ptr [esi] 指向的内存地址的第 0 位置 1</pre></td></tr><tr><td data-num=\"68\"></td><td><pre>.text:0046EFAC</pre></td></tr><tr><td data-num=\"69\"></td><td><pre>.text:0046EFAC loc_46EFAC:                             ; CODE XREF: KiRetireDpcList+8F↓j</pre></td></tr><tr><td data-num=\"70\"></td><td><pre>.text:0046EFAC                 mov     [ebx+_KPCR.PrcbData.DpcRoutineActive], 0</pre></td></tr><tr><td data-num=\"71\"></td><td><pre>.text:0046EFB6                 mov     [ebx+_KPCR.PrcbData.DpcInterruptRequested], 0</pre></td></tr><tr><td data-num=\"72\"></td><td><pre>.text:0046EFC0                 cmp     ebp, [ebp+_LIST_ENTRY.Flink] ; check if DPC list is empty</pre></td></tr><tr><td data-num=\"73\"></td><td><pre>.text:0046EFC3                 jnz     short loc_46EF57 ; DPC 列表不为空，则继续执行 DPC</pre></td></tr><tr><td data-num=\"74\"></td><td><pre>.text:0046EFC5                 add     esp, 10h</pre></td></tr><tr><td data-num=\"75\"></td><td><pre>.text:0046EFC8                 pop     esi</pre></td></tr><tr><td data-num=\"76\"></td><td><pre>.text:0046EFC9                 retn</pre></td></tr><tr><td data-num=\"77\"></td><td><pre>.text:0046EFCA ; ---------------------------------------------------------------------------</pre></td></tr><tr><td data-num=\"78\"></td><td><pre>.text:0046EFCA</pre></td></tr><tr><td data-num=\"79\"></td><td><pre>.text:0046EFCA loc_46EFCA:                             ; CODE XREF: KiRetireDpcList+2A↑j</pre></td></tr><tr><td data-num=\"80\"></td><td><pre>.text:0046EFCA                 mov     byte ptr [esi], 0 ; DPC 的锁置为 0</pre></td></tr><tr><td data-num=\"81\"></td><td><pre>.text:0046EFCD                 jmp     short loc_46EFAC ; 返回</pre></td></tr><tr><td data-num=\"82\"></td><td><pre>.text:0046EFCF ; ---------------------------------------------------------------------------</pre></td></tr><tr><td data-num=\"83\"></td><td><pre>.text:0046EFCF</pre></td></tr><tr><td data-num=\"84\"></td><td><pre>.text:0046EFCF loc_46EFCF:                             ; CODE XREF: KiRetireDpcList+25↑j</pre></td></tr><tr><td data-num=\"85\"></td><td><pre>.text:0046EFCF                 sti</pre></td></tr><tr><td data-num=\"86\"></td><td><pre>.text:0046EFD0</pre></td></tr><tr><td data-num=\"87\"></td><td><pre>.text:0046EFD0 loc_46EFD0:                             ; CODE XREF: KiRetireDpcList+9C↓j</pre></td></tr><tr><td data-num=\"88\"></td><td><pre>.text:0046EFD0                 test    dword ptr [esi], 1</pre></td></tr><tr><td data-num=\"89\"></td><td><pre>.text:0046EFD6                 jz      short loc_46EFA6</pre></td></tr><tr><td data-num=\"90\"></td><td><pre>.text:0046EFD8                 pause</pre></td></tr><tr><td data-num=\"91\"></td><td><pre>.text:0046EFDA                 jmp     short loc_46EFD0</pre></td></tr><tr><td data-num=\"92\"></td><td><pre>.text:0046EFDC ; ---------------------------------------------------------------------------</pre></td></tr><tr><td data-num=\"93\"></td><td><pre>.text:0046EFDC</pre></td></tr><tr><td data-num=\"94\"></td><td><pre>.text:0046EFDC loc_46EFDC:                             ; CODE XREF: KiRetireDpcList+13↑j</pre></td></tr><tr><td data-num=\"95\"></td><td><pre>.text:0046EFDC                 mov     eax, ds:_PPerfGlobalGroupMask</pre></td></tr><tr><td data-num=\"96\"></td><td><pre>.text:0046EFE1                 cmp     eax, 0</pre></td></tr><tr><td data-num=\"97\"></td><td><pre>.text:0046EFE4                 jz      loc_46EF57      ; 设置 DPC 例程激活</pre></td></tr><tr><td data-num=\"98\"></td><td><pre>.text:0046EFEA                 test    dword ptr [eax+4], 80h</pre></td></tr><tr><td data-num=\"99\"></td><td><pre>.text:0046EFF1                 jz      loc_46EF57      ; 设置 DPC 例程激活</pre></td></tr><tr><td data-num=\"100\"></td><td><pre>.text:0046EFF7                 mov     [esp+14h+var_8], 1</pre></td></tr><tr><td data-num=\"101\"></td><td><pre>.text:0046EFFF                 jmp     loc_46EF57      ; 设置 DPC 例程激活</pre></td></tr><tr><td data-num=\"102\"></td><td><pre>.text:0046F004 ; ---------------------------------------------------------------------------</pre></td></tr><tr><td data-num=\"103\"></td><td><pre>.text:0046F004</pre></td></tr><tr><td data-num=\"104\"></td><td><pre>.text:0046F004 loc_46F004:                             ; CODE XREF: KiRetireDpcList+5D↑j</pre></td></tr><tr><td data-num=\"105\"></td><td><pre>.text:0046F004                 push    ecx</pre></td></tr><tr><td data-num=\"106\"></td><td><pre>.text:0046F005                 call    ds:_WmiGetCpuClock ; WmipGetSystemTime ()</pre></td></tr><tr><td data-num=\"107\"></td><td><pre>.text:0046F00B                 pop     ecx</pre></td></tr><tr><td data-num=\"108\"></td><td><pre>.text:0046F00C                 mov     [esp+24h+var_14], eax</pre></td></tr><tr><td data-num=\"109\"></td><td><pre>.text:0046F010                 mov     [esp+24h+var_10], edx</pre></td></tr><tr><td data-num=\"110\"></td><td><pre>.text:0046F014                 mov     edx, [esp+24h+var_24]</pre></td></tr><tr><td data-num=\"111\"></td><td><pre>.text:0046F017                 mov     [esp+24h+var_C], ecx</pre></td></tr><tr><td data-num=\"112\"></td><td><pre>.text:0046F01B                 jmp     short loc_46EF9D</pre></td></tr><tr><td data-num=\"113\"></td><td><pre>.text:0046F01D ; ---------------------------------------------------------------------------</pre></td></tr><tr><td data-num=\"114\"></td><td><pre>.text:0046F01D</pre></td></tr><tr><td data-num=\"115\"></td><td><pre>.text:0046F01D loc_46F01D:                             ; CODE XREF: KiRetireDpcList+66↑j</pre></td></tr><tr><td data-num=\"116\"></td><td><pre>.text:0046F01D                 mov     eax, [esp+14h+var_14]</pre></td></tr><tr><td data-num=\"117\"></td><td><pre>.text:0046F020                 mov     edx, [esp+14h+var_10]</pre></td></tr><tr><td data-num=\"118\"></td><td><pre>.text:0046F024                 push    edx</pre></td></tr><tr><td data-num=\"119\"></td><td><pre>.text:0046F025                 push    eax</pre></td></tr><tr><td data-num=\"120\"></td><td><pre>.text:0046F026                 mov     ecx, [esp+1Ch+var_C]</pre></td></tr><tr><td data-num=\"121\"></td><td><pre>.text:0046F02A                 call    @PerfInfoLogDpc@12 ; PerfInfoLogDpc (x,x,x)</pre></td></tr><tr><td data-num=\"122\"></td><td><pre>.text:0046F02F                 jmp     loc_46EFA6</pre></td></tr><tr><td data-num=\"123\"></td><td><pre>.text:0046F02F KiRetireDpcList endp</pre></td></tr><tr><td data-num=\"124\"></td><td><pre>.text:0046F02F</pre></td></tr><tr><td data-num=\"125\"></td><td><pre>.text:0046F034</pre></td></tr><tr><td data-num=\"126\"></td><td><pre>.text:0046F034 ; &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; S U B R O U T I N E &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</pre></td></tr></table></figure><p>可以参考以下代码：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>VOID</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">KiRetireDpcList</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    PKPRCB Prcb</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">/*++</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>Routine Description:</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    This function processes the DPC list for the specified processor.</pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    N.B. This function is entered with interrupts disabled and exits with</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>         interrupts disabled.</pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>Arguments:</pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    Prcb - Supplies the address of the processor block.</pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>Return Value:</pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    None.</pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>--*/</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    PKDPC Dpc<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    PVOID DeferredContext<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    PKDEFERRED_ROUTINE DeferredRoutine<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    PLIST_ENTRY Entry<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    PLIST_ENTRY ListHead<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    PVOID SystemArgument1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    PVOID SystemArgument2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    ULONG TimerHand<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token comment\">// Loop processing DPC list entries until the specified DPC list is empty.</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token comment\">// N.B. This following code appears to have a redundant loop, but it does</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token comment\">//      not. The point of this code is to avoid as many dispatch interrupts</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token comment\">//      as possible.</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    ListHead <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>Prcb<span class=\"token operator\">-></span>DpcListHead<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token keyword\">do</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        Prcb<span class=\"token operator\">-></span>DpcRoutineActive <span class=\"token operator\">=</span> TRUE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token comment\">// If the timer hand value is nonzero, then process expired timers.</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>TimerHand <span class=\"token operator\">=</span> Prcb<span class=\"token operator\">-></span>TimerHand<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>            Prcb<span class=\"token operator\">-></span>TimerHand <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>            <span class=\"token function\">_enable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>            <span class=\"token function\">KiTimerExpiration</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token function\">UlongToHandle</span><span class=\"token punctuation\">(</span>TimerHand <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>            <span class=\"token function\">_disable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        <span class=\"token comment\">// If the DPC list is not empty, then process the DPC list.</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Prcb<span class=\"token operator\">-></span>DpcQueueDepth <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>            <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>            <span class=\"token comment\">// Acquire the DPC lock for the current processor and check if</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>            <span class=\"token comment\">// the DPC list is empty. If the DPC list is not empty, then</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>            <span class=\"token comment\">// remove the first entry from the DPC list, capture the DPC</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>            <span class=\"token comment\">// parameters, set the DPC inserted state false, decrement the</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>            <span class=\"token comment\">// DPC queue depth, release the DPC lock, enable interrupts, and</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>            <span class=\"token comment\">// call the specified DPC routine. Otherwise, release the DPC</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>            <span class=\"token comment\">// lock and enable interrupts.</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>            <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>            <span class=\"token keyword\">do</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>                <span class=\"token function\">KeAcquireSpinLockAtDpcLevel</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>Prcb<span class=\"token operator\">-></span>DpcLock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>                Entry <span class=\"token operator\">=</span> Prcb<span class=\"token operator\">-></span>DpcListHead<span class=\"token punctuation\">.</span>Flink<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Entry <span class=\"token operator\">!=</span> ListHead<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>                    <span class=\"token function\">RemoveEntryList</span><span class=\"token punctuation\">(</span>Entry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>                    Dpc <span class=\"token operator\">=</span> <span class=\"token function\">CONTAINING_RECORD</span><span class=\"token punctuation\">(</span>Entry<span class=\"token punctuation\">,</span> KDPC<span class=\"token punctuation\">,</span> DpcListEntry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>                    DeferredRoutine <span class=\"token operator\">=</span> Dpc<span class=\"token operator\">-></span>DeferredRoutine<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>                    DeferredContext <span class=\"token operator\">=</span> Dpc<span class=\"token operator\">-></span>DeferredContext<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>                    SystemArgument1 <span class=\"token operator\">=</span> Dpc<span class=\"token operator\">-></span>SystemArgument1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>                    SystemArgument2 <span class=\"token operator\">=</span> Dpc<span class=\"token operator\">-></span>SystemArgument2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>                    Dpc<span class=\"token operator\">-></span>Lock <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>                    Prcb<span class=\"token operator\">-></span>DpcQueueDepth <span class=\"token operator\">-=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>                    <span class=\"token function\">KeReleaseSpinLockFromDpcLevel</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>Prcb<span class=\"token operator\">-></span>DpcLock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>                    <span class=\"token function\">_enable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>                    <span class=\"token punctuation\">(</span>DeferredRoutine<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>Dpc<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>                                      DeferredContext<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>                                      SystemArgument1<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>                                      SystemArgument2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>                    <span class=\"token function\">ASSERT</span><span class=\"token punctuation\">(</span><span class=\"token function\">KeGetCurrentIrql</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> DISPATCH_LEVEL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>                    <span class=\"token function\">_disable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>                    <span class=\"token function\">ASSERT</span><span class=\"token punctuation\">(</span>Prcb<span class=\"token operator\">-></span>DpcQueueDepth <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>                    <span class=\"token function\">KeReleaseSpinLockFromDpcLevel</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>Prcb<span class=\"token operator\">-></span>DpcLock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>ListHead <span class=\"token operator\">!=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>PLIST_ENTRY <span class=\"token keyword\">volatile</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>ListHead<span class=\"token operator\">-></span>Flink<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>        Prcb<span class=\"token operator\">-></span>DpcRoutineActive <span class=\"token operator\">=</span> FALSE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>        Prcb<span class=\"token operator\">-></span>DpcInterruptRequested <span class=\"token operator\">=</span> FALSE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>ListHead <span class=\"token operator\">!=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>PLIST_ENTRY <span class=\"token keyword\">volatile</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>ListHead<span class=\"token operator\">-></span>Flink<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h2>\n<p>从上述的逆向分析可以得知，DPC 优先于线程切换，必须得先把 DPC 执行完，才能执行线程。验证了上述概念。</p>\n<h2 id=\"写代码验证dpc\"><a class=\"anchor\" href=\"#写代码验证dpc\">#</a> 写代码验证 DPC</h2>\n<p>代码很简单：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;ntddk.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>KDPC dpc <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>VOID <span class=\"token function\">DriverUnload</span><span class=\"token punctuation\">(</span>PDRIVER_OBJECT pDriver<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是驱动，我卸载了\\t\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>VOID <span class=\"token function\">dpcCall</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token comment\">//_In_ struct _KDPC* Dpc,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t_In_opt_ PVOID DeferredContext<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t_In_opt_ PVOID SystemArgument1<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t_In_opt_ PVOID SystemArgument2</pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Dpc执行了\\t\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>NTSTATUS <span class=\"token function\">DriverEntry</span><span class=\"token punctuation\">(</span>PDRIVER_OBJECT pDriver<span class=\"token punctuation\">,</span> PUNICODE_STRING pRegPath<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\tpDriver<span class=\"token operator\">-></span>DriverUnload <span class=\"token operator\">=</span> DriverUnload<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是驱动,我运行了\\t\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token function\">KeInitializeDpc</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>dpc<span class=\"token punctuation\">,</span> dpcCall<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token function\">KeInsertQueueDpc</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>dpc<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token keyword\">return</span> STATUS_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>截图：</p>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<h1 id=\"reference\"><a class=\"anchor\" href=\"#reference\">#</a> Reference</h1>\n<p>windows 泄露的源码<br />\n《Windows 内核原理与实现》<br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ltcXVlc3Rpb24vYXJ0aWNsZS9kZXRhaWxzLzEyODY2NDE=\">https://blog.csdn.net/imquestion/article/details/1286641</span></p>\n",
            "tags": [
                "延迟过程调用"
            ]
        },
        {
            "id": "https://or0kit.github.io/Bin/Core/WindowsXp/Process-Thread/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B-%E8%BF%9B%E7%A8%8B%E6%8C%82%E9%9D%A0%E5%92%8C%E8%B7%A8%E8%BF%9B%E7%A8%8B%E8%AF%BB%E5%86%99%E5%86%85%E5%AD%98/",
            "url": "https://or0kit.github.io/Bin/Core/WindowsXp/Process-Thread/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B-%E8%BF%9B%E7%A8%8B%E6%8C%82%E9%9D%A0%E5%92%8C%E8%B7%A8%E8%BF%9B%E7%A8%8B%E8%AF%BB%E5%86%99%E5%86%85%E5%AD%98/",
            "title": "进程与线程-进程挂靠和跨进程读写内存",
            "date_published": "2022-01-23T16:55:34.000Z",
            "content_html": "<h1 id=\"楔子\"><a class=\"anchor\" href=\"#楔子\">#</a> 楔子</h1>\n<p>需要有 APC 的基础，学完句柄表和 APC 后再回来分析。</p>\n<p>额外小知识   <code>NUMA</code></p>\n<p>要点回顾：</p>\n<p>一个进程可以包含多个线程</p>\n<p>一个进程至少要有一个线程</p>\n<p>进程为线程提供资源，也就是提供 Cr3 的值，Cr3 中存储的是页目录表基址，Cr3 确定了，线程能访问的内存也就确定了。</p>\n<h1 id=\"进程挂靠\"><a class=\"anchor\" href=\"#进程挂靠\">#</a> 进程挂靠</h1>\n<p>首先要了解以下知识</p>\n<h2 id=\"进程与线程的关系\"><a class=\"anchor\" href=\"#进程与线程的关系\">#</a> 进程与线程的关系</h2>\n<p>线程代码：</p>\n<p>mov eax,dword ptr ds:[0x12345678]</p>\n<p>CPU 如何解析 0x12345678 这个地址呢？</p>\n<ol>\n<li>\n<p>CPU 解析线性地址时要通过页目录表来找对应的物理页，页目录表基址存在<br />\n Cr3 寄存器中。</p>\n</li>\n<li>\n<p>当前的 Cr3 的值来源于当前的进程 (_KPROCESS.DirectoryTableBase (+0x018))。</p>\n</li>\n</ol>\n<h2 id=\"线程与进程的关联\"><a class=\"anchor\" href=\"#线程与进程的关联\">#</a> 线程与进程的关联</h2>\n<p>线程是如何找到进程的呢？线程与进程是如何关联的呢？</p>\n<p>在线程的结构体中：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>+0x034 ApcState</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t\t+0x000 ApcListHead </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   \t\t+0x010 Process </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   \t\t+0x014 KernelApcInProgress</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   \t\t+0x015 KernelApcPending</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   \t\t+0x016 UserApcPending</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t+0x220 ThreadsProcess</pre></td></tr></table></figure><p>有两处与进程相关的成员：  <code>Process</code>  与  <code>ThreadsProcess</code>  ，那么这两个成员与线程有什么关系呢？</p>\n<h2 id=\"0x044负责提供cr3\"><a class=\"anchor\" href=\"#0x044负责提供cr3\">#</a> 0x044 负责提供 Cr3</h2>\n<p>(分析 SwapContext 函数) 线程切换的时候，会比较_KTHREAD 结构体 0x044 处指定的 EPROCESS 是否为同一个，如果不是同一个，会将 0x044 处指定的 EPROCESS 的 DirectoryTableBase 的值取出，赋值给 Cr3。</p>\n<p>所以，线程需要的 Cr3 的值来源于 0x044 处偏移指定的 EPROCESS.</p>\n<p>可以得出以下结论：</p>\n<p>0x220 亲生父母：这个线程谁创建的<br />\n 0x044 养父母：谁在为这个线程提供资源 (也就是提供 Cr3)<br />\n 一般情况下，0x220 与 0x44 指向的是同一个进程</p>\n<p>那么 Cr3 的值可以随便改吗？</p>\n<h2 id=\"修改cr3的值\"><a class=\"anchor\" href=\"#修改cr3的值\">#</a> 修改 Cr3 的值</h2>\n<p>正常情况下，Cr3 的值是由养父母提供的，但 Cr3 的值也可以改成和当前线程毫不相干的其他进程的 DirectoryTableBase。</p>\n<p>线程代码：</p>\n<p>mov cr3,A.DirectoryTableBase<br />\nmov eax,dword ptr ds:[0x12345678]\t\t//A 进程的 0x12345678 内存<br />\n mov cr3,B.DirectoryTableBase<br />\nmov eax,dword ptr ds:[0x12345678]\t\t//B 进程的 0x12345678 内存<br />\n mov cr3,C.DirectoryTableBase<br />\nmov eax,dword ptr ds:[0x12345678]\t\t//C 进程的 0x12345678 内存</p>\n<p>将当前 Cr3 的值改为其他进程，称为 “进程挂靠”。</p>\n<p>那可不可以只修改 Cr3 而不修改养父母？不可以，如果不修改养父母的值，一旦产生线程切换，就会变成自己读自己！</p>\n<p>如果我们自己来写这个代码，在切换 Cr3 后关闭中断，并且不调用会导致线程切换的 API，就可以不用修改养父母的值。</p>\n<h2 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h2>\n<p>正常情况下，当前线程使用的 Cr3 是由其所属进程提供的 (ETHREAD 0x44 偏移处指定的 EPROCESS)，正是因为如此，A 进程中的线程只能访问 A 的内存。</p>\n<p>如果要让 A 进程中的线程能够访问 B 进程的内存，就必须要修改 Cr3 的值为 B 进程的页目录表基址 (B.DirectoryTableBase)，这就是所谓的 “进程挂靠”。</p>\n<h1 id=\"跨进程读写内存\"><a class=\"anchor\" href=\"#跨进程读写内存\">#</a> 跨进程读写内存</h1>\n<p>跨进程的本质是 “进程挂靠”，正常情况下，A 进程的线程只能访问 A 进程的地址空间，如果 A 进程的线程想访问 B 进程的地址空间，就要修改当前的 Cr3 的值为 B 进程的页目录表基值 (KPROCESS.DirectoryTableBase)。<br />\n即： <code>mov cr3,B.DirectoryTableBase</code></p>\n<h2 id=\"跨进程操作\"><a class=\"anchor\" href=\"#跨进程操作\">#</a> 跨进程操作</h2>\n<p>A 进制中的线程代码：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>mov cr3,B.DirectoryTableBase\t\t&#x2F;&#x2F; 切换 Cr3 的值为 B 进程</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>mov eax,dword ptr ds:[0x12345678]\t\t&#x2F;&#x2F; 将进程 B 0x12345678 的值存的 eax 中</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>mov dword ptr ds:[0x00401234],eax\t\t&#x2F;&#x2F; 将数据存储到 0x00401234 中</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>mov cr3,A.DirectoryTableBase\t\t&#x2F;&#x2F; 切换回 Cr3 的值</pre></td></tr></table></figure><p>此时  <code>0x00401234</code>  中的数据还有吗？如何将数据传递给 A 进程的变量呢？</p>\n<h2 id=\"ntreadvirtualmemory-流程解析\"><a class=\"anchor\" href=\"#ntreadvirtualmemory-流程解析\">#</a> NtReadVirtualMemory 流程解析</h2>\n<p>一些关键函数的声明为：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>NTSTATUS</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">NtReadVirtualMemory</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     IN HANDLE ProcessHandle<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 为进程对象提供一个打开的句柄。</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     IN PVOID BaseAddress<span class=\"token punctuation\">,</span><span class=\"token comment\">// 提供要读取的指定进程中的基址。</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     OUT PVOID Buffer<span class=\"token punctuation\">,</span><span class=\"token comment\">// 提供缓冲区的地址，该缓冲区接收来自指定进程地址空间的内容。</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>     IN SIZE_T BufferSize<span class=\"token punctuation\">,</span><span class=\"token comment\">// 提供要从指定进程读取的请求字节数。</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     OUT PSIZE_T NumberOfBytesRead OPTIONAL <span class=\"token comment\">// 接收传输到指定缓冲区的实际字节数。</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>NTSTATUS</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token function\">MmCopyVirtualMemory</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    IN PEPROCESS FromProcess<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    IN CONST VOID <span class=\"token operator\">*</span>FromAddress<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    IN PEPROCESS ToProcess<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    OUT PVOID ToAddress<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    IN SIZE_T BufferSize<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    IN KPROCESSOR_MODE PreviousMode<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    OUT PSIZE_T NumberOfBytesCopied</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>NTSTATUS</pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token function\">MiDoMappedCopy</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>     IN PEPROCESS FromProcess<span class=\"token punctuation\">,</span><span class=\"token comment\">// 为进程对象提供一个打开的句柄。</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>     IN CONST VOID <span class=\"token operator\">*</span>FromAddress<span class=\"token punctuation\">,</span><span class=\"token comment\">// 提供要读取的指定进程中的基址。</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>     IN PEPROCESS ToProcess<span class=\"token punctuation\">,</span><span class=\"token comment\">// 为进程对象提供一个打开的句柄。</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>     OUT PVOID ToAddress<span class=\"token punctuation\">,</span><span class=\"token comment\">// 提供缓冲区的地址，该缓冲区接收来自指定进程地址空间的内容。</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>     IN SIZE_T BufferSize<span class=\"token punctuation\">,</span><span class=\"token comment\">// 提供要从指定进程读取的请求字节数。</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>     IN KPROCESSOR_MODE PreviousMode<span class=\"token punctuation\">,</span><span class=\"token comment\">// 提供以前的处理器模式。</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>     OUT PSIZE_T NumberOfBytesRead<span class=\"token comment\">// 接收传输到指定缓冲区的实际字节数。</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>NTSTATUS</pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token function\">MiDoPoolCopy</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>     IN PEPROCESS FromProcess<span class=\"token punctuation\">,</span><span class=\"token comment\">// 为进程对象提供一个打开的句柄。</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>     IN CONST VOID <span class=\"token operator\">*</span>FromAddress<span class=\"token punctuation\">,</span><span class=\"token comment\">// 提供要读取的指定进程中的基址。</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>     IN PEPROCESS ToProcess<span class=\"token punctuation\">,</span><span class=\"token comment\">// 为进程对象提供一个打开的句柄。</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>     OUT PVOID ToAddress<span class=\"token punctuation\">,</span><span class=\"token comment\">// 提供缓冲区的地址，该缓冲区接收来自指定进程地址空间的内容。</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>     IN SIZE_T BufferSize<span class=\"token punctuation\">,</span><span class=\"token comment\">// 提供要从指定进程读取的请求字节数。</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>     IN KPROCESSOR_MODE PreviousMode<span class=\"token punctuation\">,</span><span class=\"token comment\">// 提供以前的处理器模式。</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>     OUT PSIZE_T NumberOfBytesRead<span class=\"token comment\">// 接收传输到指定缓冲区的实际字节数。</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>     <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token comment\">/*-- 这个函数将一个线程附加到目标进程的地址空间，并返回上一个附加进程前的 APC 状态信息。--*/</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>VOID</pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token function\">KeStackAttachProcess</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    IN PRKPROCESS Process<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    OUT PRKAPC_STATE ApcState</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token comment\">/*-- 这个函数将一个线程从另一个进程的地址空间中分离出来，并恢复之前的连接状态。--*/</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>VOID</pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token function\">KeUnstackDetachProcess</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    IN PRKAPC_STATE ApcState <span class=\"token comment\">// 提供一个指向 APC 状态结构的指针，该结构是由之前对堆栈附加进程的调用返回的。</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"逆向分析-ntreadvirtualmemory\"><a class=\"anchor\" href=\"#逆向分析-ntreadvirtualmemory\">#</a> 逆向分析 NtReadVirtualMemory</h3>\n<details class=\"primary\"><summary>NtReadVirtualMemory 逆向分析  （点击展开）</summary><div>\n<pre><code>; NTSTATUS __stdcall NtReadVirtualMemory(HANDLE ProcessHandle, PVOID BaseAddress, PVOID Buffer, SIZE_T NumberOfBytesToRead, PSIZE_T NumberOfBytesRead)\nPAGE:004DD2F6 _NtReadVirtualMemory@20 proc near       ; DATA XREF: .text:0042D858↑o\nPAGE:004DD2F6\nPAGE:004DD2F6 var_2C          = dword ptr -2Ch\nPAGE:004DD2F6 var_28          = dword ptr -28h\nPAGE:004DD2F6 Object          = dword ptr -24h\nPAGE:004DD2F6 AccessMode      = byte ptr -20h\nPAGE:004DD2F6 var_1C          = dword ptr -1Ch\nPAGE:004DD2F6 ms_exc          = CPPEH_RECORD ptr -18h\nPAGE:004DD2F6 ProcessHandle   = dword ptr  8\nPAGE:004DD2F6 BaseAddress     = dword ptr  0Ch\nPAGE:004DD2F6 Buffer          = dword ptr  10h\nPAGE:004DD2F6 NumberOfBytesToRead= dword ptr  14h\nPAGE:004DD2F6 NumberOfBytesRead= dword ptr  18h\nPAGE:004DD2F6\nPAGE:004DD2F6 ; __unwind &#123; // __SEH_prolog\nPAGE:004DD2F6                 push    1Ch\nPAGE:004DD2F8                 push    offset stru_402EF0\nPAGE:004DD2FD                 call    __SEH_prolog\nPAGE:004DD302                 mov     eax, large fs:124h ; eax = 当前的KTHREAD\nPAGE:004DD308                 mov     edi, eax        ; edi = eax\nPAGE:004DD30A                 mov     al, [edi+_KTHREAD.PreviousMode]\nPAGE:004DD310                 mov     [ebp+AccessMode], al\nPAGE:004DD313                 mov     esi, [ebp+NumberOfBytesToRead]\nPAGE:004DD316                 test    al, al          ; 如果不是内核模式 （KernelMode = 0） 则对参数做一系列的验证。\nPAGE:004DD318                 jz      short loc_4DD380\nPAGE:004DD31A                 mov     eax, [ebp+BaseAddress]\nPAGE:004DD31D                 lea     edx, [eax+esi]\nPAGE:004DD320                 cmp     edx, eax\nPAGE:004DD322                 jb      short loc_4DD379\nPAGE:004DD324                 mov     eax, [ebp+Buffer]\nPAGE:004DD327                 lea     ecx, [eax+esi]\nPAGE:004DD32A                 cmp     ecx, eax\nPAGE:004DD32C                 jb      short loc_4DD379\nPAGE:004DD32E                 mov     eax, _MmHighestUserAddress ; MmHighestUserAddress = 0x7FFEFFFF  最高的用户层地址\nPAGE:004DD333                 cmp     edx, eax\nPAGE:004DD335                 ja      short loc_4DD379\nPAGE:004DD337                 cmp     ecx, eax\nPAGE:004DD339                 ja      short loc_4DD379\nPAGE:004DD33B                 mov     ebx, [ebp+NumberOfBytesRead] ; 判断 NumberOfBytesRead 参数是否存在（是否为NULL）\nPAGE:004DD33B                                         ;\nPAGE:004DD33B                                         ; if(NumberOfBytesRead)（是否为NULL）&#123;\nPAGE:004DD33B                                         ;\nPAGE:004DD33B                                         ; ……………………\nPAGE:004DD33B                                         ; &#125;\nPAGE:004DD33B                                         ; 不为NULL 执行 jz 跳走\nPAGE:004DD33E                 test    ebx, ebx\nPAGE:004DD340                 jz      short loc_4DD383\nPAGE:004DD342                 and     [ebp+ms_exc.registration.TryLevel], 0\nPAGE:004DD346                 mov     eax, _MmUserProbeAddress ; _MmUserProbeAddress = 0x7FFF0000 保护页的起始地址\nPAGE:004DD34B                 cmp     ebx, eax\nPAGE:004DD34D                 jb      short loc_4DD355\nPAGE:004DD34F                 mov     dword ptr [eax], 0\nPAGE:004DD355\nPAGE:004DD355 loc_4DD355:                             ; CODE XREF: NtReadVirtualMemory(x,x,x,x,x)+57↑j\nPAGE:004DD355                 mov     eax, [ebx]\nPAGE:004DD357                 mov     [ebx], eax\nPAGE:004DD359                 or      [ebp+ms_exc.registration.TryLevel], 0FFFFFFFFh\nPAGE:004DD35D                 jmp     short loc_4DD383\nPAGE:004DD35F ; ---------------------------------------------------------------------------\nPAGE:004DD35F\nPAGE:004DD35F loc_4DD35F:                             ; DATA XREF: .text:stru_402EF0↑o\nPAGE:004DD35F                 mov     eax, [ebp+ms_exc.exc_ptr]\nPAGE:004DD362                 mov     eax, [eax]\nPAGE:004DD364                 mov     eax, [eax]\nPAGE:004DD366                 mov     [ebp+var_2C], eax\nPAGE:004DD369                 xor     eax, eax\nPAGE:004DD36B                 inc     eax\nPAGE:004DD36C                 retn\nPAGE:004DD36D ; ---------------------------------------------------------------------------\nPAGE:004DD36D\nPAGE:004DD36D loc_4DD36D:                             ; DATA XREF: .text:stru_402EF0↑o\nPAGE:004DD36D                 mov     esp, [ebp+ms_exc.old_esp]\nPAGE:004DD370                 or      [ebp+ms_exc.registration.TryLevel], 0FFFFFFFFh\nPAGE:004DD374                 mov     eax, [ebp+var_2C]\nPAGE:004DD377                 jmp     short loc_4DD3F2\nPAGE:004DD379 ; ---------------------------------------------------------------------------\nPAGE:004DD379\nPAGE:004DD379 loc_4DD379:                             ; CODE XREF: NtReadVirtualMemory(x,x,x,x,x)+2C↑j\nPAGE:004DD379                                         ; NtReadVirtualMemory(x,x,x,x,x)+36↑j ...\nPAGE:004DD379                 mov     eax, 0C0000005h\nPAGE:004DD37E                 jmp     short loc_4DD3F2\nPAGE:004DD380 ; ---------------------------------------------------------------------------\nPAGE:004DD380\nPAGE:004DD380 loc_4DD380:                             ; CODE XREF: NtReadVirtualMemory(x,x,x,x,x)+22↑j\nPAGE:004DD380                 mov     ebx, [ebp+NumberOfBytesRead] ; ebx = NumberOfBytesRead\nPAGE:004DD383\nPAGE:004DD383 loc_4DD383:                             ; CODE XREF: NtReadVirtualMemory(x,x,x,x,x)+4A↑j\nPAGE:004DD383                                         ; NtReadVirtualMemory(x,x,x,x,x)+67↑j\nPAGE:004DD383                 xor     eax, eax\nPAGE:004DD385                 mov     [ebp+var_28], eax ; [ebp+var_28] = 0\nPAGE:004DD388                 mov     [ebp+var_1C], eax\nPAGE:004DD38B                 cmp     esi, eax\nPAGE:004DD38D                 jz      short loc_4DD3D2 ; ebx = NumberOfBytesRead\nPAGE:004DD38F                 push    eax             ; HandleInformation\nPAGE:004DD390                 lea     eax, [ebp+Object] ; eax = [ebp+Object] 的地址\nPAGE:004DD390                                         ;\nPAGE:004DD390                                         ; 函数执行成功后[ebp+Object]会指向一个对象体。\nPAGE:004DD390                                         ; 此处返回的是 进程结构体 EPROCESS\nPAGE:004DD393                 push    eax             ; Object\nPAGE:004DD394                 push    dword ptr [ebp+AccessMode] ; AccessMode\nPAGE:004DD397                 push    _PsProcessType  ; ObjectType\nPAGE:004DD39D                 push    10h             ; DesiredAccess\nPAGE:004DD39F                 push    [ebp+ProcessHandle] ; Handle\nPAGE:004DD3A2                 call    _ObReferenceObjectByHandle@24 ; ObReferenceObjectByHandle(x,x,x,x,x,x)\nPAGE:004DD3A7                 mov     [ebp+var_1C], eax\nPAGE:004DD3AA                 test    eax, eax\nPAGE:004DD3AC                 jnz     short loc_4DD3D2 ; ebx = NumberOfBytesRead\nPAGE:004DD3AE                 lea     eax, [ebp+var_28] ; 取临时变量的地址\nPAGE:004DD3B1                 push    eax             ; 从右向左 压入第一个参数 其值是一个地址 。\nPAGE:004DD3B2                 push    dword ptr [ebp+AccessMode] ; 其值为 CPU的工作模式\nPAGE:004DD3B5                 push    esi             ; 压入 NumberOfBytesToRead 也就是从指定进程读取的请求字节数\nPAGE:004DD3B5                                         ;\nPAGE:004DD3B5                                         ; 注意区分 NumberOfBytesRead  和 NumberOfBytesToRead\nPAGE:004DD3B6                 push    [ebp+Buffer]    ; Address\nPAGE:004DD3B9                 push    [edi+_KTHREAD.ApcState.Process] ; 当前线程的进程KPROCESS\nPAGE:004DD3BC                 push    [ebp+BaseAddress] ; int\nPAGE:004DD3BF                 push    [ebp+Object]    ; 目标进程的KPROCESS\nPAGE:004DD3C2                 call    _MmCopyVirtualMemory@28 ; NTSTATUS\nPAGE:004DD3C2                                         ; MmCopyVirtualMemory(\nPAGE:004DD3C2                                         ;     IN PEPROCESS FromProcess,\nPAGE:004DD3C2                                         ;     IN CONST VOID *FromAddress,\nPAGE:004DD3C2                                         ;     IN PEPROCESS ToProcess,\nPAGE:004DD3C2                                         ;     OUT PVOID ToAddress,\nPAGE:004DD3C2                                         ;     IN SIZE_T BufferSize,\nPAGE:004DD3C2                                         ;     IN KPROCESSOR_MODE PreviousMode,\nPAGE:004DD3C2                                         ;     OUT PSIZE_T NumberOfBytesCopied\nPAGE:004DD3C2                                         ;     )\nPAGE:004DD3C7                 mov     [ebp+var_1C], eax ; 如果成功的话返回值为0 var_1C = 0\nPAGE:004DD3CA                 mov     ecx, [ebp+Object] ; Object\nPAGE:004DD3CD                 call    @ObfDereferenceObject@4 ; 这个例程减少指定对象的引用计数，如果计数变为0，则执行 任何(whatever) 清除操作。\nPAGE:004DD3D2\nPAGE:004DD3D2 loc_4DD3D2:                             ; CODE XREF: NtReadVirtualMemory(x,x,x,x,x)+97↑j\nPAGE:004DD3D2                                         ; NtReadVirtualMemory(x,x,x,x,x)+B6↑j\nPAGE:004DD3D2                 test    ebx, ebx        ; ebx = NumberOfBytesRead\nPAGE:004DD3D4                 jz      short loc_4DD3EF\nPAGE:004DD3D6                 mov     [ebp+ms_exc.registration.TryLevel], 1\nPAGE:004DD3DD                 mov     eax, [ebp+var_28] ; var_28 指向了 传输到指定缓冲区的实际字节数。\nPAGE:004DD3E0                 mov     [ebx], eax      ; 传输到指定缓冲区的实际字节数 赋给 NumberOfBytesRead\nPAGE:004DD3E2                 jmp     short loc_4DD3EB\nPAGE:004DD3E4 ; ---------------------------------------------------------------------------\nPAGE:004DD3E4\nPAGE:004DD3E4 loc_4DD3E4:                             ; DATA XREF: .text:stru_402EF0↑o\nPAGE:004DD3E4                 xor     eax, eax\nPAGE:004DD3E6                 inc     eax\nPAGE:004DD3E7                 retn\nPAGE:004DD3E8 ; ---------------------------------------------------------------------------\nPAGE:004DD3E8\nPAGE:004DD3E8 loc_4DD3E8:                             ; DATA XREF: .text:stru_402EF0↑o\nPAGE:004DD3E8                 mov     esp, [ebp+ms_exc.old_esp]\nPAGE:004DD3EB\nPAGE:004DD3EB loc_4DD3EB:                             ; CODE XREF: NtReadVirtualMemory(x,x,x,x,x)+EC↑j\nPAGE:004DD3EB                 or      [ebp+ms_exc.registration.TryLevel], 0FFFFFFFFh\nPAGE:004DD3EF\nPAGE:004DD3EF loc_4DD3EF:                             ; CODE XREF: NtReadVirtualMemory(x,x,x,x,x)+DE↑j\nPAGE:004DD3EF                 mov     eax, [ebp+var_1C] ; 一切正常执行的话 eax = 0 既宏定义 STATUS_SUCCESS\nPAGE:004DD3F2\nPAGE:004DD3F2 loc_4DD3F2:                             ; CODE XREF: NtReadVirtualMemory(x,x,x,x,x)+81↑j\nPAGE:004DD3F2                                         ; NtReadVirtualMemory(x,x,x,x,x)+88↑j\nPAGE:004DD3F2                 call    __SEH_epilog\nPAGE:004DD3F7                 retn    14h\nPAGE:004DD3F7 ; &#125; // starts at 4DD2F6\nPAGE:004DD3F7 _NtReadVirtualMemory@20 endp\nPAGE:004DD3F7\nPAGE:004DD3F7 ; ---------------------------------------------------------------------------\n</code></pre>\n</div></details>\n<p>主要调用了 MmCopyVirtualMemory 函数。</p>\n<h3 id=\"逆向分析-mmcopyvirtualmemory\"><a class=\"anchor\" href=\"#逆向分析-mmcopyvirtualmemory\">#</a> 逆向分析 MmCopyVirtualMemory</h3>\n<details class=\"primary\"><summary>MmCopyVirtualMemory (点击展开)</summary><div>\n<pre><code>; int __stdcall MmCopyVirtualMemory(PEX_RUNDOWN_REF FromProcess, int, PRKPROCESS, volatile void *Address, SIZE_T Length, KPROCESSOR_MODE AccessMode, int NumberOfBytesRead)\nPAGE:004DD258 _MmCopyVirtualMemory@28 proc near       ; CODE XREF: IopCheckHardErrorsDisabled(x)+73↑p\nPAGE:004DD258                                         ; LpcpCopyRequestData(x,x,x,x,x,x,x):loc_4CEE57↑p ...\nPAGE:004DD258\nPAGE:004DD258 FromProcess     = dword ptr  8\nPAGE:004DD258 FromAddress     = dword ptr  0Ch\nPAGE:004DD258 ToProcess       = dword ptr  10h\nPAGE:004DD258 Address         = dword ptr  14h\nPAGE:004DD258 Length          = dword ptr  18h\nPAGE:004DD258 AccessMode      = byte ptr  1Ch\nPAGE:004DD258 NumberOfBytesRead= dword ptr  20h\nPAGE:004DD258\nPAGE:004DD258                 mov     edi, edi\nPAGE:004DD25A                 push    ebp\nPAGE:004DD25B                 mov     ebp, esp\nPAGE:004DD25D                 cmp     [ebp+Length], 0 ; NumberOfBytesToRead 判断  从指定进程读取的请求字节数，是否为0\nPAGE:004DD261                 jnz     short loc_4DD26A\nPAGE:004DD263                 xor     eax, eax\nPAGE:004DD265                 jmp     loc_4DD2ED      ;  为 0 就直接返回了\nPAGE:004DD26A ; ---------------------------------------------------------------------------\nPAGE:004DD26A\nPAGE:004DD26A loc_4DD26A:                             ; CODE XREF: MmCopyVirtualMemory(x,x,x,x,x,x,x)+9↑j\nPAGE:004DD26A                 push    ebx\nPAGE:004DD26B                 mov     ebx, [ebp+FromProcess] ; ebx = 要读取的进程的 EPROCESS 结构体。\nPAGE:004DD26E                 mov     ecx, ebx\nPAGE:004DD270                 mov     eax, large fs:124h\nPAGE:004DD276                 cmp     ebx, [eax+_KTHREAD.ApcState.Process] ; 判断要读取的进程 是否是当前进程\nPAGE:004DD279                 jnz     short loc_4DD27E\nPAGE:004DD27B                 mov     ecx, [ebp+ToProcess]\nPAGE:004DD27E\nPAGE:004DD27E loc_4DD27E:                             ; CODE XREF: MmCopyVirtualMemory(x,x,x,x,x,x,x)+21↑j\nPAGE:004DD27E                 add     ecx, 80h ; '€'  ; 取 目标EPROCESS 的 RundownProtect 成员的值\nPAGE:004DD284                 mov     [ebp+FromProcess], ecx\nPAGE:004DD287                 call    @ExAcquireRundownProtection@4 ; 获得rundown保护\nPAGE:004DD28C                 test    al, al          ; 判断是否成功\nPAGE:004DD28E                 jnz     short loc_4DD297 ; 如果成功就跳走\nPAGE:004DD290                 mov     eax, 0C000010Ah ; 返回  STATUS_PROCESS_IS_TERMINATING\nPAGE:004DD295                 jmp     short loc_4DD2EC ; 如果失败，函数执行失败 返回\nPAGE:004DD297 ; ---------------------------------------------------------------------------\nPAGE:004DD297\nPAGE:004DD297 loc_4DD297:                             ; CODE XREF: MmCopyVirtualMemory(x,x,x,x,x,x,x)+36↑j\nPAGE:004DD297                 cmp     [ebp+Length], 1FFh ; 判读要读取的字节大小是否超过0x1FF\nPAGE:004DD29E                 push    esi\nPAGE:004DD29F                 push    edi\nPAGE:004DD2A0                 mov     edi, [ebp+NumberOfBytesRead] ; edi =  指向NumberOfBytesRead的地址\nPAGE:004DD2A0                                         ;\nPAGE:004DD2A0                                         ; 在 NtReadVirtualMemory  中传来的此值是一个地址。\nPAGE:004DD2A0                                         ; 应该是返回用的\nPAGE:004DD2A3                 jbe     short loc_4DD2C8 ; 小于等于则跳转\nPAGE:004DD2A5                 push    edi             ; 压入 指向NumberOfBytesRead的地址\nPAGE:004DD2A6                 push    dword ptr [ebp+AccessMode] ; AccessMode\nPAGE:004DD2A9                 push    [ebp+Length]    ; Length\nPAGE:004DD2AC                 push    [ebp+Address]   ; ToAddress\nPAGE:004DD2AF                 push    [ebp+ToProcess] ; ToProcess\nPAGE:004DD2B2                 push    [ebp+FromAddress] ; FromAddress\nPAGE:004DD2B5                 push    ebx             ; FromProcess\nPAGE:004DD2B6                 call    _MiDoMappedCopy@28 ; NTSTATUS\nPAGE:004DD2B6                                         ; MiDoMappedCopy (\nPAGE:004DD2B6                                         ;     IN PEPROCESS FromProcess,\nPAGE:004DD2B6                                         ;     IN CONST VOID *FromAddress,\nPAGE:004DD2B6                                         ;     IN PEPROCESS ToProcess,\nPAGE:004DD2B6                                         ;     OUT PVOID ToAddress,\nPAGE:004DD2B6                                         ;     IN SIZE_T BufferSize,\nPAGE:004DD2B6                                         ;     IN KPROCESSOR_MODE PreviousMode,\nPAGE:004DD2B6                                         ;     OUT PSIZE_T NumberOfBytesRead\nPAGE:004DD2B6                                         ;     )\nPAGE:004DD2BB                 mov     esi, eax\nPAGE:004DD2BD                 cmp     esi, 0C00000A1h\nPAGE:004DD2C3                 jnz     short loc_4DD2E0\nPAGE:004DD2C5                 and     dword ptr [edi], 0\nPAGE:004DD2C8\nPAGE:004DD2C8 loc_4DD2C8:                             ; CODE XREF: MmCopyVirtualMemory(x,x,x,x,x,x,x)+4B↑j\nPAGE:004DD2C8                 push    edi             ; 压入 指向NumberOfBytesRead的地址\nPAGE:004DD2C9                 push    dword ptr [ebp+AccessMode] ; AccessMode\nPAGE:004DD2CC                 push    [ebp+Length]    ; Length\nPAGE:004DD2CF                 push    [ebp+Address]   ; ToAddress\nPAGE:004DD2D2                 push    [ebp+ToProcess] ; ToProcess\nPAGE:004DD2D5                 push    [ebp+FromAddress] ; FromAddress\nPAGE:004DD2D8                 push    ebx             ; FromProcess\nPAGE:004DD2D9                 call    _MiDoPoolCopy@28 ; NTSTATUS\nPAGE:004DD2D9                                         ; MiDoPoolCopy (\nPAGE:004DD2D9                                         ;      IN PEPROCESS FromProcess,\nPAGE:004DD2D9                                         ;      IN CONST VOID *FromAddress,\nPAGE:004DD2D9                                         ;      IN PEPROCESS ToProcess,\nPAGE:004DD2D9                                         ;      OUT PVOID ToAddress,\nPAGE:004DD2D9                                         ;      IN SIZE_T BufferSize,\nPAGE:004DD2D9                                         ;      IN KPROCESSOR_MODE PreviousMode,\nPAGE:004DD2D9                                         ;      OUT PSIZE_T NumberOfBytesRead\nPAGE:004DD2D9                                         ;      )\nPAGE:004DD2DE                 mov     esi, eax\nPAGE:004DD2E0\nPAGE:004DD2E0 loc_4DD2E0:                             ; CODE XREF: MmCopyVirtualMemory(x,x,x,x,x,x,x)+6B↑j\nPAGE:004DD2E0                 mov     ecx, [ebp+FromProcess] ; RunRef\nPAGE:004DD2E3                 call    @ExReleaseRundownProtection@4 ; ExReleaseRundownProtection(x)\nPAGE:004DD2E8                 pop     edi\nPAGE:004DD2E9                 mov     eax, esi\nPAGE:004DD2EB                 pop     esi\nPAGE:004DD2EC\nPAGE:004DD2EC loc_4DD2EC:                             ; CODE XREF: MmCopyVirtualMemory(x,x,x,x,x,x,x)+3D↑j\nPAGE:004DD2EC                 pop     ebx\nPAGE:004DD2ED\nPAGE:004DD2ED loc_4DD2ED:                             ; CODE XREF: MmCopyVirtualMemory(x,x,x,x,x,x,x)+D↑j\nPAGE:004DD2ED                 pop     ebp\nPAGE:004DD2EE                 retn    1Ch\nPAGE:004DD2EE _MmCopyVirtualMemory@28 endp\n</code></pre>\n</div></details>\n<p>这个函数会  <code>cmp     [ebp+Length], 1FFh </code> ; 判读要读取的字节大小是否超过 0x1FF，如果没有超过就会调用  <code>_MiDoPoolCopy</code>  函数，超过的话就会调用  <code>_MiDoMappedCopy</code> 。</p>\n<p><code>_MiDoMappedCopy</code>  有些地方没逆懂，但关键地方都一样。详细看  <code>_MiDoPoolCopy</code>  了。</p>\n<h3 id=\"逆向分析-_midopoolcopy\"><a class=\"anchor\" href=\"#逆向分析-_midopoolcopy\">#</a> 逆向分析 _MiDoPoolCopy</h3>\n<details class=\"primary\"><summary>_MiDoPoolCopy (点击展开)</summary><div>\n<p><img data-src=\"image004.png\" alt=\"\" /></p>\n</div></details>\n<h3 id=\"逆向分析-kestackattachprocess\"><a class=\"anchor\" href=\"#逆向分析-kestackattachprocess\">#</a> 逆向分析 KeStackAttachProcess</h3>\n<details class=\"primary\"><summary>KeStackAttachProcess (点击展开)</summary><div>\n<p><img data-src=\"image003.png\" alt=\"\" /></p>\n</div></details>\n<h3 id=\"逆向分析-kiattachprocess\"><a class=\"anchor\" href=\"#逆向分析-kiattachprocess\">#</a> 逆向分析 KiAttachProcess</h3>\n<details class=\"primary\"><summary>KiAttachProcess (点击展开)</summary><div>\n<p><img data-src=\"image002.png\" alt=\"\" /></p>\n</div></details>\n<h3 id=\"逆向分析-kiswapprocess\"><a class=\"anchor\" href=\"#逆向分析-kiswapprocess\">#</a> 逆向分析 KiSwapProcess</h3>\n<details class=\"primary\"><summary>KiSwapProcess (点击展开)</summary><div>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n</div></details>\n<h3 id=\"函数调用流程中的各个函数总结\"><a class=\"anchor\" href=\"#函数调用流程中的各个函数总结\">#</a> 函数调用流程中的各个函数总结</h3>\n<details class=\"info\"><summary>NtReadVirtualMemory实现路径 (点击展开)</summary><div>\n<ol>\n<li>\n<p><code>NtReadVirtualMemory</code>  做了一些验证后调用了  <code>MmCopyVirtualMemory</code></p>\n</li>\n<li>\n<p><code>MmCopyVirtualMemory</code>  在这个函数中判断了缓冲区的大小，如果缓冲区大小大于池移动阈值，则尝试通过直接映射写入内存。这里根据情况调用  <code>MiDoMappedCopy</code>  和  <code>MiDoPoolCopy</code> 。</p>\n</li>\n<li>\n<p><code>MiDoMappedCopy</code>  函数有很多结构体还没学，暂时逆不懂，先逆  <code>MiDoPoolCopy</code>  了。  <code>MiDoPoolCopy</code>  函数在读取内存的方法是先在内核层申请一份和要读取的字节大小一样的内存，然后调用了  <code>KeStackAttachProcess</code>  函数。</p>\n<ul>\n<li>这里先说  <code>KeStackAttachProcess</code>  函数了，这个函数首先判断了要附加的进程是不是当前进程，然后又判断当前线程是不是已经处于挂靠状态了，如果处于挂靠状态的话，把原来的 APC 状态保存到 ApcState 变量中，否则的话就把原来的 APC 状态保存到线程结构体的 KTHREAD 的  <code>SavedApcState</code>  成员中。  这里是判断之后调用  <code>KiAttachProcess </code> 函数时传递的参数不一样来实现的。</li>\n</ul>\n<p>如下：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Thread<span class=\"token operator\">-></span>ApcStateIndex <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 已经处于挂靠状态</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>            <span class=\"token function\">KiAttachProcess</span><span class=\"token punctuation\">(</span>Thread<span class=\"token punctuation\">,</span> Process<span class=\"token punctuation\">,</span> OldIrql<span class=\"token punctuation\">,</span> ApcState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 会把原来的 APC 状态赋给 ApcState 变量，是上层函数返回的变量。</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 没有处于挂靠状态</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token function\">KiAttachProcess</span><span class=\"token punctuation\">(</span>Thread<span class=\"token punctuation\">,</span> Process<span class=\"token punctuation\">,</span> OldIrql<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>Thread<span class=\"token operator\">-></span>SavedApcState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 传递当前线程的 SavedApcState，用它来接收以前的 APC 状态。</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            ApcState<span class=\"token operator\">-></span>Process <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 标识一下，在 KeStackAttachProcess 中会判断</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>\n<p>在 <code>KiAttachProcess </code> 函数中，先把当前线程 KTEHREAD 的 ApcState 成员保存了一份赋值给了一个指针变量 ，这个指针变量是这个函数的参数，如果线程已将处于挂靠状态，那么这个指针变量就是上层函数的临时变量，如果没有处于挂靠状态那么这个指针变量就是当前线程 KTHREAD 的 <code>SavedApcState</code>  成员。<br />\n然后把当前线程 KTHREAD 的  <code>ApcState</code>  保存到了这个指针变量中，<strong>这一步既保存了没挂靠前的 APC 状态</strong>，之后初始化新的线程 KTHREAD 的  <code>ApcState</code>  成员。<br />\n然后判断目标进程的状态是否在内存中，如果在内存中，就把所有处于 ready 状态的线程，移动到全局就绪链表中，然后调用了  <code>KiSwapProcess</code>  函数后就返回了。<br />\n如果进程的状态不是在内存中，则判断其状态是不是 ProcessOutOfMemory 既不在内存中，如果是则设置其状态为正在转移，然后把进程 KPROCESS 的  <code>SwapListEntry</code>  成员挂入到  <code>KiProcessInSwapListHead</code>  中。<br />\n<strong> <code>SwapListEntry</code>  成员在《Windows 内核原理与实现》一书中有介绍：  <code>KiProcessInSwapListHead</code>  这是等待被插入的进程链表，它是一个单链表。当一个进程要被换出内存时，通过此成员加入到以  <code>KiProcessOutSwapListHead</code>  为链头的单链表中；当一个进程要被换入内存时，通过此成员加入到以  <code>KiProcessInSwapListHead</code>  为链头的单链表中。</strong><br />\n如果状态不是 ProcessOutOfMemory 的话，会直接执行这一步： 清除前一个进程中的活动处理器位，并设置被附加进程中的活动处理器位。<br />\n绕后调用了  <code>KiSwapThread</code>  函数</p>\n<ul>\n<li>调用  <code>KiSwapProcess</code>  函数：这个函数主要更新了 GDT 中的 LDT 描述符和 IDT 中的 int 2h, 并交换 CR3 来将地址空间交换到另一个进程。 它还将 I/O 权限映射交换到新进程。</li>\n<li>调用  <code>KiSwapThread</code> ，主动调用线程切换，既把目标进程的线程激活，使其在内存中，直到线程切换切回来，因为 APC 的状态已经更换成了目标进程，而 Cr3 是取线程的 APC 状态中的进程 KPROCESS 中的  <code>DirectoryTableBase</code>  成员， 所以切换回来后，线程的 Cr3 也就改了，至此挂靠完成了。真是巧妙呀。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>挂靠后又回到了  <code>MiDoPoolCopy</code>  函数中，然后就开始复制内存了，把目标进程空间的内存，复制到了内核空间。然后调用了  <code>KeUnstackDetachProcess</code>  解除了挂靠状态， <code>KeUnstackDetachProcess</code>  最终也是调用了  <code>KiSwapProcess</code>  函数不在细说了。解除挂靠后又挂靠了回了原来的自己的进程，然后把在内核空间的内存数据复制到了，原来线程空间指定的缓存区中，然后就解除挂靠了，之后又释放了在内核空间申请的内存空间，统计了一下复制了多少字节数后返回了。</p>\n</li>\n</ol>\n</div></details>\n<h2 id=\"ntwritevirtualmemory-流程分析\"><a class=\"anchor\" href=\"#ntwritevirtualmemory-流程分析\">#</a> NtWriteVirtualMemory 流程分析</h2>\n<p>此函数的调用流程与  <code>NtReadVirtualMemory</code>  一样。</p>\n<p>NtReadVirtualMemory -&gt; MmCopyVirtualMemory -&gt; MiDoMappedCopy 或者 MiDoPoolCopy</p>\n<details class=\"info\"><summary>（点击展开）</summary><div>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>PAGE:004DD400 ; NTSTATUS __stdcall NtWriteVirtualMemory (HANDLE ProcessHandle, PVOID BaseAddress, PVOID Buffer, SIZE_T NumberOfBytesToWrite, PSIZE_T NumberOfBytesWritten)</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>PAGE:004DD400 _NtWriteVirtualMemory@20 proc near      ; DATA XREF: .text:0042D9C4↑o</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>PAGE:004DD400</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>PAGE:004DD400 var_2C          &#x3D; dword ptr -2Ch</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>PAGE:004DD400 NumberOfBytesRead&#x3D; dword ptr -28h</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>PAGE:004DD400 Object          &#x3D; dword ptr -24h</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>PAGE:004DD400 AccessMode      &#x3D; byte ptr -20h</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>PAGE:004DD400 Status          &#x3D; dword ptr -1Ch</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>PAGE:004DD400 ms_exc          &#x3D; CPPEH_RECORD ptr -18h</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>PAGE:004DD400 ProcessHandle   &#x3D; dword ptr  8</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>PAGE:004DD400 BaseAddress     &#x3D; dword ptr  0Ch</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>PAGE:004DD400 Buffer          &#x3D; dword ptr  10h</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>PAGE:004DD400 NumberOfBytesToWrite&#x3D; dword ptr  14h</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>PAGE:004DD400 NumberOfBytesWritten&#x3D; dword ptr  18h</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>PAGE:004DD400</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>PAGE:004DD400 ; __unwind &#123; &#x2F;&#x2F;__SEH_prolog</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>PAGE:004DD400                 push    1Ch</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>PAGE:004DD402                 push    offset stru_402F08</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>PAGE:004DD407                 call    __SEH_prolog</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>PAGE:004DD40C                 mov     eax, large fs:124h</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>PAGE:004DD412                 mov     edi, eax        ; edi &#x3D; 当先线程的 KTHREAD</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>PAGE:004DD414                 mov     al, [edi+_KTHREAD.PreviousMode]</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>PAGE:004DD41A                 mov     [ebp+AccessMode], al</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>PAGE:004DD41D                 mov     esi, [ebp+NumberOfBytesToWrite] ; esi &#x3D; NumberOfBytesToWrite</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>PAGE:004DD420                 test    al, al          ; 与操作 判断 al 是否等于 0，既当前模式是否是内核模式</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>PAGE:004DD422                 jz      short loc_4DD48A</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>PAGE:004DD424                 mov     eax, [ebp+BaseAddress]</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>PAGE:004DD427                 lea     edx, [eax+esi]  ; edx &#x3D; BaseAddress + NuberOfBytesToWrite</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>PAGE:004DD42A                 cmp     edx, eax</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>PAGE:004DD42C                 jb      short loc_4DD483</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>PAGE:004DD42E                 mov     eax, [ebp+Buffer]</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>PAGE:004DD431                 lea     ecx, [eax+esi]</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>PAGE:004DD434                 cmp     ecx, eax</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>PAGE:004DD436                 jb      short loc_4DD483</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>PAGE:004DD438                 mov     eax, _MmHighestUserAddress</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>PAGE:004DD43D                 cmp     edx, eax</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>PAGE:004DD43F                 ja      short loc_4DD483</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>PAGE:004DD441                 cmp     ecx, eax</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>PAGE:004DD443                 ja      short loc_4DD483 ; if ( (BaseAddress + NuberOfBytesToWrite &gt; BaseAddress) ||</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>PAGE:004DD443                                         ; (Buffer + NuberOfBytesToWrite &gt; Buffer) ||</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>PAGE:004DD443                                         ; (BaseAddress + NuberOfBytesToWrite) &gt; MM_HIGHEST_USER_ADDRESS) ||</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>PAGE:004DD443                                         ; (Buffer + NuberOfBytesToWrite) &gt; MM_HIGHEST_USER_ADDRESS))</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>PAGE:004DD443                                         ;</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>PAGE:004DD443                                         ; )&#123;</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>PAGE:004DD443                                         ;    return ……</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>PAGE:004DD443                                         ; &#125;</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>PAGE:004DD445                 mov     ebx, [ebp+NumberOfBytesWritten]</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>PAGE:004DD448                 test    ebx, ebx        ; 判断 NumberOfBytesWritten 是否为 空 因为是可选参数</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>PAGE:004DD44A                 jz      short loc_4DD48D ; 如果为空就跳转</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>PAGE:004DD44C                 and     [ebp+ms_exc.registration.TryLevel], 0</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>PAGE:004DD450                 mov     eax, _MmUserProbeAddress ; _MmUserProbeAddress &#x3D; 0x7FFF0000 保护页的起始地址</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>PAGE:004DD455                 cmp     ebx, eax        ; 比较一下</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>PAGE:004DD457                 jb      short loc_4DD45F ; 小于就跳转</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>PAGE:004DD459                 mov     dword ptr [eax], 0</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>PAGE:004DD45F</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>PAGE:004DD45F loc_4DD45F:                             ; CODE XREF: NtWriteVirtualMemory (x,x,x,x,x)+57↑j</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>PAGE:004DD45F                 mov     eax, [ebx]      ; 判读一下这个值是否可读可写</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>PAGE:004DD461                 mov     [ebx], eax      ; ProbeForWriteUlong_ptr (Address) &#123;</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>PAGE:004DD461                                         ;     if ((Address) &gt;&#x3D; (ULONG_PTR * const) MM_USER_PROBE_ADDRESS) &#123;</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>PAGE:004DD461                                         ;         *(volatile ULONG_PTR * const) MM_USER_PROBE_ADDRESS &#x3D; 0;</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>PAGE:004DD461                                         ;     &#125;</pre></td></tr><tr><td data-num=\"62\"></td><td><pre>PAGE:004DD461                                         ;</pre></td></tr><tr><td data-num=\"63\"></td><td><pre>PAGE:004DD461                                         ;     *(volatile ULONG_PTR *)(Address) &#x3D; *(volatile ULONG_PTR *)(Address);</pre></td></tr><tr><td data-num=\"64\"></td><td><pre>PAGE:004DD461                                         ; &#125;</pre></td></tr><tr><td data-num=\"65\"></td><td><pre>PAGE:004DD463                 or      [ebp+ms_exc.registration.TryLevel], 0FFFFFFFFh</pre></td></tr><tr><td data-num=\"66\"></td><td><pre>PAGE:004DD467                 jmp     short loc_4DD48D</pre></td></tr><tr><td data-num=\"67\"></td><td><pre>PAGE:004DD469 ; ---------------------------------------------------------------------------</pre></td></tr><tr><td data-num=\"68\"></td><td><pre>PAGE:004DD469</pre></td></tr><tr><td data-num=\"69\"></td><td><pre>PAGE:004DD469 loc_4DD469:                             ; DATA XREF: .text:stru_402F08↑o</pre></td></tr><tr><td data-num=\"70\"></td><td><pre>PAGE:004DD469                 mov     eax, [ebp+ms_exc.exc_ptr]</pre></td></tr><tr><td data-num=\"71\"></td><td><pre>PAGE:004DD46C                 mov     eax, [eax]</pre></td></tr><tr><td data-num=\"72\"></td><td><pre>PAGE:004DD46E                 mov     eax, [eax]</pre></td></tr><tr><td data-num=\"73\"></td><td><pre>PAGE:004DD470                 mov     [ebp+var_2C], eax</pre></td></tr><tr><td data-num=\"74\"></td><td><pre>PAGE:004DD473                 xor     eax, eax</pre></td></tr><tr><td data-num=\"75\"></td><td><pre>PAGE:004DD475                 inc     eax</pre></td></tr><tr><td data-num=\"76\"></td><td><pre>PAGE:004DD476                 retn</pre></td></tr><tr><td data-num=\"77\"></td><td><pre>PAGE:004DD477 ; ---------------------------------------------------------------------------</pre></td></tr><tr><td data-num=\"78\"></td><td><pre>PAGE:004DD477</pre></td></tr><tr><td data-num=\"79\"></td><td><pre>PAGE:004DD477 loc_4DD477:                             ; DATA XREF: .text:stru_402F08↑o</pre></td></tr><tr><td data-num=\"80\"></td><td><pre>PAGE:004DD477                 mov     esp, [ebp+ms_exc.old_esp]</pre></td></tr><tr><td data-num=\"81\"></td><td><pre>PAGE:004DD47A                 or      [ebp+ms_exc.registration.TryLevel], 0FFFFFFFFh</pre></td></tr><tr><td data-num=\"82\"></td><td><pre>PAGE:004DD47E                 mov     eax, [ebp+var_2C]</pre></td></tr><tr><td data-num=\"83\"></td><td><pre>PAGE:004DD481                 jmp     short loc_4DD4FC</pre></td></tr><tr><td data-num=\"84\"></td><td><pre>PAGE:004DD483 ; ---------------------------------------------------------------------------</pre></td></tr><tr><td data-num=\"85\"></td><td><pre>PAGE:004DD483</pre></td></tr><tr><td data-num=\"86\"></td><td><pre>PAGE:004DD483 loc_4DD483:                             ; CODE XREF: NtWriteVirtualMemory (x,x,x,x,x)+2C↑j</pre></td></tr><tr><td data-num=\"87\"></td><td><pre>PAGE:004DD483                                         ; NtWriteVirtualMemory (x,x,x,x,x)+36↑j ...</pre></td></tr><tr><td data-num=\"88\"></td><td><pre>PAGE:004DD483                 mov     eax, 0C0000005h</pre></td></tr><tr><td data-num=\"89\"></td><td><pre>PAGE:004DD488                 jmp     short loc_4DD4FC</pre></td></tr><tr><td data-num=\"90\"></td><td><pre>PAGE:004DD48A ; ---------------------------------------------------------------------------</pre></td></tr><tr><td data-num=\"91\"></td><td><pre>PAGE:004DD48A</pre></td></tr><tr><td data-num=\"92\"></td><td><pre>PAGE:004DD48A loc_4DD48A:                             ; CODE XREF: NtWriteVirtualMemory (x,x,x,x,x)+22↑j</pre></td></tr><tr><td data-num=\"93\"></td><td><pre>PAGE:004DD48A                 mov     ebx, [ebp+NumberOfBytesWritten]</pre></td></tr><tr><td data-num=\"94\"></td><td><pre>PAGE:004DD48D</pre></td></tr><tr><td data-num=\"95\"></td><td><pre>PAGE:004DD48D loc_4DD48D:                             ; CODE XREF: NtWriteVirtualMemory (x,x,x,x,x)+4A↑j</pre></td></tr><tr><td data-num=\"96\"></td><td><pre>PAGE:004DD48D                                         ; NtWriteVirtualMemory (x,x,x,x,x)+67↑j</pre></td></tr><tr><td data-num=\"97\"></td><td><pre>PAGE:004DD48D                 xor     eax, eax</pre></td></tr><tr><td data-num=\"98\"></td><td><pre>PAGE:004DD48F                 mov     [ebp+NumberOfBytesRead], eax ; NumberOfBytesRead &#x3D; 0</pre></td></tr><tr><td data-num=\"99\"></td><td><pre>PAGE:004DD492                 mov     [ebp+Status], eax</pre></td></tr><tr><td data-num=\"100\"></td><td><pre>PAGE:004DD495                 cmp     esi, eax        ; esi &#x3D; NumberOfBytesToWrite</pre></td></tr><tr><td data-num=\"101\"></td><td><pre>PAGE:004DD495                                         ; 判断要写入的字节数是否为 0</pre></td></tr><tr><td data-num=\"102\"></td><td><pre>PAGE:004DD497                 jz      short loc_4DD4DC</pre></td></tr><tr><td data-num=\"103\"></td><td><pre>PAGE:004DD499                 push    eax             ; HandleInformation</pre></td></tr><tr><td data-num=\"104\"></td><td><pre>PAGE:004DD49A                 lea     eax, [ebp+Object]</pre></td></tr><tr><td data-num=\"105\"></td><td><pre>PAGE:004DD49D                 push    eax             ; Object</pre></td></tr><tr><td data-num=\"106\"></td><td><pre>PAGE:004DD49E                 push    dword ptr [ebp+AccessMode] ; AccessMode</pre></td></tr><tr><td data-num=\"107\"></td><td><pre>PAGE:004DD4A1                 push    _PsProcessType  ; ObjectType</pre></td></tr><tr><td data-num=\"108\"></td><td><pre>PAGE:004DD4A7                 push    20h ; &#39; &#39;       ; DesiredAccess</pre></td></tr><tr><td data-num=\"109\"></td><td><pre>PAGE:004DD4A9                 push    [ebp+ProcessHandle] ; Handle</pre></td></tr><tr><td data-num=\"110\"></td><td><pre>PAGE:004DD4AC                 call    _ObReferenceObjectByHandle@24 ; ObReferenceObjectByHandle (x,x,x,x,x,x)</pre></td></tr><tr><td data-num=\"111\"></td><td><pre>PAGE:004DD4B1                 mov     [ebp+Status], eax ; Status &#x3D; ObReferenceObjectByHandle (ProcessHandle,</pre></td></tr><tr><td data-num=\"112\"></td><td><pre>PAGE:004DD4B1                                         ;                                            PROCESS_VM_WRITE,</pre></td></tr><tr><td data-num=\"113\"></td><td><pre>PAGE:004DD4B1                                         ;                                            PsProcessType,</pre></td></tr><tr><td data-num=\"114\"></td><td><pre>PAGE:004DD4B1                                         ;                                            PreviousMode,</pre></td></tr><tr><td data-num=\"115\"></td><td><pre>PAGE:004DD4B1                                         ;                                            (PVOID *)&amp;Process,</pre></td></tr><tr><td data-num=\"116\"></td><td><pre>PAGE:004DD4B1                                         ;                                            NULL);</pre></td></tr><tr><td data-num=\"117\"></td><td><pre>PAGE:004DD4B4                 test    eax, eax        ; 判断是否执行成功</pre></td></tr><tr><td data-num=\"118\"></td><td><pre>PAGE:004DD4B6                 jnz     short loc_4DD4DC</pre></td></tr><tr><td data-num=\"119\"></td><td><pre>PAGE:004DD4B8                 lea     eax, [ebp+NumberOfBytesRead]</pre></td></tr><tr><td data-num=\"120\"></td><td><pre>PAGE:004DD4BB                 push    eax             ; NumberOfBytesRead</pre></td></tr><tr><td data-num=\"121\"></td><td><pre>PAGE:004DD4BC                 push    dword ptr [ebp+AccessMode] ; AccessMode</pre></td></tr><tr><td data-num=\"122\"></td><td><pre>PAGE:004DD4BF                 push    esi             ; Length</pre></td></tr><tr><td data-num=\"123\"></td><td><pre>PAGE:004DD4C0                 push    [ebp+BaseAddress] ; Address</pre></td></tr><tr><td data-num=\"124\"></td><td><pre>PAGE:004DD4C3                 push    [ebp+Object]    ; 目标进程 KPROCESS</pre></td></tr><tr><td data-num=\"125\"></td><td><pre>PAGE:004DD4C6                 push    [ebp+Buffer]    ; int</pre></td></tr><tr><td data-num=\"126\"></td><td><pre>PAGE:004DD4C9                 push    [edi+_KTHREAD.ApcState.Process] ; 当前线程的进程 KPROCESS</pre></td></tr><tr><td data-num=\"127\"></td><td><pre>PAGE:004DD4CC                 call    _MmCopyVirtualMemory@28 ; NTSTATUS</pre></td></tr><tr><td data-num=\"128\"></td><td><pre>PAGE:004DD4CC                                         ; MmCopyVirtualMemory (</pre></td></tr><tr><td data-num=\"129\"></td><td><pre>PAGE:004DD4CC                                         ;     IN PEPROCESS FromProcess,</pre></td></tr><tr><td data-num=\"130\"></td><td><pre>PAGE:004DD4CC                                         ;     IN CONST VOID *FromAddress,</pre></td></tr><tr><td data-num=\"131\"></td><td><pre>PAGE:004DD4CC                                         ;     IN PEPROCESS ToProcess,</pre></td></tr><tr><td data-num=\"132\"></td><td><pre>PAGE:004DD4CC                                         ;     OUT PVOID ToAddress,</pre></td></tr><tr><td data-num=\"133\"></td><td><pre>PAGE:004DD4CC                                         ;     IN SIZE_T BufferSize,</pre></td></tr><tr><td data-num=\"134\"></td><td><pre>PAGE:004DD4CC                                         ;     IN KPROCESSOR_MODE PreviousMode,</pre></td></tr><tr><td data-num=\"135\"></td><td><pre>PAGE:004DD4CC                                         ;     OUT PSIZE_T NumberOfBytesCopied</pre></td></tr><tr><td data-num=\"136\"></td><td><pre>PAGE:004DD4CC                                         ;     )</pre></td></tr><tr><td data-num=\"137\"></td><td><pre>PAGE:004DD4D1                 mov     [ebp+Status], eax</pre></td></tr><tr><td data-num=\"138\"></td><td><pre>PAGE:004DD4D4                 mov     ecx, [ebp+Object] ; Object</pre></td></tr><tr><td data-num=\"139\"></td><td><pre>PAGE:004DD4D7                 call    @ObfDereferenceObject@4 ; ObfDereferenceObject (x)</pre></td></tr><tr><td data-num=\"140\"></td><td><pre>PAGE:004DD4DC</pre></td></tr><tr><td data-num=\"141\"></td><td><pre>PAGE:004DD4DC loc_4DD4DC:                             ; CODE XREF: NtWriteVirtualMemory (x,x,x,x,x)+97↑j</pre></td></tr><tr><td data-num=\"142\"></td><td><pre>PAGE:004DD4DC                                         ; NtWriteVirtualMemory (x,x,x,x,x)+B6↑j</pre></td></tr><tr><td data-num=\"143\"></td><td><pre>PAGE:004DD4DC                 test    ebx, ebx</pre></td></tr><tr><td data-num=\"144\"></td><td><pre>PAGE:004DD4DE                 jz      short loc_4DD4F9</pre></td></tr><tr><td data-num=\"145\"></td><td><pre>PAGE:004DD4E0                 mov     [ebp+ms_exc.registration.TryLevel], 1</pre></td></tr><tr><td data-num=\"146\"></td><td><pre>PAGE:004DD4E7                 mov     eax, [ebp+NumberOfBytesRead]</pre></td></tr><tr><td data-num=\"147\"></td><td><pre>PAGE:004DD4EA                 mov     [ebx], eax</pre></td></tr><tr><td data-num=\"148\"></td><td><pre>PAGE:004DD4EC                 jmp     short loc_4DD4F5</pre></td></tr><tr><td data-num=\"149\"></td><td><pre>PAGE:004DD4EE ; ---------------------------------------------------------------------------</pre></td></tr><tr><td data-num=\"150\"></td><td><pre>PAGE:004DD4EE</pre></td></tr><tr><td data-num=\"151\"></td><td><pre>PAGE:004DD4EE loc_4DD4EE:                             ; DATA XREF: .text:stru_402F08↑o</pre></td></tr><tr><td data-num=\"152\"></td><td><pre>PAGE:004DD4EE                 xor     eax, eax</pre></td></tr><tr><td data-num=\"153\"></td><td><pre>PAGE:004DD4F0                 inc     eax</pre></td></tr><tr><td data-num=\"154\"></td><td><pre>PAGE:004DD4F1                 retn</pre></td></tr><tr><td data-num=\"155\"></td><td><pre>PAGE:004DD4F2 ; ---------------------------------------------------------------------------</pre></td></tr><tr><td data-num=\"156\"></td><td><pre>PAGE:004DD4F2</pre></td></tr><tr><td data-num=\"157\"></td><td><pre>PAGE:004DD4F2 loc_4DD4F2:                             ; DATA XREF: .text:stru_402F08↑o</pre></td></tr><tr><td data-num=\"158\"></td><td><pre>PAGE:004DD4F2                 mov     esp, [ebp+ms_exc.old_esp]</pre></td></tr><tr><td data-num=\"159\"></td><td><pre>PAGE:004DD4F5</pre></td></tr><tr><td data-num=\"160\"></td><td><pre>PAGE:004DD4F5 loc_4DD4F5:                             ; CODE XREF: NtWriteVirtualMemory (x,x,x,x,x)+EC↑j</pre></td></tr><tr><td data-num=\"161\"></td><td><pre>PAGE:004DD4F5                 or      [ebp+ms_exc.registration.TryLevel], 0FFFFFFFFh</pre></td></tr><tr><td data-num=\"162\"></td><td><pre>PAGE:004DD4F9</pre></td></tr><tr><td data-num=\"163\"></td><td><pre>PAGE:004DD4F9 loc_4DD4F9:                             ; CODE XREF: NtWriteVirtualMemory (x,x,x,x,x)+DE↑j</pre></td></tr><tr><td data-num=\"164\"></td><td><pre>PAGE:004DD4F9                 mov     eax, [ebp+Status]</pre></td></tr><tr><td data-num=\"165\"></td><td><pre>PAGE:004DD4FC</pre></td></tr><tr><td data-num=\"166\"></td><td><pre>PAGE:004DD4FC loc_4DD4FC:                             ; CODE XREF: NtWriteVirtualMemory (x,x,x,x,x)+81↑j</pre></td></tr><tr><td data-num=\"167\"></td><td><pre>PAGE:004DD4FC                                         ; NtWriteVirtualMemory (x,x,x,x,x)+88↑j</pre></td></tr><tr><td data-num=\"168\"></td><td><pre>PAGE:004DD4FC                 call    __SEH_epilog</pre></td></tr><tr><td data-num=\"169\"></td><td><pre>PAGE:004DD501                 retn    14h</pre></td></tr><tr><td data-num=\"170\"></td><td><pre>PAGE:004DD501 ; &#125; &#x2F;&#x2F;starts at 4DD400</pre></td></tr><tr><td data-num=\"171\"></td><td><pre>PAGE:004DD501 _NtWriteVirtualMemory@20 endp</pre></td></tr><tr><td data-num=\"172\"></td><td><pre>PAGE:004DD501</pre></td></tr><tr><td data-num=\"173\"></td><td><pre>PAGE:004DD501 ; ---------------------------------------------------------------------------</pre></td></tr></table></figure></div></details>\n<p>传递的参数不一样，就造成了不一样的效果。</p>\n<p>分完就会发现读写的操作完全是一个逆过程。</p>\n<h1 id=\"总结-2\"><a class=\"anchor\" href=\"#总结-2\">#</a> 总结</h1>\n<p>NtReadVirtualMemory 流程解析：</p>\n<p><img data-src=\"image005.png\" alt=\"\" /></p>\n<p>NtWriteVirtualMemory 流程解析：</p>\n<p><img data-src=\"image006.png\" alt=\"\" /></p>\n<p>分析其不同：<br />\nNtReadVirtualMemory</p>\n<p><img data-src=\"image007.png\" alt=\"\" /></p>\n<p>NtWriteVirtualMemory</p>\n<p><img data-src=\"image008.png\" alt=\"\" /></p>\n<h2 id=\"实践\"><a class=\"anchor\" href=\"#实践\">#</a> 实践</h2>\n<p>重写函数</p>\n<p>R0 R3 ?</p>\n",
            "tags": [
                "进程挂靠",
                "跨进程读写内存",
                "APC",
                "逆向分析NtReadVirtualMemory",
                "逆向分析NtWriteVIrtualMemory"
            ]
        },
        {
            "id": "https://or0kit.github.io/Bin/Core/WindowsXp/Process-Thread/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B-Windows%E7%BA%BF%E7%A8%8B%E5%88%87%E6%8D%A2/",
            "url": "https://or0kit.github.io/Bin/Core/WindowsXp/Process-Thread/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B-Windows%E7%BA%BF%E7%A8%8B%E5%88%87%E6%8D%A2/",
            "title": "进程与线程-Windows线程切换",
            "date_published": "2022-01-21T07:33:33.000Z",
            "content_html": "<h1 id=\"楔子\"><a class=\"anchor\" href=\"#楔子\">#</a> 楔子</h1>\n<p>线程切换是操作系统的核心内容，几乎所有的内核 API 都会调用切换线程的函数。</p>\n<blockquote>\n<p>我们要解决以下这些问题，带着问题去学习。</p>\n</blockquote>\n<ol>\n<li>SwapContext 有几个参数，分别是什么？</li>\n<li>SwapContext 在哪里实现了线程切换</li>\n<li>线程切换的时候，会切换 CR3 吗？切换 CR3 的条件是什么？</li>\n<li>中断门提权时，CPU 会从 TSS 得到 ESP0 和 SS0，TSS 中存储的一定是当前线程的 ESP0 和 SS0 吗？如何做到的？</li>\n<li>FS:[0] 在 3 环指向 TEB，但是线程有很多，FS:[0] 指向的是哪个线程的 TEB，如何做到的？</li>\n<li>0 环的 ExceptionList 在哪里备份的？</li>\n<li>IdleThread 是什么？什么时候执行？找到这个函数.</li>\n<li>如何找到下一个就绪线程？</li>\n<li>模拟线程切换与 Windows 线程切换有哪些区别？</li>\n</ol>\n<h1 id=\"windows线程切换\"><a class=\"anchor\" href=\"#windows线程切换\">#</a> Windows 线程切换</h1>\n<h2 id=\"主动切换切换\"><a class=\"anchor\" href=\"#主动切换切换\">#</a> 主动切换切换</h2>\n<p>在上一篇模模拟 Windows 线程切换 (ThreadSwitch) 中，有一个重要的函数： <code>SwitchContext</code>  只有调用这个函数，就会导致线程切换。<br />\nWindows 也有类似的函数： <code>KiSwapContext</code></p>\n<h3 id=\"kiswapcontext函数\"><a class=\"anchor\" href=\"#kiswapcontext函数\">#</a> KiSwapContext 函数</h3>\n<p>此函数在内核文件  <code>ntkrnlpa.exe</code> / <code>ntoskrnl.exe</code>  中。</p>\n<p>在 IDA 中查看其反汇编：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>.text:0046EA9C ; __fastcall KiSwapContext (x)</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>.text:0046EA9C @KiSwapContext@4 proc near              ; CODE XREF: KiSwapThread ()+85↑p</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>.text:0046EA9C</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>.text:0046EA9C var_10          &#x3D; dword ptr -10h</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>.text:0046EA9C var_C           &#x3D; dword ptr -0Ch</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>.text:0046EA9C var_8           &#x3D; dword ptr -8</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>.text:0046EA9C var_4           &#x3D; dword ptr -4</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>.text:0046EA9C</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>.text:0046EA9C                 sub     esp, 10h        ; 使用 fastcall 调用方式。</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>.text:0046EA9C                                         ; 寄存器传参，因此要将使用到的寄存器保存在堆栈中。</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>.text:0046EA9F                 mov     [esp+0Ch], ebx  ; 入栈</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>.text:0046EAA3                 mov     [esp+8], esi</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>.text:0046EAA7                 mov     [esp+4], edi</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>.text:0046EAAB                 mov     [esp], ebp</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>.text:0046EAAE                 mov     ebx, large fs:1Ch ; _KPCR.SelfPcr</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>.text:0046EAB5                 mov     esi, ecx        ; ecx: 新线程的_ETHREAD</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>.text:0046EAB7                 mov     edi, [ebx+124h] ; 取当前正在运行的线程的结构体</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>.text:0046EABD                 mov     [ebx+124h], esi ; 修改 KPCR，换成新线程的 ETHREAD 结构体</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>.text:0046EAC3                 mov     cl, [edi+58h]   ; _ETHREAD.Tcb.WaitIrql</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>.text:0046EAC6                 call    SwapContext</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>.text:0046EACB                 mov     ebp, [esp]      ; 恢复新线程各种寄存器</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>.text:0046EACE                 mov     edi, [esp+4]</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>.text:0046EAD2                 mov     esi, [esp+8]</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>.text:0046EAD6                 mov     ebx, [esp+0Ch]</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>.text:0046EADA                 add     esp, 10h</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>.text:0046EADD                 retn</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>.text:0046EADD @KiSwapContext@4 endp</pre></td></tr></table></figure><p>这个函数并不是真正的线程切换，只是更改了 KPCR 中的 ETHREAD 结构体。把要旧的结构体换成了新的。</p>\n<p>关于  <code>SwapContext</code>  函数，后面在详细对其逆向分析。</p>\n<h3 id=\"查看调用kiswapcontext的函数\"><a class=\"anchor\" href=\"#查看调用kiswapcontext的函数\">#</a> 查看调用 KiSwapContext 的函数</h3>\n<p>在 IDA 中使用交叉引用：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Direction</th>\n<th style=\"text-align:left\">Type</th>\n<th style=\"text-align:left\">Address</th>\n<th style=\"text-align:left\">Text</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">Up</td>\n<td style=\"text-align:left\">p</td>\n<td style=\"text-align:left\">KiSwapThread()+85</td>\n<td style=\"text-align:left\">call    @KiSwapContext@4; KiSwapContext(x)</td>\n</tr>\n</tbody>\n</table>\n<p>发现 KiSwapThread 调用的 KiSwaoContext 。接着查看 KiSwapThread 的交叉引用：</p>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<p>发现有 7 个函数调用了 KiSwapThread 。我们再随便找一个函数，查看其交叉引用：</p>\n<p><img data-src=\"image002.png\" alt=\"\" /></p>\n<p>发现有 270 个函数，这就意味着我们调用了这里面的任何一个函数都会导致线程切换，而这些函数还有上层调用的它们的函数，所以我们可以得出一个结论：<strong>Windows 中绝大部分 API 都调用了 SwapContext 函数</strong>，也就是说，当前线程只要调用了 API，就会导致线程切换。</p>\n<h3 id=\"swapcontext-函数\"><a class=\"anchor\" href=\"#swapcontext-函数\">#</a> SwapContext 函数</h3>\n<p>这个函数目前我还不能完全理解。大部分是偷看海哥视频里的注释。</p>\n<p>在 IDA 中逆向分析如下：</p>\n<p><img data-src=\"image003.png\" alt=\"\" /></p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>.text:0046EBC0 SwapContext     proc near               ; CODE XREF: KiUnlockDispatcherDatabase (x)+99↑p</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>.text:0046EBC0                                         ; KiSwapContext (x)+2A↑p ...</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>.text:0046EBC0</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>.text:0046EBC0 ; FUNCTION CHUNK AT .text:0046ED48 SIZE 00000033 BYTES</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>.text:0046EBC0</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>.text:0046EBC0                 or      cl, cl</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>.text:0046EBC2                 mov     es:[esi+_ETHREAD.Tcb.State], 2 ; 1 就绪 2 运行 5 等待</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>.text:0046EBC7                 pushf</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>.text:0046EBC8                 lea     ecx, [ebx+540h]</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>.text:0046EBCE                 call    @KeAcquireQueuedSpinLockAtDpcLevel@4 ; KeAcquireQueuedSpinLockAtDpcLevel (x)</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>.text:0046EBD3                 lea     ecx, [ebx+_KPCR.PrcbData.LockQueue]</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>.text:0046EBD9                 call    @KeReleaseQueuedSpinLockFromDpcLevel@4 ; KeReleaseQueuedSpinLockFromDpcLevel (x)</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>.text:0046EBDE</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>.text:0046EBDE loc_46EBDE:                             ; CODE XREF: KiIdleLoop ()+7C↓j</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>.text:0046EBDE                 mov     ecx, [ebx+_KPCR.NtTib.ExceptionList] ; 保存本线程切换时的内核 SEH 链表</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>.text:0046EBE0                 cmp     [ebx+_KPCR.PrcbData.DpcRoutineActive], 0 ; 是否有 DPC 有就蓝屏</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>.text:0046EBE7                 push    ecx</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>.text:0046EBE8                 jnz     loc_46ED71</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>.text:0046EBEE                 cmp     ds:_PPerfGlobalGroupMask, 0 ; LOG 用的 Windows 自己调试用的 别的地方没有用</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>.text:0046EBF5                 jnz     loc_46ED48</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>.text:0046EBFB</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>.text:0046EBFB loc_46EBFB:                             ; CODE XREF: SwapContext+190↓j</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>.text:0046EBFB                                         ; SwapContext+1A1↓j ...</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>.text:0046EBFB                 mov     ebp, cr0        ; cr0 控制寄存器可以判断当前环境是实模式还是保护模式，是否开启分页模式，写保护</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>.text:0046EBFE                 mov     edx, ebp</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>.text:0046EC00                 cmp     [edi+_ETHREAD.Tcb.NpxState], 0 ; NpxState 与浮点处理器相关，运行浮点用这个，没运行就不用。</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>.text:0046EC04                 jz      loc_46ED23      ; cr0 寄存器相关的</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>.text:0046EC0A</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>.text:0046EC0A loc_46EC0A:                             ; CODE XREF: _ScPatchFxe+E↓j</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>.text:0046EC0A                 mov     cl, [esi+_ETHREAD.Tcb.DebugActive]</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>.text:0046EC0D                 mov     [ebx+_KPCR.DebugActive], cl ; 新的线程的调试状态，更新到 KPCR 中</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>.text:0046EC10                 cli                     ; cli 不会被时钟中断了</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>.text:0046EC11                 mov     [edi+_ETHREAD.Tcb.KernelStack], esp ; 把当前的 esp 存储到旧线程的 ETHREAD 中</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>.text:0046EC14                 mov     eax, [esi+_ETHREAD.Tcb.InitialStack] ; 新线程的栈底</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>.text:0046EC17                 mov     ecx, [esi+_ETHREAD.Tcb.StackLimit]</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>.text:0046EC1A                 sub     eax, 210h       ; 减去 210H 就是将上面保存的浮点寄存器去掉 现在是真正的栈底了</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>.text:0046EC1F                 mov     [ebx+_KPCR.NtTib.StackLimit], ecx ; 更新 KPCR</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>.text:0046EC22                 mov     [ebx+_KPCR.NtTib.StackBase], eax ; 更新 KPCR</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>.text:0046EC25                 xor     ecx, ecx</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>.text:0046EC27                 mov     cl, [esi+_ETHREAD.Tcb.NpxState] ; 判断 NpxState 有没有浮点支持。</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>.text:0046EC27                                         ; 如果上一个线程和要替换的线程对浮点支持是一样的那就不用换 CR0，不一样就要换。</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>.text:0046EC2A                 and     edx, 0FFFFFFF1h</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>.text:0046EC2D                 or      ecx, edx</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>.text:0046EC2F                 or      ecx, [eax+20Ch]</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>.text:0046EC35                 cmp     ebp, ecx</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>.text:0046EC37                 jnz     loc_46ED1B</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>.text:0046EC3D                 lea     ecx, [ecx+0]</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>.text:0046EC40</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>.text:0046EC40 loc_46EC40:                             ; CODE XREF: SwapContext+15E↓j</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>.text:0046EC40                 test    dword ptr [eax-1Ch], 20000h ; 检查是否是虚拟 8086 模式，</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>.text:0046EC40                                         ; 如果不是的话 eax-10h 也就是减掉_KTRAP_FRAME 中的</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>.text:0046EC40                                         ; +0x07c V86Es            : Uint4B</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>.text:0046EC40                                         ; +0x080 V86Ds            : Uint4B</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>.text:0046EC40                                         ; +0x084 V86Fs            : Uint4B</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>.text:0046EC40                                         ; +0x088 V86Gs            : Uint4B</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>.text:0046EC40                                         ; 4 个成员。</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>.text:0046EC40                                         ; 如果是那就不减。</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>.text:0046EC47                 jnz     short loc_46EC4C ; 取 TSS（TSS 就是 3 环向 0 环切的时候，去 TSS 取 ESP0 和 SS0 别的没用）</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>.text:0046EC49                 sub     eax, 10h</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>.text:0046EC4C</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>.text:0046EC4C loc_46EC4C:                             ; CODE XREF: SwapContext+87↑j</pre></td></tr><tr><td data-num=\"62\"></td><td><pre>.text:0046EC4C                 mov     ecx, [ebx+_KPCR.TSS] ; 取 TSS（TSS 就是 3 环向 0 环切的时候，去 TSS 取 ESP0 和 SS0 别的没用）</pre></td></tr><tr><td data-num=\"63\"></td><td><pre>.text:0046EC4F                 mov     [ecx+_KTSS.Esp0], eax ; 更新 TTS 中的 Esp0</pre></td></tr><tr><td data-num=\"64\"></td><td><pre>.text:0046EC52                 mov     esp, [esi+_ETHREAD.Tcb.KernelStack] ; 将新线程的 esp 存到当前的 esp 寄存器中</pre></td></tr><tr><td data-num=\"65\"></td><td><pre>.text:0046EC55                 mov     eax, [esi+_ETHREAD.Tcb.Teb] ; 当前线程有很多状态 一份在 ETHREAD 里面 还有一个备份在 FS 中</pre></td></tr><tr><td data-num=\"66\"></td><td><pre>.text:0046EC55                                         ; 这样的好处是 在 3 环可以通过 fs 获取当前线程的信息</pre></td></tr><tr><td data-num=\"67\"></td><td><pre>.text:0046EC58                 mov     [ebx+_KPCR.NtTib.Self], eax ; 临时存储新线程的 TEB</pre></td></tr><tr><td data-num=\"68\"></td><td><pre>.text:0046EC5B                 sti                     ; 开启时钟中断</pre></td></tr><tr><td data-num=\"69\"></td><td><pre>.text:0046EC5C                 mov     eax, [edi+_ETHREAD.Tcb.ApcState.Process]</pre></td></tr><tr><td data-num=\"70\"></td><td><pre>.text:0046EC5F                 cmp     eax, [esi+_ETHREAD.Tcb.ApcState.Process] ; 查看是否是同一个进程内的线程切换</pre></td></tr><tr><td data-num=\"71\"></td><td><pre>.text:0046EC62                 mov     [edi+_ETHREAD.Tcb.IdleSwapBlock], 0</pre></td></tr><tr><td data-num=\"72\"></td><td><pre>.text:0046EC66                 jz      short loc_46ECA8 ; 如果是一个进程内的线程切换，则跳转。</pre></td></tr><tr><td data-num=\"73\"></td><td><pre>.text:0046EC68                 mov     edi, [esi+_ETHREAD.Tcb.ApcState.Process] ; 如果不是一个进程，取出新线程的进程结构体</pre></td></tr><tr><td data-num=\"74\"></td><td><pre>.text:0046EC6B                 mov     ecx, [ebx+_KPCR.SetMember]</pre></td></tr><tr><td data-num=\"75\"></td><td><pre>.text:0046EC6E                 xor     [eax+34h], ecx</pre></td></tr><tr><td data-num=\"76\"></td><td><pre>.text:0046EC71                 xor     [edi+_EPROCESS.Pcb.ActiveProcessors], ecx ; ActiveProcessors 记录了当前进程正在哪些处理器上运行</pre></td></tr><tr><td data-num=\"77\"></td><td><pre>.text:0046EC74                 test    [edi+_EPROCESS.Pcb.LdtDescriptor.LimitLow], 0FFFFh ; 判断 LDT</pre></td></tr><tr><td data-num=\"78\"></td><td><pre>.text:0046EC7A                 jnz     short loc_46ECED</pre></td></tr><tr><td data-num=\"79\"></td><td><pre>.text:0046EC7C                 xor     eax, eax</pre></td></tr><tr><td data-num=\"80\"></td><td><pre>.text:0046EC7E</pre></td></tr><tr><td data-num=\"81\"></td><td><pre>.text:0046EC7E loc_46EC7E:                             ; CODE XREF: SwapContext+156↓j</pre></td></tr><tr><td data-num=\"82\"></td><td><pre>.text:0046EC7E                 lldt    ax              ; 修改 LDT 寄存器</pre></td></tr><tr><td data-num=\"83\"></td><td><pre>.text:0046EC81                 lea     ecx, [ebx+540h]</pre></td></tr><tr><td data-num=\"84\"></td><td><pre>.text:0046EC87                 call    @KeReleaseQueuedSpinLockFromDpcLevel@4 ; KeReleaseQueuedSpinLockFromDpcLevel (x)</pre></td></tr><tr><td data-num=\"85\"></td><td><pre>.text:0046EC8C                 xor     eax, eax</pre></td></tr><tr><td data-num=\"86\"></td><td><pre>.text:0046EC8E                 mov     gs, eax         ; GS 清零</pre></td></tr><tr><td data-num=\"87\"></td><td><pre>.text:0046EC90                 assume gs:nothing</pre></td></tr><tr><td data-num=\"88\"></td><td><pre>.text:0046EC90                 mov     eax, [edi+_EPROCESS.Pcb.DirectoryTableBase] ; 取新线程的 CR3</pre></td></tr><tr><td data-num=\"89\"></td><td><pre>.text:0046EC93                 mov     ebp, [ebx+_KPCR.TSS]</pre></td></tr><tr><td data-num=\"90\"></td><td><pre>.text:0046EC96                 mov     ecx, dword ptr [edi+_EPROCESS.Pcb.IopmOffset]</pre></td></tr><tr><td data-num=\"91\"></td><td><pre>.text:0046EC99                 mov     [ebp+_KTSS.CR3], eax</pre></td></tr><tr><td data-num=\"92\"></td><td><pre>.text:0046EC9C                 mov     cr3, eax        ; 切换 CR3</pre></td></tr><tr><td data-num=\"93\"></td><td><pre>.text:0046EC9F                 mov     [ebp+_KTSS.IoMapBase], cx  ; 存储 IO 权限位图到 TSS。当前线程的的 IO 权限位图 Windows 2000 以后不用了。</pre></td></tr><tr><td data-num=\"94\"></td><td><pre>.text:0046ECA3                 jmp     short loc_46ECB3</pre></td></tr><tr><td data-num=\"95\"></td><td><pre>.text:0046ECA3 ; ---------------------------------------------------------------------------</pre></td></tr><tr><td data-num=\"96\"></td><td><pre>.text:0046ECA5                 align 4</pre></td></tr><tr><td data-num=\"97\"></td><td><pre>.text:0046ECA8</pre></td></tr><tr><td data-num=\"98\"></td><td><pre>.text:0046ECA8 loc_46ECA8:                             ; CODE XREF: SwapContext+A6↑j</pre></td></tr><tr><td data-num=\"99\"></td><td><pre>.text:0046ECA8                 lea     ecx, [ebx+540h]</pre></td></tr><tr><td data-num=\"100\"></td><td><pre>.text:0046ECAE                 call    @KeReleaseQueuedSpinLockFromDpcLevel@4 ; KeReleaseQueuedSpinLockFromDpcLevel (x)</pre></td></tr><tr><td data-num=\"101\"></td><td><pre>.text:0046ECB3</pre></td></tr><tr><td data-num=\"102\"></td><td><pre>.text:0046ECB3 loc_46ECB3:                             ; CODE XREF: SwapContext+E3↑j</pre></td></tr><tr><td data-num=\"103\"></td><td><pre>.text:0046ECB3                 mov     eax, [ebx+_KPCR.NtTib.Self]</pre></td></tr><tr><td data-num=\"104\"></td><td><pre>.text:0046ECB6                 mov     ecx, [ebx+_KPCR.GDT] ;  假设 GDT 表在 0x8003f000</pre></td></tr><tr><td data-num=\"105\"></td><td><pre>.text:0046ECB6                                         ; ecx &#x3D; 0x8003f000</pre></td></tr><tr><td data-num=\"106\"></td><td><pre>.text:0046ECB6                                         ; 3 环 FS &#x3D; 0x3B</pre></td></tr><tr><td data-num=\"107\"></td><td><pre>.text:0046ECB6                                         ; 所以 FS 在 GDT 表里的地址是 0x8003f03B</pre></td></tr><tr><td data-num=\"108\"></td><td><pre>.text:0046ECB6                                         ; 下面的操作是修改 FS 的段描述符，这样 3 环 FS 就能找到 TEB 了</pre></td></tr><tr><td data-num=\"109\"></td><td><pre>.text:0046ECB9                 mov     [ecx+3Ah], ax</pre></td></tr><tr><td data-num=\"110\"></td><td><pre>.text:0046ECBD                 shr     eax, 10h</pre></td></tr><tr><td data-num=\"111\"></td><td><pre>.text:0046ECC0                 mov     [ecx+3Ch], al</pre></td></tr><tr><td data-num=\"112\"></td><td><pre>.text:0046ECC3                 mov     [ecx+3Fh], ah</pre></td></tr><tr><td data-num=\"113\"></td><td><pre>.text:0046ECC6                 inc     [esi+_ETHREAD.Tcb.ContextSwitches]</pre></td></tr><tr><td data-num=\"114\"></td><td><pre>.text:0046ECC9                 inc     [ebx+_KPCR.PrcbData.KeContextSwitches]</pre></td></tr><tr><td data-num=\"115\"></td><td><pre>.text:0046ECCF                 pop     ecx</pre></td></tr><tr><td data-num=\"116\"></td><td><pre>.text:0046ECD0                 mov     [ebx], ecx</pre></td></tr><tr><td data-num=\"117\"></td><td><pre>.text:0046ECD2                 cmp     byte ptr [esi+49h], 0</pre></td></tr><tr><td data-num=\"118\"></td><td><pre>.text:0046ECD6                 jnz     short loc_46ECDC</pre></td></tr><tr><td data-num=\"119\"></td><td><pre>.text:0046ECD8                 popf</pre></td></tr><tr><td data-num=\"120\"></td><td><pre>.text:0046ECD9                 xor     eax, eax</pre></td></tr><tr><td data-num=\"121\"></td><td><pre>.text:0046ECDB                 retn</pre></td></tr></table></figure><p>结合以下的两张图可以的更好理解 <code>SwapContext</code>  函数，关于这两张图，后面会详细说明。</p>\n<p><img data-src=\"image004.png\" alt=\"\" />   <img data-src=\"image005.png\" alt=\"\" /></p>\n<h3 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h3>\n<ol>\n<li>Windows 中绝大部分 API 都调用了 SwapContext 函数</li>\n</ol>\n<p>也就是说，当线程只要调用了 API，就是导致线程切换。</p>\n<ol start=\"2\">\n<li>线程切换时会比较是否属于同一个进程，如果不是，切换 Cr3</li>\n</ol>\n<p>Cr3 换了，进程也就切换了。</p>\n<p>那么如果不调用 API，就可以一直占用 CPU 吗？</p>\n<h2 id=\"线程被动切换\"><a class=\"anchor\" href=\"#线程被动切换\">#</a> 线程被动切换</h2>\n<p>一个线程并不是必须自身调用 API 来实现线程切换，其他可以引起中断。</p>\n<p>两类：①异常 / 中断；②时钟中断。</p>\n<h3 id=\"时钟中断\"><a class=\"anchor\" href=\"#时钟中断\">#</a> 时钟中断</h3>\n<p>时钟中断走 0x30 号中断，系统每过 20ms 触发一次时钟中断来 (可能) 切换线程。</p>\n<p>如要获取当前的时钟间隔值，可使用 Win32 API： <code>GetSystemTimeAdjustment</code></p>\n<p>时钟中断的执行流程如下：</p>\n<p><img data-src=\"image006.png\" alt=\"\" /></p>\n<h4 id=\"总结-2\"><a class=\"anchor\" href=\"#总结-2\">#</a> 总结</h4>\n<p>线程切换的几种情况：</p>\n<ol>\n<li>主动调用 API 函数</li>\n<li>时钟中断</li>\n<li>异常处理</li>\n</ol>\n<p>如果一个线程不调用 API，在代码中屏蔽中断 (CLI 指令), 并且不会出现异常，那么当前线程将永久占有 CPU, 单核占有率 100%，2 核就是 50%。</p>\n<h3 id=\"时间片管理\"><a class=\"anchor\" href=\"#时间片管理\">#</a> 时间片管理</h3>\n<p>在上面我们知道时钟中断会导致线程进行切换，但并不是说只要有时钟中断就一定会切换线程，时钟中断时，两种情况会导致线程切换：</p>\n<p>1、当前的线程 CPU 时间片到期</p>\n<p>2、有备用线程 (KPCR.PrcbData.NextThread)</p>\n<h4 id=\"关于cpu时间片\"><a class=\"anchor\" href=\"#关于cpu时间片\">#</a> 关于 CPU 时间片</h4>\n<ol>\n<li>当一个新的线程开始执行时，初始化程序会在 <code>_KTHREAD.Quantum</code>  赋初始值，该值的大小由 <code>_KPROCESS.ThreadQuantum</code>  决定<br />\n (观察 <code>ThreadQuantum</code>  大小)</li>\n</ol>\n<p>这是属于某个进程的线程的  <code>Quantum</code>  的值</p>\n<p><img data-src=\"image007.png\" alt=\"\" /></p>\n<p>这是其进程的  <code>ThreadQuantum</code>  的值</p>\n<p><img data-src=\"image008.png\" alt=\"\" /></p>\n<ol start=\"2\">\n<li>每次时钟中断会调用 <code>KeUpdateRunTime</code>  函数，该函数每次将当前线程 <code>Quantum</code>  减少 3 个单位，如果减到 0，则将 <code>KPCR.PrcbData.QuantumEnd</code>  的值设置为非 0。</li>\n</ol>\n<p>在 IDA 中逆向分析  <code>KeUpdateRunTime</code>  函数：</p>\n<p><img data-src=\"image009.png\" alt=\"\" /></p>\n<p><code>KPCR.PrcbData.QuantumEnd</code>  的值代表着时间片是否用完，没有用完时它的值是 0 ，用完的话就是非 0 了。</p>\n<ol start=\"3\">\n<li><code>KiDispatchInterrupt</code>  判断时间片到期：</li>\n</ol>\n<p>调用 <code>KiQuantumEnd</code>  (重新设置时间片、找到要运行的线程)</p>\n<p>这是时钟中断最后要执行的函数。</p>\n<p>在 IDA 中逆向分析  <code>KiDispatchInterrupt</code>  函数：</p>\n<p><img data-src=\"image010.png\" alt=\"\" /></p>\n<p><code>KiQuantumEnd</code>  这个函数做的事情主要就是这个：</p>\n<p><img data-src=\"image011.png\" alt=\"\" /></p>\n<p>重新设置时间片：进程中原本是多少，还设置成多少。<br />\n之后会调用 <code>KiFindReadyThread</code>  切换线程的状态，然后执行  <code>SwapContext</code>  切换线程。</p>\n<p>在 IDA 中看 <code>KiFindReadyThread</code>  的关键操作：</p>\n<p><img data-src=\"image012.png\" alt=\"\" /></p>\n<p>从汇编的角度看双向链表的添加操作……</p>\n<h4 id=\"有备用线程的情况下\"><a class=\"anchor\" href=\"#有备用线程的情况下\">#</a> 有备用线程的情况下</h4>\n<p>分析 <code>KiDispatchInterrupt</code>  函数我们可以得知另一种情况，当时间片没有耗尽，但存在备用线程时，仍然会切换线程，若没有备用线程就直接返回了。</p>\n<p><img data-src=\"image013.png\" alt=\"\" /></p>\n<h2 id=\"线程切换的三种情况总述\"><a class=\"anchor\" href=\"#线程切换的三种情况总述\">#</a> 线程切换的三种情况总述</h2>\n<p>1)、当前线程主动调用 API：</p>\n<p>API 函数 ---&gt;  <code>KiSwapThread</code>   ---&gt;  <code>KiSwapContext</code>  ---&gt;  <code>SwapContext</code></p>\n<p>(2)、当前线程时间片到期：</p>\n<p><code>KiDispatchInterrupt</code>  ---&gt;  <code>KiQuantumEnd</code>  ---&gt;  <code>KiFindReadyThread</code>  ---&gt;  <code>SwapContext</code></p>\n<p>(3)、有备用线程 (KPCR.PrcbData.NextThread)</p>\n<p><code>KiDispatchInterrupt</code>  ---&gt;  <code>KiFindReadyThread</code>  ---&gt;  <code>SwapContext</code></p>\n<h2 id=\"线程切换与tss\"><a class=\"anchor\" href=\"#线程切换与tss\">#</a> 线程切换与 TSS</h2>\n<p><code>SwapContext</code>  这个函数是 Windows 线程切换的核心，无论是主动切换还是系统时钟导致的线程切换，最终都会调用这个函数。在这个函数中除了切换堆栈以外，还做了很多其他的事情，了解这些细节对我们学习操作系统至关重要。</p>\n<p>我们了解一下线程切换与 TSS 的关系。</p>\n<h3 id=\"内核堆栈\"><a class=\"anchor\" href=\"#内核堆栈\">#</a> 内核堆栈</h3>\n<p>在_KTHREAD 结构体中有三个成员：<br />\n <code>InitialStack</code>  栈底<br />\n <code>KernelStack</code>  栈顶<br />\n <code>StackLimit</code>  栈的边界</p>\n<p>由此我们可以大致了解内核堆栈信息：</p>\n<p><img data-src=\"image014.png\" alt=\"\" /></p>\n<h3 id=\"内核堆栈的结构\"><a class=\"anchor\" href=\"#内核堆栈的结构\">#</a> 内核堆栈的结构</h3>\n<p>对于内核堆栈的结构，在通过逆向 <code>SwapContext</code>  函数时，我们已经发现了一些端倪，如下：</p>\n<p><img data-src=\"image015.png\" alt=\"\" /></p>\n<p>也就是说从线程的 <code>InitialStack</code>  栈底开始往上 0x210 个字节 是存储着浮点寄存器的值，而后紧接着就是 <code>_Trap_Frame</code>  结构</p>\n<p><img data-src=\"image005.png\" alt=\"\" /></p>\n<p>之后又判断了是否处于虚拟 8086 模式，对 0 环栈底做了进一步的处理。附上 <code>_Trap_Frame</code>  结构图：</p>\n<p><img data-src=\"image016.png\" alt=\"\" /></p>\n<h3 id=\"调用api进0环\"><a class=\"anchor\" href=\"#调用api进0环\">#</a> 调用 API 进 0 环</h3>\n<p>普通调用：通过 <code>TSS.ESP0</code>  得到 0 环堆栈。---- 既中断门提权</p>\n<p>快速调用：从 MSR 得到一个临时 0 环栈，代码执行后仍然<br />\n通过 TSS.ESP0 得到当前线程 0 环堆栈。</p>\n<p><img data-src=\"image017.png\" alt=\"\" /></p>\n<h3 id=\"如何用tss保存所有线程的esp0\"><a class=\"anchor\" href=\"#如何用tss保存所有线程的esp0\">#</a> 如何用 TSS 保存所有线程的 ESP0</h3>\n<p>Intel 设计 TSS 的目的是为了任务切换 (线程切换), 但 Windows 与 Linux<br />\n 并没有使用。而是采用堆栈来保存线程的各种寄存器。</p>\n<p>一个 CPU 只有一个 TSS, 但是线程很多，如何用一个 TSS 来保存所有<br />\n线程的 ESP0 呢？</p>\n<p>在 <code>SwapContext</code>  函数中查找与 TTS 相关的代码（这里改了后面肯定是要用的）：</p>\n<p><img data-src=\"image018.png\" alt=\"\" /></p>\n<p>发现有三个位置与 TSS 有联系，其中第一处就是我们要找的答案，eax 存储的就是处理后的线程的 0 环 ESP。<br />\n<strong>每一次线程切换都会更新这个值，把对应线程的 0 环堆栈存储在 TTS.Esp0 的位置。</strong></p>\n<p>第二处是把当前线程所属进程的 CR3 也存储到了 TSS 中。<br />\n第三处是 IO 权限位图。</p>\n<h2 id=\"线程切换与fs\"><a class=\"anchor\" href=\"#线程切换与fs\">#</a> 线程切换与 FS</h2>\n<p>FS:[0] 寄存器在 3 环时指向 TEB, 进入 0 环后 FS:[0] 指向 KPCR。但系统中同时存在很多个线程，这就意味着 FS:[0] 在 3 环时指向的 TEB 要有多个 (每个线程一份)。</p>\n<p>但在实际的使用中我们发现，当我们在 3 环查看不同线程的 FS 寄存器时，FS 的段选择子都是相同的，那是如何实现通过一个 FS 寄存器指向多个 TEB 呢？</p>\n<p>我们还是分析 <code>SwapContext</code>  函数中查找与 FS 相关的代码：</p>\n<p><img data-src=\"image019.png\" alt=\"\" /></p>\n<p><strong>线程切换的时候每次都在 GDT 表中索引为 0x3B 的地址构建每个线程关于 TEB 的段描述符</strong></p>\n<p>附上段描述符的结构：</p>\n<p><img data-src=\"image020.png\" alt=\"\" /></p>\n<h2 id=\"线程切换与线程优先级\"><a class=\"anchor\" href=\"#线程切换与线程优先级\">#</a> 线程切换与线程优先级</h2>\n<p>在 <code>KiSwapThread</code>  与 <code>KiQuantumEnd</code>  函数中都是通过 <code>KiFindReadyThread</code>  来找下一个要切换的线程， <code>KiFindReadyThread</code>  是根据什么条件来选择下一个要执行的线程呢？</p>\n<h3 id=\"调度链表32个\"><a class=\"anchor\" href=\"#调度链表32个\">#</a> 调度链表（32 个）</h3>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kd&gt; dd KiDispatcherReadyListHead</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>8055bc20  8055bc20 8055bc20 8055bc28 8055bc28</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>8055bc30  8055bc30 8055bc30 8055bc38 8055bc38</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>8055bc40  8055bc40 8055bc40 8055bc48 8055bc48</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>8055bc50  8055bc50 8055bc50 8055bc58 8055bc58</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>8055bc60  8055bc60 8055bc60 8055bc68 8055bc68</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>8055bc70  8055bc70 8055bc70 8055bc78 8055bc78</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>8055bc80  8055bc80 8055bc80 8055bc88 8055bc88</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>8055bc90  8055bc90 8055bc90 8055bc98 8055bc98</pre></td></tr></table></figure><p><code>KiFindReadyThread</code>  查找方式：<br />\n按照优先级别进行查找：31..30..29..28.....</p>\n<p>也就是说，在<strong>本次查找</strong>中，如果级别 31 的链表里面有线程，那么就不会查找级别为 30 的链表！</p>\n<p>根据我学过的计算机操作系统的知识，由于调度算法，每次查找线程的时候，线程的优先级都会动态调整的。</p>\n<h3 id=\"如何高效查找\"><a class=\"anchor\" href=\"#如何高效查找\">#</a> 如何高效查找</h3>\n<p>调度链表有 32 个，每次都从头开始查找效率太低，所以 Windows 使用一个 DWORD 类型变量的变量来记录，利用其 32 个比特位的特性。<br />\n当向调度链表 (32 个) 中挂入或者摘除某个线程时，会判断当前级别的链表是否为空，为空将 DWORD 变量对应位置 0，否则置 1。</p>\n<p>如下图：</p>\n<p><img data-src=\"image021.png\" alt=\"\" /></p>\n<p>这个变量： <code>_kiReadySummary</code></p>\n<p>多 cpu 会随机寻找 <code>KiDispatcherReadyListHead</code>  指向的数组中的线程。线程可以绑定某个 cpu（使用 api： <code>setThreadAffinityMask</code> ）</p>\n<p>这里可以逆向分析一下 <code>KiFindReadyThread</code>  函数。详细见：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vb25ldHJhaW5lZS9wLzEyNzUyMTgzLmh0bWw=\">https://www.cnblogs.com/onetrainee/p/12752183.html</span></p>\n<h3 id=\"如果没有就绪线程怎么办\"><a class=\"anchor\" href=\"#如果没有就绪线程怎么办\">#</a> 如果没有就绪线程怎么办？</h3>\n<p>PrcbData：</p>\n<p>+0x004 CurrentThread    : Ptr32 _KTHREAD<br />\n+0x008 NextThread       : Ptr32 _KTHREAD<br />\n+0x00c IdleThread       : Ptr32 _KTHREAD</p>\n<p><img data-src=\"image022.png\" alt=\"\" /></p>\n<p>并且还修改了  <code>_KiIdleSummary</code>  这个变量。</p>\n<p>那我们如何找这个空闲线程的函数呢？</p>\n<p>用 Windbg 下断后，查看当前的  <code>KPRCB</code>  结构体，找到  <code>IdleThread</code>  线程的  <code>ETHREAD</code>  结构体。</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kd&gt; dt _KPRCB 0xFFDFF120</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>nt!_KPRCB</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   +0x000 MinorVersion     : 1</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   +0x002 MajorVersion     : 1</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   +0x004 CurrentThread    : 0x8055ce60 _KTHREAD</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   +0x008 NextThread       : (null) </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   +0x00c IdleThread       : 0x8055ce60 _KTHREAD</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   +0x010 Number           : 0 &#39;&#39;</pre></td></tr></table></figure><p>查看  <code>IdleThread</code>  线程的  <code>ETHREAD</code>  结构体。</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kd&gt; dt _ETHREAD 0x8055ce60 </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>nt!_ETHREAD</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   +0x000 Tcb              : _KTHREAD</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   +0x1c0 CreateTime       : _LARGE_INTEGER 0x0</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   +0x1c0 NestedFaultCount : 0y00</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   +0x1c0 ApcNeeded        : 0y0</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   +0x1c8 ExitTime         : _LARGE_INTEGER 0x0</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   +0x1c8 LpcReplyChain    : _LIST_ENTRY [ 0x0 - 0x0 ]</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   +0x1c8 KeyedWaitChain   : _LIST_ENTRY [ 0x0 - 0x0 ]</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   +0x1d0 ExitStatus       : 0n0</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   +0x1d0 OfsChain         : (null) </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   +0x1d4 PostBlockList    : _LIST_ENTRY [ 0x0 - 0x0 ]</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   +0x1dc TerminationPort  : (null) </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   +0x1dc ReaperLink       : (null) </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   +0x1dc KeyedWaitValue   : (null) </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   +0x1e0 ActiveTimerListLock : 0</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   +0x1e4 ActiveTimerListHead : _LIST_ENTRY [ 0x0 - 0x0 ]</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   +0x1ec Cid              : _CLIENT_ID</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   +0x1f4 LpcReplySemaphore : _KSEMAPHORE</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>   +0x1f4 KeyedWaitSemaphore : _KSEMAPHORE</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>   +0x208 LpcReplyMessage  : (null) </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>   +0x208 LpcWaitingOnPort : (null) </pre></td></tr><tr><td data-num=\"23\"></td><td><pre>   +0x20c ImpersonationInfo : (null) </pre></td></tr><tr><td data-num=\"24\"></td><td><pre>   +0x210 IrpList          : _LIST_ENTRY [ 0x0 - 0x0 ]</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>   +0x218 TopLevelIrp      : 0</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>   +0x21c DeviceToVerify   : (null) </pre></td></tr><tr><td data-num=\"27\"></td><td><pre>   +0x220 ThreadsProcess   : (null) </pre></td></tr><tr><td data-num=\"28\"></td><td><pre>   +0x224 StartAddress     : (null) </pre></td></tr><tr><td data-num=\"29\"></td><td><pre>   +0x228 Win32StartAddress : (null) </pre></td></tr><tr><td data-num=\"30\"></td><td><pre>   +0x228 LpcReceivedMessageId : 0</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>   +0x22c ThreadListEntry  : _LIST_ENTRY [ 0x0 - 0x0 ]</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>   +0x234 RundownProtect   : _EX_RUNDOWN_REF</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>   +0x238 ThreadLock       : _EX_PUSH_LOCK</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>   +0x23c LpcReplyMessageId : 0</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>   +0x240 ReadClusterSize  : 0</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>   +0x244 GrantedAccess    : 0x1f03ff</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>   +0x248 CrossThreadFlags : 0</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>   +0x248 Terminated       : 0y0</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>   +0x248 DeadThread       : 0y0</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>   +0x248 HideFromDebugger : 0y0</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>   +0x248 ActiveImpersonationInfo : 0y0</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>   +0x248 SystemThread     : 0y0</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>   +0x248 HardErrorsAreDisabled : 0y0</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>   +0x248 BreakOnTermination : 0y0</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>   +0x248 SkipCreationMsg  : 0y0</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>   +0x248 SkipTerminationMsg : 0y0</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>   +0x24c SameThreadPassiveFlags : 0</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>   +0x24c ActiveExWorker   : 0y0</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>   +0x24c ExWorkerCanWaitUser : 0y0</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>   +0x24c MemoryMaker      : 0y0</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>   +0x250 SameThreadApcFlags : 0</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>   +0x250 LpcReceivedMsgIdValid : 0y0</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>   +0x250 LpcExitThreadCalled : 0y0</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>   +0x250 AddressSpaceOwner : 0y0</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>   +0x254 ForwardClusterOnly : 0 &#39;&#39;</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>   +0x255 DisablePageFaultClustering : 0 &#39;&#39;</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>   +0x258 KernelStackReference : 0</pre></td></tr></table></figure><p>发现其  <code>+0x224 StartAddress     : (null)</code>  的值为空。找不到线程开始的地方。</p>\n<p>这里还是得逆向分析  <code>SwapContext</code>  函数：</p>\n<p>切换完 esp 后： <code>  mov     esp, [esi+_ETHREAD.Tcb.KernelStack] ; 将新线程的esp存到当前的esp寄存器中</code></p>\n<p>我们观察有几个出栈操作（pop、popf）</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>.text:0046ECCF                 pop     ecx</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>.text:0046ECD0                 mov     [ebx], ecx</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>.text:0046ECD2                 cmp     byte ptr [esi+49h], 0</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>.text:0046ECD6                 jnz     short loc_46ECDC</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>.text:0046ECD8                 popf</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>.text:0046ECD9                 xor     eax, eax</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>.text:0046ECDB                 retn</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>loc_46ECDC: </pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>.text:0046ECDC                 popf</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>.text:0046ECDD                 jnz     short loc_46ECE2</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>.text:0046ECDF                 mov     al, 1</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>.text:0046ECE1                 retn</pre></td></tr></table></figure><p><strong>发现总共执行了两次出栈操作</strong>，那我们直接去找 IdleThread 线程的 <code>_ETHREAD.Tcb.KernelStack</code>  的值</p>\n<p><code>[+0x028] KernelStack      : 0x8055244c [Type: void *]</code> <br />\n 在 windbg 中查看：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kd&gt; dd 0x8055244c </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>8055244c  00000000 ffdff980 80546e6c 00000000</pre></td></tr></table></figure><p>总共执行了两次出栈操作那么  <code>esp+8</code>  的位置就是  <code>retn</code>  返回  <code>eip</code>  要执行的地方。</p>\n<p>在本次实验中的值是  <code>80546e6c</code> ，在 windbg 中查看：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kd&gt; u 80546e6c </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>nt!KiIdleLoop+0x10:</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>80546e6c f390            pause</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>80546e6e fb              sti</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>80546e6f 90              nop</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>80546e70 90              nop</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>80546e71 fa              cli</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>80546e72 3b6d00          cmp     ebp,dword ptr [ebp]</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>80546e75 740d            je      nt!KiIdleLoop+0x28 (80546e84)</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>80546e77 b102            mov     cl,2</pre></td></tr></table></figure><p>发现执行的是  <code>KiIdleLoop+0x10</code>  的地方，所以  <code>KiIdleLoop</code>  就是我们要找的  <code>IdleThread</code>  线程的函数。</p>\n<p>可是这里我有个问题，执行了  <code>pop  ecx</code>  和  <code>popf</code>  ESP 的值不应该是加 6 吗？为什么去找 ESP 加 8 的位置呢？</p>\n<h1 id=\"总结-3\"><a class=\"anchor\" href=\"#总结-3\">#</a> 总结</h1>\n<ol>\n<li>SwapContext 有几个参数，分别是什么？</li>\n</ol>\n<p><img data-src=\"image023.png\" alt=\"\" /></p>\n<ol start=\"2\">\n<li>SwapContext 在哪里实现了线程切换</li>\n</ol>\n<p><img data-src=\"image024.png\" alt=\"\" /></p>\n<ol start=\"3\">\n<li>线程切换的时候，会切换 CR3 吗？切换 CR3 的条件是什么？</li>\n</ol>\n<p><img data-src=\"image025.png\" alt=\"\" /></p>\n<p>这里我们能够知道一个小知识：<strong>线程能读写地址，是由 0x44 位置的进程结构体的 CR3 决定的，并不是 0x220 的位置。</strong></p>\n<ol start=\"4\">\n<li>中断门提权时，CPU 会从 TSS 得到 ESP0 和 SS0，TSS 中存储的一定是当前线程的 ESP0 和 SS0 吗？如何做到的？</li>\n</ol>\n<p>上面已经详细解释了。<br />\n并没有存 SS0 的代码，因为所有线程的 SS0 的值是固定不变的，系统启动时已经填到 TSS 里，不需要在这里改了。</p>\n<p><img data-src=\"image026.png\" alt=\"\" /></p>\n<ol start=\"5\">\n<li>FS:[0] 在 3 环指向 TEB，但是线程有很多，FS:[0] 指向的是哪个线程的 TEB，如何做到的？</li>\n</ol>\n<p>上面已经详细解释了。<br />\n<strong>线程切换的时候每次都在 GDT 表中索引为 0x3B 的地址构建每个线程关于 TEB 的段描述符</strong></p>\n<p><img data-src=\"image019.png\" alt=\"\" /></p>\n<ol start=\"6\">\n<li>0 环的 ExceptionList 在哪里备份的？</li>\n</ol>\n<p><img data-src=\"image027.png\" alt=\"\" /></p>\n<ol start=\"7\">\n<li>IdleThread 是什么？什么时候执行？找到这个函数.</li>\n</ol>\n<p><img data-src=\"image022.png\" alt=\"\" /></p>\n<p>如何找到这个线程的函数上面也讲了。</p>\n<ol start=\"8\">\n<li>如何找到下一个就绪线程？</li>\n</ol>\n<p><code>KiFindReadyThread</code>  函数</p>\n<ol start=\"9\">\n<li>模拟线程切换与 Windows 线程切换有哪些区别？</li>\n</ol>\n<p>3 环与 0 环，真正的线程有两个栈，一个是 3 环的一个是 0 环的，模拟线程只有一个栈，还没用到异常链表、ss、TSS。</p>\n",
            "tags": [
                "Windows线程切换",
                "KiSwapContext",
                "SwapContext",
                "时钟中断",
                "时间片管理",
                "线程切换与TSS",
                "线程切换与FS",
                "线程切换与线程优先级"
            ]
        },
        {
            "id": "https://or0kit.github.io/Bin/Core/WindowsXp/Process-Thread/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B-%E6%A8%A1%E6%8B%9F%E7%BA%BF%E7%A8%8B%E5%88%87%E6%8D%A2/",
            "url": "https://or0kit.github.io/Bin/Core/WindowsXp/Process-Thread/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B-%E6%A8%A1%E6%8B%9F%E7%BA%BF%E7%A8%8B%E5%88%87%E6%8D%A2/",
            "title": "进程与线程-模拟线程切换",
            "date_published": "2022-01-17T06:46:30.000Z",
            "content_html": "<h1 id=\"模拟线程切换\"><a class=\"anchor\" href=\"#模拟线程切换\">#</a> 模拟线程切换</h1>\n<p>开始学习 Windows 的线程切换，线程切换比较复杂，为了更好的学习，我们要先读一份代码。</p>\n<p>关键结构体：</p>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<p>调度链表</p>\n<p><img data-src=\"image002.png\" alt=\"\" /></p>\n<p>创建结构体，挂到链表里，正在运行的线程在 KPCR 中，等待线程 与 33 个调度线程的，线程的状态，</p>\n<p>初始化线程的堆栈</p>\n<p><img data-src=\"image003.png\" alt=\"\" /></p>\n<h1 id=\"分析代码\"><a class=\"anchor\" href=\"#分析代码\">#</a> 分析代码</h1>\n<p>配合海哥的教程代码很好理解。</p>\n<h2 id=\"threadh\"><a class=\"anchor\" href=\"#threadh\">#</a> Thread.h</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\">once</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;windows.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 最大支持的线程数</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MAXGMTHREAD</span> <span class=\"token expression\"><span class=\"token number\">100</span></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 线程信息的结构</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">char</span><span class=\"token operator\">*</span> name<span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t<span class=\"token comment\">// 线程名 相当于线程 ID</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token keyword\">int</span> Flags<span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t<span class=\"token comment\">// 线程状态</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">int</span> SleepMillsecondDot<span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">// 休眠时间</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">void</span><span class=\"token operator\">*</span> initialStack<span class=\"token punctuation\">;</span>\t\t\t\t\t<span class=\"token comment\">// 线程堆栈起始位置</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token keyword\">void</span><span class=\"token operator\">*</span> StackLimit<span class=\"token punctuation\">;</span>\t\t\t\t\t<span class=\"token comment\">// 线程堆栈界限</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token keyword\">void</span><span class=\"token operator\">*</span> KernelStack<span class=\"token punctuation\">;</span>\t\t\t\t\t<span class=\"token comment\">// 线程堆栈当前位置，也就是 ESP</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token keyword\">void</span><span class=\"token operator\">*</span> lpParameter<span class=\"token punctuation\">;</span>\t\t\t\t\t<span class=\"token comment\">// 线程函数的参数</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token keyword\">void</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> lpParameter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 线程函数</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span>GMThread_t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">GMSleep</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> MilliSeconds<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">RegisterGMThread</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> lpParameter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span><span class=\"token operator\">*</span> lpParameter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Scheduling</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>模拟线程结构体，其中的  <code>initialStack</code>   <code>StackLimit</code>   <code>KernelStack</code>  是线程切换过程中关键的的参数。</p>\n<h2 id=\"threadcorecpp\"><a class=\"anchor\" href=\"#threadcorecpp\">#</a> ThreadCore.cpp</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ThreadCore.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 定义线程栈的大小</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">GMTHREADSTACKSIZE</span> <span class=\"token expression\"><span class=\"token number\">0x80000</span></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 当前线程的索引</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">int</span> CurrentThreadIndex <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 这样初始化使每个结构体的第一个成员为 NULL，其余全为 0，调试可看。</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 线程的列表</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>GMThread_t GMThreadList<span class=\"token punctuation\">[</span>MAXGMTHREAD<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">// 线程状态的标志</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">enum</span> <span class=\"token class-name\">FLAGS</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tGMTHREAD_CREATE <span class=\"token operator\">=</span> <span class=\"token number\">0x1</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\tGMTHREAD_READY <span class=\"token operator\">=</span> <span class=\"token number\">0x2</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\tGMTHREAD_SLEEP <span class=\"token operator\">=</span> <span class=\"token number\">0x4</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\tGMTHREAD_EXIT <span class=\"token operator\">=</span> <span class=\"token number\">0x8</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">// 启动线程的函数</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">GMThreadStartup</span><span class=\"token punctuation\">(</span>GMThread_t<span class=\"token operator\">*</span> GMThreadp<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\tGMThreadp<span class=\"token operator\">-></span><span class=\"token function\">func</span><span class=\"token punctuation\">(</span>GMThreadp<span class=\"token operator\">-></span>lpParameter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\tGMThreadp<span class=\"token operator\">-></span>Flags <span class=\"token operator\">=</span> GMTHREAD_EXIT<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token function\">Scheduling</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token comment\">// 空闲线程的函数</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">IdleGMThread</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> lpParameter<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"IdleGMThread---------------\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t<span class=\"token function\">Scheduling</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token comment\">// 向栈中压入一个 uint 值</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">PushStack</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span> Stackpp<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> v<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t<span class=\"token operator\">*</span>Stackpp <span class=\"token operator\">-=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//ebp - 4</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t<span class=\"token operator\">*</span><span class=\"token operator\">*</span>Stackpp <span class=\"token operator\">=</span> v<span class=\"token punctuation\">;</span><span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token comment\">// 初始化线程的信息</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">initGMThread</span><span class=\"token punctuation\">(</span>GMThread_t<span class=\"token operator\">*</span> GMThreadp<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> lpParameter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span><span class=\"token operator\">*</span> lpParameter<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> StackPages<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> StackDWordParam<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t<span class=\"token comment\">// 结构初始化赋值</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\tGMThreadp<span class=\"token operator\">-></span>Flags <span class=\"token operator\">=</span> GMTHREAD_CREATE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\tGMThreadp<span class=\"token operator\">-></span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\tGMThreadp<span class=\"token operator\">-></span>func <span class=\"token operator\">=</span> func<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\tGMThreadp<span class=\"token operator\">-></span>lpParameter <span class=\"token operator\">=</span> lpParameter<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t<span class=\"token comment\">// 申请空间</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\tStackPages <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">VirtualAlloc</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> GMTHREADSTACKSIZE<span class=\"token punctuation\">,</span> MEM_COMMIT<span class=\"token punctuation\">,</span> PAGE_READWRITE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t<span class=\"token comment\">// 初始化</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t<span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>StackPages<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> GMTHREADSTACKSIZE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t<span class=\"token comment\">// 初始化堆栈地址 </span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\tGMThreadp<span class=\"token operator\">-></span>initialStack <span class=\"token operator\">=</span> StackPages <span class=\"token operator\">+</span> GMTHREADSTACKSIZE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>\t<span class=\"token comment\">// 堆栈限制</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\tGMThreadp<span class=\"token operator\">-></span>StackLimit <span class=\"token operator\">=</span> StackPages<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\t<span class=\"token comment\">// 堆栈地址 </span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\tStackDWordParam <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>GMThreadp<span class=\"token operator\">-></span>initialStack<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>\t<span class=\"token comment\">// 入栈</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>\t<span class=\"token function\">PushStack</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>StackDWordParam<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>GMThreadp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 通过这个指针来找到线程函数，线程参数</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\t<span class=\"token function\">PushStack</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>StackDWordParam<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token number\">0x12345678</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 平衡堆栈的 (不用管，此值无意义)</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>\t<span class=\"token function\">PushStack</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>StackDWordParam<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>GMThreadStartup<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 线程入口函数 这个函数负责调用线程函数</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>\t<span class=\"token function\">PushStack</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>StackDWordParam<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">//push ebp  此值无意义，是寄存器初始值</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>\t<span class=\"token function\">PushStack</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>StackDWordParam<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">//push edi  此值无意义</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>\t<span class=\"token function\">PushStack</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>StackDWordParam<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">//push esi\t此值无意义</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>\t<span class=\"token function\">PushStack</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>StackDWordParam<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">//push ebx\t此值无意义</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>\t<span class=\"token function\">PushStack</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>StackDWordParam<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">//push ecx\t此值无意义</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>\t<span class=\"token function\">PushStack</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>StackDWordParam<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">//push edx\t此值无意义</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>\t<span class=\"token function\">PushStack</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>StackDWordParam<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\">//push eax\t此值无意义</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>\t<span class=\"token comment\">// 当前线程的栈顶</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>\tGMThreadp<span class=\"token operator\">-></span>KernelStack <span class=\"token operator\">=</span> StackDWordParam<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>\t<span class=\"token comment\">// 当前线程状态</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>\tGMThreadp<span class=\"token operator\">-></span>Flags <span class=\"token operator\">=</span> GMTHREAD_READY<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre></pre></td></tr><tr><td data-num=\"92\"></td><td><pre><span class=\"token comment\">// 将一个函数注册为单独线程执行</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">RegisterGMThread</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> lpParameter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span><span class=\"token operator\">*</span> lpParameter<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>\t<span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> GMThreadList<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token operator\">==</span> <span class=\"token function\">_stricmp</span><span class=\"token punctuation\">(</span>GMThreadList<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>\t<span class=\"token function\">initGMThread</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>GMThreadList<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> func<span class=\"token punctuation\">,</span> lpParameter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x55AA0000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre></pre></td></tr><tr><td data-num=\"108\"></td><td><pre><span class=\"token comment\">// 切换线程\t1：当前线程结构体指针 2：要切换的线程结构体指针</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre><span class=\"token function\">__declspec</span><span class=\"token punctuation\">(</span>naked<span class=\"token punctuation\">)</span> <span class=\"token keyword\">void</span> <span class=\"token function\">SwitchContext</span><span class=\"token punctuation\">(</span>GMThread_t<span class=\"token operator\">*</span> SrcGMThreadp<span class=\"token punctuation\">,</span> GMThread_t<span class=\"token operator\">*</span> DstGMThreadp<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>\t__asm</pre></td></tr><tr><td data-num=\"112\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>\t\t<span class=\"token comment\">// 提升堆栈</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>\t\tpush ebp</pre></td></tr><tr><td data-num=\"115\"></td><td><pre>\t\tmov ebp<span class=\"token punctuation\">,</span> esp</pre></td></tr><tr><td data-num=\"116\"></td><td><pre></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>\t\t<span class=\"token comment\">// 保存当前线程寄存器</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>\t\tpush edi</pre></td></tr><tr><td data-num=\"119\"></td><td><pre>\t\tpush esi</pre></td></tr><tr><td data-num=\"120\"></td><td><pre>\t\tpush ebx</pre></td></tr><tr><td data-num=\"121\"></td><td><pre>\t\tpush ecx</pre></td></tr><tr><td data-num=\"122\"></td><td><pre>\t\tpush edx</pre></td></tr><tr><td data-num=\"123\"></td><td><pre>\t\tpush eax</pre></td></tr><tr><td data-num=\"124\"></td><td><pre></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>\t\tmov esi<span class=\"token punctuation\">,</span> SrcGMThreadp</pre></td></tr><tr><td data-num=\"126\"></td><td><pre>\t\tmov edi<span class=\"token punctuation\">,</span> DstGMThreadp</pre></td></tr><tr><td data-num=\"127\"></td><td><pre></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>\t\tmov<span class=\"token punctuation\">[</span>esi <span class=\"token operator\">+</span> GMThread_t<span class=\"token punctuation\">.</span>KernelStack<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> esp</pre></td></tr><tr><td data-num=\"129\"></td><td><pre>\t\t<span class=\"token comment\">// 经典线程切换，另外一个线程复活</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>\t\tmov esp<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>edi <span class=\"token operator\">+</span> GMThread_t<span class=\"token punctuation\">.</span>KernelStack<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>\t\tpop eax</pre></td></tr><tr><td data-num=\"133\"></td><td><pre>\t\tpop edx</pre></td></tr><tr><td data-num=\"134\"></td><td><pre>\t\tpop ecx</pre></td></tr><tr><td data-num=\"135\"></td><td><pre>\t\tpop ebx</pre></td></tr><tr><td data-num=\"136\"></td><td><pre>\t\tpop esi</pre></td></tr><tr><td data-num=\"137\"></td><td><pre>\t\tpop edi</pre></td></tr><tr><td data-num=\"138\"></td><td><pre></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>\t\tpop ebp</pre></td></tr><tr><td data-num=\"140\"></td><td><pre>\t\tret\t<span class=\"token comment\">// 把 startup (线程函数入口) 弹到 eip 执行的就是线程函数了</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre></pre></td></tr><tr><td data-num=\"144\"></td><td><pre><span class=\"token comment\">// 这个函数会让出 cpu，从队列里重新选择一个线程执行</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Scheduling</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>\t<span class=\"token comment\">// 获取自系统启动以来经过的毫秒数</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>\t<span class=\"token keyword\">int</span> TickCount <span class=\"token operator\">=</span> <span class=\"token function\">GetTickCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre></pre></td></tr><tr><td data-num=\"150\"></td><td><pre>\tGMThread_t<span class=\"token operator\">*</span> SrcGMThreadp <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>GMThreadList<span class=\"token punctuation\">[</span>CurrentThreadIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"151\"></td><td><pre>\tGMThread_t<span class=\"token operator\">*</span> DstGMThreadp <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>GMThreadList<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre></pre></td></tr><tr><td data-num=\"153\"></td><td><pre></pre></td></tr><tr><td data-num=\"154\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> GMThreadList<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"155\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"156\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>GMThreadList<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>Flags <span class=\"token operator\">&amp;</span> GMTHREAD_SLEEP<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"157\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"158\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>TickCount <span class=\"token operator\">></span> GMThreadList<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>SleepMillsecondDot<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"159\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"160\"></td><td><pre>\t\t\t\tGMThreadList<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>Flags <span class=\"token operator\">=</span> GMTHREAD_READY<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"161\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"162\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"163\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>GMThreadList<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>Flags <span class=\"token operator\">&amp;</span> GMTHREAD_READY<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"164\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"165\"></td><td><pre>\t\t\tDstGMThreadp <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>GMThreadList<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"166\"></td><td><pre>\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"167\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"168\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"169\"></td><td><pre>\t<span class=\"token comment\">// 获取队列中下一个线程的索引</span></pre></td></tr><tr><td data-num=\"170\"></td><td><pre>\tCurrentThreadIndex <span class=\"token operator\">=</span> DstGMThreadp <span class=\"token operator\">-</span> GMThreadList<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"171\"></td><td><pre></pre></td></tr><tr><td data-num=\"172\"></td><td><pre>\t<span class=\"token function\">SwitchContext</span><span class=\"token punctuation\">(</span>SrcGMThreadp<span class=\"token punctuation\">,</span> DstGMThreadp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"173\"></td><td><pre></pre></td></tr><tr><td data-num=\"174\"></td><td><pre>\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"175\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"176\"></td><td><pre></pre></td></tr><tr><td data-num=\"177\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">GMSleep</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> MilliSeconds<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"178\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"179\"></td><td><pre>\tGMThread_t<span class=\"token operator\">*</span> GMThreadp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"180\"></td><td><pre>\tGMThreadp <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>GMThreadList<span class=\"token punctuation\">[</span>CurrentThreadIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"181\"></td><td><pre></pre></td></tr><tr><td data-num=\"182\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>GMThreadp<span class=\"token operator\">-></span>Flags <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"183\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"184\"></td><td><pre>\t\tGMThreadp<span class=\"token operator\">-></span>Flags <span class=\"token operator\">=</span> GMTHREAD_SLEEP<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"185\"></td><td><pre>\t\tGMThreadp<span class=\"token operator\">-></span>SleepMillsecondDot <span class=\"token operator\">=</span> <span class=\"token function\">GetTickCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> MilliSeconds<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"186\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"187\"></td><td><pre></pre></td></tr><tr><td data-num=\"188\"></td><td><pre>\t<span class=\"token function\">Scheduling</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"189\"></td><td><pre>\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"190\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>注意在  <code>GMThreadStartup</code>  函数中  <code>GMThreadp-&gt;func(GMThreadp-&gt;lpParameter);</code> <br />\n 我们在前面的模拟初始化线程结构体中，设置的线程函数是不一样的。<br />\n但，它是如何找线程的参数的呢？<br />\n这个函数 <code>void GMThreadStartup(GMThread_t* GMThreadp)</code>  我们并没有传参呀？</p>\n<p>这里看一下反汇编就明白了</p>\n<p><img data-src=\"image004.png\" alt=\"\" /></p>\n<p>虽然我们没有传参，但我们定义这个函数的时候是有参数的，所以程序编译的时候，它会直接找  <code>ebp+8</code>  的位置，那  <code>ebp+8</code>  它能正确找到参数吗？可以！！</p>\n<p>继续观察这个图：</p>\n<p><img data-src=\"image003.png\" alt=\"\" /></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">24</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token function\">GMThreadStartup</span><span class=\"token punctuation\">(</span>GMThread_t<span class=\"token operator\">*</span> GMThreadp<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token number\">25</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">0057</span>C020  push        ebp  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">0057</span>C021  mov         ebp<span class=\"token punctuation\">,</span>esp</pre></td></tr></table></figure><p>当执行  <code>ret</code>  指令后，esp-4 esp 指向了 9（这个值是随便压入栈的）并且 eip 指向了堆栈中存储 Startup 函数地址的位置，既程序开始执行  <code>GMThreadStartup</code>  函数，然后执行了  <code>push ebp</code>  和  <code>mov  ebp,esp</code>  后，esp 和 ebp 都指向了堆栈中原来存储 Startup 函数地址的位置，并且这个值也被替换为了，原来的 esp 的值（这个 esp 的值也是我们随便压入栈的）。</p>\n<p>这个时候已经清楚的知道了 ebp 和 esp 的值， 在堆栈中  <code>ebp+8</code>  的位置正是每个线程的模拟结构体！</p>\n<p>非常的巧妙！我称之为艺术（嘿嘿没见过世面…）！！大拇指.png</p>\n<h2 id=\"maincpp\"><a class=\"anchor\" href=\"#maincpp\">#</a> main.cpp</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ThreadCore.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token keyword\">int</span> CurrentThreadIndex<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">extern</span> GMThread_t GMThreadList<span class=\"token punctuation\">[</span>MAXGMTHREAD<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Thread1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Thread%d\\n\"</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t<span class=\"token function\">GMSleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Thread2</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Thread%d\\n\"</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t<span class=\"token function\">GMSleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Thread3</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Thread%d\\n\"</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t<span class=\"token function\">GMSleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Thread4</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Thread%d\\n\"</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\t<span class=\"token function\">GMSleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 模拟调用 API 函数</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t<span class=\"token function\">RegisterGMThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token string\">\"Thread1\"</span><span class=\"token punctuation\">,</span> Thread1<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t<span class=\"token function\">RegisterGMThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token string\">\"Thread2\"</span><span class=\"token punctuation\">,</span> Thread2<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t<span class=\"token function\">RegisterGMThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token string\">\"Thread3\"</span><span class=\"token punctuation\">,</span> Thread3<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t<span class=\"token function\">RegisterGMThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token string\">\"Thread4\"</span><span class=\"token punctuation\">,</span> Thread4<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t\t<span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 模拟时钟中断</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t\t<span class=\"token function\">Scheduling</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这个就没什么好说的了。</p>\n<h1 id=\"课后作业\"><a class=\"anchor\" href=\"#课后作业\">#</a> 课后作业</h1>\n<p>写两个函数实现线程的挂起和恢复功能。</p>\n<p>就是模拟  <code>SuspendThread()</code>  和  <code>ResumeThread()</code>  函数</p>\n<p><strong>回顾一下以前的知识点：如何让线程停下来？</strong><br />\n让自己停下来: <code>Sleep()</code> <br />\n 让别人停下来: <code>SuspendThread()</code> <br />\n 线程恢复:  <code>ResumeThread()</code></p>\n<p>海哥说用最简约的方式写。<br />\n不就是改线程的状态吗！</p>\n<h2 id=\"代码\"><a class=\"anchor\" href=\"#代码\">#</a> 代码</h2>\n<p>写的时候也有其他疑问，要不要模拟操作系统添加一个 context 呢？要不要定义一个等待链表呢？如何随时挂起一个线程？不过海哥在视频里说了，用最简约的方式写，也是哈，操作系统考虑的事情很多，我们不用考虑那么多，没必要啊！</p>\n<p>线程 1 调用挂起函数，挂起哪个线程？  线程都有名字。</p>\n<p>调用恢复函数，恢复哪个函数？这个也可以使用名字。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 挂起函数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">GMSuspend</span><span class=\"token punctuation\">(</span>LPCSTR ThreadName<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token class-name\">size_t</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token comment\">// 由线程名字查找线程</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> GMThreadList<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token operator\">==</span> <span class=\"token function\">strcmp</span><span class=\"token punctuation\">(</span>GMThreadList<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> ThreadName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t\t<span class=\"token comment\">// 修改线程状态</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t\tGMThreadList<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>Flags <span class=\"token operator\">=</span> GMTHREAD_SUSPEND<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">// 恢复线程</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">GMResume</span><span class=\"token punctuation\">(</span>LPCSTR ThreadName<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token class-name\">size_t</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token comment\">// 由线程名字查找线程</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> GMThreadList<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token operator\">==</span> <span class=\"token function\">strcmp</span><span class=\"token punctuation\">(</span>GMThreadList<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> ThreadName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t\t<span class=\"token comment\">// 修改线程状态</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t\tGMThreadList<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>Flags <span class=\"token operator\">=</span> GMTHREAD_READY<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>修改了一下 线程 1 的函数：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Thread1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tbool Flags <span class=\"token operator\">=</span> true<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>Flags<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t\t<span class=\"token keyword\">case</span> true<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是Thread%d，我要运行1秒哦^v^，我运行的时候其他线程不许运行哦。\\n\"</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t\t\t<span class=\"token function\">GMSuspend</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Thread2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t\t\t<span class=\"token function\">GMSuspend</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Thread3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t\t\t<span class=\"token function\">GMSuspend</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Thread4\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t\t\tFlags <span class=\"token operator\">=</span> false<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t\t<span class=\"token keyword\">default</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是Thread%d，现在大家可以一起执行了哦^v^\\n\"</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t\t\t<span class=\"token function\">GMResume</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Thread2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t\t\t<span class=\"token function\">GMResume</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Thread3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t\t\t<span class=\"token function\">GMResume</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Thread4\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t\t\tFlags <span class=\"token operator\">=</span> true<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t<span class=\"token function\">GMSleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>截图：</p>\n<p><img data-src=\"image005.png\" alt=\"\" /></p>\n<h1 id=\"模拟线程切换总结\"><a class=\"anchor\" href=\"#模拟线程切换总结\">#</a> 模拟线程切换总结</h1>\n<ol>\n<li>\n<p>线程不是被动切换的，而是主动让出 CPU.</p>\n</li>\n<li>\n<p>线程切换并没有使用 TSS 来保存寄存器，而是使用堆栈.</p>\n</li>\n<li>\n<p>线程切换的过程就是堆栈切换的过程.</p>\n</li>\n</ol>\n",
            "tags": [
                "模拟线程切换",
                "模拟挂起与恢复函数"
            ]
        },
        {
            "id": "https://or0kit.github.io/Bin/Core/WindowsXp/Process-Thread/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B-%E8%BF%9B%E7%A8%8B%E7%9A%84%E5%88%9B%E5%BB%BA/",
            "url": "https://or0kit.github.io/Bin/Core/WindowsXp/Process-Thread/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B-%E8%BF%9B%E7%A8%8B%E7%9A%84%E5%88%9B%E5%BB%BA/",
            "title": "进程与线程-进程的创建",
            "date_published": "2022-01-11T13:39:45.000Z",
            "content_html": "<h1 id=\"楔子\"><a class=\"anchor\" href=\"#楔子\">#</a> 楔子</h1>\n<p>我们已经知道了进程和线程是如何在 Windows 中表示的，在内核层和执行体层分别包含了哪些信息。现在我们来看看 Windows 执行体是如何管理进程和线程的，包括进程和线程的创建和终止过程，以及进程和线程是如何创建起来的。</p>\n<h1 id=\"小知识获取当前进程或线程\"><a class=\"anchor\" href=\"#小知识获取当前进程或线程\">#</a> 小知识：获取当前进程或线程</h1>\n<p><strong>内核层函数 KeGetCurrentThread 是一个重要的函数</strong>，它返回当前处理器上正在运行的线程的 KTHREAD 结构指针。通过此结构信息，可以进一步得到 KPROCESS 、ETHREAD 和 EPROCESS 结构。在 WRK 中， KeGetCurrentThread 是这样实现的：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>FORCEINLINE</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">_KTHREAD</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>NTAPI <span class=\"token function\">KeGetCurrentThread</span> <span class=\"token punctuation\">(</span>VOID<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\"><span class=\"token punctuation\">(</span>_MSC_FULL_VER <span class=\"token operator\">>=</span> <span class=\"token number\">13012035</span><span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">_KTHREAD</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>ULONG_PTR<span class=\"token punctuation\">)</span> <span class=\"token function\">__readfsdword</span> <span class=\"token punctuation\">(</span><span class=\"token function\">FIELD_OFFSET</span> <span class=\"token punctuation\">(</span>KPCR<span class=\"token punctuation\">,</span> PrcbData<span class=\"token punctuation\">.</span>CurrentThread<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">else</span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    __asm <span class=\"token punctuation\">&#123;</span>  mov eax<span class=\"token punctuation\">,</span> fs<span class=\"token operator\">:</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> KPCR<span class=\"token punctuation\">.</span>PrcbData<span class=\"token punctuation\">.</span>CurrentThread <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>WRK 本身自带的编译器（tools\\x86\\cl.exe）版本（13.10.4035）大于 13012035 所以上面的代码取第一个条件分支，它展开来实际上只是一条指令。</p>\n<p>第二条分支， <code>mov eax, fs:[0] KPCR.PrcbData.CurrentThread</code>  应该等同于  <code>mov eax,fs:[0x124]</code> <br />\n 下面四种书写方式等价：<br />\n <code>MOV　AX, [BX+SI+1000H]</code> <br />\n <code>MOV　AX, 1000H[BX+SI]</code> <br />\n <code>MOV　AX, 1000H[BX][SI]</code> <br />\n <code>MOV　AX, 1000H[SI][BX]</code></p>\n<p>获取了当前线程的 KTHREAD 结构指针以后，便可以很方便的获取 ETHREAD 、 KPROCESS 和 EPROCESS 结构的指针了。</p>\n<p><strong>执行体层上获得当前线程和进程的函数</strong>分别是 PsGetCurrentThread 和 PsGetCurrentProcess ，代码如下：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">_PsGetCurrentProcess</span><span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token function\">CONTAINING_RECORD</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token function\">KeGetCurrentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>ApcState<span class=\"token punctuation\">.</span>Process<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>EPROCESS<span class=\"token punctuation\">,</span>Pcb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">_PsGetCurrentThread</span><span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>PETHREAD<span class=\"token punctuation\">)</span><span class=\"token function\">KeGetCurrentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>PEPROCESS</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">PsGetCurrentProcess</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    VOID</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">_PsGetCurrentProcess</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>PETHREAD</pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token function\">PsGetCurrentThread</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    VOID</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">_PsGetCurrentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>我们看到，_PsGetCurrentProcess 宏从当前线程 KTHREAD 结构的 ApcState 成员中获得当前线程所属进程的 KPROCESS 结构。 这里之所以从 ApcState 成员中获取进程结构指针，而不是从 KTHREAD 的 Process 域 或 ETHREAD 的 ThreadProcess 域获取进程结构指针，<strong>是因为即使当前线程附载到其他进程中（通过 KeAttachProcess 函数），或者有回到原先的进程中（通过 KeDetachProcess 函数），这种做法也总是能够获得正确的当前进程结构的指针</strong>。 这里涉及 APC 相关的知识，还没学，暂时不深究。</p>\n<h1 id=\"进程创建过程\"><a class=\"anchor\" href=\"#进程创建过程\">#</a> 进程创建过程</h1>\n<p>看了几本书，还是没有捋顺知识点，先埋个坑。多看看书后再往下写了。CR3 的值在实模式下就被初始化好了，在一个链表中。</p>\n<h2 id=\"从r3-createprocess-分析进程创建过程\"><a class=\"anchor\" href=\"#从r3-createprocess-分析进程创建过程\">#</a> 从 R3  <code>CreateProcess</code>  分析进程创建过程</h2>\n<p>由于逆向的流程很复杂，我们先看 Xp 源码。</p>\n<p>BOOL<br />\nWINAPI<br />\nCreateProcessA(<br />\nLPCSTR lpApplicationName,<br />\nLPSTR lpCommandLine,<br />\nLPSECURITY_ATTRIBUTES lpProcessAttributes,<br />\nLPSECURITY_ATTRIBUTES lpThreadAttributes,<br />\nBOOL bInheritHandles,<br />\nDWORD dwCreationFlags,<br />\nLPVOID lpEnvironment,<br />\nLPCSTR lpCurrentDirectory,<br />\nLPSTARTUPINFOA lpStartupInfo,<br />\nLPPROCESS_INFORMATION lpProcessInformation<br />\n)</p>\n",
            "tags": [
                "进程的创建",
                "获取当前进程"
            ]
        },
        {
            "id": "https://or0kit.github.io/Bin/Core/WindowsXp/Process-Thread/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B-%E7%AD%89%E5%BE%85%E9%93%BE%E8%A1%A8%E4%B8%8E%E8%B0%83%E5%BA%A6%E9%93%BE%E8%A1%A8/",
            "url": "https://or0kit.github.io/Bin/Core/WindowsXp/Process-Thread/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B-%E7%AD%89%E5%BE%85%E9%93%BE%E8%A1%A8%E4%B8%8E%E8%B0%83%E5%BA%A6%E9%93%BE%E8%A1%A8/",
            "title": "进程与线程-等待链表与调度链表",
            "date_published": "2022-01-11T08:43:18.000Z",
            "content_html": "<h1 id=\"楔子\"><a class=\"anchor\" href=\"#楔子\">#</a> 楔子</h1>\n<p>进程结构体 EPROCESS (0x50 和 0x190) 是 2 个链表，里面圈着当前进程所有的线程。</p>\n<p>对进程断链，程序可以正常运行，原因是 CPU 执行与调度是以线程为单位的，进程断链只是影响一些遍历系统进程的 API，并不会影响程序执行。</p>\n<p>对线程断链也是一样的，断链后在 Windbg 或者 OD 中无法看到被断掉的线程，但并不影响其执行 (仍然再跑)。</p>\n<p>为什么程序还可以跑呢？</p>\n<p>肯定是操作系统找到线程的表不是我们断掉的这个。<br />\n接下来我们就要了解操作系统的等待链表与调度链表了，在此之前回顾一下计操相关的知识。</p>\n<h1 id=\"线程的三种状态\"><a class=\"anchor\" href=\"#线程的三种状态\">#</a> 线程的三种状态</h1>\n<h2 id=\"wait-等待-挂起-阻塞\"><a class=\"anchor\" href=\"#wait-等待-挂起-阻塞\">#</a> wait (等待、挂起、阻塞……)</h2>\n<p>导致线程等待的原因有多种，例如调用了 Sleep, WaitForSingleObject 等函数，或者在创建时和运行时让线程挂起的 API，例如 SuspendThread 函数。</p>\n<p>等待线程存储在等待链表头 KiWaitListHead 中， KiWaitListHead 是一个全局变量，在 Windbg 中查看：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kd&gt; dd KiWaitListHead</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>8055d4a8  8a18ce00 8a06d858</pre></td></tr></table></figure><p>0x80553d88 存储了 KiWaitListHead ，这是一个 _LIST_ENTRY，它属于某个线程 _KTHREAD + 0x60 的位置。</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>+0x060 WaitListEntry    : _LIST_ENTRY</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   +0x060 SwapListEntry    : _SINGLE_LIST_ENTRY</pre></td></tr></table></figure><p>_KTHREAD + 0x60 是一个共用体 union，线程处于等待或者调度状态就会存到这个位置的链表里，如果是等待状态，这个地方就是等待链表；如果是调度状态，这里就是调度链表。</p>\n<h2 id=\"running运行中\"><a class=\"anchor\" href=\"#running运行中\">#</a> running（运行中）</h2>\n<p>一个核只有一个运行中的线程，运行中的线程存储在 KPCR 中。</p>\n<h2 id=\"ready就绪等待调度\"><a class=\"anchor\" href=\"#ready就绪等待调度\">#</a> ready（就绪，等待调度）</h2>\n<p>所有就绪线程根据 32 个不同的优先级，各自存储在 32 个链表中。</p>\n<p>通过全局变量 KiDispatcherReadyListHead 可以查看这 32 个链表的链表头：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kd&gt; dd KiDispatcherReadyListHead L70</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>8055df80  8055df80 8055df80 8055df88 8055df88</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>8055df90  8055df90 8055df90 8055df98 8055df98</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>8055dfa0  8055dfa0 8055dfa0 8055dfa8 8055dfa8</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>8055dfb0  8055dfb0 8055dfb0 8055dfb8 8055dfb8</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>8055dfc0  8055dfc0 8055dfc0 8055dfc8 8055dfc8</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>8055dfd0  8055dfd0 8055dfd0 8055dfd8 8055dfd8</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>8055dfe0  8055dfe0 8055dfe0 8055dfe8 8055dfe8</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>8055dff0  8055dff0 8055dff0 8055dff8 8055dff8</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>8055e000  8055e000 8055e000 8055e008 8055e008</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>8055e010  8055e010 8055e010 8055e018 8055e018</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>8055e020  8055e020 8055e020 8055e028 8055e028</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>8055e030  8055e030 8055e030 8055e038 8055e038</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>8055e040  8055e040 8055e040 8055e048 8055e048</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>8055e050  8055e050 8055e050 8055e058 8055e058</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>8055e060  8055e060 8055e060 8055e068 8055e068</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>8055e070  8055e070 8055e070 8055e078 8055e078</pre></td></tr></table></figure><p>每两个 4 字节就构成了一个 LIST_ENTRY，我们发现这里 32 个链表都是空的，原因是现在 windbg 把系统挂起了，所有线程都处于等待状态，不能被调度了。</p>\n<p>32 个链表对应 32 个优先级 0-31，默认优先级是 8，优先级越高越优先。我推测空闲线程 IdleThread 的优先级是最低的。</p>\n<h1 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h1>\n<p>那些所谓的进程隐藏、线程隐藏都不可能彻底隐藏起来，比拼的是谁更底层罢了。通过遍历这两个链表就可以找到所有进程和线程了。一旦把这两个链表断链，那么进程和线程就不会被操作系统维护，也就不会运行了。</p>\n",
            "tags": [
                "等待链表",
                "调度链表"
            ]
        },
        {
            "id": "https://or0kit.github.io/Bin/Core/WindowsXp/Process-Thread/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B-KPCR/",
            "url": "https://or0kit.github.io/Bin/Core/WindowsXp/Process-Thread/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B-KPCR/",
            "title": "进程与线程-KPCR",
            "date_published": "2022-01-11T08:42:21.000Z",
            "content_html": "<h1 id=\"内容回顾\"><a class=\"anchor\" href=\"#内容回顾\">#</a> 内容回顾</h1>\n<p>进程在内核中对应结构体：  <code>EPROCESS</code></p>\n<p>线程在内核中对应结构体：  <code>ETHREAD</code></p>\n<p>CPU 在内核中也有一个对应的结构体，每一个 CPU 有一个，叫  <code>KPCR\t</code></p>\n<h1 id=\"kpcr介绍\"><a class=\"anchor\" href=\"#kpcr介绍\">#</a> KPCR 介绍</h1>\n<ol>\n<li>\n<p>当线程进入 0 环时，FS:[0] 指向 KPCR (3 环时 FS:[0] -&gt; TEB)</p>\n</li>\n<li>\n<p>每个 CPU 都有一个 KPCR 结构体 (一个核一个)</p>\n</li>\n<li>\n<p>KPCR 中存储了 CPU 本身要用的一些重要数据：GDT、IDT 以及线程相关的一些信息。</p>\n</li>\n</ol>\n<h1 id=\"_kpcr-_nt_tib-_kprcb\"><a class=\"anchor\" href=\"#_kpcr-_nt_tib-_kprcb\">#</a> _KPCR, _NT_TIB, _KPRCB</h1>\n<p>KPCR  叫 CPU 控制区（Processor Control Region）</p>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<h2 id=\"_nt_tib-是-_kpcr-的前-0x1c-字节\"><a class=\"anchor\" href=\"#_nt_tib-是-_kpcr-的前-0x1c-字节\">#</a> _NT_TIB 是 _KPCR 的前 0x1c 字节</h2>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ntdll!_NT_TIB</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   +0x000 ExceptionList    : Ptr32 _EXCEPTION_REGISTRATION_RECORD</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t异常链表，执行到 _try _catch 时，会在这个链表里添加异常处理函数</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   +0x004 StackBase        : Ptr32 Void</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   +0x008 StackLimit       : Ptr32 Void</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   0 环当前线程的栈基址和栈大小</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   +0x00c SubSystemTib     : Ptr32 Void</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   +0x010 FiberData        : Ptr32 Void</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   +0x010 Version          : Uint4B</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   +0x014 ArbitraryUserPointer : Ptr32 Void</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   +0x018 Self             : Ptr32 _NT_TIB</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   指向自己的指针</pre></td></tr></table></figure><h2 id=\"_kpcr\"><a class=\"anchor\" href=\"#_kpcr\">#</a> _KPCR</h2>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>nt!_KPCR</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   +0x000 NtTib            : _NT_TIB</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   +0x01c SelfPcr          : Ptr32 _KPCR</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   指向自己的指针</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   +0x020 Prcb             : Ptr32 _KPRCB</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   指向 _KPRCB，即 _KPCR + 0x120 偏移处的结构</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   +0x024 Irql             : UChar</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   +0x028 IRR              : Uint4B</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   +0x02c IrrActive        : Uint4B</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   +0x030 IDR              : Uint4B</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   +0x034 KdVersionBlock   : Ptr32 Void</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   +0x038 IDT              : Ptr32 _KIDTENTRY</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   +0x03c GDT              : Ptr32 _KGDTENTRY</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   IDT, GDT 表基址</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   +0x040 TSS              : Ptr32 _KTSS</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   指向 TSS 表，里面存储了 0 环栈顶 ESP0 和 0 环堆栈段 SS0，中断门提权要用</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>   </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>   +0x044 MajorVersion     : Uint2B</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>   +0x046 MinorVersion     : Uint2B</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>   +0x048 SetMember        : Uint4B</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>   +0x04c StallScaleFactor : Uint4B</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>   +0x050 DebugActive      : UChar</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>   +0x051 Number           : UChar</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>   CPU 编号</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>   </pre></td></tr><tr><td data-num=\"29\"></td><td><pre>   +0x052 Spare0           : UChar</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>   +0x053 SecondLevelCacheAssociativity : UChar</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>   +0x054 VdmAlert         : Uint4B</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>   +0x058 KernelReserved   : [14] Uint4B</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>   +0x090 SecondLevelCacheSize : Uint4B</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>   +0x094 HalReserved      : [16] Uint4B</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>   +0x0d4 InterruptMode    : Uint4B</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>   +0x0d8 Spare1           : UChar</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>   +0x0dc KernelReserved2  : [17] Uint4B</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>   +0x120 PrcbData         : _KPRCB</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>   扩展结构体</pre></td></tr></table></figure><h2 id=\"_kprcb\"><a class=\"anchor\" href=\"#_kprcb\">#</a> _KPRCB</h2>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ntdll!_KPRCB</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   +0x000 MinorVersion     : Uint2B</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   +0x002 MajorVersion     : Uint2B</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   +0x004 CurrentThread    : Ptr32 _KTHREAD</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   当前线程</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   +0x008 NextThread       : Ptr32 _KTHREAD</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   即将切换的下一个线程</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   +0x00c IdleThread       : Ptr32 _KTHREAD</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   空闲线程 &#x2F;&#x2F; 所有线程都执行完了，CPU 就致执行这个</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   +0x010 Number           : Char</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   CPU 编号</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   +0x011 Reserved         : Char</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   +0x012 BuildType        : Uint2B</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   +0x014 SetMember        : Uint4B</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   +0x018 CpuType          : Char</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>   +0x019 CpuID            : Char</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>   +0x01a CpuStep          : Uint2B</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>   +0x01c ProcessorState   : _KPROCESSOR_STATE</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>   +0x33c KernelReserved   : [16] Uint4B</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>   +0x37c HalReserved      : [16] Uint4B</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>   +0x3bc PrcbPad0         : [92] UChar</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>   +0x418 LockQueue        : [16] _KSPIN_LOCK_QUEUE</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>   +0x498 PrcbPad1         : [8] UChar</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>   +0x4a0 NpxThread        : Ptr32 _KTHREAD</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>   +0x4a4 InterruptCount   : Uint4B</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>   +0x4a8 KernelTime       : Uint4B</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>   +0x4ac UserTime         : Uint4B</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>   +0x4b0 DpcTime          : Uint4B</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>   +0x4b4 DebugDpcTime     : Uint4B</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>   +0x4b8 InterruptTime    : Uint4B</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>   +0x4bc AdjustDpcThreshold : Uint4B</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>   +0x4c0 PageColor        : Uint4B</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>   +0x4c4 SkipTick         : Uint4B</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>   +0x4c8 MultiThreadSetBusy : UChar</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>   +0x4c9 Spare2           : [3] UChar</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>   +0x4cc ParentNode       : Ptr32 _KNODE</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>   +0x4d0 MultiThreadProcessorSet : Uint4B</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>   +0x4d4 MultiThreadSetMaster : Ptr32 _KPRCB</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>   +0x4d8 ThreadStartCount : [2] Uint4B</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>   +0x4e0 CcFastReadNoWait : Uint4B</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>   +0x4e4 CcFastReadWait   : Uint4B</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>   +0x4e8 CcFastReadNotPossible : Uint4B</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>   +0x4ec CcCopyReadNoWait : Uint4B</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>   +0x4f0 CcCopyReadWait   : Uint4B</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>   +0x4f4 CcCopyReadNoWaitMiss : Uint4B</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>   +0x4f8 KeAlignmentFixupCount : Uint4B</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>   +0x4fc KeContextSwitches : Uint4B</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>   +0x500 KeDcacheFlushCount : Uint4B</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>   +0x504 KeExceptionDispatchCount : Uint4B</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>   +0x508 KeFirstLevelTbFills : Uint4B</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>   +0x50c KeFloatingEmulationCount : Uint4B</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>   +0x510 KeIcacheFlushCount : Uint4B</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>   +0x514 KeSecondLevelTbFills : Uint4B</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>   +0x518 KeSystemCalls    : Uint4B</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>   +0x51c SpareCounter0    : [1] Uint4B</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>   +0x520 PPLookasideList  : [16] _PP_LOOKASIDE_LIST</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>   +0x5a0 PPNPagedLookasideList : [32] _PP_LOOKASIDE_LIST</pre></td></tr><tr><td data-num=\"62\"></td><td><pre>   +0x6a0 PPPagedLookasideList : [32] _PP_LOOKASIDE_LIST</pre></td></tr><tr><td data-num=\"63\"></td><td><pre>   +0x7a0 PacketBarrier    : Uint4B</pre></td></tr><tr><td data-num=\"64\"></td><td><pre>   +0x7a4 ReverseStall     : Uint4B</pre></td></tr><tr><td data-num=\"65\"></td><td><pre>   +0x7a8 IpiFrame         : Ptr32 Void</pre></td></tr><tr><td data-num=\"66\"></td><td><pre>   +0x7ac PrcbPad2         : [52] UChar</pre></td></tr><tr><td data-num=\"67\"></td><td><pre>   +0x7e0 CurrentPacket    : [3] Ptr32 Void</pre></td></tr><tr><td data-num=\"68\"></td><td><pre>   +0x7ec TargetSet        : Uint4B</pre></td></tr><tr><td data-num=\"69\"></td><td><pre>   +0x7f0 WorkerRoutine    : Ptr32     void </pre></td></tr><tr><td data-num=\"70\"></td><td><pre>   +0x7f4 IpiFrozen        : Uint4B</pre></td></tr><tr><td data-num=\"71\"></td><td><pre>   +0x7f8 PrcbPad3         : [40] UChar</pre></td></tr><tr><td data-num=\"72\"></td><td><pre>   +0x820 RequestSummary   : Uint4B</pre></td></tr><tr><td data-num=\"73\"></td><td><pre>   +0x824 SignalDone       : Ptr32 _KPRCB</pre></td></tr><tr><td data-num=\"74\"></td><td><pre>   +0x828 PrcbPad4         : [56] UChar</pre></td></tr><tr><td data-num=\"75\"></td><td><pre>   +0x860 DpcListHead      : _LIST_ENTRY</pre></td></tr><tr><td data-num=\"76\"></td><td><pre>   +0x868 DpcStack         : Ptr32 Void</pre></td></tr><tr><td data-num=\"77\"></td><td><pre>   +0x86c DpcCount         : Uint4B</pre></td></tr><tr><td data-num=\"78\"></td><td><pre>   +0x870 DpcQueueDepth    : Uint4B</pre></td></tr><tr><td data-num=\"79\"></td><td><pre>   +0x874 DpcRoutineActive : Uint4B</pre></td></tr><tr><td data-num=\"80\"></td><td><pre>   +0x878 DpcInterruptRequested : Uint4B</pre></td></tr><tr><td data-num=\"81\"></td><td><pre>   +0x87c DpcLastCount     : Uint4B</pre></td></tr><tr><td data-num=\"82\"></td><td><pre>   +0x880 DpcRequestRate   : Uint4B</pre></td></tr><tr><td data-num=\"83\"></td><td><pre>   +0x884 MaximumDpcQueueDepth : Uint4B</pre></td></tr><tr><td data-num=\"84\"></td><td><pre>   +0x888 MinimumDpcRate   : Uint4B</pre></td></tr><tr><td data-num=\"85\"></td><td><pre>   +0x88c QuantumEnd       : Uint4B</pre></td></tr><tr><td data-num=\"86\"></td><td><pre>   +0x890 PrcbPad5         : [16] UChar</pre></td></tr><tr><td data-num=\"87\"></td><td><pre>   +0x8a0 DpcLock          : Uint4B</pre></td></tr><tr><td data-num=\"88\"></td><td><pre>   +0x8a4 PrcbPad6         : [28] UChar</pre></td></tr><tr><td data-num=\"89\"></td><td><pre>   +0x8c0 CallDpc          : _KDPC</pre></td></tr><tr><td data-num=\"90\"></td><td><pre>   +0x8e0 ChainedInterruptList : Ptr32 Void</pre></td></tr><tr><td data-num=\"91\"></td><td><pre>   +0x8e4 LookasideIrpFloat : Int4B</pre></td></tr><tr><td data-num=\"92\"></td><td><pre>   +0x8e8 SpareFields0     : [6] Uint4B</pre></td></tr><tr><td data-num=\"93\"></td><td><pre>   +0x900 VendorString     : [13] UChar</pre></td></tr><tr><td data-num=\"94\"></td><td><pre>   +0x90d InitialApicId    : UChar</pre></td></tr><tr><td data-num=\"95\"></td><td><pre>   +0x90e LogicalProcessorsPerPhysicalProcessor : UChar</pre></td></tr><tr><td data-num=\"96\"></td><td><pre>   +0x910 MHz              : Uint4B</pre></td></tr><tr><td data-num=\"97\"></td><td><pre>   +0x914 FeatureBits      : Uint4B</pre></td></tr><tr><td data-num=\"98\"></td><td><pre>   +0x918 UpdateSignature  : _LARGE_INTEGER</pre></td></tr><tr><td data-num=\"99\"></td><td><pre>   +0x920 NpxSaveArea      : _FX_SAVE_AREA</pre></td></tr><tr><td data-num=\"100\"></td><td><pre>   +0xb30 PowerState       : _PROCESSOR_POWER_STATE</pre></td></tr></table></figure><h1 id=\"reference\"><a class=\"anchor\" href=\"#reference\">#</a> Reference</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0t3YW5zeS9hcnRpY2xlL2RldGFpbHMvMTA5NTQ1NDI5\">https://blog.csdn.net/Kwansy/article/details/109545429</span></p>\n",
            "tags": [
                "KPCR结构体"
            ]
        },
        {
            "id": "https://or0kit.github.io/Bin/Core/WindowsXp/Process-Thread/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B-%E7%BA%BF%E7%A8%8B%E7%BB%93%E6%9E%84%E4%BD%93/",
            "url": "https://or0kit.github.io/Bin/Core/WindowsXp/Process-Thread/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B-%E7%BA%BF%E7%A8%8B%E7%BB%93%E6%9E%84%E4%BD%93/",
            "title": "进程与线程-线程结构体",
            "date_published": "2022-01-01T00:53:34.000Z",
            "content_html": "<h1 id=\"线程\"><a class=\"anchor\" href=\"#线程\">#</a> 线程</h1>\n<p>Windows 是一款微内核、抢占式多任务、软实时的操作系统。<strong>Windows 的任务调度主要以线程为单位进行</strong>，线程拥有 33 个优先级，数值为 0~32，其中 0 为最低优先级，32 为最高优先级，最高和最低优先级均保留给系统使用。用户可以使用的优先级为 1～31。</p>\n<h1 id=\"线程结构体-ethread\"><a class=\"anchor\" href=\"#线程结构体-ethread\">#</a> 线程结构体 ETHREAD</h1>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kd&gt; dt _ETHREAD</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>nt!_ETHREAD</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   +0x000 Tcb              : _KTHREAD</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   +0x1c0 CreateTime       : _LARGE_INTEGER</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   +0x1c0 NestedFaultCount : Pos 0, 2 Bits</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   +0x1c0 ApcNeeded        : Pos 2, 1 Bit</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   +0x1c8 ExitTime         : _LARGE_INTEGER</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   +0x1c8 LpcReplyChain    : _LIST_ENTRY</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   +0x1c8 KeyedWaitChain   : _LIST_ENTRY</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   +0x1d0 ExitStatus       : Int4B</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   +0x1d0 OfsChain         : Ptr32 Void</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   +0x1d4 PostBlockList    : _LIST_ENTRY</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   +0x1dc TerminationPort  : Ptr32 _TERMINATION_PORT</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   +0x1dc ReaperLink       : Ptr32 _ETHREAD</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   +0x1dc KeyedWaitValue   : Ptr32 Void</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   +0x1e0 ActiveTimerListLock : Uint4B</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   +0x1e4 ActiveTimerListHead : _LIST_ENTRY</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   +0x1ec Cid              : _CLIENT_ID</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   +0x1f4 LpcReplySemaphore : _KSEMAPHORE</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>   +0x1f4 KeyedWaitSemaphore : _KSEMAPHORE</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>   +0x208 LpcReplyMessage  : Ptr32 Void</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>   +0x208 LpcWaitingOnPort : Ptr32 Void</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>   +0x20c ImpersonationInfo : Ptr32 _PS_IMPERSONATION_INFORMATION</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>   +0x210 IrpList          : _LIST_ENTRY</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>   +0x218 TopLevelIrp      : Uint4B</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>   +0x21c DeviceToVerify   : Ptr32 _DEVICE_OBJECT</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>   +0x220 ThreadsProcess   : Ptr32 _EPROCESS</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>   +0x224 StartAddress     : Ptr32 Void</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>   +0x228 Win32StartAddress : Ptr32 Void</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>   +0x228 LpcReceivedMessageId : Uint4B</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>   +0x22c ThreadListEntry  : _LIST_ENTRY</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>   +0x234 RundownProtect   : _EX_RUNDOWN_REF</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>   +0x238 ThreadLock       : _EX_PUSH_LOCK</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>   +0x23c LpcReplyMessageId : Uint4B</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>   +0x240 ReadClusterSize  : Uint4B</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>   +0x244 GrantedAccess    : Uint4B</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>   +0x248 CrossThreadFlags : Uint4B</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>   +0x248 Terminated       : Pos 0, 1 Bit</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>   +0x248 DeadThread       : Pos 1, 1 Bit</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>   +0x248 HideFromDebugger : Pos 2, 1 Bit</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>   +0x248 ActiveImpersonationInfo : Pos 3, 1 Bit</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>   +0x248 SystemThread     : Pos 4, 1 Bit</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>   +0x248 HardErrorsAreDisabled : Pos 5, 1 Bit</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>   +0x248 BreakOnTermination : Pos 6, 1 Bit</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>   +0x248 SkipCreationMsg  : Pos 7, 1 Bit</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>   +0x248 SkipTerminationMsg : Pos 8, 1 Bit</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>   +0x24c SameThreadPassiveFlags : Uint4B</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>   +0x24c ActiveExWorker   : Pos 0, 1 Bit</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>   +0x24c ExWorkerCanWaitUser : Pos 1, 1 Bit</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>   +0x24c MemoryMaker      : Pos 2, 1 Bit</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>   +0x250 SameThreadApcFlags : Uint4B</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>   +0x250 LpcReceivedMsgIdValid : Pos 0, 1 Bit</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>   +0x250 LpcExitThreadCalled : Pos 1, 1 Bit</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>   +0x250 AddressSpaceOwner : Pos 2, 1 Bit</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>   +0x254 ForwardClusterOnly : UChar</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>   +0x255 DisablePageFaultClustering : UChar</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>   +0x258 KernelStackReference : Uint4B</pre></td></tr></table></figure><p>其中第一个成员也是一个结构体 _KTHREAD</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kd&gt; dt _KTHREAD</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>nt!_KTHREAD</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   +0x000 Header           : _DISPATCHER_HEADER</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   +0x010 MutantListHead   : _LIST_ENTRY</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   +0x018 InitialStack     : Ptr32 Void</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   +0x01c StackLimit       : Ptr32 Void</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   +0x020 Teb              : Ptr32 Void</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   +0x024 TlsArray         : Ptr32 Void</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   +0x028 KernelStack      : Ptr32 Void</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   +0x02c DebugActive      : UChar</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   +0x02d State            : UChar</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   +0x02e Alerted          : [2] UChar</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   +0x030 Iopl             : UChar</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   +0x031 NpxState         : UChar</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   +0x032 Saturation       : Char</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   +0x033 Priority         : Char</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   +0x034 ApcState         : _KAPC_STATE</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   +0x04c ContextSwitches  : Uint4B</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   +0x050 IdleSwapBlock    : UChar</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>   +0x051 VdmSafe          : UChar</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>   +0x052 Spare0           : [2] UChar</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>   +0x054 WaitStatus       : Int4B</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>   +0x058 WaitIrql         : UChar</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>   +0x059 WaitMode         : Char</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>   +0x05a WaitNext         : UChar</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>   +0x05b WaitReason       : UChar</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>   +0x05c WaitBlockList    : Ptr32 _KWAIT_BLOCK</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>   +0x060 WaitListEntry    : _LIST_ENTRY</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>   +0x060 SwapListEntry    : _SINGLE_LIST_ENTRY</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>   +0x068 WaitTime         : Uint4B</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>   +0x06c BasePriority     : Char</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>   +0x06d DecrementCount   : UChar</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>   +0x06e PriorityDecrement : Char</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>   +0x06f Quantum          : Char</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>   +0x070 WaitBlock        : [4] _KWAIT_BLOCK</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>   +0x0d0 LegoData         : Ptr32 Void</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>   +0x0d4 KernelApcDisable : Uint4B</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>   +0x0d8 UserAffinity     : Uint4B</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>   +0x0dc SystemAffinityActive : UChar</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>   +0x0dd PowerState       : UChar</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>   +0x0de NpxIrql          : UChar</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>   +0x0df InitialNode      : UChar</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>   +0x0e0 ServiceTable     : Ptr32 Void</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>   +0x0e4 Queue            : Ptr32 _KQUEUE</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>   +0x0e8 ApcQueueLock     : Uint4B</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>   +0x0f0 Timer            : _KTIMER</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>   +0x118 QueueListEntry   : _LIST_ENTRY</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>   +0x120 SoftAffinity     : Uint4B</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>   +0x124 Affinity         : Uint4B</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>   +0x128 Preempted        : UChar</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>   +0x129 ProcessReadyQueue : UChar</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>   +0x12a KernelStackResident : UChar</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>   +0x12b NextProcessor    : UChar</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>   +0x12c CallbackStack    : Ptr32 Void</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>   +0x130 Win32Thread      : Ptr32 Void</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>   +0x134 TrapFrame        : Ptr32 _KTRAP_FRAME</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>   +0x138 ApcStatePointer  : [2] Ptr32 _KAPC_STATE</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>   +0x140 PreviousMode     : Char</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>   +0x141 EnableStackSwap  : UChar</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>   +0x142 LargeStack       : UChar</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>   +0x143 ResourceIndex    : UChar</pre></td></tr><tr><td data-num=\"62\"></td><td><pre>   +0x144 KernelTime       : Uint4B</pre></td></tr><tr><td data-num=\"63\"></td><td><pre>   +0x148 UserTime         : Uint4B</pre></td></tr><tr><td data-num=\"64\"></td><td><pre>   +0x14c SavedApcState    : _KAPC_STATE</pre></td></tr><tr><td data-num=\"65\"></td><td><pre>   +0x164 Alertable        : UChar</pre></td></tr><tr><td data-num=\"66\"></td><td><pre>   +0x165 ApcStateIndex    : UChar</pre></td></tr><tr><td data-num=\"67\"></td><td><pre>   +0x166 ApcQueueable     : UChar</pre></td></tr><tr><td data-num=\"68\"></td><td><pre>   +0x167 AutoAlignment    : UChar</pre></td></tr><tr><td data-num=\"69\"></td><td><pre>   +0x168 StackBase        : Ptr32 Void</pre></td></tr><tr><td data-num=\"70\"></td><td><pre>   +0x16c SuspendApc       : _KAPC</pre></td></tr><tr><td data-num=\"71\"></td><td><pre>   +0x19c SuspendSemaphore : _KSEMAPHORE</pre></td></tr><tr><td data-num=\"72\"></td><td><pre>   +0x1b0 ThreadListEntry  : _LIST_ENTRY</pre></td></tr><tr><td data-num=\"73\"></td><td><pre>   +0x1b8 FreezeCount      : Char</pre></td></tr><tr><td data-num=\"74\"></td><td><pre>   +0x1b9 SuspendCount     : Char</pre></td></tr><tr><td data-num=\"75\"></td><td><pre>   +0x1ba IdealProcessor   : UChar</pre></td></tr><tr><td data-num=\"76\"></td><td><pre>   +0x1bb DisableBoost     : UChar</pre></td></tr></table></figure><h2 id=\"kthread-主要成员\"><a class=\"anchor\" href=\"#kthread-主要成员\">#</a> KTHREAD 主要成员</h2>\n<ol>\n<li><strong>+0x000 Header : _DISPATCHER_HEADER</strong></li>\n</ol>\n<p>和 KPROCESS 类似，开头是一个 Header，拥有此属性的内核对象可以 “被等待”（WaitForSingleObject）</p>\n<ol start=\"2\">\n<li><strong>+0x018 InitialStack : Ptr32 Void<br />\n+0x01c StackLimit : Ptr32 Void<br />\n+0x028 KernelStack : Ptr32 Void</strong></li>\n</ol>\n<p>线程切换相关</p>\n<p>InitialStack 初始栈顶，也可以理解成 ebp0<br />\nStackLimit 栈的大小<br />\n KernelStack 线程切换时，旧线程的 esp0 存到它的 KernelStack，然后把新线程的 KernelStack 写到 TSS</p>\n<ol start=\"3\">\n<li><strong>+0x020 Teb : Ptr32 Void</strong></li>\n</ol>\n<p>TEB，Thread Environment Block，线程环境块。<br />\n大小 4KB, 位于用户地址空间。<br />\n3 环可以通过 FS:[0] 找到 TEB</p>\n<ol start=\"4\">\n<li><strong>+0x02c DebugActive : UChar</strong></li>\n</ol>\n<p>是否处于调试状态</p>\n<ol start=\"5\">\n<li><strong>+0x034 ApcState : _KAPC_STATE</strong><br />\n<strong>+0x0e8 ApcQueueLock : Uint4B</strong><br />\n<strong>+0x138 ApcStatePointer : [2] Ptr32 _KAPC_STATE</strong><br />\n<strong>+0x14c SavedApcState : _KAPC_STATE</strong></li>\n</ol>\n<p>APC 相关属性。其中 **+0x034 ApcState : _KAPC_STATE** 的结构如下：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kd&gt; dt _KAPC_STATE</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>nt!_KAPC_STATE</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   +0x000 ApcListHead      : [2] _LIST_ENTRY</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   +0x010 Process          : Ptr32 _KPROCESS</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   +0x014 KernelApcInProgress : UChar</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   +0x015 KernelApcPending : UChar</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   +0x016 UserApcPending   : UChar</pre></td></tr></table></figure><p>故在  <code>+0x44</code>  的位置是当前线程的进程结构体  <code>EPROCESS</code>  的地址</p>\n<ol start=\"6\">\n<li><strong>+0x02d State : UChar</strong></li>\n</ol>\n<p>线程状态：就绪、等待、运行。</p>\n<ol start=\"7\">\n<li><strong>+0x06c BasePriority : Char</strong></li>\n</ol>\n<p>其初始值是所属进程的 BasePriority 值 (KPROCESS-&gt;BasePriority)，以后可以通过 KeSetBasePriorityThread () 函数重新设定</p>\n<ol start=\"8\">\n<li><strong>+0x070 WaitBlock : [4] _KWAIT_BLOCK</strong></li>\n</ol>\n<p>等待哪个对象（WaitForSingleObject）</p>\n<ol start=\"9\">\n<li><strong>+0x0e0 ServiceTable : Ptr32 Void</strong></li>\n</ol>\n<p>指向系统服务表基址</p>\n<ol start=\"10\">\n<li><strong>+0x134 TrapFrame</strong></li>\n</ol>\n<p>进 0 环时保存环境</p>\n<ol start=\"11\">\n<li><strong>+0x140 PreviousMode : Char</strong></li>\n</ol>\n<p>某些内核函数会判断程序是 0 环调用还是 3 环调用的</p>\n<ol start=\"12\">\n<li><strong>+0x1b0 ThreadListEntry : _LIST_ENTRY</strong></li>\n</ol>\n<p>双向链表，一个进程所有的线程都挂在一个链表中，挂的就是这个位置，有两个这样的链表</p>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<h2 id=\"_ethread-主要成员\"><a class=\"anchor\" href=\"#_ethread-主要成员\">#</a> _ETHREAD 主要成员</h2>\n<ol>\n<li><strong>+0x1ec Cid : _CLIENT_ID</strong></li>\n</ol>\n<p>进程 ID、线程 ID</p>\n<ol start=\"2\">\n<li><strong>+0x220 ThreadsProcess : Ptr32 _EPROCESS</strong></li>\n</ol>\n<p>指向自己所属进程结构体。这个值和 +0x44 那里的值一样。</p>\n<ol start=\"3\">\n<li><strong>+0x22c ThreadListEntry : _LIST_ENTRY</strong></li>\n</ol>\n<p>双向链表，一个进程所有的线程都挂在一个链表中，挂的就是这个位置，有两个这样的链表</p>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<h1 id=\"课后实验\"><a class=\"anchor\" href=\"#课后实验\">#</a> 课后实验</h1>\n<p>断链线程结构体，实现隐藏，并思考为什么断链后线程还能够执行。</p>\n<p>并没有写恢复 代码如下：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;ntddk.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>VOID <span class=\"token function\">DriverUnload</span><span class=\"token punctuation\">(</span>PDRIVER_OBJECT pDriver<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是驱动，我卸载了\\t\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>NTSTATUS <span class=\"token function\">_NtThreadHide</span><span class=\"token punctuation\">(</span>PUCHAR lpImageFileName<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tPEPROCESS pEPROCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t__asm</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\tmov eax<span class=\"token punctuation\">,</span> fs<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0x124</span><span class=\"token punctuation\">]</span> </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\tmov eax<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>eax <span class=\"token operator\">+</span> <span class=\"token number\">0x220</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\tmov pEPROCESS<span class=\"token punctuation\">,</span> eax</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\tPLIST_ENTRY pHeader <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PCHAR<span class=\"token punctuation\">)</span>pEPROCESS <span class=\"token operator\">+</span> <span class=\"token number\">0x88</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\tPLIST_ENTRY pCur <span class=\"token operator\">=</span> pHeader<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">strcmp</span><span class=\"token punctuation\">(</span>lpImageFileName<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>PCHAR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ULONG<span class=\"token punctuation\">)</span>pCur <span class=\"token operator\">-</span> <span class=\"token number\">0x88</span> <span class=\"token operator\">+</span> <span class=\"token number\">0x174</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t\tPLIST_ENTRY pEThreadHeader1<span class=\"token punctuation\">,</span> pEThreadHeader2<span class=\"token punctuation\">,</span> pEThreadCur<span class=\"token punctuation\">,</span> pEThreadNext<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t\tULONG uSizeOfLIST_ENTRY <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>LIST_ENTRY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t\tlpImageFileName <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PCHAR<span class=\"token punctuation\">)</span>pCur <span class=\"token operator\">+</span> <span class=\"token number\">0xec</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"该进程名称: %s\\n\"</span><span class=\"token punctuation\">,</span> lpImageFileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t\tpEThreadHeader1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PCHAR<span class=\"token punctuation\">)</span>pCur <span class=\"token operator\">-</span> <span class=\"token number\">0x88</span> <span class=\"token operator\">+</span> <span class=\"token number\">0x50</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 模块链表头</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t\tpEThreadHeader2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PCHAR<span class=\"token punctuation\">)</span>pCur <span class=\"token operator\">-</span> <span class=\"token number\">0x88</span> <span class=\"token operator\">+</span> <span class=\"token number\">0x190</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 模块链表头</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t\tpEThreadCur <span class=\"token operator\">=</span> pEThreadHeader1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\t\t<span class=\"token keyword\">do</span> </pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\t\t\tpEThreadNext <span class=\"token operator\">=</span> pEThreadCur<span class=\"token operator\">-></span>Blink<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\t\t\tpEThreadCur<span class=\"token operator\">-></span>Flink <span class=\"token operator\">=</span> pEThreadCur<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\t\t\tpEThreadCur<span class=\"token operator\">-></span>Blink <span class=\"token operator\">=</span> pEThreadCur<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\t\t\tpEThreadCur <span class=\"token operator\">=</span> pEThreadNext<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\t\t\t</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>pEThreadHeader1 <span class=\"token operator\">==</span> pEThreadCur<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\t\tpEThreadCur <span class=\"token operator\">=</span> pEThreadHeader2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\t\t<span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\t\t\tpEThreadNext <span class=\"token operator\">=</span> pEThreadCur<span class=\"token operator\">-></span>Blink<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t\t\t\tpEThreadCur<span class=\"token operator\">-></span>Flink <span class=\"token operator\">=</span> pEThreadCur<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 指向自己，不能直接置为 0, 否则会触发蓝屏</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t\t\t\tpEThreadCur<span class=\"token operator\">-></span>Blink <span class=\"token operator\">=</span> pEThreadCur<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t\t\t\tpEThreadCur <span class=\"token operator\">=</span> pEThreadNext<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>pEThreadHeader1 <span class=\"token operator\">==</span> pEThreadCur<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t\t\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"线程隐藏成功!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> STATUS_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t\tpCur <span class=\"token operator\">=</span> pCur<span class=\"token operator\">-></span>Blink<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>pCur <span class=\"token operator\">!=</span> pHeader<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t<span class=\"token keyword\">return</span> STATUS_ABANDONED<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>NTSTATUS <span class=\"token function\">DriverEntry</span><span class=\"token punctuation\">(</span>PDRIVER_OBJECT pDriver<span class=\"token punctuation\">,</span> PUNICODE_STRING pRegPath<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\tpDriver<span class=\"token operator\">-></span>DriverUnload <span class=\"token operator\">=</span> DriverUnload<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是驱动,我运行了\\t\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t<span class=\"token comment\">// 线程断链</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">NT_SUCCESS</span><span class=\"token punctuation\">(</span><span class=\"token function\">_NtThreadHide</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Dbgview.exe\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> STATUS_UNSUCCESSFUL<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\t<span class=\"token keyword\">return</span> STATUS_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"image002.png\" alt=\"\" /></p>\n<p>断链后</p>\n<p><img data-src=\"image003.png\" alt=\"\" /></p>\n<p>断链后还可以运行。</p>\n<p>尝试用调试器附加：</p>\n<p><img data-src=\"image004.png\" alt=\"\" /></p>\n<p>这个时候 xp 已经卡死了</p>\n<h1 id=\"reference\"><a class=\"anchor\" href=\"#reference\">#</a> Reference</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzg5MDk1OS9hcnRpY2xlL2RldGFpbHMvMTE0NTI3NDEx\">https://blog.csdn.net/weixin_43890959/article/details/114527411</span><br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0t3YW5zeS9hcnRpY2xlL2RldGFpbHMvMTA5NTI5MjY0\">https://blog.csdn.net/Kwansy/article/details/109529264</span></p>\n",
            "tags": [
                "ETHREAD",
                "KTHREAD"
            ]
        },
        {
            "id": "https://or0kit.github.io/Bin/Core/WindowsXp/Process-Thread/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B-%E8%BF%9B%E7%A8%8B%E7%BB%93%E6%9E%84%E4%BD%93/",
            "url": "https://or0kit.github.io/Bin/Core/WindowsXp/Process-Thread/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B-%E8%BF%9B%E7%A8%8B%E7%BB%93%E6%9E%84%E4%BD%93/",
            "title": "进程与线程-进程结构体",
            "date_published": "2022-01-01T00:53:20.000Z",
            "content_html": "<h1 id=\"进程\"><a class=\"anchor\" href=\"#进程\">#</a> 进程</h1>\n<p>进程最重要的作用是提供了 CR3，10-10-12 分页下 CR3 指向页目录表，2-9-9-12 分页下 CR3 指向页目录指针表。<br />\n每个进程至少有一个线程。<br />\n本质上，没有进程切换，只有线程切换。线程切换时会判断是否是同一个进程的线程，若不是同一进程则切换 CR3，这样看来进程也就切换了。<br />\n我们说进程是空间概念，进程为它的线程提供了 CR3，那么它的线程访问同一个线性地址时，就能访问到同一个物理页。<br />\nwindbg 中的  <code>attach</code>  和  <code>.process</code>  本质就是切换 CR3。</p>\n<h1 id=\"进程结构体-eproccess\"><a class=\"anchor\" href=\"#进程结构体-eproccess\">#</a> 进程结构体 EPROCCESS</h1>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kd&gt; dt _EPROCESS </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>nt!_EPROCESS</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   +0x000 Pcb              : _KPROCESS</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   +0x06c ProcessLock      : _EX_PUSH_LOCK</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   +0x070 CreateTime       : _LARGE_INTEGER</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   +0x078 ExitTime         : _LARGE_INTEGER</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   +0x080 RundownProtect   : _EX_RUNDOWN_REF</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   +0x084 UniqueProcessId  : Ptr32 Void</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   +0x088 ActiveProcessLinks : _LIST_ENTRY</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   +0x090 QuotaUsage       : [3] Uint4B</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   +0x09c QuotaPeak        : [3] Uint4B</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   +0x0a8 CommitCharge     : Uint4B</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   +0x0ac PeakVirtualSize  : Uint4B</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   +0x0b0 VirtualSize      : Uint4B</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   +0x0b4 SessionProcessLinks : _LIST_ENTRY</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   +0x0bc DebugPort        : Ptr32 Void</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   +0x0c0 ExceptionPort    : Ptr32 Void</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   +0x0c4 ObjectTable      : Ptr32 _HANDLE_TABLE</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   +0x0c8 Token            : _EX_FAST_REF</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>   +0x0cc WorkingSetLock   : _FAST_MUTEX</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>   +0x0ec WorkingSetPage   : Uint4B</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>   +0x0f0 AddressCreationLock : _FAST_MUTEX</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>   +0x110 HyperSpaceLock   : Uint4B</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>   +0x114 ForkInProgress   : Ptr32 _ETHREAD</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>   +0x118 HardwareTrigger  : Uint4B</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>   +0x11c VadRoot          : Ptr32 Void</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>   +0x120 VadHint          : Ptr32 Void</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>   +0x124 CloneRoot        : Ptr32 Void</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>   +0x128 NumberOfPrivatePages : Uint4B</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>   +0x12c NumberOfLockedPages : Uint4B</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>   +0x130 Win32Process     : Ptr32 Void</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>   +0x134 Job              : Ptr32 _EJOB</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>   +0x138 SectionObject    : Ptr32 Void</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>   +0x13c SectionBaseAddress : Ptr32 Void</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>   +0x140 QuotaBlock       : Ptr32 _EPROCESS_QUOTA_BLOCK</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>   +0x144 WorkingSetWatch  : Ptr32 _PAGEFAULT_HISTORY</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>   +0x148 Win32WindowStation : Ptr32 Void</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>   +0x14c InheritedFromUniqueProcessId : Ptr32 Void</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>   +0x150 LdtInformation   : Ptr32 Void</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>   +0x154 VadFreeHint      : Ptr32 Void</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>   +0x158 VdmObjects       : Ptr32 Void</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>   +0x15c DeviceMap        : Ptr32 Void</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>   +0x160 PhysicalVadList  : _LIST_ENTRY</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>   +0x168 PageDirectoryPte : _HARDWARE_PTE</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>   +0x168 Filler           : Uint8B</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>   +0x170 Session          : Ptr32 Void</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>   +0x174 ImageFileName    : [16] UChar</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>   +0x184 JobLinks         : _LIST_ENTRY</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>   +0x18c LockedPagesList  : Ptr32 Void</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>   +0x190 ThreadListHead   : _LIST_ENTRY</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>   +0x198 SecurityPort     : Ptr32 Void</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>   +0x19c PaeTop           : Ptr32 Void</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>   +0x1a0 ActiveThreads    : Uint4B</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>   +0x1a4 GrantedAccess    : Uint4B</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>   +0x1a8 DefaultHardErrorProcessing : Uint4B</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>   +0x1ac LastThreadExitStatus : Int4B</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>   +0x1b0 Peb              : Ptr32 _PEB</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>   +0x1b4 PrefetchTrace    : _EX_FAST_REF</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>   +0x1b8 ReadOperationCount : _LARGE_INTEGER</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>   +0x1c0 WriteOperationCount : _LARGE_INTEGER</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>   +0x1c8 OtherOperationCount : _LARGE_INTEGER</pre></td></tr><tr><td data-num=\"62\"></td><td><pre>   +0x1d0 ReadTransferCount : _LARGE_INTEGER</pre></td></tr><tr><td data-num=\"63\"></td><td><pre>   +0x1d8 WriteTransferCount : _LARGE_INTEGER</pre></td></tr><tr><td data-num=\"64\"></td><td><pre>   +0x1e0 OtherTransferCount : _LARGE_INTEGER</pre></td></tr><tr><td data-num=\"65\"></td><td><pre>   +0x1e8 CommitChargeLimit : Uint4B</pre></td></tr><tr><td data-num=\"66\"></td><td><pre>   +0x1ec CommitChargePeak : Uint4B</pre></td></tr><tr><td data-num=\"67\"></td><td><pre>   +0x1f0 AweInfo          : Ptr32 Void</pre></td></tr><tr><td data-num=\"68\"></td><td><pre>   +0x1f4 SeAuditProcessCreationInfo : _SE_AUDIT_PROCESS_CREATION_INFO</pre></td></tr><tr><td data-num=\"69\"></td><td><pre>   +0x1f8 Vm               : _MMSUPPORT</pre></td></tr><tr><td data-num=\"70\"></td><td><pre>   +0x238 LastFaultCount   : Uint4B</pre></td></tr><tr><td data-num=\"71\"></td><td><pre>   +0x23c ModifiedPageCount : Uint4B</pre></td></tr><tr><td data-num=\"72\"></td><td><pre>   +0x240 NumberOfVads     : Uint4B</pre></td></tr><tr><td data-num=\"73\"></td><td><pre>   +0x244 JobStatus        : Uint4B</pre></td></tr><tr><td data-num=\"74\"></td><td><pre>   +0x248 Flags            : Uint4B</pre></td></tr><tr><td data-num=\"75\"></td><td><pre>   +0x248 CreateReported   : Pos 0, 1 Bit</pre></td></tr><tr><td data-num=\"76\"></td><td><pre>   +0x248 NoDebugInherit   : Pos 1, 1 Bit</pre></td></tr><tr><td data-num=\"77\"></td><td><pre>   +0x248 ProcessExiting   : Pos 2, 1 Bit</pre></td></tr><tr><td data-num=\"78\"></td><td><pre>   +0x248 ProcessDelete    : Pos 3, 1 Bit</pre></td></tr><tr><td data-num=\"79\"></td><td><pre>   +0x248 Wow64SplitPages  : Pos 4, 1 Bit</pre></td></tr><tr><td data-num=\"80\"></td><td><pre>   +0x248 VmDeleted        : Pos 5, 1 Bit</pre></td></tr><tr><td data-num=\"81\"></td><td><pre>   +0x248 OutswapEnabled   : Pos 6, 1 Bit</pre></td></tr><tr><td data-num=\"82\"></td><td><pre>   +0x248 Outswapped       : Pos 7, 1 Bit</pre></td></tr><tr><td data-num=\"83\"></td><td><pre>   +0x248 ForkFailed       : Pos 8, 1 Bit</pre></td></tr><tr><td data-num=\"84\"></td><td><pre>   +0x248 HasPhysicalVad   : Pos 9, 1 Bit</pre></td></tr><tr><td data-num=\"85\"></td><td><pre>   +0x248 AddressSpaceInitialized : Pos 10, 2 Bits</pre></td></tr><tr><td data-num=\"86\"></td><td><pre>   +0x248 SetTimerResolution : Pos 12, 1 Bit</pre></td></tr><tr><td data-num=\"87\"></td><td><pre>   +0x248 BreakOnTermination : Pos 13, 1 Bit</pre></td></tr><tr><td data-num=\"88\"></td><td><pre>   +0x248 SessionCreationUnderway : Pos 14, 1 Bit</pre></td></tr><tr><td data-num=\"89\"></td><td><pre>   +0x248 WriteWatch       : Pos 15, 1 Bit</pre></td></tr><tr><td data-num=\"90\"></td><td><pre>   +0x248 ProcessInSession : Pos 16, 1 Bit</pre></td></tr><tr><td data-num=\"91\"></td><td><pre>   +0x248 OverrideAddressSpace : Pos 17, 1 Bit</pre></td></tr><tr><td data-num=\"92\"></td><td><pre>   +0x248 HasAddressSpace  : Pos 18, 1 Bit</pre></td></tr><tr><td data-num=\"93\"></td><td><pre>   +0x248 LaunchPrefetched : Pos 19, 1 Bit</pre></td></tr><tr><td data-num=\"94\"></td><td><pre>   +0x248 InjectInpageErrors : Pos 20, 1 Bit</pre></td></tr><tr><td data-num=\"95\"></td><td><pre>   +0x248 VmTopDown        : Pos 21, 1 Bit</pre></td></tr><tr><td data-num=\"96\"></td><td><pre>   +0x248 Unused3          : Pos 22, 1 Bit</pre></td></tr><tr><td data-num=\"97\"></td><td><pre>   +0x248 Unused4          : Pos 23, 1 Bit</pre></td></tr><tr><td data-num=\"98\"></td><td><pre>   +0x248 VdmAllowed       : Pos 24, 1 Bit</pre></td></tr><tr><td data-num=\"99\"></td><td><pre>   +0x248 Unused           : Pos 25, 5 Bits</pre></td></tr><tr><td data-num=\"100\"></td><td><pre>   +0x248 Unused1          : Pos 30, 1 Bit</pre></td></tr><tr><td data-num=\"101\"></td><td><pre>   +0x248 Unused2          : Pos 31, 1 Bit</pre></td></tr><tr><td data-num=\"102\"></td><td><pre>   +0x24c ExitStatus       : Int4B</pre></td></tr><tr><td data-num=\"103\"></td><td><pre>   +0x250 NextPageColor    : Uint2B</pre></td></tr><tr><td data-num=\"104\"></td><td><pre>   +0x252 SubSystemMinorVersion : UChar</pre></td></tr><tr><td data-num=\"105\"></td><td><pre>   +0x253 SubSystemMajorVersion : UChar</pre></td></tr><tr><td data-num=\"106\"></td><td><pre>   +0x252 SubSystemVersion : Uint2B</pre></td></tr><tr><td data-num=\"107\"></td><td><pre>   +0x254 PriorityClass    : UChar</pre></td></tr><tr><td data-num=\"108\"></td><td><pre>   +0x255 WorkingSetAcquiredUnsafe : UChar</pre></td></tr><tr><td data-num=\"109\"></td><td><pre>   +0x258 Cookie           : Uint4B</pre></td></tr></table></figure><p>其中第一个成员也是一个结构体 _KPROCESS</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kd&gt; dt _KPROCESS</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>ntdll!_KPROCESS</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   +0x000 Header           : _DISPATCHER_HEADER</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   +0x010 ProfileListHead  : _LIST_ENTRY</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   +0x018 DirectoryTableBase : [2] Uint4B</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   +0x020 LdtDescriptor    : _KGDTENTRY</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   +0x028 Int21Descriptor  : _KIDTENTRY</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   +0x030 IopmOffset       : Uint2B</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   +0x032 Iopl             : UChar</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   +0x033 Unused           : UChar</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   +0x034 ActiveProcessors : Uint4B</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   +0x038 KernelTime       : Uint4B</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   +0x03c UserTime         : Uint4B</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   +0x040 ReadyListHead    : _LIST_ENTRY</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   +0x048 SwapListEntry    : _SINGLE_LIST_ENTRY</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   +0x04c VdmTrapcHandler  : Ptr32 Void</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   +0x050 ThreadListHead   : _LIST_ENTRY</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   +0x058 ProcessLock      : Uint4B</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   +0x05c Affinity         : Uint4B</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>   +0x060 StackCount       : Uint2B</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>   +0x062 BasePriority     : Char</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>   +0x063 ThreadQuantum    : Char</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>   +0x064 AutoAlignment    : UChar</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>   +0x065 State            : UChar</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>   +0x066 ThreadSeed       : UChar</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>   +0x067 DisableBoost     : UChar</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>   +0x068 PowerState       : UChar</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>   +0x069 DisableQuantum   : UChar</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>   +0x06a IdealNode        : UChar</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>   +0x06b Flags            : _KEXECUTE_OPTIONS</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>   +0x06b ExecuteOptions   : UChar</pre></td></tr></table></figure><h2 id=\"kprocess主要成员介绍\"><a class=\"anchor\" href=\"#kprocess主要成员介绍\">#</a> KPROCESS 主要成员介绍</h2>\n<p>内核层的进程对象。K 开头的是内核层的。</p>\n<h3 id=\"0x000-header-_dispatcher_header\"><a class=\"anchor\" href=\"#0x000-header-_dispatcher_header\">#</a> <strong>+0x000 Header           : _DISPATCHER_HEADER</strong></h3>\n<p>分发器对象 （dispatcher object），现在只需知道进程是可以被等待的就行。“可等待” 对象，比如 Mutex 互斥体、Event 事件等（WaitForSingleObject）</p>\n<h3 id=\"0x018-directorytablebase-2-uint4b\"><a class=\"anchor\" href=\"#0x018-directorytablebase-2-uint4b\">#</a> <strong>+0x018 DirectoryTableBase : [2] Uint4B</strong></h3>\n<p>一个只有两项的数组，其中第一项指向该进程的也目录表地址，第二项指向该进程的超空间（hyper space）的页目录表地址。</p>\n<h3 id=\"0x020-ldtdescriptor-_kgdtentry-0x028-int21descriptor-_kidtentry\"><a class=\"anchor\" href=\"#0x020-ldtdescriptor-_kgdtentry-0x028-int21descriptor-_kidtentry\">#</a> <strong>【+0x020 LdtDescriptor    : _KGDTENTRY】、【+0x028 Int21Descriptor  : _KIDTENTRY】</strong></h3>\n<p>历史遗留，16 位 Windows 段选择子不够 每个进程都有一个 LDT 表<br />\n Int21Descriptor  是 DOS 下要用的</p>\n<h3 id=\"0x034-activeprocessors-uint4b\"><a class=\"anchor\" href=\"#0x034-activeprocessors-uint4b\">#</a> <strong>+0x034 ActiveProcessors : Uint4B</strong></h3>\n<p>ActiveProcessors 域记录了当前进程正在哪些处理器上运行。</p>\n<h3 id=\"0x038-kerneltime-uint4b-0x03c-usertime-uint4b\"><a class=\"anchor\" href=\"#0x038-kerneltime-uint4b-0x03c-usertime-uint4b\">#</a> <strong>【+0x038 KernelTime       : Uint4B】、【+0x03c UserTime         : Uint4B】</strong></h3>\n<p>统计信息 记录了一个进程在内核模式 / 用户模式下所花的时间。进程的  <code>KernelTime</code>  和  <code>UserTime</code>  时间值等于所属线程对应的 <code>KernelTime</code>  和  <code>UserTime</code>  值的和。但是，由于仅当一个线程结束时才更新其进程的这两个时间值，所以，若一个进程中尚未有任何一个线程结束，则这两个域中的值为 0。</p>\n<h3 id=\"0x040-readylisthead-_list_entry\"><a class=\"anchor\" href=\"#0x040-readylisthead-_list_entry\">#</a> <strong>+0x040 ReadyListHead    : _LIST_ENTRY</strong></h3>\n<p><code>ReadyListHead</code>  是一个双向链表的表头，该链表记录了这个进程中处于就绪状态但尚未被加入全局就绪链表的线程，这个域的意义在于，当一个进程被换出内存以后，它所属的线程一旦就绪，则被挂到此链表中，并要求换入该进程；以后，当该进程被换入内存时， <code>ReadyListHead</code>  中的所有线程被加入到系统全局的就绪线程链表中。注意， <code>ReadyListHead</code>  链表中的每一项都是一个指向 <code>KTHREAD</code>  对象的 <code>WaitlistEntry</code>  域的地址，所以，从链表中的每一项都可以定位到对应的线程对象。例如，下面的代码片段是从 <code>KilnSwapProcesses</code>  函数中摘录的，从代码中可以看到 <code>ReadyListHead</code>  链表的用法。这段代码的意图是，将链表中的每个线程加入到全局就绪线程链表中（通过调用 <code>KiReadyThread</code>  来完成）。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Process<span class=\"token operator\">-></span>State<span class=\"token operator\">=</span>ProcessInMemory；</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>NextEntry<span class=\"token operator\">=</span>Process<span class=\"token operator\">-></span>ReadyListHead<span class=\"token punctuation\">.</span>Flink<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>NextEntry l<span class=\"token operator\">=</span><span class=\"token operator\">&amp;</span>Process<span class=\"token operator\">-></span>ReadyListHead<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  Thread<span class=\"token operator\">=</span><span class=\"token function\">CONTAINING_RECORD</span><span class=\"token punctuation\">(</span>NextEntry<span class=\"token punctuation\">,</span>KTHREAD<span class=\"token punctuation\">,</span>WaitListEntry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token function\">RemoveEntryList</span><span class=\"token punctuation\">(</span>NextEntry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  Thread<span class=\"token operator\">-></span>ProcessReadyQueue <span class=\"token operator\">=</span>FALSE；</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token function\">KiReadyThread</span><span class=\"token punctuation\">(</span>Thread<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  NextEntry<span class=\"token operator\">=</span>Process<span class=\"token operator\">-></span>ReadyListHead<span class=\"token punctuation\">.</span>Flink<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"0x048-swaplistentry-_single_list_entry\"><a class=\"anchor\" href=\"#0x048-swaplistentry-_single_list_entry\">#</a> <strong>+0x048 SwapListEntry    : _SINGLE_LIST_ENTRY</strong></h3>\n<p>SwapListEntry 域是一个单链表项，当一个进程要被换出内存时，它通过此域加入到以 KiProcessOurSwapListHead 为链头的单链表中；当一个进程要被换入内存时，它通过此域加入到以 KiProcessInSwapListHead 为链头的单链表中。这里，KiProcessOurSwapListHead 和 KiProcessInSwapListHead 是全局变量。</p>\n<h3 id=\"0x05c-affinity-uint4b\"><a class=\"anchor\" href=\"#0x05c-affinity-uint4b\">#</a> <strong>+0x05c Affinity         : Uint4B</strong></h3>\n<p>Affinity 域指定了该进程的线程可以在哪些处理器上运行，其类型是 KAFFINITY, 这是一个 32 位或 64 位整数，其二进制表示的每位分别对应于当前机器上的一个处理器 (或核)。</p>\n<p>规定进程里面的所有线程能在哪个 CPU 上跑，如果值为 1，那这个进程的所以线程只能在 0 号 CPU 上跑 (00000001)\t\t\t\t<br />\n如果值为 3，那这个进程的所以线程能在 0、1 号 CPU 上跑 (000000011)\t<br />\n如果值为 4，那这个进程的所以线程能在 2 号 CPU 上跑 (000000100)\t<br />\n如果值为 5，那这个进程的所以线程能在 0，2 号 CPU 上跑 (000000101)\t<br />\n4 个字节共 32 位  所以最多 32 核 Windows64 位 就 64 核\t\t\t<br />\n如果只有一个 CPU 把这个设置为 4 那么这个进程就死了</p>\n<h3 id=\"0x062-basepriority-char\"><a class=\"anchor\" href=\"#0x062-basepriority-char\">#</a> <strong>+0x062 BasePriority     : Char</strong></h3>\n<p>基础优先级或最低优先级 该进程中的所有线程最起码的优先级.</p>\n<h3 id=\"0x065-state-uchar\"><a class=\"anchor\" href=\"#0x065-state-uchar\">#</a> <strong>+0x065 State            : UChar</strong></h3>\n<p>State 域说明了一个进程是否在内存中，共有六种可能的状态： <code>ProcessInMemory</code> 、 <code>ProcessOutOfMemory</code> 、 <code>ProcessInTransition</code> 、 <code>ProcessOutTransition</code> 、 <code>ProcessInSwap</code>  和 <code>ProcessOutSwap</code> 。所谓一个进程在内存中，或者已被换出，或者正在转移过程中，是指该进程的虚拟地址空间需要占据足够的物理内存，或者虚拟空间中的内容已被换出物理内存，或者正在换入或换出过程之中。</p>\n<h2 id=\"eprocess其他成员\"><a class=\"anchor\" href=\"#eprocess其他成员\">#</a> EPROCESS 其他成员</h2>\n<p>执行体层的进程和线程对象。E 开头的。</p>\n<h3 id=\"0x070-createtime-_large_integer-0x078-exittime-_large_integer\"><a class=\"anchor\" href=\"#0x070-createtime-_large_integer-0x078-exittime-_large_integer\">#</a> <strong>【+0x070 CreateTime       : _LARGE_INTEGER】、【+0x078 ExitTime         : _LARGE_INTEGER】</strong></h3>\n<p>进程的创建 / 退出时间。 没什么用，不准确。</p>\n<h3 id=\"0x084-uniqueprocessid-ptr32-void\"><a class=\"anchor\" href=\"#0x084-uniqueprocessid-ptr32-void\">#</a> <strong>+0x084 UniqueProcessId  : Ptr32 Void</strong></h3>\n<p>进程的编号 任务管理器中的 PID</p>\n<h3 id=\"0x088-activeprocesslinks-_list_entry\"><a class=\"anchor\" href=\"#0x088-activeprocesslinks-_list_entry\">#</a> <strong>+0x088 ActiveProcessLinks : _LIST_ENTRY</strong></h3>\n<p>双向链表 所有的活动进程都连接在一起，构成了一个链表<br />\n PsActiveProcessHead 指向全局链表头</p>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<h3 id=\"0x090-quotausage-3-uint4b-0x09c-quotapeak-3-uint4b\"><a class=\"anchor\" href=\"#0x090-quotausage-3-uint4b-0x09c-quotapeak-3-uint4b\">#</a> <strong>【+0x090 QuotaUsage       : [3] Uint4B】、【+0x09c QuotaPeak        : [3] Uint4B】</strong></h3>\n<p>物理页相关的统计信息</p>\n<h3 id=\"0x0a8-commitcharge-uint4b-0x0ac-peakvirtualsize-uint4b-0x0b0-virtualsize-uint4b\"><a class=\"anchor\" href=\"#0x0a8-commitcharge-uint4b-0x0ac-peakvirtualsize-uint4b-0x0b0-virtualsize-uint4b\">#</a> <strong>【+0x0a8 CommitCharge     : Uint4B】、【+0x0ac PeakVirtualSize  : Uint4B】、【+0x0b0 VirtualSize      : Uint4B】</strong></h3>\n<p>虚拟内存相关的统计信息</p>\n<h3 id=\"0x11c-vadroot-ptr32-void\"><a class=\"anchor\" href=\"#0x11c-vadroot-ptr32-void\">#</a> <strong>+0x11c VadRoot          : Ptr32 Void</strong></h3>\n<p>标识 0-2G 哪些地址被占用了</p>\n<h3 id=\"0x0bc-debugport-ptr32-void-0x0c0-exceptionport-ptr32-void\"><a class=\"anchor\" href=\"#0x0bc-debugport-ptr32-void-0x0c0-exceptionport-ptr32-void\">#</a> <strong>【+0x0bc DebugPort        : Ptr32 Void】、【+0x0c0 ExceptionPort    : Ptr32 Void】</strong></h3>\n<p>调试相关</p>\n<h3 id=\"0x0c4-objecttable-ptr32-_handle_table\"><a class=\"anchor\" href=\"#0x0c4-objecttable-ptr32-_handle_table\">#</a> <strong>+0x0c4 ObjectTable      : Ptr32 _HANDLE_TABLE</strong></h3>\n<p>句柄表</p>\n<h3 id=\"0x174-imagefilename-16-uchar\"><a class=\"anchor\" href=\"#0x174-imagefilename-16-uchar\">#</a> <strong>+0x174 ImageFileName    : [16] UChar</strong></h3>\n<p>进程镜像文件名 最多 16 个字节</p>\n<h3 id=\"0x1a0-activethreads-uint4b\"><a class=\"anchor\" href=\"#0x1a0-activethreads-uint4b\">#</a> <strong>+0x1a0 ActiveThreads    : Uint4B</strong></h3>\n<p>活动线程的数量</p>\n<h3 id=\"0x1b0-peb-ptr32-_peb\"><a class=\"anchor\" href=\"#0x1b0-peb-ptr32-_peb\">#</a> <strong>+0x1b0 Peb              : Ptr32 _PEB</strong></h3>\n<p>PEB ((Process Environment Block 进程环境块)：进程在 3 环的一个结构体，里面包含了进程的模块列表、是否处于调试状态等信息。</p>\n<p>关于 PEB 或者其他成员更加详细的说明：参考 潘爱民老师《Windows 内核原理与实现》 中的第 3 章</p>\n<h1 id=\"本章总结\"><a class=\"anchor\" href=\"#本章总结\">#</a> 本章总结</h1>\n<p>0 环查看当前进程<br />\n通过 KPCR 找当前线程，然后找其 + 0x220 找当前进程。<br />\n后面通过学习进程的创建，来观察进程结构体是如何填充的。</p>\n<h1 id=\"实验练习\"><a class=\"anchor\" href=\"#实验练习\">#</a> 实验练习</h1>\n<blockquote>\n<ol>\n<li>体会 DebugPort 的作用：用调试器（调试器最好没有插件）调试程序，然后把 进程结构体的 DebugPort 清零，在调试器里接着调试，观察会发生什么。</li>\n</ol>\n</blockquote>\n<p>就不写代码更改了，直接用 windbg 修改了。<br />\n调试时 DebugPort 的值：</p>\n<p><img data-src=\"image002.png\" alt=\"\" /></p>\n<p><img data-src=\"image003.png\" alt=\"\" /></p>\n<p>清空这个值后，在调试器里执行单步：</p>\n<p><img data-src=\"image004.png\" alt=\"\" /></p>\n<p>直接报异常了。</p>\n<blockquote>\n<ol start=\"2\">\n<li>0 环进程断链</li>\n</ol>\n</blockquote>\n<p>代码如下：</p>\n<p>没有写恢复的。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;ntddk.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>VOID <span class=\"token function\">DriverUnload</span><span class=\"token punctuation\">(</span>PDRIVER_OBJECT pDriver<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是驱动，我卸载了\\t\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>NTSTATUS <span class=\"token function\">EProcessBreakChain</span><span class=\"token punctuation\">(</span>PUCHAR ProcessName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tULONG Pro<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token comment\">// 由 KPCR+0x124 的位置得到当前 CPU 正在处理的线程的结构体的指针，_KTHREAD + 0x44 的位置能够得到此线程的进程结构体的地址</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t__asm <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\tmov eax<span class=\"token punctuation\">,</span> fs<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0x124</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\tmov ecx<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>eax <span class=\"token operator\">+</span> <span class=\"token number\">0x44</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\tmov Pro<span class=\"token punctuation\">,</span> ecx<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token comment\">// 进程结构体 EPROCESS +0x88 的位置是一个链接所有进程的双向链表</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\tPLIST_ENTRY pListProcess <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PLIST_ENTRY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>Pro <span class=\"token operator\">+</span> <span class=\"token number\">0x88</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token comment\">// 遍历进程</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>pListProcess<span class=\"token operator\">-></span>Flink <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span>PLIST_ENTRY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>Pro <span class=\"token operator\">+</span> <span class=\"token number\">0x88</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t<span class=\"token comment\">//EPROCESS 结构体</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\tULONG NextProcess <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ULONG<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>pListProcess<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">0x88</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">strcmp</span><span class=\"token punctuation\">(</span>ProcessName<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>PCHAR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>NextProcess <span class=\"token operator\">+</span> <span class=\"token number\">0x174</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"FindProcess:%s PEPROCESS:%X\\t\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>PCHAR<span class=\"token punctuation\">)</span>NextProcess <span class=\"token operator\">+</span> <span class=\"token number\">0x174</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> NextProcess<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t\t<span class=\"token comment\">// 断链</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t\tPLIST_ENTRY CurPro <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PLIST_ENTRY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>NextProcess<span class=\"token operator\">+</span> <span class=\"token number\">0x88</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t\tPLIST_ENTRY BlinkPro <span class=\"token operator\">=</span> CurPro<span class=\"token operator\">-></span>Blink<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t\tPLIST_ENTRY FlinkPro <span class=\"token operator\">=</span> CurPro<span class=\"token operator\">-></span>Flink<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t\tBlinkPro<span class=\"token operator\">-></span>Flink <span class=\"token operator\">=</span> FlinkPro<span class=\"token operator\">-></span>Flink<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\t\tFlinkPro<span class=\"token operator\">-></span>Blink <span class=\"token operator\">=</span> BlinkPro<span class=\"token operator\">-></span>Flink<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> STATUS_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\tpListProcess <span class=\"token operator\">=</span> pListProcess<span class=\"token operator\">-></span>Flink<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token keyword\">return</span> STATUS_UNSUCCESSFUL<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>NTSTATUS <span class=\"token function\">DriverEntry</span><span class=\"token punctuation\">(</span>PDRIVER_OBJECT pDriver<span class=\"token punctuation\">,</span> PUNICODE_STRING pRegPath<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\tNTSTATUS ntStatus <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\tpDriver<span class=\"token operator\">-></span>DriverUnload <span class=\"token operator\">=</span> DriverUnload<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是驱动,我运行了\\t\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t<span class=\"token comment\">//r0 进程断链</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t<span class=\"token comment\">// 遍历进程\t 断链</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\tntStatus <span class=\"token operator\">=</span> <span class=\"token function\">EProcessBreakChain</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Dbgview.exe\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">NT_SUCCESS</span><span class=\"token punctuation\">(</span>ntStatus<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"断链失败！！\\t\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> ntStatus<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t<span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"断链成功！！\\t\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t<span class=\"token keyword\">return</span> STATUS_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"image001.png\" alt=\"\" /></p>\n<h1 id=\"reference\"><a class=\"anchor\" href=\"#reference\">#</a> Reference</h1>\n<p>潘爱民前辈的《Windows 内核原理与实现》一书。</p>\n",
            "tags": [
                "EPROCESS",
                "KPROCESS"
            ]
        }
    ]
}