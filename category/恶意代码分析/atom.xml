<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://Or0kit.github.io</id>
    <title>Or0kit • Posts by &#34;恶意代码分析&#34; category</title>
    <link href="https://Or0kit.github.io" />
    <updated>2022-03-15T10:56:17.000Z</updated>
    <category term="Algolia" />
    <category term="Drozer" />
    <category term="同义词替换" />
    <category term="xpath" />
    <category term="win32api" />
    <category term="WOW64" />
    <category term="windows消息机制" />
    <category term="虚拟内存" />
    <category term="jsDelivr" />
    <category term="First blog" />
    <category term="markdown 学习" />
    <category term="Android" />
    <category term="替换密钥" />
    <category term="数论基础" />
    <category term="ADB" />
    <category term="雷电模拟器" />
    <category term="Hadoop" />
    <category term="IDA" />
    <category term="Windows逆向" />
    <category term="SSH隧道" />
    <category term="url" />
    <category term="http" />
    <category term="应急响应" />
    <category term="Nginx" />
    <category term="Linux" />
    <category term="CentOS7配置vsftp" />
    <category term="Psad" />
    <category term="fwsnort" />
    <category term="x86汇编指令" />
    <category term="动态分析技术基础" />
    <category term="静态分析基础" />
    <category term="逆向" />
    <category term="IDA学习" />
    <category term="恶意代码分析实战入门" />
    <category term="加壳" />
    <category term="脱壳" />
    <category term="C++壳" />
    <category term="ESP寻址" />
    <category term="定位Win32窗口回调函数" />
    <category term="HOOK攻防" />
    <category term="瞬时HOOK过检测" />
    <category term="INLINE-HOOK" />
    <category term="IAT HOOK" />
    <category term="INLINE HOOK" />
    <category term="进程监控" />
    <category term="模块隐藏" />
    <category term="进程通信" />
    <category term="tlhelp32.h" />
    <category term="进程遍历" />
    <category term="模块遍历" />
    <category term="外挂原理" />
    <category term="DLL注入之进程间通信" />
    <category term="TEB" />
    <category term="PEB" />
    <category term="R3层断链" />
    <category term="Win临界区" />
    <category term="Win事件" />
    <category term="线程同步" />
    <category term="Win互斥体" />
    <category term="内存映射文件" />
    <category term="内存映射共享" />
    <category term="写拷贝" />
    <category term="Win子窗口控件" />
    <category term="win32文件函数" />
    <category term="代码注入" />
    <category term="窗口程序" />
    <category term="消息机制" />
    <category term="消息类型" />
    <category term="私有内存" />
    <category term="共享内存" />
    <category term="设备对象" />
    <category term="DC设备上下文" />
    <category term="图形对象" />
    <category term="创建线程" />
    <category term="线程控制" />
    <category term="线程相关API" />
    <category term="线程上下文" />
    <category term="CONTEXT结构体" />
    <category term="物理内存" />
    <category term="Windows进程" />
    <category term="句柄表" />
    <category term="远程线程函数" />
    <category term="远程线程" />
    <category term="DLL注入" />
    <category term="DLL注入相关函数" />
    <category term="WinMain函数" />
    <category term="调用约定" />
    <category term="我的GetProcAddress" />
    <category term="资源文件" />
    <category term="消息断点" />
    <category term="PE课后作业" />
    <category term="通用控件" />
    <category term="WM_NOTIFY消息类型" />
    <category term="MFC" />
    <category term="PE查看器" />
    <category term="RVA与FOA" />
    <category term="PE结构" />
    <category term="DOS头属性说明" />
    <category term="标准PE头属性说明" />
    <category term="扩展PE头属性说明" />
    <category term="节表属性说明" />
    <category term="空白区添加代码" />
    <category term="合并节" />
    <category term="导入表" />
    <category term="注入" />
    <category term="导入表注入" />
    <category term="导出表" />
    <category term="扩大节" />
    <category term="新增节" />
    <category term="移动NT头" />
    <category term="移动导出表" />
    <category term="移动重定位表" />
    <category term="重定位表" />
    <category term="静态链接库" />
    <category term="动态链接库" />
    <category term="句柄" />
    <category term="CobaltStrike" />
    <category term="RedTeam" />
    <category term="Apeache" />
    <category term="php" />
    <category term="Nmap" />
    <category term="guestbook" />
    <category term="SQLmap" />
    <category term="apache" />
    <category term="log" />
    <category term="mysql主键" />
    <category term="CSRF" />
    <category term="SSRF" />
    <category term="业务逻辑漏洞" />
    <category term="xss" />
    <category term="webshell流量特征" />
    <category term="虚拟网卡" />
    <category term="button" />
    <category term="单选框" />
    <category term="复选框件" />
    <category term="Edit" />
    <category term="Combo Box" />
    <category term="Tab" />
    <category term="ListCtrl" />
    <category term="MFC的本质" />
    <category term="MFC的层次结构图" />
    <category term="手动创建一个MFC程序" />
    <category term="MFC的初始化过程" />
    <category term="MFC运行时类型识别" />
    <category term="关键字static" />
    <category term="关键字const" />
    <category term="MFC动态创建" />
    <category term="MFC消息映射" />
    <category term="结构体AFX_MSGMAP_ENTRY" />
    <category term="结构体AFX_MSGM" />
    <category term="MFC的三大类消息" />
    <category term="数据传输" />
    <category term="ini文件的读写" />
    <category term="python" />
    <category term="SSH" />
    <category term="python文件读取" />
    <category term="数据分析" />
    <category term="socket" />
    <category term="数据库编程" />
    <category term="python内置属性" />
    <category term="multiprocessing" />
    <category term="threading" />
    <category term="scrapy" />
    <category term="测试" />
    <category term="BHP" />
    <category term="Python的import功能" />
    <category term="木马" />
    <category term="非可变序列算法" />
    <category term="可变序列算法" />
    <category term="排序算法" />
    <category term="迭代器" />
    <category term="使用自定义对象" />
    <category term="0环与3环的通信（常规方法）" />
    <category term="内核空间" />
    <category term="内核模块" />
    <category term="遍历内核模块" />
    <category term="定位未导出函数PspTiminateProcess" />
    <category term="内核编程基础" />
    <category term="ANSI_STRING" />
    <category term="UNICODE_STRING" />
    <category term="内核内存" />
    <category term="上下文环境" />
    <category term="中断请求级别" />
    <category term="链表" />
    <category term="自旋锁" />
    <category term="注册表" />
    <category term="地址空间" />
    <category term="文件操作" />
    <category term="线程与事件" />
    <category term="内核重载" />
    <category term="配置VS2019+WDK10" />
    <category term="第一个驱动程序" />
    <category term="驱动调试" />
    <category term="调试驱动程序" />
    <category term="OpenSCManager" />
    <category term="CreateService" />
    <category term="APC的本质" />
    <category term="APC的备用队列" />
    <category term="线性地址的管理" />
    <category term="VAD树" />
    <category term="_MMVAD" />
    <category term="_MMVAD_FLAGS" />
    <category term="共享物理页" />
    <category term="共享文件" />
    <category term="LoadLibrary的本质" />
    <category term="VirtualAlloc" />
    <category term="MEM_COMMIT与MEM_RESERVE" />
    <category term="malloc" />
    <category term="堆内存" />
    <category term="栈内存" />
    <category term="全局区内存" />
    <category term="MmAddPhysicalMemoryEx" />
    <category term="缺页异常" />
    <category term="消息队列" />
    <category term="PsConvertToGuiThread" />
    <category term="win32k.sys" />
    <category term="GUI线程" />
    <category term="窗口程序的创建" />
    <category term="消息循环" />
    <category term="临界区" />
    <category term="KPCR结构体" />
    <category term="模拟线程切换" />
    <category term="模拟挂起与恢复函数" />
    <category term="等待链表" />
    <category term="调度链表" />
    <category term="ETHREAD" />
    <category term="KTHREAD" />
    <category term="进程的创建" />
    <category term="获取当前进程" />
    <category term="EPROCESS" />
    <category term="KPROCESS" />
    <category term="2-9-9-12分页" />
    <category term="PAE" />
    <category term="PDPTE" />
    <category term="PDE" />
    <category term="PTE" />
    <category term="XD标志位" />
    <category term="逆向分析MmIsAddressValid函数(2-9-9-12)" />
    <category term="TLB" />
    <category term="INVLPG指令" />
    <category term="全局页" />
    <category term="ShadowWalker" />
    <category term="PWT" />
    <category term="PDT" />
    <category term="CPU缓存" />
    <category term="中断" />
    <category term="异常" />
    <category term="CLI指令" />
    <category term="STI指令" />
    <category term="INT2" />
    <category term="INT8" />
    <category term="中断门描述符" />
    <category term="IDT" />
    <category term="提权" />
    <category term="跨段跳转流程" />
    <category term="JMP FAR指令" />
    <category term="TSS" />
    <category term="任务门" />
    <category term="LDT段描述符" />
    <category term="LDT" />
    <category term="CR0" />
    <category term="CR2" />
    <category term="CR4" />
    <category term="CRL" />
    <category term="DPL" />
    <category term="RPL" />
    <category term="段寄存器结构" />
    <category term="段描述符" />
    <category term="段选择子" />
    <category term="GDT表" />
    <category term="调用门" />
    <category term="调用门描述符" />
    <category term="逆向分析MmIsAddressValid函数" />
    <category term="error C2143" />
    <category term="error C2275" />
    <category term="CALL与CALL FAR" />
    <category term="陷阱门描述符" />
    <category term="10-10-12分页" />
    <category term="页目录表基址" />
    <category term="页表的基址" />
    <category term="0地址执行ShellCode" />
    <category term="PDE_PTE" />
    <category term="物理页" />
    <category term="SSDT HOOK" />
    <category term="OpenProcess" />
    <category term="系统服务表" />
    <category term="SSDT" />
    <category term="SSDT HOOK隐藏" />
    <category term="API进出内核" />
    <category term="系统调用阶段总结" />
    <category term="网络安全法" />
    <category term="ASCII" />
    <category term="GBK" />
    <category term="ANSI" />
    <category term="Unicode" />
    <category term="UTF-8" />
    <category term="URL 编码/解码" />
    <category term="十进制" />
    <category term="二进制" />
    <category term="十六进制" />
    <category term="内存" />
    <category term="x64" />
    <category term="编写ShellCode实现IAT HOOK" />
    <category term="ShellCode原则" />
    <category term="傀儡进程加密壳" />
    <category term="ZwUnmapViewOfSection函数" />
    <category term="加载图标" />
    <category term="提取图标" />
    <category term="资源表" />
    <category term="HTML" />
    <category term="文件包含" />
    <category term="sql注入" />
    <category term="MFC命令传递" />
    <category term="远控界面编写" />
    <category term="STL" />
    <category term="Vector容器" />
    <category term="Deque容器" />
    <category term="List容器" />
    <category term="Set容器" />
    <category term="Multiset容器" />
    <category term="Map容器" />
    <category term="Multimap容器" />
    <category term="Stack容器" />
    <category term="Queue容器" />
    <category term="priority_queue容器" />
    <category term="经典定长指令" />
    <category term="经典变长指令" />
    <category term="指令前缀" />
    <category term="串口" />
    <category term="过滤" />
    <category term="键盘过滤" />
    <category term="KAPC" />
    <category term="QueueUserAPC" />
    <category term="NtQueueApcThread" />
    <category term="KeInitializeApc" />
    <category term="KeInsertQueueApc" />
    <category term="KiInsertQueueApc" />
    <category term="进程句柄表" />
    <category term="全局句柄表" />
    <category term="消息队列与线程" />
    <category term="Windows线程切换" />
    <category term="KiSwapContext" />
    <category term="SwapContext" />
    <category term="时钟中断" />
    <category term="时间片管理" />
    <category term="线程切换与TSS" />
    <category term="线程切换与FS" />
    <category term="线程切换与线程优先级" />
    <category term="快速调用" />
    <category term="中断调用" />
    <category term="分析ReadProcessMemory" />
    <category term="KiFastSystemCall" />
    <category term="KiIntSystemCall" />
    <category term="重写3环" />
    <category term="文件上传" />
    <category term="隐藏驱动" />
    <category term="IopLoadDriver" />
    <category term="延迟过程调用" />
    <category term="进程挂靠" />
    <category term="跨进程读写内存" />
    <category term="APC" />
    <category term="逆向分析NtReadVirtualMemory" />
    <category term="逆向分析NtWriteVIrtualMemory" />
    <category term="AD-Attack-Defense" />
    <category term="payload" />
    <category term="sysenter指令" />
    <category term="KiFastCallEntry函数" />
    <category term="KiSystemService函数" />
    <category term="Trap_Frame" />
    <category term="web安全" />
    <category term="磁盘虚拟" />
    <category term="PDO" />
    <category term="Windows中从击键到内核的过程" />
    <category term="KEYBOARD_INPUT_DATA结构" />
    <category term="IRP完成回调函数" />
    <category term="DriverEntry函数的定义" />
    <category term="WDF_DRIVER_CONFIG结构" />
    <category term="EvtDriverDeviceAdd函数" />
    <category term="FAT12/16磁盘卷" />
    <category term="磁盘的过滤" />
    <category term="具有还原功能的磁盘卷过滤驱动" />
    <category term="文件系统" />
    <category term="Minifilter" />
    <category term="boot驱动" />
    <category term="bitmap" />
    <category term="_KUSER_SHARED_DATA" />
    <category term="哈希表" />
    <category term="Sfilter" />
    <category term="Windows网络编程" />
    <category term="协议层次和服务模型" />
    <category term="IP地址" />
    <category term="端口号" />
    <category term="DNS" />
    <category term="网络地址转换NAT" />
    <category term="分布式网络应用程序" />
    <category term="客户/服务器模型" />
    <category term="浏览器/服务器模型" />
    <category term="P2P模型" />
    <entry>
        <id>https://or0kit.github.io/Bin/MalwareAnalysis/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-Lab5/</id>
        <title>恶意代码分析实战-Lab5</title>
        <link rel="alternate" href="https://or0kit.github.io/Bin/MalwareAnalysis/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-Lab5/"/>
        <content type="html">&lt;h1 id=&#34;lab5-1&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#lab5-1&#34;&gt;#&lt;/a&gt; Lab5-1&lt;/h1&gt;
&lt;p&gt;只用 IDA Pro 分析在文件 Lb05-O1.dl 中发现的恶意代码。这个实验的目标是给你一个用 IDA Pro 动手的经验。如果你已经用 IDA Pro 工作过，你可以选择忽略这些问题，而将精力集中在逆向工程恶意代码上。&lt;/p&gt;
&lt;h2 id=&#34;问题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#问题&#34;&gt;#&lt;/a&gt; 问题&lt;/h2&gt;
&lt;p&gt;1．D11Main 的地址是什么？&lt;br /&gt;
2．使用 Imports 窗口并浏览到 gethostbyname，导入函数定位到什么地址？&lt;br /&gt;
3．有多少函数调用了 gethostbyname？&lt;br /&gt;
4．将精力集中在位于 0x10001757 处的对 gethostbyname 的调用，你能找出哪个 DNS 请求将被触发吗？&lt;br /&gt;
5．IDA Pro 识别了在 0x10001656 处的子过程中的多少个局部变量？&lt;br /&gt;
6．IDA Pro 识别了在 0x10001656 处的子过程中的多少个参数？&lt;br /&gt;
7．使用 Strings 窗口，来在反汇编中定位字符串 \cmd.exe/c。它位于哪？&lt;br /&gt;
8．在引用 \cmd.exe/c 的代码所在的区域发生了什么？&lt;br /&gt;
9．在同样的区域，在 0x100101C8 处，看起来好像 dword＿1008E5C4 是一个全局变量，它帮助决定走哪条路径。那恶意代码是如何设置 dword＿1008E5C4 的呢？（提示：使用 dword＿1008E5C4 的交叉引用。）&lt;br /&gt;
10. 在位于 0x1000FF58 处的子过程中的几百行指令中，一系列使用 memcmp 来比较字符串的比较。如果对 robotwork 的字符串比较是成功的（当 memcmp 返回 0), 会发生什么？&lt;br /&gt;
11. PSLIST 导出函数做了什么？&lt;br /&gt;
12. 使用图模式来绘制出对 sub_10004E79 的交叉引用图。当进入这个函数时，哪个 API 函数可能被调用？仅仅基于这些 API 函数，你会如何重命名这个函数？&lt;br /&gt;
13. DllMain 直接调用了多少个 WindowsAPI ? 多少个在深度为 2 时被调用？&lt;br /&gt;
14. 在 0×10001358 处，有一个对 Sleep (一个使用一个包含要睡眠的毫秒数的参数的 API 函数）的调用。顺着代码向后看，如果这段代码执行，这个程序会睡眠多久？&lt;br /&gt;
15. 在 0×10001701 处是一个对 socket 的调用。它的 3 个参数是什么？&lt;br /&gt;
16. 使用 MSDN 页面的 socket 和 IDAPro 中的命名符号常量，你能使参数更加有意义吗？在你应用了修改以后，参数是什么？&lt;br /&gt;
17. 搜索 in 指令（opcode 0xED) 的使用。这个指令和一个魔术字符串 VMXh 用来进行 VMware 检测。这在这个恶意代码中被使用了吗？使用对执行 in 指令函数的交叉引用，能发现进一步检测 VMware 的证据吗？&lt;br /&gt;
18. 将你的光标跳转到 0×1001D988 处，你发现了什么？&lt;br /&gt;
19. 如果你安装了 IDAPython 插件（包括 IDAPro 的商业版本的插件）,&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3huLS1MYWIwNS0wMS1sbzl3eTM2Yy5weQ==&#34;&gt; 运行 Lab05-01.py&lt;/span&gt;, 一个本书中随恶意代码提供的 IDAPro Python 脚本，(确定光标是在 0x1001D988 处。）在你运行这个脚本后发生了什么？&lt;br /&gt;
20. 将光标放在同一位置，你如何将这个数据转成一个单一的 ASCII 字符串？&lt;br /&gt;
21. 使用一个文本编辑器打开这个脚本。它是如何工作的？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;.text:1000D02E&lt;/code&gt;  在 IDA 中打开此文件，IDA 会直接帮我们定位到 DLLMain 函数，想来是因为此函数具备特征。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.idata:100163CC&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;把光标放到 gethostbyname 所在的地址处，按下  &lt;code&gt;x&lt;/code&gt;  使用交叉引用，介意发现观察到：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;image001.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;在整个恶意代码中 gethostbyname 被 5 个函数调用 9 次。&lt;/p&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;:&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight raw&#34;&gt;&lt;figcaption data-lang=&#34;&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;.text:1000174E                 mov     eax, off_10019040 ; eax 指向了一个地址 这里面存储着指向 &amp;#39;[This is RDO] pics.praticalmalwareanalysis.com&amp;#39;,0 的首地址&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;.text:10001753                 add     eax, 0Dh        ; eax + 0xD&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;.text:10001753                                         ; 此时的 eax 跳过了 [This is RDO] 指向了 pics.praticalmalwareanalysis.com 的首地址&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;.text:10001756                 push    eax             ; 压栈 压入指向 pics.praticalmalwareanalysis.com 的地址&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;.text:10001757                 call    ds:gethostbyname&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;off_10019040    dd offset aThisIsRdoPicsP&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;aThisIsRdoPicsP db &amp;#39;[This is RDO] pics.praticalmalwareanalysis.com&amp;#39;,0&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;: 24 个局部变量&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight raw&#34;&gt;&lt;figcaption data-lang=&#34;&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;.text:10001656 ; DWORD __stdcall sub_10001656(LPVOID lpThreadParameter)&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;.text:10001656 sub_10001656    proc near               ; DATA XREF: DllMain(x,x,x)+C8↓o&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;.text:10001656&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;.text:10001656 var_675         &amp;#x3D; byte ptr -675h&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;.text:10001656 var_674         &amp;#x3D; dword ptr -674h&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;.text:10001656 hModule         &amp;#x3D; dword ptr -670h&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;.text:10001656 timeout         &amp;#x3D; timeval ptr -66Ch&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;.text:10001656 name            &amp;#x3D; sockaddr ptr -664h&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;.text:10001656 var_654         &amp;#x3D; word ptr -654h&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;.text:10001656 in              &amp;#x3D; in_addr ptr -650h&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;.text:10001656 Str1            &amp;#x3D; byte ptr -644h&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;.text:10001656 var_640         &amp;#x3D; byte ptr -640h&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;.text:10001656 CommandLine     &amp;#x3D; byte ptr -63Fh&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;.text:10001656 Str             &amp;#x3D; byte ptr -63Dh&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;.text:10001656 var_638         &amp;#x3D; byte ptr -638h&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;.text:10001656 var_637         &amp;#x3D; byte ptr -637h&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;.text:10001656 var_544         &amp;#x3D; byte ptr -544h&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;.text:10001656 var_50C         &amp;#x3D; dword ptr -50Ch&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;.text:10001656 var_500         &amp;#x3D; byte ptr -500h&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;.text:10001656 Buf2            &amp;#x3D; byte ptr -4FCh&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;.text:10001656 readfds         &amp;#x3D; fd_set ptr -4BCh&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;.text:10001656 buf             &amp;#x3D; byte ptr -3B8h&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;.text:10001656 var_3B0         &amp;#x3D; dword ptr -3B0h&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;.text:10001656 var_1A4         &amp;#x3D; dword ptr -1A4h&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;.text:10001656 var_194         &amp;#x3D; dword ptr -194h&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;.text:10001656 WSAData         &amp;#x3D; WSAData ptr -190h&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;.text:10001656 lpThreadParameter&amp;#x3D; dword ptr  4&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;ol start=&#34;6&#34;&gt;
&lt;li&gt;
&lt;p&gt;1 个参数&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;10095B34 aCmdExeC        db &#39;\cmd.exe /c &#39;,0&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;把这串字符串拼接到了临时变量 Destination 的后面，Destination 中之前存储的是系统目录，在后续操作中 将此变量作为参数 调用了 CreateProcessA 函数，既打开了 Shell 会话。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;整个恶意代码中对 dword_1008E5C4  变量涉及写操作的代码如下：&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight raw&#34;&gt;&lt;figcaption data-lang=&#34;&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;.text:10001673                 call    ProbeSystemVersion ; 这个函数被我重命名了&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;.text:10001678                 mov     dword_1008E5C4, eax ; 把返回值赋给全局变量 是一个布尔类型的值&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;调用了一个函数后把 eax 也就是函数的返回值赋给了这个全局变量，看一看这个函数做了什么：&lt;/p&gt;
&lt;figure class=&#34;highlight raw&#34;&gt;&lt;figcaption data-lang=&#34;&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;.text:10003695 ProbeSystemVersion proc near            ; CODE XREF: sub_10001656+1D↑p&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;.text:10003695                                         ; sub_10003B75+7↓p ...&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;.text:10003695&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;.text:10003695 VersionInformation&amp;#x3D; _OSVERSIONINFOA ptr -94h&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;.text:10003695&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;.text:10003695                 push    ebp&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;.text:10003696                 mov     ebp, esp&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;.text:10003698                 sub     esp, 94h&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;.text:1000369E                 lea     eax, [ebp+VersionInformation]&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;.text:100036A4                 mov     [ebp+VersionInformation.dwOSVersionInfoSize], 94h&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;.text:100036AE                 push    eax             ; lpVersionInformation&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;.text:100036AF                 call    ds:GetVersionExA&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;.text:100036B5                 xor     eax, eax&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;.text:100036B7                 cmp     [ebp+VersionInformation.dwPlatformId], 2 ; 2 表示操作系统是&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;.text:100036B7                                         ; Windows 7、Windows Server 2008、&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;.text:100036B7                                         ; Windows Vista、Windows Server 2003、&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;.text:100036B7                                         ; Windows XP 或 Windows 2000。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;.text:100036BE                 setz    al              ; 把 ZF 标志位赋值给 al&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;.text:100036C1                 leave&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;.text:100036C2                 retn&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;.text:100036C2 ProbeSystemVersion endp&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;可以发现此函数就是判断操作系统是否是 Windows 7、Windows Server 2008、Windows Vista、Windows Server 2003、Windows XP 或 Windows 2000。如果是的话返回值就是 1 不是的话返回值就是 0  然后根据这个结果判断 Shell 会话是 cmd.exe 还是 command.exe ，后面会调用 CreateProcessA 来创建一个 Shell 会话，另外根据上下代码的一些字符串可以知道，此函数主要是为了开启远程 Shell 会话。&lt;/p&gt;
&lt;ol start=&#34;11&#34;&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
</content>
        <category term="逆向" />
        <category term="IDA学习" />
        <updated>2022-03-15T10:56:17.000Z</updated>
    </entry>
    <entry>
        <id>https://or0kit.github.io/Bin/MalwareAnalysis/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E7%AC%AC03%E7%AB%A0/</id>
        <title>恶意代码分析实战-第03章动态分析技术基础</title>
        <link rel="alternate" href="https://or0kit.github.io/Bin/MalwareAnalysis/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E7%AC%AC03%E7%AB%A0/"/>
        <content type="html">&lt;h1 id=&#34;动态分析技术基础&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#动态分析技术基础&#34;&gt;#&lt;/a&gt; 动态分析技术基础&lt;/h1&gt;
&lt;p&gt;动态分析就是运行恶意代码之后进行检查的过程。&lt;/p&gt;
&lt;p&gt;动态分析是恶意代码分析流程的第二步，一般在静态分析进入死胡同时进行，比如恶意代码进行了混淆，或者分析师已经穷尽了可用的静态分析技术。动态分析技术包括在恶意代码运行时时刻进行监控，以及在恶意代码运行之后来检查系统情况。&lt;/p&gt;
&lt;p&gt;与静态分析技术不同，动态分析技术能让你观察到恶意代码的真实功能，&lt;strong&gt;一个行为存在于二进制程序中，并不意味着它就会被执行。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;动态分析也是一种识别恶意代码功能的有效方法。例如你要分析的恶意代码是键盘记录程序，动态分析技术能让你在系统上找到键盘记录的日志文件，发现它的各种记录，追踪它将技术发送到哪里了，等等。这种深刻的洞察力是静态分析基础技术很那获得的。&lt;/p&gt;
&lt;p&gt;虽然动态分析技术非常强大，&lt;strong&gt;但它会让你的网络和系统处于危险之中&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;动态分析技术也有着它们的局限性，一个恶意代码在执行时不是所有代码都会被执行到的。例如，在一个需要参数命令行的恶意代码，每一个参数都会执行不同的程序功能，如果你不知道所有的命令行选项，你就不能动态分析出所有程序功能。这时就要利用更为高级的动态分析技术或者静态分析技术了。&lt;/p&gt;
&lt;h2 id=&#34;沙箱简便但粗糙的方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#沙箱简便但粗糙的方法&#34;&gt;#&lt;/a&gt; 沙箱：简便但粗糙的方法&lt;/h2&gt;
&lt;p&gt;沙箱包括一个虚拟环境，通过某种方式模拟网络服务，以确保被测试的软件或恶意代码能正常执行。&lt;/p&gt;
</content>
        <category term="动态分析技术基础" />
        <updated>2021-11-30T12:26:59.000Z</updated>
    </entry>
    <entry>
        <id>https://or0kit.github.io/Bin/MalwareAnalysis/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E7%AC%AC01%E7%AB%A0/</id>
        <title>恶意代码分析实战-第01章静态分析技术基础</title>
        <link rel="alternate" href="https://or0kit.github.io/Bin/MalwareAnalysis/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E7%AC%AC01%E7%AB%A0/"/>
        <content type="html">&lt;h1 id=&#34;静态分析基础技术&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#静态分析基础技术&#34;&gt;#&lt;/a&gt; 静态分析基础技术&lt;/h1&gt;
&lt;p&gt;本章将讨论从可执行文件提取有用的信息的多种方法，包括以下技术：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用反病毒软件来确认程序样本的恶意性；&lt;/li&gt;
&lt;li&gt;使用哈希来识别恶意代码；&lt;/li&gt;
&lt;li&gt;从文件的字符串列表、函数和文件头信息中发掘有用的信息。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;每种技术都可以提供不同的信息，使用哪种技术则取决于你的目标。在大多数情况下，你需要使用多种技术，来尽可能多的搜集信息。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;反病毒引擎扫描： 实用的第一步&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;哈希值：恶意代码的指纹&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;查找字符串&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;加壳与混淆恶意代码&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;文件加壳&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;5.1 使用 PEID 检测加壳&lt;/p&gt;
&lt;ol start=&#34;6&#34;&gt;
&lt;li&gt;
&lt;p&gt;PE 文件格式&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;链接库与函数&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;7.1 静态链接、运行时链接与动态链接&lt;/p&gt;
&lt;p&gt;7.2 使用 Dependency Walker 工具探索动态链接函数&lt;/p&gt;
&lt;p&gt;7.3 导入函数&lt;/p&gt;
&lt;ol start=&#34;8&#34;&gt;
&lt;li&gt;导出函数&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;静态分析技术实践&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#静态分析技术实践&#34;&gt;#&lt;/a&gt; 静态分析技术实践&lt;/h1&gt;
&lt;p&gt;课后作业&lt;/p&gt;
&lt;h1 id=&#34;lab-1-1&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#lab-1-1&#34;&gt;#&lt;/a&gt; Lab 1-1&lt;/h1&gt;
&lt;p&gt;这个实验使用 Lab01-01.exe 和 Lab01-01.dll 文件，使用本章描述的工具和技术来获取关于这些文件的信息。&lt;/p&gt;
&lt;p&gt;问题&lt;br /&gt;
 1. 将文件上传至 http://www.VirusTotal.com/ 进行分析并查看报告。文件匹配到了已有的反病毒软件特征吗？&lt;br /&gt;
2. 这些文件是什么时候编译的？&lt;br /&gt;
3. 这两个文件中是否存在迹象说明它们是否被加壳或混淆了？如果是，这些迹象在哪里？&lt;br /&gt;
4. 是否有导入函数显示出了这个恶意代码是做什么的？如果是，是哪些导入函数？&lt;br /&gt;
5. 是否有任何其他文件或基于主机的迹象，让你可以在受感染系统上查找？&lt;br /&gt;
6. 是否有基于网络的迹象，可以用来发现受感染机器上的这个恶意代码？&lt;br /&gt;
7. 你猜这些文件的目的是什么？&lt;/p&gt;
&lt;h2 id=&#34;操作环境&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#操作环境&#34;&gt;#&lt;/a&gt; 操作环境&lt;/h2&gt;
&lt;p&gt;实验场景: Windows Xp sp3&lt;/p&gt;
&lt;p&gt;实验工具： PEid  Strings PETools &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL1ZpclNDQU4ub3Jn&#34;&gt;VirSCAN.org&lt;/span&gt;（云分析网站）VirusTotal&lt;/p&gt;
&lt;p&gt;实验文件： Lab01-01.exe Lab01-01.dll&lt;/p&gt;
&lt;p&gt;实验思路：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;利用网络扫描工具对目标文件进行扫描。&lt;/li&gt;
&lt;li&gt;利用本地静态分析工具分析目标程序。&lt;/li&gt;
&lt;li&gt;对上述结果进行分析。&lt;/li&gt;
&lt;/ol&gt;
</content>
        <category term="静态分析基础" />
        <updated>2021-11-30T12:26:50.000Z</updated>
    </entry>
    <entry>
        <id>https://or0kit.github.io/Bin/MalwareAnalysis/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E7%AC%AC0%E7%AB%A0/</id>
        <title>恶意代码分析实战-第0章</title>
        <link rel="alternate" href="https://or0kit.github.io/Bin/MalwareAnalysis/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%98-%E7%AC%AC0%E7%AB%A0/"/>
        <content type="html">&lt;h1 id=&#34;恶意代码分析技术入门&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#恶意代码分析技术入门&#34;&gt;#&lt;/a&gt; 恶意代码分析技术入门&lt;/h1&gt;
&lt;h2 id=&#34;恶意代码分析目标&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#恶意代码分析目标&#34;&gt;#&lt;/a&gt; 恶意代码分析目标&lt;/h2&gt;
&lt;h2 id=&#34;恶意代码分析技术&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#恶意代码分析技术&#34;&gt;#&lt;/a&gt; 恶意代码分析技术&lt;/h2&gt;
&lt;h3 id=&#34;静态分析基础技术&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#静态分析基础技术&#34;&gt;#&lt;/a&gt; 静态分析基础技术&lt;/h3&gt;
&lt;h3 id=&#34;动态分析基础技术&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#动态分析基础技术&#34;&gt;#&lt;/a&gt; 动态分析基础技术&lt;/h3&gt;
&lt;h3 id=&#34;静态分析高级技术&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#静态分析高级技术&#34;&gt;#&lt;/a&gt; 静态分析高级技术&lt;/h3&gt;
&lt;h3 id=&#34;动态分析高级技术&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#动态分析高级技术&#34;&gt;#&lt;/a&gt; 动态分析高级技术&lt;/h3&gt;
&lt;h2 id=&#34;恶意代码类型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#恶意代码类型&#34;&gt;#&lt;/a&gt; 恶意代码类型&lt;/h2&gt;
&lt;h2 id=&#34;恶意代码分析通用规则&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#恶意代码分析通用规则&#34;&gt;#&lt;/a&gt; 恶意代码分析通用规则&lt;/h2&gt;
</content>
        <category term="恶意代码分析实战入门" />
        <updated>2021-11-30T12:26:19.000Z</updated>
    </entry>
</feed>
