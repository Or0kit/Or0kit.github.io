{
    "version": "https://jsonfeed.org/version/1",
    "title": "Or0kit • All posts by \"apc机制\" category",
    "description": "临渊羡鱼，不如退而结网",
    "home_page_url": "https://Or0kit.github.io",
    "items": [
        {
            "id": "https://or0kit.github.io/Bin/Core/WindowsXp/Apc/APC%E6%9C%BA%E5%88%B6-04APC%E7%9A%84%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B/",
            "url": "https://or0kit.github.io/Bin/Core/WindowsXp/Apc/APC%E6%9C%BA%E5%88%B6-04APC%E7%9A%84%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B/",
            "title": "APC机制-04APC的执行过程",
            "date_published": "2022-03-06T07:34:20.000Z",
            "content_html": "<h1 id=\"楔子\"><a class=\"anchor\" href=\"#楔子\">#</a> 楔子</h1>\n<p>APC 函数的执行与插入并不是同一个线程，具体点说：</p>\n<p>在 A 线程中向 B 线程插入一个 APC，插入的动作是在 A 线程中完成的，但什么时候执行则由 B 线程决定！，所以叫 “异步过程调用”。</p>\n<p>内核 APC 函数与用户 APC 函数的执行时间和执行方式也有区别的。</p>\n<h1 id=\"apc的执行过程\"><a class=\"anchor\" href=\"#apc的执行过程\">#</a> APC 的执行过程</h1>\n<p>首先研究一下内核 APC 函数在什么时候执行。</p>\n<h2 id=\"线程切换\"><a class=\"anchor\" href=\"#线程切换\">#</a> 线程切换</h2>\n<p><code>SwapContext</code> \t<strong>判断是否有内核 APC</strong> -&gt;  <code>KiSwapThread</code>  -&gt;  <code>KiDeliverApc</code> \t执行内核 APC 函数。</p>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<p><img data-src=\"image002.png\" alt=\"\" /></p>\n<h2 id=\"系统调用-中断或异常\"><a class=\"anchor\" href=\"#系统调用-中断或异常\">#</a> 系统调用、中断或异常</h2>\n<p>由 0 环返回 3 环的时候。这个执行点的条件是有用户 APC 需要执行，如果没有用户 APC 需要执行就直接返回了。</p>\n<p>在单核 ntoskrnl.exe 中是  <code>_KiServiceExit</code>  函数 在多核 ntkrnlpa.exe 中是在函数  <code>KiFastCallEntry</code>  的下面。</p>\n<p><img data-src=\"image003.png\" alt=\"\" /></p>\n<h2 id=\"分析-kideliverapc-函数\"><a class=\"anchor\" href=\"#分析-kideliverapc-函数\">#</a> 分析 KiDeliverApc 函数</h2>\n<p>无论有用户 APC 还是内核 APC 需要执行都会调用这个函数。</p>\n<p><strong>在 IDA 中分析完毕后，发现关于执行内核 APC 有两种情况，既  <code>NormalRoutine</code>  为空和不为空，先执行特殊的。<br />\n在执行用户 APC 时也是一样，分为  <code>NormalRoutine</code>  为空和不为空，若是不为空就调用了  <code>KiInitializeUserApc</code>  函数。若是为空就执行  <code>KeTestAlertThread</code>  函数，这里调用这个函数又判断了用户 APC 列表是否是空表，如果不为空把   <code>Thread-&gt;ApcState.UserApcPending = TRUE;</code>  后就返回了。</strong></p>\n<p><img data-src=\"image004.png\" alt=\"\" /></p>\n<p>对于其中的一些关键操作，分为处理内核 APC 和用户 APC 分别进行讨论。</p>\n<h3 id=\"kideliverapc中处理内核apc的流程\"><a class=\"anchor\" href=\"#kideliverapc中处理内核apc的流程\">#</a> KiDeliverApc 中处理内核 APC 的流程</h3>\n<details class=\"info\"><summary>处理普通内核APC (点击展开)</summary><div>\n<ol>\n<li>\n<p>判断第一个链表是否为空</p>\n</li>\n<li>\n<p>判断 KTHREAD.ApcState.KernelApcInProgress 是否为 1</p>\n</li>\n<li>\n<p>判断是否禁用内核 APC (KTHREAD.KernelApcDisable 是否为 1)</p>\n</li>\n<li>\n<p>将当前 KAPC 结构体从链表中摘除</p>\n</li>\n<li>\n<p>执行 KAPC.KernelRoutine 指定的函数 释放 KAPC 结构体占用的空间</p>\n</li>\n<li>\n<p>将 KTHREAD.ApcState.KernelApcInProgress 设置为 1 标识正在执行内核 APC</p>\n</li>\n<li>\n<p>执行真正的内核 APC 函数 (KAPC.NormalRoutine)</p>\n</li>\n<li>\n<p>执行完毕 将 KernelApcInProgress 改为 0</p>\n</li>\n<li>\n<p>循环</p>\n</li>\n</ol>\n</div></details>\n<p>总结：</p>\n<ol>\n<li>内核 APC 在线程切换的时候就会执行，这也就意味着，只要插入内核 APC 很快就会执行。</li>\n<li>在执行用户 APC 之前会先执行内核 APC。</li>\n<li>内核 APC 在内核空间执行，不需要换栈，一个循环全部执行完毕。</li>\n</ol>\n<h3 id=\"kideliverapc中处理用户apc的流程\"><a class=\"anchor\" href=\"#kideliverapc中处理用户apc的流程\">#</a> KiDeliverApc 中处理用户 APC 的流程</h3>\n<p><strong>执行用户 APC 时的堆栈操作</strong></p>\n<p>处理用户 APC 要比内核 APC 复杂的多，因为，用户 APC 函数要在用户空间执行的，这里涉及到大量换栈的操作：</p>\n<p>当线程从用户层进入内核层时，要保留原来的运行环境，比如各种寄存器，栈的位置等等  (_Trap_Frame)，然后切换成内核的堆栈，如果正常返回，恢复堆栈环境即可。</p>\n<p>但如果有用户 APC 要执行的话，就意味着线程要提前返回到用户空间去执行，而且返回的位置不是线程进入内核时的位置，而是返回到其他的位置，每处理一个用户 APC 都会涉及到：  <code>内核--&gt;用户空间--&gt;再回到内核空间</code></p>\n<p>堆栈的操作比较复杂，如果不了解堆栈的操作细节不可能理解用户 APC 是如何执行的！</p>\n<details class=\"info\"><summary>处理用户APC流程 （点击展开）</summary><div>\n<ol>\n<li>\n<p>判断用户 APC 链表是否为空</p>\n</li>\n<li>\n<p>判断第一个参数是为 1</p>\n</li>\n<li>\n<p>判断 ApcState.UserApcPending 是否为 1</p>\n</li>\n<li>\n<p>将 ApcState.UserApcPending 设置为 0</p>\n</li>\n<li>\n<p>链表操作 将当前 APC 从用户队列中拆除</p>\n</li>\n<li>\n<p>调用函数 (KAPC.KernelRoutine) 释放 KAPC 结构体内存空间</p>\n</li>\n<li>\n<p>调用 KiInitializeUserApc 函数</p>\n</li>\n</ol>\n</div></details>\n<p><strong>想要继续了解处理用户 APC 时是如何处理堆栈问题的就要接着分析  <code>KiInitializeUserApc</code>  函数了。</strong></p>\n<h2 id=\"分析-kiinitializeuserapc-函数\"><a class=\"anchor\" href=\"#分析-kiinitializeuserapc-函数\">#</a> 分析 KiInitializeUserApc 函数</h2>\n<p>线程进 0 环时，原来的运行环境 (寄存器栈顶等) 保存到  <code>_Trap_Frame</code>  结构体中，如果要提前返回 3 环去处理用户 APC，就必须要修改  <code>_Trap_Frame</code>  结构体：</p>\n<p>比如：进 0 环时的位置存储在 EIP 中，现在要提前返回，而且返回的并不是原来的位置，那就意味着必须要修改 EIP 为新的返回位置。还有堆栈 ESP, 也要修改为处理 APC 需要的堆栈。那原来的值怎么办呢？处理完 APC 后该如何返回原来的位置呢？</p>\n<p><code>KiInitializeUserApc</code>  要做的第一件事就是备份：</p>\n<p>将原来  <code>_Trap_Frame</code>  里的值备份到一个新的结构体中 (CONTEXT)，这个功能由其子函数  <code>KeContextFromKframes</code>  来完成。</p>\n<p>在 IDA 中查看其汇编。</p>\n<p><img data-src=\"image005.png\" alt=\"\" /></p>\n<p>也可结合其源码分析，有整个流程的详细注释。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>VOID</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">KiInitializeUserApc</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    IN PKEXCEPTION_FRAME ExceptionFrame<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    IN PKTRAP_FRAME TrapFrame<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    IN PKNORMAL_ROUTINE NormalRoutine<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    IN PVOID NormalContext<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    IN PVOID SystemArgument1<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    IN PVOID SystemArgument2</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">/*++</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>Routine Description:</pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    This function is called to initialize the context for a user mode APC.</pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>Arguments:</pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    ExceptionFrame - Supplies a pointer to an exception frame.</pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    TrapFrame - Supplies a pointer to a trap frame.</pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    NormalRoutine - Supplies a pointer to the user mode APC routine.</pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    NormalContext - Supplies a pointer to the user context for the APC</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        routine.</pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    SystemArgument1 - Supplies the first system supplied value.</pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    SystemArgument2 - Supplies the second system supplied value.</pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>Return Value:</pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    None.</pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>--*/</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    EXCEPTION_RECORD ExceptionRecord<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    CONTEXT ContextFrame<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    LONG Length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    ULONG UserStack<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token comment\">// APCs are not defined for V86 mode; however, it is possible a</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token comment\">// thread is trying to set it's context to V86 mode - this isn't</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token comment\">// going to work, but we don't want to crash the system so we</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token comment\">// check for the possibility before hand.</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token comment\">// APCs 没有在虚拟 86 模式下定义；然而，线程可能试图将它的 context 设置为虚拟 86 模式</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token comment\">// 这将不会工作，但我们不想崩溃系统，所以我们检查之前的可能性。</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>TrapFrame<span class=\"token operator\">-></span>EFlags <span class=\"token operator\">&amp;</span> EFLAGS_V86_MASK<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token comment\">// Move machine state from trap and exception frames to the context frame.</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    ContextFrame<span class=\"token punctuation\">.</span>ContextFlags <span class=\"token operator\">=</span> CONTEXT_FULL <span class=\"token operator\">|</span> CONTEXT_DEBUG_REGISTERS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token function\">KeContextFromKframes</span><span class=\"token punctuation\">(</span>TrapFrame<span class=\"token punctuation\">,</span> ExceptionFrame<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>ContextFrame<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token comment\">// Transfer the context information to the user stack, initialize the</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    <span class=\"token comment\">// APC routine parameters, and modify the trap frame so execution will</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    <span class=\"token comment\">// continue in user mode at the user mode APC dispatch routine.</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    <span class=\"token comment\">// 将上下文信息传递给用户栈，初始化 APC 例程参数，并修改 trap frame，以便在用户模式下继续执行 APC 调度例程。</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre></pre></td></tr><tr><td data-num=\"72\"></td><td><pre></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>    try <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>        <span class=\"token function\">ASSERT</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>TrapFrame<span class=\"token operator\">-></span>SegCs <span class=\"token operator\">&amp;</span> MODE_MASK<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> KernelMode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Assert usermode frame</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>        <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>        <span class=\"token comment\">// Compute length of context record and new aligned user stack pointer.</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>        <span class=\"token comment\">// 计算 context record 的长度 并提升堆栈 且设置用户堆栈指针的对齐。</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>        Length <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>CONTEXT<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> CONTEXT_ROUND<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>                    <span class=\"token operator\">~</span>CONTEXT_ROUND<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>KAPC_RECORD<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>        UserStack <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>ContextFrame<span class=\"token punctuation\">.</span>Esp <span class=\"token operator\">&amp;</span> <span class=\"token operator\">~</span>CONTEXT_ROUND<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> Length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>        <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>        <span class=\"token comment\">// Probe user stack area for writability and then transfer the</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>        <span class=\"token comment\">// context record to the user stack.</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>        <span class=\"token comment\">// 探测用户堆栈区域的可写性，然后将上下文记录传输到用户堆栈。</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>        <span class=\"token function\">ProbeForWrite</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>PCHAR<span class=\"token punctuation\">)</span>UserStack<span class=\"token punctuation\">,</span> Length<span class=\"token punctuation\">,</span> CONTEXT_ALIGN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>        <span class=\"token function\">RtlCopyMemory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>PULONG<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>UserStack <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>KAPC_RECORD<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>                     <span class=\"token operator\">&amp;</span>ContextFrame<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>CONTEXT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>        <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>        <span class=\"token comment\">// Force correct R3 selectors into TrapFrame.</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>        <span class=\"token comment\">// 在 TrapFrame 中直接修正 R3 的段选择子</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>        TrapFrame<span class=\"token operator\">-></span>SegCs <span class=\"token operator\">=</span> <span class=\"token function\">SANITIZE_SEG</span><span class=\"token punctuation\">(</span>KGDT_R3_CODE<span class=\"token punctuation\">,</span> UserMode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>        TrapFrame<span class=\"token operator\">-></span>HardwareSegSs <span class=\"token operator\">=</span> <span class=\"token function\">SANITIZE_SEG</span><span class=\"token punctuation\">(</span>KGDT_R3_DATA<span class=\"token punctuation\">,</span> UserMode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>        TrapFrame<span class=\"token operator\">-></span>SegDs <span class=\"token operator\">=</span> <span class=\"token function\">SANITIZE_SEG</span><span class=\"token punctuation\">(</span>KGDT_R3_DATA<span class=\"token punctuation\">,</span> UserMode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>        TrapFrame<span class=\"token operator\">-></span>SegEs <span class=\"token operator\">=</span> <span class=\"token function\">SANITIZE_SEG</span><span class=\"token punctuation\">(</span>KGDT_R3_DATA<span class=\"token punctuation\">,</span> UserMode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>        TrapFrame<span class=\"token operator\">-></span>SegFs <span class=\"token operator\">=</span> <span class=\"token function\">SANITIZE_SEG</span><span class=\"token punctuation\">(</span>KGDT_R3_TEB<span class=\"token punctuation\">,</span> UserMode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>        TrapFrame<span class=\"token operator\">-></span>SegGs <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>        TrapFrame<span class=\"token operator\">-></span>EFlags <span class=\"token operator\">=</span> <span class=\"token function\">SANITIZE_FLAGS</span><span class=\"token punctuation\">(</span> ContextFrame<span class=\"token punctuation\">.</span>EFlags<span class=\"token punctuation\">,</span> UserMode <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>        <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>        <span class=\"token comment\">// If thread is supposed to have IOPL, then force it on in eflags</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>        <span class=\"token comment\">// 如果线程应该有 IOPL，那么直接把它赋给 eflags</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">KeGetCurrentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>Iopl<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>            TrapFrame<span class=\"token operator\">-></span>EFlags <span class=\"token operator\">|=</span> <span class=\"token punctuation\">(</span>EFLAGS_IOPL_MASK <span class=\"token operator\">&amp;</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// IOPL = 3</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>        <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>        <span class=\"token comment\">// Set the address of the user APC routine, the APC parameters, the</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>        <span class=\"token comment\">// new frame pointer, and the new stack pointer in the current trap</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>        <span class=\"token comment\">// frame. Set the continuation address so control will be transferred</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>        <span class=\"token comment\">// to the user APC dispatcher.</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>        <span class=\"token comment\">// 设置当前 trap frame 中用户 APC 例程地址、APC 参数、新的帧指针和新的栈指针。</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>        <span class=\"token comment\">// 设置延续地址，这样控制将被转移到用户 APC 调度程序。</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>        TrapFrame<span class=\"token operator\">-></span>HardwareEsp <span class=\"token operator\">=</span> UserStack<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>        TrapFrame<span class=\"token operator\">-></span>Eip <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>ULONG<span class=\"token punctuation\">)</span>KeUserApcDispatcher<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>        TrapFrame<span class=\"token operator\">-></span>ErrCode <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>        <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>PULONG<span class=\"token punctuation\">)</span>UserStack<span class=\"token punctuation\">)</span><span class=\"token operator\">++</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>ULONG<span class=\"token punctuation\">)</span>NormalRoutine<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>        <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>PULONG<span class=\"token punctuation\">)</span>UserStack<span class=\"token punctuation\">)</span><span class=\"token operator\">++</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>ULONG<span class=\"token punctuation\">)</span>NormalContext<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>        <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>PULONG<span class=\"token punctuation\">)</span>UserStack<span class=\"token punctuation\">)</span><span class=\"token operator\">++</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>ULONG<span class=\"token punctuation\">)</span>SystemArgument1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>        <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>PULONG<span class=\"token punctuation\">)</span>UserStack<span class=\"token punctuation\">)</span><span class=\"token operator\">++</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>ULONG<span class=\"token punctuation\">)</span>SystemArgument2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token function\">except</span> <span class=\"token punctuation\">(</span><span class=\"token function\">KiCopyInformation</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>ExceptionRecord<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>                                <span class=\"token punctuation\">(</span><span class=\"token function\">GetExceptionInformation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>ExceptionRecord<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>        <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>        <span class=\"token comment\">// Set the address of the exception to the current program address</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>        <span class=\"token comment\">// and raise the exception by calling the exception dispatcher.</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>        <span class=\"token comment\">// 将异常的地址设置为当前程序的地址，并通过调用异常调度程序引发异常。</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>        ExceptionRecord<span class=\"token punctuation\">.</span>ExceptionAddress <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PVOID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>TrapFrame<span class=\"token operator\">-></span>Eip<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>        <span class=\"token function\">KiDispatchException</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>ExceptionRecord<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>                            ExceptionFrame<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>                            TrapFrame<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>                            UserMode<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>                            TRUE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"kiinitializeuserapc-函数流程\"><a class=\"anchor\" href=\"#kiinitializeuserapc-函数流程\">#</a> KiInitializeUserApc 函数流程</h2>\n<ol>\n<li>判断是否是虚拟 8086 模式，如果是函数直接返回。</li>\n<li>设置 ContextFlags 并调用 KeContextFromKframes  将 trap 和 exception frames 移动到 context frame。</li>\n<li>判断帧栈是否是用户模式</li>\n<li>计算 context record 的长度 并提升堆栈 且设置用户堆栈指针的对齐。</li>\n<li>探测用户堆栈区域的可写性，然后将上下文记录传输到用户堆栈。</li>\n<li>在 TrapFrame 中直接修正 R3 的段选择子，如果线程应该有 IOPL，那么直接把它赋给 eflags</li>\n<li>设置当前 trap frame 中用户 APC 例程地址、APC 参数、新的帧指针和新的栈指针。设置延续地址，这样控制将被转移到用户 APC 调度程序</li>\n<li>如果在步骤 3 至 7 中出现异常，则会将异常的地址设置为当前程序的地址，并通过调用异常调度程序引发异常。</li>\n</ol>\n<h3 id=\"如何在3环执行用户apc\"><a class=\"anchor\" href=\"#如何在3环执行用户apc\">#</a> 如何在 3 环执行用户 APC</h3>\n<p>可以观察到修改了  <code>TrapFrame</code>  中存储的 EIP 的值，将其改为了  <code>KeUserApcDispatcher</code>  这是一个函数，在 ntdll 中是  <code>KiUserApcDispatcher</code>  函数。</p>\n<p>在  <code>ntdll.dll</code>  当中，我们用 IDA 打开看看：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>.text:7C92E430 ; __stdcall KiUserApcDispatcher(x, x, x, x, x)</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>.text:7C92E430                 public _KiUserApcDispatcher@20</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>.text:7C92E430 _KiUserApcDispatcher@20 proc near       ; DATA XREF: .text:off_7C923428↑o</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>.text:7C92E430</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>.text:7C92E430 arg_C           &#x3D; byte ptr  10h</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>.text:7C92E430</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>.text:7C92E430                 lea     edi, [esp+arg_C] ;  (edi)-&gt;context frame</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>.text:7C92E434                 pop     eax             ; (eax)-&gt;specified function</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>.text:7C92E435                 call    eax</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>.text:7C92E437                 push    1</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>.text:7C92E439                 push    edi</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>.text:7C92E43A                 call    _ZwContinue@8   ; stdCall   _ZwContinue, &lt;edi, 1&gt;</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>.text:7C92E43A                                         ;</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>.text:7C92E43A                                         ; 1 - set alert argument true</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>.text:7C92E43A                                         ; ebp - addr of context frame</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>.text:7C92E43A                                         ; execute system service to continue</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>.text:7C92E43F                 nop</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>.text:7C92E43F _KiUserApcDispatcher@20</pre></td></tr></table></figure><p>这里需要对着堆栈图进行分析了。</p>\n<p><img data-src=\"image006.png\" alt=\"\" /></p>\n<p>当用户在 3 环调用 QueueUserAPC 函数来插入 APC 时，不需要提供  <code>NormalRoutine</code>  ，这个参数是在 QueueUserAPC 内部指定的：  <code>BaseDispatchAPC</code></p>\n<p><code>BaseDispatchAPC</code>  的源码如下，主要调用了 APC 函数。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>VOID</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">BaseDispatchAPC</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    LPVOID lpApcArgument1<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    LPVOID lpApcArgument2<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    LPVOID lpApcArgument3</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    PAPCFUNC pfnAPC<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    ULONG_PTR dwData<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    PACTIVATION_CONTEXT ActivationContext<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    NTSTATUS Status<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    RTL_CALLER_ALLOCATED_ACTIVATION_CONTEXT_STACK_FRAME ActivationFrame <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>ActivationFrame<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> RTL_CALLER_ALLOCATED_ACTIVATION_CONTEXT_STACK_FRAME_FORMAT_WHISTLER <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    pfnAPC <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PAPCFUNC<span class=\"token punctuation\">)</span> lpApcArgument1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    dwData <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>ULONG_PTR<span class=\"token punctuation\">)</span> lpApcArgument2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    ActivationContext <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PACTIVATION_CONTEXT<span class=\"token punctuation\">)</span> lpApcArgument3<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ActivationContext <span class=\"token operator\">==</span> INVALID_ACTIVATION_CONTEXT<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>pfnAPC<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>dwData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token function\">RtlActivateActivationContextUnsafeFast</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>ActivationFrame<span class=\"token punctuation\">,</span> ActivationContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        __try <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>pfnAPC<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>dwData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> __finally <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token function\">RtlDeactivateActivationContextUnsafeFast</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>ActivationFrame<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token function\">RtlReleaseActivationContext</span><span class=\"token punctuation\">(</span>ActivationContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>三环的  <code>APC</code>  执行完毕后就回来 执行 ntdll 中的  <code>ZwContinue</code>  了。</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>.text:7C92D040 ; __stdcall ZwContinue(x, x)</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>.text:7C92D040                 public _ZwContinue@8</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>.text:7C92D040 _ZwContinue@8   proc near               ; CODE XREF: KiUserApcDispatcher(x,x,x,x,x)+A↓p</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>.text:7C92D040                                         ; KiUserExceptionDispatcher(x,x)+17↓p ...</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>.text:7C92D040                 mov     eax, 20h ; &#39; &#39;  ; NtContinue</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>.text:7C92D045                 mov     edx, 7FFE0300h</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>.text:7C92D04A                 call    dword ptr [edx]</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>.text:7C92D04C                 retn    8</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>.text:7C92D04C _ZwContinue@8   endp</pre></td></tr></table></figure><p>通过快速调用进 0 环后调用了内核函数  <code>NtContinue</code> 。</p>\n<p><code>NtContinue</code>  又调用了  <code>KiContinue</code>  函数。</p>\n<p><code>ZwContinue</code>  函数的意义：</p>\n<ol>\n<li>\n<p>返回内核，如果还有用户 APC，重复上面的执行过程。</p>\n</li>\n<li>\n<p>如果没有需要执行的用户 APC，会将 CONTEXT 赋值给 Trap_Frame 结构体。就像从来没有修改过一样。ZwContinue 后面的代码不会执行，线程从哪里进 0 环仍然会从哪里回去。</p>\n</li>\n</ol>\n<h1 id=\"reference\"><a class=\"anchor\" href=\"#reference\">#</a> Reference</h1>\n<p>滴水课件</p>\n",
            "tags": []
        },
        {
            "id": "https://or0kit.github.io/Bin/Core/WindowsXp/Apc/APC%E6%9C%BA%E5%88%B6-03APC%E7%9A%84%E6%8C%82%E5%85%A5%E8%BF%87%E7%A8%8B/",
            "url": "https://or0kit.github.io/Bin/Core/WindowsXp/Apc/APC%E6%9C%BA%E5%88%B6-03APC%E7%9A%84%E6%8C%82%E5%85%A5%E8%BF%87%E7%A8%8B/",
            "title": "APC机制-03APC的挂入过程",
            "date_published": "2022-02-25T11:23:40.000Z",
            "content_html": "<h1 id=\"楔子\"><a class=\"anchor\" href=\"#楔子\">#</a> 楔子</h1>\n<p>无论是正常状态还是挂靠状态，都有两个 APC 队列，一个内核队列，一个用户队列。</p>\n<p>每当要挂入一个 APC 函数时，不管是内核 APC 还是用户 APC，内核都要准备一个  <code>KAPC</code>  的数据结构，并且将这个  <code>KAPC</code>  结构挂到相应的 APC 队列中。</p>\n<h1 id=\"kapc-结构\"><a class=\"anchor\" href=\"#kapc-结构\">#</a> KAPC 结构</h1>\n<pre><code>kd&gt; dt _KAPC\nnt!_KAPC\n   +0x000 Type\t\t        //类型  APC类型为0x12\n   +0x002 Size\t\t        //本结构体的大小  0x30\n   +0x004 Spare0    \t    //未使用                             \n   +0x008 Thread \t\t    //目标线程                                  \n   +0x00c ApcListEntry\t    //APC队列挂的位置\n   +0x014 KernelRoutine\t    //指向一个函数(释放APC)\n   +0x018 RundownRoutine    //略 \n   +0x01c NormalRoutine\t    //用户APC总入口  或者 真正的内核apc函数\n   +0x020 NormalContext\t    //内核APC：NULL  用户APC：真正的APC函数\n   +0x024 SystemArgument1   //APC函数的参数\t\n   +0x028 SystemArgument2   //APC函数的参数\n   +0x02c ApcStateIndex\t    //挂哪个队列，有四个值：0 1 2 3\n   +0x02d ApcMode\t        //内核APC 用户APC\n   +0x02e Inserted\t        //表示本apc是否已挂入队列 挂入前：0  挂入后  1\n</code></pre>\n<h1 id=\"apcstateindex\"><a class=\"anchor\" href=\"#apcstateindex\">#</a> ApcStateIndex</h1>\n<p>与 KTHREAD (+0x165) 的属性同名，但含义不一样：</p>\n<p>ApcStateIndex 有四个值：<br />\n0 原始环境 1 挂靠环境 2 当前环境 3 插入 APC 时的当前环境</p>\n<p>正常情况下：<br />\nApcStatePointer [0]  指向 ApcState<br />\nApcStatePointer [1]  指向 SavedApcState<br />\n 挂靠情况下：<br />\nApcStatePointer [0]  指向 SavedApcState<br />\nApcStatePointer [1]  指向 ApcState</p>\n<p>2 初始化的时候，当前线程的 ApcState，不管挂靠还是没挂靠，我只选当前的 APC 状态。 判断是否为  <code>2</code>  的状态可以在  <code>KeInitializeApc</code>  中观察到。</p>\n<p>3 插入的时候，当前线程的 ApcState，如果在初始化的时候还没有挂靠，在准备插入的时候线程挂靠了，如果值为 3 就会使 KAPC 中的 ApcStateIndex 与 KTHREAD 中的 ApcStateIndex 一样。 判断是否为 <code>3</code>  的状态可以在  <code>KiInsertQueueApc</code>  中观察到。</p>\n<h1 id=\"alertable属性说明是否运行被apc吵醒\"><a class=\"anchor\" href=\"#alertable属性说明是否运行被apc吵醒\">#</a> Alertable 属性说明 (是否运行被 APC 吵醒)</h1>\n<p>结合  <code>KiInsertQueueApc</code>  函数</p>\n<pre><code>kd&gt; dt _KTHREAD\nntdll!_KTHREAD\n   ...\n   +0x164 Alertable        : UChar\n   ...\n\nDWORD SleepEx(\n  DWORD dwMilliseconds, // time-out interval\n  BOOL bAlertable        \t// early completion option\n);\nDWORD WaitForSingleObjectEx(\n  HANDLE hHandle,        \t// handle to object\n  DWORD dwMilliseconds, // time-out interval\n  BOOL bAlertable        \t// alertable option\n);\n</code></pre>\n<p>总结:</p>\n<p>1、 <code>Alertable=0</code>  当前插入的 APC 函数未必有机会执行： <code>UserApcPending = 0</code></p>\n<p>2、 <code>Alertable=1  UserApcPending = 1</code>  将目标线程唤醒 (从等待链表中摘出来，并挂到调度链表)</p>\n<h1 id=\"挂入流程\"><a class=\"anchor\" href=\"#挂入流程\">#</a> 挂入流程</h1>\n<p>从 R3 到 R0 的调用流程</p>\n<p>用户层调用：QueueUserAPC (kernel32.dll) -&gt; NtQueueApcThread (ntkrnlpa.exe)  -&gt;  内核层调用 KeInitializeApc (分配空间 初始化 KAPC 结构体) -&gt; KeInsertQueueApc -&gt; KiInsertQueueApc (将 KAPC 插入指定 APC 队列)</p>\n<h2 id=\"各层函数分析\"><a class=\"anchor\" href=\"#各层函数分析\">#</a> 各层函数分析</h2>\n<p>分析一下各层的函数的都做了什么事情。</p>\n<h3 id=\"queueuserapckernel32dll\"><a class=\"anchor\" href=\"#queueuserapckernel32dll\">#</a> QueueUserAPC(kernel32.dll)</h3>\n<p>首先了解一下这个函数</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>WINBASEAPI</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>DWORD</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>WINAPI</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">QueueUserAPC</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    PAPCFUNC pfnAPC<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    HANDLE hThread<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    ULONG_PTR dwData</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">/*++</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>Routine Description:</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    这个函数用于将用户模式的 APC 队列到指定的线程。当指定的线程执行 alertable 等待时，APC 将被触发。</pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>Arguments:</pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    pfnAPC - 提供 APC 例程的地址，以便在 APC 触发时执行。</pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    hHandle - 为线程对象提供一个句柄。调用者必须具有对该线程的线程设置上下文访问权限。</pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    dwData - 提供一个 DWORD 传递给 APC</pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>Return Value:</pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    TRUE - The operations was successful</pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    FALSE - The operation failed. GetLastError () is not defined.</pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>--*/</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    NTSTATUS Status<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    PVOID Argument1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PVOID<span class=\"token punctuation\">)</span> pfnAPC<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    PVOID Argument2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>PVOID<span class=\"token punctuation\">)</span> dwData<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    PVOID Argument3 <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    ACTIVATION_CONTEXT_BASIC_INFORMATION acbi <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    Status <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token function\">RtlQueryInformationActivationContext</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            RTL_QUERY_INFORMATION_ACTIVATION_CONTEXT_FLAG_USE_ACTIVE_ACTIVATION_CONTEXT<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            ActivationContextBasicInformation<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            <span class=\"token operator\">&amp;</span>acbi<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>acbi<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">NT_SUCCESS</span><span class=\"token punctuation\">(</span>Status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token function\">DbgPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SXS: %s failing because RtlQueryInformationActivationContext() returned status %08lx\\n\"</span><span class=\"token punctuation\">,</span> __FUNCTION__<span class=\"token punctuation\">,</span> Status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token keyword\">return</span> FALSE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    Argument3 <span class=\"token operator\">=</span> acbi<span class=\"token punctuation\">.</span>ActivationContext<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>acbi<span class=\"token punctuation\">.</span>Flags <span class=\"token operator\">&amp;</span> ACTIVATION_CONTEXT_FLAG_NO_INHERIT<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token comment\">// We're not supposed to propogate the activation context; set it to a value to indicate such.</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        Argument3 <span class=\"token operator\">=</span> INVALID_ACTIVATION_CONTEXT<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    Status <span class=\"token operator\">=</span> <span class=\"token function\">NtQueueApcThread</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>                hThread<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>                <span class=\"token operator\">&amp;</span>BaseDispatchAPC<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>                Argument1<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>                Argument2<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>                Argument3</pre></td></tr><tr><td data-num=\"64\"></td><td><pre>                <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span><span class=\"token function\">NT_SUCCESS</span><span class=\"token punctuation\">(</span>Status<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>其中的  <code>RtlQueryInformationActivationContext</code>  函数也不知道有什么用，暂时不管，我们先分析主线，此函数又调用了  <code>NtQueueApcThread</code>  了</p>\n<h3 id=\"ntqueueapcthreadntkrnlpaexe\"><a class=\"anchor\" href=\"#ntqueueapcthreadntkrnlpaexe\">#</a> NtQueueApcThread(ntkrnlpa.exe)</h3>\n<p>在 Ntdll 中也有一个同名的函数，会通过快速调用，调用 ntkrnlpa 中的这个函数。这里就直接介绍这个函数了。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>NTSYSAPI</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>NTSTATUS</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>NTAPI</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">NtQueueApcThread</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    IN HANDLE ThreadHandle<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    IN PPS_APC_ROUTINE ApcRoutine<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    IN PVOID ApcArgument1<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    IN PVOID ApcArgument2<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    IN PVOID ApcArgument3</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">/*++</pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>Routine Description:</pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    This function is used to queue a user-mode APC to the specified thread. The APC</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    will fire when the specified thread does an alertable wait</pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>Arguments:</pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    ThreadHandle - Supplies a handle to a thread object.  The caller</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        must have THREAD_SET_CONTEXT access to the thread.</pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    ApcRoutine - Supplies the address of the APC routine to execute when the</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        APC fires.</pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    ApcArgument1 - Supplies the first PVOID passed to the APC</pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    ApcArgument2 - Supplies the second PVOID passed to the APC</pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    ApcArgument3 - Supplies the third PVOID passed to the APC</pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>Return Value:</pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    Returns an NT Status code indicating success or failure of the API</pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>--*/</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    PETHREAD Thread<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    NTSTATUS st<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    KPROCESSOR_MODE Mode<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    PKAPC Apc<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token function\">PAGED_CODE</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    Mode <span class=\"token operator\">=</span> <span class=\"token function\">KeGetPreviousMode</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    st <span class=\"token operator\">=</span> <span class=\"token function\">ObReferenceObjectByHandle</span> <span class=\"token punctuation\">(</span>ThreadHandle<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>                                    THREAD_SET_CONTEXT<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                                    PsThreadType<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>                                    Mode<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                                    <span class=\"token operator\">&amp;</span>Thread<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                                    <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">NT_SUCCESS</span> <span class=\"token punctuation\">(</span>st<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        st <span class=\"token operator\">=</span> STATUS_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">IS_SYSTEM_THREAD</span> <span class=\"token punctuation\">(</span>Thread<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>            st <span class=\"token operator\">=</span> STATUS_INVALID_HANDLE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>            Apc <span class=\"token operator\">=</span> <span class=\"token function\">ExAllocatePoolWithQuotaTag</span> <span class=\"token punctuation\">(</span>NonPagedPool <span class=\"token operator\">|</span> POOL_QUOTA_FAIL_INSTEAD_OF_RAISE<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>                                              <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>Apc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>                                              <span class=\"token string\">'pasP'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Apc <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>                st <span class=\"token operator\">=</span> STATUS_NO_MEMORY<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>                <span class=\"token function\">KeInitializeApc</span> <span class=\"token punctuation\">(</span>Apc<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>                                 <span class=\"token operator\">&amp;</span>Thread<span class=\"token operator\">-></span>Tcb<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>                                 OriginalApcEnvironment<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>                                 PspQueueApcSpecialApc<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>                                 <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>                                 <span class=\"token punctuation\">(</span>PKNORMAL_ROUTINE<span class=\"token punctuation\">)</span>ApcRoutine<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>                                 UserMode<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>                                 ApcArgument1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">KeInsertQueueApc</span> <span class=\"token punctuation\">(</span>Apc<span class=\"token punctuation\">,</span> ApcArgument2<span class=\"token punctuation\">,</span> ApcArgument3<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>                    <span class=\"token function\">ExFreePool</span> <span class=\"token punctuation\">(</span>Apc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>                    st <span class=\"token operator\">=</span> STATUS_UNSUCCESSFUL<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>        <span class=\"token function\">ObDereferenceObject</span> <span class=\"token punctuation\">(</span>Thread<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>    <span class=\"token keyword\">return</span> st<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>可以观察到，先申请了一块  <code>KAPC</code>  大小的内存，然后调用  <code>KeInitializeApc</code>  给 KAPC 初始化 ，初始化完成后，调用了  <code>KeInsertQueueApc</code>  插入了。</p>\n<p>注意这里有个细节：</p>\n<p><strong>验证了是否是系统进程，这是一个宏定义：  <code>#define IS_SYSTEM_THREAD(Thread)  (((Thread)-&gt;CrossThreadFlags&amp;PS_CROSS_THREAD_FLAGS_SYSTEM) != 0)</code>   利用这个特点，如果想要防止用户 APC 注入，可以更改线程标志。</strong></p>\n<h3 id=\"keinitializeapc初始化kapc结构体\"><a class=\"anchor\" href=\"#keinitializeapc初始化kapc结构体\">#</a> KeInitializeApc (初始化 KAPC 结构体)</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>VOID <span class=\"token function\">KeInitializeApc</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  IN PKAPC Apc<span class=\"token punctuation\">,</span><span class=\"token comment\">//KAPC 指针</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  IN PKTHREAD Thread<span class=\"token punctuation\">,</span><span class=\"token comment\">// 目标线程</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  IN KAPC_ENVIRONMENT TargetEnvironment<span class=\"token punctuation\">,</span><span class=\"token comment\">//0 1 2 3 四种状态</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  IN PKKERNEL_ROUTINE KernelRoutine<span class=\"token punctuation\">,</span><span class=\"token comment\">// 销毁 KAPC 的函数地址</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  IN PKRUNDOWN_ROUTINE RundownRoutine OPTIONAL<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  IN PKNORMAL_ROUTINE NormalRoutine<span class=\"token punctuation\">,</span><span class=\"token comment\">// 用户 APC 总入口或者内核 apc 函数</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  IN KPROCESSOR_MODE Mode<span class=\"token punctuation\">,</span><span class=\"token comment\">// 要插入用户 apc 队列还是内核 apc 队列</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  IN PVOID NormalContext<span class=\"token comment\">// 内核 APC：NULL  用户 APC：真正的 APC 函数</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">/*++</pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>Routine Description:</pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>这个函数初始化一个内核 APC 对象。 线程、内核例程和可选的常规例程、处理器模式和常规上下文参数都存储在 APC 对象中。 </pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>Arguments:</pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    Apc - 提供一个指向 APC 类型控制对象的指针。</pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    Thread - 提供一个指向线程类型的调度程序对象的指针。</pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    Environment - 有效值为：OriginalApcEnvironment、attacheapcenvironment、CurrentApcEnvironment 或 InsertApcEnvironment。枚举类型 0 1 2 3</pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    KernelRoutine - 提供一个指向在内核模式下 IRQL APC_LEVEL 执行的函数的指针。 </pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    RundownRoutine - 提供一个可选的函数指针，当线程终止时，如果 APC 在线程的 APC 队列中，这个函数将被调用。</pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    NormalRoutine - 提供一个指向函数的可选指针，该函数将在 IRQL 0 中以指定的处理器模式执行。 如果没有指定这个参数，则忽略 ProcessorMode 和 NormalContext 参数。</pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    ApcMode - 提供处理器模式，在这种模式下，NormalRoutine 参数指定的函数将被执行。  </pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    NormalContext - 提供指向任意数据结构的指针，该数据结构将被传递给 NormalRoutine 参数指定的函数。</pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>Return Value:</pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    None.</pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>--*/</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token function\">ASSERT</span><span class=\"token punctuation\">(</span>Environment <span class=\"token operator\">&lt;=</span> InsertApcEnvironment<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token comment\">// Initialize standard control object header.</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    Apc<span class=\"token operator\">-></span>Type <span class=\"token operator\">=</span> ApcObject<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    Apc<span class=\"token operator\">-></span>Size <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>KAPC<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token comment\">/* </pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    初始化 APC 环境、线程地址、内核例程地址、运行例程地址、普通例程地址、处理器模式和正常上下文参数。</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    如果正常的例程地址为 NULL，则处理器模式默认为 KernelMode，而 APC 是一个特殊的 APC。</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    否则，将从参数列表中提取处理器模式。</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    */</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Environment <span class=\"token operator\">==</span> CurrentApcEnvironment<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        Apc<span class=\"token operator\">-></span>ApcStateIndex <span class=\"token operator\">=</span> Thread<span class=\"token operator\">-></span>ApcStateIndex<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        <span class=\"token function\">ASSERT</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>Environment <span class=\"token operator\">&lt;=</span> Thread<span class=\"token operator\">-></span>ApcStateIndex<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>Environment <span class=\"token operator\">==</span> InsertApcEnvironment<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        Apc<span class=\"token operator\">-></span>ApcStateIndex <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>CCHAR<span class=\"token punctuation\">)</span>Environment<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    Apc<span class=\"token operator\">-></span>Thread <span class=\"token operator\">=</span> Thread<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    Apc<span class=\"token operator\">-></span>KernelRoutine <span class=\"token operator\">=</span> KernelRoutine<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>    Apc<span class=\"token operator\">-></span>RundownRoutine <span class=\"token operator\">=</span> RundownRoutine<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    Apc<span class=\"token operator\">-></span>NormalRoutine <span class=\"token operator\">=</span> NormalRoutine<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">ARGUMENT_PRESENT</span><span class=\"token punctuation\">(</span>NormalRoutine<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>        Apc<span class=\"token operator\">-></span>ApcMode <span class=\"token operator\">=</span> ApcMode<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>        Apc<span class=\"token operator\">-></span>NormalContext <span class=\"token operator\">=</span> NormalContext<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>        Apc<span class=\"token operator\">-></span>ApcMode <span class=\"token operator\">=</span> KernelMode<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>        Apc<span class=\"token operator\">-></span>NormalContext <span class=\"token operator\">=</span> NIL<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>    Apc<span class=\"token operator\">-></span>Inserted <span class=\"token operator\">=</span> FALSE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"keinsertqueueapc\"><a class=\"anchor\" href=\"#keinsertqueueapc\">#</a> KeInsertQueueApc</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>BOOLEAN</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">KeInsertQueueApc</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    IN PRKAPC Apc<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    IN PVOID SystemArgument1<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    IN PVOID SystemArgument2<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    IN KPRIORITY Increment</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">/*++</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>Routine Description:</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  这个函数将一个 APC 对象插入到 APC 队列中，该队列由 APC 对象的线程和处理器模式字段指定。</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  如果 APC 对象已经在 APC 队列中或 APC 队列被禁用，则不执行任何操作。 </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  否则，APC 对象被插入到指定的队列中，并做出适当的调度决策。  </pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>Arguments:</pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    Apc - 提供一个指向 APC 类型控制对象的指针。  </pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    SystemArgument1, SystemArgument2 - 提供一组包含执行程序提供的非类型化数据的两个参数。  </pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    Increment - 提供优先级增量，如果排队的 APC 导致一个线程等待满足。  </pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>Return Value:</pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    如果 APC 对象已经在 APC 队列中，或者禁用 APC 队列，则返回 false 值。否则，将返回一个 TRUE 的值。</pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>--*/</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    BOOLEAN Inserted<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    KLOCK_QUEUE_HANDLE LockHandle<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    KIRQL OldIrql<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    PRKTHREAD Thread<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token function\">ASSERT_APC</span><span class=\"token punctuation\">(</span>Apc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token function\">ASSERT</span><span class=\"token punctuation\">(</span><span class=\"token function\">KeGetCurrentIrql</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> DISPATCH_LEVEL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token comment\">// 将 IROL 提升到 SYNCH_LEVEL _ level，获取线程 APC 队列锁，并锁定调度程序数据库。</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    Thread <span class=\"token operator\">=</span> Apc<span class=\"token operator\">-></span>Thread<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token function\">KeAcquireInStackQueuedSpinLockRaiseToSynch</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>Thread<span class=\"token operator\">-></span>ApcQueueLock<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>LockHandle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token function\">KiLockDispatcherDatabaseAtSynchLevel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token comment\">// 如果 Apc 队列被禁用，则将 inserted 设置为 FALSE。否则，将系统参数值保存在 APC 对象中，并尝试对 APC 进行排队。</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Thread<span class=\"token operator\">-></span>ApcQueueable <span class=\"token operator\">==</span> FALSE<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        Inserted <span class=\"token operator\">=</span> FALSE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        Apc<span class=\"token operator\">-></span>SystemArgument1 <span class=\"token operator\">=</span> SystemArgument1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        Apc<span class=\"token operator\">-></span>SystemArgument2 <span class=\"token operator\">=</span> SystemArgument2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        Inserted <span class=\"token operator\">=</span> <span class=\"token function\">KiInsertQueueApc</span><span class=\"token punctuation\">(</span>Apc<span class=\"token punctuation\">,</span> Increment<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token comment\">// 从同步级别解锁调度程序数据库，将线程 APC 队列锁和较低的 IRQL 解锁到其先前的值，并返回是否插入了 APC。</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token function\">KiUnlockDispatcherDatabaseFromSynchLevel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token function\">KeReleaseInStackQueuedSpinLock</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>LockHandle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token keyword\">return</span> Inserted<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>此函数又调用  <code>KiInsertQueueApc</code>  函数</p>\n<h3 id=\"kiinsertqueueapc\"><a class=\"anchor\" href=\"#kiinsertqueueapc\">#</a> KiInsertQueueApc</h3>\n<p>KiInsertQueueApc 说明：</p>\n<ol>\n<li>\n<p>根据 KAPC 结构中的 ApcStateIndex 找到对应的 APC 队列</p>\n</li>\n<li>\n<p>再根据 KAPC 结构中的 ApcMode 确定是用户队列还是内核队列</p>\n</li>\n<li>\n<p>将 KAPC 挂到对应的队列中 (挂到 KAPC 的 ApcListEntry 处)</p>\n</li>\n<li>\n<p>再根据 KAPC 结构中的 Inserted 置 1，标识当前的 KAPC 为已插入状态</p>\n</li>\n<li>\n<p>修改 KAPC_STATE 结构中的 KernelApcPending/UserApcPending</p>\n</li>\n</ol>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>BOOLEAN</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>FASTCALL</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">KiInsertQueueApc</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    IN PKAPC Apc<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    IN KPRIORITY Increment</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">/*++</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>Routine Description:</pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    此函数将 APC 对象插入到线程的 APC 队列中。</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    线程对象的地址、APC 队列和 APC 的类型都是从 APC 对象派生出来的。</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    如果 APC 对象已经在 APC 队列中，则不执行操作并返回函数值 False。</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    如果将 APC 插入到指定的 APC 队列中，则将其插入状态设置为 true，并返回函数值 true。</pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    N.B. 在调用此例程时，必须保持线程 APC 队列锁和调度程序数据库锁定。</pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>Arguments:</pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    Apc - Supplies a pointer to a control object of type APC.</pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    Increment - Supplies the priority increment that is to be applied if</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        queuing the APC causes a thread wait to be satisfied.</pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>Return Value:</pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    If the APC object is already in an APC queue, then a value of FALSE is</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    returned. Else a value of TRUE is returned.</pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>--*/</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    KPROCESSOR_MODE ApcMode<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    PKAPC ApcEntry<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    PKAPC_STATE ApcState<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    BOOLEAN Inserted<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    PLIST_ENTRY ListEntry<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    PKTHREAD Thread<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token comment\">// 如果 APC 对象已经在 APC 队列中，则将插入设置为 FALSE。</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token comment\">// 否则将 APC 对象插入到适当的队列中，将 APC 插入状态设置为 TRUE，检查 APC 是否应该立即交付，并将插入状态设置为 TRUE。 </span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token comment\">// For multiprocessor performance, the following code utilizes the fact</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token comment\">// that kernel APC disable count is incremented before checking whether</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token comment\">// the kernel APC queue is nonempty.</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token comment\">// See KeLeaveCriticalRegion().</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    Thread <span class=\"token operator\">=</span> Apc<span class=\"token operator\">-></span>Thread<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Apc<span class=\"token operator\">-></span>Inserted<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        Inserted <span class=\"token operator\">=</span> FALSE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Apc<span class=\"token operator\">-></span>ApcStateIndex <span class=\"token operator\">==</span> InsertApcEnvironment<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>            Apc<span class=\"token operator\">-></span>ApcStateIndex <span class=\"token operator\">=</span> Thread<span class=\"token operator\">-></span>ApcStateIndex<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        ApcState <span class=\"token operator\">=</span> Thread<span class=\"token operator\">-></span>ApcStatePointer<span class=\"token punctuation\">[</span>Apc<span class=\"token operator\">-></span>ApcStateIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token comment\">// 如果 NormalRoutine 值为 NULL，【则在处理器模式选择的所有其他特殊 APC 项之后插入 APC】。  </span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        <span class=\"token comment\">// 否则，将 APC 对象插入处理器模式选择的 APC 队列的尾部，除非 APC 模式是用户模式，</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token comment\">// 特殊的 APC 例程的地址是退出线程，在这种情况下，将 APC 插入到列表的前面，并设置用户 APC 挂起。  </span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre></pre></td></tr><tr><td data-num=\"67\"></td><td><pre></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        ApcMode <span class=\"token operator\">=</span> Apc<span class=\"token operator\">-></span>ApcMode<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Apc<span class=\"token operator\">-></span>NormalRoutine <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ApcMode <span class=\"token operator\">!=</span> KernelMode<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>Apc<span class=\"token operator\">-></span>KernelRoutine <span class=\"token operator\">==</span> PsExitSpecialApc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>                Thread<span class=\"token operator\">-></span>ApcState<span class=\"token punctuation\">.</span>UserApcPending <span class=\"token operator\">=</span> TRUE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>                <span class=\"token function\">InsertHeadList</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>ApcState<span class=\"token operator\">-></span>ApcListHead<span class=\"token punctuation\">[</span>ApcMode<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>                               <span class=\"token operator\">&amp;</span>Apc<span class=\"token operator\">-></span>ApcListEntry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>                <span class=\"token comment\">// 内核模式</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>                <span class=\"token function\">InsertTailList</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>ApcState<span class=\"token operator\">-></span>ApcListHead<span class=\"token punctuation\">[</span>ApcMode<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>                               <span class=\"token operator\">&amp;</span>Apc<span class=\"token operator\">-></span>ApcListEntry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>            ListEntry <span class=\"token operator\">=</span> ApcState<span class=\"token operator\">-></span>ApcListHead<span class=\"token punctuation\">[</span>ApcMode<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>Blink<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>ListEntry <span class=\"token operator\">!=</span> <span class=\"token operator\">&amp;</span>ApcState<span class=\"token operator\">-></span>ApcListHead<span class=\"token punctuation\">[</span>ApcMode<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>                ApcEntry <span class=\"token operator\">=</span> <span class=\"token function\">CONTAINING_RECORD</span><span class=\"token punctuation\">(</span>ListEntry<span class=\"token punctuation\">,</span> KAPC<span class=\"token punctuation\">,</span> ApcListEntry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ApcEntry<span class=\"token operator\">-></span>NormalRoutine <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>                ListEntry <span class=\"token operator\">=</span> ListEntry<span class=\"token operator\">-></span>Blink<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>            <span class=\"token function\">InsertHeadList</span><span class=\"token punctuation\">(</span>ListEntry<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>Apc<span class=\"token operator\">-></span>ApcListEntry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>        Apc<span class=\"token operator\">-></span>Inserted <span class=\"token operator\">=</span> TRUE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>        <span class=\"token comment\">// 如果 APC 对象的 APC 索引与线程的 APC 索引相匹配，那么检查 APC 是否应该中断线程执行，或者让线程进入等待状态。</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Apc<span class=\"token operator\">-></span>ApcStateIndex <span class=\"token operator\">==</span> Thread<span class=\"token operator\">-></span>ApcStateIndex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>            <span class=\"token comment\">// 如果 APC 的处理器模式是内核模式，那么检查 APC 是否应该中断线程或使线程脱离等待状态。 </span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>            <span class=\"token comment\">// 否则检查 APC 是否应该对线程进行排序，使其脱离可提醒的等待状态。  </span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ApcMode <span class=\"token operator\">==</span> KernelMode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>                Thread<span class=\"token operator\">-></span>ApcState<span class=\"token punctuation\">.</span>KernelApcPending <span class=\"token operator\">=</span> TRUE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Thread<span class=\"token operator\">-></span>State <span class=\"token operator\">==</span> Running<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>                    <span class=\"token comment\">// 这个函数会获取  APC_LEVEL 等级的 IRQL</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>                    <span class=\"token function\">KiRequestApcInterrupt</span><span class=\"token punctuation\">(</span>Thread<span class=\"token operator\">-></span>NextProcessor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>Thread<span class=\"token operator\">-></span>State <span class=\"token operator\">==</span> Waiting<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>                          <span class=\"token punctuation\">(</span>Thread<span class=\"token operator\">-></span>WaitIrql <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>                          <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>Apc<span class=\"token operator\">-></span>NormalRoutine <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>                          <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>Thread<span class=\"token operator\">-></span>KernelApcDisable <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>                          <span class=\"token punctuation\">(</span>Thread<span class=\"token operator\">-></span>ApcState<span class=\"token punctuation\">.</span>KernelApcInProgress <span class=\"token operator\">==</span> FALSE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>                    <span class=\"token comment\">// 唤醒线程 使其从等待队列中移除</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>                    <span class=\"token function\">KiUnwaitThread</span><span class=\"token punctuation\">(</span>Thread<span class=\"token punctuation\">,</span> STATUS_KERNEL_APC<span class=\"token punctuation\">,</span> Increment<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>            <span class=\"token comment\">// 如果不是内核模式那么</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>Thread<span class=\"token operator\">-></span>State <span class=\"token operator\">==</span> Waiting<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>                      <span class=\"token punctuation\">(</span>Thread<span class=\"token operator\">-></span>WaitMode <span class=\"token operator\">==</span> UserMode<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>                      <span class=\"token punctuation\">(</span>Thread<span class=\"token operator\">-></span>Alertable <span class=\"token operator\">||</span> Thread<span class=\"token operator\">-></span>ApcState<span class=\"token punctuation\">.</span>UserApcPending<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>                Thread<span class=\"token operator\">-></span>ApcState<span class=\"token punctuation\">.</span>UserApcPending <span class=\"token operator\">=</span> TRUE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>                <span class=\"token function\">KiUnwaitThread</span><span class=\"token punctuation\">(</span>Thread<span class=\"token punctuation\">,</span> STATUS_USER_APC<span class=\"token punctuation\">,</span> Increment<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>        Inserted <span class=\"token operator\">=</span> TRUE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>    <span class=\"token comment\">// 返回 APC 对象是否插入到 APC 队列中。</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>    <span class=\"token keyword\">return</span> Inserted<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"作业\"><a class=\"anchor\" href=\"#作业\">#</a> 作业</h1>\n<ol>\n<li>\n<p>创建一个进程，使用 Sleep () 函数让其处于等待状态，然后向其 APC 队列插入 APC, 观蔡是否执行。</p>\n</li>\n<li>\n<p>如何让上题中的 APC 函数执行？</p>\n</li>\n</ol>\n<p>代码：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">_WIN32_WINNT</span> <span class=\"token expression\"><span class=\"token number\">0x0400</span></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;windows.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>DWORD WINAPI <span class=\"token function\">ThreadProc</span><span class=\"token punctuation\">(</span>LPVOID pM<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token comment\">//SleepEx(3000,TRUE);</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">10000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ThreadProc执行了 %d\\n\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token function\">SleepEx</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">,</span> TRUE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> k <span class=\"token operator\">&lt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> k<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ThreadProc执行了-%d\\n\"</span><span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">void</span> WINAPI <span class=\"token function\">ApcProc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> para<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ApcProc执行了-------!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">void</span> WINAPI <span class=\"token function\">ApcProc2</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> para<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ApcProc2执行了-------!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\tDWORD dwRet<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\tHANDLE handle <span class=\"token operator\">=</span> <span class=\"token function\">CreateThread</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> ThreadProc<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token comment\">// 注入 APC </span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\tdwRet <span class=\"token operator\">=</span> <span class=\"token function\">QueueUserAPC</span><span class=\"token punctuation\">(</span>ApcProc<span class=\"token punctuation\">,</span> handle<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dwRet<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Apc1插入成功！\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\tdwRet <span class=\"token operator\">=</span> <span class=\"token function\">QueueUserAPC</span><span class=\"token punctuation\">(</span>ApcProc2<span class=\"token punctuation\">,</span> handle<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dwRet<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Apc2插入成功！\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t<span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>当 APC 被唤醒的时候两个 APC 一起执行了。</p>\n<p><img data-src=\"image001.png\" alt=\"\" /></p>\n<p>设置为可被唤醒状态时</p>\n<p><img data-src=\"image002.png\" alt=\"\" /></p>\n",
            "tags": [
                "KAPC",
                "QueueUserAPC",
                "NtQueueApcThread",
                "KeInitializeApc",
                "KeInsertQueueApc",
                "KiInsertQueueApc"
            ]
        },
        {
            "id": "https://or0kit.github.io/Bin/Core/WindowsXp/Apc/APC%E6%9C%BA%E5%88%B6-02APC%E7%9A%84%E5%A4%87%E7%94%A8%E9%98%9F%E5%88%97/",
            "url": "https://or0kit.github.io/Bin/Core/WindowsXp/Apc/APC%E6%9C%BA%E5%88%B6-02APC%E7%9A%84%E5%A4%87%E7%94%A8%E9%98%9F%E5%88%97/",
            "title": "APC机制-02APC的备用队列",
            "date_published": "2022-02-25T11:22:59.000Z",
            "content_html": "<h1 id=\"楔子\"><a class=\"anchor\" href=\"#楔子\">#</a> 楔子</h1>\n<p>要点回顾：在上一节中我们讲过，如果想让线程做什么事情，就给它的 APC 队列里面挂一个 APC。</p>\n<p>发现在  <code>KTHREAD</code>  结构体中除了  <code>ApcState</code>  还有其他与 APC 相关的成员</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kd&gt; dt _KTHREAD</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>nt!_KTHREAD</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   ...</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   +0x034 ApcState         : _KAPC_STATE</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   ...</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   +0x138 ApcStatePointer  : [2] Ptr32 _KAPC_STATE</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  ...</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   +0x14c SavedApcState    : _KAPC_STATE</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  ...</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   +0x165 ApcStateIndex    : UChar</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   +0x166 ApcQueueable     : UChar</pre></td></tr></table></figure><p>以下内容就是为了弄清楚这些成员的作用。</p>\n<h2 id=\"savedapcstate的意义\"><a class=\"anchor\" href=\"#savedapcstate的意义\">#</a> SavedApcState 的意义</h2>\n<p>线程 APC 队列中的 APC 函数都是与进程相关联的，具体点说：A 进程的 T 线程中的所有 APC 函数，要访问的内存地址都是 A 进程的。</p>\n<p>但线程是可以挂靠到其他的进程：比如 A 进程的线程 T，通过修改 Cr3 (改为 B 进程的页目录基址)，就可以访问 B 进程地址空间，即所谓 “进程挂靠”。</p>\n<p>当 T 线程挂靠 B 进程后，APC 队列中存储的却仍然是原来的 APC！具体点说，比如某个 APC 函数要读取一个地址为 0x12345678 的数据，如果此时进行读取，读到的将是 B 进程的地址空间，这样逻辑就错误了！</p>\n<p>为了避免混乱，在 T 线程挂靠 B 进程时，会将 ApcState 中的值暂时存储到 SavedApcState 中，等回到原进程 A 时，再将 APC 队列恢复。</p>\n<p>所以，  <code>SavedApcState</code>  又称为备用 APC 队列。</p>\n<h2 id=\"挂靠环境下apcstate的意义\"><a class=\"anchor\" href=\"#挂靠环境下apcstate的意义\">#</a> 挂靠环境下 ApcState 的意义</h2>\n<p>在挂靠的环境下，也是可以向线程 APC 队列插入 APC 的，那这种情况下，使用的是哪个 APC 队列呢？</p>\n<p>当 A 进程的 T 线程挂靠 B 进程时，A 是 T 的所属进程，B 是 T 的挂靠进程。</p>\n<p><code>ApcState</code>     \tB 进程相关的 APC 函数</p>\n<p><code>SavedApcState</code> \tA 进程相关的 APC 函数</p>\n<p>在正常情况下，当前进程就是所属进程 A，如果是挂靠情况下，当前进程就是挂靠进程 B。</p>\n<p>当前进程与当前线程，有相关的 API 获取，查看这些函数，可以发现他们的本质都是取 fs:[0x124] 接着又取 0x44 。</p>\n<h2 id=\"apcstatepointer\"><a class=\"anchor\" href=\"#apcstatepointer\">#</a> ApcStatePointer</h2>\n<p>为了操作方便，_KTHREAD 结构体中定义了一个指针数组  <code>ApcStatePointer</code>  ，长度为 2。</p>\n<p>正常情况下</p>\n<div class=\"note primary no-icon\">\n<p>ApcStatePointer [0]  指向  <code>ApcState</code> <br />\nApcStatePointer [1]  指向  <code>SavedApcState</code></p>\n</div>\n<p>挂靠情况下：</p>\n<div class=\"note primary no-icon\">\n<p>ApcStatePointer [0]  指向  <code>SavedApcState</code> <br />\nApcStatePointer [1]  指向  <code>ApcState</code></p>\n</div>\n<h2 id=\"apcstateindex\"><a class=\"anchor\" href=\"#apcstateindex\">#</a> ApcStateIndex</h2>\n<p>ApcStateIndex 用来标识当前线程处于什么状态：</p>\n<p><code>0</code>  正常状态<br />\n <code>1</code>  挂靠状态</p>\n<h2 id=\"apcstatepointer-与-apcstateindex组合寻址\"><a class=\"anchor\" href=\"#apcstatepointer-与-apcstateindex组合寻址\">#</a> ApcStatePointer 与 ApcStateIndex 组合寻址</h2>\n<p>正常情况下，向 ApcState 队列中插入 APC 时：</p>\n<p>ApcStatePointer [0]  指向  <code>ApcState</code>  此时 ApcStateIndex 的值为 0<br />\nApcStatePointer [ApcStateIndex]  指向  <code>ApcState</code></p>\n<p>挂靠情况下，向 ApcState 队列中插入 APC 时：<br />\nApcStatePointer [1]  指向  <code>ApcState</code>  此时 ApcStateIndex 的值为 1<br />\nApcStatePointer [ApcStateIndex]  指向  <code>ApcState</code></p>\n<p>总结：<br />\n无论什么环境下，ApcStatePointer [ApcStateIndex] 指向的都是  <code>ApcState</code>  。<br />\n <code>ApcState</code>  则总是表示线程<strong>当前</strong>使用的 apc 状态。</p>\n<h2 id=\"apcqueueable\"><a class=\"anchor\" href=\"#apcqueueable\">#</a> ApcQueueable</h2>\n<p><strong>ApcQueueable 用于表示是否可以向线程的 APC 队列中插入 APC。</strong></p>\n<p>当线程正在执行退出的代码时，会将这个值设置为 0 ，如果此时执行插入 APC 的代码 (KeInsertQueueApc 后面会讲), 在插入函数中会判断这个值的状态，如果为 0，则插入失败。</p>\n<h2 id=\"作业\"><a class=\"anchor\" href=\"#作业\">#</a> 作业</h2>\n<p>分析 API  <code>NtReadVirtualMemory</code>  。<br />\n目的是了解挂靠到底做了什么、APC 是如何备份的、什么时候备份、什么时候还原的。</p>\n<p>回去写进程的挂靠和跨进程读写内存了。</p>\n<p><a href=\"https://or0kit.github.io/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B-%E8%BF%9B%E7%A8%8B%E6%8C%82%E9%9D%A0%E5%92%8C%E8%B7%A8%E8%BF%9B%E7%A8%8B%E8%AF%BB%E5%86%99%E5%86%85%E5%AD%98/\">https://or0kit.github.io/ 进程与线程 - 进程挂靠和跨进程读写内存 /</a></p>\n",
            "tags": [
                "APC的备用队列"
            ]
        },
        {
            "id": "https://or0kit.github.io/Bin/Core/WindowsXp/Apc/APC%E6%9C%BA%E5%88%B6-01%E5%88%9D%E8%AF%86APC/",
            "url": "https://or0kit.github.io/Bin/Core/WindowsXp/Apc/APC%E6%9C%BA%E5%88%B6-01%E5%88%9D%E8%AF%86APC/",
            "title": "APC机制-01初识APC",
            "date_published": "2022-02-24T06:35:12.000Z",
            "content_html": "<h1 id=\"楔子\"><a class=\"anchor\" href=\"#楔子\">#</a> 楔子</h1>\n<p>线程是不能被 “杀掉”、“挂起” 和 “恢复” 的，线程在执行的时候自己占据着 CPU，无论多核还是单核，线程都是自己做的这些事，那么其他线程如何控制它呢？如何改变一个线程的行为？可以给他提供一个函数，让它自己去调用，这个函数就是 APC (Asyncroneus Procedure Call)，即异步过程调用。</p>\n<p>首先有以下疑问：</p>\n<blockquote>\n<p>至于为什么会执行 APC，上述已说。<br />\n谁插入的 APC？<br />\n插入到哪里？<br />\n谁执行的 APC？<br />\n什么时候执行 APC？</p>\n</blockquote>\n<h2 id=\"apc-队列\"><a class=\"anchor\" href=\"#apc-队列\">#</a> APC 队列</h2>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kd&gt; dt _KTHREAD</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>nt!_KTHREAD</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t...</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t   +0x034 ApcState         : _KAPC_STATE</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t...</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>kd&gt; dt _KAPC_STATE</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>nt!_KAPC_STATE</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   +0x000 ApcListHead\t&#x2F;&#x2F;2 个 APC 队列 用户 APC 和内核 APC </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   +0x010 Process\t\t&#x2F;&#x2F; 线程所属或者所挂靠的进程</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   +0x014 KernelApcInProgress\t&#x2F;&#x2F; 内核 APC 是否正在执行</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   +0x015 KernelApcPending\t&#x2F;&#x2F; 是否有正在等待执行的内核 APC</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   +0x016 UserApcPending\t&#x2F;&#x2F; 是否有正在等待执行的用户 APC</pre></td></tr></table></figure><p>用户 APC：APC 函数地址位于用户空间，在用户空间执行.<br />\n 内核 APC：APC 函数地址位于内核空间，在内核空间执行.</p>\n<h2 id=\"apc-结构\"><a class=\"anchor\" href=\"#apc-结构\">#</a> APC 结构</h2>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kd&gt; dt _KAPC</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>nt!_KAPC</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   +0x000 Type</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   +0x002 Size</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   +0x004 Spare0                                 </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   +0x008 Thread                                 </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   +0x00c ApcListEntry</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   +0x014 KernelRoutine</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   +0x018 RundownRoutine</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   +0x01c NormalRoutine   &#x2F;&#x2F; 找到你提供的 APC 函数，并不完全等于 APC 函数的地址，后面会讲。</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   +0x020 NormalContext</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   +0x024 SystemArgument1</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   +0x028 SystemArgument2</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   +0x02c ApcStateIndex</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   +0x02d ApcMode</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   +0x02e Inserted</pre></td></tr></table></figure><h2 id=\"apc函数何时被执行\"><a class=\"anchor\" href=\"#apc函数何时被执行\">#</a> APC 函数何时被执行？</h2>\n<p><code>KiServiceExit</code>  函数：这个函数是系统调用、异常或中断返回用户空间的必经之路。</p>\n<p><code>KiDeliverApc</code>  函数：负责执行 APC 函数。</p>\n<h2 id=\"分析-terminatethread-和-suspendthread-函数\"><a class=\"anchor\" href=\"#分析-terminatethread-和-suspendthread-函数\">#</a> 分析 TerminateThread 和 SuspendThread 函数</h2>\n<p>分析  <code>TerminateThread</code>  /  <code>SuspendThread</code>  是如何实现的（从 3 环开始分析）以此证明控制别的线程就是通过 APC 实现的。</p>\n<p>分析流程为：</p>\n<ol>\n<li><code>TerminateThread -&gt; NtTerminateThread -&gt; PspTerminateThreadByPointer -&gt; KeInitializeApc、KeInsertQueueApc</code></li>\n<li><code>SuspendThread -&gt; NtSuspendThread -&gt; PsSuspendThread -&gt; KeSuspendThread -&gt; KiInsertQueueApc</code></li>\n</ol>\n<p>可以发现函数调用到最后都是通过 APC 控制的。</p>\n<h2 id=\"自己编写代码向某个线程插入一个用户apc\"><a class=\"anchor\" href=\"#自己编写代码向某个线程插入一个用户apc\">#</a> 自己编写代码向某个线程插入一个用户 APC</h2>\n<p>使用现成的 API 就可以，目的是体会什么是 APC。</p>\n<p>这里最简单的办法就是，自己给自己插入 APC，自己创建一个线程一直打印一句话，然后主线程给这个线程插入 APC，打印另一句话。</p>\n<p>代码如下：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>pass</pre></td></tr></table></figure>",
            "tags": [
                "APC的本质"
            ]
        }
    ]
}